
FreeRTOS_HW_Verification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002220c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004f78  080223dc  080223dc  000233dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08027354  08027354  00029210  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08027354  08027354  00028354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802735c  0802735c  00029210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802735c  0802735c  0002835c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08027360  08027360  00028360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d0  20000000  08027364  00029000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000d0  08027434  000290d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000170  080274d4  00029170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00028700  20000210  08027574  00029210  2**2
                  ALLOC
 12 ._user_heap_stack 00005000  20028910  08027574  00029910  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00029210  2**0
                  CONTENTS, READONLY
 14 .debug_info   00046a63  00000000  00000000  00029240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000b37b  00000000  00000000  0006fca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003168  00000000  00000000  0007b020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000026c4  00000000  00000000  0007e188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003fb22  00000000  00000000  0008084c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00050b72  00000000  00000000  000c036e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00123ec2  00000000  00000000  00110ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00234da2  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000d31c  00000000  00000000  00234de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000081  00000000  00000000  00242104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000210 	.word	0x20000210
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080223c4 	.word	0x080223c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000214 	.word	0x20000214
 800020c:	080223c4 	.word	0x080223c4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	463b      	mov	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ee:	4b21      	ldr	r3, [pc, #132]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005f0:	4a21      	ldr	r2, [pc, #132]	@ (8000678 <MX_ADC1_Init+0x9c>)
 80005f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000602:	4b1c      	ldr	r3, [pc, #112]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000608:	4b1a      	ldr	r3, [pc, #104]	@ (8000674 <MX_ADC1_Init+0x98>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800060e:	4b19      	ldr	r3, [pc, #100]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000610:	2200      	movs	r2, #0
 8000612:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000616:	4b17      	ldr	r3, [pc, #92]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000618:	2200      	movs	r2, #0
 800061a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800061c:	4b15      	ldr	r3, [pc, #84]	@ (8000674 <MX_ADC1_Init+0x98>)
 800061e:	4a17      	ldr	r2, [pc, #92]	@ (800067c <MX_ADC1_Init+0xa0>)
 8000620:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000622:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000628:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <MX_ADC1_Init+0x98>)
 800062a:	2201      	movs	r2, #1
 800062c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800062e:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000636:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000638:	2201      	movs	r2, #1
 800063a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800063c:	480d      	ldr	r0, [pc, #52]	@ (8000674 <MX_ADC1_Init+0x98>)
 800063e:	f001 ff0d 	bl	800245c <HAL_ADC_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000648:	f000 fe1c 	bl	8001284 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800064c:	2300      	movs	r3, #0
 800064e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000650:	2301      	movs	r3, #1
 8000652:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	@ (8000674 <MX_ADC1_Init+0x98>)
 800065e:	f002 f8ad 	bl	80027bc <HAL_ADC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000668:	f000 fe0c 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	2000022c 	.word	0x2000022c
 8000678:	40012000 	.word	0x40012000
 800067c:	0f000001 	.word	0x0f000001

08000680 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	@ 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a2c      	ldr	r2, [pc, #176]	@ (8000750 <HAL_ADC_MspInit+0xd0>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d152      	bne.n	8000748 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006a6:	4a2b      	ldr	r2, [pc, #172]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80006ae:	4b29      	ldr	r3, [pc, #164]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b26      	ldr	r3, [pc, #152]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a25      	ldr	r2, [pc, #148]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b23      	ldr	r3, [pc, #140]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006d2:	2301      	movs	r3, #1
 80006d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d6:	2303      	movs	r3, #3
 80006d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	481c      	ldr	r0, [pc, #112]	@ (8000758 <HAL_ADC_MspInit+0xd8>)
 80006e6:	f004 fcc5 	bl	8005074 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80006ea:	4b1c      	ldr	r3, [pc, #112]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006ec:	4a1c      	ldr	r2, [pc, #112]	@ (8000760 <HAL_ADC_MspInit+0xe0>)
 80006ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006f0:	4b1a      	ldr	r3, [pc, #104]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006f6:	4b19      	ldr	r3, [pc, #100]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006fc:	4b17      	ldr	r3, [pc, #92]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000702:	4b16      	ldr	r3, [pc, #88]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000704:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000708:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800070a:	4b14      	ldr	r3, [pc, #80]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800070c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000710:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000712:	4b12      	ldr	r3, [pc, #72]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000714:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000718:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800071a:	4b10      	ldr	r3, [pc, #64]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800071c:	2200      	movs	r2, #0
 800071e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000720:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000722:	2200      	movs	r2, #0
 8000724:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000726:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000728:	2200      	movs	r2, #0
 800072a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800072c:	480b      	ldr	r0, [pc, #44]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800072e:	f002 fe07 	bl	8003340 <HAL_DMA_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8000738:	f000 fda4 	bl	8001284 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4a07      	ldr	r2, [pc, #28]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000740:	639a      	str	r2, [r3, #56]	@ 0x38
 8000742:	4a06      	ldr	r2, [pc, #24]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000748:	bf00      	nop
 800074a:	3728      	adds	r7, #40	@ 0x28
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40012000 	.word	0x40012000
 8000754:	40023800 	.word	0x40023800
 8000758:	40020000 	.word	0x40020000
 800075c:	20000274 	.word	0x20000274
 8000760:	40026470 	.word	0x40026470

08000764 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000768:	4b0d      	ldr	r3, [pc, #52]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800076a:	4a0e      	ldr	r2, [pc, #56]	@ (80007a4 <MX_CRC_Init+0x40>)
 800076c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800076e:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000770:	2200      	movs	r2, #0
 8000772:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000774:	4b0a      	ldr	r3, [pc, #40]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000776:	2200      	movs	r2, #0
 8000778:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800077c:	2200      	movs	r2, #0
 800077e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000780:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000788:	2201      	movs	r2, #1
 800078a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800078e:	f002 fbcd 	bl	8002f2c <HAL_CRC_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000798:	f000 fd74 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	200002d4 	.word	0x200002d4
 80007a4:	40023000 	.word	0x40023000

080007a8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a0a      	ldr	r2, [pc, #40]	@ (80007e0 <HAL_CRC_MspInit+0x38>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d10b      	bne.n	80007d2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80007ba:	4b0a      	ldr	r3, [pc, #40]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a09      	ldr	r2, [pc, #36]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80007d2:	bf00      	nop
 80007d4:	3714      	adds	r7, #20
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40023000 	.word	0x40023000
 80007e4:	40023800 	.word	0x40023800

080007e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ee:	4b3e      	ldr	r3, [pc, #248]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a3d      	ldr	r2, [pc, #244]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b3b      	ldr	r3, [pc, #236]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000806:	4b38      	ldr	r3, [pc, #224]	@ (80008e8 <MX_DMA_Init+0x100>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a37      	ldr	r2, [pc, #220]	@ (80008e8 <MX_DMA_Init+0x100>)
 800080c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b35      	ldr	r3, [pc, #212]	@ (80008e8 <MX_DMA_Init+0x100>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2105      	movs	r1, #5
 8000822:	200b      	movs	r0, #11
 8000824:	f002 fb58 	bl	8002ed8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000828:	200b      	movs	r0, #11
 800082a:	f002 fb71 	bl	8002f10 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2105      	movs	r1, #5
 8000832:	200c      	movs	r0, #12
 8000834:	f002 fb50 	bl	8002ed8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000838:	200c      	movs	r0, #12
 800083a:	f002 fb69 	bl	8002f10 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2105      	movs	r1, #5
 8000842:	200d      	movs	r0, #13
 8000844:	f002 fb48 	bl	8002ed8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000848:	200d      	movs	r0, #13
 800084a:	f002 fb61 	bl	8002f10 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2105      	movs	r1, #5
 8000852:	200e      	movs	r0, #14
 8000854:	f002 fb40 	bl	8002ed8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000858:	200e      	movs	r0, #14
 800085a:	f002 fb59 	bl	8002f10 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	2105      	movs	r1, #5
 8000862:	2010      	movs	r0, #16
 8000864:	f002 fb38 	bl	8002ed8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000868:	2010      	movs	r0, #16
 800086a:	f002 fb51 	bl	8002f10 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2105      	movs	r1, #5
 8000872:	2011      	movs	r0, #17
 8000874:	f002 fb30 	bl	8002ed8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000878:	2011      	movs	r0, #17
 800087a:	f002 fb49 	bl	8002f10 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2105      	movs	r1, #5
 8000882:	202f      	movs	r0, #47	@ 0x2f
 8000884:	f002 fb28 	bl	8002ed8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000888:	202f      	movs	r0, #47	@ 0x2f
 800088a:	f002 fb41 	bl	8002f10 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2105      	movs	r1, #5
 8000892:	2038      	movs	r0, #56	@ 0x38
 8000894:	f002 fb20 	bl	8002ed8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000898:	2038      	movs	r0, #56	@ 0x38
 800089a:	f002 fb39 	bl	8002f10 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2105      	movs	r1, #5
 80008a2:	2039      	movs	r0, #57	@ 0x39
 80008a4:	f002 fb18 	bl	8002ed8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80008a8:	2039      	movs	r0, #57	@ 0x39
 80008aa:	f002 fb31 	bl	8002f10 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2105      	movs	r1, #5
 80008b2:	203a      	movs	r0, #58	@ 0x3a
 80008b4:	f002 fb10 	bl	8002ed8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80008b8:	203a      	movs	r0, #58	@ 0x3a
 80008ba:	f002 fb29 	bl	8002f10 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2105      	movs	r1, #5
 80008c2:	203b      	movs	r0, #59	@ 0x3b
 80008c4:	f002 fb08 	bl	8002ed8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80008c8:	203b      	movs	r0, #59	@ 0x3b
 80008ca:	f002 fb21 	bl	8002f10 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2105      	movs	r1, #5
 80008d2:	203c      	movs	r0, #60	@ 0x3c
 80008d4:	f002 fb00 	bl	8002ed8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80008d8:	203c      	movs	r0, #60	@ 0x3c
 80008da:	f002 fb19 	bl	8002f10 <HAL_NVIC_EnableIRQ>

}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800

080008ec <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	printf("stack overflow from task '%s'\n", pcTaskName);
 80008f6:	6839      	ldr	r1, [r7, #0]
 80008f8:	4803      	ldr	r0, [pc, #12]	@ (8000908 <vApplicationStackOverflowHook+0x1c>)
 80008fa:	f020 fbe3 	bl	80210c4 <iprintf>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	080224c8 	.word	0x080224c8

0800090c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
	...

0800091c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  printf("Starting FreeRTOS...\n");
 8000920:	484c      	ldr	r0, [pc, #304]	@ (8000a54 <MX_FREERTOS_Init+0x138>)
 8000922:	f020 fc3f 	bl	80211a4 <puts>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of inMsgQueue */
  inMsgQueueHandle = osMessageQueueNew (16, sizeof(InMsg_t), &inMsgQueue_attributes);
 8000926:	4a4c      	ldr	r2, [pc, #304]	@ (8000a58 <MX_FREERTOS_Init+0x13c>)
 8000928:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800092c:	2010      	movs	r0, #16
 800092e:	f00c fe07 	bl	800d540 <osMessageQueueNew>
 8000932:	4603      	mov	r3, r0
 8000934:	4a49      	ldr	r2, [pc, #292]	@ (8000a5c <MX_FREERTOS_Init+0x140>)
 8000936:	6013      	str	r3, [r2, #0]

  /* creation of outMsgQueue */
  outMsgQueueHandle = osMessageQueueNew (16, sizeof(OutMsg_t), &outMsgQueue_attributes);
 8000938:	4a49      	ldr	r2, [pc, #292]	@ (8000a60 <MX_FREERTOS_Init+0x144>)
 800093a:	2110      	movs	r1, #16
 800093c:	2010      	movs	r0, #16
 800093e:	f00c fdff 	bl	800d540 <osMessageQueueNew>
 8000942:	4603      	mov	r3, r0
 8000944:	4a47      	ldr	r2, [pc, #284]	@ (8000a64 <MX_FREERTOS_Init+0x148>)
 8000946:	6013      	str	r3, [r2, #0]

  /* creation of uartQueue */
  uartQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &uartQueue_attributes);
 8000948:	4a47      	ldr	r2, [pc, #284]	@ (8000a68 <MX_FREERTOS_Init+0x14c>)
 800094a:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800094e:	2008      	movs	r0, #8
 8000950:	f00c fdf6 	bl	800d540 <osMessageQueueNew>
 8000954:	4603      	mov	r3, r0
 8000956:	4a45      	ldr	r2, [pc, #276]	@ (8000a6c <MX_FREERTOS_Init+0x150>)
 8000958:	6013      	str	r3, [r2, #0]

  /* creation of i2cQueue */
  i2cQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &i2cQueue_attributes);
 800095a:	4a45      	ldr	r2, [pc, #276]	@ (8000a70 <MX_FREERTOS_Init+0x154>)
 800095c:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000960:	2008      	movs	r0, #8
 8000962:	f00c fded 	bl	800d540 <osMessageQueueNew>
 8000966:	4603      	mov	r3, r0
 8000968:	4a42      	ldr	r2, [pc, #264]	@ (8000a74 <MX_FREERTOS_Init+0x158>)
 800096a:	6013      	str	r3, [r2, #0]

  /* creation of spiQueue */
  spiQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &spiQueue_attributes);
 800096c:	4a42      	ldr	r2, [pc, #264]	@ (8000a78 <MX_FREERTOS_Init+0x15c>)
 800096e:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000972:	2008      	movs	r0, #8
 8000974:	f00c fde4 	bl	800d540 <osMessageQueueNew>
 8000978:	4603      	mov	r3, r0
 800097a:	4a40      	ldr	r2, [pc, #256]	@ (8000a7c <MX_FREERTOS_Init+0x160>)
 800097c:	6013      	str	r3, [r2, #0]

  /* creation of adcQueue */
  adcQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &adcQueue_attributes);
 800097e:	4a40      	ldr	r2, [pc, #256]	@ (8000a80 <MX_FREERTOS_Init+0x164>)
 8000980:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000984:	2008      	movs	r0, #8
 8000986:	f00c fddb 	bl	800d540 <osMessageQueueNew>
 800098a:	4603      	mov	r3, r0
 800098c:	4a3d      	ldr	r2, [pc, #244]	@ (8000a84 <MX_FREERTOS_Init+0x168>)
 800098e:	6013      	str	r3, [r2, #0]

  /* creation of timQueue */
  timQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &timQueue_attributes);
 8000990:	4a3d      	ldr	r2, [pc, #244]	@ (8000a88 <MX_FREERTOS_Init+0x16c>)
 8000992:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000996:	2008      	movs	r0, #8
 8000998:	f00c fdd2 	bl	800d540 <osMessageQueueNew>
 800099c:	4603      	mov	r3, r0
 800099e:	4a3b      	ldr	r2, [pc, #236]	@ (8000a8c <MX_FREERTOS_Init+0x170>)
 80009a0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80009a2:	4a3b      	ldr	r2, [pc, #236]	@ (8000a90 <MX_FREERTOS_Init+0x174>)
 80009a4:	2100      	movs	r1, #0
 80009a6:	483b      	ldr	r0, [pc, #236]	@ (8000a94 <MX_FREERTOS_Init+0x178>)
 80009a8:	f00c f900 	bl	800cbac <osThreadNew>
 80009ac:	4603      	mov	r3, r0
 80009ae:	4a3a      	ldr	r2, [pc, #232]	@ (8000a98 <MX_FREERTOS_Init+0x17c>)
 80009b0:	6013      	str	r3, [r2, #0]

  /* creation of UDPListenerTask */
  UDPListenerTaskHandle = osThreadNew(StartTaskUdpListener, NULL, &UDPListenerTask_attributes);
 80009b2:	4a3a      	ldr	r2, [pc, #232]	@ (8000a9c <MX_FREERTOS_Init+0x180>)
 80009b4:	2100      	movs	r1, #0
 80009b6:	483a      	ldr	r0, [pc, #232]	@ (8000aa0 <MX_FREERTOS_Init+0x184>)
 80009b8:	f00c f8f8 	bl	800cbac <osThreadNew>
 80009bc:	4603      	mov	r3, r0
 80009be:	4a39      	ldr	r2, [pc, #228]	@ (8000aa4 <MX_FREERTOS_Init+0x188>)
 80009c0:	6013      	str	r3, [r2, #0]

  /* creation of DispatcherTask */
  DispatcherTaskHandle = osThreadNew(StartTaskDispatcher, NULL, &DispatcherTask_attributes);
 80009c2:	4a39      	ldr	r2, [pc, #228]	@ (8000aa8 <MX_FREERTOS_Init+0x18c>)
 80009c4:	2100      	movs	r1, #0
 80009c6:	4839      	ldr	r0, [pc, #228]	@ (8000aac <MX_FREERTOS_Init+0x190>)
 80009c8:	f00c f8f0 	bl	800cbac <osThreadNew>
 80009cc:	4603      	mov	r3, r0
 80009ce:	4a38      	ldr	r2, [pc, #224]	@ (8000ab0 <MX_FREERTOS_Init+0x194>)
 80009d0:	6013      	str	r3, [r2, #0]

  /* creation of uartTestTask */
  uartTestTaskHandle = osThreadNew(StartTaskUartTest, NULL, &uartTestTask_attributes);
 80009d2:	4a38      	ldr	r2, [pc, #224]	@ (8000ab4 <MX_FREERTOS_Init+0x198>)
 80009d4:	2100      	movs	r1, #0
 80009d6:	4838      	ldr	r0, [pc, #224]	@ (8000ab8 <MX_FREERTOS_Init+0x19c>)
 80009d8:	f00c f8e8 	bl	800cbac <osThreadNew>
 80009dc:	4603      	mov	r3, r0
 80009de:	4a37      	ldr	r2, [pc, #220]	@ (8000abc <MX_FREERTOS_Init+0x1a0>)
 80009e0:	6013      	str	r3, [r2, #0]

  /* creation of i2cTestTask */
  i2cTestTaskHandle = osThreadNew(StartTaskI2cTest, NULL, &i2cTestTask_attributes);
 80009e2:	4a37      	ldr	r2, [pc, #220]	@ (8000ac0 <MX_FREERTOS_Init+0x1a4>)
 80009e4:	2100      	movs	r1, #0
 80009e6:	4837      	ldr	r0, [pc, #220]	@ (8000ac4 <MX_FREERTOS_Init+0x1a8>)
 80009e8:	f00c f8e0 	bl	800cbac <osThreadNew>
 80009ec:	4603      	mov	r3, r0
 80009ee:	4a36      	ldr	r2, [pc, #216]	@ (8000ac8 <MX_FREERTOS_Init+0x1ac>)
 80009f0:	6013      	str	r3, [r2, #0]

  /* creation of spiTestTask */
  spiTestTaskHandle = osThreadNew(StartTaskSpiTest, NULL, &spiTestTask_attributes);
 80009f2:	4a36      	ldr	r2, [pc, #216]	@ (8000acc <MX_FREERTOS_Init+0x1b0>)
 80009f4:	2100      	movs	r1, #0
 80009f6:	4836      	ldr	r0, [pc, #216]	@ (8000ad0 <MX_FREERTOS_Init+0x1b4>)
 80009f8:	f00c f8d8 	bl	800cbac <osThreadNew>
 80009fc:	4603      	mov	r3, r0
 80009fe:	4a35      	ldr	r2, [pc, #212]	@ (8000ad4 <MX_FREERTOS_Init+0x1b8>)
 8000a00:	6013      	str	r3, [r2, #0]

  /* creation of adcTestTask */
  adcTestTaskHandle = osThreadNew(StartTaskAdcTest, NULL, &adcTestTask_attributes);
 8000a02:	4a35      	ldr	r2, [pc, #212]	@ (8000ad8 <MX_FREERTOS_Init+0x1bc>)
 8000a04:	2100      	movs	r1, #0
 8000a06:	4835      	ldr	r0, [pc, #212]	@ (8000adc <MX_FREERTOS_Init+0x1c0>)
 8000a08:	f00c f8d0 	bl	800cbac <osThreadNew>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	4a34      	ldr	r2, [pc, #208]	@ (8000ae0 <MX_FREERTOS_Init+0x1c4>)
 8000a10:	6013      	str	r3, [r2, #0]

  /* creation of timTestTask */
  timTestTaskHandle = osThreadNew(StartTaskTimTest, NULL, &timTestTask_attributes);
 8000a12:	4a34      	ldr	r2, [pc, #208]	@ (8000ae4 <MX_FREERTOS_Init+0x1c8>)
 8000a14:	2100      	movs	r1, #0
 8000a16:	4834      	ldr	r0, [pc, #208]	@ (8000ae8 <MX_FREERTOS_Init+0x1cc>)
 8000a18:	f00c f8c8 	bl	800cbac <osThreadNew>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	4a33      	ldr	r2, [pc, #204]	@ (8000aec <MX_FREERTOS_Init+0x1d0>)
 8000a20:	6013      	str	r3, [r2, #0]

  /* creation of UDPResponderTas */
  UDPResponderTasHandle = osThreadNew(StartResponseTask, NULL, &UDPResponderTas_attributes);
 8000a22:	4a33      	ldr	r2, [pc, #204]	@ (8000af0 <MX_FREERTOS_Init+0x1d4>)
 8000a24:	2100      	movs	r1, #0
 8000a26:	4833      	ldr	r0, [pc, #204]	@ (8000af4 <MX_FREERTOS_Init+0x1d8>)
 8000a28:	f00c f8c0 	bl	800cbac <osThreadNew>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	4a32      	ldr	r2, [pc, #200]	@ (8000af8 <MX_FREERTOS_Init+0x1dc>)
 8000a30:	6013      	str	r3, [r2, #0]

  /* creation of loggerTask */
  loggerTaskHandle = osThreadNew(StartLoggerTask, NULL, &loggerTask_attributes);
 8000a32:	4a32      	ldr	r2, [pc, #200]	@ (8000afc <MX_FREERTOS_Init+0x1e0>)
 8000a34:	2100      	movs	r1, #0
 8000a36:	4832      	ldr	r0, [pc, #200]	@ (8000b00 <MX_FREERTOS_Init+0x1e4>)
 8000a38:	f00c f8b8 	bl	800cbac <osThreadNew>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	4a31      	ldr	r2, [pc, #196]	@ (8000b04 <MX_FREERTOS_Init+0x1e8>)
 8000a40:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of initDoneEvent */
  initDoneEventHandle = osEventFlagsNew(&initDoneEvent_attributes);
 8000a42:	4831      	ldr	r0, [pc, #196]	@ (8000b08 <MX_FREERTOS_Init+0x1ec>)
 8000a44:	f00c f986 	bl	800cd54 <osEventFlagsNew>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	4a30      	ldr	r2, [pc, #192]	@ (8000b0c <MX_FREERTOS_Init+0x1f0>)
 8000a4c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	080224e8 	.word	0x080224e8
 8000a58:	08026ffc 	.word	0x08026ffc
 8000a5c:	20000320 	.word	0x20000320
 8000a60:	08027014 	.word	0x08027014
 8000a64:	20000324 	.word	0x20000324
 8000a68:	0802702c 	.word	0x0802702c
 8000a6c:	20000328 	.word	0x20000328
 8000a70:	08027044 	.word	0x08027044
 8000a74:	2000032c 	.word	0x2000032c
 8000a78:	0802705c 	.word	0x0802705c
 8000a7c:	20000330 	.word	0x20000330
 8000a80:	08027074 	.word	0x08027074
 8000a84:	20000334 	.word	0x20000334
 8000a88:	0802708c 	.word	0x0802708c
 8000a8c:	20000338 	.word	0x20000338
 8000a90:	08026e94 	.word	0x08026e94
 8000a94:	08000b11 	.word	0x08000b11
 8000a98:	200002f8 	.word	0x200002f8
 8000a9c:	08026eb8 	.word	0x08026eb8
 8000aa0:	08000b39 	.word	0x08000b39
 8000aa4:	200002fc 	.word	0x200002fc
 8000aa8:	08026edc 	.word	0x08026edc
 8000aac:	08000b81 	.word	0x08000b81
 8000ab0:	20000300 	.word	0x20000300
 8000ab4:	08026f00 	.word	0x08026f00
 8000ab8:	08000b95 	.word	0x08000b95
 8000abc:	20000304 	.word	0x20000304
 8000ac0:	08026f24 	.word	0x08026f24
 8000ac4:	08000ba9 	.word	0x08000ba9
 8000ac8:	20000308 	.word	0x20000308
 8000acc:	08026f48 	.word	0x08026f48
 8000ad0:	08000bbd 	.word	0x08000bbd
 8000ad4:	2000030c 	.word	0x2000030c
 8000ad8:	08026f6c 	.word	0x08026f6c
 8000adc:	08000bd1 	.word	0x08000bd1
 8000ae0:	20000310 	.word	0x20000310
 8000ae4:	08026f90 	.word	0x08026f90
 8000ae8:	08000be5 	.word	0x08000be5
 8000aec:	20000314 	.word	0x20000314
 8000af0:	08026fb4 	.word	0x08026fb4
 8000af4:	08000bf9 	.word	0x08000bf9
 8000af8:	20000318 	.word	0x20000318
 8000afc:	08026fd8 	.word	0x08026fd8
 8000b00:	08000c0d 	.word	0x08000c0d
 8000b04:	2000031c 	.word	0x2000031c
 8000b08:	080270a4 	.word	0x080270a4
 8000b0c:	2000033c 	.word	0x2000033c

08000b10 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000b18:	f00b f950 	bl	800bdbc <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  UDP_Server_Init();
 8000b1c:	f01f fb44 	bl	80201a8 <UDP_Server_Init>
  osEventFlagsSet(initDoneEventHandle, 0x01);
 8000b20:	4b04      	ldr	r3, [pc, #16]	@ (8000b34 <StartDefaultTask+0x24>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2101      	movs	r1, #1
 8000b26:	4618      	mov	r0, r3
 8000b28:	f00c f966 	bl	800cdf8 <osEventFlagsSet>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	f00c f8e3 	bl	800ccf8 <osDelay>
 8000b32:	e7fb      	b.n	8000b2c <StartDefaultTask+0x1c>
 8000b34:	2000033c 	.word	0x2000033c

08000b38 <StartTaskUdpListener>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskUdpListener */
void StartTaskUdpListener(void *argument)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskUdpListener */
  printf("Listener waiting for network...\n");
 8000b40:	480b      	ldr	r0, [pc, #44]	@ (8000b70 <StartTaskUdpListener+0x38>)
 8000b42:	f020 fb2f 	bl	80211a4 <puts>
  osEventFlagsWait(initDoneEventHandle, 0x01, osFlagsWaitAny, osWaitForever);
 8000b46:	4b0b      	ldr	r3, [pc, #44]	@ (8000b74 <StartTaskUdpListener+0x3c>)
 8000b48:	6818      	ldr	r0, [r3, #0]
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2101      	movs	r1, #1
 8000b52:	f00c f9a7 	bl	800cea4 <osEventFlagsWait>
  printf("Network set...\n");
 8000b56:	4808      	ldr	r0, [pc, #32]	@ (8000b78 <StartTaskUdpListener+0x40>)
 8000b58:	f020 fb24 	bl	80211a4 <puts>
  printf("Starting UDP Listener...\n");
 8000b5c:	4807      	ldr	r0, [pc, #28]	@ (8000b7c <StartTaskUdpListener+0x44>)
 8000b5e:	f020 fb21 	bl	80211a4 <puts>
  UDP_Listen(); // loops here
 8000b62:	f01f fb75 	bl	8020250 <UDP_Listen>
  /* USER CODE END StartTaskUdpListener */
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	08022500 	.word	0x08022500
 8000b74:	2000033c 	.word	0x2000033c
 8000b78:	08022520 	.word	0x08022520
 8000b7c:	08022530 	.word	0x08022530

08000b80 <StartTaskDispatcher>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskDispatcher */
void StartTaskDispatcher(void *argument)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskDispatcher */
  TestDispatcher(); // loops here
 8000b88:	f01f f9d4 	bl	801ff34 <TestDispatcher>
  /* USER CODE END StartTaskDispatcher */
}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <StartTaskUartTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskUartTest */
void StartTaskUartTest(void *argument)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskUartTest */
  UartTestTask(); // loops here
 8000b9c:	f020 f84e 	bl	8020c3c <UartTestTask>
  /* USER CODE END StartTaskUartTest */
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <StartTaskI2cTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskI2cTest */
void StartTaskI2cTest(void *argument)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskI2cTest */
	I2cTestTask(); // loops here
 8000bb0:	f01f fc78 	bl	80204a4 <I2cTestTask>
  /* USER CODE END StartTaskI2cTest */
}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <StartTaskSpiTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSpiTest */
void StartTaskSpiTest(void *argument)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSpiTest */
  SpiTestTask(); // loops here
 8000bc4:	f01f fdf8 	bl	80207b8 <SpiTestTask>
  /* USER CODE END StartTaskSpiTest */
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <StartTaskAdcTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskAdcTest */
void StartTaskAdcTest(void *argument)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskAdcTest */
  AdcTestTask(); // loops here
 8000bd8:	f01f f8ea 	bl	801fdb0 <AdcTestTask>
  /* USER CODE END StartTaskAdcTest */
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <StartTaskTimTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskTimTest */
void StartTaskTimTest(void *argument)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskTimTest */
  TimTestTask(); // loops here
 8000bec:	f01f ff56 	bl	8020a9c <TimTestTask>
  /* USER CODE END StartTaskTimTest */
}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <StartResponseTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartResponseTask */
void StartResponseTask(void *argument)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartResponseTask */
  UDP_Response(); // Loops here
 8000c00:	f01f fc02 	bl	8020408 <UDP_Response>
  /* USER CODE END StartResponseTask */
}
 8000c04:	bf00      	nop
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <StartLoggerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLoggerTask */
void StartLoggerTask(void *argument)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	printf("timer Q size: %lu\n", osMessageQueueGetCount(timQueueHandle));
	printf("--------------------------------------\n");
    osDelay(10000);
    */

	stats_display();
 8000c14:	f014 ffa4 	bl	8015b60 <stats_display>
	osDelay(5000);
 8000c18:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000c1c:	f00c f86c 	bl	800ccf8 <osDelay>
	stats_display();
 8000c20:	bf00      	nop
 8000c22:	e7f7      	b.n	8000c14 <StartLoggerTask+0x8>

08000c24 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b087      	sub	sp, #28
 8000c28:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c2a:	4b27      	ldr	r3, [pc, #156]	@ (8000cc8 <MX_GPIO_Init+0xa4>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2e:	4a26      	ldr	r2, [pc, #152]	@ (8000cc8 <MX_GPIO_Init+0xa4>)
 8000c30:	f043 0310 	orr.w	r3, r3, #16
 8000c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c36:	4b24      	ldr	r3, [pc, #144]	@ (8000cc8 <MX_GPIO_Init+0xa4>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	f003 0310 	and.w	r3, r3, #16
 8000c3e:	617b      	str	r3, [r7, #20]
 8000c40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c42:	4b21      	ldr	r3, [pc, #132]	@ (8000cc8 <MX_GPIO_Init+0xa4>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	4a20      	ldr	r2, [pc, #128]	@ (8000cc8 <MX_GPIO_Init+0xa4>)
 8000c48:	f043 0304 	orr.w	r3, r3, #4
 8000c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4e:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc8 <MX_GPIO_Init+0xa4>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c52:	f003 0304 	and.w	r3, r3, #4
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc8 <MX_GPIO_Init+0xa4>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	4a1a      	ldr	r2, [pc, #104]	@ (8000cc8 <MX_GPIO_Init+0xa4>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c66:	4b18      	ldr	r3, [pc, #96]	@ (8000cc8 <MX_GPIO_Init+0xa4>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c72:	4b15      	ldr	r3, [pc, #84]	@ (8000cc8 <MX_GPIO_Init+0xa4>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	4a14      	ldr	r2, [pc, #80]	@ (8000cc8 <MX_GPIO_Init+0xa4>)
 8000c78:	f043 0302 	orr.w	r3, r3, #2
 8000c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7e:	4b12      	ldr	r3, [pc, #72]	@ (8000cc8 <MX_GPIO_Init+0xa4>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc8 <MX_GPIO_Init+0xa4>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	4a0e      	ldr	r2, [pc, #56]	@ (8000cc8 <MX_GPIO_Init+0xa4>)
 8000c90:	f043 0308 	orr.w	r3, r3, #8
 8000c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c96:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc8 <MX_GPIO_Init+0xa4>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	f003 0308 	and.w	r3, r3, #8
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ca2:	4b09      	ldr	r3, [pc, #36]	@ (8000cc8 <MX_GPIO_Init+0xa4>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca6:	4a08      	ldr	r2, [pc, #32]	@ (8000cc8 <MX_GPIO_Init+0xa4>)
 8000ca8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cae:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <MX_GPIO_Init+0xa4>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	683b      	ldr	r3, [r7, #0]

}
 8000cba:	bf00      	nop
 8000cbc:	371c      	adds	r7, #28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	40023800 	.word	0x40023800

08000ccc <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d40 <MX_I2C1_Init+0x74>)
 8000cd2:	4a1c      	ldr	r2, [pc, #112]	@ (8000d44 <MX_I2C1_Init+0x78>)
 8000cd4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d40 <MX_I2C1_Init+0x74>)
 8000cd8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d48 <MX_I2C1_Init+0x7c>)
 8000cda:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cdc:	4b18      	ldr	r3, [pc, #96]	@ (8000d40 <MX_I2C1_Init+0x74>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ce2:	4b17      	ldr	r3, [pc, #92]	@ (8000d40 <MX_I2C1_Init+0x74>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ce8:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <MX_I2C1_Init+0x74>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cee:	4b14      	ldr	r3, [pc, #80]	@ (8000d40 <MX_I2C1_Init+0x74>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cf4:	4b12      	ldr	r3, [pc, #72]	@ (8000d40 <MX_I2C1_Init+0x74>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cfa:	4b11      	ldr	r3, [pc, #68]	@ (8000d40 <MX_I2C1_Init+0x74>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d00:	4b0f      	ldr	r3, [pc, #60]	@ (8000d40 <MX_I2C1_Init+0x74>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d06:	480e      	ldr	r0, [pc, #56]	@ (8000d40 <MX_I2C1_Init+0x74>)
 8000d08:	f004 fb60 	bl	80053cc <HAL_I2C_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d12:	f000 fab7 	bl	8001284 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d16:	2100      	movs	r1, #0
 8000d18:	4809      	ldr	r0, [pc, #36]	@ (8000d40 <MX_I2C1_Init+0x74>)
 8000d1a:	f006 fd03 	bl	8007724 <HAL_I2CEx_ConfigAnalogFilter>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d24:	f000 faae 	bl	8001284 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4805      	ldr	r0, [pc, #20]	@ (8000d40 <MX_I2C1_Init+0x74>)
 8000d2c:	f006 fd45 	bl	80077ba <HAL_I2CEx_ConfigDigitalFilter>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d36:	f000 faa5 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000340 	.word	0x20000340
 8000d44:	40005400 	.word	0x40005400
 8000d48:	20404768 	.word	0x20404768

08000d4c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d50:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc0 <MX_I2C2_Init+0x74>)
 8000d52:	4a1c      	ldr	r2, [pc, #112]	@ (8000dc4 <MX_I2C2_Init+0x78>)
 8000d54:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8000d56:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc0 <MX_I2C2_Init+0x74>)
 8000d58:	4a1b      	ldr	r2, [pc, #108]	@ (8000dc8 <MX_I2C2_Init+0x7c>)
 8000d5a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 20;
 8000d5c:	4b18      	ldr	r3, [pc, #96]	@ (8000dc0 <MX_I2C2_Init+0x74>)
 8000d5e:	2214      	movs	r2, #20
 8000d60:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d62:	4b17      	ldr	r3, [pc, #92]	@ (8000dc0 <MX_I2C2_Init+0x74>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d68:	4b15      	ldr	r3, [pc, #84]	@ (8000dc0 <MX_I2C2_Init+0x74>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d6e:	4b14      	ldr	r3, [pc, #80]	@ (8000dc0 <MX_I2C2_Init+0x74>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d74:	4b12      	ldr	r3, [pc, #72]	@ (8000dc0 <MX_I2C2_Init+0x74>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d7a:	4b11      	ldr	r3, [pc, #68]	@ (8000dc0 <MX_I2C2_Init+0x74>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc0 <MX_I2C2_Init+0x74>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d86:	480e      	ldr	r0, [pc, #56]	@ (8000dc0 <MX_I2C2_Init+0x74>)
 8000d88:	f004 fb20 	bl	80053cc <HAL_I2C_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d92:	f000 fa77 	bl	8001284 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d96:	2100      	movs	r1, #0
 8000d98:	4809      	ldr	r0, [pc, #36]	@ (8000dc0 <MX_I2C2_Init+0x74>)
 8000d9a:	f006 fcc3 	bl	8007724 <HAL_I2CEx_ConfigAnalogFilter>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000da4:	f000 fa6e 	bl	8001284 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000da8:	2100      	movs	r1, #0
 8000daa:	4805      	ldr	r0, [pc, #20]	@ (8000dc0 <MX_I2C2_Init+0x74>)
 8000dac:	f006 fd05 	bl	80077ba <HAL_I2CEx_ConfigDigitalFilter>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000db6:	f000 fa65 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000394 	.word	0x20000394
 8000dc4:	40005800 	.word	0x40005800
 8000dc8:	20404768 	.word	0x20404768

08000dcc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b0ac      	sub	sp, #176	@ 0xb0
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000de4:	f107 0318 	add.w	r3, r7, #24
 8000de8:	2284      	movs	r2, #132	@ 0x84
 8000dea:	2100      	movs	r1, #0
 8000dec:	4618      	mov	r0, r3
 8000dee:	f020 fb19 	bl	8021424 <memset>
  if(i2cHandle->Instance==I2C1)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a57      	ldr	r2, [pc, #348]	@ (8000f54 <HAL_I2C_MspInit+0x188>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	f040 80b9 	bne.w	8000f70 <HAL_I2C_MspInit+0x1a4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000dfe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e02:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e04:	2300      	movs	r3, #0
 8000e06:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e08:	f107 0318 	add.w	r3, r7, #24
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f007 fa2d 	bl	800826c <HAL_RCCEx_PeriphCLKConfig>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000e18:	f000 fa34 	bl	8001284 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1c:	4b4e      	ldr	r3, [pc, #312]	@ (8000f58 <HAL_I2C_MspInit+0x18c>)
 8000e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e20:	4a4d      	ldr	r2, [pc, #308]	@ (8000f58 <HAL_I2C_MspInit+0x18c>)
 8000e22:	f043 0302 	orr.w	r3, r3, #2
 8000e26:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e28:	4b4b      	ldr	r3, [pc, #300]	@ (8000f58 <HAL_I2C_MspInit+0x18c>)
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2c:	f003 0302 	and.w	r3, r3, #2
 8000e30:	617b      	str	r3, [r7, #20]
 8000e32:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e34:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e3c:	2312      	movs	r3, #18
 8000e3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e42:	2301      	movs	r3, #1
 8000e44:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e4e:	2304      	movs	r3, #4
 8000e50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e54:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4840      	ldr	r0, [pc, #256]	@ (8000f5c <HAL_I2C_MspInit+0x190>)
 8000e5c:	f004 f90a 	bl	8005074 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e60:	4b3d      	ldr	r3, [pc, #244]	@ (8000f58 <HAL_I2C_MspInit+0x18c>)
 8000e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e64:	4a3c      	ldr	r2, [pc, #240]	@ (8000f58 <HAL_I2C_MspInit+0x18c>)
 8000e66:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e6c:	4b3a      	ldr	r3, [pc, #232]	@ (8000f58 <HAL_I2C_MspInit+0x18c>)
 8000e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e74:	613b      	str	r3, [r7, #16]
 8000e76:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 8000e78:	4b39      	ldr	r3, [pc, #228]	@ (8000f60 <HAL_I2C_MspInit+0x194>)
 8000e7a:	4a3a      	ldr	r2, [pc, #232]	@ (8000f64 <HAL_I2C_MspInit+0x198>)
 8000e7c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000e7e:	4b38      	ldr	r3, [pc, #224]	@ (8000f60 <HAL_I2C_MspInit+0x194>)
 8000e80:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e84:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e86:	4b36      	ldr	r3, [pc, #216]	@ (8000f60 <HAL_I2C_MspInit+0x194>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e8c:	4b34      	ldr	r3, [pc, #208]	@ (8000f60 <HAL_I2C_MspInit+0x194>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e92:	4b33      	ldr	r3, [pc, #204]	@ (8000f60 <HAL_I2C_MspInit+0x194>)
 8000e94:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e98:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e9a:	4b31      	ldr	r3, [pc, #196]	@ (8000f60 <HAL_I2C_MspInit+0x194>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ea0:	4b2f      	ldr	r3, [pc, #188]	@ (8000f60 <HAL_I2C_MspInit+0x194>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000ea6:	4b2e      	ldr	r3, [pc, #184]	@ (8000f60 <HAL_I2C_MspInit+0x194>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000eac:	4b2c      	ldr	r3, [pc, #176]	@ (8000f60 <HAL_I2C_MspInit+0x194>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000eb2:	4b2b      	ldr	r3, [pc, #172]	@ (8000f60 <HAL_I2C_MspInit+0x194>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000eb8:	4829      	ldr	r0, [pc, #164]	@ (8000f60 <HAL_I2C_MspInit+0x194>)
 8000eba:	f002 fa41 	bl	8003340 <HAL_DMA_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 8000ec4:	f000 f9de 	bl	8001284 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a25      	ldr	r2, [pc, #148]	@ (8000f60 <HAL_I2C_MspInit+0x194>)
 8000ecc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ece:	4a24      	ldr	r2, [pc, #144]	@ (8000f60 <HAL_I2C_MspInit+0x194>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000ed4:	4b24      	ldr	r3, [pc, #144]	@ (8000f68 <HAL_I2C_MspInit+0x19c>)
 8000ed6:	4a25      	ldr	r2, [pc, #148]	@ (8000f6c <HAL_I2C_MspInit+0x1a0>)
 8000ed8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000eda:	4b23      	ldr	r3, [pc, #140]	@ (8000f68 <HAL_I2C_MspInit+0x19c>)
 8000edc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000ee0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ee2:	4b21      	ldr	r3, [pc, #132]	@ (8000f68 <HAL_I2C_MspInit+0x19c>)
 8000ee4:	2240      	movs	r2, #64	@ 0x40
 8000ee6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ee8:	4b1f      	ldr	r3, [pc, #124]	@ (8000f68 <HAL_I2C_MspInit+0x19c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000eee:	4b1e      	ldr	r3, [pc, #120]	@ (8000f68 <HAL_I2C_MspInit+0x19c>)
 8000ef0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ef4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ef6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f68 <HAL_I2C_MspInit+0x19c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000efc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f68 <HAL_I2C_MspInit+0x19c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000f02:	4b19      	ldr	r3, [pc, #100]	@ (8000f68 <HAL_I2C_MspInit+0x19c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f08:	4b17      	ldr	r3, [pc, #92]	@ (8000f68 <HAL_I2C_MspInit+0x19c>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f0e:	4b16      	ldr	r3, [pc, #88]	@ (8000f68 <HAL_I2C_MspInit+0x19c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000f14:	4814      	ldr	r0, [pc, #80]	@ (8000f68 <HAL_I2C_MspInit+0x19c>)
 8000f16:	f002 fa13 	bl	8003340 <HAL_DMA_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <HAL_I2C_MspInit+0x158>
    {
      Error_Handler();
 8000f20:	f000 f9b0 	bl	8001284 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a10      	ldr	r2, [pc, #64]	@ (8000f68 <HAL_I2C_MspInit+0x19c>)
 8000f28:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f2a:	4a0f      	ldr	r2, [pc, #60]	@ (8000f68 <HAL_I2C_MspInit+0x19c>)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2105      	movs	r1, #5
 8000f34:	201f      	movs	r0, #31
 8000f36:	f001 ffcf 	bl	8002ed8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000f3a:	201f      	movs	r0, #31
 8000f3c:	f001 ffe8 	bl	8002f10 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000f40:	2200      	movs	r2, #0
 8000f42:	2105      	movs	r1, #5
 8000f44:	2020      	movs	r0, #32
 8000f46:	f001 ffc7 	bl	8002ed8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000f4a:	2020      	movs	r0, #32
 8000f4c:	f001 ffe0 	bl	8002f10 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000f50:	e0be      	b.n	80010d0 <HAL_I2C_MspInit+0x304>
 8000f52:	bf00      	nop
 8000f54:	40005400 	.word	0x40005400
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40020400 	.word	0x40020400
 8000f60:	200003e8 	.word	0x200003e8
 8000f64:	40026088 	.word	0x40026088
 8000f68:	20000448 	.word	0x20000448
 8000f6c:	400260a0 	.word	0x400260a0
  else if(i2cHandle->Instance==I2C2)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a58      	ldr	r2, [pc, #352]	@ (80010d8 <HAL_I2C_MspInit+0x30c>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	f040 80aa 	bne.w	80010d0 <HAL_I2C_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000f7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f80:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000f82:	2300      	movs	r3, #0
 8000f84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f88:	f107 0318 	add.w	r3, r7, #24
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f007 f96d 	bl	800826c <HAL_RCCEx_PeriphCLKConfig>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <HAL_I2C_MspInit+0x1d0>
      Error_Handler();
 8000f98:	f000 f974 	bl	8001284 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9c:	4b4f      	ldr	r3, [pc, #316]	@ (80010dc <HAL_I2C_MspInit+0x310>)
 8000f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa0:	4a4e      	ldr	r2, [pc, #312]	@ (80010dc <HAL_I2C_MspInit+0x310>)
 8000fa2:	f043 0302 	orr.w	r3, r3, #2
 8000fa6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa8:	4b4c      	ldr	r3, [pc, #304]	@ (80010dc <HAL_I2C_MspInit+0x310>)
 8000faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fac:	f003 0302 	and.w	r3, r3, #2
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000fb4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000fb8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fbc:	2312      	movs	r3, #18
 8000fbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000fce:	2304      	movs	r3, #4
 8000fd0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4841      	ldr	r0, [pc, #260]	@ (80010e0 <HAL_I2C_MspInit+0x314>)
 8000fdc:	f004 f84a 	bl	8005074 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000fe0:	4b3e      	ldr	r3, [pc, #248]	@ (80010dc <HAL_I2C_MspInit+0x310>)
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe4:	4a3d      	ldr	r2, [pc, #244]	@ (80010dc <HAL_I2C_MspInit+0x310>)
 8000fe6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000fea:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fec:	4b3b      	ldr	r3, [pc, #236]	@ (80010dc <HAL_I2C_MspInit+0x310>)
 8000fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 8000ff8:	4b3a      	ldr	r3, [pc, #232]	@ (80010e4 <HAL_I2C_MspInit+0x318>)
 8000ffa:	4a3b      	ldr	r2, [pc, #236]	@ (80010e8 <HAL_I2C_MspInit+0x31c>)
 8000ffc:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8000ffe:	4b39      	ldr	r3, [pc, #228]	@ (80010e4 <HAL_I2C_MspInit+0x318>)
 8001000:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001004:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001006:	4b37      	ldr	r3, [pc, #220]	@ (80010e4 <HAL_I2C_MspInit+0x318>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800100c:	4b35      	ldr	r3, [pc, #212]	@ (80010e4 <HAL_I2C_MspInit+0x318>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001012:	4b34      	ldr	r3, [pc, #208]	@ (80010e4 <HAL_I2C_MspInit+0x318>)
 8001014:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001018:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800101a:	4b32      	ldr	r3, [pc, #200]	@ (80010e4 <HAL_I2C_MspInit+0x318>)
 800101c:	2200      	movs	r2, #0
 800101e:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001020:	4b30      	ldr	r3, [pc, #192]	@ (80010e4 <HAL_I2C_MspInit+0x318>)
 8001022:	2200      	movs	r2, #0
 8001024:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001026:	4b2f      	ldr	r3, [pc, #188]	@ (80010e4 <HAL_I2C_MspInit+0x318>)
 8001028:	2200      	movs	r2, #0
 800102a:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800102c:	4b2d      	ldr	r3, [pc, #180]	@ (80010e4 <HAL_I2C_MspInit+0x318>)
 800102e:	2200      	movs	r2, #0
 8001030:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001032:	4b2c      	ldr	r3, [pc, #176]	@ (80010e4 <HAL_I2C_MspInit+0x318>)
 8001034:	2200      	movs	r2, #0
 8001036:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001038:	482a      	ldr	r0, [pc, #168]	@ (80010e4 <HAL_I2C_MspInit+0x318>)
 800103a:	f002 f981 	bl	8003340 <HAL_DMA_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <HAL_I2C_MspInit+0x27c>
      Error_Handler();
 8001044:	f000 f91e 	bl	8001284 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a26      	ldr	r2, [pc, #152]	@ (80010e4 <HAL_I2C_MspInit+0x318>)
 800104c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800104e:	4a25      	ldr	r2, [pc, #148]	@ (80010e4 <HAL_I2C_MspInit+0x318>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8001054:	4b25      	ldr	r3, [pc, #148]	@ (80010ec <HAL_I2C_MspInit+0x320>)
 8001056:	4a26      	ldr	r2, [pc, #152]	@ (80010f0 <HAL_I2C_MspInit+0x324>)
 8001058:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 800105a:	4b24      	ldr	r3, [pc, #144]	@ (80010ec <HAL_I2C_MspInit+0x320>)
 800105c:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001060:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001062:	4b22      	ldr	r3, [pc, #136]	@ (80010ec <HAL_I2C_MspInit+0x320>)
 8001064:	2240      	movs	r2, #64	@ 0x40
 8001066:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001068:	4b20      	ldr	r3, [pc, #128]	@ (80010ec <HAL_I2C_MspInit+0x320>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800106e:	4b1f      	ldr	r3, [pc, #124]	@ (80010ec <HAL_I2C_MspInit+0x320>)
 8001070:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001074:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001076:	4b1d      	ldr	r3, [pc, #116]	@ (80010ec <HAL_I2C_MspInit+0x320>)
 8001078:	2200      	movs	r2, #0
 800107a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800107c:	4b1b      	ldr	r3, [pc, #108]	@ (80010ec <HAL_I2C_MspInit+0x320>)
 800107e:	2200      	movs	r2, #0
 8001080:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001082:	4b1a      	ldr	r3, [pc, #104]	@ (80010ec <HAL_I2C_MspInit+0x320>)
 8001084:	2200      	movs	r2, #0
 8001086:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001088:	4b18      	ldr	r3, [pc, #96]	@ (80010ec <HAL_I2C_MspInit+0x320>)
 800108a:	2200      	movs	r2, #0
 800108c:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800108e:	4b17      	ldr	r3, [pc, #92]	@ (80010ec <HAL_I2C_MspInit+0x320>)
 8001090:	2200      	movs	r2, #0
 8001092:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001094:	4815      	ldr	r0, [pc, #84]	@ (80010ec <HAL_I2C_MspInit+0x320>)
 8001096:	f002 f953 	bl	8003340 <HAL_DMA_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <HAL_I2C_MspInit+0x2d8>
      Error_Handler();
 80010a0:	f000 f8f0 	bl	8001284 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a11      	ldr	r2, [pc, #68]	@ (80010ec <HAL_I2C_MspInit+0x320>)
 80010a8:	639a      	str	r2, [r3, #56]	@ 0x38
 80010aa:	4a10      	ldr	r2, [pc, #64]	@ (80010ec <HAL_I2C_MspInit+0x320>)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2105      	movs	r1, #5
 80010b4:	2021      	movs	r0, #33	@ 0x21
 80010b6:	f001 ff0f 	bl	8002ed8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80010ba:	2021      	movs	r0, #33	@ 0x21
 80010bc:	f001 ff28 	bl	8002f10 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2105      	movs	r1, #5
 80010c4:	2022      	movs	r0, #34	@ 0x22
 80010c6:	f001 ff07 	bl	8002ed8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80010ca:	2022      	movs	r0, #34	@ 0x22
 80010cc:	f001 ff20 	bl	8002f10 <HAL_NVIC_EnableIRQ>
}
 80010d0:	bf00      	nop
 80010d2:	37b0      	adds	r7, #176	@ 0xb0
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40005800 	.word	0x40005800
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40020400 	.word	0x40020400
 80010e4:	200004a8 	.word	0x200004a8
 80010e8:	40026058 	.word	0x40026058
 80010ec:	20000508 	.word	0x20000508
 80010f0:	400260b8 	.word	0x400260b8

080010f4 <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
	char *cr = "\r";
 8001100:	4b0b      	ldr	r3, [pc, #44]	@ (8001130 <_write+0x3c>)
 8001102:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) ptr, len, 0xFFFF);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	b29a      	uxth	r2, r3
 8001108:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800110c:	68b9      	ldr	r1, [r7, #8]
 800110e:	4809      	ldr	r0, [pc, #36]	@ (8001134 <_write+0x40>)
 8001110:	f009 fb00 	bl	800a714 <HAL_UART_Transmit>
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) cr, 1, 0xFFFF);
 8001114:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001118:	2201      	movs	r2, #1
 800111a:	6979      	ldr	r1, [r7, #20]
 800111c:	4805      	ldr	r0, [pc, #20]	@ (8001134 <_write+0x40>)
 800111e:	f009 faf9 	bl	800a714 <HAL_UART_Transmit>
	return len + 1;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	3301      	adds	r3, #1
}
 8001126:	4618      	mov	r0, r3
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	0802254c 	.word	0x0802254c
 8001134:	20000a08 	.word	0x20000a08

08001138 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800113c:	f001 f93d 	bl	80023ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001140:	f000 f822 	bl	8001188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001144:	f7ff fd6e 	bl	8000c24 <MX_GPIO_Init>
  MX_DMA_Init();
 8001148:	f7ff fb4e 	bl	80007e8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800114c:	f000 fe4c 	bl	8001de8 <MX_USART3_UART_Init>
  MX_CRC_Init();
 8001150:	f7ff fb08 	bl	8000764 <MX_CRC_Init>
  MX_UART4_Init();
 8001154:	f000 fde8 	bl	8001d28 <MX_UART4_Init>
  MX_UART5_Init();
 8001158:	f000 fe16 	bl	8001d88 <MX_UART5_Init>
  MX_I2C1_Init();
 800115c:	f7ff fdb6 	bl	8000ccc <MX_I2C1_Init>
  MX_I2C2_Init();
 8001160:	f7ff fdf4 	bl	8000d4c <MX_I2C2_Init>
  MX_SPI1_Init();
 8001164:	f000 f894 	bl	8001290 <MX_SPI1_Init>
  MX_SPI4_Init();
 8001168:	f000 f8d0 	bl	800130c <MX_SPI4_Init>
  MX_ADC1_Init();
 800116c:	f7ff fa36 	bl	80005dc <MX_ADC1_Init>
  MX_TIM6_Init();
 8001170:	f000 fd38 	bl	8001be4 <MX_TIM6_Init>
  MX_TIM2_Init();
 8001174:	f000 fce8 	bl	8001b48 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001178:	f00b fc86 	bl	800ca88 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800117c:	f7ff fbce 	bl	800091c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001180:	f00b fcb6 	bl	800caf0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001184:	bf00      	nop
 8001186:	e7fd      	b.n	8001184 <main+0x4c>

08001188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b094      	sub	sp, #80	@ 0x50
 800118c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118e:	f107 0320 	add.w	r3, r7, #32
 8001192:	2230      	movs	r2, #48	@ 0x30
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f020 f944 	bl	8021424 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001258 <SystemClock_Config+0xd0>)
 80011ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b0:	4a29      	ldr	r2, [pc, #164]	@ (8001258 <SystemClock_Config+0xd0>)
 80011b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80011b8:	4b27      	ldr	r3, [pc, #156]	@ (8001258 <SystemClock_Config+0xd0>)
 80011ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011c4:	4b25      	ldr	r3, [pc, #148]	@ (800125c <SystemClock_Config+0xd4>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a24      	ldr	r2, [pc, #144]	@ (800125c <SystemClock_Config+0xd4>)
 80011ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011ce:	6013      	str	r3, [r2, #0]
 80011d0:	4b22      	ldr	r3, [pc, #136]	@ (800125c <SystemClock_Config+0xd4>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011dc:	2302      	movs	r3, #2
 80011de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011e0:	2301      	movs	r3, #1
 80011e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011e4:	2310      	movs	r3, #16
 80011e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e8:	2302      	movs	r3, #2
 80011ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011ec:	2300      	movs	r3, #0
 80011ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011f0:	2308      	movs	r3, #8
 80011f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80011f4:	23d8      	movs	r3, #216	@ 0xd8
 80011f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011f8:	2302      	movs	r3, #2
 80011fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011fc:	2302      	movs	r3, #2
 80011fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001200:	f107 0320 	add.w	r3, r7, #32
 8001204:	4618      	mov	r0, r3
 8001206:	f006 fb75 	bl	80078f4 <HAL_RCC_OscConfig>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001210:	f000 f838 	bl	8001284 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001214:	f006 fb1e 	bl	8007854 <HAL_PWREx_EnableOverDrive>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800121e:	f000 f831 	bl	8001284 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001222:	230f      	movs	r3, #15
 8001224:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001226:	2302      	movs	r3, #2
 8001228:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800122e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001232:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001234:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001238:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800123a:	f107 030c 	add.w	r3, r7, #12
 800123e:	2107      	movs	r1, #7
 8001240:	4618      	mov	r0, r3
 8001242:	f006 fdfb 	bl	8007e3c <HAL_RCC_ClockConfig>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800124c:	f000 f81a 	bl	8001284 <Error_Handler>
  }
}
 8001250:	bf00      	nop
 8001252:	3750      	adds	r7, #80	@ 0x50
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40023800 	.word	0x40023800
 800125c:	40007000 	.word	0x40007000

08001260 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a04      	ldr	r2, [pc, #16]	@ (8001280 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d101      	bne.n	8001276 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001272:	f001 f8af 	bl	80023d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40001400 	.word	0x40001400

08001284 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001288:	b672      	cpsid	i
}
 800128a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <Error_Handler+0x8>

08001290 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001294:	4b1b      	ldr	r3, [pc, #108]	@ (8001304 <MX_SPI1_Init+0x74>)
 8001296:	4a1c      	ldr	r2, [pc, #112]	@ (8001308 <MX_SPI1_Init+0x78>)
 8001298:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800129a:	4b1a      	ldr	r3, [pc, #104]	@ (8001304 <MX_SPI1_Init+0x74>)
 800129c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012a2:	4b18      	ldr	r3, [pc, #96]	@ (8001304 <MX_SPI1_Init+0x74>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012a8:	4b16      	ldr	r3, [pc, #88]	@ (8001304 <MX_SPI1_Init+0x74>)
 80012aa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80012ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012b0:	4b14      	ldr	r3, [pc, #80]	@ (8001304 <MX_SPI1_Init+0x74>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012b6:	4b13      	ldr	r3, [pc, #76]	@ (8001304 <MX_SPI1_Init+0x74>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80012bc:	4b11      	ldr	r3, [pc, #68]	@ (8001304 <MX_SPI1_Init+0x74>)
 80012be:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80012c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80012c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001304 <MX_SPI1_Init+0x74>)
 80012c6:	2218      	movs	r2, #24
 80012c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001304 <MX_SPI1_Init+0x74>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001304 <MX_SPI1_Init+0x74>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001304 <MX_SPI1_Init+0x74>)
 80012d8:	2200      	movs	r2, #0
 80012da:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80012dc:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <MX_SPI1_Init+0x74>)
 80012de:	2207      	movs	r2, #7
 80012e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012e2:	4b08      	ldr	r3, [pc, #32]	@ (8001304 <MX_SPI1_Init+0x74>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012e8:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <MX_SPI1_Init+0x74>)
 80012ea:	2208      	movs	r2, #8
 80012ec:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012ee:	4805      	ldr	r0, [pc, #20]	@ (8001304 <MX_SPI1_Init+0x74>)
 80012f0:	f007 fbac 	bl	8008a4c <HAL_SPI_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80012fa:	f7ff ffc3 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000568 	.word	0x20000568
 8001308:	40013000 	.word	0x40013000

0800130c <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001310:	4b18      	ldr	r3, [pc, #96]	@ (8001374 <MX_SPI4_Init+0x68>)
 8001312:	4a19      	ldr	r2, [pc, #100]	@ (8001378 <MX_SPI4_Init+0x6c>)
 8001314:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 8001316:	4b17      	ldr	r3, [pc, #92]	@ (8001374 <MX_SPI4_Init+0x68>)
 8001318:	2200      	movs	r2, #0
 800131a:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800131c:	4b15      	ldr	r3, [pc, #84]	@ (8001374 <MX_SPI4_Init+0x68>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001322:	4b14      	ldr	r3, [pc, #80]	@ (8001374 <MX_SPI4_Init+0x68>)
 8001324:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001328:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800132a:	4b12      	ldr	r3, [pc, #72]	@ (8001374 <MX_SPI4_Init+0x68>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001330:	4b10      	ldr	r3, [pc, #64]	@ (8001374 <MX_SPI4_Init+0x68>)
 8001332:	2200      	movs	r2, #0
 8001334:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_INPUT;
 8001336:	4b0f      	ldr	r3, [pc, #60]	@ (8001374 <MX_SPI4_Init+0x68>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800133c:	4b0d      	ldr	r3, [pc, #52]	@ (8001374 <MX_SPI4_Init+0x68>)
 800133e:	2200      	movs	r2, #0
 8001340:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001342:	4b0c      	ldr	r3, [pc, #48]	@ (8001374 <MX_SPI4_Init+0x68>)
 8001344:	2200      	movs	r2, #0
 8001346:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001348:	4b0a      	ldr	r3, [pc, #40]	@ (8001374 <MX_SPI4_Init+0x68>)
 800134a:	2200      	movs	r2, #0
 800134c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 800134e:	4b09      	ldr	r3, [pc, #36]	@ (8001374 <MX_SPI4_Init+0x68>)
 8001350:	2207      	movs	r2, #7
 8001352:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001354:	4b07      	ldr	r3, [pc, #28]	@ (8001374 <MX_SPI4_Init+0x68>)
 8001356:	2200      	movs	r2, #0
 8001358:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800135a:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <MX_SPI4_Init+0x68>)
 800135c:	2200      	movs	r2, #0
 800135e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001360:	4804      	ldr	r0, [pc, #16]	@ (8001374 <MX_SPI4_Init+0x68>)
 8001362:	f007 fb73 	bl	8008a4c <HAL_SPI_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_SPI4_Init+0x64>
  {
    Error_Handler();
 800136c:	f7ff ff8a 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}
 8001374:	200005cc 	.word	0x200005cc
 8001378:	40013400 	.word	0x40013400

0800137c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08c      	sub	sp, #48	@ 0x30
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 031c 	add.w	r3, r7, #28
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4aa1      	ldr	r2, [pc, #644]	@ (8001620 <HAL_SPI_MspInit+0x2a4>)
 800139a:	4293      	cmp	r3, r2
 800139c:	f040 80a9 	bne.w	80014f2 <HAL_SPI_MspInit+0x176>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013a0:	4ba0      	ldr	r3, [pc, #640]	@ (8001624 <HAL_SPI_MspInit+0x2a8>)
 80013a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a4:	4a9f      	ldr	r2, [pc, #636]	@ (8001624 <HAL_SPI_MspInit+0x2a8>)
 80013a6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013aa:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ac:	4b9d      	ldr	r3, [pc, #628]	@ (8001624 <HAL_SPI_MspInit+0x2a8>)
 80013ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013b4:	61bb      	str	r3, [r7, #24]
 80013b6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b8:	4b9a      	ldr	r3, [pc, #616]	@ (8001624 <HAL_SPI_MspInit+0x2a8>)
 80013ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013bc:	4a99      	ldr	r2, [pc, #612]	@ (8001624 <HAL_SPI_MspInit+0x2a8>)
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c4:	4b97      	ldr	r3, [pc, #604]	@ (8001624 <HAL_SPI_MspInit+0x2a8>)
 80013c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	617b      	str	r3, [r7, #20]
 80013ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d0:	4b94      	ldr	r3, [pc, #592]	@ (8001624 <HAL_SPI_MspInit+0x2a8>)
 80013d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d4:	4a93      	ldr	r2, [pc, #588]	@ (8001624 <HAL_SPI_MspInit+0x2a8>)
 80013d6:	f043 0302 	orr.w	r3, r3, #2
 80013da:	6313      	str	r3, [r2, #48]	@ 0x30
 80013dc:	4b91      	ldr	r3, [pc, #580]	@ (8001624 <HAL_SPI_MspInit+0x2a8>)
 80013de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	613b      	str	r3, [r7, #16]
 80013e6:	693b      	ldr	r3, [r7, #16]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80013e8:	2370      	movs	r3, #112	@ 0x70
 80013ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ec:	2302      	movs	r3, #2
 80013ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f4:	2303      	movs	r3, #3
 80013f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013f8:	2305      	movs	r3, #5
 80013fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fc:	f107 031c 	add.w	r3, r7, #28
 8001400:	4619      	mov	r1, r3
 8001402:	4889      	ldr	r0, [pc, #548]	@ (8001628 <HAL_SPI_MspInit+0x2ac>)
 8001404:	f003 fe36 	bl	8005074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001408:	2320      	movs	r3, #32
 800140a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140c:	2302      	movs	r3, #2
 800140e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001414:	2303      	movs	r3, #3
 8001416:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001418:	2305      	movs	r3, #5
 800141a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141c:	f107 031c 	add.w	r3, r7, #28
 8001420:	4619      	mov	r1, r3
 8001422:	4882      	ldr	r0, [pc, #520]	@ (800162c <HAL_SPI_MspInit+0x2b0>)
 8001424:	f003 fe26 	bl	8005074 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 8001428:	4b81      	ldr	r3, [pc, #516]	@ (8001630 <HAL_SPI_MspInit+0x2b4>)
 800142a:	4a82      	ldr	r2, [pc, #520]	@ (8001634 <HAL_SPI_MspInit+0x2b8>)
 800142c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800142e:	4b80      	ldr	r3, [pc, #512]	@ (8001630 <HAL_SPI_MspInit+0x2b4>)
 8001430:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001434:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001436:	4b7e      	ldr	r3, [pc, #504]	@ (8001630 <HAL_SPI_MspInit+0x2b4>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800143c:	4b7c      	ldr	r3, [pc, #496]	@ (8001630 <HAL_SPI_MspInit+0x2b4>)
 800143e:	2200      	movs	r2, #0
 8001440:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001442:	4b7b      	ldr	r3, [pc, #492]	@ (8001630 <HAL_SPI_MspInit+0x2b4>)
 8001444:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001448:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800144a:	4b79      	ldr	r3, [pc, #484]	@ (8001630 <HAL_SPI_MspInit+0x2b4>)
 800144c:	2200      	movs	r2, #0
 800144e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001450:	4b77      	ldr	r3, [pc, #476]	@ (8001630 <HAL_SPI_MspInit+0x2b4>)
 8001452:	2200      	movs	r2, #0
 8001454:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001456:	4b76      	ldr	r3, [pc, #472]	@ (8001630 <HAL_SPI_MspInit+0x2b4>)
 8001458:	2200      	movs	r2, #0
 800145a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800145c:	4b74      	ldr	r3, [pc, #464]	@ (8001630 <HAL_SPI_MspInit+0x2b4>)
 800145e:	2200      	movs	r2, #0
 8001460:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001462:	4b73      	ldr	r3, [pc, #460]	@ (8001630 <HAL_SPI_MspInit+0x2b4>)
 8001464:	2200      	movs	r2, #0
 8001466:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001468:	4871      	ldr	r0, [pc, #452]	@ (8001630 <HAL_SPI_MspInit+0x2b4>)
 800146a:	f001 ff69 	bl	8003340 <HAL_DMA_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <HAL_SPI_MspInit+0xfc>
    {
      Error_Handler();
 8001474:	f7ff ff06 	bl	8001284 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a6d      	ldr	r2, [pc, #436]	@ (8001630 <HAL_SPI_MspInit+0x2b4>)
 800147c:	659a      	str	r2, [r3, #88]	@ 0x58
 800147e:	4a6c      	ldr	r2, [pc, #432]	@ (8001630 <HAL_SPI_MspInit+0x2b4>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001484:	4b6c      	ldr	r3, [pc, #432]	@ (8001638 <HAL_SPI_MspInit+0x2bc>)
 8001486:	4a6d      	ldr	r2, [pc, #436]	@ (800163c <HAL_SPI_MspInit+0x2c0>)
 8001488:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800148a:	4b6b      	ldr	r3, [pc, #428]	@ (8001638 <HAL_SPI_MspInit+0x2bc>)
 800148c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001490:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001492:	4b69      	ldr	r3, [pc, #420]	@ (8001638 <HAL_SPI_MspInit+0x2bc>)
 8001494:	2240      	movs	r2, #64	@ 0x40
 8001496:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001498:	4b67      	ldr	r3, [pc, #412]	@ (8001638 <HAL_SPI_MspInit+0x2bc>)
 800149a:	2200      	movs	r2, #0
 800149c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800149e:	4b66      	ldr	r3, [pc, #408]	@ (8001638 <HAL_SPI_MspInit+0x2bc>)
 80014a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014a4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014a6:	4b64      	ldr	r3, [pc, #400]	@ (8001638 <HAL_SPI_MspInit+0x2bc>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014ac:	4b62      	ldr	r3, [pc, #392]	@ (8001638 <HAL_SPI_MspInit+0x2bc>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80014b2:	4b61      	ldr	r3, [pc, #388]	@ (8001638 <HAL_SPI_MspInit+0x2bc>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014b8:	4b5f      	ldr	r3, [pc, #380]	@ (8001638 <HAL_SPI_MspInit+0x2bc>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014be:	4b5e      	ldr	r3, [pc, #376]	@ (8001638 <HAL_SPI_MspInit+0x2bc>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80014c4:	485c      	ldr	r0, [pc, #368]	@ (8001638 <HAL_SPI_MspInit+0x2bc>)
 80014c6:	f001 ff3b 	bl	8003340 <HAL_DMA_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 80014d0:	f7ff fed8 	bl	8001284 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a58      	ldr	r2, [pc, #352]	@ (8001638 <HAL_SPI_MspInit+0x2bc>)
 80014d8:	655a      	str	r2, [r3, #84]	@ 0x54
 80014da:	4a57      	ldr	r2, [pc, #348]	@ (8001638 <HAL_SPI_MspInit+0x2bc>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80014e0:	2200      	movs	r2, #0
 80014e2:	2105      	movs	r1, #5
 80014e4:	2023      	movs	r0, #35	@ 0x23
 80014e6:	f001 fcf7 	bl	8002ed8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80014ea:	2023      	movs	r0, #35	@ 0x23
 80014ec:	f001 fd10 	bl	8002f10 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80014f0:	e091      	b.n	8001616 <HAL_SPI_MspInit+0x29a>
  else if(spiHandle->Instance==SPI4)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a52      	ldr	r2, [pc, #328]	@ (8001640 <HAL_SPI_MspInit+0x2c4>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	f040 808c 	bne.w	8001616 <HAL_SPI_MspInit+0x29a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80014fe:	4b49      	ldr	r3, [pc, #292]	@ (8001624 <HAL_SPI_MspInit+0x2a8>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001502:	4a48      	ldr	r2, [pc, #288]	@ (8001624 <HAL_SPI_MspInit+0x2a8>)
 8001504:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001508:	6453      	str	r3, [r2, #68]	@ 0x44
 800150a:	4b46      	ldr	r3, [pc, #280]	@ (8001624 <HAL_SPI_MspInit+0x2a8>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800150e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001516:	4b43      	ldr	r3, [pc, #268]	@ (8001624 <HAL_SPI_MspInit+0x2a8>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	4a42      	ldr	r2, [pc, #264]	@ (8001624 <HAL_SPI_MspInit+0x2a8>)
 800151c:	f043 0310 	orr.w	r3, r3, #16
 8001520:	6313      	str	r3, [r2, #48]	@ 0x30
 8001522:	4b40      	ldr	r3, [pc, #256]	@ (8001624 <HAL_SPI_MspInit+0x2a8>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	f003 0310 	and.w	r3, r3, #16
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800152e:	2374      	movs	r3, #116	@ 0x74
 8001530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153a:	2303      	movs	r3, #3
 800153c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800153e:	2305      	movs	r3, #5
 8001540:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001542:	f107 031c 	add.w	r3, r7, #28
 8001546:	4619      	mov	r1, r3
 8001548:	483e      	ldr	r0, [pc, #248]	@ (8001644 <HAL_SPI_MspInit+0x2c8>)
 800154a:	f003 fd93 	bl	8005074 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 800154e:	4b3e      	ldr	r3, [pc, #248]	@ (8001648 <HAL_SPI_MspInit+0x2cc>)
 8001550:	4a3e      	ldr	r2, [pc, #248]	@ (800164c <HAL_SPI_MspInit+0x2d0>)
 8001552:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 8001554:	4b3c      	ldr	r3, [pc, #240]	@ (8001648 <HAL_SPI_MspInit+0x2cc>)
 8001556:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800155a:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800155c:	4b3a      	ldr	r3, [pc, #232]	@ (8001648 <HAL_SPI_MspInit+0x2cc>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001562:	4b39      	ldr	r3, [pc, #228]	@ (8001648 <HAL_SPI_MspInit+0x2cc>)
 8001564:	2200      	movs	r2, #0
 8001566:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001568:	4b37      	ldr	r3, [pc, #220]	@ (8001648 <HAL_SPI_MspInit+0x2cc>)
 800156a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800156e:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001570:	4b35      	ldr	r3, [pc, #212]	@ (8001648 <HAL_SPI_MspInit+0x2cc>)
 8001572:	2200      	movs	r2, #0
 8001574:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001576:	4b34      	ldr	r3, [pc, #208]	@ (8001648 <HAL_SPI_MspInit+0x2cc>)
 8001578:	2200      	movs	r2, #0
 800157a:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 800157c:	4b32      	ldr	r3, [pc, #200]	@ (8001648 <HAL_SPI_MspInit+0x2cc>)
 800157e:	2200      	movs	r2, #0
 8001580:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001582:	4b31      	ldr	r3, [pc, #196]	@ (8001648 <HAL_SPI_MspInit+0x2cc>)
 8001584:	2200      	movs	r2, #0
 8001586:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001588:	4b2f      	ldr	r3, [pc, #188]	@ (8001648 <HAL_SPI_MspInit+0x2cc>)
 800158a:	2200      	movs	r2, #0
 800158c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 800158e:	482e      	ldr	r0, [pc, #184]	@ (8001648 <HAL_SPI_MspInit+0x2cc>)
 8001590:	f001 fed6 	bl	8003340 <HAL_DMA_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <HAL_SPI_MspInit+0x222>
      Error_Handler();
 800159a:	f7ff fe73 	bl	8001284 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a29      	ldr	r2, [pc, #164]	@ (8001648 <HAL_SPI_MspInit+0x2cc>)
 80015a2:	659a      	str	r2, [r3, #88]	@ 0x58
 80015a4:	4a28      	ldr	r2, [pc, #160]	@ (8001648 <HAL_SPI_MspInit+0x2cc>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 80015aa:	4b29      	ldr	r3, [pc, #164]	@ (8001650 <HAL_SPI_MspInit+0x2d4>)
 80015ac:	4a29      	ldr	r2, [pc, #164]	@ (8001654 <HAL_SPI_MspInit+0x2d8>)
 80015ae:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 80015b0:	4b27      	ldr	r3, [pc, #156]	@ (8001650 <HAL_SPI_MspInit+0x2d4>)
 80015b2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80015b6:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015b8:	4b25      	ldr	r3, [pc, #148]	@ (8001650 <HAL_SPI_MspInit+0x2d4>)
 80015ba:	2240      	movs	r2, #64	@ 0x40
 80015bc:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015be:	4b24      	ldr	r3, [pc, #144]	@ (8001650 <HAL_SPI_MspInit+0x2d4>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015c4:	4b22      	ldr	r3, [pc, #136]	@ (8001650 <HAL_SPI_MspInit+0x2d4>)
 80015c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015ca:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015cc:	4b20      	ldr	r3, [pc, #128]	@ (8001650 <HAL_SPI_MspInit+0x2d4>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001650 <HAL_SPI_MspInit+0x2d4>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 80015d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001650 <HAL_SPI_MspInit+0x2d4>)
 80015da:	2200      	movs	r2, #0
 80015dc:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015de:	4b1c      	ldr	r3, [pc, #112]	@ (8001650 <HAL_SPI_MspInit+0x2d4>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001650 <HAL_SPI_MspInit+0x2d4>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 80015ea:	4819      	ldr	r0, [pc, #100]	@ (8001650 <HAL_SPI_MspInit+0x2d4>)
 80015ec:	f001 fea8 	bl	8003340 <HAL_DMA_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_SPI_MspInit+0x27e>
      Error_Handler();
 80015f6:	f7ff fe45 	bl	8001284 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a14      	ldr	r2, [pc, #80]	@ (8001650 <HAL_SPI_MspInit+0x2d4>)
 80015fe:	655a      	str	r2, [r3, #84]	@ 0x54
 8001600:	4a13      	ldr	r2, [pc, #76]	@ (8001650 <HAL_SPI_MspInit+0x2d4>)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2105      	movs	r1, #5
 800160a:	2054      	movs	r0, #84	@ 0x54
 800160c:	f001 fc64 	bl	8002ed8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001610:	2054      	movs	r0, #84	@ 0x54
 8001612:	f001 fc7d 	bl	8002f10 <HAL_NVIC_EnableIRQ>
}
 8001616:	bf00      	nop
 8001618:	3730      	adds	r7, #48	@ 0x30
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40013000 	.word	0x40013000
 8001624:	40023800 	.word	0x40023800
 8001628:	40020000 	.word	0x40020000
 800162c:	40020400 	.word	0x40020400
 8001630:	20000630 	.word	0x20000630
 8001634:	40026440 	.word	0x40026440
 8001638:	20000690 	.word	0x20000690
 800163c:	40026458 	.word	0x40026458
 8001640:	40013400 	.word	0x40013400
 8001644:	40021000 	.word	0x40021000
 8001648:	200006f0 	.word	0x200006f0
 800164c:	40026410 	.word	0x40026410
 8001650:	20000750 	.word	0x20000750
 8001654:	40026428 	.word	0x40026428

08001658 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800165e:	4b11      	ldr	r3, [pc, #68]	@ (80016a4 <HAL_MspInit+0x4c>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001662:	4a10      	ldr	r2, [pc, #64]	@ (80016a4 <HAL_MspInit+0x4c>)
 8001664:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001668:	6413      	str	r3, [r2, #64]	@ 0x40
 800166a:	4b0e      	ldr	r3, [pc, #56]	@ (80016a4 <HAL_MspInit+0x4c>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001672:	607b      	str	r3, [r7, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001676:	4b0b      	ldr	r3, [pc, #44]	@ (80016a4 <HAL_MspInit+0x4c>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800167a:	4a0a      	ldr	r2, [pc, #40]	@ (80016a4 <HAL_MspInit+0x4c>)
 800167c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001680:	6453      	str	r3, [r2, #68]	@ 0x44
 8001682:	4b08      	ldr	r3, [pc, #32]	@ (80016a4 <HAL_MspInit+0x4c>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001686:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800168a:	603b      	str	r3, [r7, #0]
 800168c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	210f      	movs	r1, #15
 8001692:	f06f 0001 	mvn.w	r0, #1
 8001696:	f001 fc1f 	bl	8002ed8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40023800 	.word	0x40023800

080016a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08e      	sub	sp, #56	@ 0x38
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80016b0:	2300      	movs	r3, #0
 80016b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80016b4:	2300      	movs	r3, #0
 80016b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80016b8:	4b33      	ldr	r3, [pc, #204]	@ (8001788 <HAL_InitTick+0xe0>)
 80016ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016bc:	4a32      	ldr	r2, [pc, #200]	@ (8001788 <HAL_InitTick+0xe0>)
 80016be:	f043 0320 	orr.w	r3, r3, #32
 80016c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80016c4:	4b30      	ldr	r3, [pc, #192]	@ (8001788 <HAL_InitTick+0xe0>)
 80016c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c8:	f003 0320 	and.w	r3, r3, #32
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016d0:	f107 0210 	add.w	r2, r7, #16
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	4611      	mov	r1, r2
 80016da:	4618      	mov	r0, r3
 80016dc:	f006 fd94 	bl	8008208 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016e0:	6a3b      	ldr	r3, [r7, #32]
 80016e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d103      	bne.n	80016f2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016ea:	f006 fd65 	bl	80081b8 <HAL_RCC_GetPCLK1Freq>
 80016ee:	6378      	str	r0, [r7, #52]	@ 0x34
 80016f0:	e004      	b.n	80016fc <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80016f2:	f006 fd61 	bl	80081b8 <HAL_RCC_GetPCLK1Freq>
 80016f6:	4603      	mov	r3, r0
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016fe:	4a23      	ldr	r2, [pc, #140]	@ (800178c <HAL_InitTick+0xe4>)
 8001700:	fba2 2303 	umull	r2, r3, r2, r3
 8001704:	0c9b      	lsrs	r3, r3, #18
 8001706:	3b01      	subs	r3, #1
 8001708:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800170a:	4b21      	ldr	r3, [pc, #132]	@ (8001790 <HAL_InitTick+0xe8>)
 800170c:	4a21      	ldr	r2, [pc, #132]	@ (8001794 <HAL_InitTick+0xec>)
 800170e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001710:	4b1f      	ldr	r3, [pc, #124]	@ (8001790 <HAL_InitTick+0xe8>)
 8001712:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001716:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001718:	4a1d      	ldr	r2, [pc, #116]	@ (8001790 <HAL_InitTick+0xe8>)
 800171a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800171c:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800171e:	4b1c      	ldr	r3, [pc, #112]	@ (8001790 <HAL_InitTick+0xe8>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001724:	4b1a      	ldr	r3, [pc, #104]	@ (8001790 <HAL_InitTick+0xe8>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172a:	4b19      	ldr	r3, [pc, #100]	@ (8001790 <HAL_InitTick+0xe8>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8001730:	4817      	ldr	r0, [pc, #92]	@ (8001790 <HAL_InitTick+0xe8>)
 8001732:	f008 fa53 	bl	8009bdc <HAL_TIM_Base_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800173c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001740:	2b00      	cmp	r3, #0
 8001742:	d11b      	bne.n	800177c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001744:	4812      	ldr	r0, [pc, #72]	@ (8001790 <HAL_InitTick+0xe8>)
 8001746:	f008 fb39 	bl	8009dbc <HAL_TIM_Base_Start_IT>
 800174a:	4603      	mov	r3, r0
 800174c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001750:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001754:	2b00      	cmp	r3, #0
 8001756:	d111      	bne.n	800177c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001758:	2037      	movs	r0, #55	@ 0x37
 800175a:	f001 fbd9 	bl	8002f10 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b0f      	cmp	r3, #15
 8001762:	d808      	bhi.n	8001776 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001764:	2200      	movs	r2, #0
 8001766:	6879      	ldr	r1, [r7, #4]
 8001768:	2037      	movs	r0, #55	@ 0x37
 800176a:	f001 fbb5 	bl	8002ed8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800176e:	4a0a      	ldr	r2, [pc, #40]	@ (8001798 <HAL_InitTick+0xf0>)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6013      	str	r3, [r2, #0]
 8001774:	e002      	b.n	800177c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800177c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001780:	4618      	mov	r0, r3
 8001782:	3738      	adds	r7, #56	@ 0x38
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40023800 	.word	0x40023800
 800178c:	431bde83 	.word	0x431bde83
 8001790:	200007b0 	.word	0x200007b0
 8001794:	40001400 	.word	0x40001400
 8001798:	20000004 	.word	0x20000004

0800179c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <NMI_Handler+0x4>

080017a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <HardFault_Handler+0x4>

080017ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <MemManage_Handler+0x4>

080017b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <BusFault_Handler+0x4>

080017bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c0:	bf00      	nop
 80017c2:	e7fd      	b.n	80017c0 <UsageFault_Handler+0x4>

080017c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
	...

080017d4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80017d8:	4802      	ldr	r0, [pc, #8]	@ (80017e4 <DMA1_Stream0_IRQHandler+0x10>)
 80017da:	f001 ff51 	bl	8003680 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000af0 	.word	0x20000af0

080017e8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim6_up);
 80017ec:	4802      	ldr	r0, [pc, #8]	@ (80017f8 <DMA1_Stream1_IRQHandler+0x10>)
 80017ee:	f001 ff47 	bl	8003680 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000898 	.word	0x20000898

080017fc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001800:	4802      	ldr	r0, [pc, #8]	@ (800180c <DMA1_Stream2_IRQHandler+0x10>)
 8001802:	f001 ff3d 	bl	8003680 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000a90 	.word	0x20000a90

08001810 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001814:	4802      	ldr	r0, [pc, #8]	@ (8001820 <DMA1_Stream3_IRQHandler+0x10>)
 8001816:	f001 ff33 	bl	8003680 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200004a8 	.word	0x200004a8

08001824 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001828:	4802      	ldr	r0, [pc, #8]	@ (8001834 <DMA1_Stream5_IRQHandler+0x10>)
 800182a:	f001 ff29 	bl	8003680 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	200003e8 	.word	0x200003e8

08001838 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800183c:	4802      	ldr	r0, [pc, #8]	@ (8001848 <DMA1_Stream6_IRQHandler+0x10>)
 800183e:	f001 ff1f 	bl	8003680 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000448 	.word	0x20000448

0800184c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001850:	4802      	ldr	r0, [pc, #8]	@ (800185c <I2C1_EV_IRQHandler+0x10>)
 8001852:	f004 f9fd 	bl	8005c50 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000340 	.word	0x20000340

08001860 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001864:	4802      	ldr	r0, [pc, #8]	@ (8001870 <I2C1_ER_IRQHandler+0x10>)
 8001866:	f004 fa0d 	bl	8005c84 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000340 	.word	0x20000340

08001874 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001878:	4802      	ldr	r0, [pc, #8]	@ (8001884 <I2C2_EV_IRQHandler+0x10>)
 800187a:	f004 f9e9 	bl	8005c50 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000394 	.word	0x20000394

08001888 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800188c:	4802      	ldr	r0, [pc, #8]	@ (8001898 <I2C2_ER_IRQHandler+0x10>)
 800188e:	f004 f9f9 	bl	8005c84 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000394 	.word	0x20000394

0800189c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80018a0:	4802      	ldr	r0, [pc, #8]	@ (80018ac <SPI1_IRQHandler+0x10>)
 80018a2:	f007 fd13 	bl	80092cc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000568 	.word	0x20000568

080018b0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80018b4:	4802      	ldr	r0, [pc, #8]	@ (80018c0 <USART3_IRQHandler+0x10>)
 80018b6:	f009 f859 	bl	800a96c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000a08 	.word	0x20000a08

080018c4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80018c8:	4802      	ldr	r0, [pc, #8]	@ (80018d4 <DMA1_Stream7_IRQHandler+0x10>)
 80018ca:	f001 fed9 	bl	8003680 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000508 	.word	0x20000508

080018d8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80018dc:	4802      	ldr	r0, [pc, #8]	@ (80018e8 <UART4_IRQHandler+0x10>)
 80018de:	f009 f845 	bl	800a96c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	200008f8 	.word	0x200008f8

080018ec <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80018f0:	4802      	ldr	r0, [pc, #8]	@ (80018fc <UART5_IRQHandler+0x10>)
 80018f2:	f009 f83b 	bl	800a96c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000980 	.word	0x20000980

08001900 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001904:	4802      	ldr	r0, [pc, #8]	@ (8001910 <TIM6_DAC_IRQHandler+0x10>)
 8001906:	f008 fad1 	bl	8009eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	2000084c 	.word	0x2000084c

08001914 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001918:	4802      	ldr	r0, [pc, #8]	@ (8001924 <TIM7_IRQHandler+0x10>)
 800191a:	f008 fac7 	bl	8009eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	200007b0 	.word	0x200007b0

08001928 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 800192c:	4802      	ldr	r0, [pc, #8]	@ (8001938 <DMA2_Stream0_IRQHandler+0x10>)
 800192e:	f001 fea7 	bl	8003680 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	200006f0 	.word	0x200006f0

0800193c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001940:	4802      	ldr	r0, [pc, #8]	@ (800194c <DMA2_Stream1_IRQHandler+0x10>)
 8001942:	f001 fe9d 	bl	8003680 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000750 	.word	0x20000750

08001950 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001954:	4802      	ldr	r0, [pc, #8]	@ (8001960 <DMA2_Stream2_IRQHandler+0x10>)
 8001956:	f001 fe93 	bl	8003680 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000630 	.word	0x20000630

08001964 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001968:	4802      	ldr	r0, [pc, #8]	@ (8001974 <DMA2_Stream3_IRQHandler+0x10>)
 800196a:	f001 fe89 	bl	8003680 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20000690 	.word	0x20000690

08001978 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800197c:	4802      	ldr	r0, [pc, #8]	@ (8001988 <DMA2_Stream4_IRQHandler+0x10>)
 800197e:	f001 fe7f 	bl	8003680 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000274 	.word	0x20000274

0800198c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001990:	4802      	ldr	r0, [pc, #8]	@ (800199c <ETH_IRQHandler+0x10>)
 8001992:	f002 fc87 	bl	80042a4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20005778 	.word	0x20005778

080019a0 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80019a4:	4802      	ldr	r0, [pc, #8]	@ (80019b0 <ETH_WKUP_IRQHandler+0x10>)
 80019a6:	f002 fc7d 	bl	80042a4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20005778 	.word	0x20005778

080019b4 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 80019b8:	4802      	ldr	r0, [pc, #8]	@ (80019c4 <SPI4_IRQHandler+0x10>)
 80019ba:	f007 fc87 	bl	80092cc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	200005cc 	.word	0x200005cc

080019c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return 1;
 80019cc:	2301      	movs	r3, #1
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <_kill>:

int _kill(int pid, int sig)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019e2:	4b05      	ldr	r3, [pc, #20]	@ (80019f8 <_kill+0x20>)
 80019e4:	2216      	movs	r2, #22
 80019e6:	601a      	str	r2, [r3, #0]
  return -1;
 80019e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	20028900 	.word	0x20028900

080019fc <_exit>:

void _exit (int status)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a04:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff ffe5 	bl	80019d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a0e:	bf00      	nop
 8001a10:	e7fd      	b.n	8001a0e <_exit+0x12>

08001a12 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b086      	sub	sp, #24
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	60f8      	str	r0, [r7, #12]
 8001a1a:	60b9      	str	r1, [r7, #8]
 8001a1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	e00a      	b.n	8001a3a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a24:	f3af 8000 	nop.w
 8001a28:	4601      	mov	r1, r0
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	1c5a      	adds	r2, r3, #1
 8001a2e:	60ba      	str	r2, [r7, #8]
 8001a30:	b2ca      	uxtb	r2, r1
 8001a32:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	3301      	adds	r3, #1
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	dbf0      	blt.n	8001a24 <_read+0x12>
  }

  return len;
 8001a42:	687b      	ldr	r3, [r7, #4]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3718      	adds	r7, #24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <_close>:
  }
  return len;
}

int _close(int file)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a74:	605a      	str	r2, [r3, #4]
  return 0;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <_isatty>:

int _isatty(int file)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a8c:	2301      	movs	r3, #1
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b085      	sub	sp, #20
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	60f8      	str	r0, [r7, #12]
 8001aa2:	60b9      	str	r1, [r7, #8]
 8001aa4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b087      	sub	sp, #28
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001abc:	4a14      	ldr	r2, [pc, #80]	@ (8001b10 <_sbrk+0x5c>)
 8001abe:	4b15      	ldr	r3, [pc, #84]	@ (8001b14 <_sbrk+0x60>)
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ac8:	4b13      	ldr	r3, [pc, #76]	@ (8001b18 <_sbrk+0x64>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d102      	bne.n	8001ad6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ad0:	4b11      	ldr	r3, [pc, #68]	@ (8001b18 <_sbrk+0x64>)
 8001ad2:	4a12      	ldr	r2, [pc, #72]	@ (8001b1c <_sbrk+0x68>)
 8001ad4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ad6:	4b10      	ldr	r3, [pc, #64]	@ (8001b18 <_sbrk+0x64>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4413      	add	r3, r2
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d205      	bcs.n	8001af0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8001b20 <_sbrk+0x6c>)
 8001ae6:	220c      	movs	r2, #12
 8001ae8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001aee:	e009      	b.n	8001b04 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001af0:	4b09      	ldr	r3, [pc, #36]	@ (8001b18 <_sbrk+0x64>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001af6:	4b08      	ldr	r3, [pc, #32]	@ (8001b18 <_sbrk+0x64>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	4a06      	ldr	r2, [pc, #24]	@ (8001b18 <_sbrk+0x64>)
 8001b00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b02:	68fb      	ldr	r3, [r7, #12]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	371c      	adds	r7, #28
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	20050000 	.word	0x20050000
 8001b14:	00002000 	.word	0x00002000
 8001b18:	200007fc 	.word	0x200007fc
 8001b1c:	20028910 	.word	0x20028910
 8001b20:	20028900 	.word	0x20028900

08001b24 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b28:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <SystemInit+0x20>)
 8001b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b2e:	4a05      	ldr	r2, [pc, #20]	@ (8001b44 <SystemInit+0x20>)
 8001b30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
DMA_HandleTypeDef hdma_tim6_up;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b4e:	f107 0310 	add.w	r3, r7, #16
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]
 8001b58:	609a      	str	r2, [r3, #8]
 8001b5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]
 8001b64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b66:	4b1e      	ldr	r3, [pc, #120]	@ (8001be0 <MX_TIM2_Init+0x98>)
 8001b68:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b6c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001be0 <MX_TIM2_Init+0x98>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b74:	4b1a      	ldr	r3, [pc, #104]	@ (8001be0 <MX_TIM2_Init+0x98>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001b7a:	4b19      	ldr	r3, [pc, #100]	@ (8001be0 <MX_TIM2_Init+0x98>)
 8001b7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b80:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b82:	4b17      	ldr	r3, [pc, #92]	@ (8001be0 <MX_TIM2_Init+0x98>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b88:	4b15      	ldr	r3, [pc, #84]	@ (8001be0 <MX_TIM2_Init+0x98>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b8e:	4814      	ldr	r0, [pc, #80]	@ (8001be0 <MX_TIM2_Init+0x98>)
 8001b90:	f008 f824 	bl	8009bdc <HAL_TIM_Base_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b9a:	f7ff fb73 	bl	8001284 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ba2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ba4:	f107 0310 	add.w	r3, r7, #16
 8001ba8:	4619      	mov	r1, r3
 8001baa:	480d      	ldr	r0, [pc, #52]	@ (8001be0 <MX_TIM2_Init+0x98>)
 8001bac:	f008 fa86 	bl	800a0bc <HAL_TIM_ConfigClockSource>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001bb6:	f7ff fb65 	bl	8001284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bc2:	1d3b      	adds	r3, r7, #4
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4806      	ldr	r0, [pc, #24]	@ (8001be0 <MX_TIM2_Init+0x98>)
 8001bc8:	f008 fcaa 	bl	800a520 <HAL_TIMEx_MasterConfigSynchronization>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001bd2:	f7ff fb57 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bd6:	bf00      	nop
 8001bd8:	3720      	adds	r7, #32
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000800 	.word	0x20000800

08001be4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bea:	1d3b      	adds	r3, r7, #4
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001bf4:	4b14      	ldr	r3, [pc, #80]	@ (8001c48 <MX_TIM6_Init+0x64>)
 8001bf6:	4a15      	ldr	r2, [pc, #84]	@ (8001c4c <MX_TIM6_Init+0x68>)
 8001bf8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 540-1;
 8001bfa:	4b13      	ldr	r3, [pc, #76]	@ (8001c48 <MX_TIM6_Init+0x64>)
 8001bfc:	f240 221b 	movw	r2, #539	@ 0x21b
 8001c00:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c02:	4b11      	ldr	r3, [pc, #68]	@ (8001c48 <MX_TIM6_Init+0x64>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8001c08:	4b0f      	ldr	r3, [pc, #60]	@ (8001c48 <MX_TIM6_Init+0x64>)
 8001c0a:	2263      	movs	r2, #99	@ 0x63
 8001c0c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c48 <MX_TIM6_Init+0x64>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c14:	480c      	ldr	r0, [pc, #48]	@ (8001c48 <MX_TIM6_Init+0x64>)
 8001c16:	f007 ffe1 	bl	8009bdc <HAL_TIM_Base_Init>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001c20:	f7ff fb30 	bl	8001284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c24:	2320      	movs	r3, #32
 8001c26:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c2c:	1d3b      	adds	r3, r7, #4
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4805      	ldr	r0, [pc, #20]	@ (8001c48 <MX_TIM6_Init+0x64>)
 8001c32:	f008 fc75 	bl	800a520 <HAL_TIMEx_MasterConfigSynchronization>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001c3c:	f7ff fb22 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c40:	bf00      	nop
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	2000084c 	.word	0x2000084c
 8001c4c:	40001000 	.word	0x40001000

08001c50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c60:	d10c      	bne.n	8001c7c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c62:	4b2d      	ldr	r3, [pc, #180]	@ (8001d18 <HAL_TIM_Base_MspInit+0xc8>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c66:	4a2c      	ldr	r2, [pc, #176]	@ (8001d18 <HAL_TIM_Base_MspInit+0xc8>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c6e:	4b2a      	ldr	r3, [pc, #168]	@ (8001d18 <HAL_TIM_Base_MspInit+0xc8>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001c7a:	e049      	b.n	8001d10 <HAL_TIM_Base_MspInit+0xc0>
  else if(tim_baseHandle->Instance==TIM6)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a26      	ldr	r2, [pc, #152]	@ (8001d1c <HAL_TIM_Base_MspInit+0xcc>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d144      	bne.n	8001d10 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c86:	4b24      	ldr	r3, [pc, #144]	@ (8001d18 <HAL_TIM_Base_MspInit+0xc8>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8a:	4a23      	ldr	r2, [pc, #140]	@ (8001d18 <HAL_TIM_Base_MspInit+0xc8>)
 8001c8c:	f043 0310 	orr.w	r3, r3, #16
 8001c90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c92:	4b21      	ldr	r3, [pc, #132]	@ (8001d18 <HAL_TIM_Base_MspInit+0xc8>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c96:	f003 0310 	and.w	r3, r3, #16
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
    hdma_tim6_up.Instance = DMA1_Stream1;
 8001c9e:	4b20      	ldr	r3, [pc, #128]	@ (8001d20 <HAL_TIM_Base_MspInit+0xd0>)
 8001ca0:	4a20      	ldr	r2, [pc, #128]	@ (8001d24 <HAL_TIM_Base_MspInit+0xd4>)
 8001ca2:	601a      	str	r2, [r3, #0]
    hdma_tim6_up.Init.Channel = DMA_CHANNEL_7;
 8001ca4:	4b1e      	ldr	r3, [pc, #120]	@ (8001d20 <HAL_TIM_Base_MspInit+0xd0>)
 8001ca6:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001caa:	605a      	str	r2, [r3, #4]
    hdma_tim6_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cac:	4b1c      	ldr	r3, [pc, #112]	@ (8001d20 <HAL_TIM_Base_MspInit+0xd0>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
    hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d20 <HAL_TIM_Base_MspInit+0xd0>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	60da      	str	r2, [r3, #12]
    hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 8001cb8:	4b19      	ldr	r3, [pc, #100]	@ (8001d20 <HAL_TIM_Base_MspInit+0xd0>)
 8001cba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cbe:	611a      	str	r2, [r3, #16]
    hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001cc0:	4b17      	ldr	r3, [pc, #92]	@ (8001d20 <HAL_TIM_Base_MspInit+0xd0>)
 8001cc2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001cc6:	615a      	str	r2, [r3, #20]
    hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001cc8:	4b15      	ldr	r3, [pc, #84]	@ (8001d20 <HAL_TIM_Base_MspInit+0xd0>)
 8001cca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001cce:	619a      	str	r2, [r3, #24]
    hdma_tim6_up.Init.Mode = DMA_NORMAL;
 8001cd0:	4b13      	ldr	r3, [pc, #76]	@ (8001d20 <HAL_TIM_Base_MspInit+0xd0>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	61da      	str	r2, [r3, #28]
    hdma_tim6_up.Init.Priority = DMA_PRIORITY_HIGH;
 8001cd6:	4b12      	ldr	r3, [pc, #72]	@ (8001d20 <HAL_TIM_Base_MspInit+0xd0>)
 8001cd8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001cdc:	621a      	str	r2, [r3, #32]
    hdma_tim6_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cde:	4b10      	ldr	r3, [pc, #64]	@ (8001d20 <HAL_TIM_Base_MspInit+0xd0>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim6_up) != HAL_OK)
 8001ce4:	480e      	ldr	r0, [pc, #56]	@ (8001d20 <HAL_TIM_Base_MspInit+0xd0>)
 8001ce6:	f001 fb2b 	bl	8003340 <HAL_DMA_Init>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <HAL_TIM_Base_MspInit+0xa4>
      Error_Handler();
 8001cf0:	f7ff fac8 	bl	8001284 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8001d20 <HAL_TIM_Base_MspInit+0xd0>)
 8001cf8:	621a      	str	r2, [r3, #32]
 8001cfa:	4a09      	ldr	r2, [pc, #36]	@ (8001d20 <HAL_TIM_Base_MspInit+0xd0>)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001d00:	2200      	movs	r2, #0
 8001d02:	2105      	movs	r1, #5
 8001d04:	2036      	movs	r0, #54	@ 0x36
 8001d06:	f001 f8e7 	bl	8002ed8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d0a:	2036      	movs	r0, #54	@ 0x36
 8001d0c:	f001 f900 	bl	8002f10 <HAL_NVIC_EnableIRQ>
}
 8001d10:	bf00      	nop
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	40001000 	.word	0x40001000
 8001d20:	20000898 	.word	0x20000898
 8001d24:	40026028 	.word	0x40026028

08001d28 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_uart5_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001d2c:	4b14      	ldr	r3, [pc, #80]	@ (8001d80 <MX_UART4_Init+0x58>)
 8001d2e:	4a15      	ldr	r2, [pc, #84]	@ (8001d84 <MX_UART4_Init+0x5c>)
 8001d30:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001d32:	4b13      	ldr	r3, [pc, #76]	@ (8001d80 <MX_UART4_Init+0x58>)
 8001d34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d38:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001d3a:	4b11      	ldr	r3, [pc, #68]	@ (8001d80 <MX_UART4_Init+0x58>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001d40:	4b0f      	ldr	r3, [pc, #60]	@ (8001d80 <MX_UART4_Init+0x58>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001d46:	4b0e      	ldr	r3, [pc, #56]	@ (8001d80 <MX_UART4_Init+0x58>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d80 <MX_UART4_Init+0x58>)
 8001d4e:	220c      	movs	r2, #12
 8001d50:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d52:	4b0b      	ldr	r3, [pc, #44]	@ (8001d80 <MX_UART4_Init+0x58>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d58:	4b09      	ldr	r3, [pc, #36]	@ (8001d80 <MX_UART4_Init+0x58>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d5e:	4b08      	ldr	r3, [pc, #32]	@ (8001d80 <MX_UART4_Init+0x58>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d64:	4b06      	ldr	r3, [pc, #24]	@ (8001d80 <MX_UART4_Init+0x58>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001d6a:	4805      	ldr	r0, [pc, #20]	@ (8001d80 <MX_UART4_Init+0x58>)
 8001d6c:	f008 fc84 	bl	800a678 <HAL_UART_Init>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001d76:	f7ff fa85 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	200008f8 	.word	0x200008f8
 8001d84:	40004c00 	.word	0x40004c00

08001d88 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001d8c:	4b14      	ldr	r3, [pc, #80]	@ (8001de0 <MX_UART5_Init+0x58>)
 8001d8e:	4a15      	ldr	r2, [pc, #84]	@ (8001de4 <MX_UART5_Init+0x5c>)
 8001d90:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001d92:	4b13      	ldr	r3, [pc, #76]	@ (8001de0 <MX_UART5_Init+0x58>)
 8001d94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d98:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001d9a:	4b11      	ldr	r3, [pc, #68]	@ (8001de0 <MX_UART5_Init+0x58>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001da0:	4b0f      	ldr	r3, [pc, #60]	@ (8001de0 <MX_UART5_Init+0x58>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001da6:	4b0e      	ldr	r3, [pc, #56]	@ (8001de0 <MX_UART5_Init+0x58>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001dac:	4b0c      	ldr	r3, [pc, #48]	@ (8001de0 <MX_UART5_Init+0x58>)
 8001dae:	220c      	movs	r2, #12
 8001db0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001db2:	4b0b      	ldr	r3, [pc, #44]	@ (8001de0 <MX_UART5_Init+0x58>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001db8:	4b09      	ldr	r3, [pc, #36]	@ (8001de0 <MX_UART5_Init+0x58>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dbe:	4b08      	ldr	r3, [pc, #32]	@ (8001de0 <MX_UART5_Init+0x58>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dc4:	4b06      	ldr	r3, [pc, #24]	@ (8001de0 <MX_UART5_Init+0x58>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001dca:	4805      	ldr	r0, [pc, #20]	@ (8001de0 <MX_UART5_Init+0x58>)
 8001dcc:	f008 fc54 	bl	800a678 <HAL_UART_Init>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001dd6:	f7ff fa55 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000980 	.word	0x20000980
 8001de4:	40005000 	.word	0x40005000

08001de8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001dec:	4b14      	ldr	r3, [pc, #80]	@ (8001e40 <MX_USART3_UART_Init+0x58>)
 8001dee:	4a15      	ldr	r2, [pc, #84]	@ (8001e44 <MX_USART3_UART_Init+0x5c>)
 8001df0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001df2:	4b13      	ldr	r3, [pc, #76]	@ (8001e40 <MX_USART3_UART_Init+0x58>)
 8001df4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001df8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001dfa:	4b11      	ldr	r3, [pc, #68]	@ (8001e40 <MX_USART3_UART_Init+0x58>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e00:	4b0f      	ldr	r3, [pc, #60]	@ (8001e40 <MX_USART3_UART_Init+0x58>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e06:	4b0e      	ldr	r3, [pc, #56]	@ (8001e40 <MX_USART3_UART_Init+0x58>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e40 <MX_USART3_UART_Init+0x58>)
 8001e0e:	220c      	movs	r2, #12
 8001e10:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e12:	4b0b      	ldr	r3, [pc, #44]	@ (8001e40 <MX_USART3_UART_Init+0x58>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e18:	4b09      	ldr	r3, [pc, #36]	@ (8001e40 <MX_USART3_UART_Init+0x58>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e1e:	4b08      	ldr	r3, [pc, #32]	@ (8001e40 <MX_USART3_UART_Init+0x58>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e24:	4b06      	ldr	r3, [pc, #24]	@ (8001e40 <MX_USART3_UART_Init+0x58>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e2a:	4805      	ldr	r0, [pc, #20]	@ (8001e40 <MX_USART3_UART_Init+0x58>)
 8001e2c:	f008 fc24 	bl	800a678 <HAL_UART_Init>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001e36:	f7ff fa25 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000a08 	.word	0x20000a08
 8001e44:	40004800 	.word	0x40004800

08001e48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b0b0      	sub	sp, #192	@ 0xc0
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e50:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e60:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e64:	2284      	movs	r2, #132	@ 0x84
 8001e66:	2100      	movs	r1, #0
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f01f fadb 	bl	8021424 <memset>
  if(uartHandle->Instance==UART4)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4ab0      	ldr	r2, [pc, #704]	@ (8002134 <HAL_UART_MspInit+0x2ec>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d173      	bne.n	8001f60 <HAL_UART_MspInit+0x118>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001e78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e82:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e86:	4618      	mov	r0, r3
 8001e88:	f006 f9f0 	bl	800826c <HAL_RCCEx_PeriphCLKConfig>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001e92:	f7ff f9f7 	bl	8001284 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001e96:	4ba8      	ldr	r3, [pc, #672]	@ (8002138 <HAL_UART_MspInit+0x2f0>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9a:	4aa7      	ldr	r2, [pc, #668]	@ (8002138 <HAL_UART_MspInit+0x2f0>)
 8001e9c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001ea0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ea2:	4ba5      	ldr	r3, [pc, #660]	@ (8002138 <HAL_UART_MspInit+0x2f0>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001eaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eae:	4ba2      	ldr	r3, [pc, #648]	@ (8002138 <HAL_UART_MspInit+0x2f0>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb2:	4aa1      	ldr	r2, [pc, #644]	@ (8002138 <HAL_UART_MspInit+0x2f0>)
 8001eb4:	f043 0304 	orr.w	r3, r3, #4
 8001eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eba:	4b9f      	ldr	r3, [pc, #636]	@ (8002138 <HAL_UART_MspInit+0x2f0>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	623b      	str	r3, [r7, #32]
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ec6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001eca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eda:	2303      	movs	r3, #3
 8001edc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ee0:	2308      	movs	r3, #8
 8001ee2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ee6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001eea:	4619      	mov	r1, r3
 8001eec:	4893      	ldr	r0, [pc, #588]	@ (800213c <HAL_UART_MspInit+0x2f4>)
 8001eee:	f003 f8c1 	bl	8005074 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001ef2:	4b93      	ldr	r3, [pc, #588]	@ (8002140 <HAL_UART_MspInit+0x2f8>)
 8001ef4:	4a93      	ldr	r2, [pc, #588]	@ (8002144 <HAL_UART_MspInit+0x2fc>)
 8001ef6:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001ef8:	4b91      	ldr	r3, [pc, #580]	@ (8002140 <HAL_UART_MspInit+0x2f8>)
 8001efa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001efe:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f00:	4b8f      	ldr	r3, [pc, #572]	@ (8002140 <HAL_UART_MspInit+0x2f8>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f06:	4b8e      	ldr	r3, [pc, #568]	@ (8002140 <HAL_UART_MspInit+0x2f8>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f0c:	4b8c      	ldr	r3, [pc, #560]	@ (8002140 <HAL_UART_MspInit+0x2f8>)
 8001f0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f12:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f14:	4b8a      	ldr	r3, [pc, #552]	@ (8002140 <HAL_UART_MspInit+0x2f8>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f1a:	4b89      	ldr	r3, [pc, #548]	@ (8002140 <HAL_UART_MspInit+0x2f8>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001f20:	4b87      	ldr	r3, [pc, #540]	@ (8002140 <HAL_UART_MspInit+0x2f8>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f26:	4b86      	ldr	r3, [pc, #536]	@ (8002140 <HAL_UART_MspInit+0x2f8>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f2c:	4b84      	ldr	r3, [pc, #528]	@ (8002140 <HAL_UART_MspInit+0x2f8>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001f32:	4883      	ldr	r0, [pc, #524]	@ (8002140 <HAL_UART_MspInit+0x2f8>)
 8001f34:	f001 fa04 	bl	8003340 <HAL_DMA_Init>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001f3e:	f7ff f9a1 	bl	8001284 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a7e      	ldr	r2, [pc, #504]	@ (8002140 <HAL_UART_MspInit+0x2f8>)
 8001f46:	675a      	str	r2, [r3, #116]	@ 0x74
 8001f48:	4a7d      	ldr	r2, [pc, #500]	@ (8002140 <HAL_UART_MspInit+0x2f8>)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2105      	movs	r1, #5
 8001f52:	2034      	movs	r0, #52	@ 0x34
 8001f54:	f000 ffc0 	bl	8002ed8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001f58:	2034      	movs	r0, #52	@ 0x34
 8001f5a:	f000 ffd9 	bl	8002f10 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001f5e:	e0e4      	b.n	800212a <HAL_UART_MspInit+0x2e2>
  else if(uartHandle->Instance==UART5)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a78      	ldr	r2, [pc, #480]	@ (8002148 <HAL_UART_MspInit+0x300>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	f040 8095 	bne.w	8002096 <HAL_UART_MspInit+0x24e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001f6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f70:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001f72:	2300      	movs	r3, #0
 8001f74:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f76:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f006 f976 	bl	800826c <HAL_RCCEx_PeriphCLKConfig>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_UART_MspInit+0x142>
      Error_Handler();
 8001f86:	f7ff f97d 	bl	8001284 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001f8a:	4b6b      	ldr	r3, [pc, #428]	@ (8002138 <HAL_UART_MspInit+0x2f0>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8e:	4a6a      	ldr	r2, [pc, #424]	@ (8002138 <HAL_UART_MspInit+0x2f0>)
 8001f90:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f96:	4b68      	ldr	r3, [pc, #416]	@ (8002138 <HAL_UART_MspInit+0x2f0>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f9e:	61fb      	str	r3, [r7, #28]
 8001fa0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fa2:	4b65      	ldr	r3, [pc, #404]	@ (8002138 <HAL_UART_MspInit+0x2f0>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	4a64      	ldr	r2, [pc, #400]	@ (8002138 <HAL_UART_MspInit+0x2f0>)
 8001fa8:	f043 0304 	orr.w	r3, r3, #4
 8001fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fae:	4b62      	ldr	r3, [pc, #392]	@ (8002138 <HAL_UART_MspInit+0x2f0>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	f003 0304 	and.w	r3, r3, #4
 8001fb6:	61bb      	str	r3, [r7, #24]
 8001fb8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fba:	4b5f      	ldr	r3, [pc, #380]	@ (8002138 <HAL_UART_MspInit+0x2f0>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbe:	4a5e      	ldr	r2, [pc, #376]	@ (8002138 <HAL_UART_MspInit+0x2f0>)
 8001fc0:	f043 0308 	orr.w	r3, r3, #8
 8001fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fc6:	4b5c      	ldr	r3, [pc, #368]	@ (8002138 <HAL_UART_MspInit+0x2f0>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	617b      	str	r3, [r7, #20]
 8001fd0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001fd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fd6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001fec:	2308      	movs	r3, #8
 8001fee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ff2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4850      	ldr	r0, [pc, #320]	@ (800213c <HAL_UART_MspInit+0x2f4>)
 8001ffa:	f003 f83b 	bl	8005074 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ffe:	2304      	movs	r3, #4
 8002000:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002004:	2302      	movs	r3, #2
 8002006:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200a:	2300      	movs	r3, #0
 800200c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002010:	2303      	movs	r3, #3
 8002012:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002016:	2308      	movs	r3, #8
 8002018:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800201c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002020:	4619      	mov	r1, r3
 8002022:	484a      	ldr	r0, [pc, #296]	@ (800214c <HAL_UART_MspInit+0x304>)
 8002024:	f003 f826 	bl	8005074 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8002028:	4b49      	ldr	r3, [pc, #292]	@ (8002150 <HAL_UART_MspInit+0x308>)
 800202a:	4a4a      	ldr	r2, [pc, #296]	@ (8002154 <HAL_UART_MspInit+0x30c>)
 800202c:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 800202e:	4b48      	ldr	r3, [pc, #288]	@ (8002150 <HAL_UART_MspInit+0x308>)
 8002030:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002034:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002036:	4b46      	ldr	r3, [pc, #280]	@ (8002150 <HAL_UART_MspInit+0x308>)
 8002038:	2200      	movs	r2, #0
 800203a:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800203c:	4b44      	ldr	r3, [pc, #272]	@ (8002150 <HAL_UART_MspInit+0x308>)
 800203e:	2200      	movs	r2, #0
 8002040:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002042:	4b43      	ldr	r3, [pc, #268]	@ (8002150 <HAL_UART_MspInit+0x308>)
 8002044:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002048:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800204a:	4b41      	ldr	r3, [pc, #260]	@ (8002150 <HAL_UART_MspInit+0x308>)
 800204c:	2200      	movs	r2, #0
 800204e:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002050:	4b3f      	ldr	r3, [pc, #252]	@ (8002150 <HAL_UART_MspInit+0x308>)
 8002052:	2200      	movs	r2, #0
 8002054:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8002056:	4b3e      	ldr	r3, [pc, #248]	@ (8002150 <HAL_UART_MspInit+0x308>)
 8002058:	2200      	movs	r2, #0
 800205a:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 800205c:	4b3c      	ldr	r3, [pc, #240]	@ (8002150 <HAL_UART_MspInit+0x308>)
 800205e:	2200      	movs	r2, #0
 8002060:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002062:	4b3b      	ldr	r3, [pc, #236]	@ (8002150 <HAL_UART_MspInit+0x308>)
 8002064:	2200      	movs	r2, #0
 8002066:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002068:	4839      	ldr	r0, [pc, #228]	@ (8002150 <HAL_UART_MspInit+0x308>)
 800206a:	f001 f969 	bl	8003340 <HAL_DMA_Init>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <HAL_UART_MspInit+0x230>
      Error_Handler();
 8002074:	f7ff f906 	bl	8001284 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a35      	ldr	r2, [pc, #212]	@ (8002150 <HAL_UART_MspInit+0x308>)
 800207c:	675a      	str	r2, [r3, #116]	@ 0x74
 800207e:	4a34      	ldr	r2, [pc, #208]	@ (8002150 <HAL_UART_MspInit+0x308>)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8002084:	2200      	movs	r2, #0
 8002086:	2105      	movs	r1, #5
 8002088:	2035      	movs	r0, #53	@ 0x35
 800208a:	f000 ff25 	bl	8002ed8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800208e:	2035      	movs	r0, #53	@ 0x35
 8002090:	f000 ff3e 	bl	8002f10 <HAL_NVIC_EnableIRQ>
}
 8002094:	e049      	b.n	800212a <HAL_UART_MspInit+0x2e2>
  else if(uartHandle->Instance==USART3)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a2f      	ldr	r2, [pc, #188]	@ (8002158 <HAL_UART_MspInit+0x310>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d144      	bne.n	800212a <HAL_UART_MspInit+0x2e2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80020a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80020a6:	2300      	movs	r3, #0
 80020a8:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020ae:	4618      	mov	r0, r3
 80020b0:	f006 f8dc 	bl	800826c <HAL_RCCEx_PeriphCLKConfig>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <HAL_UART_MspInit+0x276>
      Error_Handler();
 80020ba:	f7ff f8e3 	bl	8001284 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020be:	4b1e      	ldr	r3, [pc, #120]	@ (8002138 <HAL_UART_MspInit+0x2f0>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c2:	4a1d      	ldr	r2, [pc, #116]	@ (8002138 <HAL_UART_MspInit+0x2f0>)
 80020c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002138 <HAL_UART_MspInit+0x2f0>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020d6:	4b18      	ldr	r3, [pc, #96]	@ (8002138 <HAL_UART_MspInit+0x2f0>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020da:	4a17      	ldr	r2, [pc, #92]	@ (8002138 <HAL_UART_MspInit+0x2f0>)
 80020dc:	f043 0308 	orr.w	r3, r3, #8
 80020e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020e2:	4b15      	ldr	r3, [pc, #84]	@ (8002138 <HAL_UART_MspInit+0x2f0>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020ee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80020f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f6:	2302      	movs	r3, #2
 80020f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002102:	2303      	movs	r3, #3
 8002104:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002108:	2307      	movs	r3, #7
 800210a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800210e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002112:	4619      	mov	r1, r3
 8002114:	480d      	ldr	r0, [pc, #52]	@ (800214c <HAL_UART_MspInit+0x304>)
 8002116:	f002 ffad 	bl	8005074 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800211a:	2200      	movs	r2, #0
 800211c:	2105      	movs	r1, #5
 800211e:	2027      	movs	r0, #39	@ 0x27
 8002120:	f000 feda 	bl	8002ed8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002124:	2027      	movs	r0, #39	@ 0x27
 8002126:	f000 fef3 	bl	8002f10 <HAL_NVIC_EnableIRQ>
}
 800212a:	bf00      	nop
 800212c:	37c0      	adds	r7, #192	@ 0xc0
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40004c00 	.word	0x40004c00
 8002138:	40023800 	.word	0x40023800
 800213c:	40020800 	.word	0x40020800
 8002140:	20000a90 	.word	0x20000a90
 8002144:	40026040 	.word	0x40026040
 8002148:	40005000 	.word	0x40005000
 800214c:	40020c00 	.word	0x40020c00
 8002150:	20000af0 	.word	0x20000af0
 8002154:	40026010 	.word	0x40026010
 8002158:	40004800 	.word	0x40004800

0800215c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800215c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002194 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002160:	f7ff fce0 	bl	8001b24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002164:	480c      	ldr	r0, [pc, #48]	@ (8002198 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002166:	490d      	ldr	r1, [pc, #52]	@ (800219c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002168:	4a0d      	ldr	r2, [pc, #52]	@ (80021a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800216a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800216c:	e002      	b.n	8002174 <LoopCopyDataInit>

0800216e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800216e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002170:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002172:	3304      	adds	r3, #4

08002174 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002174:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002176:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002178:	d3f9      	bcc.n	800216e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800217a:	4a0a      	ldr	r2, [pc, #40]	@ (80021a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800217c:	4c0a      	ldr	r4, [pc, #40]	@ (80021a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800217e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002180:	e001      	b.n	8002186 <LoopFillZerobss>

08002182 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002182:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002184:	3204      	adds	r2, #4

08002186 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002186:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002188:	d3fb      	bcc.n	8002182 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800218a:	f01f f999 	bl	80214c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800218e:	f7fe ffd3 	bl	8001138 <main>
  bx  lr    
 8002192:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002194:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002198:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800219c:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 80021a0:	08027364 	.word	0x08027364
  ldr r2, =_sbss
 80021a4:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 80021a8:	20028910 	.word	0x20028910

080021ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021ac:	e7fe      	b.n	80021ac <ADC_IRQHandler>

080021ae <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
 80021b6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00b      	beq.n	80021d6 <LAN8742_RegisterBusIO+0x28>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d007      	beq.n	80021d6 <LAN8742_RegisterBusIO+0x28>
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <LAN8742_RegisterBusIO+0x28>
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d102      	bne.n	80021dc <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80021d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021da:	e014      	b.n	8002206 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	68da      	ldr	r2, [r3, #12]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	691a      	ldr	r2, [r3, #16]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8002212:	b580      	push	{r7, lr}
 8002214:	b086      	sub	sp, #24
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8002222:	2300      	movs	r3, #0
 8002224:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d139      	bne.n	80022a2 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d002      	beq.n	800223c <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2220      	movs	r2, #32
 8002240:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002242:	2300      	movs	r3, #0
 8002244:	617b      	str	r3, [r7, #20]
 8002246:	e01c      	b.n	8002282 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	f107 020c 	add.w	r2, r7, #12
 8002250:	2112      	movs	r1, #18
 8002252:	6978      	ldr	r0, [r7, #20]
 8002254:	4798      	blx	r3
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	da03      	bge.n	8002264 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 800225c:	f06f 0304 	mvn.w	r3, #4
 8002260:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8002262:	e00b      	b.n	800227c <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f003 031f 	and.w	r3, r3, #31
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	429a      	cmp	r2, r3
 800226e:	d105      	bne.n	800227c <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002276:	2300      	movs	r3, #0
 8002278:	613b      	str	r3, [r7, #16]
         break;
 800227a:	e005      	b.n	8002288 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	3301      	adds	r3, #1
 8002280:	617b      	str	r3, [r7, #20]
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	2b1f      	cmp	r3, #31
 8002286:	d9df      	bls.n	8002248 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2b1f      	cmp	r3, #31
 800228e:	d902      	bls.n	8002296 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002290:	f06f 0302 	mvn.w	r3, #2
 8002294:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d102      	bne.n	80022a2 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 80022a2:	693b      	ldr	r3, [r7, #16]
 }
 80022a4:	4618      	mov	r0, r3
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80022b4:	2300      	movs	r3, #0
 80022b6:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6810      	ldr	r0, [r2, #0]
 80022c0:	f107 020c 	add.w	r2, r7, #12
 80022c4:	2101      	movs	r1, #1
 80022c6:	4798      	blx	r3
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	da02      	bge.n	80022d4 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80022ce:	f06f 0304 	mvn.w	r3, #4
 80022d2:	e06e      	b.n	80023b2 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	6810      	ldr	r0, [r2, #0]
 80022dc:	f107 020c 	add.w	r2, r7, #12
 80022e0:	2101      	movs	r1, #1
 80022e2:	4798      	blx	r3
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	da02      	bge.n	80022f0 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80022ea:	f06f 0304 	mvn.w	r3, #4
 80022ee:	e060      	b.n	80023b2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e059      	b.n	80023b2 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6810      	ldr	r0, [r2, #0]
 8002306:	f107 020c 	add.w	r2, r7, #12
 800230a:	2100      	movs	r1, #0
 800230c:	4798      	blx	r3
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	da02      	bge.n	800231a <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002314:	f06f 0304 	mvn.w	r3, #4
 8002318:	e04b      	b.n	80023b2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d11b      	bne.n	800235c <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d006      	beq.n	800233c <LAN8742_GetLinkState+0x90>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002338:	2302      	movs	r3, #2
 800233a:	e03a      	b.n	80023b2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002346:	2303      	movs	r3, #3
 8002348:	e033      	b.n	80023b2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002354:	2304      	movs	r3, #4
 8002356:	e02c      	b.n	80023b2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002358:	2305      	movs	r3, #5
 800235a:	e02a      	b.n	80023b2 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	6810      	ldr	r0, [r2, #0]
 8002364:	f107 020c 	add.w	r2, r7, #12
 8002368:	211f      	movs	r1, #31
 800236a:	4798      	blx	r3
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	da02      	bge.n	8002378 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002372:	f06f 0304 	mvn.w	r3, #4
 8002376:	e01c      	b.n	80023b2 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002382:	2306      	movs	r3, #6
 8002384:	e015      	b.n	80023b2 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f003 031c 	and.w	r3, r3, #28
 800238c:	2b18      	cmp	r3, #24
 800238e:	d101      	bne.n	8002394 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002390:	2302      	movs	r3, #2
 8002392:	e00e      	b.n	80023b2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f003 031c 	and.w	r3, r3, #28
 800239a:	2b08      	cmp	r3, #8
 800239c:	d101      	bne.n	80023a2 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800239e:	2303      	movs	r3, #3
 80023a0:	e007      	b.n	80023b2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f003 031c 	and.w	r3, r3, #28
 80023a8:	2b14      	cmp	r3, #20
 80023aa:	d101      	bne.n	80023b0 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80023ac:	2304      	movs	r3, #4
 80023ae:	e000      	b.n	80023b2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80023b0:	2305      	movs	r3, #5
    }
  }
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023be:	2003      	movs	r0, #3
 80023c0:	f000 fd7f 	bl	8002ec2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023c4:	200f      	movs	r0, #15
 80023c6:	f7ff f96f 	bl	80016a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023ca:	f7ff f945 	bl	8001658 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023d8:	4b06      	ldr	r3, [pc, #24]	@ (80023f4 <HAL_IncTick+0x20>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	461a      	mov	r2, r3
 80023de:	4b06      	ldr	r3, [pc, #24]	@ (80023f8 <HAL_IncTick+0x24>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4413      	add	r3, r2
 80023e4:	4a04      	ldr	r2, [pc, #16]	@ (80023f8 <HAL_IncTick+0x24>)
 80023e6:	6013      	str	r3, [r2, #0]
}
 80023e8:	bf00      	nop
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	20000008 	.word	0x20000008
 80023f8:	20000b50 	.word	0x20000b50

080023fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002400:	4b03      	ldr	r3, [pc, #12]	@ (8002410 <HAL_GetTick+0x14>)
 8002402:	681b      	ldr	r3, [r3, #0]
}
 8002404:	4618      	mov	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	20000b50 	.word	0x20000b50

08002414 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800241c:	f7ff ffee 	bl	80023fc <HAL_GetTick>
 8002420:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800242c:	d005      	beq.n	800243a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800242e:	4b0a      	ldr	r3, [pc, #40]	@ (8002458 <HAL_Delay+0x44>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	461a      	mov	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4413      	add	r3, r2
 8002438:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800243a:	bf00      	nop
 800243c:	f7ff ffde 	bl	80023fc <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	429a      	cmp	r2, r3
 800244a:	d8f7      	bhi.n	800243c <HAL_Delay+0x28>
  {
  }
}
 800244c:	bf00      	nop
 800244e:	bf00      	nop
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20000008 	.word	0x20000008

0800245c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002464:	2300      	movs	r3, #0
 8002466:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e031      	b.n	80024d6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002476:	2b00      	cmp	r3, #0
 8002478:	d109      	bne.n	800248e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7fe f900 	bl	8000680 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002492:	f003 0310 	and.w	r3, r3, #16
 8002496:	2b00      	cmp	r3, #0
 8002498:	d116      	bne.n	80024c8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800249e:	4b10      	ldr	r3, [pc, #64]	@ (80024e0 <HAL_ADC_Init+0x84>)
 80024a0:	4013      	ands	r3, r2
 80024a2:	f043 0202 	orr.w	r2, r3, #2
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 fae0 	bl	8002a70 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ba:	f023 0303 	bic.w	r3, r3, #3
 80024be:	f043 0201 	orr.w	r2, r3, #1
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	641a      	str	r2, [r3, #64]	@ 0x40
 80024c6:	e001      	b.n	80024cc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	ffffeefd 	.word	0xffffeefd

080024e4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024f0:	2300      	movs	r3, #0
 80024f2:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t counter = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d101      	bne.n	8002506 <HAL_ADC_Start_DMA+0x22>
 8002502:	2302      	movs	r3, #2
 8002504:	e0d6      	b.n	80026b4 <HAL_ADC_Start_DMA+0x1d0>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	2b01      	cmp	r3, #1
 800251a:	d018      	beq.n	800254e <HAL_ADC_Start_DMA+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689a      	ldr	r2, [r3, #8]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0201 	orr.w	r2, r2, #1
 800252a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800252c:	4b63      	ldr	r3, [pc, #396]	@ (80026bc <HAL_ADC_Start_DMA+0x1d8>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a63      	ldr	r2, [pc, #396]	@ (80026c0 <HAL_ADC_Start_DMA+0x1dc>)
 8002532:	fba2 2303 	umull	r2, r3, r2, r3
 8002536:	0c9a      	lsrs	r2, r3, #18
 8002538:	4613      	mov	r3, r2
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	4413      	add	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 8002540:	e002      	b.n	8002548 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	3b01      	subs	r3, #1
 8002546:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f9      	bne.n	8002542 <HAL_ADC_Start_DMA+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b01      	cmp	r3, #1
 800255a:	f040 809e 	bne.w	800269a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002562:	4b58      	ldr	r3, [pc, #352]	@ (80026c4 <HAL_ADC_Start_DMA+0x1e0>)
 8002564:	4013      	ands	r3, r2
 8002566:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002578:	2b00      	cmp	r3, #0
 800257a:	d007      	beq.n	800258c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002580:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002584:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002590:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002594:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002598:	d106      	bne.n	80025a8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800259e:	f023 0206 	bic.w	r2, r3, #6
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	645a      	str	r2, [r3, #68]	@ 0x44
 80025a6:	e002      	b.n	80025ae <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ba:	4a43      	ldr	r2, [pc, #268]	@ (80026c8 <HAL_ADC_Start_DMA+0x1e4>)
 80025bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025c2:	4a42      	ldr	r2, [pc, #264]	@ (80026cc <HAL_ADC_Start_DMA+0x1e8>)
 80025c4:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ca:	4a41      	ldr	r2, [pc, #260]	@ (80026d0 <HAL_ADC_Start_DMA+0x1ec>)
 80025cc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80025d6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80025e6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689a      	ldr	r2, [r3, #8]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025f6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	334c      	adds	r3, #76	@ 0x4c
 8002602:	4619      	mov	r1, r3
 8002604:	68ba      	ldr	r2, [r7, #8]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f000 ff48 	bl	800349c <HAL_DMA_Start_IT>
 800260c:	4603      	mov	r3, r0
 800260e:	75fb      	strb	r3, [r7, #23]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002610:	4b30      	ldr	r3, [pc, #192]	@ (80026d4 <HAL_ADC_Start_DMA+0x1f0>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 031f 	and.w	r3, r3, #31
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10f      	bne.n	800263c <HAL_ADC_Start_DMA+0x158>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d143      	bne.n	80026b2 <HAL_ADC_Start_DMA+0x1ce>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002638:	609a      	str	r2, [r3, #8]
 800263a:	e03a      	b.n	80026b2 <HAL_ADC_Start_DMA+0x1ce>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a25      	ldr	r2, [pc, #148]	@ (80026d8 <HAL_ADC_Start_DMA+0x1f4>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d10e      	bne.n	8002664 <HAL_ADC_Start_DMA+0x180>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d107      	bne.n	8002664 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002662:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002664:	4b1b      	ldr	r3, [pc, #108]	@ (80026d4 <HAL_ADC_Start_DMA+0x1f0>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 0310 	and.w	r3, r3, #16
 800266c:	2b00      	cmp	r3, #0
 800266e:	d120      	bne.n	80026b2 <HAL_ADC_Start_DMA+0x1ce>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a19      	ldr	r2, [pc, #100]	@ (80026dc <HAL_ADC_Start_DMA+0x1f8>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d11b      	bne.n	80026b2 <HAL_ADC_Start_DMA+0x1ce>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d114      	bne.n	80026b2 <HAL_ADC_Start_DMA+0x1ce>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	e00b      	b.n	80026b2 <HAL_ADC_Start_DMA+0x1ce>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269e:	f043 0210 	orr.w	r2, r3, #16
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026aa:	f043 0201 	orr.w	r2, r3, #1
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return status;
 80026b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	20000000 	.word	0x20000000
 80026c0:	431bde83 	.word	0x431bde83
 80026c4:	fffff8fe 	.word	0xfffff8fe
 80026c8:	08002c65 	.word	0x08002c65
 80026cc:	08002d1f 	.word	0x08002d1f
 80026d0:	08002d3b 	.word	0x08002d3b
 80026d4:	40012300 	.word	0x40012300
 80026d8:	40012000 	.word	0x40012000
 80026dc:	40012200 	.word	0x40012200

080026e0 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026e8:	2300      	movs	r3, #0
 80026ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d101      	bne.n	80026fa <HAL_ADC_Stop_DMA+0x1a>
 80026f6:	2302      	movs	r3, #2
 80026f8:	e046      	b.n	8002788 <HAL_ADC_Stop_DMA+0xa8>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 0201 	bic.w	r2, r2, #1
 8002710:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b00      	cmp	r3, #0
 800271e:	d12e      	bne.n	800277e <HAL_ADC_Stop_DMA+0x9e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800272e:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002734:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d10f      	bne.n	800275e <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002742:	4618      	mov	r0, r3
 8002744:	f000 ff0a 	bl	800355c <HAL_DMA_Abort>
 8002748:	4603      	mov	r3, r0
 800274a:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800274c:	7bfb      	ldrb	r3, [r7, #15]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d005      	beq.n	800275e <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002756:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 800276c:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002772:	4b07      	ldr	r3, [pc, #28]	@ (8002790 <HAL_ADC_Stop_DMA+0xb0>)
 8002774:	4013      	ands	r3, r2
 8002776:	f043 0201 	orr.w	r2, r3, #1
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002786:	7bfb      	ldrb	r3, [r7, #15]
}
 8002788:	4618      	mov	r0, r3
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	ffffeefe 	.word	0xffffeefe

08002794 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d101      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x1c>
 80027d4:	2302      	movs	r3, #2
 80027d6:	e13a      	b.n	8002a4e <HAL_ADC_ConfigChannel+0x292>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2b09      	cmp	r3, #9
 80027e6:	d93a      	bls.n	800285e <HAL_ADC_ConfigChannel+0xa2>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80027f0:	d035      	beq.n	800285e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68d9      	ldr	r1, [r3, #12]
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	461a      	mov	r2, r3
 8002800:	4613      	mov	r3, r2
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	4413      	add	r3, r2
 8002806:	3b1e      	subs	r3, #30
 8002808:	2207      	movs	r2, #7
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43da      	mvns	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	400a      	ands	r2, r1
 8002816:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a8f      	ldr	r2, [pc, #572]	@ (8002a5c <HAL_ADC_ConfigChannel+0x2a0>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d10a      	bne.n	8002838 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68d9      	ldr	r1, [r3, #12]
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	061a      	lsls	r2, r3, #24
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002836:	e039      	b.n	80028ac <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68d9      	ldr	r1, [r3, #12]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	689a      	ldr	r2, [r3, #8]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	b29b      	uxth	r3, r3
 8002848:	4618      	mov	r0, r3
 800284a:	4603      	mov	r3, r0
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	4403      	add	r3, r0
 8002850:	3b1e      	subs	r3, #30
 8002852:	409a      	lsls	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	430a      	orrs	r2, r1
 800285a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800285c:	e026      	b.n	80028ac <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6919      	ldr	r1, [r3, #16]
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	b29b      	uxth	r3, r3
 800286a:	461a      	mov	r2, r3
 800286c:	4613      	mov	r3, r2
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	4413      	add	r3, r2
 8002872:	f003 031f 	and.w	r3, r3, #31
 8002876:	2207      	movs	r2, #7
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43da      	mvns	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	400a      	ands	r2, r1
 8002884:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6919      	ldr	r1, [r3, #16]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	b29b      	uxth	r3, r3
 8002896:	4618      	mov	r0, r3
 8002898:	4603      	mov	r3, r0
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	4403      	add	r3, r0
 800289e:	f003 031f 	and.w	r3, r3, #31
 80028a2:	409a      	lsls	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	2b06      	cmp	r3, #6
 80028b2:	d824      	bhi.n	80028fe <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	3b05      	subs	r3, #5
 80028c6:	221f      	movs	r2, #31
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43da      	mvns	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	400a      	ands	r2, r1
 80028d4:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	4618      	mov	r0, r3
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	3b05      	subs	r3, #5
 80028f0:	fa00 f203 	lsl.w	r2, r0, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	635a      	str	r2, [r3, #52]	@ 0x34
 80028fc:	e04c      	b.n	8002998 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b0c      	cmp	r3, #12
 8002904:	d824      	bhi.n	8002950 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	4613      	mov	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	3b23      	subs	r3, #35	@ 0x23
 8002918:	221f      	movs	r2, #31
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43da      	mvns	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	400a      	ands	r2, r1
 8002926:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	b29b      	uxth	r3, r3
 8002934:	4618      	mov	r0, r3
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	4613      	mov	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	3b23      	subs	r3, #35	@ 0x23
 8002942:	fa00 f203 	lsl.w	r2, r0, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	631a      	str	r2, [r3, #48]	@ 0x30
 800294e:	e023      	b.n	8002998 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	4613      	mov	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	3b41      	subs	r3, #65	@ 0x41
 8002962:	221f      	movs	r2, #31
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	43da      	mvns	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	400a      	ands	r2, r1
 8002970:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	b29b      	uxth	r3, r3
 800297e:	4618      	mov	r0, r3
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4413      	add	r3, r2
 800298a:	3b41      	subs	r3, #65	@ 0x41
 800298c:	fa00 f203 	lsl.w	r2, r0, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a30      	ldr	r2, [pc, #192]	@ (8002a60 <HAL_ADC_ConfigChannel+0x2a4>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d10a      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x1fc>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80029aa:	d105      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80029ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002a64 <HAL_ADC_ConfigChannel+0x2a8>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	4a2c      	ldr	r2, [pc, #176]	@ (8002a64 <HAL_ADC_ConfigChannel+0x2a8>)
 80029b2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80029b6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a28      	ldr	r2, [pc, #160]	@ (8002a60 <HAL_ADC_ConfigChannel+0x2a4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d10f      	bne.n	80029e2 <HAL_ADC_ConfigChannel+0x226>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b12      	cmp	r3, #18
 80029c8:	d10b      	bne.n	80029e2 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80029ca:	4b26      	ldr	r3, [pc, #152]	@ (8002a64 <HAL_ADC_ConfigChannel+0x2a8>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	4a25      	ldr	r2, [pc, #148]	@ (8002a64 <HAL_ADC_ConfigChannel+0x2a8>)
 80029d0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80029d4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80029d6:	4b23      	ldr	r3, [pc, #140]	@ (8002a64 <HAL_ADC_ConfigChannel+0x2a8>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	4a22      	ldr	r2, [pc, #136]	@ (8002a64 <HAL_ADC_ConfigChannel+0x2a8>)
 80029dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80029e0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a1e      	ldr	r2, [pc, #120]	@ (8002a60 <HAL_ADC_ConfigChannel+0x2a4>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d12b      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x288>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a1a      	ldr	r2, [pc, #104]	@ (8002a5c <HAL_ADC_ConfigChannel+0x2a0>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d003      	beq.n	80029fe <HAL_ADC_ConfigChannel+0x242>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2b11      	cmp	r3, #17
 80029fc:	d122      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80029fe:	4b19      	ldr	r3, [pc, #100]	@ (8002a64 <HAL_ADC_ConfigChannel+0x2a8>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	4a18      	ldr	r2, [pc, #96]	@ (8002a64 <HAL_ADC_ConfigChannel+0x2a8>)
 8002a04:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002a08:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002a0a:	4b16      	ldr	r3, [pc, #88]	@ (8002a64 <HAL_ADC_ConfigChannel+0x2a8>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	4a15      	ldr	r2, [pc, #84]	@ (8002a64 <HAL_ADC_ConfigChannel+0x2a8>)
 8002a10:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a14:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a10      	ldr	r2, [pc, #64]	@ (8002a5c <HAL_ADC_ConfigChannel+0x2a0>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d111      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002a20:	4b11      	ldr	r3, [pc, #68]	@ (8002a68 <HAL_ADC_ConfigChannel+0x2ac>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a11      	ldr	r2, [pc, #68]	@ (8002a6c <HAL_ADC_ConfigChannel+0x2b0>)
 8002a26:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2a:	0c9a      	lsrs	r2, r3, #18
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002a36:	e002      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1f9      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3714      	adds	r7, #20
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	10000012 	.word	0x10000012
 8002a60:	40012000 	.word	0x40012000
 8002a64:	40012300 	.word	0x40012300
 8002a68:	20000000 	.word	0x20000000
 8002a6c:	431bde83 	.word	0x431bde83

08002a70 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002a78:	4b78      	ldr	r3, [pc, #480]	@ (8002c5c <ADC_Init+0x1ec>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	4a77      	ldr	r2, [pc, #476]	@ (8002c5c <ADC_Init+0x1ec>)
 8002a7e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002a82:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002a84:	4b75      	ldr	r3, [pc, #468]	@ (8002c5c <ADC_Init+0x1ec>)
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	4973      	ldr	r1, [pc, #460]	@ (8002c5c <ADC_Init+0x1ec>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002aa0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6859      	ldr	r1, [r3, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	021a      	lsls	r2, r3, #8
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002ac4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	6859      	ldr	r1, [r3, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ae6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6899      	ldr	r1, [r3, #8]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68da      	ldr	r2, [r3, #12]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002afe:	4a58      	ldr	r2, [pc, #352]	@ (8002c60 <ADC_Init+0x1f0>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d022      	beq.n	8002b4a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b12:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6899      	ldr	r1, [r3, #8]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6899      	ldr	r1, [r3, #8]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	609a      	str	r2, [r3, #8]
 8002b48:	e00f      	b.n	8002b6a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b68:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0202 	bic.w	r2, r2, #2
 8002b78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6899      	ldr	r1, [r3, #8]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	005a      	lsls	r2, r3, #1
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d01b      	beq.n	8002bd0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ba6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	685a      	ldr	r2, [r3, #4]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002bb6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6859      	ldr	r1, [r3, #4]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	035a      	lsls	r2, r3, #13
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	605a      	str	r2, [r3, #4]
 8002bce:	e007      	b.n	8002be0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bde:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002bee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	051a      	lsls	r2, r3, #20
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002c14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	6899      	ldr	r1, [r3, #8]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002c22:	025a      	lsls	r2, r3, #9
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6899      	ldr	r1, [r3, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	029a      	lsls	r2, r3, #10
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	609a      	str	r2, [r3, #8]
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	40012300 	.word	0x40012300
 8002c60:	0f000001 	.word	0x0f000001

08002c64 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c70:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c76:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d13c      	bne.n	8002cf8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c82:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d12b      	bne.n	8002cf0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d127      	bne.n	8002cf0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d006      	beq.n	8002cbc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d119      	bne.n	8002cf0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 0220 	bic.w	r2, r2, #32
 8002cca:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cdc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d105      	bne.n	8002cf0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce8:	f043 0201 	orr.w	r2, r3, #1
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f01d f907 	bl	801ff04 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002cf6:	e00e      	b.n	8002d16 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfc:	f003 0310 	and.w	r3, r3, #16
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d003      	beq.n	8002d0c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f7ff fd4f 	bl	80027a8 <HAL_ADC_ErrorCallback>
}
 8002d0a:	e004      	b.n	8002d16 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	4798      	blx	r3
}
 8002d16:	bf00      	nop
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b084      	sub	sp, #16
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d2a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f7ff fd31 	bl	8002794 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d32:	bf00      	nop
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b084      	sub	sp, #16
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d46:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2240      	movs	r2, #64	@ 0x40
 8002d4c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d52:	f043 0204 	orr.w	r2, r3, #4
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f7ff fd24 	bl	80027a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d60:	bf00      	nop
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d78:	4b0b      	ldr	r3, [pc, #44]	@ (8002da8 <__NVIC_SetPriorityGrouping+0x40>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d7e:	68ba      	ldr	r2, [r7, #8]
 8002d80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d84:	4013      	ands	r3, r2
 8002d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d90:	4b06      	ldr	r3, [pc, #24]	@ (8002dac <__NVIC_SetPriorityGrouping+0x44>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d96:	4a04      	ldr	r2, [pc, #16]	@ (8002da8 <__NVIC_SetPriorityGrouping+0x40>)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	60d3      	str	r3, [r2, #12]
}
 8002d9c:	bf00      	nop
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	e000ed00 	.word	0xe000ed00
 8002dac:	05fa0000 	.word	0x05fa0000

08002db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002db4:	4b04      	ldr	r3, [pc, #16]	@ (8002dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	0a1b      	lsrs	r3, r3, #8
 8002dba:	f003 0307 	and.w	r3, r3, #7
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	e000ed00 	.word	0xe000ed00

08002dcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	db0b      	blt.n	8002df6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dde:	79fb      	ldrb	r3, [r7, #7]
 8002de0:	f003 021f 	and.w	r2, r3, #31
 8002de4:	4907      	ldr	r1, [pc, #28]	@ (8002e04 <__NVIC_EnableIRQ+0x38>)
 8002de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dea:	095b      	lsrs	r3, r3, #5
 8002dec:	2001      	movs	r0, #1
 8002dee:	fa00 f202 	lsl.w	r2, r0, r2
 8002df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	e000e100 	.word	0xe000e100

08002e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	6039      	str	r1, [r7, #0]
 8002e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	db0a      	blt.n	8002e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	490c      	ldr	r1, [pc, #48]	@ (8002e54 <__NVIC_SetPriority+0x4c>)
 8002e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e26:	0112      	lsls	r2, r2, #4
 8002e28:	b2d2      	uxtb	r2, r2
 8002e2a:	440b      	add	r3, r1
 8002e2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e30:	e00a      	b.n	8002e48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	4908      	ldr	r1, [pc, #32]	@ (8002e58 <__NVIC_SetPriority+0x50>)
 8002e38:	79fb      	ldrb	r3, [r7, #7]
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	3b04      	subs	r3, #4
 8002e40:	0112      	lsls	r2, r2, #4
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	440b      	add	r3, r1
 8002e46:	761a      	strb	r2, [r3, #24]
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	e000e100 	.word	0xe000e100
 8002e58:	e000ed00 	.word	0xe000ed00

08002e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b089      	sub	sp, #36	@ 0x24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	f1c3 0307 	rsb	r3, r3, #7
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	bf28      	it	cs
 8002e7a:	2304      	movcs	r3, #4
 8002e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	3304      	adds	r3, #4
 8002e82:	2b06      	cmp	r3, #6
 8002e84:	d902      	bls.n	8002e8c <NVIC_EncodePriority+0x30>
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	3b03      	subs	r3, #3
 8002e8a:	e000      	b.n	8002e8e <NVIC_EncodePriority+0x32>
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	43da      	mvns	r2, r3
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	401a      	ands	r2, r3
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ea4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8002eae:	43d9      	mvns	r1, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb4:	4313      	orrs	r3, r2
         );
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3724      	adds	r7, #36	@ 0x24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b082      	sub	sp, #8
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7ff ff4c 	bl	8002d68 <__NVIC_SetPriorityGrouping>
}
 8002ed0:	bf00      	nop
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
 8002ee4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002eea:	f7ff ff61 	bl	8002db0 <__NVIC_GetPriorityGrouping>
 8002eee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	68b9      	ldr	r1, [r7, #8]
 8002ef4:	6978      	ldr	r0, [r7, #20]
 8002ef6:	f7ff ffb1 	bl	8002e5c <NVIC_EncodePriority>
 8002efa:	4602      	mov	r2, r0
 8002efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f00:	4611      	mov	r1, r2
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff ff80 	bl	8002e08 <__NVIC_SetPriority>
}
 8002f08:	bf00      	nop
 8002f0a:	3718      	adds	r7, #24
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	4603      	mov	r3, r0
 8002f18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff ff54 	bl	8002dcc <__NVIC_EnableIRQ>
}
 8002f24:	bf00      	nop
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e054      	b.n	8002fe8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	7f5b      	ldrb	r3, [r3, #29]
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d105      	bne.n	8002f54 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7fd fc2a 	bl	80007a8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2202      	movs	r2, #2
 8002f58:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	791b      	ldrb	r3, [r3, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10c      	bne.n	8002f7c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a22      	ldr	r2, [pc, #136]	@ (8002ff0 <HAL_CRC_Init+0xc4>)
 8002f68:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0218 	bic.w	r2, r2, #24
 8002f78:	609a      	str	r2, [r3, #8]
 8002f7a:	e00c      	b.n	8002f96 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6899      	ldr	r1, [r3, #8]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	461a      	mov	r2, r3
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f94c 	bl	8003224 <HAL_CRCEx_Polynomial_Set>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e028      	b.n	8002fe8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	795b      	ldrb	r3, [r3, #5]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d105      	bne.n	8002faa <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002fa6:	611a      	str	r2, [r3, #16]
 8002fa8:	e004      	b.n	8002fb4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6912      	ldr	r2, [r2, #16]
 8002fb2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	695a      	ldr	r2, [r3, #20]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	699a      	ldr	r2, [r3, #24]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3708      	adds	r7, #8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	04c11db7 	.word	0x04c11db7

08002ff4 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8003000:	2300      	movs	r3, #0
 8003002:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2202      	movs	r2, #2
 8003008:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f042 0201 	orr.w	r2, r2, #1
 8003018:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	2b03      	cmp	r3, #3
 8003020:	d006      	beq.n	8003030 <HAL_CRC_Calculate+0x3c>
 8003022:	2b03      	cmp	r3, #3
 8003024:	d829      	bhi.n	800307a <HAL_CRC_Calculate+0x86>
 8003026:	2b01      	cmp	r3, #1
 8003028:	d019      	beq.n	800305e <HAL_CRC_Calculate+0x6a>
 800302a:	2b02      	cmp	r3, #2
 800302c:	d01e      	beq.n	800306c <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800302e:	e024      	b.n	800307a <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8003030:	2300      	movs	r3, #0
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	e00a      	b.n	800304c <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	441a      	add	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6812      	ldr	r2, [r2, #0]
 8003044:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	3301      	adds	r3, #1
 800304a:	617b      	str	r3, [r7, #20]
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	429a      	cmp	r2, r3
 8003052:	d3f0      	bcc.n	8003036 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	613b      	str	r3, [r7, #16]
      break;
 800305c:	e00e      	b.n	800307c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	68b9      	ldr	r1, [r7, #8]
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f000 f812 	bl	800308c <CRC_Handle_8>
 8003068:	6138      	str	r0, [r7, #16]
      break;
 800306a:	e007      	b.n	800307c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	68b9      	ldr	r1, [r7, #8]
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f000 f89d 	bl	80031b0 <CRC_Handle_16>
 8003076:	6138      	str	r0, [r7, #16]
      break;
 8003078:	e000      	b.n	800307c <HAL_CRC_Calculate+0x88>
      break;
 800307a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2201      	movs	r2, #1
 8003080:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8003082:	693b      	ldr	r3, [r7, #16]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3718      	adds	r7, #24
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800308c:	b480      	push	{r7}
 800308e:	b089      	sub	sp, #36	@ 0x24
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003098:	2300      	movs	r3, #0
 800309a:	61fb      	str	r3, [r7, #28]
 800309c:	e023      	b.n	80030e6 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	4413      	add	r3, r2
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	3301      	adds	r3, #1
 80030b0:	68b9      	ldr	r1, [r7, #8]
 80030b2:	440b      	add	r3, r1
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80030b8:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	3302      	adds	r3, #2
 80030c0:	68b9      	ldr	r1, [r7, #8]
 80030c2:	440b      	add	r3, r1
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80030c8:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	3303      	adds	r3, #3
 80030d0:	68b9      	ldr	r1, [r7, #8]
 80030d2:	440b      	add	r3, r1
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80030dc:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80030de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	3301      	adds	r3, #1
 80030e4:	61fb      	str	r3, [r7, #28]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	089b      	lsrs	r3, r3, #2
 80030ea:	69fa      	ldr	r2, [r7, #28]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d3d6      	bcc.n	800309e <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d051      	beq.n	800319e <CRC_Handle_8+0x112>
  {
    if ((BufferLength % 4U) == 1U)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f003 0303 	and.w	r3, r3, #3
 8003100:	2b01      	cmp	r3, #1
 8003102:	d108      	bne.n	8003116 <CRC_Handle_8+0x8a>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	4413      	add	r3, r2
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	6812      	ldr	r2, [r2, #0]
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	7013      	strb	r3, [r2, #0]
 8003114:	e043      	b.n	800319e <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 2U)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f003 0303 	and.w	r3, r3, #3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d118      	bne.n	8003152 <CRC_Handle_8+0xc6>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	4413      	add	r3, r2
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	b21b      	sxth	r3, r3
 800312c:	021b      	lsls	r3, r3, #8
 800312e:	b21a      	sxth	r2, r3
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	3301      	adds	r3, #1
 8003136:	68b9      	ldr	r1, [r7, #8]
 8003138:	440b      	add	r3, r1
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	b21b      	sxth	r3, r3
 800313e:	4313      	orrs	r3, r2
 8003140:	b21b      	sxth	r3, r3
 8003142:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	8b7a      	ldrh	r2, [r7, #26]
 800314e:	801a      	strh	r2, [r3, #0]
 8003150:	e025      	b.n	800319e <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 3U)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f003 0303 	and.w	r3, r3, #3
 8003158:	2b03      	cmp	r3, #3
 800315a:	d120      	bne.n	800319e <CRC_Handle_8+0x112>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	4413      	add	r3, r2
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	b21b      	sxth	r3, r3
 8003168:	021b      	lsls	r3, r3, #8
 800316a:	b21a      	sxth	r2, r3
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	3301      	adds	r3, #1
 8003172:	68b9      	ldr	r1, [r7, #8]
 8003174:	440b      	add	r3, r1
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	b21b      	sxth	r3, r3
 800317a:	4313      	orrs	r3, r2
 800317c:	b21b      	sxth	r3, r3
 800317e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	8b7a      	ldrh	r2, [r7, #26]
 800318a:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	3302      	adds	r3, #2
 8003192:	68ba      	ldr	r2, [r7, #8]
 8003194:	4413      	add	r3, r2
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	6812      	ldr	r2, [r2, #0]
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	7013      	strb	r3, [r2, #0]
      /* Nothing to do */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3724      	adds	r7, #36	@ 0x24
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b087      	sub	sp, #28
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80031bc:	2300      	movs	r3, #0
 80031be:	617b      	str	r3, [r7, #20]
 80031c0:	e013      	b.n	80031ea <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	4413      	add	r3, r2
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	041a      	lsls	r2, r3, #16
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	3302      	adds	r3, #2
 80031d4:	68b9      	ldr	r1, [r7, #8]
 80031d6:	440b      	add	r3, r1
 80031d8:	881b      	ldrh	r3, [r3, #0]
 80031da:	4619      	mov	r1, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	3301      	adds	r3, #1
 80031e8:	617b      	str	r3, [r7, #20]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	085b      	lsrs	r3, r3, #1
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d3e6      	bcc.n	80031c2 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d009      	beq.n	8003212 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	4413      	add	r3, r2
 800320c:	881a      	ldrh	r2, [r3, #0]
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
}
 8003218:	4618      	mov	r0, r3
 800321a:	371c      	adds	r7, #28
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003224:	b480      	push	{r7}
 8003226:	b087      	sub	sp, #28
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003230:	2300      	movs	r3, #0
 8003232:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003234:	231f      	movs	r3, #31
 8003236:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d102      	bne.n	8003248 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	75fb      	strb	r3, [r7, #23]
 8003246:	e063      	b.n	8003310 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003248:	bf00      	nop
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1e5a      	subs	r2, r3, #1
 800324e:	613a      	str	r2, [r7, #16]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d009      	beq.n	8003268 <HAL_CRCEx_Polynomial_Set+0x44>
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	f003 031f 	and.w	r3, r3, #31
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	fa22 f303 	lsr.w	r3, r2, r3
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0f0      	beq.n	800324a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b18      	cmp	r3, #24
 800326c:	d846      	bhi.n	80032fc <HAL_CRCEx_Polynomial_Set+0xd8>
 800326e:	a201      	add	r2, pc, #4	@ (adr r2, 8003274 <HAL_CRCEx_Polynomial_Set+0x50>)
 8003270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003274:	08003303 	.word	0x08003303
 8003278:	080032fd 	.word	0x080032fd
 800327c:	080032fd 	.word	0x080032fd
 8003280:	080032fd 	.word	0x080032fd
 8003284:	080032fd 	.word	0x080032fd
 8003288:	080032fd 	.word	0x080032fd
 800328c:	080032fd 	.word	0x080032fd
 8003290:	080032fd 	.word	0x080032fd
 8003294:	080032f1 	.word	0x080032f1
 8003298:	080032fd 	.word	0x080032fd
 800329c:	080032fd 	.word	0x080032fd
 80032a0:	080032fd 	.word	0x080032fd
 80032a4:	080032fd 	.word	0x080032fd
 80032a8:	080032fd 	.word	0x080032fd
 80032ac:	080032fd 	.word	0x080032fd
 80032b0:	080032fd 	.word	0x080032fd
 80032b4:	080032e5 	.word	0x080032e5
 80032b8:	080032fd 	.word	0x080032fd
 80032bc:	080032fd 	.word	0x080032fd
 80032c0:	080032fd 	.word	0x080032fd
 80032c4:	080032fd 	.word	0x080032fd
 80032c8:	080032fd 	.word	0x080032fd
 80032cc:	080032fd 	.word	0x080032fd
 80032d0:	080032fd 	.word	0x080032fd
 80032d4:	080032d9 	.word	0x080032d9
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	2b06      	cmp	r3, #6
 80032dc:	d913      	bls.n	8003306 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80032e2:	e010      	b.n	8003306 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	2b07      	cmp	r3, #7
 80032e8:	d90f      	bls.n	800330a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80032ee:	e00c      	b.n	800330a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	2b0f      	cmp	r3, #15
 80032f4:	d90b      	bls.n	800330e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80032fa:	e008      	b.n	800330e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	75fb      	strb	r3, [r7, #23]
        break;
 8003300:	e006      	b.n	8003310 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003302:	bf00      	nop
 8003304:	e004      	b.n	8003310 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003306:	bf00      	nop
 8003308:	e002      	b.n	8003310 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800330a:	bf00      	nop
 800330c:	e000      	b.n	8003310 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800330e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8003310:	7dfb      	ldrb	r3, [r7, #23]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10d      	bne.n	8003332 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f023 0118 	bic.w	r1, r3, #24
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	430a      	orrs	r2, r1
 8003330:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003332:	7dfb      	ldrb	r3, [r7, #23]
}
 8003334:	4618      	mov	r0, r3
 8003336:	371c      	adds	r7, #28
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003348:	2300      	movs	r3, #0
 800334a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800334c:	f7ff f856 	bl	80023fc <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e099      	b.n	8003490 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2202      	movs	r2, #2
 8003360:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 0201 	bic.w	r2, r2, #1
 800337a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800337c:	e00f      	b.n	800339e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800337e:	f7ff f83d 	bl	80023fc <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b05      	cmp	r3, #5
 800338a:	d908      	bls.n	800339e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2220      	movs	r2, #32
 8003390:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2203      	movs	r2, #3
 8003396:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e078      	b.n	8003490 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1e8      	bne.n	800337e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	4b38      	ldr	r3, [pc, #224]	@ (8003498 <HAL_DMA_Init+0x158>)
 80033b8:	4013      	ands	r3, r2
 80033ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f4:	2b04      	cmp	r3, #4
 80033f6:	d107      	bne.n	8003408 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003400:	4313      	orrs	r3, r2
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	4313      	orrs	r3, r2
 8003406:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f023 0307 	bic.w	r3, r3, #7
 800341e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	4313      	orrs	r3, r2
 8003428:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342e:	2b04      	cmp	r3, #4
 8003430:	d117      	bne.n	8003462 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	4313      	orrs	r3, r2
 800343a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00e      	beq.n	8003462 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 fb23 	bl	8003a90 <DMA_CheckFifoParam>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d008      	beq.n	8003462 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2240      	movs	r2, #64	@ 0x40
 8003454:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800345e:	2301      	movs	r3, #1
 8003460:	e016      	b.n	8003490 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 fada 	bl	8003a24 <DMA_CalcBaseAndBitshift>
 8003470:	4603      	mov	r3, r0
 8003472:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003478:	223f      	movs	r2, #63	@ 0x3f
 800347a:	409a      	lsls	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3718      	adds	r7, #24
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	f010803f 	.word	0xf010803f

0800349c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
 80034a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034aa:	2300      	movs	r3, #0
 80034ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d101      	bne.n	80034c2 <HAL_DMA_Start_IT+0x26>
 80034be:	2302      	movs	r3, #2
 80034c0:	e048      	b.n	8003554 <HAL_DMA_Start_IT+0xb8>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d137      	bne.n	8003546 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2202      	movs	r2, #2
 80034da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	68b9      	ldr	r1, [r7, #8]
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 fa6c 	bl	80039c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f4:	223f      	movs	r2, #63	@ 0x3f
 80034f6:	409a      	lsls	r2, r3
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f042 0216 	orr.w	r2, r2, #22
 800350a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	695a      	ldr	r2, [r3, #20]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800351a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003520:	2b00      	cmp	r3, #0
 8003522:	d007      	beq.n	8003534 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0208 	orr.w	r2, r2, #8
 8003532:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 0201 	orr.w	r2, r2, #1
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	e005      	b.n	8003552 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800354e:	2302      	movs	r3, #2
 8003550:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003552:	7dfb      	ldrb	r3, [r7, #23]
}
 8003554:	4618      	mov	r0, r3
 8003556:	3718      	adds	r7, #24
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003568:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800356a:	f7fe ff47 	bl	80023fc <HAL_GetTick>
 800356e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d008      	beq.n	800358e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2280      	movs	r2, #128	@ 0x80
 8003580:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e052      	b.n	8003634 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0216 	bic.w	r2, r2, #22
 800359c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	695a      	ldr	r2, [r3, #20]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80035ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d103      	bne.n	80035be <HAL_DMA_Abort+0x62>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d007      	beq.n	80035ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0208 	bic.w	r2, r2, #8
 80035cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 0201 	bic.w	r2, r2, #1
 80035dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035de:	e013      	b.n	8003608 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035e0:	f7fe ff0c 	bl	80023fc <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b05      	cmp	r3, #5
 80035ec:	d90c      	bls.n	8003608 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2220      	movs	r2, #32
 80035f2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2203      	movs	r2, #3
 80035f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e015      	b.n	8003634 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1e4      	bne.n	80035e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800361a:	223f      	movs	r2, #63	@ 0x3f
 800361c:	409a      	lsls	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d004      	beq.n	800365a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2280      	movs	r2, #128	@ 0x80
 8003654:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e00c      	b.n	8003674 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2205      	movs	r2, #5
 800365e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0201 	bic.w	r2, r2, #1
 8003670:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003688:	2300      	movs	r3, #0
 800368a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800368c:	4b8e      	ldr	r3, [pc, #568]	@ (80038c8 <HAL_DMA_IRQHandler+0x248>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a8e      	ldr	r2, [pc, #568]	@ (80038cc <HAL_DMA_IRQHandler+0x24c>)
 8003692:	fba2 2303 	umull	r2, r3, r2, r3
 8003696:	0a9b      	lsrs	r3, r3, #10
 8003698:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800369e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036aa:	2208      	movs	r2, #8
 80036ac:	409a      	lsls	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	4013      	ands	r3, r2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d01a      	beq.n	80036ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d013      	beq.n	80036ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 0204 	bic.w	r2, r2, #4
 80036d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d8:	2208      	movs	r2, #8
 80036da:	409a      	lsls	r2, r3
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036e4:	f043 0201 	orr.w	r2, r3, #1
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036f0:	2201      	movs	r2, #1
 80036f2:	409a      	lsls	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4013      	ands	r3, r2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d012      	beq.n	8003722 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00b      	beq.n	8003722 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800370e:	2201      	movs	r2, #1
 8003710:	409a      	lsls	r2, r3
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800371a:	f043 0202 	orr.w	r2, r3, #2
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003726:	2204      	movs	r2, #4
 8003728:	409a      	lsls	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	4013      	ands	r3, r2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d012      	beq.n	8003758 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00b      	beq.n	8003758 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003744:	2204      	movs	r2, #4
 8003746:	409a      	lsls	r2, r3
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003750:	f043 0204 	orr.w	r2, r3, #4
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800375c:	2210      	movs	r2, #16
 800375e:	409a      	lsls	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	4013      	ands	r3, r2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d043      	beq.n	80037f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b00      	cmp	r3, #0
 8003774:	d03c      	beq.n	80037f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800377a:	2210      	movs	r2, #16
 800377c:	409a      	lsls	r2, r3
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d018      	beq.n	80037c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d108      	bne.n	80037b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d024      	beq.n	80037f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	4798      	blx	r3
 80037ae:	e01f      	b.n	80037f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d01b      	beq.n	80037f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	4798      	blx	r3
 80037c0:	e016      	b.n	80037f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d107      	bne.n	80037e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0208 	bic.w	r2, r2, #8
 80037de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d003      	beq.n	80037f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037f4:	2220      	movs	r2, #32
 80037f6:	409a      	lsls	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4013      	ands	r3, r2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 808f 	beq.w	8003920 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0310 	and.w	r3, r3, #16
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 8087 	beq.w	8003920 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003816:	2220      	movs	r2, #32
 8003818:	409a      	lsls	r2, r3
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b05      	cmp	r3, #5
 8003828:	d136      	bne.n	8003898 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0216 	bic.w	r2, r2, #22
 8003838:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	695a      	ldr	r2, [r3, #20]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003848:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384e:	2b00      	cmp	r3, #0
 8003850:	d103      	bne.n	800385a <HAL_DMA_IRQHandler+0x1da>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003856:	2b00      	cmp	r3, #0
 8003858:	d007      	beq.n	800386a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0208 	bic.w	r2, r2, #8
 8003868:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800386e:	223f      	movs	r2, #63	@ 0x3f
 8003870:	409a      	lsls	r2, r3
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800388a:	2b00      	cmp	r3, #0
 800388c:	d07e      	beq.n	800398c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	4798      	blx	r3
        }
        return;
 8003896:	e079      	b.n	800398c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d01d      	beq.n	80038e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10d      	bne.n	80038d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d031      	beq.n	8003920 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	4798      	blx	r3
 80038c4:	e02c      	b.n	8003920 <HAL_DMA_IRQHandler+0x2a0>
 80038c6:	bf00      	nop
 80038c8:	20000000 	.word	0x20000000
 80038cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d023      	beq.n	8003920 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	4798      	blx	r3
 80038e0:	e01e      	b.n	8003920 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10f      	bne.n	8003910 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0210 	bic.w	r2, r2, #16
 80038fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003924:	2b00      	cmp	r3, #0
 8003926:	d032      	beq.n	800398e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	2b00      	cmp	r3, #0
 8003932:	d022      	beq.n	800397a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2205      	movs	r2, #5
 8003938:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0201 	bic.w	r2, r2, #1
 800394a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	3301      	adds	r3, #1
 8003950:	60bb      	str	r3, [r7, #8]
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	429a      	cmp	r2, r3
 8003956:	d307      	bcc.n	8003968 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f2      	bne.n	800394c <HAL_DMA_IRQHandler+0x2cc>
 8003966:	e000      	b.n	800396a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003968:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800397e:	2b00      	cmp	r3, #0
 8003980:	d005      	beq.n	800398e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	4798      	blx	r3
 800398a:	e000      	b.n	800398e <HAL_DMA_IRQHandler+0x30e>
        return;
 800398c:	bf00      	nop
    }
  }
}
 800398e:	3718      	adds	r7, #24
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039a2:	b2db      	uxtb	r3, r3
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80039bc:	4618      	mov	r0, r3
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
 80039d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80039e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	2b40      	cmp	r3, #64	@ 0x40
 80039f4:	d108      	bne.n	8003a08 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a06:	e007      	b.n	8003a18 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68ba      	ldr	r2, [r7, #8]
 8003a0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	60da      	str	r2, [r3, #12]
}
 8003a18:	bf00      	nop
 8003a1a:	3714      	adds	r7, #20
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	3b10      	subs	r3, #16
 8003a34:	4a13      	ldr	r2, [pc, #76]	@ (8003a84 <DMA_CalcBaseAndBitshift+0x60>)
 8003a36:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3a:	091b      	lsrs	r3, r3, #4
 8003a3c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a3e:	4a12      	ldr	r2, [pc, #72]	@ (8003a88 <DMA_CalcBaseAndBitshift+0x64>)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4413      	add	r3, r2
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	461a      	mov	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2b03      	cmp	r3, #3
 8003a50:	d908      	bls.n	8003a64 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	461a      	mov	r2, r3
 8003a58:	4b0c      	ldr	r3, [pc, #48]	@ (8003a8c <DMA_CalcBaseAndBitshift+0x68>)
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	1d1a      	adds	r2, r3, #4
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	659a      	str	r2, [r3, #88]	@ 0x58
 8003a62:	e006      	b.n	8003a72 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	461a      	mov	r2, r3
 8003a6a:	4b08      	ldr	r3, [pc, #32]	@ (8003a8c <DMA_CalcBaseAndBitshift+0x68>)
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3714      	adds	r7, #20
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	aaaaaaab 	.word	0xaaaaaaab
 8003a88:	080270cc 	.word	0x080270cc
 8003a8c:	fffffc00 	.word	0xfffffc00

08003a90 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d11f      	bne.n	8003aea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	2b03      	cmp	r3, #3
 8003aae:	d856      	bhi.n	8003b5e <DMA_CheckFifoParam+0xce>
 8003ab0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ab8 <DMA_CheckFifoParam+0x28>)
 8003ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab6:	bf00      	nop
 8003ab8:	08003ac9 	.word	0x08003ac9
 8003abc:	08003adb 	.word	0x08003adb
 8003ac0:	08003ac9 	.word	0x08003ac9
 8003ac4:	08003b5f 	.word	0x08003b5f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003acc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d046      	beq.n	8003b62 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ad8:	e043      	b.n	8003b62 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ade:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003ae2:	d140      	bne.n	8003b66 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ae8:	e03d      	b.n	8003b66 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003af2:	d121      	bne.n	8003b38 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	2b03      	cmp	r3, #3
 8003af8:	d837      	bhi.n	8003b6a <DMA_CheckFifoParam+0xda>
 8003afa:	a201      	add	r2, pc, #4	@ (adr r2, 8003b00 <DMA_CheckFifoParam+0x70>)
 8003afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b00:	08003b11 	.word	0x08003b11
 8003b04:	08003b17 	.word	0x08003b17
 8003b08:	08003b11 	.word	0x08003b11
 8003b0c:	08003b29 	.word	0x08003b29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	73fb      	strb	r3, [r7, #15]
      break;
 8003b14:	e030      	b.n	8003b78 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b1a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d025      	beq.n	8003b6e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b26:	e022      	b.n	8003b6e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b2c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b30:	d11f      	bne.n	8003b72 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b36:	e01c      	b.n	8003b72 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d903      	bls.n	8003b46 <DMA_CheckFifoParam+0xb6>
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2b03      	cmp	r3, #3
 8003b42:	d003      	beq.n	8003b4c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b44:	e018      	b.n	8003b78 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	73fb      	strb	r3, [r7, #15]
      break;
 8003b4a:	e015      	b.n	8003b78 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00e      	beq.n	8003b76 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b5c:	e00b      	b.n	8003b76 <DMA_CheckFifoParam+0xe6>
      break;
 8003b5e:	bf00      	nop
 8003b60:	e00a      	b.n	8003b78 <DMA_CheckFifoParam+0xe8>
      break;
 8003b62:	bf00      	nop
 8003b64:	e008      	b.n	8003b78 <DMA_CheckFifoParam+0xe8>
      break;
 8003b66:	bf00      	nop
 8003b68:	e006      	b.n	8003b78 <DMA_CheckFifoParam+0xe8>
      break;
 8003b6a:	bf00      	nop
 8003b6c:	e004      	b.n	8003b78 <DMA_CheckFifoParam+0xe8>
      break;
 8003b6e:	bf00      	nop
 8003b70:	e002      	b.n	8003b78 <DMA_CheckFifoParam+0xe8>
      break;   
 8003b72:	bf00      	nop
 8003b74:	e000      	b.n	8003b78 <DMA_CheckFifoParam+0xe8>
      break;
 8003b76:	bf00      	nop
    }
  } 
  
  return status; 
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop

08003b88 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e086      	b.n	8003ca8 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d106      	bne.n	8003bb2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f008 fd3d 	bl	800c62c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bb2:	4b3f      	ldr	r3, [pc, #252]	@ (8003cb0 <HAL_ETH_Init+0x128>)
 8003bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb6:	4a3e      	ldr	r2, [pc, #248]	@ (8003cb0 <HAL_ETH_Init+0x128>)
 8003bb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003bbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bbe:	4b3c      	ldr	r3, [pc, #240]	@ (8003cb0 <HAL_ETH_Init+0x128>)
 8003bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bc6:	60bb      	str	r3, [r7, #8]
 8003bc8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003bca:	4b3a      	ldr	r3, [pc, #232]	@ (8003cb4 <HAL_ETH_Init+0x12c>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	4a39      	ldr	r2, [pc, #228]	@ (8003cb4 <HAL_ETH_Init+0x12c>)
 8003bd0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003bd4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003bd6:	4b37      	ldr	r3, [pc, #220]	@ (8003cb4 <HAL_ETH_Init+0x12c>)
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	4935      	ldr	r1, [pc, #212]	@ (8003cb4 <HAL_ETH_Init+0x12c>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003be4:	4b33      	ldr	r3, [pc, #204]	@ (8003cb4 <HAL_ETH_Init+0x12c>)
 8003be6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	6812      	ldr	r2, [r2, #0]
 8003bf6:	f043 0301 	orr.w	r3, r3, #1
 8003bfa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003bfe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c00:	f7fe fbfc 	bl	80023fc <HAL_GetTick>
 8003c04:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003c06:	e011      	b.n	8003c2c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003c08:	f7fe fbf8 	bl	80023fc <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003c16:	d909      	bls.n	8003c2c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2204      	movs	r2, #4
 8003c1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	22e0      	movs	r2, #224	@ 0xe0
 8003c24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e03d      	b.n	8003ca8 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1e4      	bne.n	8003c08 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 ff5c 	bl	8004afc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f001 f807 	bl	8004c58 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f001 f85d 	bl	8004d0a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	461a      	mov	r2, r3
 8003c56:	2100      	movs	r1, #0
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 ffc5 	bl	8004be8 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8003c6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8003cb8 <HAL_ETH_Init+0x130>)
 8003c7c:	430b      	orrs	r3, r1
 8003c7e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8003c92:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2210      	movs	r2, #16
 8003ca2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	40013800 	.word	0x40013800
 8003cb8:	00020060 	.word	0x00020060

08003cbc <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cca:	2b10      	cmp	r3, #16
 8003ccc:	d15f      	bne.n	8003d8e <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2204      	movs	r2, #4
 8003ce0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f9f6 	bl	80040d4 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003cf0:	2001      	movs	r0, #1
 8003cf2:	f7fe fb8f 	bl	8002414 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	6812      	ldr	r2, [r2, #0]
 8003d0c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003d10:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d14:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6812      	ldr	r2, [r2, #0]
 8003d24:	f043 0302 	orr.w	r3, r3, #2
 8003d28:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d2c:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 fd80 	bl	8004834 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0208 	orr.w	r2, r2, #8
 8003d42:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d4c:	2001      	movs	r0, #1
 8003d4e:	f7fe fb61 	bl	8002414 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f042 0204 	orr.w	r2, r2, #4
 8003d68:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d72:	69d9      	ldr	r1, [r3, #28]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	4b07      	ldr	r3, [pc, #28]	@ (8003d98 <HAL_ETH_Start_IT+0xdc>)
 8003d7a:	430b      	orrs	r3, r1
 8003d7c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d80:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2240      	movs	r2, #64	@ 0x40
 8003d86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	e000      	b.n	8003d90 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
  }
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	0001a0c1 	.word	0x0001a0c1

08003d9c <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003daa:	2b40      	cmp	r3, #64	@ 0x40
 8003dac:	d16e      	bne.n	8003e8c <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2220      	movs	r2, #32
 8003db2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dbe:	69d9      	ldr	r1, [r3, #28]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	4b34      	ldr	r3, [pc, #208]	@ (8003e98 <HAL_ETH_Stop_IT+0xfc>)
 8003dc6:	400b      	ands	r3, r1
 8003dc8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003dcc:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6812      	ldr	r2, [r2, #0]
 8003ddc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003de0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003de4:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	6812      	ldr	r2, [r2, #0]
 8003df4:	f023 0302 	bic.w	r3, r3, #2
 8003df8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003dfc:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f022 0204 	bic.w	r2, r2, #4
 8003e0c:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e16:	2001      	movs	r0, #1
 8003e18:	f7fe fafc 	bl	8002414 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 fd05 	bl	8004834 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0208 	bic.w	r2, r2, #8
 8003e38:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e42:	2001      	movs	r0, #1
 8003e44:	f7fe fae6 	bl	8002414 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003e50:	2300      	movs	r3, #0
 8003e52:	617b      	str	r3, [r7, #20]
 8003e54:	e00e      	b.n	8003e74 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	3212      	adds	r2, #18
 8003e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e60:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	3301      	adds	r3, #1
 8003e72:	617b      	str	r3, [r7, #20]
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	2b03      	cmp	r3, #3
 8003e78:	d9ed      	bls.n	8003e56 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2210      	movs	r2, #16
 8003e84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	e000      	b.n	8003e8e <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
  }
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3718      	adds	r7, #24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	fffe5f3e 	.word	0xfffe5f3e

08003e9c <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d109      	bne.n	8003ec0 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eb2:	f043 0201 	orr.w	r2, r3, #1
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e045      	b.n	8003f4c <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ec6:	2b40      	cmp	r3, #64	@ 0x40
 8003ec8:	d13f      	bne.n	8003f4a <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	6839      	ldr	r1, [r7, #0]
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 ff86 	bl	8004de8 <ETH_Prepare_Tx_Descriptors>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d009      	beq.n	8003ef6 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee8:	f043 0202 	orr.w	r2, r3, #2
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e02a      	b.n	8003f4c <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003ef6:	f3bf 8f4f 	dsb	sy
}
 8003efa:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f00:	1c5a      	adds	r2, r3, #1
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0a:	2b03      	cmp	r3, #3
 8003f0c:	d904      	bls.n	8003f18 <HAL_ETH_Transmit_IT+0x7c>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f12:	1f1a      	subs	r2, r3, #4
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	f003 0304 	and.w	r3, r3, #4
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00d      	beq.n	8003f46 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f32:	461a      	mov	r2, r3
 8003f34:	2304      	movs	r3, #4
 8003f36:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f40:	461a      	mov	r2, r3
 8003f42:	2300      	movs	r3, #0
 8003f44:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8003f46:	2300      	movs	r3, #0
 8003f48:	e000      	b.n	8003f4c <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
  }
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8003f62:	2300      	movs	r3, #0
 8003f64:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d109      	bne.n	8003f80 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f72:	f043 0201 	orr.w	r2, r3, #1
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e0a4      	b.n	80040ca <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f86:	2b40      	cmp	r3, #64	@ 0x40
 8003f88:	d001      	beq.n	8003f8e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e09d      	b.n	80040ca <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f92:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	69fa      	ldr	r2, [r7, #28]
 8003f98:	3212      	adds	r2, #18
 8003f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f9e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fa4:	f1c3 0304 	rsb	r3, r3, #4
 8003fa8:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003faa:	e066      	b.n	800407a <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d007      	beq.n	8003fc8 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	69da      	ldr	r2, [r3, #28]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	699a      	ldr	r2, [r3, #24]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d103      	bne.n	8003fdc <HAL_ETH_ReadData+0x88>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d03c      	beq.n	8004056 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d005      	beq.n	8003ff4 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	0c1b      	lsrs	r3, r3, #16
 8003ffa:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003ffe:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004008:	2b00      	cmp	r3, #0
 800400a:	d005      	beq.n	8004018 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8004014:	2301      	movs	r3, #1
 8004016:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004030:	461a      	mov	r2, r3
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	b29b      	uxth	r3, r3
 8004036:	f008 fcd3 	bl	800c9e0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800403e:	1c5a      	adds	r2, r3, #1
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	441a      	add	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	2200      	movs	r2, #0
 8004054:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	3301      	adds	r3, #1
 800405a:	61fb      	str	r3, [r7, #28]
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	2b03      	cmp	r3, #3
 8004060:	d902      	bls.n	8004068 <HAL_ETH_ReadData+0x114>
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	3b04      	subs	r3, #4
 8004066:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	69fa      	ldr	r2, [r7, #28]
 800406c:	3212      	adds	r2, #18
 800406e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004072:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	3301      	adds	r3, #1
 8004078:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800407e:	2b00      	cmp	r3, #0
 8004080:	db06      	blt.n	8004090 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	429a      	cmp	r2, r3
 8004088:	d202      	bcs.n	8004090 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 800408a:	7cfb      	ldrb	r3, [r7, #19]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d08d      	beq.n	8003fac <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	441a      	add	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d002      	beq.n	80040aa <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 f815 	bl	80040d4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	69fa      	ldr	r2, [r7, #28]
 80040ae:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80040b0:	7cfb      	ldrb	r3, [r7, #19]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d108      	bne.n	80040c8 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80040c4:	2300      	movs	r3, #0
 80040c6:	e000      	b.n	80040ca <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3720      	adds	r7, #32
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
	...

080040d4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b088      	sub	sp, #32
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80040dc:	2300      	movs	r3, #0
 80040de:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80040e0:	2301      	movs	r3, #1
 80040e2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040e8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	69fa      	ldr	r2, [r7, #28]
 80040ee:	3212      	adds	r2, #18
 80040f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040f4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040fa:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80040fc:	e042      	b.n	8004184 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d112      	bne.n	800412c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8004106:	f107 0308 	add.w	r3, r7, #8
 800410a:	4618      	mov	r0, r3
 800410c:	f008 fc32 	bl	800c974 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d102      	bne.n	800411c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8004116:	2300      	movs	r3, #0
 8004118:	74fb      	strb	r3, [r7, #19]
 800411a:	e007      	b.n	800412c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	461a      	mov	r2, r3
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	461a      	mov	r2, r3
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800412c:	7cfb      	ldrb	r3, [r7, #19]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d028      	beq.n	8004184 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004136:	2b00      	cmp	r3, #0
 8004138:	d106      	bne.n	8004148 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	695a      	ldr	r2, [r3, #20]
 800413e:	4b26      	ldr	r3, [pc, #152]	@ (80041d8 <ETH_UpdateDescriptor+0x104>)
 8004140:	4313      	orrs	r3, r2
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	6053      	str	r3, [r2, #4]
 8004146:	e005      	b.n	8004154 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	3301      	adds	r3, #1
 8004164:	61fb      	str	r3, [r7, #28]
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	2b03      	cmp	r3, #3
 800416a:	d902      	bls.n	8004172 <ETH_UpdateDescriptor+0x9e>
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	3b04      	subs	r3, #4
 8004170:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	69fa      	ldr	r2, [r7, #28]
 8004176:	3212      	adds	r2, #18
 8004178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800417c:	617b      	str	r3, [r7, #20]
      desccount--;
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	3b01      	subs	r3, #1
 8004182:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d002      	beq.n	8004190 <ETH_UpdateDescriptor+0xbc>
 800418a:	7cfb      	ldrb	r3, [r7, #19]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1b6      	bne.n	80040fe <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	429a      	cmp	r2, r3
 8004198:	d01a      	beq.n	80041d0 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	3303      	adds	r3, #3
 800419e:	f003 0303 	and.w	r3, r3, #3
 80041a2:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80041a4:	f3bf 8f5f 	dmb	sy
}
 80041a8:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6919      	ldr	r1, [r3, #16]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	4613      	mov	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	18ca      	adds	r2, r1, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041c2:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	69fa      	ldr	r2, [r7, #28]
 80041c8:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80041d0:	bf00      	nop
 80041d2:	3720      	adds	r7, #32
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	80004000 	.word	0x80004000

080041dc <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	3318      	adds	r3, #24
 80041e8:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ee:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f4:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80041f6:	2301      	movs	r3, #1
 80041f8:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80041fa:	e047      	b.n	800428c <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 80041fc:	2301      	movs	r3, #1
 80041fe:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	3b01      	subs	r3, #1
 8004204:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	3304      	adds	r3, #4
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4413      	add	r3, r2
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10a      	bne.n	800422c <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	3301      	adds	r3, #1
 800421a:	613b      	str	r3, [r7, #16]
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	2b03      	cmp	r3, #3
 8004220:	d902      	bls.n	8004228 <HAL_ETH_ReleaseTxPacket+0x4c>
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	3b04      	subs	r3, #4
 8004226:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8004228:	2300      	movs	r3, #0
 800422a:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 800422c:	7bbb      	ldrb	r3, [r7, #14]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d02c      	beq.n	800428c <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68d9      	ldr	r1, [r3, #12]
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	4613      	mov	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4413      	add	r3, r2
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	440b      	add	r3, r1
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	db1f      	blt.n	8004288 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	3304      	adds	r3, #4
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	4618      	mov	r0, r3
 8004256:	f008 fc05 	bl	800ca64 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	3304      	adds	r3, #4
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	2200      	movs	r2, #0
 8004266:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	3301      	adds	r3, #1
 800426c:	613b      	str	r3, [r7, #16]
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	2b03      	cmp	r3, #3
 8004272:	d902      	bls.n	800427a <HAL_ETH_ReleaseTxPacket+0x9e>
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	3b04      	subs	r3, #4
 8004278:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004286:	e001      	b.n	800428c <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8004288:	2300      	movs	r3, #0
 800428a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d002      	beq.n	8004298 <HAL_ETH_ReleaseTxPacket+0xbc>
 8004292:	7bfb      	ldrb	r3, [r7, #15]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1b1      	bne.n	80041fc <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3718      	adds	r7, #24
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
	...

080042a4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b2:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042c8:	69db      	ldr	r3, [r3, #28]
 80042ca:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 80042cc:	4b4b      	ldr	r3, [pc, #300]	@ (80043fc <HAL_ETH_IRQHandler+0x158>)
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00e      	beq.n	80042fa <HAL_ETH_IRQHandler+0x56>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d009      	beq.n	80042fa <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042ee:	461a      	mov	r2, r3
 80042f0:	4b43      	ldr	r3, [pc, #268]	@ (8004400 <HAL_ETH_IRQHandler+0x15c>)
 80042f2:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f007 fed9 	bl	800c0ac <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00f      	beq.n	8004324 <HAL_ETH_IRQHandler+0x80>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00a      	beq.n	8004324 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004316:	461a      	mov	r2, r3
 8004318:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800431c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f007 fed4 	bl	800c0cc <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d042      	beq.n	80043b4 <HAL_ETH_IRQHandler+0x110>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d03d      	beq.n	80043b4 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800433e:	f043 0208 	orr.w	r2, r3, #8
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d01a      	beq.n	8004388 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800435a:	695a      	ldr	r2, [r3, #20]
 800435c:	4b29      	ldr	r3, [pc, #164]	@ (8004404 <HAL_ETH_IRQHandler+0x160>)
 800435e:	4013      	ands	r3, r2
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800436e:	69db      	ldr	r3, [r3, #28]
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	6812      	ldr	r2, [r2, #0]
 8004374:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8004378:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800437c:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	22e0      	movs	r2, #224	@ 0xe0
 8004382:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8004386:	e012      	b.n	80043ae <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004390:	695a      	ldr	r2, [r3, #20]
 8004392:	f248 6380 	movw	r3, #34432	@ 0x8680
 8004396:	4013      	ands	r3, r2
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043a6:	461a      	mov	r2, r3
 80043a8:	f248 6380 	movw	r3, #34432	@ 0x8680
 80043ac:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f007 fe9c 	bl	800c0ec <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f003 0308 	and.w	r3, r3, #8
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00e      	beq.n	80043dc <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c4:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f81a 	bl	8004408 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d006      	beq.n	80043f4 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80043e6:	4b05      	ldr	r3, [pc, #20]	@ (80043fc <HAL_ETH_IRQHandler+0x158>)
 80043e8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80043ec:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f814 	bl	800441c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80043f4:	bf00      	nop
 80043f6:	3718      	adds	r7, #24
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	40013c00 	.word	0x40013c00
 8004400:	00010040 	.word	0x00010040
 8004404:	007e2000 	.word	0x007e2000

08004408 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
 800443c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f003 031c 	and.w	r3, r3, #28
 800444c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	02db      	lsls	r3, r3, #11
 8004452:	b29b      	uxth	r3, r3
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	4313      	orrs	r3, r2
 8004458:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	019b      	lsls	r3, r3, #6
 800445e:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	4313      	orrs	r3, r2
 8004466:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	f023 0302 	bic.w	r3, r3, #2
 800446e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	f043 0301 	orr.w	r3, r3, #1
 8004476:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8004480:	f7fd ffbc 	bl	80023fc <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004486:	e00d      	b.n	80044a4 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8004488:	f7fd ffb8 	bl	80023fc <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004496:	d301      	bcc.n	800449c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e010      	b.n	80044be <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1ec      	bne.n	8004488 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	461a      	mov	r2, r3
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3718      	adds	r7, #24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b086      	sub	sp, #24
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	60f8      	str	r0, [r7, #12]
 80044ce:	60b9      	str	r1, [r7, #8]
 80044d0:	607a      	str	r2, [r7, #4]
 80044d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f003 031c 	and.w	r3, r3, #28
 80044e2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	02db      	lsls	r3, r3, #11
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	019b      	lsls	r3, r3, #6
 80044f4:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f043 0302 	orr.w	r3, r3, #2
 8004504:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f043 0301 	orr.w	r3, r3, #1
 800450c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	b29a      	uxth	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004520:	f7fd ff6c 	bl	80023fc <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004526:	e00d      	b.n	8004544 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004528:	f7fd ff68 	bl	80023fc <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004536:	d301      	bcc.n	800453c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e009      	b.n	8004550 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1ec      	bne.n	8004528 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3718      	adds	r7, #24
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e0e6      	b.n	800473a <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0310 	and.w	r3, r3, #16
 8004576:	2b00      	cmp	r3, #0
 8004578:	bf14      	ite	ne
 800457a:	2301      	movne	r3, #1
 800457c:	2300      	moveq	r3, #0
 800457e:	b2db      	uxtb	r3, r3
 8004580:	461a      	mov	r2, r3
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	bf0c      	ite	eq
 80045a4:	2301      	moveq	r3, #1
 80045a6:	2300      	movne	r3, #0
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	461a      	mov	r2, r3
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80045bc:	2b00      	cmp	r3, #0
 80045be:	bf14      	ite	ne
 80045c0:	2301      	movne	r3, #1
 80045c2:	2300      	moveq	r3, #0
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	bf0c      	ite	eq
 80045da:	2301      	moveq	r3, #1
 80045dc:	2300      	movne	r3, #0
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	461a      	mov	r2, r3
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	bf14      	ite	ne
 80045f4:	2301      	movne	r3, #1
 80045f6:	2300      	moveq	r3, #0
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	461a      	mov	r2, r3
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004626:	2b00      	cmp	r3, #0
 8004628:	bf0c      	ite	eq
 800462a:	2301      	moveq	r3, #1
 800462c:	2300      	movne	r3, #0
 800462e:	b2db      	uxtb	r3, r3
 8004630:	461a      	mov	r2, r3
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004640:	2b00      	cmp	r3, #0
 8004642:	bf0c      	ite	eq
 8004644:	2301      	moveq	r3, #1
 8004646:	2300      	movne	r3, #0
 8004648:	b2db      	uxtb	r3, r3
 800464a:	461a      	mov	r2, r3
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800465a:	2b00      	cmp	r3, #0
 800465c:	bf14      	ite	ne
 800465e:	2301      	movne	r3, #1
 8004660:	2300      	moveq	r3, #0
 8004662:	b2db      	uxtb	r3, r3
 8004664:	461a      	mov	r2, r3
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004682:	2b00      	cmp	r3, #0
 8004684:	bf14      	ite	ne
 8004686:	2301      	movne	r3, #1
 8004688:	2300      	moveq	r3, #0
 800468a:	b2db      	uxtb	r3, r3
 800468c:	461a      	mov	r2, r3
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800469c:	2b00      	cmp	r3, #0
 800469e:	bf14      	ite	ne
 80046a0:	2301      	movne	r3, #1
 80046a2:	2300      	moveq	r3, #0
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	461a      	mov	r2, r3
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	bf14      	ite	ne
 80046ba:	2301      	movne	r3, #1
 80046bc:	2300      	moveq	r3, #0
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	461a      	mov	r2, r3
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	bf0c      	ite	eq
 80046d6:	2301      	moveq	r3, #1
 80046d8:	2300      	movne	r3, #0
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	461a      	mov	r2, r3
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	0c1b      	lsrs	r3, r3, #16
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	f003 0304 	and.w	r3, r3, #4
 800470a:	2b00      	cmp	r3, #0
 800470c:	bf14      	ite	ne
 800470e:	2301      	movne	r3, #1
 8004710:	2300      	moveq	r3, #0
 8004712:	b2db      	uxtb	r3, r3
 8004714:	461a      	mov	r2, r3
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8004726:	2b00      	cmp	r3, #0
 8004728:	bf14      	ite	ne
 800472a:	2301      	movne	r3, #1
 800472c:	2300      	moveq	r3, #0
 800472e:	b2db      	uxtb	r3, r3
 8004730:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b082      	sub	sp, #8
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
 800474e:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e00b      	b.n	8004772 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004760:	2b10      	cmp	r3, #16
 8004762:	d105      	bne.n	8004770 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004764:	6839      	ldr	r1, [r7, #0]
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f88a 	bl	8004880 <ETH_SetMACConfig>

    return HAL_OK;
 800476c:	2300      	movs	r3, #0
 800476e:	e000      	b.n	8004772 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
  }
}
 8004772:	4618      	mov	r0, r3
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
	...

0800477c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f023 031c 	bic.w	r3, r3, #28
 8004792:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004794:	f003 fd04 	bl	80081a0 <HAL_RCC_GetHCLKFreq>
 8004798:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	4a14      	ldr	r2, [pc, #80]	@ (80047f0 <HAL_ETH_SetMDIOClockRange+0x74>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d804      	bhi.n	80047ac <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f043 0308 	orr.w	r3, r3, #8
 80047a8:	60fb      	str	r3, [r7, #12]
 80047aa:	e019      	b.n	80047e0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	4a11      	ldr	r2, [pc, #68]	@ (80047f4 <HAL_ETH_SetMDIOClockRange+0x78>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d204      	bcs.n	80047be <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f043 030c 	orr.w	r3, r3, #12
 80047ba:	60fb      	str	r3, [r7, #12]
 80047bc:	e010      	b.n	80047e0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	4a0d      	ldr	r2, [pc, #52]	@ (80047f8 <HAL_ETH_SetMDIOClockRange+0x7c>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d90c      	bls.n	80047e0 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	4a0c      	ldr	r2, [pc, #48]	@ (80047fc <HAL_ETH_SetMDIOClockRange+0x80>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d804      	bhi.n	80047d8 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f043 0304 	orr.w	r3, r3, #4
 80047d4:	60fb      	str	r3, [r7, #12]
 80047d6:	e003      	b.n	80047e0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f043 0310 	orr.w	r3, r3, #16
 80047de:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	611a      	str	r2, [r3, #16]
}
 80047e8:	bf00      	nop
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	02160ebf 	.word	0x02160ebf
 80047f4:	03938700 	.word	0x03938700
 80047f8:	05f5e0ff 	.word	0x05f5e0ff
 80047fc:	08f0d17f 	.word	0x08f0d17f

08004800 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 800480e:	4618      	mov	r0, r3
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 800481a:	b480      	push	{r7}
 800481c:	b083      	sub	sp, #12
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8004828:	4618      	mov	r0, r3
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800483c:	2300      	movs	r3, #0
 800483e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	6812      	ldr	r2, [r2, #0]
 800484e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004852:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004856:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004864:	2001      	movs	r0, #1
 8004866:	f7fd fdd5 	bl	8002414 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004874:	6193      	str	r3, [r2, #24]
}
 8004876:	bf00      	nop
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
	...

08004880 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	4b53      	ldr	r3, [pc, #332]	@ (80049e4 <ETH_SetMACConfig+0x164>)
 8004896:	4013      	ands	r3, r2
 8004898:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	7b9b      	ldrb	r3, [r3, #14]
 800489e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	7c12      	ldrb	r2, [r2, #16]
 80048a4:	2a00      	cmp	r2, #0
 80048a6:	d102      	bne.n	80048ae <ETH_SetMACConfig+0x2e>
 80048a8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80048ac:	e000      	b.n	80048b0 <ETH_SetMACConfig+0x30>
 80048ae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80048b0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	7c52      	ldrb	r2, [r2, #17]
 80048b6:	2a00      	cmp	r2, #0
 80048b8:	d102      	bne.n	80048c0 <ETH_SetMACConfig+0x40>
 80048ba:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80048be:	e000      	b.n	80048c2 <ETH_SetMACConfig+0x42>
 80048c0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80048c2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80048c8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	7fdb      	ldrb	r3, [r3, #31]
 80048ce:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80048d0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80048d6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	7f92      	ldrb	r2, [r2, #30]
 80048dc:	2a00      	cmp	r2, #0
 80048de:	d102      	bne.n	80048e6 <ETH_SetMACConfig+0x66>
 80048e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80048e4:	e000      	b.n	80048e8 <ETH_SetMACConfig+0x68>
 80048e6:	2200      	movs	r2, #0
                        macconf->Speed |
 80048e8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	7f1b      	ldrb	r3, [r3, #28]
 80048ee:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80048f0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80048f6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	791b      	ldrb	r3, [r3, #4]
 80048fc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80048fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004906:	2a00      	cmp	r2, #0
 8004908:	d102      	bne.n	8004910 <ETH_SetMACConfig+0x90>
 800490a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800490e:	e000      	b.n	8004912 <ETH_SetMACConfig+0x92>
 8004910:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004912:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	7bdb      	ldrb	r3, [r3, #15]
 8004918:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800491a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004920:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004928:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800492a:	4313      	orrs	r3, r2
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	4313      	orrs	r3, r2
 8004930:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004942:	2001      	movs	r0, #1
 8004944:	f7fd fd66 	bl	8002414 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800495e:	4013      	ands	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004966:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800496e:	2a00      	cmp	r2, #0
 8004970:	d101      	bne.n	8004976 <ETH_SetMACConfig+0xf6>
 8004972:	2280      	movs	r2, #128	@ 0x80
 8004974:	e000      	b.n	8004978 <ETH_SetMACConfig+0xf8>
 8004976:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004978:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800497e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8004986:	2a01      	cmp	r2, #1
 8004988:	d101      	bne.n	800498e <ETH_SetMACConfig+0x10e>
 800498a:	2208      	movs	r2, #8
 800498c:	e000      	b.n	8004990 <ETH_SetMACConfig+0x110>
 800498e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004990:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8004998:	2a01      	cmp	r2, #1
 800499a:	d101      	bne.n	80049a0 <ETH_SetMACConfig+0x120>
 800499c:	2204      	movs	r2, #4
 800499e:	e000      	b.n	80049a2 <ETH_SetMACConfig+0x122>
 80049a0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80049a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80049aa:	2a01      	cmp	r2, #1
 80049ac:	d101      	bne.n	80049b2 <ETH_SetMACConfig+0x132>
 80049ae:	2202      	movs	r2, #2
 80049b0:	e000      	b.n	80049b4 <ETH_SetMACConfig+0x134>
 80049b2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80049b4:	4313      	orrs	r3, r2
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80049cc:	2001      	movs	r0, #1
 80049ce:	f7fd fd21 	bl	8002414 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	619a      	str	r2, [r3, #24]
}
 80049da:	bf00      	nop
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	fd20810f 	.word	0xfd20810f

080049e8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	4b3d      	ldr	r3, [pc, #244]	@ (8004af8 <ETH_SetDMAConfig+0x110>)
 8004a02:	4013      	ands	r3, r2
 8004a04:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	7b1b      	ldrb	r3, [r3, #12]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d102      	bne.n	8004a14 <ETH_SetDMAConfig+0x2c>
 8004a0e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004a12:	e000      	b.n	8004a16 <ETH_SetDMAConfig+0x2e>
 8004a14:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	7b5b      	ldrb	r3, [r3, #13]
 8004a1a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004a1c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004a1e:	683a      	ldr	r2, [r7, #0]
 8004a20:	7f52      	ldrb	r2, [r2, #29]
 8004a22:	2a00      	cmp	r2, #0
 8004a24:	d102      	bne.n	8004a2c <ETH_SetDMAConfig+0x44>
 8004a26:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004a2a:	e000      	b.n	8004a2e <ETH_SetDMAConfig+0x46>
 8004a2c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004a2e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	7b9b      	ldrb	r3, [r3, #14]
 8004a34:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004a36:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004a3c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	7f1b      	ldrb	r3, [r3, #28]
 8004a42:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004a44:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	7f9b      	ldrb	r3, [r3, #30]
 8004a4a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004a4c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004a52:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004a5a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a7e:	2001      	movs	r0, #1
 8004a80:	f7fd fcc8 	bl	8002414 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	791b      	ldrb	r3, [r3, #4]
 8004a96:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004a9c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004aa2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004aa8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004ab0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004ab2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004aba:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004ac0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	6812      	ldr	r2, [r2, #0]
 8004ac6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004aca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004ace:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004adc:	2001      	movs	r0, #1
 8004ade:	f7fd fc99 	bl	8002414 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004aea:	461a      	mov	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6013      	str	r3, [r2, #0]
}
 8004af0:	bf00      	nop
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	f8de3f23 	.word	0xf8de3f23

08004afc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b0a6      	sub	sp, #152	@ 0x98
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004b04:	2301      	movs	r3, #1
 8004b06:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004b10:	2300      	movs	r3, #0
 8004b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004b14:	2300      	movs	r3, #0
 8004b16:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004b20:	2300      	movs	r3, #0
 8004b22:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004b26:	2301      	movs	r3, #1
 8004b28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004b32:	2300      	movs	r3, #0
 8004b34:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004b42:	2300      	movs	r3, #0
 8004b44:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004b52:	2300      	movs	r3, #0
 8004b54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004b64:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004b68:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004b6a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004b70:	2300      	movs	r3, #0
 8004b72:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004b76:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f7ff fe7f 	bl	8004880 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004b82:	2301      	movs	r3, #1
 8004b84:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004b86:	2301      	movs	r3, #1
 8004b88:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004b90:	2301      	movs	r3, #1
 8004b92:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004b94:	2300      	movs	r3, #0
 8004b96:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004bb2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004bb6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004bb8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004bbc:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004bbe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004bc2:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004bd2:	f107 0308 	add.w	r3, r7, #8
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7ff ff05 	bl	80049e8 <ETH_SetDMAConfig>
}
 8004bde:	bf00      	nop
 8004be0:	3798      	adds	r7, #152	@ 0x98
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
	...

08004be8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b087      	sub	sp, #28
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	3305      	adds	r3, #5
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	021b      	lsls	r3, r3, #8
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	3204      	adds	r2, #4
 8004c00:	7812      	ldrb	r2, [r2, #0]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	4b11      	ldr	r3, [pc, #68]	@ (8004c50 <ETH_MACAddressConfig+0x68>)
 8004c0a:	4413      	add	r3, r2
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	3303      	adds	r3, #3
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	061a      	lsls	r2, r3, #24
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	3302      	adds	r3, #2
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	041b      	lsls	r3, r3, #16
 8004c22:	431a      	orrs	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	3301      	adds	r3, #1
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	021b      	lsls	r3, r3, #8
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	7812      	ldrb	r2, [r2, #0]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	4b06      	ldr	r3, [pc, #24]	@ (8004c54 <ETH_MACAddressConfig+0x6c>)
 8004c3a:	4413      	add	r3, r2
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	6013      	str	r3, [r2, #0]
}
 8004c42:	bf00      	nop
 8004c44:	371c      	adds	r7, #28
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	40028040 	.word	0x40028040
 8004c54:	40028044 	.word	0x40028044

08004c58 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004c60:	2300      	movs	r3, #0
 8004c62:	60fb      	str	r3, [r7, #12]
 8004c64:	e03e      	b.n	8004ce4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68d9      	ldr	r1, [r3, #12]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	440b      	add	r3, r1
 8004c76:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	2200      	movs	r2, #0
 8004c82:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	2200      	movs	r2, #0
 8004c88:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004c90:	68b9      	ldr	r1, [r7, #8]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	3206      	adds	r2, #6
 8004c98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d80c      	bhi.n	8004cc8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	68d9      	ldr	r1, [r3, #12]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	1c5a      	adds	r2, r3, #1
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	4413      	add	r3, r2
 8004cbc:	00db      	lsls	r3, r3, #3
 8004cbe:	440b      	add	r3, r1
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	60da      	str	r2, [r3, #12]
 8004cc6:	e004      	b.n	8004cd2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	461a      	mov	r2, r3
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	60fb      	str	r3, [r7, #12]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2b03      	cmp	r3, #3
 8004ce8:	d9bd      	bls.n	8004c66 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68da      	ldr	r2, [r3, #12]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004cfc:	611a      	str	r2, [r3, #16]
}
 8004cfe:	bf00      	nop
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b085      	sub	sp, #20
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004d12:	2300      	movs	r3, #0
 8004d14:	60fb      	str	r3, [r7, #12]
 8004d16:	e048      	b.n	8004daa <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6919      	ldr	r1, [r3, #16]
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	4413      	add	r3, r2
 8004d24:	00db      	lsls	r3, r3, #3
 8004d26:	440b      	add	r3, r1
 8004d28:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	2200      	movs	r2, #0
 8004d34:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	2200      	movs	r2, #0
 8004d46:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004d54:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004d6e:	68b9      	ldr	r1, [r7, #8]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	3212      	adds	r2, #18
 8004d76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d80c      	bhi.n	8004d9a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6919      	ldr	r1, [r3, #16]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	1c5a      	adds	r2, r3, #1
 8004d88:	4613      	mov	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4413      	add	r3, r2
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	440b      	add	r3, r1
 8004d92:	461a      	mov	r2, r3
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	60da      	str	r2, [r3, #12]
 8004d98:	e004      	b.n	8004da4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	3301      	adds	r3, #1
 8004da8:	60fb      	str	r3, [r7, #12]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2b03      	cmp	r3, #3
 8004dae:	d9b3      	bls.n	8004d18 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	691a      	ldr	r2, [r3, #16]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004dda:	60da      	str	r2, [r3, #12]
}
 8004ddc:	bf00      	nop
 8004dde:	3714      	adds	r7, #20
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b091      	sub	sp, #68	@ 0x44
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	3318      	adds	r3, #24
 8004df8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8004e06:	2300      	movs	r3, #0
 8004e08:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e12:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e2a:	d007      	beq.n	8004e3c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004e2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e30:	3304      	adds	r3, #4
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4413      	add	r3, r2
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d001      	beq.n	8004e40 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	e111      	b.n	8005064 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8004e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e42:	3301      	adds	r3, #1
 8004e44:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e4e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	4b86      	ldr	r3, [pc, #536]	@ (8005070 <ETH_Prepare_Tx_Descriptors+0x288>)
 8004e56:	4013      	ands	r3, r2
 8004e58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e5a:	6852      	ldr	r2, [r2, #4]
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e60:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d008      	beq.n	8004e80 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e7e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0320 	and.w	r3, r3, #32
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d008      	beq.n	8004e9e <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e9c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0304 	and.w	r3, r3, #4
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d005      	beq.n	8004eb6 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8004eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec0:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004ec2:	e082      	b.n	8004fca <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ece:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d006      	beq.n	8004ee4 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee0:	601a      	str	r2, [r3, #0]
 8004ee2:	e005      	b.n	8004ef0 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eee:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004ef0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ef6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ef8:	2b03      	cmp	r3, #3
 8004efa:	d902      	bls.n	8004f02 <ETH_Prepare_Tx_Descriptors+0x11a>
 8004efc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004efe:	3b04      	subs	r3, #4
 8004f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f04:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f0a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f18:	d007      	beq.n	8004f2a <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004f1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f1e:	3304      	adds	r3, #4
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4413      	add	r3, r2
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d029      	beq.n	8004f7e <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8004f2a:	6a3b      	ldr	r3, [r7, #32]
 8004f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f30:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f36:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004f38:	2300      	movs	r3, #0
 8004f3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f3c:	e019      	b.n	8004f72 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8004f3e:	f3bf 8f5f 	dmb	sy
}
 8004f42:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f4e:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004f50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f52:	3301      	adds	r3, #1
 8004f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f58:	2b03      	cmp	r3, #3
 8004f5a:	d902      	bls.n	8004f62 <ETH_Prepare_Tx_Descriptors+0x17a>
 8004f5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f5e:	3b04      	subs	r3, #4
 8004f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f6a:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8004f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f6e:	3301      	adds	r3, #1
 8004f70:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f72:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d3e1      	bcc.n	8004f3e <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	e072      	b.n	8005064 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f88:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8004f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f9e:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa2:	685a      	ldr	r2, [r3, #4]
 8004fa4:	4b32      	ldr	r3, [pc, #200]	@ (8005070 <ETH_Prepare_Tx_Descriptors+0x288>)
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004faa:	6852      	ldr	r2, [r2, #4]
 8004fac:	431a      	orrs	r2, r3
 8004fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb0:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8004fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8004fb8:	f3bf 8f5f 	dmb	sy
}
 8004fbc:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc8:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8004fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f47f af78 	bne.w	8004ec4 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d006      	beq.n	8004fe8 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe4:	601a      	str	r2, [r3, #0]
 8004fe6:	e005      	b.n	8004ff4 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff2:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ffe:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8005000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005002:	6a3a      	ldr	r2, [r7, #32]
 8005004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005008:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 800500a:	f3bf 8f5f 	dmb	sy
}
 800500e:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800501a:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800501c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005020:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005024:	3304      	adds	r3, #4
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	440b      	add	r3, r1
 800502a:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800502c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005030:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005032:	f3ef 8310 	mrs	r3, PRIMASK
 8005036:	613b      	str	r3, [r7, #16]
  return(result);
 8005038:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800503a:	61fb      	str	r3, [r7, #28]
 800503c:	2301      	movs	r3, #1
 800503e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	f383 8810 	msr	PRIMASK, r3
}
 8005046:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800504c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800504e:	4413      	add	r3, r2
 8005050:	1c5a      	adds	r2, r3, #1
 8005052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005054:	629a      	str	r2, [r3, #40]	@ 0x28
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	f383 8810 	msr	PRIMASK, r3
}
 8005060:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3744      	adds	r7, #68	@ 0x44
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	ffffe000 	.word	0xffffe000

08005074 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005074:	b480      	push	{r7}
 8005076:	b089      	sub	sp, #36	@ 0x24
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800507e:	2300      	movs	r3, #0
 8005080:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005082:	2300      	movs	r3, #0
 8005084:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005086:	2300      	movs	r3, #0
 8005088:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800508a:	2300      	movs	r3, #0
 800508c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800508e:	2300      	movs	r3, #0
 8005090:	61fb      	str	r3, [r7, #28]
 8005092:	e175      	b.n	8005380 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005094:	2201      	movs	r2, #1
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	fa02 f303 	lsl.w	r3, r2, r3
 800509c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	4013      	ands	r3, r2
 80050a6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	f040 8164 	bne.w	800537a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f003 0303 	and.w	r3, r3, #3
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d005      	beq.n	80050ca <HAL_GPIO_Init+0x56>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f003 0303 	and.w	r3, r3, #3
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d130      	bne.n	800512c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	005b      	lsls	r3, r3, #1
 80050d4:	2203      	movs	r2, #3
 80050d6:	fa02 f303 	lsl.w	r3, r2, r3
 80050da:	43db      	mvns	r3, r3
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	4013      	ands	r3, r2
 80050e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	68da      	ldr	r2, [r3, #12]
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	005b      	lsls	r3, r3, #1
 80050ea:	fa02 f303 	lsl.w	r3, r2, r3
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005100:	2201      	movs	r2, #1
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	fa02 f303 	lsl.w	r3, r2, r3
 8005108:	43db      	mvns	r3, r3
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	4013      	ands	r3, r2
 800510e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	091b      	lsrs	r3, r3, #4
 8005116:	f003 0201 	and.w	r2, r3, #1
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	fa02 f303 	lsl.w	r3, r2, r3
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	4313      	orrs	r3, r2
 8005124:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f003 0303 	and.w	r3, r3, #3
 8005134:	2b03      	cmp	r3, #3
 8005136:	d017      	beq.n	8005168 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	005b      	lsls	r3, r3, #1
 8005142:	2203      	movs	r2, #3
 8005144:	fa02 f303 	lsl.w	r3, r2, r3
 8005148:	43db      	mvns	r3, r3
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	4013      	ands	r3, r2
 800514e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	689a      	ldr	r2, [r3, #8]
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	005b      	lsls	r3, r3, #1
 8005158:	fa02 f303 	lsl.w	r3, r2, r3
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	4313      	orrs	r3, r2
 8005160:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f003 0303 	and.w	r3, r3, #3
 8005170:	2b02      	cmp	r3, #2
 8005172:	d123      	bne.n	80051bc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	08da      	lsrs	r2, r3, #3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	3208      	adds	r2, #8
 800517c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	f003 0307 	and.w	r3, r3, #7
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	220f      	movs	r2, #15
 800518c:	fa02 f303 	lsl.w	r3, r2, r3
 8005190:	43db      	mvns	r3, r3
 8005192:	69ba      	ldr	r2, [r7, #24]
 8005194:	4013      	ands	r3, r2
 8005196:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	691a      	ldr	r2, [r3, #16]
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	f003 0307 	and.w	r3, r3, #7
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	fa02 f303 	lsl.w	r3, r2, r3
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	08da      	lsrs	r2, r3, #3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	3208      	adds	r2, #8
 80051b6:	69b9      	ldr	r1, [r7, #24]
 80051b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	005b      	lsls	r3, r3, #1
 80051c6:	2203      	movs	r2, #3
 80051c8:	fa02 f303 	lsl.w	r3, r2, r3
 80051cc:	43db      	mvns	r3, r3
 80051ce:	69ba      	ldr	r2, [r7, #24]
 80051d0:	4013      	ands	r3, r2
 80051d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f003 0203 	and.w	r2, r3, #3
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	fa02 f303 	lsl.w	r3, r2, r3
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f000 80be 	beq.w	800537a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051fe:	4b66      	ldr	r3, [pc, #408]	@ (8005398 <HAL_GPIO_Init+0x324>)
 8005200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005202:	4a65      	ldr	r2, [pc, #404]	@ (8005398 <HAL_GPIO_Init+0x324>)
 8005204:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005208:	6453      	str	r3, [r2, #68]	@ 0x44
 800520a:	4b63      	ldr	r3, [pc, #396]	@ (8005398 <HAL_GPIO_Init+0x324>)
 800520c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800520e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005212:	60fb      	str	r3, [r7, #12]
 8005214:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005216:	4a61      	ldr	r2, [pc, #388]	@ (800539c <HAL_GPIO_Init+0x328>)
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	089b      	lsrs	r3, r3, #2
 800521c:	3302      	adds	r3, #2
 800521e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005222:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	f003 0303 	and.w	r3, r3, #3
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	220f      	movs	r2, #15
 800522e:	fa02 f303 	lsl.w	r3, r2, r3
 8005232:	43db      	mvns	r3, r3
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	4013      	ands	r3, r2
 8005238:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a58      	ldr	r2, [pc, #352]	@ (80053a0 <HAL_GPIO_Init+0x32c>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d037      	beq.n	80052b2 <HAL_GPIO_Init+0x23e>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a57      	ldr	r2, [pc, #348]	@ (80053a4 <HAL_GPIO_Init+0x330>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d031      	beq.n	80052ae <HAL_GPIO_Init+0x23a>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a56      	ldr	r2, [pc, #344]	@ (80053a8 <HAL_GPIO_Init+0x334>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d02b      	beq.n	80052aa <HAL_GPIO_Init+0x236>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a55      	ldr	r2, [pc, #340]	@ (80053ac <HAL_GPIO_Init+0x338>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d025      	beq.n	80052a6 <HAL_GPIO_Init+0x232>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a54      	ldr	r2, [pc, #336]	@ (80053b0 <HAL_GPIO_Init+0x33c>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d01f      	beq.n	80052a2 <HAL_GPIO_Init+0x22e>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a53      	ldr	r2, [pc, #332]	@ (80053b4 <HAL_GPIO_Init+0x340>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d019      	beq.n	800529e <HAL_GPIO_Init+0x22a>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a52      	ldr	r2, [pc, #328]	@ (80053b8 <HAL_GPIO_Init+0x344>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d013      	beq.n	800529a <HAL_GPIO_Init+0x226>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a51      	ldr	r2, [pc, #324]	@ (80053bc <HAL_GPIO_Init+0x348>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d00d      	beq.n	8005296 <HAL_GPIO_Init+0x222>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a50      	ldr	r2, [pc, #320]	@ (80053c0 <HAL_GPIO_Init+0x34c>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d007      	beq.n	8005292 <HAL_GPIO_Init+0x21e>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a4f      	ldr	r2, [pc, #316]	@ (80053c4 <HAL_GPIO_Init+0x350>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d101      	bne.n	800528e <HAL_GPIO_Init+0x21a>
 800528a:	2309      	movs	r3, #9
 800528c:	e012      	b.n	80052b4 <HAL_GPIO_Init+0x240>
 800528e:	230a      	movs	r3, #10
 8005290:	e010      	b.n	80052b4 <HAL_GPIO_Init+0x240>
 8005292:	2308      	movs	r3, #8
 8005294:	e00e      	b.n	80052b4 <HAL_GPIO_Init+0x240>
 8005296:	2307      	movs	r3, #7
 8005298:	e00c      	b.n	80052b4 <HAL_GPIO_Init+0x240>
 800529a:	2306      	movs	r3, #6
 800529c:	e00a      	b.n	80052b4 <HAL_GPIO_Init+0x240>
 800529e:	2305      	movs	r3, #5
 80052a0:	e008      	b.n	80052b4 <HAL_GPIO_Init+0x240>
 80052a2:	2304      	movs	r3, #4
 80052a4:	e006      	b.n	80052b4 <HAL_GPIO_Init+0x240>
 80052a6:	2303      	movs	r3, #3
 80052a8:	e004      	b.n	80052b4 <HAL_GPIO_Init+0x240>
 80052aa:	2302      	movs	r3, #2
 80052ac:	e002      	b.n	80052b4 <HAL_GPIO_Init+0x240>
 80052ae:	2301      	movs	r3, #1
 80052b0:	e000      	b.n	80052b4 <HAL_GPIO_Init+0x240>
 80052b2:	2300      	movs	r3, #0
 80052b4:	69fa      	ldr	r2, [r7, #28]
 80052b6:	f002 0203 	and.w	r2, r2, #3
 80052ba:	0092      	lsls	r2, r2, #2
 80052bc:	4093      	lsls	r3, r2
 80052be:	69ba      	ldr	r2, [r7, #24]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80052c4:	4935      	ldr	r1, [pc, #212]	@ (800539c <HAL_GPIO_Init+0x328>)
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	089b      	lsrs	r3, r3, #2
 80052ca:	3302      	adds	r3, #2
 80052cc:	69ba      	ldr	r2, [r7, #24]
 80052ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052d2:	4b3d      	ldr	r3, [pc, #244]	@ (80053c8 <HAL_GPIO_Init+0x354>)
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	43db      	mvns	r3, r3
 80052dc:	69ba      	ldr	r2, [r7, #24]
 80052de:	4013      	ands	r3, r2
 80052e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d003      	beq.n	80052f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80052ee:	69ba      	ldr	r2, [r7, #24]
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80052f6:	4a34      	ldr	r2, [pc, #208]	@ (80053c8 <HAL_GPIO_Init+0x354>)
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052fc:	4b32      	ldr	r3, [pc, #200]	@ (80053c8 <HAL_GPIO_Init+0x354>)
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	43db      	mvns	r3, r3
 8005306:	69ba      	ldr	r2, [r7, #24]
 8005308:	4013      	ands	r3, r2
 800530a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d003      	beq.n	8005320 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005318:	69ba      	ldr	r2, [r7, #24]
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	4313      	orrs	r3, r2
 800531e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005320:	4a29      	ldr	r2, [pc, #164]	@ (80053c8 <HAL_GPIO_Init+0x354>)
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005326:	4b28      	ldr	r3, [pc, #160]	@ (80053c8 <HAL_GPIO_Init+0x354>)
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	43db      	mvns	r3, r3
 8005330:	69ba      	ldr	r2, [r7, #24]
 8005332:	4013      	ands	r3, r2
 8005334:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d003      	beq.n	800534a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005342:	69ba      	ldr	r2, [r7, #24]
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	4313      	orrs	r3, r2
 8005348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800534a:	4a1f      	ldr	r2, [pc, #124]	@ (80053c8 <HAL_GPIO_Init+0x354>)
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005350:	4b1d      	ldr	r3, [pc, #116]	@ (80053c8 <HAL_GPIO_Init+0x354>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	43db      	mvns	r3, r3
 800535a:	69ba      	ldr	r2, [r7, #24]
 800535c:	4013      	ands	r3, r2
 800535e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d003      	beq.n	8005374 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800536c:	69ba      	ldr	r2, [r7, #24]
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	4313      	orrs	r3, r2
 8005372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005374:	4a14      	ldr	r2, [pc, #80]	@ (80053c8 <HAL_GPIO_Init+0x354>)
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	3301      	adds	r3, #1
 800537e:	61fb      	str	r3, [r7, #28]
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	2b0f      	cmp	r3, #15
 8005384:	f67f ae86 	bls.w	8005094 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005388:	bf00      	nop
 800538a:	bf00      	nop
 800538c:	3724      	adds	r7, #36	@ 0x24
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	40023800 	.word	0x40023800
 800539c:	40013800 	.word	0x40013800
 80053a0:	40020000 	.word	0x40020000
 80053a4:	40020400 	.word	0x40020400
 80053a8:	40020800 	.word	0x40020800
 80053ac:	40020c00 	.word	0x40020c00
 80053b0:	40021000 	.word	0x40021000
 80053b4:	40021400 	.word	0x40021400
 80053b8:	40021800 	.word	0x40021800
 80053bc:	40021c00 	.word	0x40021c00
 80053c0:	40022000 	.word	0x40022000
 80053c4:	40022400 	.word	0x40022400
 80053c8:	40013c00 	.word	0x40013c00

080053cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e08b      	b.n	80054f6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d106      	bne.n	80053f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f7fb fcea 	bl	8000dcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2224      	movs	r2, #36	@ 0x24
 80053fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f022 0201 	bic.w	r2, r2, #1
 800540e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800541c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	689a      	ldr	r2, [r3, #8]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800542c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d107      	bne.n	8005446 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	689a      	ldr	r2, [r3, #8]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005442:	609a      	str	r2, [r3, #8]
 8005444:	e006      	b.n	8005454 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	689a      	ldr	r2, [r3, #8]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005452:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	2b02      	cmp	r3, #2
 800545a:	d108      	bne.n	800546e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685a      	ldr	r2, [r3, #4]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800546a:	605a      	str	r2, [r3, #4]
 800546c:	e007      	b.n	800547e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	685a      	ldr	r2, [r3, #4]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800547c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	6859      	ldr	r1, [r3, #4]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	4b1d      	ldr	r3, [pc, #116]	@ (8005500 <HAL_I2C_Init+0x134>)
 800548a:	430b      	orrs	r3, r1
 800548c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68da      	ldr	r2, [r3, #12]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800549c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	691a      	ldr	r2, [r3, #16]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	430a      	orrs	r2, r1
 80054b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	69d9      	ldr	r1, [r3, #28]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a1a      	ldr	r2, [r3, #32]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f042 0201 	orr.w	r2, r2, #1
 80054d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2220      	movs	r2, #32
 80054e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3708      	adds	r7, #8
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	02008000 	.word	0x02008000

08005504 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b08a      	sub	sp, #40	@ 0x28
 8005508:	af02      	add	r7, sp, #8
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	607a      	str	r2, [r7, #4]
 800550e:	461a      	mov	r2, r3
 8005510:	460b      	mov	r3, r1
 8005512:	817b      	strh	r3, [r7, #10]
 8005514:	4613      	mov	r3, r2
 8005516:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8005518:	2300      	movs	r3, #0
 800551a:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005522:	b2db      	uxtb	r3, r3
 8005524:	2b20      	cmp	r3, #32
 8005526:	f040 80ef 	bne.w	8005708 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005534:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005538:	d101      	bne.n	800553e <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800553a:	2302      	movs	r3, #2
 800553c:	e0e5      	b.n	800570a <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005544:	2b01      	cmp	r3, #1
 8005546:	d101      	bne.n	800554c <HAL_I2C_Master_Transmit_DMA+0x48>
 8005548:	2302      	movs	r3, #2
 800554a:	e0de      	b.n	800570a <HAL_I2C_Master_Transmit_DMA+0x206>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2221      	movs	r2, #33	@ 0x21
 8005558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2210      	movs	r2, #16
 8005560:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	893a      	ldrh	r2, [r7, #8]
 8005574:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	4a66      	ldr	r2, [pc, #408]	@ (8005714 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800557a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	4a66      	ldr	r2, [pc, #408]	@ (8005718 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8005580:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005586:	b29b      	uxth	r3, r3
 8005588:	2bff      	cmp	r3, #255	@ 0xff
 800558a:	d906      	bls.n	800559a <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	22ff      	movs	r2, #255	@ 0xff
 8005590:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005592:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005596:	61fb      	str	r3, [r7, #28]
 8005598:	e007      	b.n	80055aa <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800559e:	b29a      	uxth	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80055a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80055a8:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d01a      	beq.n	80055e8 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b6:	781a      	ldrb	r2, [r3, #0]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c2:	1c5a      	adds	r2, r3, #1
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055cc:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	3b01      	subs	r3, #1
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055e0:	3b01      	subs	r3, #1
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d074      	beq.n	80056da <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d022      	beq.n	800563e <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055fc:	4a47      	ldr	r2, [pc, #284]	@ (800571c <HAL_I2C_Master_Transmit_DMA+0x218>)
 80055fe:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005604:	4a46      	ldr	r2, [pc, #280]	@ (8005720 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8005606:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800560c:	2200      	movs	r2, #0
 800560e:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005614:	2200      	movs	r2, #0
 8005616:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005620:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005628:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800562e:	f7fd ff35 	bl	800349c <HAL_DMA_Start_IT>
 8005632:	4603      	mov	r3, r0
 8005634:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005636:	7dfb      	ldrb	r3, [r7, #23]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d13a      	bne.n	80056b2 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 800563c:	e013      	b.n	8005666 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2220      	movs	r2, #32
 8005642:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005652:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e051      	b.n	800570a <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800566a:	b2db      	uxtb	r3, r3
 800566c:	3301      	adds	r3, #1
 800566e:	b2da      	uxtb	r2, r3
 8005670:	8979      	ldrh	r1, [r7, #10]
 8005672:	4b2c      	ldr	r3, [pc, #176]	@ (8005724 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8005674:	9300      	str	r3, [sp, #0]
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f001 ff3f 	bl	80074fc <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005682:	b29a      	uxth	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	b29a      	uxth	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005698:	2110      	movs	r1, #16
 800569a:	68f8      	ldr	r0, [r7, #12]
 800569c:	f001 ff60 	bl	8007560 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056ae:	601a      	str	r2, [r3, #0]
 80056b0:	e028      	b.n	8005704 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2220      	movs	r2, #32
 80056b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056c6:	f043 0210 	orr.w	r2, r3, #16
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e017      	b.n	800570a <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	4a12      	ldr	r2, [pc, #72]	@ (8005728 <HAL_I2C_Master_Transmit_DMA+0x224>)
 80056de:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	b2da      	uxtb	r2, r3
 80056e4:	8979      	ldrh	r1, [r7, #10]
 80056e6:	4b0f      	ldr	r3, [pc, #60]	@ (8005724 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80056e8:	9300      	str	r3, [sp, #0]
 80056ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f001 ff04 	bl	80074fc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80056fc:	2101      	movs	r1, #1
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f001 ff2e 	bl	8007560 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005704:	2300      	movs	r3, #0
 8005706:	e000      	b.n	800570a <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005708:	2302      	movs	r3, #2
  }
}
 800570a:	4618      	mov	r0, r3
 800570c:	3720      	adds	r7, #32
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	ffff0000 	.word	0xffff0000
 8005718:	08006253 	.word	0x08006253
 800571c:	0800727f 	.word	0x0800727f
 8005720:	0800744d 	.word	0x0800744d
 8005724:	80002000 	.word	0x80002000
 8005728:	08005dc7 	.word	0x08005dc7

0800572c <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b088      	sub	sp, #32
 8005730:	af02      	add	r7, sp, #8
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	607a      	str	r2, [r7, #4]
 8005736:	461a      	mov	r2, r3
 8005738:	460b      	mov	r3, r1
 800573a:	817b      	strh	r3, [r7, #10]
 800573c:	4613      	mov	r3, r2
 800573e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005746:	b2db      	uxtb	r3, r3
 8005748:	2b20      	cmp	r3, #32
 800574a:	f040 80cd 	bne.w	80058e8 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005758:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800575c:	d101      	bne.n	8005762 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800575e:	2302      	movs	r3, #2
 8005760:	e0c3      	b.n	80058ea <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005768:	2b01      	cmp	r3, #1
 800576a:	d101      	bne.n	8005770 <HAL_I2C_Master_Receive_DMA+0x44>
 800576c:	2302      	movs	r3, #2
 800576e:	e0bc      	b.n	80058ea <HAL_I2C_Master_Receive_DMA+0x1be>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2222      	movs	r2, #34	@ 0x22
 800577c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2210      	movs	r2, #16
 8005784:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	893a      	ldrh	r2, [r7, #8]
 8005798:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	4a55      	ldr	r2, [pc, #340]	@ (80058f4 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 800579e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	4a55      	ldr	r2, [pc, #340]	@ (80058f8 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 80057a4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	2bff      	cmp	r3, #255	@ 0xff
 80057ae:	d906      	bls.n	80057be <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = 1U;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2201      	movs	r2, #1
 80057b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80057b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80057ba:	617b      	str	r3, [r7, #20]
 80057bc:	e007      	b.n	80057ce <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80057c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80057cc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d070      	beq.n	80058b8 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d020      	beq.n	8005820 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057e2:	4a46      	ldr	r2, [pc, #280]	@ (80058fc <HAL_I2C_Master_Receive_DMA+0x1d0>)
 80057e4:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ea:	4a45      	ldr	r2, [pc, #276]	@ (8005900 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 80057ec:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057f2:	2200      	movs	r2, #0
 80057f4:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057fa:	2200      	movs	r2, #0
 80057fc:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	3324      	adds	r3, #36	@ 0x24
 8005808:	4619      	mov	r1, r3
 800580a:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005810:	f7fd fe44 	bl	800349c <HAL_DMA_Start_IT>
 8005814:	4603      	mov	r3, r0
 8005816:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005818:	7cfb      	ldrb	r3, [r7, #19]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d138      	bne.n	8005890 <HAL_I2C_Master_Receive_DMA+0x164>
 800581e:	e013      	b.n	8005848 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2220      	movs	r2, #32
 8005824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005834:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e050      	b.n	80058ea <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800584c:	b2da      	uxtb	r2, r3
 800584e:	8979      	ldrh	r1, [r7, #10]
 8005850:	4b2c      	ldr	r3, [pc, #176]	@ (8005904 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f001 fe50 	bl	80074fc <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005860:	b29a      	uxth	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	b29a      	uxth	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005876:	2110      	movs	r1, #16
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f001 fe71 	bl	8007560 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800588c:	601a      	str	r2, [r3, #0]
 800588e:	e029      	b.n	80058e4 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2220      	movs	r2, #32
 8005894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058a4:	f043 0210 	orr.w	r2, r3, #16
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e018      	b.n	80058ea <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	4a13      	ldr	r2, [pc, #76]	@ (8005908 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 80058bc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058c2:	b2da      	uxtb	r2, r3
 80058c4:	8979      	ldrh	r1, [r7, #10]
 80058c6:	4b0f      	ldr	r3, [pc, #60]	@ (8005904 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f001 fe14 	bl	80074fc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80058dc:	2102      	movs	r1, #2
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f001 fe3e 	bl	8007560 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80058e4:	2300      	movs	r3, #0
 80058e6:	e000      	b.n	80058ea <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 80058e8:	2302      	movs	r3, #2
  }
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3718      	adds	r7, #24
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	ffff0000 	.word	0xffff0000
 80058f8:	08006253 	.word	0x08006253
 80058fc:	08007355 	.word	0x08007355
 8005900:	0800744d 	.word	0x0800744d
 8005904:	80002400 	.word	0x80002400
 8005908:	08005dc7 	.word	0x08005dc7

0800590c <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b086      	sub	sp, #24
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	4613      	mov	r3, r2
 8005918:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b20      	cmp	r3, #32
 8005924:	f040 80d1 	bne.w	8005aca <HAL_I2C_Slave_Transmit_DMA+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d002      	beq.n	8005934 <HAL_I2C_Slave_Transmit_DMA+0x28>
 800592e:	88fb      	ldrh	r3, [r7, #6]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d105      	bne.n	8005940 <HAL_I2C_Slave_Transmit_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800593a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e0c5      	b.n	8005acc <HAL_I2C_Slave_Transmit_DMA+0x1c0>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005946:	2b01      	cmp	r3, #1
 8005948:	d101      	bne.n	800594e <HAL_I2C_Slave_Transmit_DMA+0x42>
 800594a:	2302      	movs	r3, #2
 800594c:	e0be      	b.n	8005acc <HAL_I2C_Slave_Transmit_DMA+0x1c0>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2221      	movs	r2, #33	@ 0x21
 800595a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2220      	movs	r2, #32
 8005962:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	88fa      	ldrh	r2, [r7, #6]
 8005976:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800597c:	b29a      	uxth	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	4a53      	ldr	r2, [pc, #332]	@ (8005ad4 <HAL_I2C_Slave_Transmit_DMA+0x1c8>)
 8005986:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	4a53      	ldr	r2, [pc, #332]	@ (8005ad8 <HAL_I2C_Slave_Transmit_DMA+0x1cc>)
 800598c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005996:	d117      	bne.n	80059c8 <HAL_I2C_Slave_Transmit_DMA+0xbc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800599c:	781a      	ldrb	r2, [r3, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a8:	1c5a      	adds	r2, r3, #1
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	3b01      	subs	r3, #1
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059c0:	3b01      	subs	r3, #1
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferCount != 0U)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d068      	beq.n	8005aa4 <HAL_I2C_Slave_Transmit_DMA+0x198>
    {
      if (hi2c->hdmatx != NULL)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d022      	beq.n	8005a20 <HAL_I2C_Slave_Transmit_DMA+0x114>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059de:	4a3f      	ldr	r2, [pc, #252]	@ (8005adc <HAL_I2C_Slave_Transmit_DMA+0x1d0>)
 80059e0:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059e6:	4a3e      	ldr	r2, [pc, #248]	@ (8005ae0 <HAL_I2C_Slave_Transmit_DMA+0x1d4>)
 80059e8:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ee:	2200      	movs	r2, #0
 80059f0:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f6:	2200      	movs	r2, #0
 80059f8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005a02:	4619      	mov	r1, r3
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005a0a:	461a      	mov	r2, r3
                                         hi2c->XferSize);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005a10:	f7fd fd44 	bl	800349c <HAL_DMA_Start_IT>
 8005a14:	4603      	mov	r3, r0
 8005a16:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005a18:	7dfb      	ldrb	r3, [r7, #23]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d12e      	bne.n	8005a7c <HAL_I2C_Slave_Transmit_DMA+0x170>
 8005a1e:	e013      	b.n	8005a48 <HAL_I2C_Slave_Transmit_DMA+0x13c>
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2228      	movs	r2, #40	@ 0x28
 8005a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a34:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e041      	b.n	8005acc <HAL_I2C_Slave_Transmit_DMA+0x1c0>
      {
        /* Enable Address Acknowledge */
        hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	685a      	ldr	r2, [r3, #4]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a56:	605a      	str	r2, [r3, #4]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR, STOP, NACK, ADDR interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005a60:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f001 fd7b 	bl	8007560 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a78:	601a      	str	r2, [r3, #0]
 8005a7a:	e024      	b.n	8005ac6 <HAL_I2C_Slave_Transmit_DMA+0x1ba>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2228      	movs	r2, #40	@ 0x28
 8005a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a90:	f043 0210 	orr.w	r2, r3, #16
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e013      	b.n	8005acc <HAL_I2C_Slave_Transmit_DMA+0x1c0>
      }
    }
    else
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	685a      	ldr	r2, [r3, #4]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005ab2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005abc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f001 fd4d 	bl	8007560 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	e000      	b.n	8005acc <HAL_I2C_Slave_Transmit_DMA+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8005aca:	2302      	movs	r3, #2
  }
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3718      	adds	r7, #24
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	ffff0000 	.word	0xffff0000
 8005ad8:	080066f5 	.word	0x080066f5
 8005adc:	08007315 	.word	0x08007315
 8005ae0:	0800744d 	.word	0x0800744d

08005ae4 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b086      	sub	sp, #24
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	4613      	mov	r3, r2
 8005af0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b20      	cmp	r3, #32
 8005afc:	f040 809b 	bne.w	8005c36 <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d002      	beq.n	8005b0c <HAL_I2C_Slave_Receive_DMA+0x28>
 8005b06:	88fb      	ldrh	r3, [r7, #6]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d105      	bne.n	8005b18 <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b12:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e08f      	b.n	8005c38 <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d101      	bne.n	8005b26 <HAL_I2C_Slave_Receive_DMA+0x42>
 8005b22:	2302      	movs	r3, #2
 8005b24:	e088      	b.n	8005c38 <HAL_I2C_Slave_Receive_DMA+0x154>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2222      	movs	r2, #34	@ 0x22
 8005b32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2220      	movs	r2, #32
 8005b3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	68ba      	ldr	r2, [r7, #8]
 8005b48:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	88fa      	ldrh	r2, [r7, #6]
 8005b4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	4a38      	ldr	r2, [pc, #224]	@ (8005c40 <HAL_I2C_Slave_Receive_DMA+0x15c>)
 8005b5e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	4a38      	ldr	r2, [pc, #224]	@ (8005c44 <HAL_I2C_Slave_Receive_DMA+0x160>)
 8005b64:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->hdmarx != NULL)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d020      	beq.n	8005bb0 <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b72:	4a35      	ldr	r2, [pc, #212]	@ (8005c48 <HAL_I2C_Slave_Receive_DMA+0x164>)
 8005b74:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b7a:	4a34      	ldr	r2, [pc, #208]	@ (8005c4c <HAL_I2C_Slave_Receive_DMA+0x168>)
 8005b7c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b82:	2200      	movs	r2, #0
 8005b84:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	3324      	adds	r3, #36	@ 0x24
 8005b98:	4619      	mov	r1, r3
 8005b9a:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005ba0:	f7fd fc7c 	bl	800349c <HAL_DMA_Start_IT>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8005ba8:	7dfb      	ldrb	r3, [r7, #23]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d12f      	bne.n	8005c0e <HAL_I2C_Slave_Receive_DMA+0x12a>
 8005bae:	e013      	b.n	8005bd8 <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2228      	movs	r2, #40	@ 0x28
 8005bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bc4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e02f      	b.n	8005c38 <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	685a      	ldr	r2, [r3, #4]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005be6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005bf0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f001 fcb3 	bl	8007560 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c08:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	e014      	b.n	8005c38 <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2228      	movs	r2, #40	@ 0x28
 8005c12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c22:	f043 0210 	orr.w	r2, r3, #16
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e000      	b.n	8005c38 <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 8005c36:	2302      	movs	r3, #2
  }
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3718      	adds	r7, #24
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	ffff0000 	.word	0xffff0000
 8005c44:	080066f5 	.word	0x080066f5
 8005c48:	08007407 	.word	0x08007407
 8005c4c:	0800744d 	.word	0x0800744d

08005c50 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d005      	beq.n	8005c7c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	68f9      	ldr	r1, [r7, #12]
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	4798      	blx	r3
  }
}
 8005c7c:	bf00      	nop
 8005c7e:	3710      	adds	r7, #16
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b086      	sub	sp, #24
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	0a1b      	lsrs	r3, r3, #8
 8005ca0:	f003 0301 	and.w	r3, r3, #1
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d010      	beq.n	8005cca <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	09db      	lsrs	r3, r3, #7
 8005cac:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00a      	beq.n	8005cca <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cb8:	f043 0201 	orr.w	r2, r3, #1
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005cc8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	0a9b      	lsrs	r3, r3, #10
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d010      	beq.n	8005cf8 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	09db      	lsrs	r3, r3, #7
 8005cda:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00a      	beq.n	8005cf8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ce6:	f043 0208 	orr.w	r2, r3, #8
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005cf6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	0a5b      	lsrs	r3, r3, #9
 8005cfc:	f003 0301 	and.w	r3, r3, #1
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d010      	beq.n	8005d26 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	09db      	lsrs	r3, r3, #7
 8005d08:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00a      	beq.n	8005d26 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d14:	f043 0202 	orr.w	r2, r3, #2
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d24:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d2a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f003 030b 	and.w	r3, r3, #11
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d003      	beq.n	8005d3e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8005d36:	68f9      	ldr	r1, [r7, #12]
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f001 f965 	bl	8007008 <I2C_ITError>
  }
}
 8005d3e:	bf00      	nop
 8005d40:	3718      	adds	r7, #24
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b083      	sub	sp, #12
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
 8005d4e:	460b      	mov	r3, r1
 8005d50:	70fb      	strb	r3, [r7, #3]
 8005d52:	4613      	mov	r3, r2
 8005d54:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005d56:	bf00      	nop
 8005d58:	370c      	adds	r7, #12
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b083      	sub	sp, #12
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005d6a:	bf00      	nop
 8005d6c:	370c      	adds	r7, #12
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr

08005d76 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d76:	b480      	push	{r7}
 8005d78:	b083      	sub	sp, #12
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005d7e:	bf00      	nop
 8005d80:	370c      	adds	r7, #12
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b083      	sub	sp, #12
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005d92:	bf00      	nop
 8005d94:	370c      	adds	r7, #12
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b083      	sub	sp, #12
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005da6:	bf00      	nop
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b083      	sub	sp, #12
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005dba:	bf00      	nop
 8005dbc:	370c      	adds	r7, #12
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b088      	sub	sp, #32
 8005dca:	af02      	add	r7, sp, #8
 8005dcc:	60f8      	str	r0, [r7, #12]
 8005dce:	60b9      	str	r1, [r7, #8]
 8005dd0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d101      	bne.n	8005de4 <I2C_Master_ISR_IT+0x1e>
 8005de0:	2302      	movs	r3, #2
 8005de2:	e12e      	b.n	8006042 <I2C_Master_ISR_IT+0x27c>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	091b      	lsrs	r3, r3, #4
 8005df0:	f003 0301 	and.w	r3, r3, #1
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d013      	beq.n	8005e20 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	091b      	lsrs	r3, r3, #4
 8005dfc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00d      	beq.n	8005e20 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2210      	movs	r2, #16
 8005e0a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e10:	f043 0204 	orr.w	r2, r3, #4
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f001 fa0c 	bl	8007236 <I2C_Flush_TXDR>
 8005e1e:	e0fb      	b.n	8006018 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	089b      	lsrs	r3, r3, #2
 8005e24:	f003 0301 	and.w	r3, r3, #1
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d023      	beq.n	8005e74 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	089b      	lsrs	r3, r3, #2
 8005e30:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d01d      	beq.n	8005e74 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	f023 0304 	bic.w	r3, r3, #4
 8005e3e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e4a:	b2d2      	uxtb	r2, r2
 8005e4c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e52:	1c5a      	adds	r2, r3, #1
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005e72:	e0d1      	b.n	8006018 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	099b      	lsrs	r3, r3, #6
 8005e78:	f003 0301 	and.w	r3, r3, #1
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d12a      	bne.n	8005ed6 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	085b      	lsrs	r3, r3, #1
 8005e84:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d024      	beq.n	8005ed6 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	085b      	lsrs	r3, r3, #1
 8005e90:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d01e      	beq.n	8005ed6 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f000 80ba 	beq.w	8006018 <I2C_Master_ISR_IT+0x252>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea8:	781a      	ldrb	r2, [r3, #0]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb4:	1c5a      	adds	r2, r3, #1
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8005ed4:	e0a0      	b.n	8006018 <I2C_Master_ISR_IT+0x252>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	09db      	lsrs	r3, r3, #7
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d06b      	beq.n	8005fba <I2C_Master_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	099b      	lsrs	r3, r3, #6
 8005ee6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d065      	beq.n	8005fba <I2C_Master_ISR_IT+0x1f4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d04e      	beq.n	8005f96 <I2C_Master_ISR_IT+0x1d0>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d14a      	bne.n	8005f96 <I2C_Master_ISR_IT+0x1d0>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f0c:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	2bff      	cmp	r3, #255	@ 0xff
 8005f16:	d91c      	bls.n	8005f52 <I2C_Master_ISR_IT+0x18c>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	0c1b      	lsrs	r3, r3, #16
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d103      	bne.n	8005f34 <I2C_Master_ISR_IT+0x16e>
        {
          hi2c->XferSize = 1U;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005f32:	e002      	b.n	8005f3a <I2C_Master_ISR_IT+0x174>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	22ff      	movs	r2, #255	@ 0xff
 8005f38:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f3e:	b2da      	uxtb	r2, r3
 8005f40:	8a79      	ldrh	r1, [r7, #18]
 8005f42:	2300      	movs	r3, #0
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f001 fad6 	bl	80074fc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f50:	e032      	b.n	8005fb8 <I2C_Master_ISR_IT+0x1f2>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f60:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005f64:	d00b      	beq.n	8005f7e <I2C_Master_ISR_IT+0x1b8>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f6a:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005f70:	8a79      	ldrh	r1, [r7, #18]
 8005f72:	2000      	movs	r0, #0
 8005f74:	9000      	str	r0, [sp, #0]
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f001 fac0 	bl	80074fc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f7c:	e01c      	b.n	8005fb8 <I2C_Master_ISR_IT+0x1f2>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f82:	b2da      	uxtb	r2, r3
 8005f84:	8a79      	ldrh	r1, [r7, #18]
 8005f86:	2300      	movs	r3, #0
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f001 fab4 	bl	80074fc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f94:	e010      	b.n	8005fb8 <I2C_Master_ISR_IT+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fa0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005fa4:	d003      	beq.n	8005fae <I2C_Master_ISR_IT+0x1e8>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f000 fd09 	bl	80069be <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005fac:	e034      	b.n	8006018 <I2C_Master_ISR_IT+0x252>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005fae:	2140      	movs	r1, #64	@ 0x40
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f001 f829 	bl	8007008 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005fb6:	e02f      	b.n	8006018 <I2C_Master_ISR_IT+0x252>
 8005fb8:	e02e      	b.n	8006018 <I2C_Master_ISR_IT+0x252>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	099b      	lsrs	r3, r3, #6
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d028      	beq.n	8006018 <I2C_Master_ISR_IT+0x252>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	099b      	lsrs	r3, r3, #6
 8005fca:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d022      	beq.n	8006018 <I2C_Master_ISR_IT+0x252>
  {
    if (hi2c->XferCount == 0U)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d119      	bne.n	8006010 <I2C_Master_ISR_IT+0x24a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fe6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005fea:	d015      	beq.n	8006018 <I2C_Master_ISR_IT+0x252>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ff0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005ff4:	d108      	bne.n	8006008 <I2C_Master_ISR_IT+0x242>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	685a      	ldr	r2, [r3, #4]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006004:	605a      	str	r2, [r3, #4]
 8006006:	e007      	b.n	8006018 <I2C_Master_ISR_IT+0x252>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006008:	68f8      	ldr	r0, [r7, #12]
 800600a:	f000 fcd8 	bl	80069be <I2C_ITMasterSeqCplt>
 800600e:	e003      	b.n	8006018 <I2C_Master_ISR_IT+0x252>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006010:	2140      	movs	r1, #64	@ 0x40
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f000 fff8 	bl	8007008 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	095b      	lsrs	r3, r3, #5
 800601c:	f003 0301 	and.w	r3, r3, #1
 8006020:	2b00      	cmp	r3, #0
 8006022:	d009      	beq.n	8006038 <I2C_Master_ISR_IT+0x272>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	095b      	lsrs	r3, r3, #5
 8006028:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800602c:	2b00      	cmp	r3, #0
 800602e:	d003      	beq.n	8006038 <I2C_Master_ISR_IT+0x272>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8006030:	6979      	ldr	r1, [r7, #20]
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f000 fd5e 	bl	8006af4 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3718      	adds	r7, #24
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800604a:	b580      	push	{r7, lr}
 800604c:	b086      	sub	sp, #24
 800604e:	af00      	add	r7, sp, #0
 8006050:	60f8      	str	r0, [r7, #12]
 8006052:	60b9      	str	r1, [r7, #8]
 8006054:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800605a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006066:	2b01      	cmp	r3, #1
 8006068:	d101      	bne.n	800606e <I2C_Slave_ISR_IT+0x24>
 800606a:	2302      	movs	r3, #2
 800606c:	e0ed      	b.n	800624a <I2C_Slave_ISR_IT+0x200>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	095b      	lsrs	r3, r3, #5
 800607a:	f003 0301 	and.w	r3, r3, #1
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00a      	beq.n	8006098 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	095b      	lsrs	r3, r3, #5
 8006086:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800608a:	2b00      	cmp	r3, #0
 800608c:	d004      	beq.n	8006098 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800608e:	6939      	ldr	r1, [r7, #16]
 8006090:	68f8      	ldr	r0, [r7, #12]
 8006092:	f000 fdf9 	bl	8006c88 <I2C_ITSlaveCplt>
 8006096:	e0d3      	b.n	8006240 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	091b      	lsrs	r3, r3, #4
 800609c:	f003 0301 	and.w	r3, r3, #1
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d04d      	beq.n	8006140 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	091b      	lsrs	r3, r3, #4
 80060a8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d047      	beq.n	8006140 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d128      	bne.n	800610c <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	2b28      	cmp	r3, #40	@ 0x28
 80060c4:	d108      	bne.n	80060d8 <I2C_Slave_ISR_IT+0x8e>
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80060cc:	d104      	bne.n	80060d8 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80060ce:	6939      	ldr	r1, [r7, #16]
 80060d0:	68f8      	ldr	r0, [r7, #12]
 80060d2:	f000 ff43 	bl	8006f5c <I2C_ITListenCplt>
 80060d6:	e032      	b.n	800613e <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	2b29      	cmp	r3, #41	@ 0x29
 80060e2:	d10e      	bne.n	8006102 <I2C_Slave_ISR_IT+0xb8>
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80060ea:	d00a      	beq.n	8006102 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2210      	movs	r2, #16
 80060f2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f001 f89e 	bl	8007236 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	f000 fc9c 	bl	8006a38 <I2C_ITSlaveSeqCplt>
 8006100:	e01d      	b.n	800613e <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2210      	movs	r2, #16
 8006108:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800610a:	e096      	b.n	800623a <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2210      	movs	r2, #16
 8006112:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006118:	f043 0204 	orr.w	r2, r3, #4
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d004      	beq.n	8006130 <I2C_Slave_ISR_IT+0xe6>
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800612c:	f040 8085 	bne.w	800623a <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006134:	4619      	mov	r1, r3
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f000 ff66 	bl	8007008 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800613c:	e07d      	b.n	800623a <I2C_Slave_ISR_IT+0x1f0>
 800613e:	e07c      	b.n	800623a <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	089b      	lsrs	r3, r3, #2
 8006144:	f003 0301 	and.w	r3, r3, #1
 8006148:	2b00      	cmp	r3, #0
 800614a:	d030      	beq.n	80061ae <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	089b      	lsrs	r3, r3, #2
 8006150:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006154:	2b00      	cmp	r3, #0
 8006156:	d02a      	beq.n	80061ae <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800615c:	b29b      	uxth	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d018      	beq.n	8006194 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800616c:	b2d2      	uxtb	r2, r2
 800616e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006174:	1c5a      	adds	r2, r3, #1
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800617e:	3b01      	subs	r3, #1
 8006180:	b29a      	uxth	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800618a:	b29b      	uxth	r3, r3
 800618c:	3b01      	subs	r3, #1
 800618e:	b29a      	uxth	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006198:	b29b      	uxth	r3, r3
 800619a:	2b00      	cmp	r3, #0
 800619c:	d14f      	bne.n	800623e <I2C_Slave_ISR_IT+0x1f4>
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80061a4:	d04b      	beq.n	800623e <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f000 fc46 	bl	8006a38 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80061ac:	e047      	b.n	800623e <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	08db      	lsrs	r3, r3, #3
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00a      	beq.n	80061d0 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	08db      	lsrs	r3, r3, #3
 80061be:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d004      	beq.n	80061d0 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80061c6:	6939      	ldr	r1, [r7, #16]
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	f000 fb74 	bl	80068b6 <I2C_ITAddrCplt>
 80061ce:	e037      	b.n	8006240 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	085b      	lsrs	r3, r3, #1
 80061d4:	f003 0301 	and.w	r3, r3, #1
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d031      	beq.n	8006240 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	085b      	lsrs	r3, r3, #1
 80061e0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d02b      	beq.n	8006240 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d018      	beq.n	8006224 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f6:	781a      	ldrb	r2, [r3, #0]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006202:	1c5a      	adds	r2, r3, #1
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800620c:	b29b      	uxth	r3, r3
 800620e:	3b01      	subs	r3, #1
 8006210:	b29a      	uxth	r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800621a:	3b01      	subs	r3, #1
 800621c:	b29a      	uxth	r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006222:	e00d      	b.n	8006240 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800622a:	d002      	beq.n	8006232 <I2C_Slave_ISR_IT+0x1e8>
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d106      	bne.n	8006240 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f000 fc00 	bl	8006a38 <I2C_ITSlaveSeqCplt>
 8006238:	e002      	b.n	8006240 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800623a:	bf00      	nop
 800623c:	e000      	b.n	8006240 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800623e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3718      	adds	r7, #24
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}

08006252 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8006252:	b580      	push	{r7, lr}
 8006254:	b088      	sub	sp, #32
 8006256:	af02      	add	r7, sp, #8
 8006258:	60f8      	str	r0, [r7, #12]
 800625a:	60b9      	str	r1, [r7, #8]
 800625c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006264:	2b01      	cmp	r3, #1
 8006266:	d101      	bne.n	800626c <I2C_Master_ISR_DMA+0x1a>
 8006268:	2302      	movs	r3, #2
 800626a:	e0f0      	b.n	800644e <I2C_Master_ISR_DMA+0x1fc>
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	091b      	lsrs	r3, r3, #4
 8006278:	f003 0301 	and.w	r3, r3, #1
 800627c:	2b00      	cmp	r3, #0
 800627e:	d017      	beq.n	80062b0 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	091b      	lsrs	r3, r3, #4
 8006284:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006288:	2b00      	cmp	r3, #0
 800628a:	d011      	beq.n	80062b0 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2210      	movs	r2, #16
 8006292:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006298:	f043 0204 	orr.w	r2, r3, #4
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80062a0:	2120      	movs	r1, #32
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	f001 f95c 	bl	8007560 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	f000 ffc4 	bl	8007236 <I2C_Flush_TXDR>
 80062ae:	e0c9      	b.n	8006444 <I2C_Master_ISR_DMA+0x1f2>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	09db      	lsrs	r3, r3, #7
 80062b4:	f003 0301 	and.w	r3, r3, #1
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	f000 8081 	beq.w	80063c0 <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	099b      	lsrs	r3, r3, #6
 80062c2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d07a      	beq.n	80063c0 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062d8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062de:	b29b      	uxth	r3, r3
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d05c      	beq.n	800639e <I2C_Master_ISR_DMA+0x14c>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062f0:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	2bff      	cmp	r3, #255	@ 0xff
 80062fa:	d914      	bls.n	8006326 <I2C_Master_ISR_DMA+0xd4>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	0c1b      	lsrs	r3, r3, #16
 8006304:	b2db      	uxtb	r3, r3
 8006306:	f003 0301 	and.w	r3, r3, #1
 800630a:	b2db      	uxtb	r3, r3
 800630c:	2b01      	cmp	r3, #1
 800630e:	d103      	bne.n	8006318 <I2C_Master_ISR_DMA+0xc6>
        {
          hi2c->XferSize = 1U;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2201      	movs	r2, #1
 8006314:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006316:	e002      	b.n	800631e <I2C_Master_ISR_DMA+0xcc>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	22ff      	movs	r2, #255	@ 0xff
 800631c:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 800631e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006322:	617b      	str	r3, [r7, #20]
 8006324:	e010      	b.n	8006348 <I2C_Master_ISR_DMA+0xf6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800632a:	b29a      	uxth	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006334:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006338:	d003      	beq.n	8006342 <I2C_Master_ISR_DMA+0xf0>
        {
          xfermode = hi2c->XferOptions;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800633e:	617b      	str	r3, [r7, #20]
 8006340:	e002      	b.n	8006348 <I2C_Master_ISR_DMA+0xf6>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8006342:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006346:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800634c:	b2da      	uxtb	r2, r3
 800634e:	8a79      	ldrh	r1, [r7, #18]
 8006350:	2300      	movs	r3, #0
 8006352:	9300      	str	r3, [sp, #0]
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f001 f8d0 	bl	80074fc <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006360:	b29a      	uxth	r2, r3
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	b29a      	uxth	r2, r3
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006374:	b2db      	uxtb	r3, r3
 8006376:	2b22      	cmp	r3, #34	@ 0x22
 8006378:	d108      	bne.n	800638c <I2C_Master_ISR_DMA+0x13a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006388:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800638a:	e05b      	b.n	8006444 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800639a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800639c:	e052      	b.n	8006444 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063ac:	d003      	beq.n	80063b6 <I2C_Master_ISR_DMA+0x164>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	f000 fb05 	bl	80069be <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80063b4:	e046      	b.n	8006444 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80063b6:	2140      	movs	r1, #64	@ 0x40
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f000 fe25 	bl	8007008 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80063be:	e041      	b.n	8006444 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	099b      	lsrs	r3, r3, #6
 80063c4:	f003 0301 	and.w	r3, r3, #1
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d029      	beq.n	8006420 <I2C_Master_ISR_DMA+0x1ce>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	099b      	lsrs	r3, r3, #6
 80063d0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d023      	beq.n	8006420 <I2C_Master_ISR_DMA+0x1ce>
  {
    if (hi2c->XferCount == 0U)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063dc:	b29b      	uxth	r3, r3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d119      	bne.n	8006416 <I2C_Master_ISR_DMA+0x1c4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063f0:	d027      	beq.n	8006442 <I2C_Master_ISR_DMA+0x1f0>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80063fa:	d108      	bne.n	800640e <I2C_Master_ISR_DMA+0x1bc>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	685a      	ldr	r2, [r3, #4]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800640a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800640c:	e019      	b.n	8006442 <I2C_Master_ISR_DMA+0x1f0>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f000 fad5 	bl	80069be <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8006414:	e015      	b.n	8006442 <I2C_Master_ISR_DMA+0x1f0>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006416:	2140      	movs	r1, #64	@ 0x40
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f000 fdf5 	bl	8007008 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800641e:	e010      	b.n	8006442 <I2C_Master_ISR_DMA+0x1f0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	095b      	lsrs	r3, r3, #5
 8006424:	f003 0301 	and.w	r3, r3, #1
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00b      	beq.n	8006444 <I2C_Master_ISR_DMA+0x1f2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	095b      	lsrs	r3, r3, #5
 8006430:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006434:	2b00      	cmp	r3, #0
 8006436:	d005      	beq.n	8006444 <I2C_Master_ISR_DMA+0x1f2>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006438:	68b9      	ldr	r1, [r7, #8]
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f000 fb5a 	bl	8006af4 <I2C_ITMasterCplt>
 8006440:	e000      	b.n	8006444 <I2C_Master_ISR_DMA+0x1f2>
    if (hi2c->XferCount == 0U)
 8006442:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3718      	adds	r7, #24
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
	...

08006458 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b088      	sub	sp, #32
 800645c:	af02      	add	r7, sp, #8
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8006464:	4b94      	ldr	r3, [pc, #592]	@ (80066b8 <I2C_Mem_ISR_DMA+0x260>)
 8006466:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800646e:	2b01      	cmp	r3, #1
 8006470:	d101      	bne.n	8006476 <I2C_Mem_ISR_DMA+0x1e>
 8006472:	2302      	movs	r3, #2
 8006474:	e139      	b.n	80066ea <I2C_Mem_ISR_DMA+0x292>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	091b      	lsrs	r3, r3, #4
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	2b00      	cmp	r3, #0
 8006488:	d017      	beq.n	80064ba <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	091b      	lsrs	r3, r3, #4
 800648e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006492:	2b00      	cmp	r3, #0
 8006494:	d011      	beq.n	80064ba <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2210      	movs	r2, #16
 800649c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064a2:	f043 0204 	orr.w	r2, r3, #4
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80064aa:	2120      	movs	r1, #32
 80064ac:	68f8      	ldr	r0, [r7, #12]
 80064ae:	f001 f857 	bl	8007560 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	f000 febf 	bl	8007236 <I2C_Flush_TXDR>
 80064b8:	e112      	b.n	80066e0 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	085b      	lsrs	r3, r3, #1
 80064be:	f003 0301 	and.w	r3, r3, #1
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00f      	beq.n	80064e6 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	085b      	lsrs	r3, r3, #1
 80064ca:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d009      	beq.n	80064e6 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80064da:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80064e2:	651a      	str	r2, [r3, #80]	@ 0x50
 80064e4:	e0fc      	b.n	80066e0 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	09db      	lsrs	r3, r3, #7
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d06e      	beq.n	80065d0 <I2C_Mem_ISR_DMA+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	099b      	lsrs	r3, r3, #6
 80064f6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d068      	beq.n	80065d0 <I2C_Mem_ISR_DMA+0x178>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80064fe:	2101      	movs	r1, #1
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	f001 f8b1 	bl	8007668 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006506:	2110      	movs	r1, #16
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f001 f829 	bl	8007560 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006512:	b29b      	uxth	r3, r3
 8006514:	2b00      	cmp	r3, #0
 8006516:	d056      	beq.n	80065c6 <I2C_Mem_ISR_DMA+0x16e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800651c:	b29b      	uxth	r3, r3
 800651e:	2bff      	cmp	r3, #255	@ 0xff
 8006520:	d91e      	bls.n	8006560 <I2C_Mem_ISR_DMA+0x108>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	0c1b      	lsrs	r3, r3, #16
 800652a:	b2db      	uxtb	r3, r3
 800652c:	f003 0301 	and.w	r3, r3, #1
 8006530:	b2db      	uxtb	r3, r3
 8006532:	2b01      	cmp	r3, #1
 8006534:	d103      	bne.n	800653e <I2C_Mem_ISR_DMA+0xe6>
        {
          hi2c->XferSize = 1U;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2201      	movs	r2, #1
 800653a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800653c:	e002      	b.n	8006544 <I2C_Mem_ISR_DMA+0xec>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	22ff      	movs	r2, #255	@ 0xff
 8006542:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006548:	b299      	uxth	r1, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800654e:	b2da      	uxtb	r2, r3
 8006550:	2300      	movs	r3, #0
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f000 ffcf 	bl	80074fc <I2C_TransferConfig>
 800655e:	e011      	b.n	8006584 <I2C_Mem_ISR_DMA+0x12c>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006564:	b29a      	uxth	r2, r3
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800656e:	b299      	uxth	r1, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006574:	b2da      	uxtb	r2, r3
 8006576:	2300      	movs	r3, #0
 8006578:	9300      	str	r3, [sp, #0]
 800657a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f000 ffbc 	bl	80074fc <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006588:	b29a      	uxth	r2, r3
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	b29a      	uxth	r2, r3
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800659c:	b2db      	uxtb	r3, r3
 800659e:	2b22      	cmp	r3, #34	@ 0x22
 80065a0:	d108      	bne.n	80065b4 <I2C_Mem_ISR_DMA+0x15c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80065b0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80065b2:	e095      	b.n	80066e0 <I2C_Mem_ISR_DMA+0x288>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065c2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80065c4:	e08c      	b.n	80066e0 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80065c6:	2140      	movs	r1, #64	@ 0x40
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	f000 fd1d 	bl	8007008 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80065ce:	e087      	b.n	80066e0 <I2C_Mem_ISR_DMA+0x288>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	099b      	lsrs	r3, r3, #6
 80065d4:	f003 0301 	and.w	r3, r3, #1
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d071      	beq.n	80066c0 <I2C_Mem_ISR_DMA+0x268>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	099b      	lsrs	r3, r3, #6
 80065e0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d06b      	beq.n	80066c0 <I2C_Mem_ISR_DMA+0x268>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80065e8:	2101      	movs	r1, #1
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	f001 f83c 	bl	8007668 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80065f0:	2110      	movs	r1, #16
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f000 ffb4 	bl	8007560 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	2b22      	cmp	r3, #34	@ 0x22
 8006602:	d101      	bne.n	8006608 <I2C_Mem_ISR_DMA+0x1b0>
    {
      direction = I2C_GENERATE_START_READ;
 8006604:	4b2d      	ldr	r3, [pc, #180]	@ (80066bc <I2C_Mem_ISR_DMA+0x264>)
 8006606:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800660c:	b29b      	uxth	r3, r3
 800660e:	2bff      	cmp	r3, #255	@ 0xff
 8006610:	d91e      	bls.n	8006650 <I2C_Mem_ISR_DMA+0x1f8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	0c1b      	lsrs	r3, r3, #16
 800661a:	b2db      	uxtb	r3, r3
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	b2db      	uxtb	r3, r3
 8006622:	2b01      	cmp	r3, #1
 8006624:	d103      	bne.n	800662e <I2C_Mem_ISR_DMA+0x1d6>
      {
        hi2c->XferSize = 1U;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2201      	movs	r2, #1
 800662a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800662c:	e002      	b.n	8006634 <I2C_Mem_ISR_DMA+0x1dc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	22ff      	movs	r2, #255	@ 0xff
 8006632:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006638:	b299      	uxth	r1, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800663e:	b2da      	uxtb	r2, r3
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	9300      	str	r3, [sp, #0]
 8006644:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f000 ff57 	bl	80074fc <I2C_TransferConfig>
 800664e:	e011      	b.n	8006674 <I2C_Mem_ISR_DMA+0x21c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006654:	b29a      	uxth	r2, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800665e:	b299      	uxth	r1, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006664:	b2da      	uxtb	r2, r3
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	9300      	str	r3, [sp, #0]
 800666a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	f000 ff44 	bl	80074fc <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006678:	b29a      	uxth	r2, r3
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	b29a      	uxth	r2, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800668c:	b2db      	uxtb	r3, r3
 800668e:	2b22      	cmp	r3, #34	@ 0x22
 8006690:	d108      	bne.n	80066a4 <I2C_Mem_ISR_DMA+0x24c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80066a0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066a2:	e01d      	b.n	80066e0 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066b2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066b4:	e014      	b.n	80066e0 <I2C_Mem_ISR_DMA+0x288>
 80066b6:	bf00      	nop
 80066b8:	80002000 	.word	0x80002000
 80066bc:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	095b      	lsrs	r3, r3, #5
 80066c4:	f003 0301 	and.w	r3, r3, #1
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d009      	beq.n	80066e0 <I2C_Mem_ISR_DMA+0x288>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	095b      	lsrs	r3, r3, #5
 80066d0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d003      	beq.n	80066e0 <I2C_Mem_ISR_DMA+0x288>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80066d8:	68b9      	ldr	r1, [r7, #8]
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f000 fa0a 	bl	8006af4 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3718      	adds	r7, #24
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop

080066f4 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b088      	sub	sp, #32
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006704:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006706:	2300      	movs	r3, #0
 8006708:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006710:	2b01      	cmp	r3, #1
 8006712:	d101      	bne.n	8006718 <I2C_Slave_ISR_DMA+0x24>
 8006714:	2302      	movs	r3, #2
 8006716:	e0ca      	b.n	80068ae <I2C_Slave_ISR_DMA+0x1ba>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	095b      	lsrs	r3, r3, #5
 8006724:	f003 0301 	and.w	r3, r3, #1
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00a      	beq.n	8006742 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	095b      	lsrs	r3, r3, #5
 8006730:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006734:	2b00      	cmp	r3, #0
 8006736:	d004      	beq.n	8006742 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006738:	68b9      	ldr	r1, [r7, #8]
 800673a:	68f8      	ldr	r0, [r7, #12]
 800673c:	f000 faa4 	bl	8006c88 <I2C_ITSlaveCplt>
 8006740:	e0b0      	b.n	80068a4 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	091b      	lsrs	r3, r3, #4
 8006746:	f003 0301 	and.w	r3, r3, #1
 800674a:	2b00      	cmp	r3, #0
 800674c:	f000 809a 	beq.w	8006884 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	091b      	lsrs	r3, r3, #4
 8006754:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006758:	2b00      	cmp	r3, #0
 800675a:	f000 8093 	beq.w	8006884 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	0b9b      	lsrs	r3, r3, #14
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	2b00      	cmp	r3, #0
 8006768:	d105      	bne.n	8006776 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	0bdb      	lsrs	r3, r3, #15
 800676e:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006772:	2b00      	cmp	r3, #0
 8006774:	d07f      	beq.n	8006876 <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00d      	beq.n	800679a <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	0bdb      	lsrs	r3, r3, #15
 8006782:	f003 0301 	and.w	r3, r3, #1
 8006786:	2b00      	cmp	r3, #0
 8006788:	d007      	beq.n	800679a <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d101      	bne.n	800679a <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 8006796:	2301      	movs	r3, #1
 8006798:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00d      	beq.n	80067be <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	0b9b      	lsrs	r3, r3, #14
 80067a6:	f003 0301 	and.w	r3, r3, #1
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d007      	beq.n	80067be <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d101      	bne.n	80067be <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 80067ba:	2301      	movs	r3, #1
 80067bc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d128      	bne.n	8006816 <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2b28      	cmp	r3, #40	@ 0x28
 80067ce:	d108      	bne.n	80067e2 <I2C_Slave_ISR_DMA+0xee>
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80067d6:	d104      	bne.n	80067e2 <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80067d8:	68b9      	ldr	r1, [r7, #8]
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f000 fbbe 	bl	8006f5c <I2C_ITListenCplt>
 80067e0:	e048      	b.n	8006874 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	2b29      	cmp	r3, #41	@ 0x29
 80067ec:	d10e      	bne.n	800680c <I2C_Slave_ISR_DMA+0x118>
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80067f4:	d00a      	beq.n	800680c <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2210      	movs	r2, #16
 80067fc:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	f000 fd19 	bl	8007236 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006804:	68f8      	ldr	r0, [r7, #12]
 8006806:	f000 f917 	bl	8006a38 <I2C_ITSlaveSeqCplt>
 800680a:	e033      	b.n	8006874 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2210      	movs	r2, #16
 8006812:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006814:	e034      	b.n	8006880 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2210      	movs	r2, #16
 800681c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006822:	f043 0204 	orr.w	r2, r3, #4
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006830:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d003      	beq.n	8006840 <I2C_Slave_ISR_DMA+0x14c>
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800683e:	d11f      	bne.n	8006880 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006840:	7dfb      	ldrb	r3, [r7, #23]
 8006842:	2b21      	cmp	r3, #33	@ 0x21
 8006844:	d002      	beq.n	800684c <I2C_Slave_ISR_DMA+0x158>
 8006846:	7dfb      	ldrb	r3, [r7, #23]
 8006848:	2b29      	cmp	r3, #41	@ 0x29
 800684a:	d103      	bne.n	8006854 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2221      	movs	r2, #33	@ 0x21
 8006850:	631a      	str	r2, [r3, #48]	@ 0x30
 8006852:	e008      	b.n	8006866 <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006854:	7dfb      	ldrb	r3, [r7, #23]
 8006856:	2b22      	cmp	r3, #34	@ 0x22
 8006858:	d002      	beq.n	8006860 <I2C_Slave_ISR_DMA+0x16c>
 800685a:	7dfb      	ldrb	r3, [r7, #23]
 800685c:	2b2a      	cmp	r3, #42	@ 0x2a
 800685e:	d102      	bne.n	8006866 <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2222      	movs	r2, #34	@ 0x22
 8006864:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800686a:	4619      	mov	r1, r3
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f000 fbcb 	bl	8007008 <I2C_ITError>
      if (treatdmanack == 1U)
 8006872:	e005      	b.n	8006880 <I2C_Slave_ISR_DMA+0x18c>
 8006874:	e004      	b.n	8006880 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2210      	movs	r2, #16
 800687c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800687e:	e011      	b.n	80068a4 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 8006880:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006882:	e00f      	b.n	80068a4 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	08db      	lsrs	r3, r3, #3
 8006888:	f003 0301 	and.w	r3, r3, #1
 800688c:	2b00      	cmp	r3, #0
 800688e:	d009      	beq.n	80068a4 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	08db      	lsrs	r3, r3, #3
 8006894:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006898:	2b00      	cmp	r3, #0
 800689a:	d003      	beq.n	80068a4 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800689c:	68b9      	ldr	r1, [r7, #8]
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	f000 f809 	bl	80068b6 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3720      	adds	r7, #32
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b084      	sub	sp, #16
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
 80068be:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80068cc:	2b28      	cmp	r3, #40	@ 0x28
 80068ce:	d16a      	bne.n	80069a6 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	699b      	ldr	r3, [r3, #24]
 80068d6:	0c1b      	lsrs	r3, r3, #16
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	f003 0301 	and.w	r3, r3, #1
 80068de:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	0c1b      	lsrs	r3, r3, #16
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80068ee:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068fc:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	b29b      	uxth	r3, r3
 8006906:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800690a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	2b02      	cmp	r3, #2
 8006912:	d138      	bne.n	8006986 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006914:	897b      	ldrh	r3, [r7, #10]
 8006916:	09db      	lsrs	r3, r3, #7
 8006918:	b29a      	uxth	r2, r3
 800691a:	89bb      	ldrh	r3, [r7, #12]
 800691c:	4053      	eors	r3, r2
 800691e:	b29b      	uxth	r3, r3
 8006920:	f003 0306 	and.w	r3, r3, #6
 8006924:	2b00      	cmp	r3, #0
 8006926:	d11c      	bne.n	8006962 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006928:	897b      	ldrh	r3, [r7, #10]
 800692a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006930:	1c5a      	adds	r2, r3, #1
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800693a:	2b02      	cmp	r3, #2
 800693c:	d13b      	bne.n	80069b6 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2208      	movs	r2, #8
 800694a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006954:	89ba      	ldrh	r2, [r7, #12]
 8006956:	7bfb      	ldrb	r3, [r7, #15]
 8006958:	4619      	mov	r1, r3
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f7ff f9f3 	bl	8005d46 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006960:	e029      	b.n	80069b6 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006962:	893b      	ldrh	r3, [r7, #8]
 8006964:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006966:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 fe7c 	bl	8007668 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006978:	89ba      	ldrh	r2, [r7, #12]
 800697a:	7bfb      	ldrb	r3, [r7, #15]
 800697c:	4619      	mov	r1, r3
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f7ff f9e1 	bl	8005d46 <HAL_I2C_AddrCallback>
}
 8006984:	e017      	b.n	80069b6 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006986:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 fe6c 	bl	8007668 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006998:	89ba      	ldrh	r2, [r7, #12]
 800699a:	7bfb      	ldrb	r3, [r7, #15]
 800699c:	4619      	mov	r1, r3
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f7ff f9d1 	bl	8005d46 <HAL_I2C_AddrCallback>
}
 80069a4:	e007      	b.n	80069b6 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2208      	movs	r2, #8
 80069ac:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80069b6:	bf00      	nop
 80069b8:	3710      	adds	r7, #16
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b082      	sub	sp, #8
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	2b21      	cmp	r3, #33	@ 0x21
 80069d8:	d115      	bne.n	8006a06 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2220      	movs	r2, #32
 80069de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2211      	movs	r2, #17
 80069e6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80069ee:	2101      	movs	r1, #1
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 fe39 	bl	8007668 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f019 fe82 	bl	8020708 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006a04:	e014      	b.n	8006a30 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2220      	movs	r2, #32
 8006a0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2212      	movs	r2, #18
 8006a12:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006a1a:	2102      	movs	r1, #2
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 fe23 	bl	8007668 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f019 fe82 	bl	8020734 <HAL_I2C_MasterRxCpltCallback>
}
 8006a30:	bf00      	nop
 8006a32:	3708      	adds	r7, #8
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	0b9b      	lsrs	r3, r3, #14
 8006a54:	f003 0301 	and.w	r3, r3, #1
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d008      	beq.n	8006a6e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006a6a:	601a      	str	r2, [r3, #0]
 8006a6c:	e00d      	b.n	8006a8a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	0bdb      	lsrs	r3, r3, #15
 8006a72:	f003 0301 	and.w	r3, r3, #1
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d007      	beq.n	8006a8a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006a88:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b29      	cmp	r3, #41	@ 0x29
 8006a94:	d112      	bne.n	8006abc <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2228      	movs	r2, #40	@ 0x28
 8006a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2221      	movs	r2, #33	@ 0x21
 8006aa2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006aa4:	2101      	movs	r1, #1
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 fdde 	bl	8007668 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f019 fe53 	bl	8020760 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006aba:	e017      	b.n	8006aec <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ac6:	d111      	bne.n	8006aec <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2228      	movs	r2, #40	@ 0x28
 8006acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2222      	movs	r2, #34	@ 0x22
 8006ad4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006ad6:	2102      	movs	r1, #2
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 fdc5 	bl	8007668 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f019 fe50 	bl	802078c <HAL_I2C_SlaveRxCpltCallback>
}
 8006aec:	bf00      	nop
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b086      	sub	sp, #24
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2220      	movs	r2, #32
 8006b08:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	2b21      	cmp	r3, #33	@ 0x21
 8006b14:	d107      	bne.n	8006b26 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006b16:	2101      	movs	r1, #1
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 fda5 	bl	8007668 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2211      	movs	r2, #17
 8006b22:	631a      	str	r2, [r3, #48]	@ 0x30
 8006b24:	e00c      	b.n	8006b40 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	2b22      	cmp	r3, #34	@ 0x22
 8006b30:	d106      	bne.n	8006b40 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006b32:	2102      	movs	r1, #2
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 fd97 	bl	8007668 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2212      	movs	r2, #18
 8006b3e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	6859      	ldr	r1, [r3, #4]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	4b4d      	ldr	r3, [pc, #308]	@ (8006c80 <I2C_ITMasterCplt+0x18c>)
 8006b4c:	400b      	ands	r3, r1
 8006b4e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a4a      	ldr	r2, [pc, #296]	@ (8006c84 <I2C_ITMasterCplt+0x190>)
 8006b5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	091b      	lsrs	r3, r3, #4
 8006b60:	f003 0301 	and.w	r3, r3, #1
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d009      	beq.n	8006b7c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2210      	movs	r2, #16
 8006b6e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b74:	f043 0204 	orr.w	r2, r3, #4
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	2b60      	cmp	r3, #96	@ 0x60
 8006b86:	d10b      	bne.n	8006ba0 <I2C_ITMasterCplt+0xac>
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	089b      	lsrs	r3, r3, #2
 8006b8c:	f003 0301 	and.w	r3, r3, #1
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d005      	beq.n	8006ba0 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fb48 	bl	8007236 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006baa:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	2b60      	cmp	r3, #96	@ 0x60
 8006bb6:	d002      	beq.n	8006bbe <I2C_ITMasterCplt+0xca>
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d006      	beq.n	8006bcc <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 fa1f 	bl	8007008 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006bca:	e054      	b.n	8006c76 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	2b21      	cmp	r3, #33	@ 0x21
 8006bd6:	d124      	bne.n	8006c22 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2220      	movs	r2, #32
 8006bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	2b40      	cmp	r3, #64	@ 0x40
 8006bf0:	d10b      	bne.n	8006c0a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f7ff f8b7 	bl	8005d76 <HAL_I2C_MemTxCpltCallback>
}
 8006c08:	e035      	b.n	8006c76 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f019 fd74 	bl	8020708 <HAL_I2C_MasterTxCpltCallback>
}
 8006c20:	e029      	b.n	8006c76 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	2b22      	cmp	r3, #34	@ 0x22
 8006c2c:	d123      	bne.n	8006c76 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2220      	movs	r2, #32
 8006c32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	2b40      	cmp	r3, #64	@ 0x40
 8006c46:	d10b      	bne.n	8006c60 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f7ff f896 	bl	8005d8a <HAL_I2C_MemRxCpltCallback>
}
 8006c5e:	e00a      	b.n	8006c76 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f019 fd5f 	bl	8020734 <HAL_I2C_MasterRxCpltCallback>
}
 8006c76:	bf00      	nop
 8006c78:	3718      	adds	r7, #24
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	fe00e800 	.word	0xfe00e800
 8006c84:	ffff0000 	.word	0xffff0000

08006c88 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b086      	sub	sp, #24
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ca2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006caa:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2220      	movs	r2, #32
 8006cb2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006cb4:	7afb      	ldrb	r3, [r7, #11]
 8006cb6:	2b21      	cmp	r3, #33	@ 0x21
 8006cb8:	d002      	beq.n	8006cc0 <I2C_ITSlaveCplt+0x38>
 8006cba:	7afb      	ldrb	r3, [r7, #11]
 8006cbc:	2b29      	cmp	r3, #41	@ 0x29
 8006cbe:	d108      	bne.n	8006cd2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006cc0:	f248 0101 	movw	r1, #32769	@ 0x8001
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 fccf 	bl	8007668 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2221      	movs	r2, #33	@ 0x21
 8006cce:	631a      	str	r2, [r3, #48]	@ 0x30
 8006cd0:	e019      	b.n	8006d06 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006cd2:	7afb      	ldrb	r3, [r7, #11]
 8006cd4:	2b22      	cmp	r3, #34	@ 0x22
 8006cd6:	d002      	beq.n	8006cde <I2C_ITSlaveCplt+0x56>
 8006cd8:	7afb      	ldrb	r3, [r7, #11]
 8006cda:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cdc:	d108      	bne.n	8006cf0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006cde:	f248 0102 	movw	r1, #32770	@ 0x8002
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 fcc0 	bl	8007668 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2222      	movs	r2, #34	@ 0x22
 8006cec:	631a      	str	r2, [r3, #48]	@ 0x30
 8006cee:	e00a      	b.n	8006d06 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8006cf0:	7afb      	ldrb	r3, [r7, #11]
 8006cf2:	2b28      	cmp	r3, #40	@ 0x28
 8006cf4:	d107      	bne.n	8006d06 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8006cf6:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 fcb4 	bl	8007668 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	685a      	ldr	r2, [r3, #4]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d14:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	6859      	ldr	r1, [r3, #4]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	4b8c      	ldr	r3, [pc, #560]	@ (8006f54 <I2C_ITSlaveCplt+0x2cc>)
 8006d22:	400b      	ands	r3, r1
 8006d24:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 fa85 	bl	8007236 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	0b9b      	lsrs	r3, r3, #14
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d013      	beq.n	8006d60 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006d46:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d020      	beq.n	8006d92 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006d5e:	e018      	b.n	8006d92 <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	0bdb      	lsrs	r3, r3, #15
 8006d64:	f003 0301 	and.w	r3, r3, #1
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d012      	beq.n	8006d92 <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006d7a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d006      	beq.n	8006d92 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	089b      	lsrs	r3, r3, #2
 8006d96:	f003 0301 	and.w	r3, r3, #1
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d020      	beq.n	8006de0 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	f023 0304 	bic.w	r3, r3, #4
 8006da4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db0:	b2d2      	uxtb	r2, r2
 8006db2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db8:	1c5a      	adds	r2, r3, #1
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00c      	beq.n	8006de0 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d005      	beq.n	8006df6 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dee:	f043 0204 	orr.w	r2, r3, #4
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	091b      	lsrs	r3, r3, #4
 8006dfa:	f003 0301 	and.w	r3, r3, #1
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d04a      	beq.n	8006e98 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	091b      	lsrs	r3, r3, #4
 8006e06:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d044      	beq.n	8006e98 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d128      	bne.n	8006e6a <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	2b28      	cmp	r3, #40	@ 0x28
 8006e22:	d108      	bne.n	8006e36 <I2C_ITSlaveCplt+0x1ae>
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e2a:	d104      	bne.n	8006e36 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006e2c:	6979      	ldr	r1, [r7, #20]
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 f894 	bl	8006f5c <I2C_ITListenCplt>
 8006e34:	e030      	b.n	8006e98 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	2b29      	cmp	r3, #41	@ 0x29
 8006e40:	d10e      	bne.n	8006e60 <I2C_ITSlaveCplt+0x1d8>
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006e48:	d00a      	beq.n	8006e60 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2210      	movs	r2, #16
 8006e50:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f9ef 	bl	8007236 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f7ff fded 	bl	8006a38 <I2C_ITSlaveSeqCplt>
 8006e5e:	e01b      	b.n	8006e98 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2210      	movs	r2, #16
 8006e66:	61da      	str	r2, [r3, #28]
 8006e68:	e016      	b.n	8006e98 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2210      	movs	r2, #16
 8006e70:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e76:	f043 0204 	orr.w	r2, r3, #4
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d003      	beq.n	8006e8c <I2C_ITSlaveCplt+0x204>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e8a:	d105      	bne.n	8006e98 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e90:	4619      	mov	r1, r3
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f8b8 	bl	8007008 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d010      	beq.n	8006ed0 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 f8a7 	bl	8007008 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	2b28      	cmp	r3, #40	@ 0x28
 8006ec4:	d141      	bne.n	8006f4a <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006ec6:	6979      	ldr	r1, [r7, #20]
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 f847 	bl	8006f5c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006ece:	e03c      	b.n	8006f4a <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006ed8:	d014      	beq.n	8006f04 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f7ff fdac 	bl	8006a38 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	4a1d      	ldr	r2, [pc, #116]	@ (8006f58 <I2C_ITSlaveCplt+0x2d0>)
 8006ee4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2220      	movs	r2, #32
 8006eea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f7fe ff30 	bl	8005d62 <HAL_I2C_ListenCpltCallback>
}
 8006f02:	e022      	b.n	8006f4a <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	2b22      	cmp	r3, #34	@ 0x22
 8006f0e:	d10e      	bne.n	8006f2e <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2220      	movs	r2, #32
 8006f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f019 fc30 	bl	802078c <HAL_I2C_SlaveRxCpltCallback>
}
 8006f2c:	e00d      	b.n	8006f4a <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2220      	movs	r2, #32
 8006f32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f019 fc0b 	bl	8020760 <HAL_I2C_SlaveTxCpltCallback>
}
 8006f4a:	bf00      	nop
 8006f4c:	3718      	adds	r7, #24
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	fe00e800 	.word	0xfe00e800
 8006f58:	ffff0000 	.word	0xffff0000

08006f5c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a26      	ldr	r2, [pc, #152]	@ (8007004 <I2C_ITListenCplt+0xa8>)
 8006f6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2220      	movs	r2, #32
 8006f76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	089b      	lsrs	r3, r3, #2
 8006f8c:	f003 0301 	and.w	r3, r3, #1
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d022      	beq.n	8006fda <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f9e:	b2d2      	uxtb	r2, r2
 8006fa0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa6:	1c5a      	adds	r2, r3, #1
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d012      	beq.n	8006fda <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	b29a      	uxth	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fd2:	f043 0204 	orr.w	r2, r3, #4
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006fda:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 fb42 	bl	8007668 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2210      	movs	r2, #16
 8006fea:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f7fe feb4 	bl	8005d62 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006ffa:	bf00      	nop
 8006ffc:	3708      	adds	r7, #8
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	ffff0000 	.word	0xffff0000

08007008 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007018:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a6d      	ldr	r2, [pc, #436]	@ (80071dc <I2C_ITError+0x1d4>)
 8007026:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	431a      	orrs	r2, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800703a:	7bfb      	ldrb	r3, [r7, #15]
 800703c:	2b28      	cmp	r3, #40	@ 0x28
 800703e:	d005      	beq.n	800704c <I2C_ITError+0x44>
 8007040:	7bfb      	ldrb	r3, [r7, #15]
 8007042:	2b29      	cmp	r3, #41	@ 0x29
 8007044:	d002      	beq.n	800704c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007046:	7bfb      	ldrb	r3, [r7, #15]
 8007048:	2b2a      	cmp	r3, #42	@ 0x2a
 800704a:	d10b      	bne.n	8007064 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800704c:	2103      	movs	r1, #3
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 fb0a 	bl	8007668 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2228      	movs	r2, #40	@ 0x28
 8007058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a60      	ldr	r2, [pc, #384]	@ (80071e0 <I2C_ITError+0x1d8>)
 8007060:	635a      	str	r2, [r3, #52]	@ 0x34
 8007062:	e030      	b.n	80070c6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007064:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 fafd 	bl	8007668 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f8e1 	bl	8007236 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800707a:	b2db      	uxtb	r3, r3
 800707c:	2b60      	cmp	r3, #96	@ 0x60
 800707e:	d01f      	beq.n	80070c0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2220      	movs	r2, #32
 8007084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	699b      	ldr	r3, [r3, #24]
 800708e:	f003 0320 	and.w	r3, r3, #32
 8007092:	2b20      	cmp	r3, #32
 8007094:	d114      	bne.n	80070c0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	f003 0310 	and.w	r3, r3, #16
 80070a0:	2b10      	cmp	r3, #16
 80070a2:	d109      	bne.n	80070b8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2210      	movs	r2, #16
 80070aa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070b0:	f043 0204 	orr.w	r2, r3, #4
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2220      	movs	r2, #32
 80070be:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ca:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d039      	beq.n	8007148 <I2C_ITError+0x140>
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	2b11      	cmp	r3, #17
 80070d8:	d002      	beq.n	80070e0 <I2C_ITError+0xd8>
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	2b21      	cmp	r3, #33	@ 0x21
 80070de:	d133      	bne.n	8007148 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80070ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80070ee:	d107      	bne.n	8007100 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80070fe:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007104:	4618      	mov	r0, r3
 8007106:	f7fc fc45 	bl	8003994 <HAL_DMA_GetState>
 800710a:	4603      	mov	r3, r0
 800710c:	2b01      	cmp	r3, #1
 800710e:	d017      	beq.n	8007140 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007114:	4a33      	ldr	r2, [pc, #204]	@ (80071e4 <I2C_ITError+0x1dc>)
 8007116:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007124:	4618      	mov	r0, r3
 8007126:	f7fc fa89 	bl	800363c <HAL_DMA_Abort_IT>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d04d      	beq.n	80071cc <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007134:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800713a:	4610      	mov	r0, r2
 800713c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800713e:	e045      	b.n	80071cc <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 f851 	bl	80071e8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007146:	e041      	b.n	80071cc <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800714c:	2b00      	cmp	r3, #0
 800714e:	d039      	beq.n	80071c4 <I2C_ITError+0x1bc>
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	2b12      	cmp	r3, #18
 8007154:	d002      	beq.n	800715c <I2C_ITError+0x154>
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	2b22      	cmp	r3, #34	@ 0x22
 800715a:	d133      	bne.n	80071c4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007166:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800716a:	d107      	bne.n	800717c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800717a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007180:	4618      	mov	r0, r3
 8007182:	f7fc fc07 	bl	8003994 <HAL_DMA_GetState>
 8007186:	4603      	mov	r3, r0
 8007188:	2b01      	cmp	r3, #1
 800718a:	d017      	beq.n	80071bc <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007190:	4a14      	ldr	r2, [pc, #80]	@ (80071e4 <I2C_ITError+0x1dc>)
 8007192:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7fc fa4b 	bl	800363c <HAL_DMA_Abort_IT>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d011      	beq.n	80071d0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80071b6:	4610      	mov	r0, r2
 80071b8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80071ba:	e009      	b.n	80071d0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 f813 	bl	80071e8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80071c2:	e005      	b.n	80071d0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 f80f 	bl	80071e8 <I2C_TreatErrorCallback>
  }
}
 80071ca:	e002      	b.n	80071d2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80071cc:	bf00      	nop
 80071ce:	e000      	b.n	80071d2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80071d0:	bf00      	nop
}
 80071d2:	bf00      	nop
 80071d4:	3710      	adds	r7, #16
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	ffff0000 	.word	0xffff0000
 80071e0:	0800604b 	.word	0x0800604b
 80071e4:	080074c1 	.word	0x080074c1

080071e8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	2b60      	cmp	r3, #96	@ 0x60
 80071fa:	d10e      	bne.n	800721a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2220      	movs	r2, #32
 8007200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f7fe fdcd 	bl	8005db2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007218:	e009      	b.n	800722e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f7fe fdb8 	bl	8005d9e <HAL_I2C_ErrorCallback>
}
 800722e:	bf00      	nop
 8007230:	3708      	adds	r7, #8
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007236:	b480      	push	{r7}
 8007238:	b083      	sub	sp, #12
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	699b      	ldr	r3, [r3, #24]
 8007244:	f003 0302 	and.w	r3, r3, #2
 8007248:	2b02      	cmp	r3, #2
 800724a:	d103      	bne.n	8007254 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2200      	movs	r2, #0
 8007252:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	699b      	ldr	r3, [r3, #24]
 800725a:	f003 0301 	and.w	r3, r3, #1
 800725e:	2b01      	cmp	r3, #1
 8007260:	d007      	beq.n	8007272 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	699a      	ldr	r2, [r3, #24]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f042 0201 	orr.w	r2, r2, #1
 8007270:	619a      	str	r2, [r3, #24]
  }
}
 8007272:	bf00      	nop
 8007274:	370c      	adds	r7, #12
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr

0800727e <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b084      	sub	sp, #16
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800728a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800729a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d104      	bne.n	80072b0 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80072a6:	2120      	movs	r1, #32
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f000 f959 	bl	8007560 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80072ae:	e02d      	b.n	800730c <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80072b8:	441a      	add	r2, r3
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	2bff      	cmp	r3, #255	@ 0xff
 80072c6:	d903      	bls.n	80072d0 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	22ff      	movs	r2, #255	@ 0xff
 80072cc:	851a      	strh	r2, [r3, #40]	@ 0x28
 80072ce:	e004      	b.n	80072da <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e2:	4619      	mov	r1, r3
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	3328      	adds	r3, #40	@ 0x28
 80072ea:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80072f0:	f7fc f8d4 	bl	800349c <HAL_DMA_Start_IT>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d004      	beq.n	8007304 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80072fa:	2110      	movs	r1, #16
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f7ff fe83 	bl	8007008 <I2C_ITError>
}
 8007302:	e003      	b.n	800730c <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007304:	2140      	movs	r1, #64	@ 0x40
 8007306:	68f8      	ldr	r0, [r7, #12]
 8007308:	f000 f92a 	bl	8007560 <I2C_Enable_IRQ>
}
 800730c:	bf00      	nop
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007320:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007326:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800732e:	d002      	beq.n	8007336 <I2C_DMASlaveTransmitCplt+0x22>
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d10a      	bne.n	800734c <I2C_DMASlaveTransmitCplt+0x38>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007344:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f7ff fb76 	bl	8006a38 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 800734c:	bf00      	nop
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007360:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007370:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007376:	b29b      	uxth	r3, r3
 8007378:	2b00      	cmp	r3, #0
 800737a:	d104      	bne.n	8007386 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800737c:	2120      	movs	r1, #32
 800737e:	68f8      	ldr	r0, [r7, #12]
 8007380:	f000 f8ee 	bl	8007560 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8007384:	e03b      	b.n	80073fe <I2C_DMAMasterReceiveCplt+0xaa>
    hi2c->pBuffPtr += hi2c->XferSize;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800738e:	441a      	add	r2, r3
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007398:	b29b      	uxth	r3, r3
 800739a:	2bff      	cmp	r3, #255	@ 0xff
 800739c:	d911      	bls.n	80073c2 <I2C_DMAMasterReceiveCplt+0x6e>
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	699b      	ldr	r3, [r3, #24]
 80073a4:	0c1b      	lsrs	r3, r3, #16
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	f003 0301 	and.w	r3, r3, #1
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d103      	bne.n	80073ba <I2C_DMAMasterReceiveCplt+0x66>
        hi2c->XferSize = 1U;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2201      	movs	r2, #1
 80073b6:	851a      	strh	r2, [r3, #40]	@ 0x28
 80073b8:	e008      	b.n	80073cc <I2C_DMAMasterReceiveCplt+0x78>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	22ff      	movs	r2, #255	@ 0xff
 80073be:	851a      	strh	r2, [r3, #40]	@ 0x28
 80073c0:	e004      	b.n	80073cc <I2C_DMAMasterReceiveCplt+0x78>
      hi2c->XferSize = hi2c->XferCount;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	3324      	adds	r3, #36	@ 0x24
 80073d6:	4619      	mov	r1, r3
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073dc:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80073e2:	f7fc f85b 	bl	800349c <HAL_DMA_Start_IT>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d004      	beq.n	80073f6 <I2C_DMAMasterReceiveCplt+0xa2>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80073ec:	2110      	movs	r1, #16
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f7ff fe0a 	bl	8007008 <I2C_ITError>
}
 80073f4:	e003      	b.n	80073fe <I2C_DMAMasterReceiveCplt+0xaa>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80073f6:	2140      	movs	r1, #64	@ 0x40
 80073f8:	68f8      	ldr	r0, [r7, #12]
 80073fa:	f000 f8b1 	bl	8007560 <I2C_Enable_IRQ>
}
 80073fe:	bf00      	nop
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b084      	sub	sp, #16
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007412:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007418:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d10e      	bne.n	8007444 <I2C_DMASlaveReceiveCplt+0x3e>
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800742c:	d00a      	beq.n	8007444 <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800743c:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f7ff fafa 	bl	8006a38 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8007444:	bf00      	nop
 8007446:	3710      	adds	r7, #16
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8007454:	2300      	movs	r3, #0
 8007456:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800745c:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007462:	2b00      	cmp	r3, #0
 8007464:	d007      	beq.n	8007476 <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d101      	bne.n	8007476 <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 8007472:	2301      	movs	r3, #1
 8007474:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800747a:	2b00      	cmp	r3, #0
 800747c:	d007      	beq.n	800748e <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d101      	bne.n	800748e <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 800748a:	2301      	movs	r3, #1
 800748c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f7fc fa8e 	bl	80039b0 <HAL_DMA_GetError>
 8007494:	4603      	mov	r3, r0
 8007496:	2b02      	cmp	r3, #2
 8007498:	d00e      	beq.n	80074b8 <I2C_DMAError+0x6c>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00b      	beq.n	80074b8 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	685a      	ldr	r2, [r3, #4]
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80074ae:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80074b0:	2110      	movs	r1, #16
 80074b2:	68b8      	ldr	r0, [r7, #8]
 80074b4:	f7ff fda8 	bl	8007008 <I2C_ITError>
  }
}
 80074b8:	bf00      	nop
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074cc:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d003      	beq.n	80074de <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074da:	2200      	movs	r2, #0
 80074dc:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d003      	beq.n	80074ee <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074ea:	2200      	movs	r2, #0
 80074ec:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	f7ff fe7a 	bl	80071e8 <I2C_TreatErrorCallback>
}
 80074f4:	bf00      	nop
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b087      	sub	sp, #28
 8007500:	af00      	add	r7, sp, #0
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	607b      	str	r3, [r7, #4]
 8007506:	460b      	mov	r3, r1
 8007508:	817b      	strh	r3, [r7, #10]
 800750a:	4613      	mov	r3, r2
 800750c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800750e:	897b      	ldrh	r3, [r7, #10]
 8007510:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007514:	7a7b      	ldrb	r3, [r7, #9]
 8007516:	041b      	lsls	r3, r3, #16
 8007518:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800751c:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007522:	6a3b      	ldr	r3, [r7, #32]
 8007524:	4313      	orrs	r3, r2
 8007526:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800752a:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	685a      	ldr	r2, [r3, #4]
 8007532:	6a3b      	ldr	r3, [r7, #32]
 8007534:	0d5b      	lsrs	r3, r3, #21
 8007536:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800753a:	4b08      	ldr	r3, [pc, #32]	@ (800755c <I2C_TransferConfig+0x60>)
 800753c:	430b      	orrs	r3, r1
 800753e:	43db      	mvns	r3, r3
 8007540:	ea02 0103 	and.w	r1, r2, r3
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	697a      	ldr	r2, [r7, #20]
 800754a:	430a      	orrs	r2, r1
 800754c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800754e:	bf00      	nop
 8007550:	371c      	adds	r7, #28
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	03ff63ff 	.word	0x03ff63ff

08007560 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007560:	b480      	push	{r7}
 8007562:	b085      	sub	sp, #20
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	460b      	mov	r3, r1
 800756a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800756c:	2300      	movs	r3, #0
 800756e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007574:	4a39      	ldr	r2, [pc, #228]	@ (800765c <I2C_Enable_IRQ+0xfc>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d032      	beq.n	80075e0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800757e:	4a38      	ldr	r2, [pc, #224]	@ (8007660 <I2C_Enable_IRQ+0x100>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d02d      	beq.n	80075e0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007588:	4a36      	ldr	r2, [pc, #216]	@ (8007664 <I2C_Enable_IRQ+0x104>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d028      	beq.n	80075e0 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800758e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007592:	2b00      	cmp	r3, #0
 8007594:	da03      	bge.n	800759e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800759c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800759e:	887b      	ldrh	r3, [r7, #2]
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d003      	beq.n	80075b0 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80075ae:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80075b0:	887b      	ldrh	r3, [r7, #2]
 80075b2:	f003 0302 	and.w	r3, r3, #2
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d003      	beq.n	80075c2 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80075c0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80075c2:	887b      	ldrh	r3, [r7, #2]
 80075c4:	2b10      	cmp	r3, #16
 80075c6:	d103      	bne.n	80075d0 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80075ce:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80075d0:	887b      	ldrh	r3, [r7, #2]
 80075d2:	2b20      	cmp	r3, #32
 80075d4:	d133      	bne.n	800763e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f043 0320 	orr.w	r3, r3, #32
 80075dc:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80075de:	e02e      	b.n	800763e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80075e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	da03      	bge.n	80075f0 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80075ee:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80075f0:	887b      	ldrh	r3, [r7, #2]
 80075f2:	f003 0301 	and.w	r3, r3, #1
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d003      	beq.n	8007602 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8007600:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007602:	887b      	ldrh	r3, [r7, #2]
 8007604:	f003 0302 	and.w	r3, r3, #2
 8007608:	2b00      	cmp	r3, #0
 800760a:	d003      	beq.n	8007614 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8007612:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007614:	887b      	ldrh	r3, [r7, #2]
 8007616:	2b10      	cmp	r3, #16
 8007618:	d103      	bne.n	8007622 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007620:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007622:	887b      	ldrh	r3, [r7, #2]
 8007624:	2b20      	cmp	r3, #32
 8007626:	d103      	bne.n	8007630 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800762e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007630:	887b      	ldrh	r3, [r7, #2]
 8007632:	2b40      	cmp	r3, #64	@ 0x40
 8007634:	d103      	bne.n	800763e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800763c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	6819      	ldr	r1, [r3, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	430a      	orrs	r2, r1
 800764c:	601a      	str	r2, [r3, #0]
}
 800764e:	bf00      	nop
 8007650:	3714      	adds	r7, #20
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop
 800765c:	08006253 	.word	0x08006253
 8007660:	080066f5 	.word	0x080066f5
 8007664:	08006459 	.word	0x08006459

08007668 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	460b      	mov	r3, r1
 8007672:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007674:	2300      	movs	r3, #0
 8007676:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007678:	887b      	ldrh	r3, [r7, #2]
 800767a:	f003 0301 	and.w	r3, r3, #1
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00f      	beq.n	80076a2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8007688:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007690:	b2db      	uxtb	r3, r3
 8007692:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007696:	2b28      	cmp	r3, #40	@ 0x28
 8007698:	d003      	beq.n	80076a2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80076a0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80076a2:	887b      	ldrh	r3, [r7, #2]
 80076a4:	f003 0302 	and.w	r3, r3, #2
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00f      	beq.n	80076cc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80076b2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80076c0:	2b28      	cmp	r3, #40	@ 0x28
 80076c2:	d003      	beq.n	80076cc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80076ca:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80076cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	da03      	bge.n	80076dc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80076da:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80076dc:	887b      	ldrh	r3, [r7, #2]
 80076de:	2b10      	cmp	r3, #16
 80076e0:	d103      	bne.n	80076ea <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80076e8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80076ea:	887b      	ldrh	r3, [r7, #2]
 80076ec:	2b20      	cmp	r3, #32
 80076ee:	d103      	bne.n	80076f8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f043 0320 	orr.w	r3, r3, #32
 80076f6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80076f8:	887b      	ldrh	r3, [r7, #2]
 80076fa:	2b40      	cmp	r3, #64	@ 0x40
 80076fc:	d103      	bne.n	8007706 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007704:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	6819      	ldr	r1, [r3, #0]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	43da      	mvns	r2, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	400a      	ands	r2, r1
 8007716:	601a      	str	r2, [r3, #0]
}
 8007718:	bf00      	nop
 800771a:	3714      	adds	r7, #20
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007734:	b2db      	uxtb	r3, r3
 8007736:	2b20      	cmp	r3, #32
 8007738:	d138      	bne.n	80077ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007740:	2b01      	cmp	r3, #1
 8007742:	d101      	bne.n	8007748 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007744:	2302      	movs	r3, #2
 8007746:	e032      	b.n	80077ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2224      	movs	r2, #36	@ 0x24
 8007754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f022 0201 	bic.w	r2, r2, #1
 8007766:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007776:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	6819      	ldr	r1, [r3, #0]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	683a      	ldr	r2, [r7, #0]
 8007784:	430a      	orrs	r2, r1
 8007786:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f042 0201 	orr.w	r2, r2, #1
 8007796:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2220      	movs	r2, #32
 800779c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80077a8:	2300      	movs	r3, #0
 80077aa:	e000      	b.n	80077ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80077ac:	2302      	movs	r3, #2
  }
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	370c      	adds	r7, #12
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr

080077ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80077ba:	b480      	push	{r7}
 80077bc:	b085      	sub	sp, #20
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
 80077c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	2b20      	cmp	r3, #32
 80077ce:	d139      	bne.n	8007844 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d101      	bne.n	80077de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80077da:	2302      	movs	r3, #2
 80077dc:	e033      	b.n	8007846 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2201      	movs	r2, #1
 80077e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2224      	movs	r2, #36	@ 0x24
 80077ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f022 0201 	bic.w	r2, r2, #1
 80077fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800780c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	021b      	lsls	r3, r3, #8
 8007812:	68fa      	ldr	r2, [r7, #12]
 8007814:	4313      	orrs	r3, r2
 8007816:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f042 0201 	orr.w	r2, r2, #1
 800782e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2220      	movs	r2, #32
 8007834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007840:	2300      	movs	r3, #0
 8007842:	e000      	b.n	8007846 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007844:	2302      	movs	r3, #2
  }
}
 8007846:	4618      	mov	r0, r3
 8007848:	3714      	adds	r7, #20
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr
	...

08007854 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800785a:	2300      	movs	r3, #0
 800785c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800785e:	4b23      	ldr	r3, [pc, #140]	@ (80078ec <HAL_PWREx_EnableOverDrive+0x98>)
 8007860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007862:	4a22      	ldr	r2, [pc, #136]	@ (80078ec <HAL_PWREx_EnableOverDrive+0x98>)
 8007864:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007868:	6413      	str	r3, [r2, #64]	@ 0x40
 800786a:	4b20      	ldr	r3, [pc, #128]	@ (80078ec <HAL_PWREx_EnableOverDrive+0x98>)
 800786c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800786e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007872:	603b      	str	r3, [r7, #0]
 8007874:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007876:	4b1e      	ldr	r3, [pc, #120]	@ (80078f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a1d      	ldr	r2, [pc, #116]	@ (80078f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800787c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007880:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007882:	f7fa fdbb 	bl	80023fc <HAL_GetTick>
 8007886:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007888:	e009      	b.n	800789e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800788a:	f7fa fdb7 	bl	80023fc <HAL_GetTick>
 800788e:	4602      	mov	r2, r0
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	1ad3      	subs	r3, r2, r3
 8007894:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007898:	d901      	bls.n	800789e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800789a:	2303      	movs	r3, #3
 800789c:	e022      	b.n	80078e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800789e:	4b14      	ldr	r3, [pc, #80]	@ (80078f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80078a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078aa:	d1ee      	bne.n	800788a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80078ac:	4b10      	ldr	r3, [pc, #64]	@ (80078f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a0f      	ldr	r2, [pc, #60]	@ (80078f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80078b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80078b8:	f7fa fda0 	bl	80023fc <HAL_GetTick>
 80078bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80078be:	e009      	b.n	80078d4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80078c0:	f7fa fd9c 	bl	80023fc <HAL_GetTick>
 80078c4:	4602      	mov	r2, r0
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	1ad3      	subs	r3, r2, r3
 80078ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80078ce:	d901      	bls.n	80078d4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80078d0:	2303      	movs	r3, #3
 80078d2:	e007      	b.n	80078e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80078d4:	4b06      	ldr	r3, [pc, #24]	@ (80078f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078e0:	d1ee      	bne.n	80078c0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80078e2:	2300      	movs	r3, #0
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3708      	adds	r7, #8
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	40023800 	.word	0x40023800
 80078f0:	40007000 	.word	0x40007000

080078f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b086      	sub	sp, #24
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80078fc:	2300      	movs	r3, #0
 80078fe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d101      	bne.n	800790a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e291      	b.n	8007e2e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 0301 	and.w	r3, r3, #1
 8007912:	2b00      	cmp	r3, #0
 8007914:	f000 8087 	beq.w	8007a26 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007918:	4b96      	ldr	r3, [pc, #600]	@ (8007b74 <HAL_RCC_OscConfig+0x280>)
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	f003 030c 	and.w	r3, r3, #12
 8007920:	2b04      	cmp	r3, #4
 8007922:	d00c      	beq.n	800793e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007924:	4b93      	ldr	r3, [pc, #588]	@ (8007b74 <HAL_RCC_OscConfig+0x280>)
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	f003 030c 	and.w	r3, r3, #12
 800792c:	2b08      	cmp	r3, #8
 800792e:	d112      	bne.n	8007956 <HAL_RCC_OscConfig+0x62>
 8007930:	4b90      	ldr	r3, [pc, #576]	@ (8007b74 <HAL_RCC_OscConfig+0x280>)
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007938:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800793c:	d10b      	bne.n	8007956 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800793e:	4b8d      	ldr	r3, [pc, #564]	@ (8007b74 <HAL_RCC_OscConfig+0x280>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007946:	2b00      	cmp	r3, #0
 8007948:	d06c      	beq.n	8007a24 <HAL_RCC_OscConfig+0x130>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d168      	bne.n	8007a24 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e26b      	b.n	8007e2e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800795e:	d106      	bne.n	800796e <HAL_RCC_OscConfig+0x7a>
 8007960:	4b84      	ldr	r3, [pc, #528]	@ (8007b74 <HAL_RCC_OscConfig+0x280>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a83      	ldr	r2, [pc, #524]	@ (8007b74 <HAL_RCC_OscConfig+0x280>)
 8007966:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800796a:	6013      	str	r3, [r2, #0]
 800796c:	e02e      	b.n	80079cc <HAL_RCC_OscConfig+0xd8>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d10c      	bne.n	8007990 <HAL_RCC_OscConfig+0x9c>
 8007976:	4b7f      	ldr	r3, [pc, #508]	@ (8007b74 <HAL_RCC_OscConfig+0x280>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a7e      	ldr	r2, [pc, #504]	@ (8007b74 <HAL_RCC_OscConfig+0x280>)
 800797c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007980:	6013      	str	r3, [r2, #0]
 8007982:	4b7c      	ldr	r3, [pc, #496]	@ (8007b74 <HAL_RCC_OscConfig+0x280>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a7b      	ldr	r2, [pc, #492]	@ (8007b74 <HAL_RCC_OscConfig+0x280>)
 8007988:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800798c:	6013      	str	r3, [r2, #0]
 800798e:	e01d      	b.n	80079cc <HAL_RCC_OscConfig+0xd8>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007998:	d10c      	bne.n	80079b4 <HAL_RCC_OscConfig+0xc0>
 800799a:	4b76      	ldr	r3, [pc, #472]	@ (8007b74 <HAL_RCC_OscConfig+0x280>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a75      	ldr	r2, [pc, #468]	@ (8007b74 <HAL_RCC_OscConfig+0x280>)
 80079a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80079a4:	6013      	str	r3, [r2, #0]
 80079a6:	4b73      	ldr	r3, [pc, #460]	@ (8007b74 <HAL_RCC_OscConfig+0x280>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a72      	ldr	r2, [pc, #456]	@ (8007b74 <HAL_RCC_OscConfig+0x280>)
 80079ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079b0:	6013      	str	r3, [r2, #0]
 80079b2:	e00b      	b.n	80079cc <HAL_RCC_OscConfig+0xd8>
 80079b4:	4b6f      	ldr	r3, [pc, #444]	@ (8007b74 <HAL_RCC_OscConfig+0x280>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a6e      	ldr	r2, [pc, #440]	@ (8007b74 <HAL_RCC_OscConfig+0x280>)
 80079ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079be:	6013      	str	r3, [r2, #0]
 80079c0:	4b6c      	ldr	r3, [pc, #432]	@ (8007b74 <HAL_RCC_OscConfig+0x280>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a6b      	ldr	r2, [pc, #428]	@ (8007b74 <HAL_RCC_OscConfig+0x280>)
 80079c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80079ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d013      	beq.n	80079fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079d4:	f7fa fd12 	bl	80023fc <HAL_GetTick>
 80079d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079da:	e008      	b.n	80079ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079dc:	f7fa fd0e 	bl	80023fc <HAL_GetTick>
 80079e0:	4602      	mov	r2, r0
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	1ad3      	subs	r3, r2, r3
 80079e6:	2b64      	cmp	r3, #100	@ 0x64
 80079e8:	d901      	bls.n	80079ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80079ea:	2303      	movs	r3, #3
 80079ec:	e21f      	b.n	8007e2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079ee:	4b61      	ldr	r3, [pc, #388]	@ (8007b74 <HAL_RCC_OscConfig+0x280>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d0f0      	beq.n	80079dc <HAL_RCC_OscConfig+0xe8>
 80079fa:	e014      	b.n	8007a26 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079fc:	f7fa fcfe 	bl	80023fc <HAL_GetTick>
 8007a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a02:	e008      	b.n	8007a16 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a04:	f7fa fcfa 	bl	80023fc <HAL_GetTick>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	1ad3      	subs	r3, r2, r3
 8007a0e:	2b64      	cmp	r3, #100	@ 0x64
 8007a10:	d901      	bls.n	8007a16 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007a12:	2303      	movs	r3, #3
 8007a14:	e20b      	b.n	8007e2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a16:	4b57      	ldr	r3, [pc, #348]	@ (8007b74 <HAL_RCC_OscConfig+0x280>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1f0      	bne.n	8007a04 <HAL_RCC_OscConfig+0x110>
 8007a22:	e000      	b.n	8007a26 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f003 0302 	and.w	r3, r3, #2
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d069      	beq.n	8007b06 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007a32:	4b50      	ldr	r3, [pc, #320]	@ (8007b74 <HAL_RCC_OscConfig+0x280>)
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	f003 030c 	and.w	r3, r3, #12
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00b      	beq.n	8007a56 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a3e:	4b4d      	ldr	r3, [pc, #308]	@ (8007b74 <HAL_RCC_OscConfig+0x280>)
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	f003 030c 	and.w	r3, r3, #12
 8007a46:	2b08      	cmp	r3, #8
 8007a48:	d11c      	bne.n	8007a84 <HAL_RCC_OscConfig+0x190>
 8007a4a:	4b4a      	ldr	r3, [pc, #296]	@ (8007b74 <HAL_RCC_OscConfig+0x280>)
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d116      	bne.n	8007a84 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a56:	4b47      	ldr	r3, [pc, #284]	@ (8007b74 <HAL_RCC_OscConfig+0x280>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f003 0302 	and.w	r3, r3, #2
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d005      	beq.n	8007a6e <HAL_RCC_OscConfig+0x17a>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d001      	beq.n	8007a6e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e1df      	b.n	8007e2e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a6e:	4b41      	ldr	r3, [pc, #260]	@ (8007b74 <HAL_RCC_OscConfig+0x280>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	00db      	lsls	r3, r3, #3
 8007a7c:	493d      	ldr	r1, [pc, #244]	@ (8007b74 <HAL_RCC_OscConfig+0x280>)
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a82:	e040      	b.n	8007b06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d023      	beq.n	8007ad4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007a8c:	4b39      	ldr	r3, [pc, #228]	@ (8007b74 <HAL_RCC_OscConfig+0x280>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a38      	ldr	r2, [pc, #224]	@ (8007b74 <HAL_RCC_OscConfig+0x280>)
 8007a92:	f043 0301 	orr.w	r3, r3, #1
 8007a96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a98:	f7fa fcb0 	bl	80023fc <HAL_GetTick>
 8007a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a9e:	e008      	b.n	8007ab2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007aa0:	f7fa fcac 	bl	80023fc <HAL_GetTick>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	1ad3      	subs	r3, r2, r3
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	d901      	bls.n	8007ab2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007aae:	2303      	movs	r3, #3
 8007ab0:	e1bd      	b.n	8007e2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ab2:	4b30      	ldr	r3, [pc, #192]	@ (8007b74 <HAL_RCC_OscConfig+0x280>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 0302 	and.w	r3, r3, #2
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d0f0      	beq.n	8007aa0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007abe:	4b2d      	ldr	r3, [pc, #180]	@ (8007b74 <HAL_RCC_OscConfig+0x280>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	00db      	lsls	r3, r3, #3
 8007acc:	4929      	ldr	r1, [pc, #164]	@ (8007b74 <HAL_RCC_OscConfig+0x280>)
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	600b      	str	r3, [r1, #0]
 8007ad2:	e018      	b.n	8007b06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ad4:	4b27      	ldr	r3, [pc, #156]	@ (8007b74 <HAL_RCC_OscConfig+0x280>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a26      	ldr	r2, [pc, #152]	@ (8007b74 <HAL_RCC_OscConfig+0x280>)
 8007ada:	f023 0301 	bic.w	r3, r3, #1
 8007ade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ae0:	f7fa fc8c 	bl	80023fc <HAL_GetTick>
 8007ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ae6:	e008      	b.n	8007afa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ae8:	f7fa fc88 	bl	80023fc <HAL_GetTick>
 8007aec:	4602      	mov	r2, r0
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	d901      	bls.n	8007afa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007af6:	2303      	movs	r3, #3
 8007af8:	e199      	b.n	8007e2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007afa:	4b1e      	ldr	r3, [pc, #120]	@ (8007b74 <HAL_RCC_OscConfig+0x280>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f003 0302 	and.w	r3, r3, #2
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d1f0      	bne.n	8007ae8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 0308 	and.w	r3, r3, #8
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d038      	beq.n	8007b84 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	695b      	ldr	r3, [r3, #20]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d019      	beq.n	8007b4e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b1a:	4b16      	ldr	r3, [pc, #88]	@ (8007b74 <HAL_RCC_OscConfig+0x280>)
 8007b1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b1e:	4a15      	ldr	r2, [pc, #84]	@ (8007b74 <HAL_RCC_OscConfig+0x280>)
 8007b20:	f043 0301 	orr.w	r3, r3, #1
 8007b24:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b26:	f7fa fc69 	bl	80023fc <HAL_GetTick>
 8007b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b2c:	e008      	b.n	8007b40 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b2e:	f7fa fc65 	bl	80023fc <HAL_GetTick>
 8007b32:	4602      	mov	r2, r0
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	1ad3      	subs	r3, r2, r3
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d901      	bls.n	8007b40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007b3c:	2303      	movs	r3, #3
 8007b3e:	e176      	b.n	8007e2e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b40:	4b0c      	ldr	r3, [pc, #48]	@ (8007b74 <HAL_RCC_OscConfig+0x280>)
 8007b42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b44:	f003 0302 	and.w	r3, r3, #2
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d0f0      	beq.n	8007b2e <HAL_RCC_OscConfig+0x23a>
 8007b4c:	e01a      	b.n	8007b84 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b4e:	4b09      	ldr	r3, [pc, #36]	@ (8007b74 <HAL_RCC_OscConfig+0x280>)
 8007b50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b52:	4a08      	ldr	r2, [pc, #32]	@ (8007b74 <HAL_RCC_OscConfig+0x280>)
 8007b54:	f023 0301 	bic.w	r3, r3, #1
 8007b58:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b5a:	f7fa fc4f 	bl	80023fc <HAL_GetTick>
 8007b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b60:	e00a      	b.n	8007b78 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b62:	f7fa fc4b 	bl	80023fc <HAL_GetTick>
 8007b66:	4602      	mov	r2, r0
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	1ad3      	subs	r3, r2, r3
 8007b6c:	2b02      	cmp	r3, #2
 8007b6e:	d903      	bls.n	8007b78 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007b70:	2303      	movs	r3, #3
 8007b72:	e15c      	b.n	8007e2e <HAL_RCC_OscConfig+0x53a>
 8007b74:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b78:	4b91      	ldr	r3, [pc, #580]	@ (8007dc0 <HAL_RCC_OscConfig+0x4cc>)
 8007b7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b7c:	f003 0302 	and.w	r3, r3, #2
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1ee      	bne.n	8007b62 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f003 0304 	and.w	r3, r3, #4
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f000 80a4 	beq.w	8007cda <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b92:	4b8b      	ldr	r3, [pc, #556]	@ (8007dc0 <HAL_RCC_OscConfig+0x4cc>)
 8007b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d10d      	bne.n	8007bba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b9e:	4b88      	ldr	r3, [pc, #544]	@ (8007dc0 <HAL_RCC_OscConfig+0x4cc>)
 8007ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ba2:	4a87      	ldr	r2, [pc, #540]	@ (8007dc0 <HAL_RCC_OscConfig+0x4cc>)
 8007ba4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ba8:	6413      	str	r3, [r2, #64]	@ 0x40
 8007baa:	4b85      	ldr	r3, [pc, #532]	@ (8007dc0 <HAL_RCC_OscConfig+0x4cc>)
 8007bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007bb2:	60bb      	str	r3, [r7, #8]
 8007bb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007bba:	4b82      	ldr	r3, [pc, #520]	@ (8007dc4 <HAL_RCC_OscConfig+0x4d0>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d118      	bne.n	8007bf8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007bc6:	4b7f      	ldr	r3, [pc, #508]	@ (8007dc4 <HAL_RCC_OscConfig+0x4d0>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a7e      	ldr	r2, [pc, #504]	@ (8007dc4 <HAL_RCC_OscConfig+0x4d0>)
 8007bcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007bd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007bd2:	f7fa fc13 	bl	80023fc <HAL_GetTick>
 8007bd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007bd8:	e008      	b.n	8007bec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bda:	f7fa fc0f 	bl	80023fc <HAL_GetTick>
 8007bde:	4602      	mov	r2, r0
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	1ad3      	subs	r3, r2, r3
 8007be4:	2b64      	cmp	r3, #100	@ 0x64
 8007be6:	d901      	bls.n	8007bec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007be8:	2303      	movs	r3, #3
 8007bea:	e120      	b.n	8007e2e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007bec:	4b75      	ldr	r3, [pc, #468]	@ (8007dc4 <HAL_RCC_OscConfig+0x4d0>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d0f0      	beq.n	8007bda <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d106      	bne.n	8007c0e <HAL_RCC_OscConfig+0x31a>
 8007c00:	4b6f      	ldr	r3, [pc, #444]	@ (8007dc0 <HAL_RCC_OscConfig+0x4cc>)
 8007c02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c04:	4a6e      	ldr	r2, [pc, #440]	@ (8007dc0 <HAL_RCC_OscConfig+0x4cc>)
 8007c06:	f043 0301 	orr.w	r3, r3, #1
 8007c0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c0c:	e02d      	b.n	8007c6a <HAL_RCC_OscConfig+0x376>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d10c      	bne.n	8007c30 <HAL_RCC_OscConfig+0x33c>
 8007c16:	4b6a      	ldr	r3, [pc, #424]	@ (8007dc0 <HAL_RCC_OscConfig+0x4cc>)
 8007c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c1a:	4a69      	ldr	r2, [pc, #420]	@ (8007dc0 <HAL_RCC_OscConfig+0x4cc>)
 8007c1c:	f023 0301 	bic.w	r3, r3, #1
 8007c20:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c22:	4b67      	ldr	r3, [pc, #412]	@ (8007dc0 <HAL_RCC_OscConfig+0x4cc>)
 8007c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c26:	4a66      	ldr	r2, [pc, #408]	@ (8007dc0 <HAL_RCC_OscConfig+0x4cc>)
 8007c28:	f023 0304 	bic.w	r3, r3, #4
 8007c2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c2e:	e01c      	b.n	8007c6a <HAL_RCC_OscConfig+0x376>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	2b05      	cmp	r3, #5
 8007c36:	d10c      	bne.n	8007c52 <HAL_RCC_OscConfig+0x35e>
 8007c38:	4b61      	ldr	r3, [pc, #388]	@ (8007dc0 <HAL_RCC_OscConfig+0x4cc>)
 8007c3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c3c:	4a60      	ldr	r2, [pc, #384]	@ (8007dc0 <HAL_RCC_OscConfig+0x4cc>)
 8007c3e:	f043 0304 	orr.w	r3, r3, #4
 8007c42:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c44:	4b5e      	ldr	r3, [pc, #376]	@ (8007dc0 <HAL_RCC_OscConfig+0x4cc>)
 8007c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c48:	4a5d      	ldr	r2, [pc, #372]	@ (8007dc0 <HAL_RCC_OscConfig+0x4cc>)
 8007c4a:	f043 0301 	orr.w	r3, r3, #1
 8007c4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c50:	e00b      	b.n	8007c6a <HAL_RCC_OscConfig+0x376>
 8007c52:	4b5b      	ldr	r3, [pc, #364]	@ (8007dc0 <HAL_RCC_OscConfig+0x4cc>)
 8007c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c56:	4a5a      	ldr	r2, [pc, #360]	@ (8007dc0 <HAL_RCC_OscConfig+0x4cc>)
 8007c58:	f023 0301 	bic.w	r3, r3, #1
 8007c5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c5e:	4b58      	ldr	r3, [pc, #352]	@ (8007dc0 <HAL_RCC_OscConfig+0x4cc>)
 8007c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c62:	4a57      	ldr	r2, [pc, #348]	@ (8007dc0 <HAL_RCC_OscConfig+0x4cc>)
 8007c64:	f023 0304 	bic.w	r3, r3, #4
 8007c68:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d015      	beq.n	8007c9e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c72:	f7fa fbc3 	bl	80023fc <HAL_GetTick>
 8007c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c78:	e00a      	b.n	8007c90 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c7a:	f7fa fbbf 	bl	80023fc <HAL_GetTick>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	1ad3      	subs	r3, r2, r3
 8007c84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d901      	bls.n	8007c90 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007c8c:	2303      	movs	r3, #3
 8007c8e:	e0ce      	b.n	8007e2e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c90:	4b4b      	ldr	r3, [pc, #300]	@ (8007dc0 <HAL_RCC_OscConfig+0x4cc>)
 8007c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c94:	f003 0302 	and.w	r3, r3, #2
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d0ee      	beq.n	8007c7a <HAL_RCC_OscConfig+0x386>
 8007c9c:	e014      	b.n	8007cc8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c9e:	f7fa fbad 	bl	80023fc <HAL_GetTick>
 8007ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ca4:	e00a      	b.n	8007cbc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ca6:	f7fa fba9 	bl	80023fc <HAL_GetTick>
 8007caa:	4602      	mov	r2, r0
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	1ad3      	subs	r3, r2, r3
 8007cb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d901      	bls.n	8007cbc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	e0b8      	b.n	8007e2e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007cbc:	4b40      	ldr	r3, [pc, #256]	@ (8007dc0 <HAL_RCC_OscConfig+0x4cc>)
 8007cbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cc0:	f003 0302 	and.w	r3, r3, #2
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d1ee      	bne.n	8007ca6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007cc8:	7dfb      	ldrb	r3, [r7, #23]
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d105      	bne.n	8007cda <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007cce:	4b3c      	ldr	r3, [pc, #240]	@ (8007dc0 <HAL_RCC_OscConfig+0x4cc>)
 8007cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cd2:	4a3b      	ldr	r2, [pc, #236]	@ (8007dc0 <HAL_RCC_OscConfig+0x4cc>)
 8007cd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007cd8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	699b      	ldr	r3, [r3, #24]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	f000 80a4 	beq.w	8007e2c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007ce4:	4b36      	ldr	r3, [pc, #216]	@ (8007dc0 <HAL_RCC_OscConfig+0x4cc>)
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	f003 030c 	and.w	r3, r3, #12
 8007cec:	2b08      	cmp	r3, #8
 8007cee:	d06b      	beq.n	8007dc8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	699b      	ldr	r3, [r3, #24]
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	d149      	bne.n	8007d8c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cf8:	4b31      	ldr	r3, [pc, #196]	@ (8007dc0 <HAL_RCC_OscConfig+0x4cc>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a30      	ldr	r2, [pc, #192]	@ (8007dc0 <HAL_RCC_OscConfig+0x4cc>)
 8007cfe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d04:	f7fa fb7a 	bl	80023fc <HAL_GetTick>
 8007d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d0a:	e008      	b.n	8007d1e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d0c:	f7fa fb76 	bl	80023fc <HAL_GetTick>
 8007d10:	4602      	mov	r2, r0
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	1ad3      	subs	r3, r2, r3
 8007d16:	2b02      	cmp	r3, #2
 8007d18:	d901      	bls.n	8007d1e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007d1a:	2303      	movs	r3, #3
 8007d1c:	e087      	b.n	8007e2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d1e:	4b28      	ldr	r3, [pc, #160]	@ (8007dc0 <HAL_RCC_OscConfig+0x4cc>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d1f0      	bne.n	8007d0c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	69da      	ldr	r2, [r3, #28]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a1b      	ldr	r3, [r3, #32]
 8007d32:	431a      	orrs	r2, r3
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d38:	019b      	lsls	r3, r3, #6
 8007d3a:	431a      	orrs	r2, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d40:	085b      	lsrs	r3, r3, #1
 8007d42:	3b01      	subs	r3, #1
 8007d44:	041b      	lsls	r3, r3, #16
 8007d46:	431a      	orrs	r2, r3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d4c:	061b      	lsls	r3, r3, #24
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	4a1b      	ldr	r2, [pc, #108]	@ (8007dc0 <HAL_RCC_OscConfig+0x4cc>)
 8007d52:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007d56:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d58:	4b19      	ldr	r3, [pc, #100]	@ (8007dc0 <HAL_RCC_OscConfig+0x4cc>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a18      	ldr	r2, [pc, #96]	@ (8007dc0 <HAL_RCC_OscConfig+0x4cc>)
 8007d5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007d62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d64:	f7fa fb4a 	bl	80023fc <HAL_GetTick>
 8007d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d6a:	e008      	b.n	8007d7e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d6c:	f7fa fb46 	bl	80023fc <HAL_GetTick>
 8007d70:	4602      	mov	r2, r0
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d901      	bls.n	8007d7e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007d7a:	2303      	movs	r3, #3
 8007d7c:	e057      	b.n	8007e2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d7e:	4b10      	ldr	r3, [pc, #64]	@ (8007dc0 <HAL_RCC_OscConfig+0x4cc>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d0f0      	beq.n	8007d6c <HAL_RCC_OscConfig+0x478>
 8007d8a:	e04f      	b.n	8007e2c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8007dc0 <HAL_RCC_OscConfig+0x4cc>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a0b      	ldr	r2, [pc, #44]	@ (8007dc0 <HAL_RCC_OscConfig+0x4cc>)
 8007d92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d98:	f7fa fb30 	bl	80023fc <HAL_GetTick>
 8007d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d9e:	e008      	b.n	8007db2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007da0:	f7fa fb2c 	bl	80023fc <HAL_GetTick>
 8007da4:	4602      	mov	r2, r0
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	1ad3      	subs	r3, r2, r3
 8007daa:	2b02      	cmp	r3, #2
 8007dac:	d901      	bls.n	8007db2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007dae:	2303      	movs	r3, #3
 8007db0:	e03d      	b.n	8007e2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007db2:	4b03      	ldr	r3, [pc, #12]	@ (8007dc0 <HAL_RCC_OscConfig+0x4cc>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d1f0      	bne.n	8007da0 <HAL_RCC_OscConfig+0x4ac>
 8007dbe:	e035      	b.n	8007e2c <HAL_RCC_OscConfig+0x538>
 8007dc0:	40023800 	.word	0x40023800
 8007dc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007dc8:	4b1b      	ldr	r3, [pc, #108]	@ (8007e38 <HAL_RCC_OscConfig+0x544>)
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	699b      	ldr	r3, [r3, #24]
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d028      	beq.n	8007e28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d121      	bne.n	8007e28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d11a      	bne.n	8007e28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007df8:	4013      	ands	r3, r2
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007dfe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d111      	bne.n	8007e28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e0e:	085b      	lsrs	r3, r3, #1
 8007e10:	3b01      	subs	r3, #1
 8007e12:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d107      	bne.n	8007e28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e22:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d001      	beq.n	8007e2c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e000      	b.n	8007e2e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3718      	adds	r7, #24
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	40023800 	.word	0x40023800

08007e3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007e46:	2300      	movs	r3, #0
 8007e48:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d101      	bne.n	8007e54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	e0d0      	b.n	8007ff6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007e54:	4b6a      	ldr	r3, [pc, #424]	@ (8008000 <HAL_RCC_ClockConfig+0x1c4>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 030f 	and.w	r3, r3, #15
 8007e5c:	683a      	ldr	r2, [r7, #0]
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d910      	bls.n	8007e84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e62:	4b67      	ldr	r3, [pc, #412]	@ (8008000 <HAL_RCC_ClockConfig+0x1c4>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f023 020f 	bic.w	r2, r3, #15
 8007e6a:	4965      	ldr	r1, [pc, #404]	@ (8008000 <HAL_RCC_ClockConfig+0x1c4>)
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e72:	4b63      	ldr	r3, [pc, #396]	@ (8008000 <HAL_RCC_ClockConfig+0x1c4>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f003 030f 	and.w	r3, r3, #15
 8007e7a:	683a      	ldr	r2, [r7, #0]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d001      	beq.n	8007e84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	e0b8      	b.n	8007ff6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f003 0302 	and.w	r3, r3, #2
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d020      	beq.n	8007ed2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f003 0304 	and.w	r3, r3, #4
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d005      	beq.n	8007ea8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007e9c:	4b59      	ldr	r3, [pc, #356]	@ (8008004 <HAL_RCC_ClockConfig+0x1c8>)
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	4a58      	ldr	r2, [pc, #352]	@ (8008004 <HAL_RCC_ClockConfig+0x1c8>)
 8007ea2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007ea6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 0308 	and.w	r3, r3, #8
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d005      	beq.n	8007ec0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007eb4:	4b53      	ldr	r3, [pc, #332]	@ (8008004 <HAL_RCC_ClockConfig+0x1c8>)
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	4a52      	ldr	r2, [pc, #328]	@ (8008004 <HAL_RCC_ClockConfig+0x1c8>)
 8007eba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007ebe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ec0:	4b50      	ldr	r3, [pc, #320]	@ (8008004 <HAL_RCC_ClockConfig+0x1c8>)
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	494d      	ldr	r1, [pc, #308]	@ (8008004 <HAL_RCC_ClockConfig+0x1c8>)
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f003 0301 	and.w	r3, r3, #1
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d040      	beq.n	8007f60 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d107      	bne.n	8007ef6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ee6:	4b47      	ldr	r3, [pc, #284]	@ (8008004 <HAL_RCC_ClockConfig+0x1c8>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d115      	bne.n	8007f1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e07f      	b.n	8007ff6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	2b02      	cmp	r3, #2
 8007efc:	d107      	bne.n	8007f0e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007efe:	4b41      	ldr	r3, [pc, #260]	@ (8008004 <HAL_RCC_ClockConfig+0x1c8>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d109      	bne.n	8007f1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e073      	b.n	8007ff6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f0e:	4b3d      	ldr	r3, [pc, #244]	@ (8008004 <HAL_RCC_ClockConfig+0x1c8>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f003 0302 	and.w	r3, r3, #2
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d101      	bne.n	8007f1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e06b      	b.n	8007ff6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f1e:	4b39      	ldr	r3, [pc, #228]	@ (8008004 <HAL_RCC_ClockConfig+0x1c8>)
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	f023 0203 	bic.w	r2, r3, #3
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	4936      	ldr	r1, [pc, #216]	@ (8008004 <HAL_RCC_ClockConfig+0x1c8>)
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f30:	f7fa fa64 	bl	80023fc <HAL_GetTick>
 8007f34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f36:	e00a      	b.n	8007f4e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f38:	f7fa fa60 	bl	80023fc <HAL_GetTick>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d901      	bls.n	8007f4e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007f4a:	2303      	movs	r3, #3
 8007f4c:	e053      	b.n	8007ff6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f4e:	4b2d      	ldr	r3, [pc, #180]	@ (8008004 <HAL_RCC_ClockConfig+0x1c8>)
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	f003 020c 	and.w	r2, r3, #12
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d1eb      	bne.n	8007f38 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007f60:	4b27      	ldr	r3, [pc, #156]	@ (8008000 <HAL_RCC_ClockConfig+0x1c4>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f003 030f 	and.w	r3, r3, #15
 8007f68:	683a      	ldr	r2, [r7, #0]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d210      	bcs.n	8007f90 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f6e:	4b24      	ldr	r3, [pc, #144]	@ (8008000 <HAL_RCC_ClockConfig+0x1c4>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f023 020f 	bic.w	r2, r3, #15
 8007f76:	4922      	ldr	r1, [pc, #136]	@ (8008000 <HAL_RCC_ClockConfig+0x1c4>)
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f7e:	4b20      	ldr	r3, [pc, #128]	@ (8008000 <HAL_RCC_ClockConfig+0x1c4>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f003 030f 	and.w	r3, r3, #15
 8007f86:	683a      	ldr	r2, [r7, #0]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d001      	beq.n	8007f90 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e032      	b.n	8007ff6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f003 0304 	and.w	r3, r3, #4
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d008      	beq.n	8007fae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f9c:	4b19      	ldr	r3, [pc, #100]	@ (8008004 <HAL_RCC_ClockConfig+0x1c8>)
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	4916      	ldr	r1, [pc, #88]	@ (8008004 <HAL_RCC_ClockConfig+0x1c8>)
 8007faa:	4313      	orrs	r3, r2
 8007fac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f003 0308 	and.w	r3, r3, #8
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d009      	beq.n	8007fce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007fba:	4b12      	ldr	r3, [pc, #72]	@ (8008004 <HAL_RCC_ClockConfig+0x1c8>)
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	691b      	ldr	r3, [r3, #16]
 8007fc6:	00db      	lsls	r3, r3, #3
 8007fc8:	490e      	ldr	r1, [pc, #56]	@ (8008004 <HAL_RCC_ClockConfig+0x1c8>)
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007fce:	f000 f821 	bl	8008014 <HAL_RCC_GetSysClockFreq>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8008004 <HAL_RCC_ClockConfig+0x1c8>)
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	091b      	lsrs	r3, r3, #4
 8007fda:	f003 030f 	and.w	r3, r3, #15
 8007fde:	490a      	ldr	r1, [pc, #40]	@ (8008008 <HAL_RCC_ClockConfig+0x1cc>)
 8007fe0:	5ccb      	ldrb	r3, [r1, r3]
 8007fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8007fe6:	4a09      	ldr	r2, [pc, #36]	@ (800800c <HAL_RCC_ClockConfig+0x1d0>)
 8007fe8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007fea:	4b09      	ldr	r3, [pc, #36]	@ (8008010 <HAL_RCC_ClockConfig+0x1d4>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7f9 fb5a 	bl	80016a8 <HAL_InitTick>

  return HAL_OK;
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3710      	adds	r7, #16
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	40023c00 	.word	0x40023c00
 8008004:	40023800 	.word	0x40023800
 8008008:	080270b4 	.word	0x080270b4
 800800c:	20000000 	.word	0x20000000
 8008010:	20000004 	.word	0x20000004

08008014 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008018:	b090      	sub	sp, #64	@ 0x40
 800801a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800801c:	2300      	movs	r3, #0
 800801e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008020:	2300      	movs	r3, #0
 8008022:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008024:	2300      	movs	r3, #0
 8008026:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8008028:	2300      	movs	r3, #0
 800802a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800802c:	4b59      	ldr	r3, [pc, #356]	@ (8008194 <HAL_RCC_GetSysClockFreq+0x180>)
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	f003 030c 	and.w	r3, r3, #12
 8008034:	2b08      	cmp	r3, #8
 8008036:	d00d      	beq.n	8008054 <HAL_RCC_GetSysClockFreq+0x40>
 8008038:	2b08      	cmp	r3, #8
 800803a:	f200 80a1 	bhi.w	8008180 <HAL_RCC_GetSysClockFreq+0x16c>
 800803e:	2b00      	cmp	r3, #0
 8008040:	d002      	beq.n	8008048 <HAL_RCC_GetSysClockFreq+0x34>
 8008042:	2b04      	cmp	r3, #4
 8008044:	d003      	beq.n	800804e <HAL_RCC_GetSysClockFreq+0x3a>
 8008046:	e09b      	b.n	8008180 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008048:	4b53      	ldr	r3, [pc, #332]	@ (8008198 <HAL_RCC_GetSysClockFreq+0x184>)
 800804a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800804c:	e09b      	b.n	8008186 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800804e:	4b53      	ldr	r3, [pc, #332]	@ (800819c <HAL_RCC_GetSysClockFreq+0x188>)
 8008050:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008052:	e098      	b.n	8008186 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008054:	4b4f      	ldr	r3, [pc, #316]	@ (8008194 <HAL_RCC_GetSysClockFreq+0x180>)
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800805c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800805e:	4b4d      	ldr	r3, [pc, #308]	@ (8008194 <HAL_RCC_GetSysClockFreq+0x180>)
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008066:	2b00      	cmp	r3, #0
 8008068:	d028      	beq.n	80080bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800806a:	4b4a      	ldr	r3, [pc, #296]	@ (8008194 <HAL_RCC_GetSysClockFreq+0x180>)
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	099b      	lsrs	r3, r3, #6
 8008070:	2200      	movs	r2, #0
 8008072:	623b      	str	r3, [r7, #32]
 8008074:	627a      	str	r2, [r7, #36]	@ 0x24
 8008076:	6a3b      	ldr	r3, [r7, #32]
 8008078:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800807c:	2100      	movs	r1, #0
 800807e:	4b47      	ldr	r3, [pc, #284]	@ (800819c <HAL_RCC_GetSysClockFreq+0x188>)
 8008080:	fb03 f201 	mul.w	r2, r3, r1
 8008084:	2300      	movs	r3, #0
 8008086:	fb00 f303 	mul.w	r3, r0, r3
 800808a:	4413      	add	r3, r2
 800808c:	4a43      	ldr	r2, [pc, #268]	@ (800819c <HAL_RCC_GetSysClockFreq+0x188>)
 800808e:	fba0 1202 	umull	r1, r2, r0, r2
 8008092:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008094:	460a      	mov	r2, r1
 8008096:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008098:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800809a:	4413      	add	r3, r2
 800809c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800809e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080a0:	2200      	movs	r2, #0
 80080a2:	61bb      	str	r3, [r7, #24]
 80080a4:	61fa      	str	r2, [r7, #28]
 80080a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80080ae:	f7f8 f8ff 	bl	80002b0 <__aeabi_uldivmod>
 80080b2:	4602      	mov	r2, r0
 80080b4:	460b      	mov	r3, r1
 80080b6:	4613      	mov	r3, r2
 80080b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080ba:	e053      	b.n	8008164 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080bc:	4b35      	ldr	r3, [pc, #212]	@ (8008194 <HAL_RCC_GetSysClockFreq+0x180>)
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	099b      	lsrs	r3, r3, #6
 80080c2:	2200      	movs	r2, #0
 80080c4:	613b      	str	r3, [r7, #16]
 80080c6:	617a      	str	r2, [r7, #20]
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80080ce:	f04f 0b00 	mov.w	fp, #0
 80080d2:	4652      	mov	r2, sl
 80080d4:	465b      	mov	r3, fp
 80080d6:	f04f 0000 	mov.w	r0, #0
 80080da:	f04f 0100 	mov.w	r1, #0
 80080de:	0159      	lsls	r1, r3, #5
 80080e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80080e4:	0150      	lsls	r0, r2, #5
 80080e6:	4602      	mov	r2, r0
 80080e8:	460b      	mov	r3, r1
 80080ea:	ebb2 080a 	subs.w	r8, r2, sl
 80080ee:	eb63 090b 	sbc.w	r9, r3, fp
 80080f2:	f04f 0200 	mov.w	r2, #0
 80080f6:	f04f 0300 	mov.w	r3, #0
 80080fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80080fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008102:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008106:	ebb2 0408 	subs.w	r4, r2, r8
 800810a:	eb63 0509 	sbc.w	r5, r3, r9
 800810e:	f04f 0200 	mov.w	r2, #0
 8008112:	f04f 0300 	mov.w	r3, #0
 8008116:	00eb      	lsls	r3, r5, #3
 8008118:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800811c:	00e2      	lsls	r2, r4, #3
 800811e:	4614      	mov	r4, r2
 8008120:	461d      	mov	r5, r3
 8008122:	eb14 030a 	adds.w	r3, r4, sl
 8008126:	603b      	str	r3, [r7, #0]
 8008128:	eb45 030b 	adc.w	r3, r5, fp
 800812c:	607b      	str	r3, [r7, #4]
 800812e:	f04f 0200 	mov.w	r2, #0
 8008132:	f04f 0300 	mov.w	r3, #0
 8008136:	e9d7 4500 	ldrd	r4, r5, [r7]
 800813a:	4629      	mov	r1, r5
 800813c:	028b      	lsls	r3, r1, #10
 800813e:	4621      	mov	r1, r4
 8008140:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008144:	4621      	mov	r1, r4
 8008146:	028a      	lsls	r2, r1, #10
 8008148:	4610      	mov	r0, r2
 800814a:	4619      	mov	r1, r3
 800814c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800814e:	2200      	movs	r2, #0
 8008150:	60bb      	str	r3, [r7, #8]
 8008152:	60fa      	str	r2, [r7, #12]
 8008154:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008158:	f7f8 f8aa 	bl	80002b0 <__aeabi_uldivmod>
 800815c:	4602      	mov	r2, r0
 800815e:	460b      	mov	r3, r1
 8008160:	4613      	mov	r3, r2
 8008162:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008164:	4b0b      	ldr	r3, [pc, #44]	@ (8008194 <HAL_RCC_GetSysClockFreq+0x180>)
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	0c1b      	lsrs	r3, r3, #16
 800816a:	f003 0303 	and.w	r3, r3, #3
 800816e:	3301      	adds	r3, #1
 8008170:	005b      	lsls	r3, r3, #1
 8008172:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008174:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008178:	fbb2 f3f3 	udiv	r3, r2, r3
 800817c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800817e:	e002      	b.n	8008186 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008180:	4b05      	ldr	r3, [pc, #20]	@ (8008198 <HAL_RCC_GetSysClockFreq+0x184>)
 8008182:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008184:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008188:	4618      	mov	r0, r3
 800818a:	3740      	adds	r7, #64	@ 0x40
 800818c:	46bd      	mov	sp, r7
 800818e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008192:	bf00      	nop
 8008194:	40023800 	.word	0x40023800
 8008198:	00f42400 	.word	0x00f42400
 800819c:	017d7840 	.word	0x017d7840

080081a0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80081a0:	b480      	push	{r7}
 80081a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80081a4:	4b03      	ldr	r3, [pc, #12]	@ (80081b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80081a6:	681b      	ldr	r3, [r3, #0]
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop
 80081b4:	20000000 	.word	0x20000000

080081b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80081bc:	f7ff fff0 	bl	80081a0 <HAL_RCC_GetHCLKFreq>
 80081c0:	4602      	mov	r2, r0
 80081c2:	4b05      	ldr	r3, [pc, #20]	@ (80081d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	0a9b      	lsrs	r3, r3, #10
 80081c8:	f003 0307 	and.w	r3, r3, #7
 80081cc:	4903      	ldr	r1, [pc, #12]	@ (80081dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80081ce:	5ccb      	ldrb	r3, [r1, r3]
 80081d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	bd80      	pop	{r7, pc}
 80081d8:	40023800 	.word	0x40023800
 80081dc:	080270c4 	.word	0x080270c4

080081e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80081e4:	f7ff ffdc 	bl	80081a0 <HAL_RCC_GetHCLKFreq>
 80081e8:	4602      	mov	r2, r0
 80081ea:	4b05      	ldr	r3, [pc, #20]	@ (8008200 <HAL_RCC_GetPCLK2Freq+0x20>)
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	0b5b      	lsrs	r3, r3, #13
 80081f0:	f003 0307 	and.w	r3, r3, #7
 80081f4:	4903      	ldr	r1, [pc, #12]	@ (8008204 <HAL_RCC_GetPCLK2Freq+0x24>)
 80081f6:	5ccb      	ldrb	r3, [r1, r3]
 80081f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	bd80      	pop	{r7, pc}
 8008200:	40023800 	.word	0x40023800
 8008204:	080270c4 	.word	0x080270c4

08008208 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	220f      	movs	r2, #15
 8008216:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008218:	4b12      	ldr	r3, [pc, #72]	@ (8008264 <HAL_RCC_GetClockConfig+0x5c>)
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	f003 0203 	and.w	r2, r3, #3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008224:	4b0f      	ldr	r3, [pc, #60]	@ (8008264 <HAL_RCC_GetClockConfig+0x5c>)
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008230:	4b0c      	ldr	r3, [pc, #48]	@ (8008264 <HAL_RCC_GetClockConfig+0x5c>)
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800823c:	4b09      	ldr	r3, [pc, #36]	@ (8008264 <HAL_RCC_GetClockConfig+0x5c>)
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	08db      	lsrs	r3, r3, #3
 8008242:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800824a:	4b07      	ldr	r3, [pc, #28]	@ (8008268 <HAL_RCC_GetClockConfig+0x60>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 020f 	and.w	r2, r3, #15
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	601a      	str	r2, [r3, #0]
}
 8008256:	bf00      	nop
 8008258:	370c      	adds	r7, #12
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr
 8008262:	bf00      	nop
 8008264:	40023800 	.word	0x40023800
 8008268:	40023c00 	.word	0x40023c00

0800826c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b088      	sub	sp, #32
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008274:	2300      	movs	r3, #0
 8008276:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008278:	2300      	movs	r3, #0
 800827a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800827c:	2300      	movs	r3, #0
 800827e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008280:	2300      	movs	r3, #0
 8008282:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008284:	2300      	movs	r3, #0
 8008286:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f003 0301 	and.w	r3, r3, #1
 8008290:	2b00      	cmp	r3, #0
 8008292:	d012      	beq.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008294:	4b69      	ldr	r3, [pc, #420]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	4a68      	ldr	r2, [pc, #416]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800829a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800829e:	6093      	str	r3, [r2, #8]
 80082a0:	4b66      	ldr	r3, [pc, #408]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082a2:	689a      	ldr	r2, [r3, #8]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082a8:	4964      	ldr	r1, [pc, #400]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082aa:	4313      	orrs	r3, r2
 80082ac:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d101      	bne.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80082b6:	2301      	movs	r3, #1
 80082b8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d017      	beq.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80082c6:	4b5d      	ldr	r3, [pc, #372]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082cc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082d4:	4959      	ldr	r1, [pc, #356]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082d6:	4313      	orrs	r3, r2
 80082d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082e4:	d101      	bne.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80082e6:	2301      	movs	r3, #1
 80082e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d101      	bne.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80082f2:	2301      	movs	r3, #1
 80082f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d017      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008302:	4b4e      	ldr	r3, [pc, #312]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008304:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008308:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008310:	494a      	ldr	r1, [pc, #296]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008312:	4313      	orrs	r3, r2
 8008314:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800831c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008320:	d101      	bne.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008322:	2301      	movs	r3, #1
 8008324:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800832a:	2b00      	cmp	r3, #0
 800832c:	d101      	bne.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800832e:	2301      	movs	r3, #1
 8008330:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800833a:	2b00      	cmp	r3, #0
 800833c:	d001      	beq.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800833e:	2301      	movs	r3, #1
 8008340:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f003 0320 	and.w	r3, r3, #32
 800834a:	2b00      	cmp	r3, #0
 800834c:	f000 808b 	beq.w	8008466 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008350:	4b3a      	ldr	r3, [pc, #232]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008354:	4a39      	ldr	r2, [pc, #228]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008356:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800835a:	6413      	str	r3, [r2, #64]	@ 0x40
 800835c:	4b37      	ldr	r3, [pc, #220]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800835e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008360:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008364:	60bb      	str	r3, [r7, #8]
 8008366:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008368:	4b35      	ldr	r3, [pc, #212]	@ (8008440 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a34      	ldr	r2, [pc, #208]	@ (8008440 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800836e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008372:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008374:	f7fa f842 	bl	80023fc <HAL_GetTick>
 8008378:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800837a:	e008      	b.n	800838e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800837c:	f7fa f83e 	bl	80023fc <HAL_GetTick>
 8008380:	4602      	mov	r2, r0
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	1ad3      	subs	r3, r2, r3
 8008386:	2b64      	cmp	r3, #100	@ 0x64
 8008388:	d901      	bls.n	800838e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800838a:	2303      	movs	r3, #3
 800838c:	e357      	b.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800838e:	4b2c      	ldr	r3, [pc, #176]	@ (8008440 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008396:	2b00      	cmp	r3, #0
 8008398:	d0f0      	beq.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800839a:	4b28      	ldr	r3, [pc, #160]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800839c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800839e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083a2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d035      	beq.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083b2:	693a      	ldr	r2, [r7, #16]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d02e      	beq.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80083b8:	4b20      	ldr	r3, [pc, #128]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083c0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80083c2:	4b1e      	ldr	r3, [pc, #120]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083c6:	4a1d      	ldr	r2, [pc, #116]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083cc:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80083ce:	4b1b      	ldr	r3, [pc, #108]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083d2:	4a1a      	ldr	r2, [pc, #104]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083d8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80083da:	4a18      	ldr	r2, [pc, #96]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80083e0:	4b16      	ldr	r3, [pc, #88]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083e4:	f003 0301 	and.w	r3, r3, #1
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d114      	bne.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083ec:	f7fa f806 	bl	80023fc <HAL_GetTick>
 80083f0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083f2:	e00a      	b.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083f4:	f7fa f802 	bl	80023fc <HAL_GetTick>
 80083f8:	4602      	mov	r2, r0
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	1ad3      	subs	r3, r2, r3
 80083fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008402:	4293      	cmp	r3, r2
 8008404:	d901      	bls.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008406:	2303      	movs	r3, #3
 8008408:	e319      	b.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800840a:	4b0c      	ldr	r3, [pc, #48]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800840c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800840e:	f003 0302 	and.w	r3, r3, #2
 8008412:	2b00      	cmp	r3, #0
 8008414:	d0ee      	beq.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800841a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800841e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008422:	d111      	bne.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008424:	4b05      	ldr	r3, [pc, #20]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008430:	4b04      	ldr	r3, [pc, #16]	@ (8008444 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008432:	400b      	ands	r3, r1
 8008434:	4901      	ldr	r1, [pc, #4]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008436:	4313      	orrs	r3, r2
 8008438:	608b      	str	r3, [r1, #8]
 800843a:	e00b      	b.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800843c:	40023800 	.word	0x40023800
 8008440:	40007000 	.word	0x40007000
 8008444:	0ffffcff 	.word	0x0ffffcff
 8008448:	4baa      	ldr	r3, [pc, #680]	@ (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	4aa9      	ldr	r2, [pc, #676]	@ (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800844e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008452:	6093      	str	r3, [r2, #8]
 8008454:	4ba7      	ldr	r3, [pc, #668]	@ (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008456:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800845c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008460:	49a4      	ldr	r1, [pc, #656]	@ (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008462:	4313      	orrs	r3, r2
 8008464:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f003 0310 	and.w	r3, r3, #16
 800846e:	2b00      	cmp	r3, #0
 8008470:	d010      	beq.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008472:	4ba0      	ldr	r3, [pc, #640]	@ (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008474:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008478:	4a9e      	ldr	r2, [pc, #632]	@ (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800847a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800847e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8008482:	4b9c      	ldr	r3, [pc, #624]	@ (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008484:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800848c:	4999      	ldr	r1, [pc, #612]	@ (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800848e:	4313      	orrs	r3, r2
 8008490:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800849c:	2b00      	cmp	r3, #0
 800849e:	d00a      	beq.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80084a0:	4b94      	ldr	r3, [pc, #592]	@ (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084a6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084ae:	4991      	ldr	r1, [pc, #580]	@ (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084b0:	4313      	orrs	r3, r2
 80084b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00a      	beq.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80084c2:	4b8c      	ldr	r3, [pc, #560]	@ (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084d0:	4988      	ldr	r1, [pc, #544]	@ (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084d2:	4313      	orrs	r3, r2
 80084d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d00a      	beq.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80084e4:	4b83      	ldr	r3, [pc, #524]	@ (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084f2:	4980      	ldr	r1, [pc, #512]	@ (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084f4:	4313      	orrs	r3, r2
 80084f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00a      	beq.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008506:	4b7b      	ldr	r3, [pc, #492]	@ (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008508:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800850c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008514:	4977      	ldr	r1, [pc, #476]	@ (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008516:	4313      	orrs	r3, r2
 8008518:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008524:	2b00      	cmp	r3, #0
 8008526:	d00a      	beq.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008528:	4b72      	ldr	r3, [pc, #456]	@ (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800852a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800852e:	f023 0203 	bic.w	r2, r3, #3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008536:	496f      	ldr	r1, [pc, #444]	@ (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008538:	4313      	orrs	r3, r2
 800853a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008546:	2b00      	cmp	r3, #0
 8008548:	d00a      	beq.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800854a:	4b6a      	ldr	r3, [pc, #424]	@ (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800854c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008550:	f023 020c 	bic.w	r2, r3, #12
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008558:	4966      	ldr	r1, [pc, #408]	@ (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800855a:	4313      	orrs	r3, r2
 800855c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008568:	2b00      	cmp	r3, #0
 800856a:	d00a      	beq.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800856c:	4b61      	ldr	r3, [pc, #388]	@ (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800856e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008572:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800857a:	495e      	ldr	r1, [pc, #376]	@ (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800857c:	4313      	orrs	r3, r2
 800857e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800858a:	2b00      	cmp	r3, #0
 800858c:	d00a      	beq.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800858e:	4b59      	ldr	r3, [pc, #356]	@ (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008590:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008594:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800859c:	4955      	ldr	r1, [pc, #340]	@ (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800859e:	4313      	orrs	r3, r2
 80085a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d00a      	beq.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80085b0:	4b50      	ldr	r3, [pc, #320]	@ (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085b6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085be:	494d      	ldr	r1, [pc, #308]	@ (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085c0:	4313      	orrs	r3, r2
 80085c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d00a      	beq.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80085d2:	4b48      	ldr	r3, [pc, #288]	@ (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085d8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085e0:	4944      	ldr	r1, [pc, #272]	@ (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085e2:	4313      	orrs	r3, r2
 80085e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d00a      	beq.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80085f4:	4b3f      	ldr	r3, [pc, #252]	@ (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085fa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008602:	493c      	ldr	r1, [pc, #240]	@ (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008604:	4313      	orrs	r3, r2
 8008606:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008612:	2b00      	cmp	r3, #0
 8008614:	d00a      	beq.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008616:	4b37      	ldr	r3, [pc, #220]	@ (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800861c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008624:	4933      	ldr	r1, [pc, #204]	@ (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008626:	4313      	orrs	r3, r2
 8008628:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008634:	2b00      	cmp	r3, #0
 8008636:	d00a      	beq.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008638:	4b2e      	ldr	r3, [pc, #184]	@ (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800863a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800863e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008646:	492b      	ldr	r1, [pc, #172]	@ (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008648:	4313      	orrs	r3, r2
 800864a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008656:	2b00      	cmp	r3, #0
 8008658:	d011      	beq.n	800867e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800865a:	4b26      	ldr	r3, [pc, #152]	@ (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800865c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008660:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008668:	4922      	ldr	r1, [pc, #136]	@ (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800866a:	4313      	orrs	r3, r2
 800866c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008674:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008678:	d101      	bne.n	800867e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800867a:	2301      	movs	r3, #1
 800867c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f003 0308 	and.w	r3, r3, #8
 8008686:	2b00      	cmp	r3, #0
 8008688:	d001      	beq.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800868a:	2301      	movs	r3, #1
 800868c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008696:	2b00      	cmp	r3, #0
 8008698:	d00a      	beq.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800869a:	4b16      	ldr	r3, [pc, #88]	@ (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800869c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086a0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086a8:	4912      	ldr	r1, [pc, #72]	@ (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086aa:	4313      	orrs	r3, r2
 80086ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d00b      	beq.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80086bc:	4b0d      	ldr	r3, [pc, #52]	@ (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086c2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086cc:	4909      	ldr	r1, [pc, #36]	@ (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086ce:	4313      	orrs	r3, r2
 80086d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d006      	beq.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f000 80d9 	beq.w	800889a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80086e8:	4b02      	ldr	r3, [pc, #8]	@ (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a01      	ldr	r2, [pc, #4]	@ (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80086f2:	e001      	b.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80086f4:	40023800 	.word	0x40023800
 80086f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086fa:	f7f9 fe7f 	bl	80023fc <HAL_GetTick>
 80086fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008700:	e008      	b.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008702:	f7f9 fe7b 	bl	80023fc <HAL_GetTick>
 8008706:	4602      	mov	r2, r0
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	1ad3      	subs	r3, r2, r3
 800870c:	2b64      	cmp	r3, #100	@ 0x64
 800870e:	d901      	bls.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008710:	2303      	movs	r3, #3
 8008712:	e194      	b.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008714:	4b6c      	ldr	r3, [pc, #432]	@ (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800871c:	2b00      	cmp	r3, #0
 800871e:	d1f0      	bne.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f003 0301 	and.w	r3, r3, #1
 8008728:	2b00      	cmp	r3, #0
 800872a:	d021      	beq.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008730:	2b00      	cmp	r3, #0
 8008732:	d11d      	bne.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008734:	4b64      	ldr	r3, [pc, #400]	@ (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008736:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800873a:	0c1b      	lsrs	r3, r3, #16
 800873c:	f003 0303 	and.w	r3, r3, #3
 8008740:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008742:	4b61      	ldr	r3, [pc, #388]	@ (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008744:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008748:	0e1b      	lsrs	r3, r3, #24
 800874a:	f003 030f 	and.w	r3, r3, #15
 800874e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	019a      	lsls	r2, r3, #6
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	041b      	lsls	r3, r3, #16
 800875a:	431a      	orrs	r2, r3
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	061b      	lsls	r3, r3, #24
 8008760:	431a      	orrs	r2, r3
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	071b      	lsls	r3, r3, #28
 8008768:	4957      	ldr	r1, [pc, #348]	@ (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800876a:	4313      	orrs	r3, r2
 800876c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008778:	2b00      	cmp	r3, #0
 800877a:	d004      	beq.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008780:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008784:	d00a      	beq.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800878e:	2b00      	cmp	r3, #0
 8008790:	d02e      	beq.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008796:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800879a:	d129      	bne.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800879c:	4b4a      	ldr	r3, [pc, #296]	@ (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800879e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087a2:	0c1b      	lsrs	r3, r3, #16
 80087a4:	f003 0303 	and.w	r3, r3, #3
 80087a8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80087aa:	4b47      	ldr	r3, [pc, #284]	@ (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087b0:	0f1b      	lsrs	r3, r3, #28
 80087b2:	f003 0307 	and.w	r3, r3, #7
 80087b6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	019a      	lsls	r2, r3, #6
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	041b      	lsls	r3, r3, #16
 80087c2:	431a      	orrs	r2, r3
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	061b      	lsls	r3, r3, #24
 80087ca:	431a      	orrs	r2, r3
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	071b      	lsls	r3, r3, #28
 80087d0:	493d      	ldr	r1, [pc, #244]	@ (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087d2:	4313      	orrs	r3, r2
 80087d4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80087d8:	4b3b      	ldr	r3, [pc, #236]	@ (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80087de:	f023 021f 	bic.w	r2, r3, #31
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087e6:	3b01      	subs	r3, #1
 80087e8:	4937      	ldr	r1, [pc, #220]	@ (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087ea:	4313      	orrs	r3, r2
 80087ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d01d      	beq.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80087fc:	4b32      	ldr	r3, [pc, #200]	@ (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008802:	0e1b      	lsrs	r3, r3, #24
 8008804:	f003 030f 	and.w	r3, r3, #15
 8008808:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800880a:	4b2f      	ldr	r3, [pc, #188]	@ (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800880c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008810:	0f1b      	lsrs	r3, r3, #28
 8008812:	f003 0307 	and.w	r3, r3, #7
 8008816:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	019a      	lsls	r2, r3, #6
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	691b      	ldr	r3, [r3, #16]
 8008822:	041b      	lsls	r3, r3, #16
 8008824:	431a      	orrs	r2, r3
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	061b      	lsls	r3, r3, #24
 800882a:	431a      	orrs	r2, r3
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	071b      	lsls	r3, r3, #28
 8008830:	4925      	ldr	r1, [pc, #148]	@ (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008832:	4313      	orrs	r3, r2
 8008834:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008840:	2b00      	cmp	r3, #0
 8008842:	d011      	beq.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	019a      	lsls	r2, r3, #6
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	691b      	ldr	r3, [r3, #16]
 800884e:	041b      	lsls	r3, r3, #16
 8008850:	431a      	orrs	r2, r3
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	061b      	lsls	r3, r3, #24
 8008858:	431a      	orrs	r2, r3
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	071b      	lsls	r3, r3, #28
 8008860:	4919      	ldr	r1, [pc, #100]	@ (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008862:	4313      	orrs	r3, r2
 8008864:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008868:	4b17      	ldr	r3, [pc, #92]	@ (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a16      	ldr	r2, [pc, #88]	@ (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800886e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008872:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008874:	f7f9 fdc2 	bl	80023fc <HAL_GetTick>
 8008878:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800887a:	e008      	b.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800887c:	f7f9 fdbe 	bl	80023fc <HAL_GetTick>
 8008880:	4602      	mov	r2, r0
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	1ad3      	subs	r3, r2, r3
 8008886:	2b64      	cmp	r3, #100	@ 0x64
 8008888:	d901      	bls.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800888a:	2303      	movs	r3, #3
 800888c:	e0d7      	b.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800888e:	4b0e      	ldr	r3, [pc, #56]	@ (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008896:	2b00      	cmp	r3, #0
 8008898:	d0f0      	beq.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	2b01      	cmp	r3, #1
 800889e:	f040 80cd 	bne.w	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80088a2:	4b09      	ldr	r3, [pc, #36]	@ (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a08      	ldr	r2, [pc, #32]	@ (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80088ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088ae:	f7f9 fda5 	bl	80023fc <HAL_GetTick>
 80088b2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80088b4:	e00a      	b.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80088b6:	f7f9 fda1 	bl	80023fc <HAL_GetTick>
 80088ba:	4602      	mov	r2, r0
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	1ad3      	subs	r3, r2, r3
 80088c0:	2b64      	cmp	r3, #100	@ 0x64
 80088c2:	d903      	bls.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088c4:	2303      	movs	r3, #3
 80088c6:	e0ba      	b.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80088c8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80088cc:	4b5e      	ldr	r3, [pc, #376]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80088d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088d8:	d0ed      	beq.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d003      	beq.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0x682>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d009      	beq.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d02e      	beq.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d12a      	bne.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008902:	4b51      	ldr	r3, [pc, #324]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008908:	0c1b      	lsrs	r3, r3, #16
 800890a:	f003 0303 	and.w	r3, r3, #3
 800890e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008910:	4b4d      	ldr	r3, [pc, #308]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008916:	0f1b      	lsrs	r3, r3, #28
 8008918:	f003 0307 	and.w	r3, r3, #7
 800891c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	695b      	ldr	r3, [r3, #20]
 8008922:	019a      	lsls	r2, r3, #6
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	041b      	lsls	r3, r3, #16
 8008928:	431a      	orrs	r2, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	699b      	ldr	r3, [r3, #24]
 800892e:	061b      	lsls	r3, r3, #24
 8008930:	431a      	orrs	r2, r3
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	071b      	lsls	r3, r3, #28
 8008936:	4944      	ldr	r1, [pc, #272]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008938:	4313      	orrs	r3, r2
 800893a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800893e:	4b42      	ldr	r3, [pc, #264]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008940:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008944:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800894c:	3b01      	subs	r3, #1
 800894e:	021b      	lsls	r3, r3, #8
 8008950:	493d      	ldr	r1, [pc, #244]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008952:	4313      	orrs	r3, r2
 8008954:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008960:	2b00      	cmp	r3, #0
 8008962:	d022      	beq.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008968:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800896c:	d11d      	bne.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800896e:	4b36      	ldr	r3, [pc, #216]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008970:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008974:	0e1b      	lsrs	r3, r3, #24
 8008976:	f003 030f 	and.w	r3, r3, #15
 800897a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800897c:	4b32      	ldr	r3, [pc, #200]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800897e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008982:	0f1b      	lsrs	r3, r3, #28
 8008984:	f003 0307 	and.w	r3, r3, #7
 8008988:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	695b      	ldr	r3, [r3, #20]
 800898e:	019a      	lsls	r2, r3, #6
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6a1b      	ldr	r3, [r3, #32]
 8008994:	041b      	lsls	r3, r3, #16
 8008996:	431a      	orrs	r2, r3
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	061b      	lsls	r3, r3, #24
 800899c:	431a      	orrs	r2, r3
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	071b      	lsls	r3, r3, #28
 80089a2:	4929      	ldr	r1, [pc, #164]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089a4:	4313      	orrs	r3, r2
 80089a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f003 0308 	and.w	r3, r3, #8
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d028      	beq.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80089b6:	4b24      	ldr	r3, [pc, #144]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089bc:	0e1b      	lsrs	r3, r3, #24
 80089be:	f003 030f 	and.w	r3, r3, #15
 80089c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80089c4:	4b20      	ldr	r3, [pc, #128]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089ca:	0c1b      	lsrs	r3, r3, #16
 80089cc:	f003 0303 	and.w	r3, r3, #3
 80089d0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	695b      	ldr	r3, [r3, #20]
 80089d6:	019a      	lsls	r2, r3, #6
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	041b      	lsls	r3, r3, #16
 80089dc:	431a      	orrs	r2, r3
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	061b      	lsls	r3, r3, #24
 80089e2:	431a      	orrs	r2, r3
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	69db      	ldr	r3, [r3, #28]
 80089e8:	071b      	lsls	r3, r3, #28
 80089ea:	4917      	ldr	r1, [pc, #92]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089ec:	4313      	orrs	r3, r2
 80089ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80089f2:	4b15      	ldr	r3, [pc, #84]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089f8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a00:	4911      	ldr	r1, [pc, #68]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a02:	4313      	orrs	r3, r2
 8008a04:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008a08:	4b0f      	ldr	r3, [pc, #60]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a0e      	ldr	r2, [pc, #56]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a14:	f7f9 fcf2 	bl	80023fc <HAL_GetTick>
 8008a18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008a1a:	e008      	b.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008a1c:	f7f9 fcee 	bl	80023fc <HAL_GetTick>
 8008a20:	4602      	mov	r2, r0
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	1ad3      	subs	r3, r2, r3
 8008a26:	2b64      	cmp	r3, #100	@ 0x64
 8008a28:	d901      	bls.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a2a:	2303      	movs	r3, #3
 8008a2c:	e007      	b.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008a2e:	4b06      	ldr	r3, [pc, #24]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a3a:	d1ef      	bne.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3720      	adds	r7, #32
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop
 8008a48:	40023800 	.word	0x40023800

08008a4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d101      	bne.n	8008a5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	e09d      	b.n	8008b9a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d108      	bne.n	8008a78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008a6e:	d009      	beq.n	8008a84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	61da      	str	r2, [r3, #28]
 8008a76:	e005      	b.n	8008a84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2200      	movs	r2, #0
 8008a82:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008a90:	b2db      	uxtb	r3, r3
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d106      	bne.n	8008aa4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f7f8 fc6c 	bl	800137c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2202      	movs	r2, #2
 8008aa8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008aba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008ac4:	d902      	bls.n	8008acc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	60fb      	str	r3, [r7, #12]
 8008aca:	e002      	b.n	8008ad2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008acc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008ad0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	68db      	ldr	r3, [r3, #12]
 8008ad6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008ada:	d007      	beq.n	8008aec <HAL_SPI_Init+0xa0>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008ae4:	d002      	beq.n	8008aec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008afc:	431a      	orrs	r2, r3
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	691b      	ldr	r3, [r3, #16]
 8008b02:	f003 0302 	and.w	r3, r3, #2
 8008b06:	431a      	orrs	r2, r3
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	695b      	ldr	r3, [r3, #20]
 8008b0c:	f003 0301 	and.w	r3, r3, #1
 8008b10:	431a      	orrs	r2, r3
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	699b      	ldr	r3, [r3, #24]
 8008b16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b1a:	431a      	orrs	r2, r3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	69db      	ldr	r3, [r3, #28]
 8008b20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008b24:	431a      	orrs	r2, r3
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6a1b      	ldr	r3, [r3, #32]
 8008b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b2e:	ea42 0103 	orr.w	r1, r2, r3
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b36:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	430a      	orrs	r2, r1
 8008b40:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	699b      	ldr	r3, [r3, #24]
 8008b46:	0c1b      	lsrs	r3, r3, #16
 8008b48:	f003 0204 	and.w	r2, r3, #4
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b50:	f003 0310 	and.w	r3, r3, #16
 8008b54:	431a      	orrs	r2, r3
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b5a:	f003 0308 	and.w	r3, r3, #8
 8008b5e:	431a      	orrs	r2, r3
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008b68:	ea42 0103 	orr.w	r1, r2, r3
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	430a      	orrs	r2, r1
 8008b78:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	69da      	ldr	r2, [r3, #28]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008b88:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3710      	adds	r7, #16
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
	...

08008ba4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer  (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	4613      	mov	r3, r2
 8008bb0:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	d001      	beq.n	8008bc2 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8008bbe:	2302      	movs	r3, #2
 8008bc0:	e0d4      	b.n	8008d6c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d002      	beq.n	8008bce <HAL_SPI_Transmit_DMA+0x2a>
 8008bc8:	88fb      	ldrh	r3, [r7, #6]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d101      	bne.n	8008bd2 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	e0cc      	b.n	8008d6c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d101      	bne.n	8008be0 <HAL_SPI_Transmit_DMA+0x3c>
 8008bdc:	2302      	movs	r3, #2
 8008bde:	e0c5      	b.n	8008d6c <HAL_SPI_Transmit_DMA+0x1c8>
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2201      	movs	r2, #1
 8008be4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2203      	movs	r2, #3
 8008bec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	68ba      	ldr	r2, [r7, #8]
 8008bfa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	88fa      	ldrh	r2, [r7, #6]
 8008c00:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	88fa      	ldrh	r2, [r7, #6]
 8008c06:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2200      	movs	r2, #0
 8008c12:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2200      	movs	r2, #0
 8008c18:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2200      	movs	r2, #0
 8008c26:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c32:	d10f      	bne.n	8008c54 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008c42:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008c52:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c58:	4a46      	ldr	r2, [pc, #280]	@ (8008d74 <HAL_SPI_Transmit_DMA+0x1d0>)
 8008c5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c60:	4a45      	ldr	r2, [pc, #276]	@ (8008d78 <HAL_SPI_Transmit_DMA+0x1d4>)
 8008c62:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c68:	4a44      	ldr	r2, [pc, #272]	@ (8008d7c <HAL_SPI_Transmit_DMA+0x1d8>)
 8008c6a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c70:	2200      	movs	r2, #0
 8008c72:	651a      	str	r2, [r3, #80]	@ 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	685a      	ldr	r2, [r3, #4]
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008c82:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008c8c:	d82d      	bhi.n	8008cea <HAL_SPI_Transmit_DMA+0x146>
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c92:	699b      	ldr	r3, [r3, #24]
 8008c94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c98:	d127      	bne.n	8008cea <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	f003 0301 	and.w	r3, r3, #1
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d10f      	bne.n	8008cc8 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	685a      	ldr	r2, [r3, #4]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008cb6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	085b      	lsrs	r3, r3, #1
 8008cc0:	b29a      	uxth	r2, r3
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008cc6:	e010      	b.n	8008cea <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	685a      	ldr	r2, [r3, #4]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008cd6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	085b      	lsrs	r3, r3, #1
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	b29a      	uxth	r2, r3
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	330c      	adds	r3, #12
 8008cfa:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d00:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008d02:	f7fa fbcb 	bl	800349c <HAL_DMA_Start_IT>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d00b      	beq.n	8008d24 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d10:	f043 0210 	orr.w	r2, r3, #16
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008d20:	2301      	movs	r3, #1
 8008d22:	e023      	b.n	8008d6c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d2e:	2b40      	cmp	r3, #64	@ 0x40
 8008d30:	d007      	beq.n	8008d42 <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d40:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2200      	movs	r2, #0
 8008d46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	685a      	ldr	r2, [r3, #4]
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f042 0220 	orr.w	r2, r2, #32
 8008d58:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	685a      	ldr	r2, [r3, #4]
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f042 0202 	orr.w	r2, r2, #2
 8008d68:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008d6a:	2300      	movs	r3, #0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3710      	adds	r7, #16
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	08009715 	.word	0x08009715
 8008d78:	08009531 	.word	0x08009531
 8008d7c:	08009769 	.word	0x08009769

08008d80 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data elements (u8 or u16) to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d001      	beq.n	8008d9e <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 8008d9a:	2302      	movs	r3, #2
 8008d9c:	e105      	b.n	8008faa <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d002      	beq.n	8008daa <HAL_SPI_Receive_DMA+0x2a>
 8008da4:	88fb      	ldrh	r3, [r7, #6]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d101      	bne.n	8008dae <HAL_SPI_Receive_DMA+0x2e>
  {
    return HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	e0fd      	b.n	8008faa <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	689b      	ldr	r3, [r3, #8]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d110      	bne.n	8008dd8 <HAL_SPI_Receive_DMA+0x58>
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008dbe:	d10b      	bne.n	8008dd8 <HAL_SPI_Receive_DMA+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2204      	movs	r2, #4
 8008dc4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8008dc8:	88fb      	ldrh	r3, [r7, #6]
 8008dca:	68ba      	ldr	r2, [r7, #8]
 8008dcc:	68b9      	ldr	r1, [r7, #8]
 8008dce:	68f8      	ldr	r0, [r7, #12]
 8008dd0:	f000 f8f6 	bl	8008fc0 <HAL_SPI_TransmitReceive_DMA>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	e0e8      	b.n	8008faa <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d101      	bne.n	8008de6 <HAL_SPI_Receive_DMA+0x66>
 8008de2:	2302      	movs	r3, #2
 8008de4:	e0e1      	b.n	8008faa <HAL_SPI_Receive_DMA+0x22a>
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2201      	movs	r2, #1
 8008dea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2204      	movs	r2, #4
 8008df2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	68ba      	ldr	r2, [r7, #8]
 8008e00:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	88fa      	ldrh	r2, [r7, #6]
 8008e06:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	88fa      	ldrh	r2, [r7, #6]
 8008e0e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2200      	movs	r2, #0
 8008e16:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2200      	movs	r2, #0
 8008e22:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2200      	movs	r2, #0
 8008e28:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e32:	d10f      	bne.n	8008e54 <HAL_SPI_Receive_DMA+0xd4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e42:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008e52:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	685a      	ldr	r2, [r3, #4]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008e62:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008e6c:	d908      	bls.n	8008e80 <HAL_SPI_Receive_DMA+0x100>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	685a      	ldr	r2, [r3, #4]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008e7c:	605a      	str	r2, [r3, #4]
 8008e7e:	e042      	b.n	8008f06 <HAL_SPI_Receive_DMA+0x186>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	685a      	ldr	r2, [r3, #4]
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008e8e:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e94:	699b      	ldr	r3, [r3, #24]
 8008e96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e9a:	d134      	bne.n	8008f06 <HAL_SPI_Receive_DMA+0x186>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	685a      	ldr	r2, [r3, #4]
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008eaa:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	f003 0301 	and.w	r3, r3, #1
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d111      	bne.n	8008ee0 <HAL_SPI_Receive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	685a      	ldr	r2, [r3, #4]
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008eca:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	085b      	lsrs	r3, r3, #1
 8008ed6:	b29a      	uxth	r2, r3
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008ede:	e012      	b.n	8008f06 <HAL_SPI_Receive_DMA+0x186>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	685a      	ldr	r2, [r3, #4]
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008eee:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	085b      	lsrs	r3, r3, #1
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	3301      	adds	r3, #1
 8008efe:	b29a      	uxth	r2, r3
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f0a:	4a2a      	ldr	r2, [pc, #168]	@ (8008fb4 <HAL_SPI_Receive_DMA+0x234>)
 8008f0c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f12:	4a29      	ldr	r2, [pc, #164]	@ (8008fb8 <HAL_SPI_Receive_DMA+0x238>)
 8008f14:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f1a:	4a28      	ldr	r2, [pc, #160]	@ (8008fbc <HAL_SPI_Receive_DMA+0x23c>)
 8008f1c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f22:	2200      	movs	r2, #0
 8008f24:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	330c      	adds	r3, #12
 8008f30:	4619      	mov	r1, r3
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f36:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f3e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008f40:	f7fa faac 	bl	800349c <HAL_DMA_Start_IT>
 8008f44:	4603      	mov	r3, r0
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00b      	beq.n	8008f62 <HAL_SPI_Receive_DMA+0x1e2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f4e:	f043 0210 	orr.w	r2, r3, #16
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e023      	b.n	8008faa <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f6c:	2b40      	cmp	r3, #64	@ 0x40
 8008f6e:	d007      	beq.n	8008f80 <HAL_SPI_Receive_DMA+0x200>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f7e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2200      	movs	r2, #0
 8008f84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	685a      	ldr	r2, [r3, #4]
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f042 0220 	orr.w	r2, r2, #32
 8008f96:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	685a      	ldr	r2, [r3, #4]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f042 0201 	orr.w	r2, r2, #1
 8008fa6:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008fa8:	2300      	movs	r3, #0
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3710      	adds	r7, #16
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	08009731 	.word	0x08009731
 8008fb8:	080095d9 	.word	0x080095d9
 8008fbc:	08009769 	.word	0x08009769

08008fc0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b086      	sub	sp, #24
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	607a      	str	r2, [r7, #4]
 8008fcc:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008fd4:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8008fdc:	7dfb      	ldrb	r3, [r7, #23]
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d00c      	beq.n	8008ffc <HAL_SPI_TransmitReceive_DMA+0x3c>
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008fe8:	d106      	bne.n	8008ff8 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d102      	bne.n	8008ff8 <HAL_SPI_TransmitReceive_DMA+0x38>
 8008ff2:	7dfb      	ldrb	r3, [r7, #23]
 8008ff4:	2b04      	cmp	r3, #4
 8008ff6:	d001      	beq.n	8008ffc <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008ff8:	2302      	movs	r3, #2
 8008ffa:	e158      	b.n	80092ae <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d005      	beq.n	800900e <HAL_SPI_TransmitReceive_DMA+0x4e>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d002      	beq.n	800900e <HAL_SPI_TransmitReceive_DMA+0x4e>
 8009008:	887b      	ldrh	r3, [r7, #2]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d101      	bne.n	8009012 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 800900e:	2301      	movs	r3, #1
 8009010:	e14d      	b.n	80092ae <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009018:	2b01      	cmp	r3, #1
 800901a:	d101      	bne.n	8009020 <HAL_SPI_TransmitReceive_DMA+0x60>
 800901c:	2302      	movs	r3, #2
 800901e:	e146      	b.n	80092ae <HAL_SPI_TransmitReceive_DMA+0x2ee>
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2201      	movs	r2, #1
 8009024:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800902e:	b2db      	uxtb	r3, r3
 8009030:	2b04      	cmp	r3, #4
 8009032:	d003      	beq.n	800903c <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2205      	movs	r2, #5
 8009038:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2200      	movs	r2, #0
 8009040:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	68ba      	ldr	r2, [r7, #8]
 8009046:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	887a      	ldrh	r2, [r7, #2]
 800904c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	887a      	ldrh	r2, [r7, #2]
 8009052:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	687a      	ldr	r2, [r7, #4]
 8009058:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	887a      	ldrh	r2, [r7, #2]
 800905e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	887a      	ldrh	r2, [r7, #2]
 8009066:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2200      	movs	r2, #0
 800906e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2200      	movs	r2, #0
 8009074:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	685a      	ldr	r2, [r3, #4]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8009084:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	68db      	ldr	r3, [r3, #12]
 800908a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800908e:	d908      	bls.n	80090a2 <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	685a      	ldr	r2, [r3, #4]
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800909e:	605a      	str	r2, [r3, #4]
 80090a0:	e06f      	b.n	8009182 <HAL_SPI_TransmitReceive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	685a      	ldr	r2, [r3, #4]
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80090b0:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090b6:	699b      	ldr	r3, [r3, #24]
 80090b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090bc:	d126      	bne.n	800910c <HAL_SPI_TransmitReceive_DMA+0x14c>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80090c2:	f003 0301 	and.w	r3, r3, #1
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d10f      	bne.n	80090ea <HAL_SPI_TransmitReceive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	685a      	ldr	r2, [r3, #4]
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80090d8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80090de:	b29b      	uxth	r3, r3
 80090e0:	085b      	lsrs	r3, r3, #1
 80090e2:	b29a      	uxth	r2, r3
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80090e8:	e010      	b.n	800910c <HAL_SPI_TransmitReceive_DMA+0x14c>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	685a      	ldr	r2, [r3, #4]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80090f8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80090fe:	b29b      	uxth	r3, r3
 8009100:	085b      	lsrs	r3, r3, #1
 8009102:	b29b      	uxth	r3, r3
 8009104:	3301      	adds	r3, #1
 8009106:	b29a      	uxth	r2, r3
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009110:	699b      	ldr	r3, [r3, #24]
 8009112:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009116:	d134      	bne.n	8009182 <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	685a      	ldr	r2, [r3, #4]
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009126:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800912e:	b29b      	uxth	r3, r3
 8009130:	f003 0301 	and.w	r3, r3, #1
 8009134:	2b00      	cmp	r3, #0
 8009136:	d111      	bne.n	800915c <HAL_SPI_TransmitReceive_DMA+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	685a      	ldr	r2, [r3, #4]
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009146:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800914e:	b29b      	uxth	r3, r3
 8009150:	085b      	lsrs	r3, r3, #1
 8009152:	b29a      	uxth	r2, r3
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800915a:	e012      	b.n	8009182 <HAL_SPI_TransmitReceive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	685a      	ldr	r2, [r3, #4]
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800916a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009172:	b29b      	uxth	r3, r3
 8009174:	085b      	lsrs	r3, r3, #1
 8009176:	b29b      	uxth	r3, r3
 8009178:	3301      	adds	r3, #1
 800917a:	b29a      	uxth	r2, r3
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009188:	b2db      	uxtb	r3, r3
 800918a:	2b04      	cmp	r3, #4
 800918c:	d108      	bne.n	80091a0 <HAL_SPI_TransmitReceive_DMA+0x1e0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009192:	4a49      	ldr	r2, [pc, #292]	@ (80092b8 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 8009194:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800919a:	4a48      	ldr	r2, [pc, #288]	@ (80092bc <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 800919c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800919e:	e007      	b.n	80091b0 <HAL_SPI_TransmitReceive_DMA+0x1f0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091a4:	4a46      	ldr	r2, [pc, #280]	@ (80092c0 <HAL_SPI_TransmitReceive_DMA+0x300>)
 80091a6:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091ac:	4a45      	ldr	r2, [pc, #276]	@ (80092c4 <HAL_SPI_TransmitReceive_DMA+0x304>)
 80091ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091b4:	4a44      	ldr	r2, [pc, #272]	@ (80092c8 <HAL_SPI_TransmitReceive_DMA+0x308>)
 80091b6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091bc:	2200      	movs	r2, #0
 80091be:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	330c      	adds	r3, #12
 80091ca:	4619      	mov	r1, r3
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091d0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80091d8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80091da:	f7fa f95f 	bl	800349c <HAL_DMA_Start_IT>
 80091de:	4603      	mov	r3, r0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d00b      	beq.n	80091fc <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091e8:	f043 0210 	orr.w	r2, r3, #16
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2200      	movs	r2, #0
 80091f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
 80091fa:	e058      	b.n	80092ae <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	685a      	ldr	r2, [r3, #4]
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f042 0201 	orr.w	r2, r2, #1
 800920a:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009210:	2200      	movs	r2, #0
 8009212:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009218:	2200      	movs	r2, #0
 800921a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009220:	2200      	movs	r2, #0
 8009222:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009228:	2200      	movs	r2, #0
 800922a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009234:	4619      	mov	r1, r3
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	330c      	adds	r3, #12
 800923c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009242:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009244:	f7fa f92a 	bl	800349c <HAL_DMA_Start_IT>
 8009248:	4603      	mov	r3, r0
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00b      	beq.n	8009266 <HAL_SPI_TransmitReceive_DMA+0x2a6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009252:	f043 0210 	orr.w	r2, r3, #16
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2200      	movs	r2, #0
 800925e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8009262:	2301      	movs	r3, #1
 8009264:	e023      	b.n	80092ae <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009270:	2b40      	cmp	r3, #64	@ 0x40
 8009272:	d007      	beq.n	8009284 <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009282:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2200      	movs	r2, #0
 8009288:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	685a      	ldr	r2, [r3, #4]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f042 0220 	orr.w	r2, r2, #32
 800929a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	685a      	ldr	r2, [r3, #4]
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f042 0202 	orr.w	r2, r2, #2
 80092aa:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3718      	adds	r7, #24
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	bf00      	nop
 80092b8:	08009731 	.word	0x08009731
 80092bc:	080095d9 	.word	0x080095d9
 80092c0:	0800974d 	.word	0x0800974d
 80092c4:	08009683 	.word	0x08009683
 80092c8:	08009769 	.word	0x08009769

080092cc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b088      	sub	sp, #32
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80092e4:	69bb      	ldr	r3, [r7, #24]
 80092e6:	099b      	lsrs	r3, r3, #6
 80092e8:	f003 0301 	and.w	r3, r3, #1
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d10f      	bne.n	8009310 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d00a      	beq.n	8009310 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80092fa:	69fb      	ldr	r3, [r7, #28]
 80092fc:	099b      	lsrs	r3, r3, #6
 80092fe:	f003 0301 	and.w	r3, r3, #1
 8009302:	2b00      	cmp	r3, #0
 8009304:	d004      	beq.n	8009310 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	4798      	blx	r3
    return;
 800930e:	e0d7      	b.n	80094c0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	085b      	lsrs	r3, r3, #1
 8009314:	f003 0301 	and.w	r3, r3, #1
 8009318:	2b00      	cmp	r3, #0
 800931a:	d00a      	beq.n	8009332 <HAL_SPI_IRQHandler+0x66>
 800931c:	69fb      	ldr	r3, [r7, #28]
 800931e:	09db      	lsrs	r3, r3, #7
 8009320:	f003 0301 	and.w	r3, r3, #1
 8009324:	2b00      	cmp	r3, #0
 8009326:	d004      	beq.n	8009332 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	4798      	blx	r3
    return;
 8009330:	e0c6      	b.n	80094c0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	095b      	lsrs	r3, r3, #5
 8009336:	f003 0301 	and.w	r3, r3, #1
 800933a:	2b00      	cmp	r3, #0
 800933c:	d10c      	bne.n	8009358 <HAL_SPI_IRQHandler+0x8c>
 800933e:	69bb      	ldr	r3, [r7, #24]
 8009340:	099b      	lsrs	r3, r3, #6
 8009342:	f003 0301 	and.w	r3, r3, #1
 8009346:	2b00      	cmp	r3, #0
 8009348:	d106      	bne.n	8009358 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800934a:	69bb      	ldr	r3, [r7, #24]
 800934c:	0a1b      	lsrs	r3, r3, #8
 800934e:	f003 0301 	and.w	r3, r3, #1
 8009352:	2b00      	cmp	r3, #0
 8009354:	f000 80b4 	beq.w	80094c0 <HAL_SPI_IRQHandler+0x1f4>
 8009358:	69fb      	ldr	r3, [r7, #28]
 800935a:	095b      	lsrs	r3, r3, #5
 800935c:	f003 0301 	and.w	r3, r3, #1
 8009360:	2b00      	cmp	r3, #0
 8009362:	f000 80ad 	beq.w	80094c0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009366:	69bb      	ldr	r3, [r7, #24]
 8009368:	099b      	lsrs	r3, r3, #6
 800936a:	f003 0301 	and.w	r3, r3, #1
 800936e:	2b00      	cmp	r3, #0
 8009370:	d023      	beq.n	80093ba <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009378:	b2db      	uxtb	r3, r3
 800937a:	2b03      	cmp	r3, #3
 800937c:	d011      	beq.n	80093a2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009382:	f043 0204 	orr.w	r2, r3, #4
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800938a:	2300      	movs	r3, #0
 800938c:	617b      	str	r3, [r7, #20]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	617b      	str	r3, [r7, #20]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	689b      	ldr	r3, [r3, #8]
 800939c:	617b      	str	r3, [r7, #20]
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	e00b      	b.n	80093ba <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80093a2:	2300      	movs	r3, #0
 80093a4:	613b      	str	r3, [r7, #16]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	613b      	str	r3, [r7, #16]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	613b      	str	r3, [r7, #16]
 80093b6:	693b      	ldr	r3, [r7, #16]
        return;
 80093b8:	e082      	b.n	80094c0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80093ba:	69bb      	ldr	r3, [r7, #24]
 80093bc:	095b      	lsrs	r3, r3, #5
 80093be:	f003 0301 	and.w	r3, r3, #1
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d014      	beq.n	80093f0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093ca:	f043 0201 	orr.w	r2, r3, #1
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80093d2:	2300      	movs	r3, #0
 80093d4:	60fb      	str	r3, [r7, #12]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	60fb      	str	r3, [r7, #12]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80093ec:	601a      	str	r2, [r3, #0]
 80093ee:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80093f0:	69bb      	ldr	r3, [r7, #24]
 80093f2:	0a1b      	lsrs	r3, r3, #8
 80093f4:	f003 0301 	and.w	r3, r3, #1
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d00c      	beq.n	8009416 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009400:	f043 0208 	orr.w	r2, r3, #8
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009408:	2300      	movs	r3, #0
 800940a:	60bb      	str	r3, [r7, #8]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	689b      	ldr	r3, [r3, #8]
 8009412:	60bb      	str	r3, [r7, #8]
 8009414:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800941a:	2b00      	cmp	r3, #0
 800941c:	d04f      	beq.n	80094be <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	685a      	ldr	r2, [r3, #4]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800942c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2201      	movs	r2, #1
 8009432:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009436:	69fb      	ldr	r3, [r7, #28]
 8009438:	f003 0302 	and.w	r3, r3, #2
 800943c:	2b00      	cmp	r3, #0
 800943e:	d104      	bne.n	800944a <HAL_SPI_IRQHandler+0x17e>
 8009440:	69fb      	ldr	r3, [r7, #28]
 8009442:	f003 0301 	and.w	r3, r3, #1
 8009446:	2b00      	cmp	r3, #0
 8009448:	d034      	beq.n	80094b4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	685a      	ldr	r2, [r3, #4]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f022 0203 	bic.w	r2, r2, #3
 8009458:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800945e:	2b00      	cmp	r3, #0
 8009460:	d011      	beq.n	8009486 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009466:	4a18      	ldr	r2, [pc, #96]	@ (80094c8 <HAL_SPI_IRQHandler+0x1fc>)
 8009468:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800946e:	4618      	mov	r0, r3
 8009470:	f7fa f8e4 	bl	800363c <HAL_DMA_Abort_IT>
 8009474:	4603      	mov	r3, r0
 8009476:	2b00      	cmp	r3, #0
 8009478:	d005      	beq.n	8009486 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800947e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800948a:	2b00      	cmp	r3, #0
 800948c:	d016      	beq.n	80094bc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009492:	4a0d      	ldr	r2, [pc, #52]	@ (80094c8 <HAL_SPI_IRQHandler+0x1fc>)
 8009494:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800949a:	4618      	mov	r0, r3
 800949c:	f7fa f8ce 	bl	800363c <HAL_DMA_Abort_IT>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d00a      	beq.n	80094bc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80094b2:	e003      	b.n	80094bc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 f831 	bl	800951c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80094ba:	e000      	b.n	80094be <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80094bc:	bf00      	nop
    return;
 80094be:	bf00      	nop
  }
}
 80094c0:	3720      	adds	r7, #32
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop
 80094c8:	080097a9 	.word	0x080097a9

080094cc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80094d4:	bf00      	nop
 80094d6:	370c      	adds	r7, #12
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80094e8:	bf00      	nop
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80094fc:	bf00      	nop
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8009510:	bf00      	nop
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009524:	bf00      	nop
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b086      	sub	sp, #24
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800953c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800953e:	f7f8 ff5d 	bl	80023fc <HAL_GetTick>
 8009542:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800954e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009552:	d03b      	beq.n	80095cc <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	685a      	ldr	r2, [r3, #4]
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f022 0220 	bic.w	r2, r2, #32
 8009562:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	685a      	ldr	r2, [r3, #4]
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f022 0202 	bic.w	r2, r2, #2
 8009572:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009574:	693a      	ldr	r2, [r7, #16]
 8009576:	2164      	movs	r1, #100	@ 0x64
 8009578:	6978      	ldr	r0, [r7, #20]
 800957a:	f000 fac5 	bl	8009b08 <SPI_EndRxTxTransaction>
 800957e:	4603      	mov	r3, r0
 8009580:	2b00      	cmp	r3, #0
 8009582:	d005      	beq.n	8009590 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009588:	f043 0220 	orr.w	r2, r3, #32
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d10a      	bne.n	80095ae <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009598:	2300      	movs	r3, #0
 800959a:	60fb      	str	r3, [r7, #12]
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	60fb      	str	r3, [r7, #12]
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	689b      	ldr	r3, [r3, #8]
 80095aa:	60fb      	str	r3, [r7, #12]
 80095ac:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	2200      	movs	r2, #0
 80095b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	2201      	movs	r2, #1
 80095b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d003      	beq.n	80095cc <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80095c4:	6978      	ldr	r0, [r7, #20]
 80095c6:	f7ff ffa9 	bl	800951c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80095ca:	e002      	b.n	80095d2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80095cc:	6978      	ldr	r0, [r7, #20]
 80095ce:	f017 fa25 	bl	8020a1c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80095d2:	3718      	adds	r7, #24
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095e4:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80095e6:	f7f8 ff09 	bl	80023fc <HAL_GetTick>
 80095ea:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095fa:	d03c      	beq.n	8009676 <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	685a      	ldr	r2, [r3, #4]
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f022 0220 	bic.w	r2, r2, #32
 800960a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d10d      	bne.n	8009630 <SPI_DMAReceiveCplt+0x58>
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800961c:	d108      	bne.n	8009630 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	685a      	ldr	r2, [r3, #4]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f022 0203 	bic.w	r2, r2, #3
 800962c:	605a      	str	r2, [r3, #4]
 800962e:	e007      	b.n	8009640 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	685a      	ldr	r2, [r3, #4]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f022 0201 	bic.w	r2, r2, #1
 800963e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009640:	68ba      	ldr	r2, [r7, #8]
 8009642:	2164      	movs	r1, #100	@ 0x64
 8009644:	68f8      	ldr	r0, [r7, #12]
 8009646:	f000 f9e3 	bl	8009a10 <SPI_EndRxTransaction>
 800964a:	4603      	mov	r3, r0
 800964c:	2b00      	cmp	r3, #0
 800964e:	d002      	beq.n	8009656 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2220      	movs	r2, #32
 8009654:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2200      	movs	r2, #0
 800965a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2201      	movs	r2, #1
 8009662:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800966a:	2b00      	cmp	r3, #0
 800966c:	d003      	beq.n	8009676 <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f7ff ff54 	bl	800951c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009674:	e002      	b.n	800967c <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8009676:	68f8      	ldr	r0, [r7, #12]
 8009678:	f017 f9f0 	bl	8020a5c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800967c:	3710      	adds	r7, #16
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}

08009682 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009682:	b580      	push	{r7, lr}
 8009684:	b084      	sub	sp, #16
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800968e:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009690:	f7f8 feb4 	bl	80023fc <HAL_GetTick>
 8009694:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096a4:	d030      	beq.n	8009708 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	685a      	ldr	r2, [r3, #4]
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f022 0220 	bic.w	r2, r2, #32
 80096b4:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80096b6:	68ba      	ldr	r2, [r7, #8]
 80096b8:	2164      	movs	r1, #100	@ 0x64
 80096ba:	68f8      	ldr	r0, [r7, #12]
 80096bc:	f000 fa24 	bl	8009b08 <SPI_EndRxTxTransaction>
 80096c0:	4603      	mov	r3, r0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d005      	beq.n	80096d2 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096ca:	f043 0220 	orr.w	r2, r3, #32
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	685a      	ldr	r2, [r3, #4]
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f022 0203 	bic.w	r2, r2, #3
 80096e0:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2200      	movs	r2, #0
 80096e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2200      	movs	r2, #0
 80096ec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2201      	movs	r2, #1
 80096f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d003      	beq.n	8009708 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009700:	68f8      	ldr	r0, [r7, #12]
 8009702:	f7ff ff0b 	bl	800951c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009706:	e002      	b.n	800970e <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8009708:	68f8      	ldr	r0, [r7, #12]
 800970a:	f7ff fedf 	bl	80094cc <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800970e:	3710      	adds	r7, #16
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009720:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8009722:	68f8      	ldr	r0, [r7, #12]
 8009724:	f7ff fedc 	bl	80094e0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009728:	bf00      	nop
 800972a:	3710      	adds	r7, #16
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800973c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800973e:	68f8      	ldr	r0, [r7, #12]
 8009740:	f7ff fed8 	bl	80094f4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009744:	bf00      	nop
 8009746:	3710      	adds	r7, #16
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009758:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800975a:	68f8      	ldr	r0, [r7, #12]
 800975c:	f7ff fed4 	bl	8009508 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009760:	bf00      	nop
 8009762:	3710      	adds	r7, #16
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b084      	sub	sp, #16
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009774:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	685a      	ldr	r2, [r3, #4]
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f022 0203 	bic.w	r2, r2, #3
 8009784:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800978a:	f043 0210 	orr.w	r2, r3, #16
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2201      	movs	r2, #1
 8009796:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	f7ff febe 	bl	800951c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80097a0:	bf00      	nop
 80097a2:	3710      	adds	r7, #16
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097b4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2200      	movs	r2, #0
 80097ba:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2200      	movs	r2, #0
 80097c2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80097c4:	68f8      	ldr	r0, [r7, #12]
 80097c6:	f7ff fea9 	bl	800951c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80097ca:	bf00      	nop
 80097cc:	3710      	adds	r7, #16
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
	...

080097d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b088      	sub	sp, #32
 80097d8:	af00      	add	r7, sp, #0
 80097da:	60f8      	str	r0, [r7, #12]
 80097dc:	60b9      	str	r1, [r7, #8]
 80097de:	603b      	str	r3, [r7, #0]
 80097e0:	4613      	mov	r3, r2
 80097e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80097e4:	f7f8 fe0a 	bl	80023fc <HAL_GetTick>
 80097e8:	4602      	mov	r2, r0
 80097ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ec:	1a9b      	subs	r3, r3, r2
 80097ee:	683a      	ldr	r2, [r7, #0]
 80097f0:	4413      	add	r3, r2
 80097f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80097f4:	f7f8 fe02 	bl	80023fc <HAL_GetTick>
 80097f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80097fa:	4b39      	ldr	r3, [pc, #228]	@ (80098e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	015b      	lsls	r3, r3, #5
 8009800:	0d1b      	lsrs	r3, r3, #20
 8009802:	69fa      	ldr	r2, [r7, #28]
 8009804:	fb02 f303 	mul.w	r3, r2, r3
 8009808:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800980a:	e055      	b.n	80098b8 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009812:	d051      	beq.n	80098b8 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009814:	f7f8 fdf2 	bl	80023fc <HAL_GetTick>
 8009818:	4602      	mov	r2, r0
 800981a:	69bb      	ldr	r3, [r7, #24]
 800981c:	1ad3      	subs	r3, r2, r3
 800981e:	69fa      	ldr	r2, [r7, #28]
 8009820:	429a      	cmp	r2, r3
 8009822:	d902      	bls.n	800982a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009824:	69fb      	ldr	r3, [r7, #28]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d13d      	bne.n	80098a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	685a      	ldr	r2, [r3, #4]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009838:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009842:	d111      	bne.n	8009868 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	689b      	ldr	r3, [r3, #8]
 8009848:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800984c:	d004      	beq.n	8009858 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	689b      	ldr	r3, [r3, #8]
 8009852:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009856:	d107      	bne.n	8009868 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009866:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800986c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009870:	d10f      	bne.n	8009892 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	681a      	ldr	r2, [r3, #0]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009880:	601a      	str	r2, [r3, #0]
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	681a      	ldr	r2, [r3, #0]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009890:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2201      	movs	r2, #1
 8009896:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2200      	movs	r2, #0
 800989e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80098a2:	2303      	movs	r3, #3
 80098a4:	e018      	b.n	80098d8 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d102      	bne.n	80098b2 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80098ac:	2300      	movs	r3, #0
 80098ae:	61fb      	str	r3, [r7, #28]
 80098b0:	e002      	b.n	80098b8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	3b01      	subs	r3, #1
 80098b6:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	689a      	ldr	r2, [r3, #8]
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	4013      	ands	r3, r2
 80098c2:	68ba      	ldr	r2, [r7, #8]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	bf0c      	ite	eq
 80098c8:	2301      	moveq	r3, #1
 80098ca:	2300      	movne	r3, #0
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	461a      	mov	r2, r3
 80098d0:	79fb      	ldrb	r3, [r7, #7]
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d19a      	bne.n	800980c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80098d6:	2300      	movs	r3, #0
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3720      	adds	r7, #32
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}
 80098e0:	20000000 	.word	0x20000000

080098e4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b08a      	sub	sp, #40	@ 0x28
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	607a      	str	r2, [r7, #4]
 80098f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80098f2:	2300      	movs	r3, #0
 80098f4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80098f6:	f7f8 fd81 	bl	80023fc <HAL_GetTick>
 80098fa:	4602      	mov	r2, r0
 80098fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098fe:	1a9b      	subs	r3, r3, r2
 8009900:	683a      	ldr	r2, [r7, #0]
 8009902:	4413      	add	r3, r2
 8009904:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009906:	f7f8 fd79 	bl	80023fc <HAL_GetTick>
 800990a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	330c      	adds	r3, #12
 8009912:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009914:	4b3d      	ldr	r3, [pc, #244]	@ (8009a0c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009916:	681a      	ldr	r2, [r3, #0]
 8009918:	4613      	mov	r3, r2
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	4413      	add	r3, r2
 800991e:	00da      	lsls	r2, r3, #3
 8009920:	1ad3      	subs	r3, r2, r3
 8009922:	0d1b      	lsrs	r3, r3, #20
 8009924:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009926:	fb02 f303 	mul.w	r3, r2, r3
 800992a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800992c:	e061      	b.n	80099f2 <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009934:	d107      	bne.n	8009946 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d104      	bne.n	8009946 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	b2db      	uxtb	r3, r3
 8009942:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009944:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800994c:	d051      	beq.n	80099f2 <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800994e:	f7f8 fd55 	bl	80023fc <HAL_GetTick>
 8009952:	4602      	mov	r2, r0
 8009954:	6a3b      	ldr	r3, [r7, #32]
 8009956:	1ad3      	subs	r3, r2, r3
 8009958:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800995a:	429a      	cmp	r2, r3
 800995c:	d902      	bls.n	8009964 <SPI_WaitFifoStateUntilTimeout+0x80>
 800995e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009960:	2b00      	cmp	r3, #0
 8009962:	d13d      	bne.n	80099e0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	685a      	ldr	r2, [r3, #4]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009972:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800997c:	d111      	bne.n	80099a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	689b      	ldr	r3, [r3, #8]
 8009982:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009986:	d004      	beq.n	8009992 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	689b      	ldr	r3, [r3, #8]
 800998c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009990:	d107      	bne.n	80099a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80099a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099aa:	d10f      	bne.n	80099cc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80099ba:	601a      	str	r2, [r3, #0]
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	681a      	ldr	r2, [r3, #0]
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80099ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2201      	movs	r2, #1
 80099d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2200      	movs	r2, #0
 80099d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80099dc:	2303      	movs	r3, #3
 80099de:	e011      	b.n	8009a04 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80099e0:	69bb      	ldr	r3, [r7, #24]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d102      	bne.n	80099ec <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 80099e6:	2300      	movs	r3, #0
 80099e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80099ea:	e002      	b.n	80099f2 <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 80099ec:	69bb      	ldr	r3, [r7, #24]
 80099ee:	3b01      	subs	r3, #1
 80099f0:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	689a      	ldr	r2, [r3, #8]
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	4013      	ands	r3, r2
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d195      	bne.n	800992e <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 8009a02:	2300      	movs	r3, #0
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3728      	adds	r7, #40	@ 0x28
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}
 8009a0c:	20000000 	.word	0x20000000

08009a10 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b088      	sub	sp, #32
 8009a14:	af02      	add	r7, sp, #8
 8009a16:	60f8      	str	r0, [r7, #12]
 8009a18:	60b9      	str	r1, [r7, #8]
 8009a1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009a24:	d111      	bne.n	8009a4a <SPI_EndRxTransaction+0x3a>
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	689b      	ldr	r3, [r3, #8]
 8009a2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a2e:	d004      	beq.n	8009a3a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a38:	d107      	bne.n	8009a4a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	681a      	ldr	r2, [r3, #0]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009a48:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009a52:	d112      	bne.n	8009a7a <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	9300      	str	r3, [sp, #0]
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	2180      	movs	r1, #128	@ 0x80
 8009a5e:	68f8      	ldr	r0, [r7, #12]
 8009a60:	f7ff feb8 	bl	80097d4 <SPI_WaitFlagStateUntilTimeout>
 8009a64:	4603      	mov	r3, r0
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d021      	beq.n	8009aae <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a6e:	f043 0220 	orr.w	r2, r3, #32
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009a76:	2303      	movs	r3, #3
 8009a78:	e03d      	b.n	8009af6 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in us */
    count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009a7a:	4b21      	ldr	r3, [pc, #132]	@ (8009b00 <SPI_EndRxTransaction+0xf0>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4a21      	ldr	r2, [pc, #132]	@ (8009b04 <SPI_EndRxTransaction+0xf4>)
 8009a80:	fba2 2303 	umull	r2, r3, r2, r3
 8009a84:	0d5b      	lsrs	r3, r3, #21
 8009a86:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009a8a:	fb02 f303 	mul.w	r3, r2, r3
 8009a8e:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d00a      	beq.n	8009aac <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	3b01      	subs	r3, #1
 8009a9a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	689b      	ldr	r3, [r3, #8]
 8009aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009aa6:	2b80      	cmp	r3, #128	@ 0x80
 8009aa8:	d0f2      	beq.n	8009a90 <SPI_EndRxTransaction+0x80>
 8009aaa:	e000      	b.n	8009aae <SPI_EndRxTransaction+0x9e>
        break;
 8009aac:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009ab6:	d11d      	bne.n	8009af4 <SPI_EndRxTransaction+0xe4>
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ac0:	d004      	beq.n	8009acc <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	689b      	ldr	r3, [r3, #8]
 8009ac6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009aca:	d113      	bne.n	8009af4 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	9300      	str	r3, [sp, #0]
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009ad8:	68f8      	ldr	r0, [r7, #12]
 8009ada:	f7ff ff03 	bl	80098e4 <SPI_WaitFifoStateUntilTimeout>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d007      	beq.n	8009af4 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ae8:	f043 0220 	orr.w	r2, r3, #32
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009af0:	2303      	movs	r3, #3
 8009af2:	e000      	b.n	8009af6 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8009af4:	2300      	movs	r3, #0
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3718      	adds	r7, #24
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	bf00      	nop
 8009b00:	20000000 	.word	0x20000000
 8009b04:	165e9f81 	.word	0x165e9f81

08009b08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b088      	sub	sp, #32
 8009b0c:	af02      	add	r7, sp, #8
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	9300      	str	r3, [sp, #0]
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009b20:	68f8      	ldr	r0, [r7, #12]
 8009b22:	f7ff fedf 	bl	80098e4 <SPI_WaitFifoStateUntilTimeout>
 8009b26:	4603      	mov	r3, r0
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d007      	beq.n	8009b3c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b30:	f043 0220 	orr.w	r2, r3, #32
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009b38:	2303      	movs	r3, #3
 8009b3a:	e046      	b.n	8009bca <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009b3c:	4b25      	ldr	r3, [pc, #148]	@ (8009bd4 <SPI_EndRxTxTransaction+0xcc>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a25      	ldr	r2, [pc, #148]	@ (8009bd8 <SPI_EndRxTxTransaction+0xd0>)
 8009b42:	fba2 2303 	umull	r2, r3, r2, r3
 8009b46:	0d5b      	lsrs	r3, r3, #21
 8009b48:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009b4c:	fb02 f303 	mul.w	r3, r2, r3
 8009b50:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009b5a:	d112      	bne.n	8009b82 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	9300      	str	r3, [sp, #0]
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	2200      	movs	r2, #0
 8009b64:	2180      	movs	r1, #128	@ 0x80
 8009b66:	68f8      	ldr	r0, [r7, #12]
 8009b68:	f7ff fe34 	bl	80097d4 <SPI_WaitFlagStateUntilTimeout>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d016      	beq.n	8009ba0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b76:	f043 0220 	orr.w	r2, r3, #32
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009b7e:	2303      	movs	r3, #3
 8009b80:	e023      	b.n	8009bca <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d00a      	beq.n	8009b9e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	3b01      	subs	r3, #1
 8009b8c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	689b      	ldr	r3, [r3, #8]
 8009b94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b98:	2b80      	cmp	r3, #128	@ 0x80
 8009b9a:	d0f2      	beq.n	8009b82 <SPI_EndRxTxTransaction+0x7a>
 8009b9c:	e000      	b.n	8009ba0 <SPI_EndRxTxTransaction+0x98>
        break;
 8009b9e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	9300      	str	r3, [sp, #0]
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009bac:	68f8      	ldr	r0, [r7, #12]
 8009bae:	f7ff fe99 	bl	80098e4 <SPI_WaitFifoStateUntilTimeout>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d007      	beq.n	8009bc8 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bbc:	f043 0220 	orr.w	r2, r3, #32
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009bc4:	2303      	movs	r3, #3
 8009bc6:	e000      	b.n	8009bca <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8009bc8:	2300      	movs	r3, #0
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3718      	adds	r7, #24
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	20000000 	.word	0x20000000
 8009bd8:	165e9f81 	.word	0x165e9f81

08009bdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b082      	sub	sp, #8
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d101      	bne.n	8009bee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009bea:	2301      	movs	r3, #1
 8009bec:	e049      	b.n	8009c82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009bf4:	b2db      	uxtb	r3, r3
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d106      	bne.n	8009c08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f7f8 f824 	bl	8001c50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2202      	movs	r2, #2
 8009c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	3304      	adds	r3, #4
 8009c18:	4619      	mov	r1, r3
 8009c1a:	4610      	mov	r0, r2
 8009c1c:	f000 fb40 	bl	800a2a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2201      	movs	r2, #1
 8009c24:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2201      	movs	r2, #1
 8009c34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2201      	movs	r2, #1
 8009c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2201      	movs	r2, #1
 8009c4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2201      	movs	r2, #1
 8009c54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2201      	movs	r2, #1
 8009c64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2201      	movs	r2, #1
 8009c74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009c80:	2300      	movs	r3, #0
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3708      	adds	r7, #8
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
	...

08009c8c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b085      	sub	sp, #20
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	d001      	beq.n	8009ca4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	e04c      	b.n	8009d3e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2202      	movs	r2, #2
 8009ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4a26      	ldr	r2, [pc, #152]	@ (8009d4c <HAL_TIM_Base_Start+0xc0>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d022      	beq.n	8009cfc <HAL_TIM_Base_Start+0x70>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cbe:	d01d      	beq.n	8009cfc <HAL_TIM_Base_Start+0x70>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4a22      	ldr	r2, [pc, #136]	@ (8009d50 <HAL_TIM_Base_Start+0xc4>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d018      	beq.n	8009cfc <HAL_TIM_Base_Start+0x70>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4a21      	ldr	r2, [pc, #132]	@ (8009d54 <HAL_TIM_Base_Start+0xc8>)
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d013      	beq.n	8009cfc <HAL_TIM_Base_Start+0x70>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4a1f      	ldr	r2, [pc, #124]	@ (8009d58 <HAL_TIM_Base_Start+0xcc>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d00e      	beq.n	8009cfc <HAL_TIM_Base_Start+0x70>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	4a1e      	ldr	r2, [pc, #120]	@ (8009d5c <HAL_TIM_Base_Start+0xd0>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d009      	beq.n	8009cfc <HAL_TIM_Base_Start+0x70>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a1c      	ldr	r2, [pc, #112]	@ (8009d60 <HAL_TIM_Base_Start+0xd4>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d004      	beq.n	8009cfc <HAL_TIM_Base_Start+0x70>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4a1b      	ldr	r2, [pc, #108]	@ (8009d64 <HAL_TIM_Base_Start+0xd8>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d115      	bne.n	8009d28 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	689a      	ldr	r2, [r3, #8]
 8009d02:	4b19      	ldr	r3, [pc, #100]	@ (8009d68 <HAL_TIM_Base_Start+0xdc>)
 8009d04:	4013      	ands	r3, r2
 8009d06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	2b06      	cmp	r3, #6
 8009d0c:	d015      	beq.n	8009d3a <HAL_TIM_Base_Start+0xae>
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d14:	d011      	beq.n	8009d3a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f042 0201 	orr.w	r2, r2, #1
 8009d24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d26:	e008      	b.n	8009d3a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f042 0201 	orr.w	r2, r2, #1
 8009d36:	601a      	str	r2, [r3, #0]
 8009d38:	e000      	b.n	8009d3c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009d3c:	2300      	movs	r3, #0
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3714      	adds	r7, #20
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr
 8009d4a:	bf00      	nop
 8009d4c:	40010000 	.word	0x40010000
 8009d50:	40000400 	.word	0x40000400
 8009d54:	40000800 	.word	0x40000800
 8009d58:	40000c00 	.word	0x40000c00
 8009d5c:	40010400 	.word	0x40010400
 8009d60:	40014000 	.word	0x40014000
 8009d64:	40001800 	.word	0x40001800
 8009d68:	00010007 	.word	0x00010007

08009d6c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	6a1a      	ldr	r2, [r3, #32]
 8009d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8009db8 <HAL_TIM_Base_Stop+0x4c>)
 8009d7c:	4013      	ands	r3, r2
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d10f      	bne.n	8009da2 <HAL_TIM_Base_Stop+0x36>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	6a1a      	ldr	r2, [r3, #32]
 8009d88:	f240 4344 	movw	r3, #1092	@ 0x444
 8009d8c:	4013      	ands	r3, r2
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d107      	bne.n	8009da2 <HAL_TIM_Base_Stop+0x36>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	681a      	ldr	r2, [r3, #0]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f022 0201 	bic.w	r2, r2, #1
 8009da0:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2201      	movs	r2, #1
 8009da6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8009daa:	2300      	movs	r3, #0
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	370c      	adds	r7, #12
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr
 8009db8:	00111111 	.word	0x00111111

08009dbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b085      	sub	sp, #20
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009dca:	b2db      	uxtb	r3, r3
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	d001      	beq.n	8009dd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	e054      	b.n	8009e7e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2202      	movs	r2, #2
 8009dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	68da      	ldr	r2, [r3, #12]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f042 0201 	orr.w	r2, r2, #1
 8009dea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a26      	ldr	r2, [pc, #152]	@ (8009e8c <HAL_TIM_Base_Start_IT+0xd0>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d022      	beq.n	8009e3c <HAL_TIM_Base_Start_IT+0x80>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009dfe:	d01d      	beq.n	8009e3c <HAL_TIM_Base_Start_IT+0x80>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4a22      	ldr	r2, [pc, #136]	@ (8009e90 <HAL_TIM_Base_Start_IT+0xd4>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d018      	beq.n	8009e3c <HAL_TIM_Base_Start_IT+0x80>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a21      	ldr	r2, [pc, #132]	@ (8009e94 <HAL_TIM_Base_Start_IT+0xd8>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d013      	beq.n	8009e3c <HAL_TIM_Base_Start_IT+0x80>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a1f      	ldr	r2, [pc, #124]	@ (8009e98 <HAL_TIM_Base_Start_IT+0xdc>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d00e      	beq.n	8009e3c <HAL_TIM_Base_Start_IT+0x80>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4a1e      	ldr	r2, [pc, #120]	@ (8009e9c <HAL_TIM_Base_Start_IT+0xe0>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d009      	beq.n	8009e3c <HAL_TIM_Base_Start_IT+0x80>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4a1c      	ldr	r2, [pc, #112]	@ (8009ea0 <HAL_TIM_Base_Start_IT+0xe4>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d004      	beq.n	8009e3c <HAL_TIM_Base_Start_IT+0x80>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4a1b      	ldr	r2, [pc, #108]	@ (8009ea4 <HAL_TIM_Base_Start_IT+0xe8>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d115      	bne.n	8009e68 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	689a      	ldr	r2, [r3, #8]
 8009e42:	4b19      	ldr	r3, [pc, #100]	@ (8009ea8 <HAL_TIM_Base_Start_IT+0xec>)
 8009e44:	4013      	ands	r3, r2
 8009e46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2b06      	cmp	r3, #6
 8009e4c:	d015      	beq.n	8009e7a <HAL_TIM_Base_Start_IT+0xbe>
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e54:	d011      	beq.n	8009e7a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f042 0201 	orr.w	r2, r2, #1
 8009e64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e66:	e008      	b.n	8009e7a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	681a      	ldr	r2, [r3, #0]
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f042 0201 	orr.w	r2, r2, #1
 8009e76:	601a      	str	r2, [r3, #0]
 8009e78:	e000      	b.n	8009e7c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009e7c:	2300      	movs	r3, #0
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3714      	adds	r7, #20
 8009e82:	46bd      	mov	sp, r7
 8009e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e88:	4770      	bx	lr
 8009e8a:	bf00      	nop
 8009e8c:	40010000 	.word	0x40010000
 8009e90:	40000400 	.word	0x40000400
 8009e94:	40000800 	.word	0x40000800
 8009e98:	40000c00 	.word	0x40000c00
 8009e9c:	40010400 	.word	0x40010400
 8009ea0:	40014000 	.word	0x40014000
 8009ea4:	40001800 	.word	0x40001800
 8009ea8:	00010007 	.word	0x00010007

08009eac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	68db      	ldr	r3, [r3, #12]
 8009eba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	691b      	ldr	r3, [r3, #16]
 8009ec2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	f003 0302 	and.w	r3, r3, #2
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d020      	beq.n	8009f10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	f003 0302 	and.w	r3, r3, #2
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d01b      	beq.n	8009f10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f06f 0202 	mvn.w	r2, #2
 8009ee0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	699b      	ldr	r3, [r3, #24]
 8009eee:	f003 0303 	and.w	r3, r3, #3
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d003      	beq.n	8009efe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 f9b4 	bl	800a264 <HAL_TIM_IC_CaptureCallback>
 8009efc:	e005      	b.n	8009f0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 f9a6 	bl	800a250 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 f9b7 	bl	800a278 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	f003 0304 	and.w	r3, r3, #4
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d020      	beq.n	8009f5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f003 0304 	and.w	r3, r3, #4
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d01b      	beq.n	8009f5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f06f 0204 	mvn.w	r2, #4
 8009f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2202      	movs	r2, #2
 8009f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	699b      	ldr	r3, [r3, #24]
 8009f3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d003      	beq.n	8009f4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 f98e 	bl	800a264 <HAL_TIM_IC_CaptureCallback>
 8009f48:	e005      	b.n	8009f56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 f980 	bl	800a250 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f000 f991 	bl	800a278 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	f003 0308 	and.w	r3, r3, #8
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d020      	beq.n	8009fa8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	f003 0308 	and.w	r3, r3, #8
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d01b      	beq.n	8009fa8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f06f 0208 	mvn.w	r2, #8
 8009f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2204      	movs	r2, #4
 8009f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	69db      	ldr	r3, [r3, #28]
 8009f86:	f003 0303 	and.w	r3, r3, #3
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d003      	beq.n	8009f96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 f968 	bl	800a264 <HAL_TIM_IC_CaptureCallback>
 8009f94:	e005      	b.n	8009fa2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 f95a 	bl	800a250 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 f96b 	bl	800a278 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	f003 0310 	and.w	r3, r3, #16
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d020      	beq.n	8009ff4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	f003 0310 	and.w	r3, r3, #16
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d01b      	beq.n	8009ff4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f06f 0210 	mvn.w	r2, #16
 8009fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2208      	movs	r2, #8
 8009fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	69db      	ldr	r3, [r3, #28]
 8009fd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d003      	beq.n	8009fe2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f000 f942 	bl	800a264 <HAL_TIM_IC_CaptureCallback>
 8009fe0:	e005      	b.n	8009fee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f000 f934 	bl	800a250 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f000 f945 	bl	800a278 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	f003 0301 	and.w	r3, r3, #1
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d00c      	beq.n	800a018 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f003 0301 	and.w	r3, r3, #1
 800a004:	2b00      	cmp	r3, #0
 800a006:	d007      	beq.n	800a018 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f06f 0201 	mvn.w	r2, #1
 800a010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f7f7 f924 	bl	8001260 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d104      	bne.n	800a02c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d00c      	beq.n	800a046 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a032:	2b00      	cmp	r3, #0
 800a034:	d007      	beq.n	800a046 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a03e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f000 fb05 	bl	800a650 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d00c      	beq.n	800a06a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a056:	2b00      	cmp	r3, #0
 800a058:	d007      	beq.n	800a06a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 fafd 	bl	800a664 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a070:	2b00      	cmp	r3, #0
 800a072:	d00c      	beq.n	800a08e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d007      	beq.n	800a08e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f000 f8ff 	bl	800a28c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	f003 0320 	and.w	r3, r3, #32
 800a094:	2b00      	cmp	r3, #0
 800a096:	d00c      	beq.n	800a0b2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f003 0320 	and.w	r3, r3, #32
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d007      	beq.n	800a0b2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f06f 0220 	mvn.w	r2, #32
 800a0aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f000 fac5 	bl	800a63c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a0b2:	bf00      	nop
 800a0b4:	3710      	adds	r7, #16
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
	...

0800a0bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b084      	sub	sp, #16
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d101      	bne.n	800a0d8 <HAL_TIM_ConfigClockSource+0x1c>
 800a0d4:	2302      	movs	r3, #2
 800a0d6:	e0b4      	b.n	800a242 <HAL_TIM_ConfigClockSource+0x186>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2202      	movs	r2, #2
 800a0e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	689b      	ldr	r3, [r3, #8]
 800a0ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a0f0:	68ba      	ldr	r2, [r7, #8]
 800a0f2:	4b56      	ldr	r3, [pc, #344]	@ (800a24c <HAL_TIM_ConfigClockSource+0x190>)
 800a0f4:	4013      	ands	r3, r2
 800a0f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a0fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	68ba      	ldr	r2, [r7, #8]
 800a106:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a110:	d03e      	beq.n	800a190 <HAL_TIM_ConfigClockSource+0xd4>
 800a112:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a116:	f200 8087 	bhi.w	800a228 <HAL_TIM_ConfigClockSource+0x16c>
 800a11a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a11e:	f000 8086 	beq.w	800a22e <HAL_TIM_ConfigClockSource+0x172>
 800a122:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a126:	d87f      	bhi.n	800a228 <HAL_TIM_ConfigClockSource+0x16c>
 800a128:	2b70      	cmp	r3, #112	@ 0x70
 800a12a:	d01a      	beq.n	800a162 <HAL_TIM_ConfigClockSource+0xa6>
 800a12c:	2b70      	cmp	r3, #112	@ 0x70
 800a12e:	d87b      	bhi.n	800a228 <HAL_TIM_ConfigClockSource+0x16c>
 800a130:	2b60      	cmp	r3, #96	@ 0x60
 800a132:	d050      	beq.n	800a1d6 <HAL_TIM_ConfigClockSource+0x11a>
 800a134:	2b60      	cmp	r3, #96	@ 0x60
 800a136:	d877      	bhi.n	800a228 <HAL_TIM_ConfigClockSource+0x16c>
 800a138:	2b50      	cmp	r3, #80	@ 0x50
 800a13a:	d03c      	beq.n	800a1b6 <HAL_TIM_ConfigClockSource+0xfa>
 800a13c:	2b50      	cmp	r3, #80	@ 0x50
 800a13e:	d873      	bhi.n	800a228 <HAL_TIM_ConfigClockSource+0x16c>
 800a140:	2b40      	cmp	r3, #64	@ 0x40
 800a142:	d058      	beq.n	800a1f6 <HAL_TIM_ConfigClockSource+0x13a>
 800a144:	2b40      	cmp	r3, #64	@ 0x40
 800a146:	d86f      	bhi.n	800a228 <HAL_TIM_ConfigClockSource+0x16c>
 800a148:	2b30      	cmp	r3, #48	@ 0x30
 800a14a:	d064      	beq.n	800a216 <HAL_TIM_ConfigClockSource+0x15a>
 800a14c:	2b30      	cmp	r3, #48	@ 0x30
 800a14e:	d86b      	bhi.n	800a228 <HAL_TIM_ConfigClockSource+0x16c>
 800a150:	2b20      	cmp	r3, #32
 800a152:	d060      	beq.n	800a216 <HAL_TIM_ConfigClockSource+0x15a>
 800a154:	2b20      	cmp	r3, #32
 800a156:	d867      	bhi.n	800a228 <HAL_TIM_ConfigClockSource+0x16c>
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d05c      	beq.n	800a216 <HAL_TIM_ConfigClockSource+0x15a>
 800a15c:	2b10      	cmp	r3, #16
 800a15e:	d05a      	beq.n	800a216 <HAL_TIM_ConfigClockSource+0x15a>
 800a160:	e062      	b.n	800a228 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a172:	f000 f9b5 	bl	800a4e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	689b      	ldr	r3, [r3, #8]
 800a17c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a184:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	68ba      	ldr	r2, [r7, #8]
 800a18c:	609a      	str	r2, [r3, #8]
      break;
 800a18e:	e04f      	b.n	800a230 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a1a0:	f000 f99e 	bl	800a4e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	689a      	ldr	r2, [r3, #8]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a1b2:	609a      	str	r2, [r3, #8]
      break;
 800a1b4:	e03c      	b.n	800a230 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	f000 f912 	bl	800a3ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	2150      	movs	r1, #80	@ 0x50
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f000 f96b 	bl	800a4aa <TIM_ITRx_SetConfig>
      break;
 800a1d4:	e02c      	b.n	800a230 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	f000 f931 	bl	800a44a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	2160      	movs	r1, #96	@ 0x60
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f000 f95b 	bl	800a4aa <TIM_ITRx_SetConfig>
      break;
 800a1f4:	e01c      	b.n	800a230 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a202:	461a      	mov	r2, r3
 800a204:	f000 f8f2 	bl	800a3ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2140      	movs	r1, #64	@ 0x40
 800a20e:	4618      	mov	r0, r3
 800a210:	f000 f94b 	bl	800a4aa <TIM_ITRx_SetConfig>
      break;
 800a214:	e00c      	b.n	800a230 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4619      	mov	r1, r3
 800a220:	4610      	mov	r0, r2
 800a222:	f000 f942 	bl	800a4aa <TIM_ITRx_SetConfig>
      break;
 800a226:	e003      	b.n	800a230 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a228:	2301      	movs	r3, #1
 800a22a:	73fb      	strb	r3, [r7, #15]
      break;
 800a22c:	e000      	b.n	800a230 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a22e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2201      	movs	r2, #1
 800a234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a240:	7bfb      	ldrb	r3, [r7, #15]
}
 800a242:	4618      	mov	r0, r3
 800a244:	3710      	adds	r7, #16
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	fffeff88 	.word	0xfffeff88

0800a250 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a250:	b480      	push	{r7}
 800a252:	b083      	sub	sp, #12
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a258:	bf00      	nop
 800a25a:	370c      	adds	r7, #12
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr

0800a264 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a264:	b480      	push	{r7}
 800a266:	b083      	sub	sp, #12
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a26c:	bf00      	nop
 800a26e:	370c      	adds	r7, #12
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr

0800a278 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a278:	b480      	push	{r7}
 800a27a:	b083      	sub	sp, #12
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a280:	bf00      	nop
 800a282:	370c      	adds	r7, #12
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr

0800a28c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a294:	bf00      	nop
 800a296:	370c      	adds	r7, #12
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr

0800a2a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b085      	sub	sp, #20
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	4a43      	ldr	r2, [pc, #268]	@ (800a3c0 <TIM_Base_SetConfig+0x120>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d013      	beq.n	800a2e0 <TIM_Base_SetConfig+0x40>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2be:	d00f      	beq.n	800a2e0 <TIM_Base_SetConfig+0x40>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	4a40      	ldr	r2, [pc, #256]	@ (800a3c4 <TIM_Base_SetConfig+0x124>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d00b      	beq.n	800a2e0 <TIM_Base_SetConfig+0x40>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	4a3f      	ldr	r2, [pc, #252]	@ (800a3c8 <TIM_Base_SetConfig+0x128>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d007      	beq.n	800a2e0 <TIM_Base_SetConfig+0x40>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	4a3e      	ldr	r2, [pc, #248]	@ (800a3cc <TIM_Base_SetConfig+0x12c>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d003      	beq.n	800a2e0 <TIM_Base_SetConfig+0x40>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	4a3d      	ldr	r2, [pc, #244]	@ (800a3d0 <TIM_Base_SetConfig+0x130>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d108      	bne.n	800a2f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	68fa      	ldr	r2, [r7, #12]
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	4a32      	ldr	r2, [pc, #200]	@ (800a3c0 <TIM_Base_SetConfig+0x120>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d02b      	beq.n	800a352 <TIM_Base_SetConfig+0xb2>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a300:	d027      	beq.n	800a352 <TIM_Base_SetConfig+0xb2>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	4a2f      	ldr	r2, [pc, #188]	@ (800a3c4 <TIM_Base_SetConfig+0x124>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d023      	beq.n	800a352 <TIM_Base_SetConfig+0xb2>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	4a2e      	ldr	r2, [pc, #184]	@ (800a3c8 <TIM_Base_SetConfig+0x128>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d01f      	beq.n	800a352 <TIM_Base_SetConfig+0xb2>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	4a2d      	ldr	r2, [pc, #180]	@ (800a3cc <TIM_Base_SetConfig+0x12c>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d01b      	beq.n	800a352 <TIM_Base_SetConfig+0xb2>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	4a2c      	ldr	r2, [pc, #176]	@ (800a3d0 <TIM_Base_SetConfig+0x130>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d017      	beq.n	800a352 <TIM_Base_SetConfig+0xb2>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	4a2b      	ldr	r2, [pc, #172]	@ (800a3d4 <TIM_Base_SetConfig+0x134>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d013      	beq.n	800a352 <TIM_Base_SetConfig+0xb2>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	4a2a      	ldr	r2, [pc, #168]	@ (800a3d8 <TIM_Base_SetConfig+0x138>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d00f      	beq.n	800a352 <TIM_Base_SetConfig+0xb2>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	4a29      	ldr	r2, [pc, #164]	@ (800a3dc <TIM_Base_SetConfig+0x13c>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d00b      	beq.n	800a352 <TIM_Base_SetConfig+0xb2>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	4a28      	ldr	r2, [pc, #160]	@ (800a3e0 <TIM_Base_SetConfig+0x140>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d007      	beq.n	800a352 <TIM_Base_SetConfig+0xb2>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	4a27      	ldr	r2, [pc, #156]	@ (800a3e4 <TIM_Base_SetConfig+0x144>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d003      	beq.n	800a352 <TIM_Base_SetConfig+0xb2>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	4a26      	ldr	r2, [pc, #152]	@ (800a3e8 <TIM_Base_SetConfig+0x148>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d108      	bne.n	800a364 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a358:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	68db      	ldr	r3, [r3, #12]
 800a35e:	68fa      	ldr	r2, [r7, #12]
 800a360:	4313      	orrs	r3, r2
 800a362:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	695b      	ldr	r3, [r3, #20]
 800a36e:	4313      	orrs	r3, r2
 800a370:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	689a      	ldr	r2, [r3, #8]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	681a      	ldr	r2, [r3, #0]
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	4a0e      	ldr	r2, [pc, #56]	@ (800a3c0 <TIM_Base_SetConfig+0x120>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d003      	beq.n	800a392 <TIM_Base_SetConfig+0xf2>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	4a10      	ldr	r2, [pc, #64]	@ (800a3d0 <TIM_Base_SetConfig+0x130>)
 800a38e:	4293      	cmp	r3, r2
 800a390:	d103      	bne.n	800a39a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	691a      	ldr	r2, [r3, #16]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f043 0204 	orr.w	r2, r3, #4
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	68fa      	ldr	r2, [r7, #12]
 800a3b0:	601a      	str	r2, [r3, #0]
}
 800a3b2:	bf00      	nop
 800a3b4:	3714      	adds	r7, #20
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3bc:	4770      	bx	lr
 800a3be:	bf00      	nop
 800a3c0:	40010000 	.word	0x40010000
 800a3c4:	40000400 	.word	0x40000400
 800a3c8:	40000800 	.word	0x40000800
 800a3cc:	40000c00 	.word	0x40000c00
 800a3d0:	40010400 	.word	0x40010400
 800a3d4:	40014000 	.word	0x40014000
 800a3d8:	40014400 	.word	0x40014400
 800a3dc:	40014800 	.word	0x40014800
 800a3e0:	40001800 	.word	0x40001800
 800a3e4:	40001c00 	.word	0x40001c00
 800a3e8:	40002000 	.word	0x40002000

0800a3ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b087      	sub	sp, #28
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	60f8      	str	r0, [r7, #12]
 800a3f4:	60b9      	str	r1, [r7, #8]
 800a3f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	6a1b      	ldr	r3, [r3, #32]
 800a3fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	6a1b      	ldr	r3, [r3, #32]
 800a402:	f023 0201 	bic.w	r2, r3, #1
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	699b      	ldr	r3, [r3, #24]
 800a40e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a416:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	011b      	lsls	r3, r3, #4
 800a41c:	693a      	ldr	r2, [r7, #16]
 800a41e:	4313      	orrs	r3, r2
 800a420:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	f023 030a 	bic.w	r3, r3, #10
 800a428:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a42a:	697a      	ldr	r2, [r7, #20]
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	4313      	orrs	r3, r2
 800a430:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	693a      	ldr	r2, [r7, #16]
 800a436:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	697a      	ldr	r2, [r7, #20]
 800a43c:	621a      	str	r2, [r3, #32]
}
 800a43e:	bf00      	nop
 800a440:	371c      	adds	r7, #28
 800a442:	46bd      	mov	sp, r7
 800a444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a448:	4770      	bx	lr

0800a44a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a44a:	b480      	push	{r7}
 800a44c:	b087      	sub	sp, #28
 800a44e:	af00      	add	r7, sp, #0
 800a450:	60f8      	str	r0, [r7, #12]
 800a452:	60b9      	str	r1, [r7, #8]
 800a454:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	6a1b      	ldr	r3, [r3, #32]
 800a45a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	6a1b      	ldr	r3, [r3, #32]
 800a460:	f023 0210 	bic.w	r2, r3, #16
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	699b      	ldr	r3, [r3, #24]
 800a46c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a474:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	031b      	lsls	r3, r3, #12
 800a47a:	693a      	ldr	r2, [r7, #16]
 800a47c:	4313      	orrs	r3, r2
 800a47e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a486:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	011b      	lsls	r3, r3, #4
 800a48c:	697a      	ldr	r2, [r7, #20]
 800a48e:	4313      	orrs	r3, r2
 800a490:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	693a      	ldr	r2, [r7, #16]
 800a496:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	697a      	ldr	r2, [r7, #20]
 800a49c:	621a      	str	r2, [r3, #32]
}
 800a49e:	bf00      	nop
 800a4a0:	371c      	adds	r7, #28
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a8:	4770      	bx	lr

0800a4aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a4aa:	b480      	push	{r7}
 800a4ac:	b085      	sub	sp, #20
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
 800a4b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	689b      	ldr	r3, [r3, #8]
 800a4b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a4c2:	683a      	ldr	r2, [r7, #0]
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	f043 0307 	orr.w	r3, r3, #7
 800a4cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	68fa      	ldr	r2, [r7, #12]
 800a4d2:	609a      	str	r2, [r3, #8]
}
 800a4d4:	bf00      	nop
 800a4d6:	3714      	adds	r7, #20
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr

0800a4e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b087      	sub	sp, #28
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	60b9      	str	r1, [r7, #8]
 800a4ea:	607a      	str	r2, [r7, #4]
 800a4ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	689b      	ldr	r3, [r3, #8]
 800a4f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a4fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	021a      	lsls	r2, r3, #8
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	431a      	orrs	r2, r3
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	4313      	orrs	r3, r2
 800a508:	697a      	ldr	r2, [r7, #20]
 800a50a:	4313      	orrs	r3, r2
 800a50c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	697a      	ldr	r2, [r7, #20]
 800a512:	609a      	str	r2, [r3, #8]
}
 800a514:	bf00      	nop
 800a516:	371c      	adds	r7, #28
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr

0800a520 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a520:	b480      	push	{r7}
 800a522:	b085      	sub	sp, #20
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a530:	2b01      	cmp	r3, #1
 800a532:	d101      	bne.n	800a538 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a534:	2302      	movs	r3, #2
 800a536:	e06d      	b.n	800a614 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2201      	movs	r2, #1
 800a53c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2202      	movs	r2, #2
 800a544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	689b      	ldr	r3, [r3, #8]
 800a556:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a30      	ldr	r2, [pc, #192]	@ (800a620 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d004      	beq.n	800a56c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	4a2f      	ldr	r2, [pc, #188]	@ (800a624 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d108      	bne.n	800a57e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a572:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	685b      	ldr	r3, [r3, #4]
 800a578:	68fa      	ldr	r2, [r7, #12]
 800a57a:	4313      	orrs	r3, r2
 800a57c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a584:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	68fa      	ldr	r2, [r7, #12]
 800a58c:	4313      	orrs	r3, r2
 800a58e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	68fa      	ldr	r2, [r7, #12]
 800a596:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4a20      	ldr	r2, [pc, #128]	@ (800a620 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d022      	beq.n	800a5e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5aa:	d01d      	beq.n	800a5e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a1d      	ldr	r2, [pc, #116]	@ (800a628 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d018      	beq.n	800a5e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4a1c      	ldr	r2, [pc, #112]	@ (800a62c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d013      	beq.n	800a5e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a1a      	ldr	r2, [pc, #104]	@ (800a630 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d00e      	beq.n	800a5e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4a15      	ldr	r2, [pc, #84]	@ (800a624 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d009      	beq.n	800a5e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4a16      	ldr	r2, [pc, #88]	@ (800a634 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d004      	beq.n	800a5e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4a15      	ldr	r2, [pc, #84]	@ (800a638 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d10c      	bne.n	800a602 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a5ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	689b      	ldr	r3, [r3, #8]
 800a5f4:	68ba      	ldr	r2, [r7, #8]
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	68ba      	ldr	r2, [r7, #8]
 800a600:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2201      	movs	r2, #1
 800a606:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2200      	movs	r2, #0
 800a60e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a612:	2300      	movs	r3, #0
}
 800a614:	4618      	mov	r0, r3
 800a616:	3714      	adds	r7, #20
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr
 800a620:	40010000 	.word	0x40010000
 800a624:	40010400 	.word	0x40010400
 800a628:	40000400 	.word	0x40000400
 800a62c:	40000800 	.word	0x40000800
 800a630:	40000c00 	.word	0x40000c00
 800a634:	40014000 	.word	0x40014000
 800a638:	40001800 	.word	0x40001800

0800a63c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b083      	sub	sp, #12
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a644:	bf00      	nop
 800a646:	370c      	adds	r7, #12
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr

0800a650 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a650:	b480      	push	{r7}
 800a652:	b083      	sub	sp, #12
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a658:	bf00      	nop
 800a65a:	370c      	adds	r7, #12
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr

0800a664 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a664:	b480      	push	{r7}
 800a666:	b083      	sub	sp, #12
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a66c:	bf00      	nop
 800a66e:	370c      	adds	r7, #12
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr

0800a678 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b082      	sub	sp, #8
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d101      	bne.n	800a68a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a686:	2301      	movs	r3, #1
 800a688:	e040      	b.n	800a70c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d106      	bne.n	800a6a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2200      	movs	r2, #0
 800a696:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f7f7 fbd4 	bl	8001e48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2224      	movs	r2, #36	@ 0x24
 800a6a4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	681a      	ldr	r2, [r3, #0]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f022 0201 	bic.w	r2, r2, #1
 800a6b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d002      	beq.n	800a6c4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f000 fece 	bl	800b460 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 fc67 	bl	800af98 <UART_SetConfig>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d101      	bne.n	800a6d4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	e01b      	b.n	800a70c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	685a      	ldr	r2, [r3, #4]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a6e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	689a      	ldr	r2, [r3, #8]
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a6f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	681a      	ldr	r2, [r3, #0]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f042 0201 	orr.w	r2, r2, #1
 800a702:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f000 ff4d 	bl	800b5a4 <UART_CheckIdleState>
 800a70a:	4603      	mov	r3, r0
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3708      	adds	r7, #8
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b08a      	sub	sp, #40	@ 0x28
 800a718:	af02      	add	r7, sp, #8
 800a71a:	60f8      	str	r0, [r7, #12]
 800a71c:	60b9      	str	r1, [r7, #8]
 800a71e:	603b      	str	r3, [r7, #0]
 800a720:	4613      	mov	r3, r2
 800a722:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a728:	2b20      	cmp	r3, #32
 800a72a:	d177      	bne.n	800a81c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d002      	beq.n	800a738 <HAL_UART_Transmit+0x24>
 800a732:	88fb      	ldrh	r3, [r7, #6]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d101      	bne.n	800a73c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a738:	2301      	movs	r3, #1
 800a73a:	e070      	b.n	800a81e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2200      	movs	r2, #0
 800a740:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2221      	movs	r2, #33	@ 0x21
 800a748:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a74a:	f7f7 fe57 	bl	80023fc <HAL_GetTick>
 800a74e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	88fa      	ldrh	r2, [r7, #6]
 800a754:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	88fa      	ldrh	r2, [r7, #6]
 800a75c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	689b      	ldr	r3, [r3, #8]
 800a764:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a768:	d108      	bne.n	800a77c <HAL_UART_Transmit+0x68>
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	691b      	ldr	r3, [r3, #16]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d104      	bne.n	800a77c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800a772:	2300      	movs	r3, #0
 800a774:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	61bb      	str	r3, [r7, #24]
 800a77a:	e003      	b.n	800a784 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a780:	2300      	movs	r3, #0
 800a782:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a784:	e02f      	b.n	800a7e6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	9300      	str	r3, [sp, #0]
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	2200      	movs	r2, #0
 800a78e:	2180      	movs	r1, #128	@ 0x80
 800a790:	68f8      	ldr	r0, [r7, #12]
 800a792:	f000 ff5e 	bl	800b652 <UART_WaitOnFlagUntilTimeout>
 800a796:	4603      	mov	r3, r0
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d004      	beq.n	800a7a6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2220      	movs	r2, #32
 800a7a0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800a7a2:	2303      	movs	r3, #3
 800a7a4:	e03b      	b.n	800a81e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800a7a6:	69fb      	ldr	r3, [r7, #28]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d10b      	bne.n	800a7c4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a7ac:	69bb      	ldr	r3, [r7, #24]
 800a7ae:	881b      	ldrh	r3, [r3, #0]
 800a7b0:	461a      	mov	r2, r3
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a7ba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a7bc:	69bb      	ldr	r3, [r7, #24]
 800a7be:	3302      	adds	r3, #2
 800a7c0:	61bb      	str	r3, [r7, #24]
 800a7c2:	e007      	b.n	800a7d4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a7c4:	69fb      	ldr	r3, [r7, #28]
 800a7c6:	781a      	ldrb	r2, [r3, #0]
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a7ce:	69fb      	ldr	r3, [r7, #28]
 800a7d0:	3301      	adds	r3, #1
 800a7d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	3b01      	subs	r3, #1
 800a7de:	b29a      	uxth	r2, r3
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d1c9      	bne.n	800a786 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	9300      	str	r3, [sp, #0]
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	2140      	movs	r1, #64	@ 0x40
 800a7fc:	68f8      	ldr	r0, [r7, #12]
 800a7fe:	f000 ff28 	bl	800b652 <UART_WaitOnFlagUntilTimeout>
 800a802:	4603      	mov	r3, r0
 800a804:	2b00      	cmp	r3, #0
 800a806:	d004      	beq.n	800a812 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	2220      	movs	r2, #32
 800a80c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800a80e:	2303      	movs	r3, #3
 800a810:	e005      	b.n	800a81e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	2220      	movs	r2, #32
 800a816:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800a818:	2300      	movs	r3, #0
 800a81a:	e000      	b.n	800a81e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800a81c:	2302      	movs	r3, #2
  }
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3720      	adds	r7, #32
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
	...

0800a828 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a828:	b480      	push	{r7}
 800a82a:	b08b      	sub	sp, #44	@ 0x2c
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	60f8      	str	r0, [r7, #12]
 800a830:	60b9      	str	r1, [r7, #8]
 800a832:	4613      	mov	r3, r2
 800a834:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a83a:	2b20      	cmp	r3, #32
 800a83c:	d147      	bne.n	800a8ce <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d002      	beq.n	800a84a <HAL_UART_Transmit_IT+0x22>
 800a844:	88fb      	ldrh	r3, [r7, #6]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d101      	bne.n	800a84e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800a84a:	2301      	movs	r3, #1
 800a84c:	e040      	b.n	800a8d0 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	68ba      	ldr	r2, [r7, #8]
 800a852:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	88fa      	ldrh	r2, [r7, #6]
 800a858:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	88fa      	ldrh	r2, [r7, #6]
 800a860:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2200      	movs	r2, #0
 800a868:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2200      	movs	r2, #0
 800a86e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	2221      	movs	r2, #33	@ 0x21
 800a876:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	689b      	ldr	r3, [r3, #8]
 800a87c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a880:	d107      	bne.n	800a892 <HAL_UART_Transmit_IT+0x6a>
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	691b      	ldr	r3, [r3, #16]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d103      	bne.n	800a892 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	4a13      	ldr	r2, [pc, #76]	@ (800a8dc <HAL_UART_Transmit_IT+0xb4>)
 800a88e:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a890:	e002      	b.n	800a898 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	4a12      	ldr	r2, [pc, #72]	@ (800a8e0 <HAL_UART_Transmit_IT+0xb8>)
 800a896:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	e853 3f00 	ldrex	r3, [r3]
 800a8a4:	613b      	str	r3, [r7, #16]
   return(result);
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8ac:	627b      	str	r3, [r7, #36]	@ 0x24
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	461a      	mov	r2, r3
 800a8b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8b6:	623b      	str	r3, [r7, #32]
 800a8b8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ba:	69f9      	ldr	r1, [r7, #28]
 800a8bc:	6a3a      	ldr	r2, [r7, #32]
 800a8be:	e841 2300 	strex	r3, r2, [r1]
 800a8c2:	61bb      	str	r3, [r7, #24]
   return(result);
 800a8c4:	69bb      	ldr	r3, [r7, #24]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d1e6      	bne.n	800a898 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	e000      	b.n	800a8d0 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800a8ce:	2302      	movs	r3, #2
  }
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	372c      	adds	r7, #44	@ 0x2c
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr
 800a8dc:	0800bca9 	.word	0x0800bca9
 800a8e0:	0800bbf3 	.word	0x0800bbf3

0800a8e4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b08a      	sub	sp, #40	@ 0x28
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	60f8      	str	r0, [r7, #12]
 800a8ec:	60b9      	str	r1, [r7, #8]
 800a8ee:	4613      	mov	r3, r2
 800a8f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8f8:	2b20      	cmp	r3, #32
 800a8fa:	d132      	bne.n	800a962 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d002      	beq.n	800a908 <HAL_UART_Receive_DMA+0x24>
 800a902:	88fb      	ldrh	r3, [r7, #6]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d101      	bne.n	800a90c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a908:	2301      	movs	r3, #1
 800a90a:	e02b      	b.n	800a964 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	2200      	movs	r2, #0
 800a910:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	685b      	ldr	r3, [r3, #4]
 800a918:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d018      	beq.n	800a952 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	e853 3f00 	ldrex	r3, [r3]
 800a92c:	613b      	str	r3, [r7, #16]
   return(result);
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a934:	627b      	str	r3, [r7, #36]	@ 0x24
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	461a      	mov	r2, r3
 800a93c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a93e:	623b      	str	r3, [r7, #32]
 800a940:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a942:	69f9      	ldr	r1, [r7, #28]
 800a944:	6a3a      	ldr	r2, [r7, #32]
 800a946:	e841 2300 	strex	r3, r2, [r1]
 800a94a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a94c:	69bb      	ldr	r3, [r7, #24]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d1e6      	bne.n	800a920 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a952:	88fb      	ldrh	r3, [r7, #6]
 800a954:	461a      	mov	r2, r3
 800a956:	68b9      	ldr	r1, [r7, #8]
 800a958:	68f8      	ldr	r0, [r7, #12]
 800a95a:	f000 fee7 	bl	800b72c <UART_Start_Receive_DMA>
 800a95e:	4603      	mov	r3, r0
 800a960:	e000      	b.n	800a964 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800a962:	2302      	movs	r3, #2
  }
}
 800a964:	4618      	mov	r0, r3
 800a966:	3728      	adds	r7, #40	@ 0x28
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b0ba      	sub	sp, #232	@ 0xe8
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	69db      	ldr	r3, [r3, #28]
 800a97a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	689b      	ldr	r3, [r3, #8]
 800a98e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a992:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a996:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a99a:	4013      	ands	r3, r2
 800a99c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a9a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d115      	bne.n	800a9d4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a9a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9ac:	f003 0320 	and.w	r3, r3, #32
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d00f      	beq.n	800a9d4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a9b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a9b8:	f003 0320 	and.w	r3, r3, #32
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d009      	beq.n	800a9d4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	f000 82b1 	beq.w	800af2c <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	4798      	blx	r3
      }
      return;
 800a9d2:	e2ab      	b.n	800af2c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a9d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	f000 8117 	beq.w	800ac0c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a9de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a9e2:	f003 0301 	and.w	r3, r3, #1
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d106      	bne.n	800a9f8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a9ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a9ee:	4b85      	ldr	r3, [pc, #532]	@ (800ac04 <HAL_UART_IRQHandler+0x298>)
 800a9f0:	4013      	ands	r3, r2
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	f000 810a 	beq.w	800ac0c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a9f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9fc:	f003 0301 	and.w	r3, r3, #1
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d011      	beq.n	800aa28 <HAL_UART_IRQHandler+0xbc>
 800aa04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d00b      	beq.n	800aa28 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	2201      	movs	r2, #1
 800aa16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa1e:	f043 0201 	orr.w	r2, r3, #1
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa2c:	f003 0302 	and.w	r3, r3, #2
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d011      	beq.n	800aa58 <HAL_UART_IRQHandler+0xec>
 800aa34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa38:	f003 0301 	and.w	r3, r3, #1
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d00b      	beq.n	800aa58 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	2202      	movs	r2, #2
 800aa46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa4e:	f043 0204 	orr.w	r2, r3, #4
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa5c:	f003 0304 	and.w	r3, r3, #4
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d011      	beq.n	800aa88 <HAL_UART_IRQHandler+0x11c>
 800aa64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa68:	f003 0301 	and.w	r3, r3, #1
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d00b      	beq.n	800aa88 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	2204      	movs	r2, #4
 800aa76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa7e:	f043 0202 	orr.w	r2, r3, #2
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800aa88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa8c:	f003 0308 	and.w	r3, r3, #8
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d017      	beq.n	800aac4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800aa94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa98:	f003 0320 	and.w	r3, r3, #32
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d105      	bne.n	800aaac <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800aaa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aaa4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d00b      	beq.n	800aac4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	2208      	movs	r2, #8
 800aab2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aaba:	f043 0208 	orr.w	r2, r3, #8
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800aac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aac8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d012      	beq.n	800aaf6 <HAL_UART_IRQHandler+0x18a>
 800aad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aad4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d00c      	beq.n	800aaf6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aae4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aaec:	f043 0220 	orr.w	r2, r3, #32
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	f000 8217 	beq.w	800af30 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800ab02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab06:	f003 0320 	and.w	r3, r3, #32
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d00d      	beq.n	800ab2a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ab0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab12:	f003 0320 	and.w	r3, r3, #32
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d007      	beq.n	800ab2a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d003      	beq.n	800ab2a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab30:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	689b      	ldr	r3, [r3, #8]
 800ab3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab3e:	2b40      	cmp	r3, #64	@ 0x40
 800ab40:	d005      	beq.n	800ab4e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ab42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ab46:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d04f      	beq.n	800abee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f000 feb2 	bl	800b8b8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	689b      	ldr	r3, [r3, #8]
 800ab5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab5e:	2b40      	cmp	r3, #64	@ 0x40
 800ab60:	d141      	bne.n	800abe6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	3308      	adds	r3, #8
 800ab68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ab70:	e853 3f00 	ldrex	r3, [r3]
 800ab74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ab78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ab7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	3308      	adds	r3, #8
 800ab8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ab8e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ab92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ab9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ab9e:	e841 2300 	strex	r3, r2, [r1]
 800aba2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800aba6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d1d9      	bne.n	800ab62 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d013      	beq.n	800abde <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abba:	4a13      	ldr	r2, [pc, #76]	@ (800ac08 <HAL_UART_IRQHandler+0x29c>)
 800abbc:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7f8 fd3a 	bl	800363c <HAL_DMA_Abort_IT>
 800abc8:	4603      	mov	r3, r0
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d017      	beq.n	800abfe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800abd4:	687a      	ldr	r2, [r7, #4]
 800abd6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800abd8:	4610      	mov	r0, r2
 800abda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abdc:	e00f      	b.n	800abfe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f000 f9c4 	bl	800af6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abe4:	e00b      	b.n	800abfe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f000 f9c0 	bl	800af6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abec:	e007      	b.n	800abfe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f000 f9bc 	bl	800af6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2200      	movs	r2, #0
 800abf8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800abfc:	e198      	b.n	800af30 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abfe:	bf00      	nop
    return;
 800ac00:	e196      	b.n	800af30 <HAL_UART_IRQHandler+0x5c4>
 800ac02:	bf00      	nop
 800ac04:	04000120 	.word	0x04000120
 800ac08:	0800bbcf 	.word	0x0800bbcf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac10:	2b01      	cmp	r3, #1
 800ac12:	f040 8166 	bne.w	800aee2 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ac16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac1a:	f003 0310 	and.w	r3, r3, #16
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	f000 815f 	beq.w	800aee2 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ac24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac28:	f003 0310 	and.w	r3, r3, #16
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	f000 8158 	beq.w	800aee2 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	2210      	movs	r2, #16
 800ac38:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	689b      	ldr	r3, [r3, #8]
 800ac40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac44:	2b40      	cmp	r3, #64	@ 0x40
 800ac46:	f040 80d0 	bne.w	800adea <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	685b      	ldr	r3, [r3, #4]
 800ac52:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ac56:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	f000 80ab 	beq.w	800adb6 <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ac66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	f080 80a3 	bcs.w	800adb6 <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ac76:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac7e:	69db      	ldr	r3, [r3, #28]
 800ac80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac84:	f000 8086 	beq.w	800ad94 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac90:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ac94:	e853 3f00 	ldrex	r3, [r3]
 800ac98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ac9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aca0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aca4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	461a      	mov	r2, r3
 800acae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800acb2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800acb6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800acbe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800acc2:	e841 2300 	strex	r3, r2, [r1]
 800acc6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800acca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d1da      	bne.n	800ac88 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	3308      	adds	r3, #8
 800acd8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800acdc:	e853 3f00 	ldrex	r3, [r3]
 800ace0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ace2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ace4:	f023 0301 	bic.w	r3, r3, #1
 800ace8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	3308      	adds	r3, #8
 800acf2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800acf6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800acfa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acfc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800acfe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ad02:	e841 2300 	strex	r3, r2, [r1]
 800ad06:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ad08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d1e1      	bne.n	800acd2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	3308      	adds	r3, #8
 800ad14:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ad18:	e853 3f00 	ldrex	r3, [r3]
 800ad1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ad1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ad20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	3308      	adds	r3, #8
 800ad2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ad32:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ad34:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad36:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ad38:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ad3a:	e841 2300 	strex	r3, r2, [r1]
 800ad3e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ad40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d1e3      	bne.n	800ad0e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2220      	movs	r2, #32
 800ad4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2200      	movs	r2, #0
 800ad52:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad5c:	e853 3f00 	ldrex	r3, [r3]
 800ad60:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ad62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad64:	f023 0310 	bic.w	r3, r3, #16
 800ad68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	461a      	mov	r2, r3
 800ad72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ad76:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ad78:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad7a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ad7c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ad7e:	e841 2300 	strex	r3, r2, [r1]
 800ad82:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ad84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d1e4      	bne.n	800ad54 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7f8 fbe4 	bl	800355c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2202      	movs	r2, #2
 800ad98:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	1ad3      	subs	r3, r2, r3
 800adaa:	b29b      	uxth	r3, r3
 800adac:	4619      	mov	r1, r3
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f000 f8e6 	bl	800af80 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800adb4:	e0be      	b.n	800af34 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800adbc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800adc0:	429a      	cmp	r2, r3
 800adc2:	f040 80b7 	bne.w	800af34 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800adca:	69db      	ldr	r3, [r3, #28]
 800adcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800add0:	f040 80b0 	bne.w	800af34 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2202      	movs	r2, #2
 800add8:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ade0:	4619      	mov	r1, r3
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f000 f8cc 	bl	800af80 <HAL_UARTEx_RxEventCallback>
      return;
 800ade8:	e0a4      	b.n	800af34 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800adf6:	b29b      	uxth	r3, r3
 800adf8:	1ad3      	subs	r3, r2, r3
 800adfa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ae04:	b29b      	uxth	r3, r3
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	f000 8096 	beq.w	800af38 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800ae0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	f000 8091 	beq.w	800af38 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae1e:	e853 3f00 	ldrex	r3, [r3]
 800ae22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ae24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ae2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	461a      	mov	r2, r3
 800ae34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ae38:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae3a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ae3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ae40:	e841 2300 	strex	r3, r2, [r1]
 800ae44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ae46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d1e4      	bne.n	800ae16 <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	3308      	adds	r3, #8
 800ae52:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae56:	e853 3f00 	ldrex	r3, [r3]
 800ae5a:	623b      	str	r3, [r7, #32]
   return(result);
 800ae5c:	6a3b      	ldr	r3, [r7, #32]
 800ae5e:	f023 0301 	bic.w	r3, r3, #1
 800ae62:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	3308      	adds	r3, #8
 800ae6c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ae70:	633a      	str	r2, [r7, #48]	@ 0x30
 800ae72:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ae76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae78:	e841 2300 	strex	r3, r2, [r1]
 800ae7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ae7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d1e3      	bne.n	800ae4c <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2220      	movs	r2, #32
 800ae88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2200      	movs	r2, #0
 800ae96:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	e853 3f00 	ldrex	r3, [r3]
 800aea4:	60fb      	str	r3, [r7, #12]
   return(result);
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	f023 0310 	bic.w	r3, r3, #16
 800aeac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	461a      	mov	r2, r3
 800aeb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800aeba:	61fb      	str	r3, [r7, #28]
 800aebc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aebe:	69b9      	ldr	r1, [r7, #24]
 800aec0:	69fa      	ldr	r2, [r7, #28]
 800aec2:	e841 2300 	strex	r3, r2, [r1]
 800aec6:	617b      	str	r3, [r7, #20]
   return(result);
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d1e4      	bne.n	800ae98 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2202      	movs	r2, #2
 800aed2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aed4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800aed8:	4619      	mov	r1, r3
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f000 f850 	bl	800af80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aee0:	e02a      	b.n	800af38 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800aee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d00e      	beq.n	800af0c <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800aeee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d008      	beq.n	800af0c <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d01c      	beq.n	800af3c <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	4798      	blx	r3
    }
    return;
 800af0a:	e017      	b.n	800af3c <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800af0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af14:	2b00      	cmp	r3, #0
 800af16:	d012      	beq.n	800af3e <HAL_UART_IRQHandler+0x5d2>
 800af18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af20:	2b00      	cmp	r3, #0
 800af22:	d00c      	beq.n	800af3e <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f000 ff1f 	bl	800bd68 <UART_EndTransmit_IT>
    return;
 800af2a:	e008      	b.n	800af3e <HAL_UART_IRQHandler+0x5d2>
      return;
 800af2c:	bf00      	nop
 800af2e:	e006      	b.n	800af3e <HAL_UART_IRQHandler+0x5d2>
    return;
 800af30:	bf00      	nop
 800af32:	e004      	b.n	800af3e <HAL_UART_IRQHandler+0x5d2>
      return;
 800af34:	bf00      	nop
 800af36:	e002      	b.n	800af3e <HAL_UART_IRQHandler+0x5d2>
      return;
 800af38:	bf00      	nop
 800af3a:	e000      	b.n	800af3e <HAL_UART_IRQHandler+0x5d2>
    return;
 800af3c:	bf00      	nop
  }

}
 800af3e:	37e8      	adds	r7, #232	@ 0xe8
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}

0800af44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800af44:	b480      	push	{r7}
 800af46:	b083      	sub	sp, #12
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800af4c:	bf00      	nop
 800af4e:	370c      	adds	r7, #12
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr

0800af58 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800af58:	b480      	push	{r7}
 800af5a:	b083      	sub	sp, #12
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800af60:	bf00      	nop
 800af62:	370c      	adds	r7, #12
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr

0800af6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b083      	sub	sp, #12
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800af74:	bf00      	nop
 800af76:	370c      	adds	r7, #12
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr

0800af80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800af80:	b480      	push	{r7}
 800af82:	b083      	sub	sp, #12
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	460b      	mov	r3, r1
 800af8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800af8c:	bf00      	nop
 800af8e:	370c      	adds	r7, #12
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr

0800af98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b088      	sub	sp, #32
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800afa0:	2300      	movs	r3, #0
 800afa2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	689a      	ldr	r2, [r3, #8]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	691b      	ldr	r3, [r3, #16]
 800afac:	431a      	orrs	r2, r3
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	695b      	ldr	r3, [r3, #20]
 800afb2:	431a      	orrs	r2, r3
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	69db      	ldr	r3, [r3, #28]
 800afb8:	4313      	orrs	r3, r2
 800afba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	681a      	ldr	r2, [r3, #0]
 800afc2:	4ba6      	ldr	r3, [pc, #664]	@ (800b25c <UART_SetConfig+0x2c4>)
 800afc4:	4013      	ands	r3, r2
 800afc6:	687a      	ldr	r2, [r7, #4]
 800afc8:	6812      	ldr	r2, [r2, #0]
 800afca:	6979      	ldr	r1, [r7, #20]
 800afcc:	430b      	orrs	r3, r1
 800afce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	685b      	ldr	r3, [r3, #4]
 800afd6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	68da      	ldr	r2, [r3, #12]
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	430a      	orrs	r2, r1
 800afe4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	699b      	ldr	r3, [r3, #24]
 800afea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6a1b      	ldr	r3, [r3, #32]
 800aff0:	697a      	ldr	r2, [r7, #20]
 800aff2:	4313      	orrs	r3, r2
 800aff4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	689b      	ldr	r3, [r3, #8]
 800affc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	697a      	ldr	r2, [r7, #20]
 800b006:	430a      	orrs	r2, r1
 800b008:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	4a94      	ldr	r2, [pc, #592]	@ (800b260 <UART_SetConfig+0x2c8>)
 800b010:	4293      	cmp	r3, r2
 800b012:	d120      	bne.n	800b056 <UART_SetConfig+0xbe>
 800b014:	4b93      	ldr	r3, [pc, #588]	@ (800b264 <UART_SetConfig+0x2cc>)
 800b016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b01a:	f003 0303 	and.w	r3, r3, #3
 800b01e:	2b03      	cmp	r3, #3
 800b020:	d816      	bhi.n	800b050 <UART_SetConfig+0xb8>
 800b022:	a201      	add	r2, pc, #4	@ (adr r2, 800b028 <UART_SetConfig+0x90>)
 800b024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b028:	0800b039 	.word	0x0800b039
 800b02c:	0800b045 	.word	0x0800b045
 800b030:	0800b03f 	.word	0x0800b03f
 800b034:	0800b04b 	.word	0x0800b04b
 800b038:	2301      	movs	r3, #1
 800b03a:	77fb      	strb	r3, [r7, #31]
 800b03c:	e150      	b.n	800b2e0 <UART_SetConfig+0x348>
 800b03e:	2302      	movs	r3, #2
 800b040:	77fb      	strb	r3, [r7, #31]
 800b042:	e14d      	b.n	800b2e0 <UART_SetConfig+0x348>
 800b044:	2304      	movs	r3, #4
 800b046:	77fb      	strb	r3, [r7, #31]
 800b048:	e14a      	b.n	800b2e0 <UART_SetConfig+0x348>
 800b04a:	2308      	movs	r3, #8
 800b04c:	77fb      	strb	r3, [r7, #31]
 800b04e:	e147      	b.n	800b2e0 <UART_SetConfig+0x348>
 800b050:	2310      	movs	r3, #16
 800b052:	77fb      	strb	r3, [r7, #31]
 800b054:	e144      	b.n	800b2e0 <UART_SetConfig+0x348>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	4a83      	ldr	r2, [pc, #524]	@ (800b268 <UART_SetConfig+0x2d0>)
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d132      	bne.n	800b0c6 <UART_SetConfig+0x12e>
 800b060:	4b80      	ldr	r3, [pc, #512]	@ (800b264 <UART_SetConfig+0x2cc>)
 800b062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b066:	f003 030c 	and.w	r3, r3, #12
 800b06a:	2b0c      	cmp	r3, #12
 800b06c:	d828      	bhi.n	800b0c0 <UART_SetConfig+0x128>
 800b06e:	a201      	add	r2, pc, #4	@ (adr r2, 800b074 <UART_SetConfig+0xdc>)
 800b070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b074:	0800b0a9 	.word	0x0800b0a9
 800b078:	0800b0c1 	.word	0x0800b0c1
 800b07c:	0800b0c1 	.word	0x0800b0c1
 800b080:	0800b0c1 	.word	0x0800b0c1
 800b084:	0800b0b5 	.word	0x0800b0b5
 800b088:	0800b0c1 	.word	0x0800b0c1
 800b08c:	0800b0c1 	.word	0x0800b0c1
 800b090:	0800b0c1 	.word	0x0800b0c1
 800b094:	0800b0af 	.word	0x0800b0af
 800b098:	0800b0c1 	.word	0x0800b0c1
 800b09c:	0800b0c1 	.word	0x0800b0c1
 800b0a0:	0800b0c1 	.word	0x0800b0c1
 800b0a4:	0800b0bb 	.word	0x0800b0bb
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	77fb      	strb	r3, [r7, #31]
 800b0ac:	e118      	b.n	800b2e0 <UART_SetConfig+0x348>
 800b0ae:	2302      	movs	r3, #2
 800b0b0:	77fb      	strb	r3, [r7, #31]
 800b0b2:	e115      	b.n	800b2e0 <UART_SetConfig+0x348>
 800b0b4:	2304      	movs	r3, #4
 800b0b6:	77fb      	strb	r3, [r7, #31]
 800b0b8:	e112      	b.n	800b2e0 <UART_SetConfig+0x348>
 800b0ba:	2308      	movs	r3, #8
 800b0bc:	77fb      	strb	r3, [r7, #31]
 800b0be:	e10f      	b.n	800b2e0 <UART_SetConfig+0x348>
 800b0c0:	2310      	movs	r3, #16
 800b0c2:	77fb      	strb	r3, [r7, #31]
 800b0c4:	e10c      	b.n	800b2e0 <UART_SetConfig+0x348>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	4a68      	ldr	r2, [pc, #416]	@ (800b26c <UART_SetConfig+0x2d4>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d120      	bne.n	800b112 <UART_SetConfig+0x17a>
 800b0d0:	4b64      	ldr	r3, [pc, #400]	@ (800b264 <UART_SetConfig+0x2cc>)
 800b0d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0d6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b0da:	2b30      	cmp	r3, #48	@ 0x30
 800b0dc:	d013      	beq.n	800b106 <UART_SetConfig+0x16e>
 800b0de:	2b30      	cmp	r3, #48	@ 0x30
 800b0e0:	d814      	bhi.n	800b10c <UART_SetConfig+0x174>
 800b0e2:	2b20      	cmp	r3, #32
 800b0e4:	d009      	beq.n	800b0fa <UART_SetConfig+0x162>
 800b0e6:	2b20      	cmp	r3, #32
 800b0e8:	d810      	bhi.n	800b10c <UART_SetConfig+0x174>
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d002      	beq.n	800b0f4 <UART_SetConfig+0x15c>
 800b0ee:	2b10      	cmp	r3, #16
 800b0f0:	d006      	beq.n	800b100 <UART_SetConfig+0x168>
 800b0f2:	e00b      	b.n	800b10c <UART_SetConfig+0x174>
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	77fb      	strb	r3, [r7, #31]
 800b0f8:	e0f2      	b.n	800b2e0 <UART_SetConfig+0x348>
 800b0fa:	2302      	movs	r3, #2
 800b0fc:	77fb      	strb	r3, [r7, #31]
 800b0fe:	e0ef      	b.n	800b2e0 <UART_SetConfig+0x348>
 800b100:	2304      	movs	r3, #4
 800b102:	77fb      	strb	r3, [r7, #31]
 800b104:	e0ec      	b.n	800b2e0 <UART_SetConfig+0x348>
 800b106:	2308      	movs	r3, #8
 800b108:	77fb      	strb	r3, [r7, #31]
 800b10a:	e0e9      	b.n	800b2e0 <UART_SetConfig+0x348>
 800b10c:	2310      	movs	r3, #16
 800b10e:	77fb      	strb	r3, [r7, #31]
 800b110:	e0e6      	b.n	800b2e0 <UART_SetConfig+0x348>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	4a56      	ldr	r2, [pc, #344]	@ (800b270 <UART_SetConfig+0x2d8>)
 800b118:	4293      	cmp	r3, r2
 800b11a:	d120      	bne.n	800b15e <UART_SetConfig+0x1c6>
 800b11c:	4b51      	ldr	r3, [pc, #324]	@ (800b264 <UART_SetConfig+0x2cc>)
 800b11e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b122:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b126:	2bc0      	cmp	r3, #192	@ 0xc0
 800b128:	d013      	beq.n	800b152 <UART_SetConfig+0x1ba>
 800b12a:	2bc0      	cmp	r3, #192	@ 0xc0
 800b12c:	d814      	bhi.n	800b158 <UART_SetConfig+0x1c0>
 800b12e:	2b80      	cmp	r3, #128	@ 0x80
 800b130:	d009      	beq.n	800b146 <UART_SetConfig+0x1ae>
 800b132:	2b80      	cmp	r3, #128	@ 0x80
 800b134:	d810      	bhi.n	800b158 <UART_SetConfig+0x1c0>
 800b136:	2b00      	cmp	r3, #0
 800b138:	d002      	beq.n	800b140 <UART_SetConfig+0x1a8>
 800b13a:	2b40      	cmp	r3, #64	@ 0x40
 800b13c:	d006      	beq.n	800b14c <UART_SetConfig+0x1b4>
 800b13e:	e00b      	b.n	800b158 <UART_SetConfig+0x1c0>
 800b140:	2300      	movs	r3, #0
 800b142:	77fb      	strb	r3, [r7, #31]
 800b144:	e0cc      	b.n	800b2e0 <UART_SetConfig+0x348>
 800b146:	2302      	movs	r3, #2
 800b148:	77fb      	strb	r3, [r7, #31]
 800b14a:	e0c9      	b.n	800b2e0 <UART_SetConfig+0x348>
 800b14c:	2304      	movs	r3, #4
 800b14e:	77fb      	strb	r3, [r7, #31]
 800b150:	e0c6      	b.n	800b2e0 <UART_SetConfig+0x348>
 800b152:	2308      	movs	r3, #8
 800b154:	77fb      	strb	r3, [r7, #31]
 800b156:	e0c3      	b.n	800b2e0 <UART_SetConfig+0x348>
 800b158:	2310      	movs	r3, #16
 800b15a:	77fb      	strb	r3, [r7, #31]
 800b15c:	e0c0      	b.n	800b2e0 <UART_SetConfig+0x348>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	4a44      	ldr	r2, [pc, #272]	@ (800b274 <UART_SetConfig+0x2dc>)
 800b164:	4293      	cmp	r3, r2
 800b166:	d125      	bne.n	800b1b4 <UART_SetConfig+0x21c>
 800b168:	4b3e      	ldr	r3, [pc, #248]	@ (800b264 <UART_SetConfig+0x2cc>)
 800b16a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b16e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b172:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b176:	d017      	beq.n	800b1a8 <UART_SetConfig+0x210>
 800b178:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b17c:	d817      	bhi.n	800b1ae <UART_SetConfig+0x216>
 800b17e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b182:	d00b      	beq.n	800b19c <UART_SetConfig+0x204>
 800b184:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b188:	d811      	bhi.n	800b1ae <UART_SetConfig+0x216>
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d003      	beq.n	800b196 <UART_SetConfig+0x1fe>
 800b18e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b192:	d006      	beq.n	800b1a2 <UART_SetConfig+0x20a>
 800b194:	e00b      	b.n	800b1ae <UART_SetConfig+0x216>
 800b196:	2300      	movs	r3, #0
 800b198:	77fb      	strb	r3, [r7, #31]
 800b19a:	e0a1      	b.n	800b2e0 <UART_SetConfig+0x348>
 800b19c:	2302      	movs	r3, #2
 800b19e:	77fb      	strb	r3, [r7, #31]
 800b1a0:	e09e      	b.n	800b2e0 <UART_SetConfig+0x348>
 800b1a2:	2304      	movs	r3, #4
 800b1a4:	77fb      	strb	r3, [r7, #31]
 800b1a6:	e09b      	b.n	800b2e0 <UART_SetConfig+0x348>
 800b1a8:	2308      	movs	r3, #8
 800b1aa:	77fb      	strb	r3, [r7, #31]
 800b1ac:	e098      	b.n	800b2e0 <UART_SetConfig+0x348>
 800b1ae:	2310      	movs	r3, #16
 800b1b0:	77fb      	strb	r3, [r7, #31]
 800b1b2:	e095      	b.n	800b2e0 <UART_SetConfig+0x348>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	4a2f      	ldr	r2, [pc, #188]	@ (800b278 <UART_SetConfig+0x2e0>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d125      	bne.n	800b20a <UART_SetConfig+0x272>
 800b1be:	4b29      	ldr	r3, [pc, #164]	@ (800b264 <UART_SetConfig+0x2cc>)
 800b1c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1c4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b1c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b1cc:	d017      	beq.n	800b1fe <UART_SetConfig+0x266>
 800b1ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b1d2:	d817      	bhi.n	800b204 <UART_SetConfig+0x26c>
 800b1d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b1d8:	d00b      	beq.n	800b1f2 <UART_SetConfig+0x25a>
 800b1da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b1de:	d811      	bhi.n	800b204 <UART_SetConfig+0x26c>
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d003      	beq.n	800b1ec <UART_SetConfig+0x254>
 800b1e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b1e8:	d006      	beq.n	800b1f8 <UART_SetConfig+0x260>
 800b1ea:	e00b      	b.n	800b204 <UART_SetConfig+0x26c>
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	77fb      	strb	r3, [r7, #31]
 800b1f0:	e076      	b.n	800b2e0 <UART_SetConfig+0x348>
 800b1f2:	2302      	movs	r3, #2
 800b1f4:	77fb      	strb	r3, [r7, #31]
 800b1f6:	e073      	b.n	800b2e0 <UART_SetConfig+0x348>
 800b1f8:	2304      	movs	r3, #4
 800b1fa:	77fb      	strb	r3, [r7, #31]
 800b1fc:	e070      	b.n	800b2e0 <UART_SetConfig+0x348>
 800b1fe:	2308      	movs	r3, #8
 800b200:	77fb      	strb	r3, [r7, #31]
 800b202:	e06d      	b.n	800b2e0 <UART_SetConfig+0x348>
 800b204:	2310      	movs	r3, #16
 800b206:	77fb      	strb	r3, [r7, #31]
 800b208:	e06a      	b.n	800b2e0 <UART_SetConfig+0x348>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	4a1b      	ldr	r2, [pc, #108]	@ (800b27c <UART_SetConfig+0x2e4>)
 800b210:	4293      	cmp	r3, r2
 800b212:	d138      	bne.n	800b286 <UART_SetConfig+0x2ee>
 800b214:	4b13      	ldr	r3, [pc, #76]	@ (800b264 <UART_SetConfig+0x2cc>)
 800b216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b21a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800b21e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b222:	d017      	beq.n	800b254 <UART_SetConfig+0x2bc>
 800b224:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b228:	d82a      	bhi.n	800b280 <UART_SetConfig+0x2e8>
 800b22a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b22e:	d00b      	beq.n	800b248 <UART_SetConfig+0x2b0>
 800b230:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b234:	d824      	bhi.n	800b280 <UART_SetConfig+0x2e8>
 800b236:	2b00      	cmp	r3, #0
 800b238:	d003      	beq.n	800b242 <UART_SetConfig+0x2aa>
 800b23a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b23e:	d006      	beq.n	800b24e <UART_SetConfig+0x2b6>
 800b240:	e01e      	b.n	800b280 <UART_SetConfig+0x2e8>
 800b242:	2300      	movs	r3, #0
 800b244:	77fb      	strb	r3, [r7, #31]
 800b246:	e04b      	b.n	800b2e0 <UART_SetConfig+0x348>
 800b248:	2302      	movs	r3, #2
 800b24a:	77fb      	strb	r3, [r7, #31]
 800b24c:	e048      	b.n	800b2e0 <UART_SetConfig+0x348>
 800b24e:	2304      	movs	r3, #4
 800b250:	77fb      	strb	r3, [r7, #31]
 800b252:	e045      	b.n	800b2e0 <UART_SetConfig+0x348>
 800b254:	2308      	movs	r3, #8
 800b256:	77fb      	strb	r3, [r7, #31]
 800b258:	e042      	b.n	800b2e0 <UART_SetConfig+0x348>
 800b25a:	bf00      	nop
 800b25c:	efff69f3 	.word	0xefff69f3
 800b260:	40011000 	.word	0x40011000
 800b264:	40023800 	.word	0x40023800
 800b268:	40004400 	.word	0x40004400
 800b26c:	40004800 	.word	0x40004800
 800b270:	40004c00 	.word	0x40004c00
 800b274:	40005000 	.word	0x40005000
 800b278:	40011400 	.word	0x40011400
 800b27c:	40007800 	.word	0x40007800
 800b280:	2310      	movs	r3, #16
 800b282:	77fb      	strb	r3, [r7, #31]
 800b284:	e02c      	b.n	800b2e0 <UART_SetConfig+0x348>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	4a72      	ldr	r2, [pc, #456]	@ (800b454 <UART_SetConfig+0x4bc>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d125      	bne.n	800b2dc <UART_SetConfig+0x344>
 800b290:	4b71      	ldr	r3, [pc, #452]	@ (800b458 <UART_SetConfig+0x4c0>)
 800b292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b296:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b29a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b29e:	d017      	beq.n	800b2d0 <UART_SetConfig+0x338>
 800b2a0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b2a4:	d817      	bhi.n	800b2d6 <UART_SetConfig+0x33e>
 800b2a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b2aa:	d00b      	beq.n	800b2c4 <UART_SetConfig+0x32c>
 800b2ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b2b0:	d811      	bhi.n	800b2d6 <UART_SetConfig+0x33e>
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d003      	beq.n	800b2be <UART_SetConfig+0x326>
 800b2b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b2ba:	d006      	beq.n	800b2ca <UART_SetConfig+0x332>
 800b2bc:	e00b      	b.n	800b2d6 <UART_SetConfig+0x33e>
 800b2be:	2300      	movs	r3, #0
 800b2c0:	77fb      	strb	r3, [r7, #31]
 800b2c2:	e00d      	b.n	800b2e0 <UART_SetConfig+0x348>
 800b2c4:	2302      	movs	r3, #2
 800b2c6:	77fb      	strb	r3, [r7, #31]
 800b2c8:	e00a      	b.n	800b2e0 <UART_SetConfig+0x348>
 800b2ca:	2304      	movs	r3, #4
 800b2cc:	77fb      	strb	r3, [r7, #31]
 800b2ce:	e007      	b.n	800b2e0 <UART_SetConfig+0x348>
 800b2d0:	2308      	movs	r3, #8
 800b2d2:	77fb      	strb	r3, [r7, #31]
 800b2d4:	e004      	b.n	800b2e0 <UART_SetConfig+0x348>
 800b2d6:	2310      	movs	r3, #16
 800b2d8:	77fb      	strb	r3, [r7, #31]
 800b2da:	e001      	b.n	800b2e0 <UART_SetConfig+0x348>
 800b2dc:	2310      	movs	r3, #16
 800b2de:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	69db      	ldr	r3, [r3, #28]
 800b2e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b2e8:	d15b      	bne.n	800b3a2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800b2ea:	7ffb      	ldrb	r3, [r7, #31]
 800b2ec:	2b08      	cmp	r3, #8
 800b2ee:	d828      	bhi.n	800b342 <UART_SetConfig+0x3aa>
 800b2f0:	a201      	add	r2, pc, #4	@ (adr r2, 800b2f8 <UART_SetConfig+0x360>)
 800b2f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2f6:	bf00      	nop
 800b2f8:	0800b31d 	.word	0x0800b31d
 800b2fc:	0800b325 	.word	0x0800b325
 800b300:	0800b32d 	.word	0x0800b32d
 800b304:	0800b343 	.word	0x0800b343
 800b308:	0800b333 	.word	0x0800b333
 800b30c:	0800b343 	.word	0x0800b343
 800b310:	0800b343 	.word	0x0800b343
 800b314:	0800b343 	.word	0x0800b343
 800b318:	0800b33b 	.word	0x0800b33b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b31c:	f7fc ff4c 	bl	80081b8 <HAL_RCC_GetPCLK1Freq>
 800b320:	61b8      	str	r0, [r7, #24]
        break;
 800b322:	e013      	b.n	800b34c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b324:	f7fc ff5c 	bl	80081e0 <HAL_RCC_GetPCLK2Freq>
 800b328:	61b8      	str	r0, [r7, #24]
        break;
 800b32a:	e00f      	b.n	800b34c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b32c:	4b4b      	ldr	r3, [pc, #300]	@ (800b45c <UART_SetConfig+0x4c4>)
 800b32e:	61bb      	str	r3, [r7, #24]
        break;
 800b330:	e00c      	b.n	800b34c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b332:	f7fc fe6f 	bl	8008014 <HAL_RCC_GetSysClockFreq>
 800b336:	61b8      	str	r0, [r7, #24]
        break;
 800b338:	e008      	b.n	800b34c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b33a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b33e:	61bb      	str	r3, [r7, #24]
        break;
 800b340:	e004      	b.n	800b34c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800b342:	2300      	movs	r3, #0
 800b344:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b346:	2301      	movs	r3, #1
 800b348:	77bb      	strb	r3, [r7, #30]
        break;
 800b34a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b34c:	69bb      	ldr	r3, [r7, #24]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d074      	beq.n	800b43c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b352:	69bb      	ldr	r3, [r7, #24]
 800b354:	005a      	lsls	r2, r3, #1
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	085b      	lsrs	r3, r3, #1
 800b35c:	441a      	add	r2, r3
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	685b      	ldr	r3, [r3, #4]
 800b362:	fbb2 f3f3 	udiv	r3, r2, r3
 800b366:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b368:	693b      	ldr	r3, [r7, #16]
 800b36a:	2b0f      	cmp	r3, #15
 800b36c:	d916      	bls.n	800b39c <UART_SetConfig+0x404>
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b374:	d212      	bcs.n	800b39c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	b29b      	uxth	r3, r3
 800b37a:	f023 030f 	bic.w	r3, r3, #15
 800b37e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	085b      	lsrs	r3, r3, #1
 800b384:	b29b      	uxth	r3, r3
 800b386:	f003 0307 	and.w	r3, r3, #7
 800b38a:	b29a      	uxth	r2, r3
 800b38c:	89fb      	ldrh	r3, [r7, #14]
 800b38e:	4313      	orrs	r3, r2
 800b390:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	89fa      	ldrh	r2, [r7, #14]
 800b398:	60da      	str	r2, [r3, #12]
 800b39a:	e04f      	b.n	800b43c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b39c:	2301      	movs	r3, #1
 800b39e:	77bb      	strb	r3, [r7, #30]
 800b3a0:	e04c      	b.n	800b43c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b3a2:	7ffb      	ldrb	r3, [r7, #31]
 800b3a4:	2b08      	cmp	r3, #8
 800b3a6:	d828      	bhi.n	800b3fa <UART_SetConfig+0x462>
 800b3a8:	a201      	add	r2, pc, #4	@ (adr r2, 800b3b0 <UART_SetConfig+0x418>)
 800b3aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ae:	bf00      	nop
 800b3b0:	0800b3d5 	.word	0x0800b3d5
 800b3b4:	0800b3dd 	.word	0x0800b3dd
 800b3b8:	0800b3e5 	.word	0x0800b3e5
 800b3bc:	0800b3fb 	.word	0x0800b3fb
 800b3c0:	0800b3eb 	.word	0x0800b3eb
 800b3c4:	0800b3fb 	.word	0x0800b3fb
 800b3c8:	0800b3fb 	.word	0x0800b3fb
 800b3cc:	0800b3fb 	.word	0x0800b3fb
 800b3d0:	0800b3f3 	.word	0x0800b3f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b3d4:	f7fc fef0 	bl	80081b8 <HAL_RCC_GetPCLK1Freq>
 800b3d8:	61b8      	str	r0, [r7, #24]
        break;
 800b3da:	e013      	b.n	800b404 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b3dc:	f7fc ff00 	bl	80081e0 <HAL_RCC_GetPCLK2Freq>
 800b3e0:	61b8      	str	r0, [r7, #24]
        break;
 800b3e2:	e00f      	b.n	800b404 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b3e4:	4b1d      	ldr	r3, [pc, #116]	@ (800b45c <UART_SetConfig+0x4c4>)
 800b3e6:	61bb      	str	r3, [r7, #24]
        break;
 800b3e8:	e00c      	b.n	800b404 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b3ea:	f7fc fe13 	bl	8008014 <HAL_RCC_GetSysClockFreq>
 800b3ee:	61b8      	str	r0, [r7, #24]
        break;
 800b3f0:	e008      	b.n	800b404 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b3f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b3f6:	61bb      	str	r3, [r7, #24]
        break;
 800b3f8:	e004      	b.n	800b404 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b3fe:	2301      	movs	r3, #1
 800b400:	77bb      	strb	r3, [r7, #30]
        break;
 800b402:	bf00      	nop
    }

    if (pclk != 0U)
 800b404:	69bb      	ldr	r3, [r7, #24]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d018      	beq.n	800b43c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	085a      	lsrs	r2, r3, #1
 800b410:	69bb      	ldr	r3, [r7, #24]
 800b412:	441a      	add	r2, r3
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	685b      	ldr	r3, [r3, #4]
 800b418:	fbb2 f3f3 	udiv	r3, r2, r3
 800b41c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b41e:	693b      	ldr	r3, [r7, #16]
 800b420:	2b0f      	cmp	r3, #15
 800b422:	d909      	bls.n	800b438 <UART_SetConfig+0x4a0>
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b42a:	d205      	bcs.n	800b438 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	b29a      	uxth	r2, r3
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	60da      	str	r2, [r3, #12]
 800b436:	e001      	b.n	800b43c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b438:	2301      	movs	r3, #1
 800b43a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2200      	movs	r2, #0
 800b440:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2200      	movs	r2, #0
 800b446:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800b448:	7fbb      	ldrb	r3, [r7, #30]
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3720      	adds	r7, #32
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}
 800b452:	bf00      	nop
 800b454:	40007c00 	.word	0x40007c00
 800b458:	40023800 	.word	0x40023800
 800b45c:	00f42400 	.word	0x00f42400

0800b460 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b460:	b480      	push	{r7}
 800b462:	b083      	sub	sp, #12
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b46c:	f003 0308 	and.w	r3, r3, #8
 800b470:	2b00      	cmp	r3, #0
 800b472:	d00a      	beq.n	800b48a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	685b      	ldr	r3, [r3, #4]
 800b47a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	430a      	orrs	r2, r1
 800b488:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b48e:	f003 0301 	and.w	r3, r3, #1
 800b492:	2b00      	cmp	r3, #0
 800b494:	d00a      	beq.n	800b4ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	685b      	ldr	r3, [r3, #4]
 800b49c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	430a      	orrs	r2, r1
 800b4aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4b0:	f003 0302 	and.w	r3, r3, #2
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d00a      	beq.n	800b4ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	685b      	ldr	r3, [r3, #4]
 800b4be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	430a      	orrs	r2, r1
 800b4cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4d2:	f003 0304 	and.w	r3, r3, #4
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d00a      	beq.n	800b4f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	685b      	ldr	r3, [r3, #4]
 800b4e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	430a      	orrs	r2, r1
 800b4ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4f4:	f003 0310 	and.w	r3, r3, #16
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d00a      	beq.n	800b512 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	689b      	ldr	r3, [r3, #8]
 800b502:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	430a      	orrs	r2, r1
 800b510:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b516:	f003 0320 	and.w	r3, r3, #32
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d00a      	beq.n	800b534 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	689b      	ldr	r3, [r3, #8]
 800b524:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	430a      	orrs	r2, r1
 800b532:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b538:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d01a      	beq.n	800b576 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	430a      	orrs	r2, r1
 800b554:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b55a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b55e:	d10a      	bne.n	800b576 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	685b      	ldr	r3, [r3, #4]
 800b566:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	430a      	orrs	r2, r1
 800b574:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b57a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d00a      	beq.n	800b598 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	685b      	ldr	r3, [r3, #4]
 800b588:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	430a      	orrs	r2, r1
 800b596:	605a      	str	r2, [r3, #4]
  }
}
 800b598:	bf00      	nop
 800b59a:	370c      	adds	r7, #12
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr

0800b5a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b08c      	sub	sp, #48	@ 0x30
 800b5a8:	af02      	add	r7, sp, #8
 800b5aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b5b4:	f7f6 ff22 	bl	80023fc <HAL_GetTick>
 800b5b8:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f003 0308 	and.w	r3, r3, #8
 800b5c4:	2b08      	cmp	r3, #8
 800b5c6:	d12e      	bne.n	800b626 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b5c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b5cc:	9300      	str	r3, [sp, #0]
 800b5ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f000 f83b 	bl	800b652 <UART_WaitOnFlagUntilTimeout>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d021      	beq.n	800b626 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	e853 3f00 	ldrex	r3, [r3]
 800b5ee:	60fb      	str	r3, [r7, #12]
   return(result);
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b5f6:	623b      	str	r3, [r7, #32]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	461a      	mov	r2, r3
 800b5fe:	6a3b      	ldr	r3, [r7, #32]
 800b600:	61fb      	str	r3, [r7, #28]
 800b602:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b604:	69b9      	ldr	r1, [r7, #24]
 800b606:	69fa      	ldr	r2, [r7, #28]
 800b608:	e841 2300 	strex	r3, r2, [r1]
 800b60c:	617b      	str	r3, [r7, #20]
   return(result);
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d1e6      	bne.n	800b5e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2220      	movs	r2, #32
 800b618:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2200      	movs	r2, #0
 800b61e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b622:	2303      	movs	r3, #3
 800b624:	e011      	b.n	800b64a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2220      	movs	r2, #32
 800b62a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2220      	movs	r2, #32
 800b630:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2200      	movs	r2, #0
 800b638:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2200      	movs	r2, #0
 800b63e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2200      	movs	r2, #0
 800b644:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800b648:	2300      	movs	r3, #0
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3728      	adds	r7, #40	@ 0x28
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}

0800b652 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b652:	b580      	push	{r7, lr}
 800b654:	b084      	sub	sp, #16
 800b656:	af00      	add	r7, sp, #0
 800b658:	60f8      	str	r0, [r7, #12]
 800b65a:	60b9      	str	r1, [r7, #8]
 800b65c:	603b      	str	r3, [r7, #0]
 800b65e:	4613      	mov	r3, r2
 800b660:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b662:	e04f      	b.n	800b704 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b664:	69bb      	ldr	r3, [r7, #24]
 800b666:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b66a:	d04b      	beq.n	800b704 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b66c:	f7f6 fec6 	bl	80023fc <HAL_GetTick>
 800b670:	4602      	mov	r2, r0
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	1ad3      	subs	r3, r2, r3
 800b676:	69ba      	ldr	r2, [r7, #24]
 800b678:	429a      	cmp	r2, r3
 800b67a:	d302      	bcc.n	800b682 <UART_WaitOnFlagUntilTimeout+0x30>
 800b67c:	69bb      	ldr	r3, [r7, #24]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d101      	bne.n	800b686 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b682:	2303      	movs	r3, #3
 800b684:	e04e      	b.n	800b724 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f003 0304 	and.w	r3, r3, #4
 800b690:	2b00      	cmp	r3, #0
 800b692:	d037      	beq.n	800b704 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	2b80      	cmp	r3, #128	@ 0x80
 800b698:	d034      	beq.n	800b704 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	2b40      	cmp	r3, #64	@ 0x40
 800b69e:	d031      	beq.n	800b704 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	69db      	ldr	r3, [r3, #28]
 800b6a6:	f003 0308 	and.w	r3, r3, #8
 800b6aa:	2b08      	cmp	r3, #8
 800b6ac:	d110      	bne.n	800b6d0 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	2208      	movs	r2, #8
 800b6b4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b6b6:	68f8      	ldr	r0, [r7, #12]
 800b6b8:	f000 f8fe 	bl	800b8b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	2208      	movs	r2, #8
 800b6c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	e029      	b.n	800b724 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	69db      	ldr	r3, [r3, #28]
 800b6d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b6da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b6de:	d111      	bne.n	800b704 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b6e8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b6ea:	68f8      	ldr	r0, [r7, #12]
 800b6ec:	f000 f8e4 	bl	800b8b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	2220      	movs	r2, #32
 800b6f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800b700:	2303      	movs	r3, #3
 800b702:	e00f      	b.n	800b724 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	69da      	ldr	r2, [r3, #28]
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	4013      	ands	r3, r2
 800b70e:	68ba      	ldr	r2, [r7, #8]
 800b710:	429a      	cmp	r2, r3
 800b712:	bf0c      	ite	eq
 800b714:	2301      	moveq	r3, #1
 800b716:	2300      	movne	r3, #0
 800b718:	b2db      	uxtb	r3, r3
 800b71a:	461a      	mov	r2, r3
 800b71c:	79fb      	ldrb	r3, [r7, #7]
 800b71e:	429a      	cmp	r2, r3
 800b720:	d0a0      	beq.n	800b664 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b722:	2300      	movs	r3, #0
}
 800b724:	4618      	mov	r0, r3
 800b726:	3710      	adds	r7, #16
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}

0800b72c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b096      	sub	sp, #88	@ 0x58
 800b730:	af00      	add	r7, sp, #0
 800b732:	60f8      	str	r0, [r7, #12]
 800b734:	60b9      	str	r1, [r7, #8]
 800b736:	4613      	mov	r3, r2
 800b738:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	68ba      	ldr	r2, [r7, #8]
 800b73e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	88fa      	ldrh	r2, [r7, #6]
 800b744:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	2200      	movs	r2, #0
 800b74c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	2222      	movs	r2, #34	@ 0x22
 800b754:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d028      	beq.n	800b7b2 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b764:	4a3e      	ldr	r2, [pc, #248]	@ (800b860 <UART_Start_Receive_DMA+0x134>)
 800b766:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b76c:	4a3d      	ldr	r2, [pc, #244]	@ (800b864 <UART_Start_Receive_DMA+0x138>)
 800b76e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b774:	4a3c      	ldr	r2, [pc, #240]	@ (800b868 <UART_Start_Receive_DMA+0x13c>)
 800b776:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b77c:	2200      	movs	r2, #0
 800b77e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	3324      	adds	r3, #36	@ 0x24
 800b78a:	4619      	mov	r1, r3
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b790:	461a      	mov	r2, r3
 800b792:	88fb      	ldrh	r3, [r7, #6]
 800b794:	f7f7 fe82 	bl	800349c <HAL_DMA_Start_IT>
 800b798:	4603      	mov	r3, r0
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d009      	beq.n	800b7b2 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2210      	movs	r2, #16
 800b7a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	2220      	movs	r2, #32
 800b7aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	e051      	b.n	800b856 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	691b      	ldr	r3, [r3, #16]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d018      	beq.n	800b7ec <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7c2:	e853 3f00 	ldrex	r3, [r3]
 800b7c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b7c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b7ce:	657b      	str	r3, [r7, #84]	@ 0x54
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	461a      	mov	r2, r3
 800b7d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b7d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b7da:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7dc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b7de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b7e0:	e841 2300 	strex	r3, r2, [r1]
 800b7e4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b7e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d1e6      	bne.n	800b7ba <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	3308      	adds	r3, #8
 800b7f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7f6:	e853 3f00 	ldrex	r3, [r3]
 800b7fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b7fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7fe:	f043 0301 	orr.w	r3, r3, #1
 800b802:	653b      	str	r3, [r7, #80]	@ 0x50
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	3308      	adds	r3, #8
 800b80a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b80c:	637a      	str	r2, [r7, #52]	@ 0x34
 800b80e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b810:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b812:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b814:	e841 2300 	strex	r3, r2, [r1]
 800b818:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b81a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d1e5      	bne.n	800b7ec <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	3308      	adds	r3, #8
 800b826:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	e853 3f00 	ldrex	r3, [r3]
 800b82e:	613b      	str	r3, [r7, #16]
   return(result);
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b836:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	3308      	adds	r3, #8
 800b83e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b840:	623a      	str	r2, [r7, #32]
 800b842:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b844:	69f9      	ldr	r1, [r7, #28]
 800b846:	6a3a      	ldr	r2, [r7, #32]
 800b848:	e841 2300 	strex	r3, r2, [r1]
 800b84c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b84e:	69bb      	ldr	r3, [r7, #24]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d1e5      	bne.n	800b820 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800b854:	2300      	movs	r3, #0
}
 800b856:	4618      	mov	r0, r3
 800b858:	3758      	adds	r7, #88	@ 0x58
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}
 800b85e:	bf00      	nop
 800b860:	0800b981 	.word	0x0800b981
 800b864:	0800badf 	.word	0x0800badf
 800b868:	0800bb51 	.word	0x0800bb51

0800b86c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b86c:	b480      	push	{r7}
 800b86e:	b089      	sub	sp, #36	@ 0x24
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	e853 3f00 	ldrex	r3, [r3]
 800b880:	60bb      	str	r3, [r7, #8]
   return(result);
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b888:	61fb      	str	r3, [r7, #28]
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	461a      	mov	r2, r3
 800b890:	69fb      	ldr	r3, [r7, #28]
 800b892:	61bb      	str	r3, [r7, #24]
 800b894:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b896:	6979      	ldr	r1, [r7, #20]
 800b898:	69ba      	ldr	r2, [r7, #24]
 800b89a:	e841 2300 	strex	r3, r2, [r1]
 800b89e:	613b      	str	r3, [r7, #16]
   return(result);
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d1e6      	bne.n	800b874 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2220      	movs	r2, #32
 800b8aa:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800b8ac:	bf00      	nop
 800b8ae:	3724      	adds	r7, #36	@ 0x24
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr

0800b8b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b095      	sub	sp, #84	@ 0x54
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8c8:	e853 3f00 	ldrex	r3, [r3]
 800b8cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b8ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b8d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	461a      	mov	r2, r3
 800b8dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8de:	643b      	str	r3, [r7, #64]	@ 0x40
 800b8e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b8e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b8e6:	e841 2300 	strex	r3, r2, [r1]
 800b8ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b8ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d1e6      	bne.n	800b8c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	3308      	adds	r3, #8
 800b8f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8fa:	6a3b      	ldr	r3, [r7, #32]
 800b8fc:	e853 3f00 	ldrex	r3, [r3]
 800b900:	61fb      	str	r3, [r7, #28]
   return(result);
 800b902:	69fb      	ldr	r3, [r7, #28]
 800b904:	f023 0301 	bic.w	r3, r3, #1
 800b908:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	3308      	adds	r3, #8
 800b910:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b912:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b914:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b916:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b918:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b91a:	e841 2300 	strex	r3, r2, [r1]
 800b91e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b922:	2b00      	cmp	r3, #0
 800b924:	d1e5      	bne.n	800b8f2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b92a:	2b01      	cmp	r3, #1
 800b92c:	d118      	bne.n	800b960 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	e853 3f00 	ldrex	r3, [r3]
 800b93a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	f023 0310 	bic.w	r3, r3, #16
 800b942:	647b      	str	r3, [r7, #68]	@ 0x44
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	461a      	mov	r2, r3
 800b94a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b94c:	61bb      	str	r3, [r7, #24]
 800b94e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b950:	6979      	ldr	r1, [r7, #20]
 800b952:	69ba      	ldr	r2, [r7, #24]
 800b954:	e841 2300 	strex	r3, r2, [r1]
 800b958:	613b      	str	r3, [r7, #16]
   return(result);
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d1e6      	bne.n	800b92e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2220      	movs	r2, #32
 800b964:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2200      	movs	r2, #0
 800b96c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2200      	movs	r2, #0
 800b972:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800b974:	bf00      	nop
 800b976:	3754      	adds	r7, #84	@ 0x54
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr

0800b980 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b09c      	sub	sp, #112	@ 0x70
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b98c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	69db      	ldr	r3, [r3, #28]
 800b992:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b996:	d071      	beq.n	800ba7c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800b998:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b99a:	2200      	movs	r2, #0
 800b99c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b9a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b9a8:	e853 3f00 	ldrex	r3, [r3]
 800b9ac:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b9ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b9b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b9b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b9b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b9be:	657b      	str	r3, [r7, #84]	@ 0x54
 800b9c0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b9c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b9c6:	e841 2300 	strex	r3, r2, [r1]
 800b9ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b9cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d1e6      	bne.n	800b9a0 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	3308      	adds	r3, #8
 800b9d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9dc:	e853 3f00 	ldrex	r3, [r3]
 800b9e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b9e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9e4:	f023 0301 	bic.w	r3, r3, #1
 800b9e8:	667b      	str	r3, [r7, #100]	@ 0x64
 800b9ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	3308      	adds	r3, #8
 800b9f0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b9f2:	643a      	str	r2, [r7, #64]	@ 0x40
 800b9f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b9f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b9fa:	e841 2300 	strex	r3, r2, [r1]
 800b9fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ba00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d1e5      	bne.n	800b9d2 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	3308      	adds	r3, #8
 800ba0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba0e:	6a3b      	ldr	r3, [r7, #32]
 800ba10:	e853 3f00 	ldrex	r3, [r3]
 800ba14:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba16:	69fb      	ldr	r3, [r7, #28]
 800ba18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba1c:	663b      	str	r3, [r7, #96]	@ 0x60
 800ba1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	3308      	adds	r3, #8
 800ba24:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ba26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ba28:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ba2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba2e:	e841 2300 	strex	r3, r2, [r1]
 800ba32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ba34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d1e5      	bne.n	800ba06 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ba3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba3c:	2220      	movs	r2, #32
 800ba3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ba46:	2b01      	cmp	r3, #1
 800ba48:	d118      	bne.n	800ba7c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	e853 3f00 	ldrex	r3, [r3]
 800ba56:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	f023 0310 	bic.w	r3, r3, #16
 800ba5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ba60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	461a      	mov	r2, r3
 800ba66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ba68:	61bb      	str	r3, [r7, #24]
 800ba6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba6c:	6979      	ldr	r1, [r7, #20]
 800ba6e:	69ba      	ldr	r2, [r7, #24]
 800ba70:	e841 2300 	strex	r3, r2, [r1]
 800ba74:	613b      	str	r3, [r7, #16]
   return(result);
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d1e6      	bne.n	800ba4a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba7e:	2200      	movs	r2, #0
 800ba80:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ba86:	2b01      	cmp	r3, #1
 800ba88:	d122      	bne.n	800bad0 <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 800ba8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	685b      	ldr	r3, [r3, #4]
 800ba98:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 800ba9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba9e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800baa2:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d204      	bcs.n	800bab4 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800baaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800baac:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800bab0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bab4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bab6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800baba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800babc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800bac0:	b29b      	uxth	r3, r3
 800bac2:	1ad3      	subs	r3, r2, r3
 800bac4:	b29b      	uxth	r3, r3
 800bac6:	4619      	mov	r1, r3
 800bac8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800baca:	f7ff fa59 	bl	800af80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bace:	e002      	b.n	800bad6 <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 800bad0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bad2:	f015 f9d7 	bl	8020e84 <HAL_UART_RxCpltCallback>
}
 800bad6:	bf00      	nop
 800bad8:	3770      	adds	r7, #112	@ 0x70
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}

0800bade <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bade:	b580      	push	{r7, lr}
 800bae0:	b084      	sub	sp, #16
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800baea:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2201      	movs	r2, #1
 800baf0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	d123      	bne.n	800bb42 <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bb00:	085b      	lsrs	r3, r3, #1
 800bb02:	b29a      	uxth	r2, r3
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	685b      	ldr	r3, [r3, #4]
 800bb10:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bb18:	897a      	ldrh	r2, [r7, #10]
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d803      	bhi.n	800bb26 <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	897a      	ldrh	r2, [r7, #10]
 800bb22:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800bb32:	b29b      	uxth	r3, r3
 800bb34:	1ad3      	subs	r3, r2, r3
 800bb36:	b29b      	uxth	r3, r3
 800bb38:	4619      	mov	r1, r3
 800bb3a:	68f8      	ldr	r0, [r7, #12]
 800bb3c:	f7ff fa20 	bl	800af80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bb40:	e002      	b.n	800bb48 <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 800bb42:	68f8      	ldr	r0, [r7, #12]
 800bb44:	f7ff fa08 	bl	800af58 <HAL_UART_RxHalfCpltCallback>
}
 800bb48:	bf00      	nop
 800bb4a:	3710      	adds	r7, #16
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}

0800bb50 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b086      	sub	sp, #24
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb5c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bb62:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb6a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	689b      	ldr	r3, [r3, #8]
 800bb72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb76:	2b80      	cmp	r3, #128	@ 0x80
 800bb78:	d109      	bne.n	800bb8e <UART_DMAError+0x3e>
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	2b21      	cmp	r3, #33	@ 0x21
 800bb7e:	d106      	bne.n	800bb8e <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	2200      	movs	r2, #0
 800bb84:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800bb88:	6978      	ldr	r0, [r7, #20]
 800bb8a:	f7ff fe6f 	bl	800b86c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	689b      	ldr	r3, [r3, #8]
 800bb94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb98:	2b40      	cmp	r3, #64	@ 0x40
 800bb9a:	d109      	bne.n	800bbb0 <UART_DMAError+0x60>
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	2b22      	cmp	r3, #34	@ 0x22
 800bba0:	d106      	bne.n	800bbb0 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	2200      	movs	r2, #0
 800bba6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800bbaa:	6978      	ldr	r0, [r7, #20]
 800bbac:	f7ff fe84 	bl	800b8b8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bbb6:	f043 0210 	orr.w	r2, r3, #16
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bbc0:	6978      	ldr	r0, [r7, #20]
 800bbc2:	f7ff f9d3 	bl	800af6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bbc6:	bf00      	nop
 800bbc8:	3718      	adds	r7, #24
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}

0800bbce <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bbce:	b580      	push	{r7, lr}
 800bbd0:	b084      	sub	sp, #16
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbda:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	2200      	movs	r2, #0
 800bbe0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bbe4:	68f8      	ldr	r0, [r7, #12]
 800bbe6:	f7ff f9c1 	bl	800af6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bbea:	bf00      	nop
 800bbec:	3710      	adds	r7, #16
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}

0800bbf2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bbf2:	b480      	push	{r7}
 800bbf4:	b08f      	sub	sp, #60	@ 0x3c
 800bbf6:	af00      	add	r7, sp, #0
 800bbf8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bbfe:	2b21      	cmp	r3, #33	@ 0x21
 800bc00:	d14c      	bne.n	800bc9c <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800bc08:	b29b      	uxth	r3, r3
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d132      	bne.n	800bc74 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc14:	6a3b      	ldr	r3, [r7, #32]
 800bc16:	e853 3f00 	ldrex	r3, [r3]
 800bc1a:	61fb      	str	r3, [r7, #28]
   return(result);
 800bc1c:	69fb      	ldr	r3, [r7, #28]
 800bc1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bc22:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	461a      	mov	r2, r3
 800bc2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bc2e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bc32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc34:	e841 2300 	strex	r3, r2, [r1]
 800bc38:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bc3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d1e6      	bne.n	800bc0e <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	e853 3f00 	ldrex	r3, [r3]
 800bc4c:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc54:	633b      	str	r3, [r7, #48]	@ 0x30
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	461a      	mov	r2, r3
 800bc5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc5e:	61bb      	str	r3, [r7, #24]
 800bc60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc62:	6979      	ldr	r1, [r7, #20]
 800bc64:	69ba      	ldr	r2, [r7, #24]
 800bc66:	e841 2300 	strex	r3, r2, [r1]
 800bc6a:	613b      	str	r3, [r7, #16]
   return(result);
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d1e6      	bne.n	800bc40 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800bc72:	e013      	b.n	800bc9c <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc78:	781a      	ldrb	r2, [r3, #0]
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc84:	1c5a      	adds	r2, r3, #1
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800bc90:	b29b      	uxth	r3, r3
 800bc92:	3b01      	subs	r3, #1
 800bc94:	b29a      	uxth	r2, r3
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800bc9c:	bf00      	nop
 800bc9e:	373c      	adds	r7, #60	@ 0x3c
 800bca0:	46bd      	mov	sp, r7
 800bca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca6:	4770      	bx	lr

0800bca8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b091      	sub	sp, #68	@ 0x44
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bcb4:	2b21      	cmp	r3, #33	@ 0x21
 800bcb6:	d151      	bne.n	800bd5c <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800bcbe:	b29b      	uxth	r3, r3
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d132      	bne.n	800bd2a <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bccc:	e853 3f00 	ldrex	r3, [r3]
 800bcd0:	623b      	str	r3, [r7, #32]
   return(result);
 800bcd2:	6a3b      	ldr	r3, [r7, #32]
 800bcd4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bcd8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	461a      	mov	r2, r3
 800bce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bce2:	633b      	str	r3, [r7, #48]	@ 0x30
 800bce4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bce6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bce8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bcea:	e841 2300 	strex	r3, r2, [r1]
 800bcee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bcf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d1e6      	bne.n	800bcc4 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	e853 3f00 	ldrex	r3, [r3]
 800bd02:	60fb      	str	r3, [r7, #12]
   return(result);
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd0a:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	461a      	mov	r2, r3
 800bd12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd14:	61fb      	str	r3, [r7, #28]
 800bd16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd18:	69b9      	ldr	r1, [r7, #24]
 800bd1a:	69fa      	ldr	r2, [r7, #28]
 800bd1c:	e841 2300 	strex	r3, r2, [r1]
 800bd20:	617b      	str	r3, [r7, #20]
   return(result);
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d1e6      	bne.n	800bcf6 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800bd28:	e018      	b.n	800bd5c <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800bd30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd32:	881b      	ldrh	r3, [r3, #0]
 800bd34:	461a      	mov	r2, r3
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bd3e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd44:	1c9a      	adds	r2, r3, #2
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800bd50:	b29b      	uxth	r3, r3
 800bd52:	3b01      	subs	r3, #1
 800bd54:	b29a      	uxth	r2, r3
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800bd5c:	bf00      	nop
 800bd5e:	3744      	adds	r7, #68	@ 0x44
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr

0800bd68 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b088      	sub	sp, #32
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	e853 3f00 	ldrex	r3, [r3]
 800bd7c:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bd84:	61fb      	str	r3, [r7, #28]
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	461a      	mov	r2, r3
 800bd8c:	69fb      	ldr	r3, [r7, #28]
 800bd8e:	61bb      	str	r3, [r7, #24]
 800bd90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd92:	6979      	ldr	r1, [r7, #20]
 800bd94:	69ba      	ldr	r2, [r7, #24]
 800bd96:	e841 2300 	strex	r3, r2, [r1]
 800bd9a:	613b      	str	r3, [r7, #16]
   return(result);
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d1e6      	bne.n	800bd70 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2220      	movs	r2, #32
 800bda6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	f7ff f8c8 	bl	800af44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bdb4:	bf00      	nop
 800bdb6:	3720      	adds	r7, #32
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}

0800bdbc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b084      	sub	sp, #16
 800bdc0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 800bdc2:	4b92      	ldr	r3, [pc, #584]	@ (800c00c <MX_LWIP_Init+0x250>)
 800bdc4:	220a      	movs	r2, #10
 800bdc6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 800bdc8:	4b90      	ldr	r3, [pc, #576]	@ (800c00c <MX_LWIP_Init+0x250>)
 800bdca:	2200      	movs	r2, #0
 800bdcc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800bdce:	4b8f      	ldr	r3, [pc, #572]	@ (800c00c <MX_LWIP_Init+0x250>)
 800bdd0:	2201      	movs	r2, #1
 800bdd2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 800bdd4:	4b8d      	ldr	r3, [pc, #564]	@ (800c00c <MX_LWIP_Init+0x250>)
 800bdd6:	2264      	movs	r2, #100	@ 0x64
 800bdd8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800bdda:	4b8d      	ldr	r3, [pc, #564]	@ (800c010 <MX_LWIP_Init+0x254>)
 800bddc:	22ff      	movs	r2, #255	@ 0xff
 800bdde:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800bde0:	4b8b      	ldr	r3, [pc, #556]	@ (800c010 <MX_LWIP_Init+0x254>)
 800bde2:	22ff      	movs	r2, #255	@ 0xff
 800bde4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800bde6:	4b8a      	ldr	r3, [pc, #552]	@ (800c010 <MX_LWIP_Init+0x254>)
 800bde8:	22ff      	movs	r2, #255	@ 0xff
 800bdea:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800bdec:	4b88      	ldr	r3, [pc, #544]	@ (800c010 <MX_LWIP_Init+0x254>)
 800bdee:	2200      	movs	r2, #0
 800bdf0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 800bdf2:	4b88      	ldr	r3, [pc, #544]	@ (800c014 <MX_LWIP_Init+0x258>)
 800bdf4:	220a      	movs	r2, #10
 800bdf6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800bdf8:	4b86      	ldr	r3, [pc, #536]	@ (800c014 <MX_LWIP_Init+0x258>)
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800bdfe:	4b85      	ldr	r3, [pc, #532]	@ (800c014 <MX_LWIP_Init+0x258>)
 800be00:	2201      	movs	r2, #1
 800be02:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 101;
 800be04:	4b83      	ldr	r3, [pc, #524]	@ (800c014 <MX_LWIP_Init+0x258>)
 800be06:	2265      	movs	r2, #101	@ 0x65
 800be08:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800be0a:	2100      	movs	r1, #0
 800be0c:	2000      	movs	r0, #0
 800be0e:	f007 faf5 	bl	80133fc <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800be12:	4b7e      	ldr	r3, [pc, #504]	@ (800c00c <MX_LWIP_Init+0x250>)
 800be14:	781b      	ldrb	r3, [r3, #0]
 800be16:	061a      	lsls	r2, r3, #24
 800be18:	4b7c      	ldr	r3, [pc, #496]	@ (800c00c <MX_LWIP_Init+0x250>)
 800be1a:	785b      	ldrb	r3, [r3, #1]
 800be1c:	041b      	lsls	r3, r3, #16
 800be1e:	431a      	orrs	r2, r3
 800be20:	4b7a      	ldr	r3, [pc, #488]	@ (800c00c <MX_LWIP_Init+0x250>)
 800be22:	789b      	ldrb	r3, [r3, #2]
 800be24:	021b      	lsls	r3, r3, #8
 800be26:	4313      	orrs	r3, r2
 800be28:	4a78      	ldr	r2, [pc, #480]	@ (800c00c <MX_LWIP_Init+0x250>)
 800be2a:	78d2      	ldrb	r2, [r2, #3]
 800be2c:	4313      	orrs	r3, r2
 800be2e:	061a      	lsls	r2, r3, #24
 800be30:	4b76      	ldr	r3, [pc, #472]	@ (800c00c <MX_LWIP_Init+0x250>)
 800be32:	781b      	ldrb	r3, [r3, #0]
 800be34:	0619      	lsls	r1, r3, #24
 800be36:	4b75      	ldr	r3, [pc, #468]	@ (800c00c <MX_LWIP_Init+0x250>)
 800be38:	785b      	ldrb	r3, [r3, #1]
 800be3a:	041b      	lsls	r3, r3, #16
 800be3c:	4319      	orrs	r1, r3
 800be3e:	4b73      	ldr	r3, [pc, #460]	@ (800c00c <MX_LWIP_Init+0x250>)
 800be40:	789b      	ldrb	r3, [r3, #2]
 800be42:	021b      	lsls	r3, r3, #8
 800be44:	430b      	orrs	r3, r1
 800be46:	4971      	ldr	r1, [pc, #452]	@ (800c00c <MX_LWIP_Init+0x250>)
 800be48:	78c9      	ldrb	r1, [r1, #3]
 800be4a:	430b      	orrs	r3, r1
 800be4c:	021b      	lsls	r3, r3, #8
 800be4e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800be52:	431a      	orrs	r2, r3
 800be54:	4b6d      	ldr	r3, [pc, #436]	@ (800c00c <MX_LWIP_Init+0x250>)
 800be56:	781b      	ldrb	r3, [r3, #0]
 800be58:	0619      	lsls	r1, r3, #24
 800be5a:	4b6c      	ldr	r3, [pc, #432]	@ (800c00c <MX_LWIP_Init+0x250>)
 800be5c:	785b      	ldrb	r3, [r3, #1]
 800be5e:	041b      	lsls	r3, r3, #16
 800be60:	4319      	orrs	r1, r3
 800be62:	4b6a      	ldr	r3, [pc, #424]	@ (800c00c <MX_LWIP_Init+0x250>)
 800be64:	789b      	ldrb	r3, [r3, #2]
 800be66:	021b      	lsls	r3, r3, #8
 800be68:	430b      	orrs	r3, r1
 800be6a:	4968      	ldr	r1, [pc, #416]	@ (800c00c <MX_LWIP_Init+0x250>)
 800be6c:	78c9      	ldrb	r1, [r1, #3]
 800be6e:	430b      	orrs	r3, r1
 800be70:	0a1b      	lsrs	r3, r3, #8
 800be72:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800be76:	431a      	orrs	r2, r3
 800be78:	4b64      	ldr	r3, [pc, #400]	@ (800c00c <MX_LWIP_Init+0x250>)
 800be7a:	781b      	ldrb	r3, [r3, #0]
 800be7c:	0619      	lsls	r1, r3, #24
 800be7e:	4b63      	ldr	r3, [pc, #396]	@ (800c00c <MX_LWIP_Init+0x250>)
 800be80:	785b      	ldrb	r3, [r3, #1]
 800be82:	041b      	lsls	r3, r3, #16
 800be84:	4319      	orrs	r1, r3
 800be86:	4b61      	ldr	r3, [pc, #388]	@ (800c00c <MX_LWIP_Init+0x250>)
 800be88:	789b      	ldrb	r3, [r3, #2]
 800be8a:	021b      	lsls	r3, r3, #8
 800be8c:	430b      	orrs	r3, r1
 800be8e:	495f      	ldr	r1, [pc, #380]	@ (800c00c <MX_LWIP_Init+0x250>)
 800be90:	78c9      	ldrb	r1, [r1, #3]
 800be92:	430b      	orrs	r3, r1
 800be94:	0e1b      	lsrs	r3, r3, #24
 800be96:	4313      	orrs	r3, r2
 800be98:	4a5f      	ldr	r2, [pc, #380]	@ (800c018 <MX_LWIP_Init+0x25c>)
 800be9a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800be9c:	4b5c      	ldr	r3, [pc, #368]	@ (800c010 <MX_LWIP_Init+0x254>)
 800be9e:	781b      	ldrb	r3, [r3, #0]
 800bea0:	061a      	lsls	r2, r3, #24
 800bea2:	4b5b      	ldr	r3, [pc, #364]	@ (800c010 <MX_LWIP_Init+0x254>)
 800bea4:	785b      	ldrb	r3, [r3, #1]
 800bea6:	041b      	lsls	r3, r3, #16
 800bea8:	431a      	orrs	r2, r3
 800beaa:	4b59      	ldr	r3, [pc, #356]	@ (800c010 <MX_LWIP_Init+0x254>)
 800beac:	789b      	ldrb	r3, [r3, #2]
 800beae:	021b      	lsls	r3, r3, #8
 800beb0:	4313      	orrs	r3, r2
 800beb2:	4a57      	ldr	r2, [pc, #348]	@ (800c010 <MX_LWIP_Init+0x254>)
 800beb4:	78d2      	ldrb	r2, [r2, #3]
 800beb6:	4313      	orrs	r3, r2
 800beb8:	061a      	lsls	r2, r3, #24
 800beba:	4b55      	ldr	r3, [pc, #340]	@ (800c010 <MX_LWIP_Init+0x254>)
 800bebc:	781b      	ldrb	r3, [r3, #0]
 800bebe:	0619      	lsls	r1, r3, #24
 800bec0:	4b53      	ldr	r3, [pc, #332]	@ (800c010 <MX_LWIP_Init+0x254>)
 800bec2:	785b      	ldrb	r3, [r3, #1]
 800bec4:	041b      	lsls	r3, r3, #16
 800bec6:	4319      	orrs	r1, r3
 800bec8:	4b51      	ldr	r3, [pc, #324]	@ (800c010 <MX_LWIP_Init+0x254>)
 800beca:	789b      	ldrb	r3, [r3, #2]
 800becc:	021b      	lsls	r3, r3, #8
 800bece:	430b      	orrs	r3, r1
 800bed0:	494f      	ldr	r1, [pc, #316]	@ (800c010 <MX_LWIP_Init+0x254>)
 800bed2:	78c9      	ldrb	r1, [r1, #3]
 800bed4:	430b      	orrs	r3, r1
 800bed6:	021b      	lsls	r3, r3, #8
 800bed8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bedc:	431a      	orrs	r2, r3
 800bede:	4b4c      	ldr	r3, [pc, #304]	@ (800c010 <MX_LWIP_Init+0x254>)
 800bee0:	781b      	ldrb	r3, [r3, #0]
 800bee2:	0619      	lsls	r1, r3, #24
 800bee4:	4b4a      	ldr	r3, [pc, #296]	@ (800c010 <MX_LWIP_Init+0x254>)
 800bee6:	785b      	ldrb	r3, [r3, #1]
 800bee8:	041b      	lsls	r3, r3, #16
 800beea:	4319      	orrs	r1, r3
 800beec:	4b48      	ldr	r3, [pc, #288]	@ (800c010 <MX_LWIP_Init+0x254>)
 800beee:	789b      	ldrb	r3, [r3, #2]
 800bef0:	021b      	lsls	r3, r3, #8
 800bef2:	430b      	orrs	r3, r1
 800bef4:	4946      	ldr	r1, [pc, #280]	@ (800c010 <MX_LWIP_Init+0x254>)
 800bef6:	78c9      	ldrb	r1, [r1, #3]
 800bef8:	430b      	orrs	r3, r1
 800befa:	0a1b      	lsrs	r3, r3, #8
 800befc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bf00:	431a      	orrs	r2, r3
 800bf02:	4b43      	ldr	r3, [pc, #268]	@ (800c010 <MX_LWIP_Init+0x254>)
 800bf04:	781b      	ldrb	r3, [r3, #0]
 800bf06:	0619      	lsls	r1, r3, #24
 800bf08:	4b41      	ldr	r3, [pc, #260]	@ (800c010 <MX_LWIP_Init+0x254>)
 800bf0a:	785b      	ldrb	r3, [r3, #1]
 800bf0c:	041b      	lsls	r3, r3, #16
 800bf0e:	4319      	orrs	r1, r3
 800bf10:	4b3f      	ldr	r3, [pc, #252]	@ (800c010 <MX_LWIP_Init+0x254>)
 800bf12:	789b      	ldrb	r3, [r3, #2]
 800bf14:	021b      	lsls	r3, r3, #8
 800bf16:	430b      	orrs	r3, r1
 800bf18:	493d      	ldr	r1, [pc, #244]	@ (800c010 <MX_LWIP_Init+0x254>)
 800bf1a:	78c9      	ldrb	r1, [r1, #3]
 800bf1c:	430b      	orrs	r3, r1
 800bf1e:	0e1b      	lsrs	r3, r3, #24
 800bf20:	4313      	orrs	r3, r2
 800bf22:	4a3e      	ldr	r2, [pc, #248]	@ (800c01c <MX_LWIP_Init+0x260>)
 800bf24:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800bf26:	4b3b      	ldr	r3, [pc, #236]	@ (800c014 <MX_LWIP_Init+0x258>)
 800bf28:	781b      	ldrb	r3, [r3, #0]
 800bf2a:	061a      	lsls	r2, r3, #24
 800bf2c:	4b39      	ldr	r3, [pc, #228]	@ (800c014 <MX_LWIP_Init+0x258>)
 800bf2e:	785b      	ldrb	r3, [r3, #1]
 800bf30:	041b      	lsls	r3, r3, #16
 800bf32:	431a      	orrs	r2, r3
 800bf34:	4b37      	ldr	r3, [pc, #220]	@ (800c014 <MX_LWIP_Init+0x258>)
 800bf36:	789b      	ldrb	r3, [r3, #2]
 800bf38:	021b      	lsls	r3, r3, #8
 800bf3a:	4313      	orrs	r3, r2
 800bf3c:	4a35      	ldr	r2, [pc, #212]	@ (800c014 <MX_LWIP_Init+0x258>)
 800bf3e:	78d2      	ldrb	r2, [r2, #3]
 800bf40:	4313      	orrs	r3, r2
 800bf42:	061a      	lsls	r2, r3, #24
 800bf44:	4b33      	ldr	r3, [pc, #204]	@ (800c014 <MX_LWIP_Init+0x258>)
 800bf46:	781b      	ldrb	r3, [r3, #0]
 800bf48:	0619      	lsls	r1, r3, #24
 800bf4a:	4b32      	ldr	r3, [pc, #200]	@ (800c014 <MX_LWIP_Init+0x258>)
 800bf4c:	785b      	ldrb	r3, [r3, #1]
 800bf4e:	041b      	lsls	r3, r3, #16
 800bf50:	4319      	orrs	r1, r3
 800bf52:	4b30      	ldr	r3, [pc, #192]	@ (800c014 <MX_LWIP_Init+0x258>)
 800bf54:	789b      	ldrb	r3, [r3, #2]
 800bf56:	021b      	lsls	r3, r3, #8
 800bf58:	430b      	orrs	r3, r1
 800bf5a:	492e      	ldr	r1, [pc, #184]	@ (800c014 <MX_LWIP_Init+0x258>)
 800bf5c:	78c9      	ldrb	r1, [r1, #3]
 800bf5e:	430b      	orrs	r3, r1
 800bf60:	021b      	lsls	r3, r3, #8
 800bf62:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bf66:	431a      	orrs	r2, r3
 800bf68:	4b2a      	ldr	r3, [pc, #168]	@ (800c014 <MX_LWIP_Init+0x258>)
 800bf6a:	781b      	ldrb	r3, [r3, #0]
 800bf6c:	0619      	lsls	r1, r3, #24
 800bf6e:	4b29      	ldr	r3, [pc, #164]	@ (800c014 <MX_LWIP_Init+0x258>)
 800bf70:	785b      	ldrb	r3, [r3, #1]
 800bf72:	041b      	lsls	r3, r3, #16
 800bf74:	4319      	orrs	r1, r3
 800bf76:	4b27      	ldr	r3, [pc, #156]	@ (800c014 <MX_LWIP_Init+0x258>)
 800bf78:	789b      	ldrb	r3, [r3, #2]
 800bf7a:	021b      	lsls	r3, r3, #8
 800bf7c:	430b      	orrs	r3, r1
 800bf7e:	4925      	ldr	r1, [pc, #148]	@ (800c014 <MX_LWIP_Init+0x258>)
 800bf80:	78c9      	ldrb	r1, [r1, #3]
 800bf82:	430b      	orrs	r3, r1
 800bf84:	0a1b      	lsrs	r3, r3, #8
 800bf86:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bf8a:	431a      	orrs	r2, r3
 800bf8c:	4b21      	ldr	r3, [pc, #132]	@ (800c014 <MX_LWIP_Init+0x258>)
 800bf8e:	781b      	ldrb	r3, [r3, #0]
 800bf90:	0619      	lsls	r1, r3, #24
 800bf92:	4b20      	ldr	r3, [pc, #128]	@ (800c014 <MX_LWIP_Init+0x258>)
 800bf94:	785b      	ldrb	r3, [r3, #1]
 800bf96:	041b      	lsls	r3, r3, #16
 800bf98:	4319      	orrs	r1, r3
 800bf9a:	4b1e      	ldr	r3, [pc, #120]	@ (800c014 <MX_LWIP_Init+0x258>)
 800bf9c:	789b      	ldrb	r3, [r3, #2]
 800bf9e:	021b      	lsls	r3, r3, #8
 800bfa0:	430b      	orrs	r3, r1
 800bfa2:	491c      	ldr	r1, [pc, #112]	@ (800c014 <MX_LWIP_Init+0x258>)
 800bfa4:	78c9      	ldrb	r1, [r1, #3]
 800bfa6:	430b      	orrs	r3, r1
 800bfa8:	0e1b      	lsrs	r3, r3, #24
 800bfaa:	4313      	orrs	r3, r2
 800bfac:	4a1c      	ldr	r2, [pc, #112]	@ (800c020 <MX_LWIP_Init+0x264>)
 800bfae:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800bfb0:	4b1c      	ldr	r3, [pc, #112]	@ (800c024 <MX_LWIP_Init+0x268>)
 800bfb2:	9302      	str	r3, [sp, #8]
 800bfb4:	4b1c      	ldr	r3, [pc, #112]	@ (800c028 <MX_LWIP_Init+0x26c>)
 800bfb6:	9301      	str	r3, [sp, #4]
 800bfb8:	2300      	movs	r3, #0
 800bfba:	9300      	str	r3, [sp, #0]
 800bfbc:	4b18      	ldr	r3, [pc, #96]	@ (800c020 <MX_LWIP_Init+0x264>)
 800bfbe:	4a17      	ldr	r2, [pc, #92]	@ (800c01c <MX_LWIP_Init+0x260>)
 800bfc0:	4915      	ldr	r1, [pc, #84]	@ (800c018 <MX_LWIP_Init+0x25c>)
 800bfc2:	481a      	ldr	r0, [pc, #104]	@ (800c02c <MX_LWIP_Init+0x270>)
 800bfc4:	f008 fa24 	bl	8014410 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800bfc8:	4818      	ldr	r0, [pc, #96]	@ (800c02c <MX_LWIP_Init+0x270>)
 800bfca:	f008 fcb5 	bl	8014938 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800bfce:	4817      	ldr	r0, [pc, #92]	@ (800c02c <MX_LWIP_Init+0x270>)
 800bfd0:	f008 fcd6 	bl	8014980 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800bfd4:	4916      	ldr	r1, [pc, #88]	@ (800c030 <MX_LWIP_Init+0x274>)
 800bfd6:	4815      	ldr	r0, [pc, #84]	@ (800c02c <MX_LWIP_Init+0x270>)
 800bfd8:	f008 fdd4 	bl	8014b84 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800bfdc:	2224      	movs	r2, #36	@ 0x24
 800bfde:	2100      	movs	r1, #0
 800bfe0:	4814      	ldr	r0, [pc, #80]	@ (800c034 <MX_LWIP_Init+0x278>)
 800bfe2:	f015 fa1f 	bl	8021424 <memset>
  attributes.name = "EthLink";
 800bfe6:	4b13      	ldr	r3, [pc, #76]	@ (800c034 <MX_LWIP_Init+0x278>)
 800bfe8:	4a13      	ldr	r2, [pc, #76]	@ (800c038 <MX_LWIP_Init+0x27c>)
 800bfea:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800bfec:	4b11      	ldr	r3, [pc, #68]	@ (800c034 <MX_LWIP_Init+0x278>)
 800bfee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800bff2:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800bff4:	4b0f      	ldr	r3, [pc, #60]	@ (800c034 <MX_LWIP_Init+0x278>)
 800bff6:	2210      	movs	r2, #16
 800bff8:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800bffa:	4a0e      	ldr	r2, [pc, #56]	@ (800c034 <MX_LWIP_Init+0x278>)
 800bffc:	490b      	ldr	r1, [pc, #44]	@ (800c02c <MX_LWIP_Init+0x270>)
 800bffe:	480f      	ldr	r0, [pc, #60]	@ (800c03c <MX_LWIP_Init+0x280>)
 800c000:	f000 fdd4 	bl	800cbac <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800c004:	bf00      	nop
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}
 800c00a:	bf00      	nop
 800c00c:	20000b94 	.word	0x20000b94
 800c010:	20000b98 	.word	0x20000b98
 800c014:	20000b9c 	.word	0x20000b9c
 800c018:	20000b88 	.word	0x20000b88
 800c01c:	20000b8c 	.word	0x20000b8c
 800c020:	20000b90 	.word	0x20000b90
 800c024:	08013305 	.word	0x08013305
 800c028:	0800c581 	.word	0x0800c581
 800c02c:	20000b54 	.word	0x20000b54
 800c030:	0800c041 	.word	0x0800c041
 800c034:	20000ba0 	.word	0x20000ba0
 800c038:	08022550 	.word	0x08022550
 800c03c:	0800c859 	.word	0x0800c859

0800c040 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800c040:	b480      	push	{r7}
 800c042:	b083      	sub	sp, #12
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800c048:	bf00      	nop
 800c04a:	370c      	adds	r7, #12
 800c04c:	46bd      	mov	sp, r7
 800c04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c052:	4770      	bx	lr

0800c054 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800c054:	b480      	push	{r7}
 800c056:	b087      	sub	sp, #28
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
 800c05c:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800c066:	2320      	movs	r3, #32
 800c068:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800c06a:	f3bf 8f4f 	dsb	sy
}
 800c06e:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 800c070:	e00b      	b.n	800c08a <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800c072:	4a0d      	ldr	r2, [pc, #52]	@ (800c0a8 <SCB_InvalidateDCache_by_Addr+0x54>)
 800c074:	693b      	ldr	r3, [r7, #16]
 800c076:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	693a      	ldr	r2, [r7, #16]
 800c07e:	4413      	add	r3, r2
 800c080:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800c082:	697a      	ldr	r2, [r7, #20]
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	1ad3      	subs	r3, r2, r3
 800c088:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	dcf0      	bgt.n	800c072 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800c090:	f3bf 8f4f 	dsb	sy
}
 800c094:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c096:	f3bf 8f6f 	isb	sy
}
 800c09a:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 800c09c:	bf00      	nop
 800c09e:	371c      	adds	r7, #28
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a6:	4770      	bx	lr
 800c0a8:	e000ed00 	.word	0xe000ed00

0800c0ac <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800c0b4:	4b04      	ldr	r3, [pc, #16]	@ (800c0c8 <HAL_ETH_RxCpltCallback+0x1c>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	f001 f9b3 	bl	800d424 <osSemaphoreRelease>
}
 800c0be:	bf00      	nop
 800c0c0:	3708      	adds	r7, #8
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}
 800c0c6:	bf00      	nop
 800c0c8:	20005770 	.word	0x20005770

0800c0cc <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b082      	sub	sp, #8
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800c0d4:	4b04      	ldr	r3, [pc, #16]	@ (800c0e8 <HAL_ETH_TxCpltCallback+0x1c>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f001 f9a3 	bl	800d424 <osSemaphoreRelease>
}
 800c0de:	bf00      	nop
 800c0e0:	3708      	adds	r7, #8
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
 800c0e6:	bf00      	nop
 800c0e8:	20005774 	.word	0x20005774

0800c0ec <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b082      	sub	sp, #8
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f7f8 fb90 	bl	800481a <HAL_ETH_GetDMAError>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c100:	2b80      	cmp	r3, #128	@ 0x80
 800c102:	d104      	bne.n	800c10e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800c104:	4b04      	ldr	r3, [pc, #16]	@ (800c118 <HAL_ETH_ErrorCallback+0x2c>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	4618      	mov	r0, r3
 800c10a:	f001 f98b 	bl	800d424 <osSemaphoreRelease>
  }
}
 800c10e:	bf00      	nop
 800c110:	3708      	adds	r7, #8
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}
 800c116:	bf00      	nop
 800c118:	20005770 	.word	0x20005770

0800c11c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b0aa      	sub	sp, #168	@ 0xa8
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800c124:	2300      	movs	r3, #0
 800c126:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800c12a:	2300      	movs	r3, #0
 800c12c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 800c130:	2300      	movs	r3, #0
 800c132:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800c136:	f107 0310 	add.w	r3, r7, #16
 800c13a:	2264      	movs	r2, #100	@ 0x64
 800c13c:	2100      	movs	r1, #0
 800c13e:	4618      	mov	r0, r3
 800c140:	f015 f970 	bl	8021424 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800c144:	4b89      	ldr	r3, [pc, #548]	@ (800c36c <low_level_init+0x250>)
 800c146:	4a8a      	ldr	r2, [pc, #552]	@ (800c370 <low_level_init+0x254>)
 800c148:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800c14a:	2300      	movs	r3, #0
 800c14c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800c14e:	2380      	movs	r3, #128	@ 0x80
 800c150:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800c152:	23e1      	movs	r3, #225	@ 0xe1
 800c154:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800c156:	2300      	movs	r3, #0
 800c158:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800c15a:	2300      	movs	r3, #0
 800c15c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800c15e:	2300      	movs	r3, #0
 800c160:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800c162:	4a82      	ldr	r2, [pc, #520]	@ (800c36c <low_level_init+0x250>)
 800c164:	f107 0308 	add.w	r3, r7, #8
 800c168:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800c16a:	4b80      	ldr	r3, [pc, #512]	@ (800c36c <low_level_init+0x250>)
 800c16c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800c170:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800c172:	4b7e      	ldr	r3, [pc, #504]	@ (800c36c <low_level_init+0x250>)
 800c174:	4a7f      	ldr	r2, [pc, #508]	@ (800c374 <low_level_init+0x258>)
 800c176:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800c178:	4b7c      	ldr	r3, [pc, #496]	@ (800c36c <low_level_init+0x250>)
 800c17a:	4a7f      	ldr	r2, [pc, #508]	@ (800c378 <low_level_init+0x25c>)
 800c17c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800c17e:	4b7b      	ldr	r3, [pc, #492]	@ (800c36c <low_level_init+0x250>)
 800c180:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800c184:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800c186:	4879      	ldr	r0, [pc, #484]	@ (800c36c <low_level_init+0x250>)
 800c188:	f7f7 fcfe 	bl	8003b88 <HAL_ETH_Init>
 800c18c:	4603      	mov	r3, r0
 800c18e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800c192:	2238      	movs	r2, #56	@ 0x38
 800c194:	2100      	movs	r1, #0
 800c196:	4879      	ldr	r0, [pc, #484]	@ (800c37c <low_level_init+0x260>)
 800c198:	f015 f944 	bl	8021424 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800c19c:	4b77      	ldr	r3, [pc, #476]	@ (800c37c <low_level_init+0x260>)
 800c19e:	2221      	movs	r2, #33	@ 0x21
 800c1a0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800c1a2:	4b76      	ldr	r3, [pc, #472]	@ (800c37c <low_level_init+0x260>)
 800c1a4:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800c1a8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800c1aa:	4b74      	ldr	r3, [pc, #464]	@ (800c37c <low_level_init+0x260>)
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800c1b0:	4873      	ldr	r0, [pc, #460]	@ (800c380 <low_level_init+0x264>)
 800c1b2:	f007 ff7d 	bl	80140b0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2206      	movs	r2, #6
 800c1ba:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800c1be:	4b6b      	ldr	r3, [pc, #428]	@ (800c36c <low_level_init+0x250>)
 800c1c0:	685b      	ldr	r3, [r3, #4]
 800c1c2:	781a      	ldrb	r2, [r3, #0]
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800c1ca:	4b68      	ldr	r3, [pc, #416]	@ (800c36c <low_level_init+0x250>)
 800c1cc:	685b      	ldr	r3, [r3, #4]
 800c1ce:	785a      	ldrb	r2, [r3, #1]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800c1d6:	4b65      	ldr	r3, [pc, #404]	@ (800c36c <low_level_init+0x250>)
 800c1d8:	685b      	ldr	r3, [r3, #4]
 800c1da:	789a      	ldrb	r2, [r3, #2]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800c1e2:	4b62      	ldr	r3, [pc, #392]	@ (800c36c <low_level_init+0x250>)
 800c1e4:	685b      	ldr	r3, [r3, #4]
 800c1e6:	78da      	ldrb	r2, [r3, #3]
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800c1ee:	4b5f      	ldr	r3, [pc, #380]	@ (800c36c <low_level_init+0x250>)
 800c1f0:	685b      	ldr	r3, [r3, #4]
 800c1f2:	791a      	ldrb	r2, [r3, #4]
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800c1fa:	4b5c      	ldr	r3, [pc, #368]	@ (800c36c <low_level_init+0x250>)
 800c1fc:	685b      	ldr	r3, [r3, #4]
 800c1fe:	795a      	ldrb	r2, [r3, #5]
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800c20c:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c214:	f043 030a 	orr.w	r3, r3, #10
 800c218:	b2da      	uxtb	r2, r3
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800c220:	2200      	movs	r2, #0
 800c222:	2100      	movs	r1, #0
 800c224:	2001      	movs	r0, #1
 800c226:	f000 fffb 	bl	800d220 <osSemaphoreNew>
 800c22a:	4603      	mov	r3, r0
 800c22c:	4a55      	ldr	r2, [pc, #340]	@ (800c384 <low_level_init+0x268>)
 800c22e:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800c230:	2200      	movs	r2, #0
 800c232:	2100      	movs	r1, #0
 800c234:	2001      	movs	r0, #1
 800c236:	f000 fff3 	bl	800d220 <osSemaphoreNew>
 800c23a:	4603      	mov	r3, r0
 800c23c:	4a52      	ldr	r2, [pc, #328]	@ (800c388 <low_level_init+0x26c>)
 800c23e:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800c240:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800c244:	2224      	movs	r2, #36	@ 0x24
 800c246:	2100      	movs	r1, #0
 800c248:	4618      	mov	r0, r3
 800c24a:	f015 f8eb 	bl	8021424 <memset>
  attributes.name = "EthIf";
 800c24e:	4b4f      	ldr	r3, [pc, #316]	@ (800c38c <low_level_init+0x270>)
 800c250:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800c252:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800c256:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 800c25a:	2330      	movs	r3, #48	@ 0x30
 800c25c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800c260:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800c264:	461a      	mov	r2, r3
 800c266:	6879      	ldr	r1, [r7, #4]
 800c268:	4849      	ldr	r0, [pc, #292]	@ (800c390 <low_level_init+0x274>)
 800c26a:	f000 fc9f 	bl	800cbac <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800c26e:	4949      	ldr	r1, [pc, #292]	@ (800c394 <low_level_init+0x278>)
 800c270:	4849      	ldr	r0, [pc, #292]	@ (800c398 <low_level_init+0x27c>)
 800c272:	f7f5 ff9c 	bl	80021ae <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800c276:	4848      	ldr	r0, [pc, #288]	@ (800c398 <low_level_init+0x27c>)
 800c278:	f7f5 ffcb 	bl	8002212 <LAN8742_Init>
 800c27c:	4603      	mov	r3, r0
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d006      	beq.n	800c290 <low_level_init+0x174>
  {
    netif_set_link_down(netif);
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f008 fc4e 	bl	8014b24 <netif_set_link_down>
    netif_set_down(netif);
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f008 fbe5 	bl	8014a58 <netif_set_down>
 800c28e:	e06a      	b.n	800c366 <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800c290:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c294:	2b00      	cmp	r3, #0
 800c296:	d164      	bne.n	800c362 <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c298:	483f      	ldr	r0, [pc, #252]	@ (800c398 <low_level_init+0x27c>)
 800c29a:	f7f6 f807 	bl	80022ac <LAN8742_GetLinkState>
 800c29e:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800c2a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c2a6:	2b01      	cmp	r3, #1
 800c2a8:	dc06      	bgt.n	800c2b8 <low_level_init+0x19c>
    {
      netif_set_link_down(netif);
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f008 fc3a 	bl	8014b24 <netif_set_link_down>
      netif_set_down(netif);
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f008 fbd1 	bl	8014a58 <netif_set_down>
 800c2b6:	e056      	b.n	800c366 <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 800c2b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c2bc:	3b02      	subs	r3, #2
 800c2be:	2b03      	cmp	r3, #3
 800c2c0:	d82a      	bhi.n	800c318 <low_level_init+0x1fc>
 800c2c2:	a201      	add	r2, pc, #4	@ (adr r2, 800c2c8 <low_level_init+0x1ac>)
 800c2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2c8:	0800c2d9 	.word	0x0800c2d9
 800c2cc:	0800c2eb 	.word	0x0800c2eb
 800c2d0:	0800c2fb 	.word	0x0800c2fb
 800c2d4:	0800c30b 	.word	0x0800c30b
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800c2d8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c2dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800c2e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c2e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c2e8:	e01f      	b.n	800c32a <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800c2f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c2f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c2f8:	e017      	b.n	800c32a <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800c2fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c2fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800c302:	2300      	movs	r3, #0
 800c304:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c308:	e00f      	b.n	800c32a <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800c30a:	2300      	movs	r3, #0
 800c30c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800c310:	2300      	movs	r3, #0
 800c312:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c316:	e008      	b.n	800c32a <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 800c318:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c31c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800c320:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c324:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c328:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800c32a:	f107 0310 	add.w	r3, r7, #16
 800c32e:	4619      	mov	r1, r3
 800c330:	480e      	ldr	r0, [pc, #56]	@ (800c36c <low_level_init+0x250>)
 800c332:	f7f8 f911 	bl	8004558 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800c336:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c33a:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 800c33c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c340:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800c342:	f107 0310 	add.w	r3, r7, #16
 800c346:	4619      	mov	r1, r3
 800c348:	4808      	ldr	r0, [pc, #32]	@ (800c36c <low_level_init+0x250>)
 800c34a:	f7f8 f9fc 	bl	8004746 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800c34e:	4807      	ldr	r0, [pc, #28]	@ (800c36c <low_level_init+0x250>)
 800c350:	f7f7 fcb4 	bl	8003cbc <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f008 fb13 	bl	8014980 <netif_set_up>
    netif_set_link_up(netif);
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f008 fbae 	bl	8014abc <netif_set_link_up>
 800c360:	e001      	b.n	800c366 <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 800c362:	f7f4 ff8f 	bl	8001284 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 800c366:	37a8      	adds	r7, #168	@ 0xa8
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}
 800c36c:	20005778 	.word	0x20005778
 800c370:	40028000 	.word	0x40028000
 800c374:	20000170 	.word	0x20000170
 800c378:	200000d0 	.word	0x200000d0
 800c37c:	20005828 	.word	0x20005828
 800c380:	080270d4 	.word	0x080270d4
 800c384:	20005770 	.word	0x20005770
 800c388:	20005774 	.word	0x20005774
 800c38c:	08022570 	.word	0x08022570
 800c390:	0800c52d 	.word	0x0800c52d
 800c394:	2000000c 	.word	0x2000000c
 800c398:	20005860 	.word	0x20005860

0800c39c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b092      	sub	sp, #72	@ 0x48
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
 800c3a4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800c3b4:	f107 030c 	add.w	r3, r7, #12
 800c3b8:	2230      	movs	r2, #48	@ 0x30
 800c3ba:	2100      	movs	r1, #0
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f015 f831 	bl	8021424 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800c3c2:	f107 030c 	add.w	r3, r7, #12
 800c3c6:	2230      	movs	r2, #48	@ 0x30
 800c3c8:	2100      	movs	r1, #0
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f015 f82a 	bl	8021424 <memset>

  for(q = p; q != NULL; q = q->next)
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	643b      	str	r3, [r7, #64]	@ 0x40
 800c3d4:	e045      	b.n	800c462 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800c3d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c3d8:	2b03      	cmp	r3, #3
 800c3da:	d902      	bls.n	800c3e2 <low_level_output+0x46>
      return ERR_IF;
 800c3dc:	f06f 030b 	mvn.w	r3, #11
 800c3e0:	e07f      	b.n	800c4e2 <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800c3e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c3e4:	6859      	ldr	r1, [r3, #4]
 800c3e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c3e8:	4613      	mov	r3, r2
 800c3ea:	005b      	lsls	r3, r3, #1
 800c3ec:	4413      	add	r3, r2
 800c3ee:	009b      	lsls	r3, r3, #2
 800c3f0:	3348      	adds	r3, #72	@ 0x48
 800c3f2:	443b      	add	r3, r7
 800c3f4:	3b3c      	subs	r3, #60	@ 0x3c
 800c3f6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800c3f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c3fa:	895b      	ldrh	r3, [r3, #10]
 800c3fc:	4619      	mov	r1, r3
 800c3fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c400:	4613      	mov	r3, r2
 800c402:	005b      	lsls	r3, r3, #1
 800c404:	4413      	add	r3, r2
 800c406:	009b      	lsls	r3, r3, #2
 800c408:	3348      	adds	r3, #72	@ 0x48
 800c40a:	443b      	add	r3, r7
 800c40c:	3b38      	subs	r3, #56	@ 0x38
 800c40e:	6019      	str	r1, [r3, #0]

    if(i>0)
 800c410:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c412:	2b00      	cmp	r3, #0
 800c414:	d011      	beq.n	800c43a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800c416:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c418:	1e5a      	subs	r2, r3, #1
 800c41a:	f107 000c 	add.w	r0, r7, #12
 800c41e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c420:	460b      	mov	r3, r1
 800c422:	005b      	lsls	r3, r3, #1
 800c424:	440b      	add	r3, r1
 800c426:	009b      	lsls	r3, r3, #2
 800c428:	18c1      	adds	r1, r0, r3
 800c42a:	4613      	mov	r3, r2
 800c42c:	005b      	lsls	r3, r3, #1
 800c42e:	4413      	add	r3, r2
 800c430:	009b      	lsls	r3, r3, #2
 800c432:	3348      	adds	r3, #72	@ 0x48
 800c434:	443b      	add	r3, r7
 800c436:	3b34      	subs	r3, #52	@ 0x34
 800c438:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800c43a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d109      	bne.n	800c456 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800c442:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c444:	4613      	mov	r3, r2
 800c446:	005b      	lsls	r3, r3, #1
 800c448:	4413      	add	r3, r2
 800c44a:	009b      	lsls	r3, r3, #2
 800c44c:	3348      	adds	r3, #72	@ 0x48
 800c44e:	443b      	add	r3, r7
 800c450:	3b34      	subs	r3, #52	@ 0x34
 800c452:	2200      	movs	r2, #0
 800c454:	601a      	str	r2, [r3, #0]
    }

    i++;
 800c456:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c458:	3301      	adds	r3, #1
 800c45a:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800c45c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	643b      	str	r3, [r7, #64]	@ 0x40
 800c462:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c464:	2b00      	cmp	r3, #0
 800c466:	d1b6      	bne.n	800c3d6 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	891b      	ldrh	r3, [r3, #8]
 800c46c:	461a      	mov	r2, r3
 800c46e:	4b1f      	ldr	r3, [pc, #124]	@ (800c4ec <low_level_output+0x150>)
 800c470:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800c472:	4a1e      	ldr	r2, [pc, #120]	@ (800c4ec <low_level_output+0x150>)
 800c474:	f107 030c 	add.w	r3, r7, #12
 800c478:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800c47a:	4a1c      	ldr	r2, [pc, #112]	@ (800c4ec <low_level_output+0x150>)
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800c480:	6838      	ldr	r0, [r7, #0]
 800c482:	f009 f83d 	bl	8015500 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800c486:	4919      	ldr	r1, [pc, #100]	@ (800c4ec <low_level_output+0x150>)
 800c488:	4819      	ldr	r0, [pc, #100]	@ (800c4f0 <low_level_output+0x154>)
 800c48a:	f7f7 fd07 	bl	8003e9c <HAL_ETH_Transmit_IT>
 800c48e:	4603      	mov	r3, r0
 800c490:	2b00      	cmp	r3, #0
 800c492:	d103      	bne.n	800c49c <low_level_output+0x100>
    {
      errval = ERR_OK;
 800c494:	2300      	movs	r3, #0
 800c496:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c49a:	e01b      	b.n	800c4d4 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 800c49c:	4814      	ldr	r0, [pc, #80]	@ (800c4f0 <low_level_output+0x154>)
 800c49e:	f7f8 f9af 	bl	8004800 <HAL_ETH_GetError>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	f003 0302 	and.w	r3, r3, #2
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d00d      	beq.n	800c4c8 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(  TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800c4ac:	4b11      	ldr	r3, [pc, #68]	@ (800c4f4 <low_level_output+0x158>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	f000 ff4f 	bl	800d358 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 800c4ba:	480d      	ldr	r0, [pc, #52]	@ (800c4f0 <low_level_output+0x154>)
 800c4bc:	f7f7 fe8e 	bl	80041dc <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800c4c0:	23fe      	movs	r3, #254	@ 0xfe
 800c4c2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c4c6:	e005      	b.n	800c4d4 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 800c4c8:	6838      	ldr	r0, [r7, #0]
 800c4ca:	f008 ff5b 	bl	8015384 <pbuf_free>
        errval =  ERR_IF;
 800c4ce:	23f4      	movs	r3, #244	@ 0xf4
 800c4d0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800c4d4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c4d8:	f113 0f02 	cmn.w	r3, #2
 800c4dc:	d0d3      	beq.n	800c486 <low_level_output+0xea>

  return errval;
 800c4de:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3748      	adds	r7, #72	@ 0x48
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}
 800c4ea:	bf00      	nop
 800c4ec:	20005828 	.word	0x20005828
 800c4f0:	20005778 	.word	0x20005778
 800c4f4:	20005774 	.word	0x20005774

0800c4f8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b084      	sub	sp, #16
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800c500:	2300      	movs	r3, #0
 800c502:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800c504:	4b07      	ldr	r3, [pc, #28]	@ (800c524 <low_level_input+0x2c>)
 800c506:	781b      	ldrb	r3, [r3, #0]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d105      	bne.n	800c518 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800c50c:	f107 030c 	add.w	r3, r7, #12
 800c510:	4619      	mov	r1, r3
 800c512:	4805      	ldr	r0, [pc, #20]	@ (800c528 <low_level_input+0x30>)
 800c514:	f7f7 fd1e 	bl	8003f54 <HAL_ETH_ReadData>
  }

  return p;
 800c518:	68fb      	ldr	r3, [r7, #12]
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3710      	adds	r7, #16
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}
 800c522:	bf00      	nop
 800c524:	2000576c 	.word	0x2000576c
 800c528:	20005778 	.word	0x20005778

0800c52c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b084      	sub	sp, #16
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800c534:	2300      	movs	r3, #0
 800c536:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800c53c:	4b0f      	ldr	r3, [pc, #60]	@ (800c57c <ethernetif_input+0x50>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800c544:	4618      	mov	r0, r3
 800c546:	f000 ff07 	bl	800d358 <osSemaphoreAcquire>
 800c54a:	4603      	mov	r3, r0
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d1f5      	bne.n	800c53c <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800c550:	68b8      	ldr	r0, [r7, #8]
 800c552:	f7ff ffd1 	bl	800c4f8 <low_level_input>
 800c556:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d00a      	beq.n	800c574 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	691b      	ldr	r3, [r3, #16]
 800c562:	68b9      	ldr	r1, [r7, #8]
 800c564:	68f8      	ldr	r0, [r7, #12]
 800c566:	4798      	blx	r3
 800c568:	4603      	mov	r3, r0
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d002      	beq.n	800c574 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800c56e:	68f8      	ldr	r0, [r7, #12]
 800c570:	f008 ff08 	bl	8015384 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d1ea      	bne.n	800c550 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800c57a:	e7df      	b.n	800c53c <ethernetif_input+0x10>
 800c57c:	20005770 	.word	0x20005770

0800c580 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b082      	sub	sp, #8
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d106      	bne.n	800c59c <ethernetif_init+0x1c>
 800c58e:	4b0e      	ldr	r3, [pc, #56]	@ (800c5c8 <ethernetif_init+0x48>)
 800c590:	f240 220d 	movw	r2, #525	@ 0x20d
 800c594:	490d      	ldr	r1, [pc, #52]	@ (800c5cc <ethernetif_init+0x4c>)
 800c596:	480e      	ldr	r0, [pc, #56]	@ (800c5d0 <ethernetif_init+0x50>)
 800c598:	f014 fd94 	bl	80210c4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2273      	movs	r2, #115	@ 0x73
 800c5a0:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2274      	movs	r2, #116	@ 0x74
 800c5a8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	4a09      	ldr	r2, [pc, #36]	@ (800c5d4 <ethernetif_init+0x54>)
 800c5b0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	4a08      	ldr	r2, [pc, #32]	@ (800c5d8 <ethernetif_init+0x58>)
 800c5b6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f7ff fdaf 	bl	800c11c <low_level_init>

  return ERR_OK;
 800c5be:	2300      	movs	r3, #0
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3708      	adds	r7, #8
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}
 800c5c8:	08022578 	.word	0x08022578
 800c5cc:	08022594 	.word	0x08022594
 800c5d0:	080225a4 	.word	0x080225a4
 800c5d4:	0801d8a9 	.word	0x0801d8a9
 800c5d8:	0800c39d 	.word	0x0800c39d

0800c5dc <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b084      	sub	sp, #16
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800c5e8:	68f9      	ldr	r1, [r7, #12]
 800c5ea:	4809      	ldr	r0, [pc, #36]	@ (800c610 <pbuf_free_custom+0x34>)
 800c5ec:	f007 feb8 	bl	8014360 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800c5f0:	4b08      	ldr	r3, [pc, #32]	@ (800c614 <pbuf_free_custom+0x38>)
 800c5f2:	781b      	ldrb	r3, [r3, #0]
 800c5f4:	2b01      	cmp	r3, #1
 800c5f6:	d107      	bne.n	800c608 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800c5f8:	4b06      	ldr	r3, [pc, #24]	@ (800c614 <pbuf_free_custom+0x38>)
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800c5fe:	4b06      	ldr	r3, [pc, #24]	@ (800c618 <pbuf_free_custom+0x3c>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	4618      	mov	r0, r3
 800c604:	f000 ff0e 	bl	800d424 <osSemaphoreRelease>
  }
}
 800c608:	bf00      	nop
 800c60a:	3710      	adds	r7, #16
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}
 800c610:	080270d4 	.word	0x080270d4
 800c614:	2000576c 	.word	0x2000576c
 800c618:	20005770 	.word	0x20005770

0800c61c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c620:	f7f5 feec 	bl	80023fc <HAL_GetTick>
 800c624:	4603      	mov	r3, r0
}
 800c626:	4618      	mov	r0, r3
 800c628:	bd80      	pop	{r7, pc}
	...

0800c62c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b08e      	sub	sp, #56	@ 0x38
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c634:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c638:	2200      	movs	r2, #0
 800c63a:	601a      	str	r2, [r3, #0]
 800c63c:	605a      	str	r2, [r3, #4]
 800c63e:	609a      	str	r2, [r3, #8]
 800c640:	60da      	str	r2, [r3, #12]
 800c642:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	4a56      	ldr	r2, [pc, #344]	@ (800c7a4 <HAL_ETH_MspInit+0x178>)
 800c64a:	4293      	cmp	r3, r2
 800c64c:	f040 80a6 	bne.w	800c79c <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800c650:	4b55      	ldr	r3, [pc, #340]	@ (800c7a8 <HAL_ETH_MspInit+0x17c>)
 800c652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c654:	4a54      	ldr	r2, [pc, #336]	@ (800c7a8 <HAL_ETH_MspInit+0x17c>)
 800c656:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c65a:	6313      	str	r3, [r2, #48]	@ 0x30
 800c65c:	4b52      	ldr	r3, [pc, #328]	@ (800c7a8 <HAL_ETH_MspInit+0x17c>)
 800c65e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c660:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c664:	623b      	str	r3, [r7, #32]
 800c666:	6a3b      	ldr	r3, [r7, #32]
 800c668:	4b4f      	ldr	r3, [pc, #316]	@ (800c7a8 <HAL_ETH_MspInit+0x17c>)
 800c66a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c66c:	4a4e      	ldr	r2, [pc, #312]	@ (800c7a8 <HAL_ETH_MspInit+0x17c>)
 800c66e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c672:	6313      	str	r3, [r2, #48]	@ 0x30
 800c674:	4b4c      	ldr	r3, [pc, #304]	@ (800c7a8 <HAL_ETH_MspInit+0x17c>)
 800c676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c678:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c67c:	61fb      	str	r3, [r7, #28]
 800c67e:	69fb      	ldr	r3, [r7, #28]
 800c680:	4b49      	ldr	r3, [pc, #292]	@ (800c7a8 <HAL_ETH_MspInit+0x17c>)
 800c682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c684:	4a48      	ldr	r2, [pc, #288]	@ (800c7a8 <HAL_ETH_MspInit+0x17c>)
 800c686:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c68a:	6313      	str	r3, [r2, #48]	@ 0x30
 800c68c:	4b46      	ldr	r3, [pc, #280]	@ (800c7a8 <HAL_ETH_MspInit+0x17c>)
 800c68e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c690:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c694:	61bb      	str	r3, [r7, #24]
 800c696:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c698:	4b43      	ldr	r3, [pc, #268]	@ (800c7a8 <HAL_ETH_MspInit+0x17c>)
 800c69a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c69c:	4a42      	ldr	r2, [pc, #264]	@ (800c7a8 <HAL_ETH_MspInit+0x17c>)
 800c69e:	f043 0304 	orr.w	r3, r3, #4
 800c6a2:	6313      	str	r3, [r2, #48]	@ 0x30
 800c6a4:	4b40      	ldr	r3, [pc, #256]	@ (800c7a8 <HAL_ETH_MspInit+0x17c>)
 800c6a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6a8:	f003 0304 	and.w	r3, r3, #4
 800c6ac:	617b      	str	r3, [r7, #20]
 800c6ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c6b0:	4b3d      	ldr	r3, [pc, #244]	@ (800c7a8 <HAL_ETH_MspInit+0x17c>)
 800c6b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6b4:	4a3c      	ldr	r2, [pc, #240]	@ (800c7a8 <HAL_ETH_MspInit+0x17c>)
 800c6b6:	f043 0301 	orr.w	r3, r3, #1
 800c6ba:	6313      	str	r3, [r2, #48]	@ 0x30
 800c6bc:	4b3a      	ldr	r3, [pc, #232]	@ (800c7a8 <HAL_ETH_MspInit+0x17c>)
 800c6be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6c0:	f003 0301 	and.w	r3, r3, #1
 800c6c4:	613b      	str	r3, [r7, #16]
 800c6c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c6c8:	4b37      	ldr	r3, [pc, #220]	@ (800c7a8 <HAL_ETH_MspInit+0x17c>)
 800c6ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6cc:	4a36      	ldr	r2, [pc, #216]	@ (800c7a8 <HAL_ETH_MspInit+0x17c>)
 800c6ce:	f043 0302 	orr.w	r3, r3, #2
 800c6d2:	6313      	str	r3, [r2, #48]	@ 0x30
 800c6d4:	4b34      	ldr	r3, [pc, #208]	@ (800c7a8 <HAL_ETH_MspInit+0x17c>)
 800c6d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6d8:	f003 0302 	and.w	r3, r3, #2
 800c6dc:	60fb      	str	r3, [r7, #12]
 800c6de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800c6e0:	4b31      	ldr	r3, [pc, #196]	@ (800c7a8 <HAL_ETH_MspInit+0x17c>)
 800c6e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6e4:	4a30      	ldr	r2, [pc, #192]	@ (800c7a8 <HAL_ETH_MspInit+0x17c>)
 800c6e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c6ea:	6313      	str	r3, [r2, #48]	@ 0x30
 800c6ec:	4b2e      	ldr	r3, [pc, #184]	@ (800c7a8 <HAL_ETH_MspInit+0x17c>)
 800c6ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6f4:	60bb      	str	r3, [r7, #8]
 800c6f6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800c6f8:	2332      	movs	r3, #50	@ 0x32
 800c6fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c6fc:	2302      	movs	r3, #2
 800c6fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c700:	2300      	movs	r3, #0
 800c702:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c704:	2303      	movs	r3, #3
 800c706:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c708:	230b      	movs	r3, #11
 800c70a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c70c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c710:	4619      	mov	r1, r3
 800c712:	4826      	ldr	r0, [pc, #152]	@ (800c7ac <HAL_ETH_MspInit+0x180>)
 800c714:	f7f8 fcae 	bl	8005074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800c718:	2386      	movs	r3, #134	@ 0x86
 800c71a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c71c:	2302      	movs	r3, #2
 800c71e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c720:	2300      	movs	r3, #0
 800c722:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c724:	2303      	movs	r3, #3
 800c726:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c728:	230b      	movs	r3, #11
 800c72a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c72c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c730:	4619      	mov	r1, r3
 800c732:	481f      	ldr	r0, [pc, #124]	@ (800c7b0 <HAL_ETH_MspInit+0x184>)
 800c734:	f7f8 fc9e 	bl	8005074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800c738:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c73c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c73e:	2302      	movs	r3, #2
 800c740:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c742:	2300      	movs	r3, #0
 800c744:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c746:	2303      	movs	r3, #3
 800c748:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c74a:	230b      	movs	r3, #11
 800c74c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c74e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c752:	4619      	mov	r1, r3
 800c754:	4817      	ldr	r0, [pc, #92]	@ (800c7b4 <HAL_ETH_MspInit+0x188>)
 800c756:	f7f8 fc8d 	bl	8005074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800c75a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800c75e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c760:	2302      	movs	r3, #2
 800c762:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c764:	2300      	movs	r3, #0
 800c766:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c768:	2303      	movs	r3, #3
 800c76a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c76c:	230b      	movs	r3, #11
 800c76e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c770:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c774:	4619      	mov	r1, r3
 800c776:	4810      	ldr	r0, [pc, #64]	@ (800c7b8 <HAL_ETH_MspInit+0x18c>)
 800c778:	f7f8 fc7c 	bl	8005074 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800c77c:	2200      	movs	r2, #0
 800c77e:	2105      	movs	r1, #5
 800c780:	203d      	movs	r0, #61	@ 0x3d
 800c782:	f7f6 fba9 	bl	8002ed8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800c786:	203d      	movs	r0, #61	@ 0x3d
 800c788:	f7f6 fbc2 	bl	8002f10 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 800c78c:	2200      	movs	r2, #0
 800c78e:	2105      	movs	r1, #5
 800c790:	203e      	movs	r0, #62	@ 0x3e
 800c792:	f7f6 fba1 	bl	8002ed8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800c796:	203e      	movs	r0, #62	@ 0x3e
 800c798:	f7f6 fbba 	bl	8002f10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800c79c:	bf00      	nop
 800c79e:	3738      	adds	r7, #56	@ 0x38
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bd80      	pop	{r7, pc}
 800c7a4:	40028000 	.word	0x40028000
 800c7a8:	40023800 	.word	0x40023800
 800c7ac:	40020800 	.word	0x40020800
 800c7b0:	40020000 	.word	0x40020000
 800c7b4:	40020400 	.word	0x40020400
 800c7b8:	40021800 	.word	0x40021800

0800c7bc <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800c7c0:	4802      	ldr	r0, [pc, #8]	@ (800c7cc <ETH_PHY_IO_Init+0x10>)
 800c7c2:	f7f7 ffdb 	bl	800477c <HAL_ETH_SetMDIOClockRange>

  return 0;
 800c7c6:	2300      	movs	r3, #0
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	bd80      	pop	{r7, pc}
 800c7cc:	20005778 	.word	0x20005778

0800c7d0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	af00      	add	r7, sp, #0
  return 0;
 800c7d4:	2300      	movs	r3, #0
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7de:	4770      	bx	lr

0800c7e0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b084      	sub	sp, #16
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	60f8      	str	r0, [r7, #12]
 800c7e8:	60b9      	str	r1, [r7, #8]
 800c7ea:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	68ba      	ldr	r2, [r7, #8]
 800c7f0:	68f9      	ldr	r1, [r7, #12]
 800c7f2:	4807      	ldr	r0, [pc, #28]	@ (800c810 <ETH_PHY_IO_ReadReg+0x30>)
 800c7f4:	f7f7 fe1c 	bl	8004430 <HAL_ETH_ReadPHYRegister>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d002      	beq.n	800c804 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800c7fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c802:	e000      	b.n	800c806 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800c804:	2300      	movs	r3, #0
}
 800c806:	4618      	mov	r0, r3
 800c808:	3710      	adds	r7, #16
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}
 800c80e:	bf00      	nop
 800c810:	20005778 	.word	0x20005778

0800c814 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b084      	sub	sp, #16
 800c818:	af00      	add	r7, sp, #0
 800c81a:	60f8      	str	r0, [r7, #12]
 800c81c:	60b9      	str	r1, [r7, #8]
 800c81e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	68ba      	ldr	r2, [r7, #8]
 800c824:	68f9      	ldr	r1, [r7, #12]
 800c826:	4807      	ldr	r0, [pc, #28]	@ (800c844 <ETH_PHY_IO_WriteReg+0x30>)
 800c828:	f7f7 fe4d 	bl	80044c6 <HAL_ETH_WritePHYRegister>
 800c82c:	4603      	mov	r3, r0
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d002      	beq.n	800c838 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800c832:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c836:	e000      	b.n	800c83a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800c838:	2300      	movs	r3, #0
}
 800c83a:	4618      	mov	r0, r3
 800c83c:	3710      	adds	r7, #16
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}
 800c842:	bf00      	nop
 800c844:	20005778 	.word	0x20005778

0800c848 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c84c:	f7f5 fdd6 	bl	80023fc <HAL_GetTick>
 800c850:	4603      	mov	r3, r0
}
 800c852:	4618      	mov	r0, r3
 800c854:	bd80      	pop	{r7, pc}
	...

0800c858 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b0a0      	sub	sp, #128	@ 0x80
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800c860:	f107 0308 	add.w	r3, r7, #8
 800c864:	2264      	movs	r2, #100	@ 0x64
 800c866:	2100      	movs	r1, #0
 800c868:	4618      	mov	r0, r3
 800c86a:	f014 fddb 	bl	8021424 <memset>
  int32_t PHYLinkState = 0;
 800c86e:	2300      	movs	r3, #0
 800c870:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800c872:	2300      	movs	r3, #0
 800c874:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c876:	2300      	movs	r3, #0
 800c878:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c87a:	2300      	movs	r3, #0
 800c87c:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c882:	483a      	ldr	r0, [pc, #232]	@ (800c96c <ethernet_link_thread+0x114>)
 800c884:	f7f5 fd12 	bl	80022ac <LAN8742_GetLinkState>
 800c888:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800c88a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c88c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c890:	089b      	lsrs	r3, r3, #2
 800c892:	f003 0301 	and.w	r3, r3, #1
 800c896:	b2db      	uxtb	r3, r3
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d00c      	beq.n	800c8b6 <ethernet_link_thread+0x5e>
 800c89c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c89e:	2b01      	cmp	r3, #1
 800c8a0:	dc09      	bgt.n	800c8b6 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800c8a2:	4833      	ldr	r0, [pc, #204]	@ (800c970 <ethernet_link_thread+0x118>)
 800c8a4:	f7f7 fa7a 	bl	8003d9c <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800c8a8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c8aa:	f008 f8d5 	bl	8014a58 <netif_set_down>
    netif_set_link_down(netif);
 800c8ae:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c8b0:	f008 f938 	bl	8014b24 <netif_set_link_down>
 800c8b4:	e055      	b.n	800c962 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800c8b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c8b8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c8bc:	f003 0304 	and.w	r3, r3, #4
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d14e      	bne.n	800c962 <ethernet_link_thread+0x10a>
 800c8c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c8c6:	2b01      	cmp	r3, #1
 800c8c8:	dd4b      	ble.n	800c962 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800c8ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c8cc:	3b02      	subs	r3, #2
 800c8ce:	2b03      	cmp	r3, #3
 800c8d0:	d82a      	bhi.n	800c928 <ethernet_link_thread+0xd0>
 800c8d2:	a201      	add	r2, pc, #4	@ (adr r2, 800c8d8 <ethernet_link_thread+0x80>)
 800c8d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8d8:	0800c8e9 	.word	0x0800c8e9
 800c8dc:	0800c8fb 	.word	0x0800c8fb
 800c8e0:	0800c90b 	.word	0x0800c90b
 800c8e4:	0800c91b 	.word	0x0800c91b
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800c8e8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c8ec:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800c8ee:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c8f2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c8f8:	e017      	b.n	800c92a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800c8fe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c902:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c904:	2301      	movs	r3, #1
 800c906:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c908:	e00f      	b.n	800c92a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800c90a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c90e:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800c910:	2300      	movs	r3, #0
 800c912:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c914:	2301      	movs	r3, #1
 800c916:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c918:	e007      	b.n	800c92a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800c91a:	2300      	movs	r3, #0
 800c91c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800c91e:	2300      	movs	r3, #0
 800c920:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c922:	2301      	movs	r3, #1
 800c924:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c926:	e000      	b.n	800c92a <ethernet_link_thread+0xd2>
    default:
      break;
 800c928:	bf00      	nop
    }

    if(linkchanged)
 800c92a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d018      	beq.n	800c962 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800c930:	f107 0308 	add.w	r3, r7, #8
 800c934:	4619      	mov	r1, r3
 800c936:	480e      	ldr	r0, [pc, #56]	@ (800c970 <ethernet_link_thread+0x118>)
 800c938:	f7f7 fe0e 	bl	8004558 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800c93c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c93e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800c940:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c942:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800c944:	f107 0308 	add.w	r3, r7, #8
 800c948:	4619      	mov	r1, r3
 800c94a:	4809      	ldr	r0, [pc, #36]	@ (800c970 <ethernet_link_thread+0x118>)
 800c94c:	f7f7 fefb 	bl	8004746 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800c950:	4807      	ldr	r0, [pc, #28]	@ (800c970 <ethernet_link_thread+0x118>)
 800c952:	f7f7 f9b3 	bl	8003cbc <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800c956:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c958:	f008 f812 	bl	8014980 <netif_set_up>
      netif_set_link_up(netif);
 800c95c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c95e:	f008 f8ad 	bl	8014abc <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800c962:	2064      	movs	r0, #100	@ 0x64
 800c964:	f000 f9c8 	bl	800ccf8 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c968:	e78b      	b.n	800c882 <ethernet_link_thread+0x2a>
 800c96a:	bf00      	nop
 800c96c:	20005860 	.word	0x20005860
 800c970:	20005778 	.word	0x20005778

0800c974 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b086      	sub	sp, #24
 800c978:	af02      	add	r7, sp, #8
 800c97a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800c97c:	f240 3261 	movw	r2, #865	@ 0x361
 800c980:	4913      	ldr	r1, [pc, #76]	@ (800c9d0 <HAL_ETH_RxAllocateCallback+0x5c>)
 800c982:	4814      	ldr	r0, [pc, #80]	@ (800c9d4 <HAL_ETH_RxAllocateCallback+0x60>)
 800c984:	f007 fc58 	bl	8014238 <memp_malloc_pool_fn>
 800c988:	60f8      	str	r0, [r7, #12]
  if (p)
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d014      	beq.n	800c9ba <HAL_ETH_RxAllocateCallback+0x46>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	f103 0220 	add.w	r2, r3, #32
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	4a0e      	ldr	r2, [pc, #56]	@ (800c9d8 <HAL_ETH_RxAllocateCallback+0x64>)
 800c99e:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800c9a8:	9201      	str	r2, [sp, #4]
 800c9aa:	9300      	str	r3, [sp, #0]
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	2241      	movs	r2, #65	@ 0x41
 800c9b0:	2100      	movs	r1, #0
 800c9b2:	2000      	movs	r0, #0
 800c9b4:	f008 fb04 	bl	8014fc0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800c9b8:	e005      	b.n	800c9c6 <HAL_ETH_RxAllocateCallback+0x52>
    RxAllocStatus = RX_ALLOC_ERROR;
 800c9ba:	4b08      	ldr	r3, [pc, #32]	@ (800c9dc <HAL_ETH_RxAllocateCallback+0x68>)
 800c9bc:	2201      	movs	r2, #1
 800c9be:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	601a      	str	r2, [r3, #0]
}
 800c9c6:	bf00      	nop
 800c9c8:	3710      	adds	r7, #16
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}
 800c9ce:	bf00      	nop
 800c9d0:	08022578 	.word	0x08022578
 800c9d4:	080270d4 	.word	0x080270d4
 800c9d8:	0800c5dd 	.word	0x0800c5dd
 800c9dc:	2000576c 	.word	0x2000576c

0800c9e0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b088      	sub	sp, #32
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	60f8      	str	r0, [r7, #12]
 800c9e8:	60b9      	str	r1, [r7, #8]
 800c9ea:	607a      	str	r2, [r7, #4]
 800c9ec:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	3b20      	subs	r3, #32
 800c9fe:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800ca00:	69fb      	ldr	r3, [r7, #28]
 800ca02:	2200      	movs	r2, #0
 800ca04:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800ca06:	69fb      	ldr	r3, [r7, #28]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800ca0c:	69fb      	ldr	r3, [r7, #28]
 800ca0e:	887a      	ldrh	r2, [r7, #2]
 800ca10:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800ca12:	69bb      	ldr	r3, [r7, #24]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d103      	bne.n	800ca22 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800ca1a:	69bb      	ldr	r3, [r7, #24]
 800ca1c:	69fa      	ldr	r2, [r7, #28]
 800ca1e:	601a      	str	r2, [r3, #0]
 800ca20:	e003      	b.n	800ca2a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	69fa      	ldr	r2, [r7, #28]
 800ca28:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800ca2a:	697b      	ldr	r3, [r7, #20]
 800ca2c:	69fa      	ldr	r2, [r7, #28]
 800ca2e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800ca30:	69bb      	ldr	r3, [r7, #24]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	61fb      	str	r3, [r7, #28]
 800ca36:	e009      	b.n	800ca4c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800ca38:	69fb      	ldr	r3, [r7, #28]
 800ca3a:	891a      	ldrh	r2, [r3, #8]
 800ca3c:	887b      	ldrh	r3, [r7, #2]
 800ca3e:	4413      	add	r3, r2
 800ca40:	b29a      	uxth	r2, r3
 800ca42:	69fb      	ldr	r3, [r7, #28]
 800ca44:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800ca46:	69fb      	ldr	r3, [r7, #28]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	61fb      	str	r3, [r7, #28]
 800ca4c:	69fb      	ldr	r3, [r7, #28]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d1f2      	bne.n	800ca38 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800ca52:	887b      	ldrh	r3, [r7, #2]
 800ca54:	4619      	mov	r1, r3
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	f7ff fafc 	bl	800c054 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800ca5c:	bf00      	nop
 800ca5e:	3720      	adds	r7, #32
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}

0800ca64 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b082      	sub	sp, #8
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	f008 fc89 	bl	8015384 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800ca72:	bf00      	nop
 800ca74:	3708      	adds	r7, #8
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}

0800ca7a <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ca7a:	b480      	push	{r7}
 800ca7c:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800ca7e:	bf00      	nop
 800ca80:	46bd      	mov	sp, r7
 800ca82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca86:	4770      	bx	lr

0800ca88 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ca88:	b480      	push	{r7}
 800ca8a:	b085      	sub	sp, #20
 800ca8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca8e:	f3ef 8305 	mrs	r3, IPSR
 800ca92:	60bb      	str	r3, [r7, #8]
  return(result);
 800ca94:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d10f      	bne.n	800caba <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca9a:	f3ef 8310 	mrs	r3, PRIMASK
 800ca9e:	607b      	str	r3, [r7, #4]
  return(result);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d105      	bne.n	800cab2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800caa6:	f3ef 8311 	mrs	r3, BASEPRI
 800caaa:	603b      	str	r3, [r7, #0]
  return(result);
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d007      	beq.n	800cac2 <osKernelInitialize+0x3a>
 800cab2:	4b0e      	ldr	r3, [pc, #56]	@ (800caec <osKernelInitialize+0x64>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	2b02      	cmp	r3, #2
 800cab8:	d103      	bne.n	800cac2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800caba:	f06f 0305 	mvn.w	r3, #5
 800cabe:	60fb      	str	r3, [r7, #12]
 800cac0:	e00c      	b.n	800cadc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cac2:	4b0a      	ldr	r3, [pc, #40]	@ (800caec <osKernelInitialize+0x64>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d105      	bne.n	800cad6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800caca:	4b08      	ldr	r3, [pc, #32]	@ (800caec <osKernelInitialize+0x64>)
 800cacc:	2201      	movs	r2, #1
 800cace:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cad0:	2300      	movs	r3, #0
 800cad2:	60fb      	str	r3, [r7, #12]
 800cad4:	e002      	b.n	800cadc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800cad6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cada:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800cadc:	68fb      	ldr	r3, [r7, #12]
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3714      	adds	r7, #20
 800cae2:	46bd      	mov	sp, r7
 800cae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae8:	4770      	bx	lr
 800caea:	bf00      	nop
 800caec:	20005880 	.word	0x20005880

0800caf0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b084      	sub	sp, #16
 800caf4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800caf6:	f3ef 8305 	mrs	r3, IPSR
 800cafa:	60bb      	str	r3, [r7, #8]
  return(result);
 800cafc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d10f      	bne.n	800cb22 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb02:	f3ef 8310 	mrs	r3, PRIMASK
 800cb06:	607b      	str	r3, [r7, #4]
  return(result);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d105      	bne.n	800cb1a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cb0e:	f3ef 8311 	mrs	r3, BASEPRI
 800cb12:	603b      	str	r3, [r7, #0]
  return(result);
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d007      	beq.n	800cb2a <osKernelStart+0x3a>
 800cb1a:	4b0f      	ldr	r3, [pc, #60]	@ (800cb58 <osKernelStart+0x68>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	2b02      	cmp	r3, #2
 800cb20:	d103      	bne.n	800cb2a <osKernelStart+0x3a>
    stat = osErrorISR;
 800cb22:	f06f 0305 	mvn.w	r3, #5
 800cb26:	60fb      	str	r3, [r7, #12]
 800cb28:	e010      	b.n	800cb4c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cb2a:	4b0b      	ldr	r3, [pc, #44]	@ (800cb58 <osKernelStart+0x68>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	2b01      	cmp	r3, #1
 800cb30:	d109      	bne.n	800cb46 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cb32:	f7ff ffa2 	bl	800ca7a <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cb36:	4b08      	ldr	r3, [pc, #32]	@ (800cb58 <osKernelStart+0x68>)
 800cb38:	2202      	movs	r2, #2
 800cb3a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cb3c:	f002 fd32 	bl	800f5a4 <vTaskStartScheduler>
      stat = osOK;
 800cb40:	2300      	movs	r3, #0
 800cb42:	60fb      	str	r3, [r7, #12]
 800cb44:	e002      	b.n	800cb4c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800cb46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cb4a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800cb4c:	68fb      	ldr	r3, [r7, #12]
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	3710      	adds	r7, #16
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}
 800cb56:	bf00      	nop
 800cb58:	20005880 	.word	0x20005880

0800cb5c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b084      	sub	sp, #16
 800cb60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb62:	f3ef 8305 	mrs	r3, IPSR
 800cb66:	60bb      	str	r3, [r7, #8]
  return(result);
 800cb68:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d10f      	bne.n	800cb8e <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb6e:	f3ef 8310 	mrs	r3, PRIMASK
 800cb72:	607b      	str	r3, [r7, #4]
  return(result);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d105      	bne.n	800cb86 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cb7a:	f3ef 8311 	mrs	r3, BASEPRI
 800cb7e:	603b      	str	r3, [r7, #0]
  return(result);
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d007      	beq.n	800cb96 <osKernelGetTickCount+0x3a>
 800cb86:	4b08      	ldr	r3, [pc, #32]	@ (800cba8 <osKernelGetTickCount+0x4c>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	2b02      	cmp	r3, #2
 800cb8c:	d103      	bne.n	800cb96 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800cb8e:	f002 fe3b 	bl	800f808 <xTaskGetTickCountFromISR>
 800cb92:	60f8      	str	r0, [r7, #12]
 800cb94:	e002      	b.n	800cb9c <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800cb96:	f002 fe27 	bl	800f7e8 <xTaskGetTickCount>
 800cb9a:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800cb9c:	68fb      	ldr	r3, [r7, #12]
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	3710      	adds	r7, #16
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}
 800cba6:	bf00      	nop
 800cba8:	20005880 	.word	0x20005880

0800cbac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b090      	sub	sp, #64	@ 0x40
 800cbb0:	af04      	add	r7, sp, #16
 800cbb2:	60f8      	str	r0, [r7, #12]
 800cbb4:	60b9      	str	r1, [r7, #8]
 800cbb6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cbbc:	f3ef 8305 	mrs	r3, IPSR
 800cbc0:	61fb      	str	r3, [r7, #28]
  return(result);
 800cbc2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	f040 8090 	bne.w	800ccea <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cbca:	f3ef 8310 	mrs	r3, PRIMASK
 800cbce:	61bb      	str	r3, [r7, #24]
  return(result);
 800cbd0:	69bb      	ldr	r3, [r7, #24]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d105      	bne.n	800cbe2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cbd6:	f3ef 8311 	mrs	r3, BASEPRI
 800cbda:	617b      	str	r3, [r7, #20]
  return(result);
 800cbdc:	697b      	ldr	r3, [r7, #20]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d003      	beq.n	800cbea <osThreadNew+0x3e>
 800cbe2:	4b44      	ldr	r3, [pc, #272]	@ (800ccf4 <osThreadNew+0x148>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	2b02      	cmp	r3, #2
 800cbe8:	d07f      	beq.n	800ccea <osThreadNew+0x13e>
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d07c      	beq.n	800ccea <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800cbf0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cbf4:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800cbf6:	2318      	movs	r3, #24
 800cbf8:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 800cbfe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cc02:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d045      	beq.n	800cc96 <osThreadNew+0xea>
      if (attr->name != NULL) {
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d002      	beq.n	800cc18 <osThreadNew+0x6c>
        name = attr->name;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	699b      	ldr	r3, [r3, #24]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d002      	beq.n	800cc26 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	699b      	ldr	r3, [r3, #24]
 800cc24:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cc26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d008      	beq.n	800cc3e <osThreadNew+0x92>
 800cc2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc2e:	2b38      	cmp	r3, #56	@ 0x38
 800cc30:	d805      	bhi.n	800cc3e <osThreadNew+0x92>
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	685b      	ldr	r3, [r3, #4]
 800cc36:	f003 0301 	and.w	r3, r3, #1
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d001      	beq.n	800cc42 <osThreadNew+0x96>
        return (NULL);
 800cc3e:	2300      	movs	r3, #0
 800cc40:	e054      	b.n	800ccec <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	695b      	ldr	r3, [r3, #20]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d003      	beq.n	800cc52 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	695b      	ldr	r3, [r3, #20]
 800cc4e:	089b      	lsrs	r3, r3, #2
 800cc50:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	689b      	ldr	r3, [r3, #8]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d00e      	beq.n	800cc78 <osThreadNew+0xcc>
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	68db      	ldr	r3, [r3, #12]
 800cc5e:	2ba7      	cmp	r3, #167	@ 0xa7
 800cc60:	d90a      	bls.n	800cc78 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d006      	beq.n	800cc78 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	695b      	ldr	r3, [r3, #20]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d002      	beq.n	800cc78 <osThreadNew+0xcc>
        mem = 1;
 800cc72:	2301      	movs	r3, #1
 800cc74:	623b      	str	r3, [r7, #32]
 800cc76:	e010      	b.n	800cc9a <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	689b      	ldr	r3, [r3, #8]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d10c      	bne.n	800cc9a <osThreadNew+0xee>
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	68db      	ldr	r3, [r3, #12]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d108      	bne.n	800cc9a <osThreadNew+0xee>
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	691b      	ldr	r3, [r3, #16]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d104      	bne.n	800cc9a <osThreadNew+0xee>
          mem = 0;
 800cc90:	2300      	movs	r3, #0
 800cc92:	623b      	str	r3, [r7, #32]
 800cc94:	e001      	b.n	800cc9a <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800cc96:	2300      	movs	r3, #0
 800cc98:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800cc9a:	6a3b      	ldr	r3, [r7, #32]
 800cc9c:	2b01      	cmp	r3, #1
 800cc9e:	d110      	bne.n	800ccc2 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800cca4:	687a      	ldr	r2, [r7, #4]
 800cca6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cca8:	9202      	str	r2, [sp, #8]
 800ccaa:	9301      	str	r3, [sp, #4]
 800ccac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccae:	9300      	str	r3, [sp, #0]
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ccb4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ccb6:	68f8      	ldr	r0, [r7, #12]
 800ccb8:	f002 fa76 	bl	800f1a8 <xTaskCreateStatic>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	613b      	str	r3, [r7, #16]
 800ccc0:	e013      	b.n	800ccea <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800ccc2:	6a3b      	ldr	r3, [r7, #32]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d110      	bne.n	800ccea <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ccc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccca:	b29a      	uxth	r2, r3
 800cccc:	f107 0310 	add.w	r3, r7, #16
 800ccd0:	9301      	str	r3, [sp, #4]
 800ccd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccd4:	9300      	str	r3, [sp, #0]
 800ccd6:	68bb      	ldr	r3, [r7, #8]
 800ccd8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ccda:	68f8      	ldr	r0, [r7, #12]
 800ccdc:	f002 faca 	bl	800f274 <xTaskCreate>
 800cce0:	4603      	mov	r3, r0
 800cce2:	2b01      	cmp	r3, #1
 800cce4:	d001      	beq.n	800ccea <osThreadNew+0x13e>
          hTask = NULL;
 800cce6:	2300      	movs	r3, #0
 800cce8:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ccea:	693b      	ldr	r3, [r7, #16]
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	3730      	adds	r7, #48	@ 0x30
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}
 800ccf4:	20005880 	.word	0x20005880

0800ccf8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b086      	sub	sp, #24
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd00:	f3ef 8305 	mrs	r3, IPSR
 800cd04:	613b      	str	r3, [r7, #16]
  return(result);
 800cd06:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d10f      	bne.n	800cd2c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd0c:	f3ef 8310 	mrs	r3, PRIMASK
 800cd10:	60fb      	str	r3, [r7, #12]
  return(result);
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d105      	bne.n	800cd24 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cd18:	f3ef 8311 	mrs	r3, BASEPRI
 800cd1c:	60bb      	str	r3, [r7, #8]
  return(result);
 800cd1e:	68bb      	ldr	r3, [r7, #8]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d007      	beq.n	800cd34 <osDelay+0x3c>
 800cd24:	4b0a      	ldr	r3, [pc, #40]	@ (800cd50 <osDelay+0x58>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	2b02      	cmp	r3, #2
 800cd2a:	d103      	bne.n	800cd34 <osDelay+0x3c>
    stat = osErrorISR;
 800cd2c:	f06f 0305 	mvn.w	r3, #5
 800cd30:	617b      	str	r3, [r7, #20]
 800cd32:	e007      	b.n	800cd44 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800cd34:	2300      	movs	r3, #0
 800cd36:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d002      	beq.n	800cd44 <osDelay+0x4c>
      vTaskDelay(ticks);
 800cd3e:	6878      	ldr	r0, [r7, #4]
 800cd40:	f002 fbf8 	bl	800f534 <vTaskDelay>
    }
  }

  return (stat);
 800cd44:	697b      	ldr	r3, [r7, #20]
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	3718      	adds	r7, #24
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}
 800cd4e:	bf00      	nop
 800cd50:	20005880 	.word	0x20005880

0800cd54 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b088      	sub	sp, #32
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd60:	f3ef 8305 	mrs	r3, IPSR
 800cd64:	617b      	str	r3, [r7, #20]
  return(result);
 800cd66:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d13d      	bne.n	800cde8 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd6c:	f3ef 8310 	mrs	r3, PRIMASK
 800cd70:	613b      	str	r3, [r7, #16]
  return(result);
 800cd72:	693b      	ldr	r3, [r7, #16]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d105      	bne.n	800cd84 <osEventFlagsNew+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cd78:	f3ef 8311 	mrs	r3, BASEPRI
 800cd7c:	60fb      	str	r3, [r7, #12]
  return(result);
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d003      	beq.n	800cd8c <osEventFlagsNew+0x38>
 800cd84:	4b1b      	ldr	r3, [pc, #108]	@ (800cdf4 <osEventFlagsNew+0xa0>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	2b02      	cmp	r3, #2
 800cd8a:	d02d      	beq.n	800cde8 <osEventFlagsNew+0x94>
    mem = -1;
 800cd8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cd90:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d015      	beq.n	800cdc4 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	689b      	ldr	r3, [r3, #8]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d006      	beq.n	800cdae <osEventFlagsNew+0x5a>
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	68db      	ldr	r3, [r3, #12]
 800cda4:	2b1f      	cmp	r3, #31
 800cda6:	d902      	bls.n	800cdae <osEventFlagsNew+0x5a>
        mem = 1;
 800cda8:	2301      	movs	r3, #1
 800cdaa:	61bb      	str	r3, [r7, #24]
 800cdac:	e00c      	b.n	800cdc8 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	689b      	ldr	r3, [r3, #8]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d108      	bne.n	800cdc8 <osEventFlagsNew+0x74>
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	68db      	ldr	r3, [r3, #12]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d104      	bne.n	800cdc8 <osEventFlagsNew+0x74>
          mem = 0;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	61bb      	str	r3, [r7, #24]
 800cdc2:	e001      	b.n	800cdc8 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cdc8:	69bb      	ldr	r3, [r7, #24]
 800cdca:	2b01      	cmp	r3, #1
 800cdcc:	d106      	bne.n	800cddc <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	689b      	ldr	r3, [r3, #8]
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	f000 fdbc 	bl	800d950 <xEventGroupCreateStatic>
 800cdd8:	61f8      	str	r0, [r7, #28]
 800cdda:	e005      	b.n	800cde8 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 800cddc:	69bb      	ldr	r3, [r7, #24]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d102      	bne.n	800cde8 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 800cde2:	f000 fdf2 	bl	800d9ca <xEventGroupCreate>
 800cde6:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800cde8:	69fb      	ldr	r3, [r7, #28]
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	3720      	adds	r7, #32
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}
 800cdf2:	bf00      	nop
 800cdf4:	20005880 	.word	0x20005880

0800cdf8 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b088      	sub	sp, #32
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
 800ce00:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800ce06:	69bb      	ldr	r3, [r7, #24]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d003      	beq.n	800ce14 <osEventFlagsSet+0x1c>
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ce12:	d303      	bcc.n	800ce1c <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 800ce14:	f06f 0303 	mvn.w	r3, #3
 800ce18:	61fb      	str	r3, [r7, #28]
 800ce1a:	e03a      	b.n	800ce92 <osEventFlagsSet+0x9a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce1c:	f3ef 8305 	mrs	r3, IPSR
 800ce20:	617b      	str	r3, [r7, #20]
  return(result);
 800ce22:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d10f      	bne.n	800ce48 <osEventFlagsSet+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce28:	f3ef 8310 	mrs	r3, PRIMASK
 800ce2c:	613b      	str	r3, [r7, #16]
  return(result);
 800ce2e:	693b      	ldr	r3, [r7, #16]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d105      	bne.n	800ce40 <osEventFlagsSet+0x48>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ce34:	f3ef 8311 	mrs	r3, BASEPRI
 800ce38:	60fb      	str	r3, [r7, #12]
  return(result);
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d021      	beq.n	800ce84 <osEventFlagsSet+0x8c>
 800ce40:	4b16      	ldr	r3, [pc, #88]	@ (800ce9c <osEventFlagsSet+0xa4>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	2b02      	cmp	r3, #2
 800ce46:	d11d      	bne.n	800ce84 <osEventFlagsSet+0x8c>
    yield = pdFALSE;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800ce4c:	f107 0308 	add.w	r3, r7, #8
 800ce50:	461a      	mov	r2, r3
 800ce52:	6839      	ldr	r1, [r7, #0]
 800ce54:	69b8      	ldr	r0, [r7, #24]
 800ce56:	f000 ff6d 	bl	800dd34 <xEventGroupSetBitsFromISR>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d103      	bne.n	800ce68 <osEventFlagsSet+0x70>
      rflags = (uint32_t)osErrorResource;
 800ce60:	f06f 0302 	mvn.w	r3, #2
 800ce64:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800ce66:	e013      	b.n	800ce90 <osEventFlagsSet+0x98>
    } else {
      rflags = flags;
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 800ce6c:	68bb      	ldr	r3, [r7, #8]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d00e      	beq.n	800ce90 <osEventFlagsSet+0x98>
 800ce72:	4b0b      	ldr	r3, [pc, #44]	@ (800cea0 <osEventFlagsSet+0xa8>)
 800ce74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce78:	601a      	str	r2, [r3, #0]
 800ce7a:	f3bf 8f4f 	dsb	sy
 800ce7e:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800ce82:	e005      	b.n	800ce90 <osEventFlagsSet+0x98>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800ce84:	6839      	ldr	r1, [r7, #0]
 800ce86:	69b8      	ldr	r0, [r7, #24]
 800ce88:	f000 fe94 	bl	800dbb4 <xEventGroupSetBits>
 800ce8c:	61f8      	str	r0, [r7, #28]
 800ce8e:	e000      	b.n	800ce92 <osEventFlagsSet+0x9a>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800ce90:	bf00      	nop
  }

  return (rflags);
 800ce92:	69fb      	ldr	r3, [r7, #28]
}
 800ce94:	4618      	mov	r0, r3
 800ce96:	3720      	adds	r7, #32
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd80      	pop	{r7, pc}
 800ce9c:	20005880 	.word	0x20005880
 800cea0:	e000ed04 	.word	0xe000ed04

0800cea4 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b08e      	sub	sp, #56	@ 0x38
 800cea8:	af02      	add	r7, sp, #8
 800ceaa:	60f8      	str	r0, [r7, #12]
 800ceac:	60b9      	str	r1, [r7, #8]
 800ceae:	607a      	str	r2, [r7, #4]
 800ceb0:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800ceb6:	6a3b      	ldr	r3, [r7, #32]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d003      	beq.n	800cec4 <osEventFlagsWait+0x20>
 800cebc:	68bb      	ldr	r3, [r7, #8]
 800cebe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cec2:	d303      	bcc.n	800cecc <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 800cec4:	f06f 0303 	mvn.w	r3, #3
 800cec8:	627b      	str	r3, [r7, #36]	@ 0x24
 800ceca:	e059      	b.n	800cf80 <osEventFlagsWait+0xdc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cecc:	f3ef 8305 	mrs	r3, IPSR
 800ced0:	61fb      	str	r3, [r7, #28]
  return(result);
 800ced2:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d10f      	bne.n	800cef8 <osEventFlagsWait+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ced8:	f3ef 8310 	mrs	r3, PRIMASK
 800cedc:	61bb      	str	r3, [r7, #24]
  return(result);
 800cede:	69bb      	ldr	r3, [r7, #24]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d105      	bne.n	800cef0 <osEventFlagsWait+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cee4:	f3ef 8311 	mrs	r3, BASEPRI
 800cee8:	617b      	str	r3, [r7, #20]
  return(result);
 800ceea:	697b      	ldr	r3, [r7, #20]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d007      	beq.n	800cf00 <osEventFlagsWait+0x5c>
 800cef0:	4b26      	ldr	r3, [pc, #152]	@ (800cf8c <osEventFlagsWait+0xe8>)
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	2b02      	cmp	r3, #2
 800cef6:	d103      	bne.n	800cf00 <osEventFlagsWait+0x5c>
    rflags = (uint32_t)osErrorISR;
 800cef8:	f06f 0305 	mvn.w	r3, #5
 800cefc:	627b      	str	r3, [r7, #36]	@ 0x24
 800cefe:	e03f      	b.n	800cf80 <osEventFlagsWait+0xdc>
  }
  else {
    if (options & osFlagsWaitAll) {
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f003 0301 	and.w	r3, r3, #1
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d002      	beq.n	800cf10 <osEventFlagsWait+0x6c>
      wait_all = pdTRUE;
 800cf0a:	2301      	movs	r3, #1
 800cf0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cf0e:	e001      	b.n	800cf14 <osEventFlagsWait+0x70>
    } else {
      wait_all = pdFAIL;
 800cf10:	2300      	movs	r3, #0
 800cf12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    if (options & osFlagsNoClear) {
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f003 0302 	and.w	r3, r3, #2
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d002      	beq.n	800cf24 <osEventFlagsWait+0x80>
      exit_clr = pdFAIL;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cf22:	e001      	b.n	800cf28 <osEventFlagsWait+0x84>
    } else {
      exit_clr = pdTRUE;
 800cf24:	2301      	movs	r3, #1
 800cf26:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	9300      	str	r3, [sp, #0]
 800cf2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cf30:	68b9      	ldr	r1, [r7, #8]
 800cf32:	6a38      	ldr	r0, [r7, #32]
 800cf34:	f000 fd64 	bl	800da00 <xEventGroupWaitBits>
 800cf38:	6278      	str	r0, [r7, #36]	@ 0x24

    if (options & osFlagsWaitAll) {
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f003 0301 	and.w	r3, r3, #1
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d00e      	beq.n	800cf62 <osEventFlagsWait+0xbe>
      if (flags != rflags) {
 800cf44:	68ba      	ldr	r2, [r7, #8]
 800cf46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d019      	beq.n	800cf80 <osEventFlagsWait+0xdc>
        if (timeout > 0U) {
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d003      	beq.n	800cf5a <osEventFlagsWait+0xb6>
          rflags = (uint32_t)osErrorTimeout;
 800cf52:	f06f 0301 	mvn.w	r3, #1
 800cf56:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf58:	e012      	b.n	800cf80 <osEventFlagsWait+0xdc>
        } else {
          rflags = (uint32_t)osErrorResource;
 800cf5a:	f06f 0302 	mvn.w	r3, #2
 800cf5e:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf60:	e00e      	b.n	800cf80 <osEventFlagsWait+0xdc>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800cf62:	68ba      	ldr	r2, [r7, #8]
 800cf64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf66:	4013      	ands	r3, r2
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d109      	bne.n	800cf80 <osEventFlagsWait+0xdc>
        if (timeout > 0U) {
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d003      	beq.n	800cf7a <osEventFlagsWait+0xd6>
          rflags = (uint32_t)osErrorTimeout;
 800cf72:	f06f 0301 	mvn.w	r3, #1
 800cf76:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf78:	e002      	b.n	800cf80 <osEventFlagsWait+0xdc>
        } else {
          rflags = (uint32_t)osErrorResource;
 800cf7a:	f06f 0302 	mvn.w	r3, #2
 800cf7e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }
  }

  return (rflags);
 800cf80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cf82:	4618      	mov	r0, r3
 800cf84:	3730      	adds	r7, #48	@ 0x30
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}
 800cf8a:	bf00      	nop
 800cf8c:	20005880 	.word	0x20005880

0800cf90 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b08a      	sub	sp, #40	@ 0x28
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800cf98:	2300      	movs	r3, #0
 800cf9a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf9c:	f3ef 8305 	mrs	r3, IPSR
 800cfa0:	613b      	str	r3, [r7, #16]
  return(result);
 800cfa2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	f040 8085 	bne.w	800d0b4 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cfaa:	f3ef 8310 	mrs	r3, PRIMASK
 800cfae:	60fb      	str	r3, [r7, #12]
  return(result);
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d105      	bne.n	800cfc2 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cfb6:	f3ef 8311 	mrs	r3, BASEPRI
 800cfba:	60bb      	str	r3, [r7, #8]
  return(result);
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d003      	beq.n	800cfca <osMutexNew+0x3a>
 800cfc2:	4b3f      	ldr	r3, [pc, #252]	@ (800d0c0 <osMutexNew+0x130>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	2b02      	cmp	r3, #2
 800cfc8:	d074      	beq.n	800d0b4 <osMutexNew+0x124>
    if (attr != NULL) {
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d003      	beq.n	800cfd8 <osMutexNew+0x48>
      type = attr->attr_bits;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	685b      	ldr	r3, [r3, #4]
 800cfd4:	623b      	str	r3, [r7, #32]
 800cfd6:	e001      	b.n	800cfdc <osMutexNew+0x4c>
    } else {
      type = 0U;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800cfdc:	6a3b      	ldr	r3, [r7, #32]
 800cfde:	f003 0301 	and.w	r3, r3, #1
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d002      	beq.n	800cfec <osMutexNew+0x5c>
      rmtx = 1U;
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	61fb      	str	r3, [r7, #28]
 800cfea:	e001      	b.n	800cff0 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800cfec:	2300      	movs	r3, #0
 800cfee:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800cff0:	6a3b      	ldr	r3, [r7, #32]
 800cff2:	f003 0308 	and.w	r3, r3, #8
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d15c      	bne.n	800d0b4 <osMutexNew+0x124>
      mem = -1;
 800cffa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cffe:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d015      	beq.n	800d032 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	689b      	ldr	r3, [r3, #8]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d006      	beq.n	800d01c <osMutexNew+0x8c>
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	68db      	ldr	r3, [r3, #12]
 800d012:	2b4f      	cmp	r3, #79	@ 0x4f
 800d014:	d902      	bls.n	800d01c <osMutexNew+0x8c>
          mem = 1;
 800d016:	2301      	movs	r3, #1
 800d018:	61bb      	str	r3, [r7, #24]
 800d01a:	e00c      	b.n	800d036 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	689b      	ldr	r3, [r3, #8]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d108      	bne.n	800d036 <osMutexNew+0xa6>
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	68db      	ldr	r3, [r3, #12]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d104      	bne.n	800d036 <osMutexNew+0xa6>
            mem = 0;
 800d02c:	2300      	movs	r3, #0
 800d02e:	61bb      	str	r3, [r7, #24]
 800d030:	e001      	b.n	800d036 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800d032:	2300      	movs	r3, #0
 800d034:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800d036:	69bb      	ldr	r3, [r7, #24]
 800d038:	2b01      	cmp	r3, #1
 800d03a:	d112      	bne.n	800d062 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800d03c:	69fb      	ldr	r3, [r7, #28]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d007      	beq.n	800d052 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	689b      	ldr	r3, [r3, #8]
 800d046:	4619      	mov	r1, r3
 800d048:	2004      	movs	r0, #4
 800d04a:	f001 f8c6 	bl	800e1da <xQueueCreateMutexStatic>
 800d04e:	6278      	str	r0, [r7, #36]	@ 0x24
 800d050:	e016      	b.n	800d080 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	689b      	ldr	r3, [r3, #8]
 800d056:	4619      	mov	r1, r3
 800d058:	2001      	movs	r0, #1
 800d05a:	f001 f8be 	bl	800e1da <xQueueCreateMutexStatic>
 800d05e:	6278      	str	r0, [r7, #36]	@ 0x24
 800d060:	e00e      	b.n	800d080 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800d062:	69bb      	ldr	r3, [r7, #24]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d10b      	bne.n	800d080 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800d068:	69fb      	ldr	r3, [r7, #28]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d004      	beq.n	800d078 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800d06e:	2004      	movs	r0, #4
 800d070:	f001 f89b 	bl	800e1aa <xQueueCreateMutex>
 800d074:	6278      	str	r0, [r7, #36]	@ 0x24
 800d076:	e003      	b.n	800d080 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800d078:	2001      	movs	r0, #1
 800d07a:	f001 f896 	bl	800e1aa <xQueueCreateMutex>
 800d07e:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800d080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d082:	2b00      	cmp	r3, #0
 800d084:	d00c      	beq.n	800d0a0 <osMutexNew+0x110>
        if (attr != NULL) {
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d003      	beq.n	800d094 <osMutexNew+0x104>
          name = attr->name;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	617b      	str	r3, [r7, #20]
 800d092:	e001      	b.n	800d098 <osMutexNew+0x108>
        } else {
          name = NULL;
 800d094:	2300      	movs	r3, #0
 800d096:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800d098:	6979      	ldr	r1, [r7, #20]
 800d09a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d09c:	f001 fffc 	bl	800f098 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800d0a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d006      	beq.n	800d0b4 <osMutexNew+0x124>
 800d0a6:	69fb      	ldr	r3, [r7, #28]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d003      	beq.n	800d0b4 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800d0ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0ae:	f043 0301 	orr.w	r3, r3, #1
 800d0b2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800d0b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	3728      	adds	r7, #40	@ 0x28
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}
 800d0be:	bf00      	nop
 800d0c0:	20005880 	.word	0x20005880

0800d0c4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b088      	sub	sp, #32
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
 800d0cc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f023 0301 	bic.w	r3, r3, #1
 800d0d4:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f003 0301 	and.w	r3, r3, #1
 800d0dc:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800d0de:	2300      	movs	r3, #0
 800d0e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0e2:	f3ef 8305 	mrs	r3, IPSR
 800d0e6:	613b      	str	r3, [r7, #16]
  return(result);
 800d0e8:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d10f      	bne.n	800d10e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0ee:	f3ef 8310 	mrs	r3, PRIMASK
 800d0f2:	60fb      	str	r3, [r7, #12]
  return(result);
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d105      	bne.n	800d106 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d0fa:	f3ef 8311 	mrs	r3, BASEPRI
 800d0fe:	60bb      	str	r3, [r7, #8]
  return(result);
 800d100:	68bb      	ldr	r3, [r7, #8]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d007      	beq.n	800d116 <osMutexAcquire+0x52>
 800d106:	4b1d      	ldr	r3, [pc, #116]	@ (800d17c <osMutexAcquire+0xb8>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	2b02      	cmp	r3, #2
 800d10c:	d103      	bne.n	800d116 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800d10e:	f06f 0305 	mvn.w	r3, #5
 800d112:	61fb      	str	r3, [r7, #28]
 800d114:	e02c      	b.n	800d170 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800d116:	69bb      	ldr	r3, [r7, #24]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d103      	bne.n	800d124 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800d11c:	f06f 0303 	mvn.w	r3, #3
 800d120:	61fb      	str	r3, [r7, #28]
 800d122:	e025      	b.n	800d170 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d011      	beq.n	800d14e <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800d12a:	6839      	ldr	r1, [r7, #0]
 800d12c:	69b8      	ldr	r0, [r7, #24]
 800d12e:	f001 f8a6 	bl	800e27e <xQueueTakeMutexRecursive>
 800d132:	4603      	mov	r3, r0
 800d134:	2b01      	cmp	r3, #1
 800d136:	d01b      	beq.n	800d170 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d003      	beq.n	800d146 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800d13e:	f06f 0301 	mvn.w	r3, #1
 800d142:	61fb      	str	r3, [r7, #28]
 800d144:	e014      	b.n	800d170 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800d146:	f06f 0302 	mvn.w	r3, #2
 800d14a:	61fb      	str	r3, [r7, #28]
 800d14c:	e010      	b.n	800d170 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800d14e:	6839      	ldr	r1, [r7, #0]
 800d150:	69b8      	ldr	r0, [r7, #24]
 800d152:	f001 fc71 	bl	800ea38 <xQueueSemaphoreTake>
 800d156:	4603      	mov	r3, r0
 800d158:	2b01      	cmp	r3, #1
 800d15a:	d009      	beq.n	800d170 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d003      	beq.n	800d16a <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800d162:	f06f 0301 	mvn.w	r3, #1
 800d166:	61fb      	str	r3, [r7, #28]
 800d168:	e002      	b.n	800d170 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800d16a:	f06f 0302 	mvn.w	r3, #2
 800d16e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d170:	69fb      	ldr	r3, [r7, #28]
}
 800d172:	4618      	mov	r0, r3
 800d174:	3720      	adds	r7, #32
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}
 800d17a:	bf00      	nop
 800d17c:	20005880 	.word	0x20005880

0800d180 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800d180:	b580      	push	{r7, lr}
 800d182:	b088      	sub	sp, #32
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f023 0301 	bic.w	r3, r3, #1
 800d18e:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f003 0301 	and.w	r3, r3, #1
 800d196:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800d198:	2300      	movs	r3, #0
 800d19a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d19c:	f3ef 8305 	mrs	r3, IPSR
 800d1a0:	613b      	str	r3, [r7, #16]
  return(result);
 800d1a2:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d10f      	bne.n	800d1c8 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d1a8:	f3ef 8310 	mrs	r3, PRIMASK
 800d1ac:	60fb      	str	r3, [r7, #12]
  return(result);
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d105      	bne.n	800d1c0 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d1b4:	f3ef 8311 	mrs	r3, BASEPRI
 800d1b8:	60bb      	str	r3, [r7, #8]
  return(result);
 800d1ba:	68bb      	ldr	r3, [r7, #8]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d007      	beq.n	800d1d0 <osMutexRelease+0x50>
 800d1c0:	4b16      	ldr	r3, [pc, #88]	@ (800d21c <osMutexRelease+0x9c>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	2b02      	cmp	r3, #2
 800d1c6:	d103      	bne.n	800d1d0 <osMutexRelease+0x50>
    stat = osErrorISR;
 800d1c8:	f06f 0305 	mvn.w	r3, #5
 800d1cc:	61fb      	str	r3, [r7, #28]
 800d1ce:	e01f      	b.n	800d210 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800d1d0:	69bb      	ldr	r3, [r7, #24]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d103      	bne.n	800d1de <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800d1d6:	f06f 0303 	mvn.w	r3, #3
 800d1da:	61fb      	str	r3, [r7, #28]
 800d1dc:	e018      	b.n	800d210 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800d1de:	697b      	ldr	r3, [r7, #20]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d009      	beq.n	800d1f8 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800d1e4:	69b8      	ldr	r0, [r7, #24]
 800d1e6:	f001 f813 	bl	800e210 <xQueueGiveMutexRecursive>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	2b01      	cmp	r3, #1
 800d1ee:	d00f      	beq.n	800d210 <osMutexRelease+0x90>
        stat = osErrorResource;
 800d1f0:	f06f 0302 	mvn.w	r3, #2
 800d1f4:	61fb      	str	r3, [r7, #28]
 800d1f6:	e00b      	b.n	800d210 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	2100      	movs	r1, #0
 800d1fe:	69b8      	ldr	r0, [r7, #24]
 800d200:	f001 f8ec 	bl	800e3dc <xQueueGenericSend>
 800d204:	4603      	mov	r3, r0
 800d206:	2b01      	cmp	r3, #1
 800d208:	d002      	beq.n	800d210 <osMutexRelease+0x90>
        stat = osErrorResource;
 800d20a:	f06f 0302 	mvn.w	r3, #2
 800d20e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800d210:	69fb      	ldr	r3, [r7, #28]
}
 800d212:	4618      	mov	r0, r3
 800d214:	3720      	adds	r7, #32
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}
 800d21a:	bf00      	nop
 800d21c:	20005880 	.word	0x20005880

0800d220 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800d220:	b580      	push	{r7, lr}
 800d222:	b08c      	sub	sp, #48	@ 0x30
 800d224:	af02      	add	r7, sp, #8
 800d226:	60f8      	str	r0, [r7, #12]
 800d228:	60b9      	str	r1, [r7, #8]
 800d22a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800d22c:	2300      	movs	r3, #0
 800d22e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d230:	f3ef 8305 	mrs	r3, IPSR
 800d234:	61bb      	str	r3, [r7, #24]
  return(result);
 800d236:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800d238:	2b00      	cmp	r3, #0
 800d23a:	f040 8086 	bne.w	800d34a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d23e:	f3ef 8310 	mrs	r3, PRIMASK
 800d242:	617b      	str	r3, [r7, #20]
  return(result);
 800d244:	697b      	ldr	r3, [r7, #20]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d105      	bne.n	800d256 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d24a:	f3ef 8311 	mrs	r3, BASEPRI
 800d24e:	613b      	str	r3, [r7, #16]
  return(result);
 800d250:	693b      	ldr	r3, [r7, #16]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d003      	beq.n	800d25e <osSemaphoreNew+0x3e>
 800d256:	4b3f      	ldr	r3, [pc, #252]	@ (800d354 <osSemaphoreNew+0x134>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	2b02      	cmp	r3, #2
 800d25c:	d075      	beq.n	800d34a <osSemaphoreNew+0x12a>
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d072      	beq.n	800d34a <osSemaphoreNew+0x12a>
 800d264:	68ba      	ldr	r2, [r7, #8]
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	429a      	cmp	r2, r3
 800d26a:	d86e      	bhi.n	800d34a <osSemaphoreNew+0x12a>
    mem = -1;
 800d26c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d270:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d015      	beq.n	800d2a4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	689b      	ldr	r3, [r3, #8]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d006      	beq.n	800d28e <osSemaphoreNew+0x6e>
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	68db      	ldr	r3, [r3, #12]
 800d284:	2b4f      	cmp	r3, #79	@ 0x4f
 800d286:	d902      	bls.n	800d28e <osSemaphoreNew+0x6e>
        mem = 1;
 800d288:	2301      	movs	r3, #1
 800d28a:	623b      	str	r3, [r7, #32]
 800d28c:	e00c      	b.n	800d2a8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	689b      	ldr	r3, [r3, #8]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d108      	bne.n	800d2a8 <osSemaphoreNew+0x88>
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	68db      	ldr	r3, [r3, #12]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d104      	bne.n	800d2a8 <osSemaphoreNew+0x88>
          mem = 0;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	623b      	str	r3, [r7, #32]
 800d2a2:	e001      	b.n	800d2a8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800d2a8:	6a3b      	ldr	r3, [r7, #32]
 800d2aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d2ae:	d04c      	beq.n	800d34a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	2b01      	cmp	r3, #1
 800d2b4:	d128      	bne.n	800d308 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800d2b6:	6a3b      	ldr	r3, [r7, #32]
 800d2b8:	2b01      	cmp	r3, #1
 800d2ba:	d10a      	bne.n	800d2d2 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	689b      	ldr	r3, [r3, #8]
 800d2c0:	2203      	movs	r2, #3
 800d2c2:	9200      	str	r2, [sp, #0]
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	2100      	movs	r1, #0
 800d2c8:	2001      	movs	r0, #1
 800d2ca:	f000 fe67 	bl	800df9c <xQueueGenericCreateStatic>
 800d2ce:	6278      	str	r0, [r7, #36]	@ 0x24
 800d2d0:	e005      	b.n	800d2de <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800d2d2:	2203      	movs	r2, #3
 800d2d4:	2100      	movs	r1, #0
 800d2d6:	2001      	movs	r0, #1
 800d2d8:	f000 fee7 	bl	800e0aa <xQueueGenericCreate>
 800d2dc:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800d2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d022      	beq.n	800d32a <osSemaphoreNew+0x10a>
 800d2e4:	68bb      	ldr	r3, [r7, #8]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d01f      	beq.n	800d32a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	2100      	movs	r1, #0
 800d2f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d2f2:	f001 f873 	bl	800e3dc <xQueueGenericSend>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	2b01      	cmp	r3, #1
 800d2fa:	d016      	beq.n	800d32a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800d2fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d2fe:	f001 fd7d 	bl	800edfc <vQueueDelete>
            hSemaphore = NULL;
 800d302:	2300      	movs	r3, #0
 800d304:	627b      	str	r3, [r7, #36]	@ 0x24
 800d306:	e010      	b.n	800d32a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800d308:	6a3b      	ldr	r3, [r7, #32]
 800d30a:	2b01      	cmp	r3, #1
 800d30c:	d108      	bne.n	800d320 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	689b      	ldr	r3, [r3, #8]
 800d312:	461a      	mov	r2, r3
 800d314:	68b9      	ldr	r1, [r7, #8]
 800d316:	68f8      	ldr	r0, [r7, #12]
 800d318:	f000 ffea 	bl	800e2f0 <xQueueCreateCountingSemaphoreStatic>
 800d31c:	6278      	str	r0, [r7, #36]	@ 0x24
 800d31e:	e004      	b.n	800d32a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800d320:	68b9      	ldr	r1, [r7, #8]
 800d322:	68f8      	ldr	r0, [r7, #12]
 800d324:	f001 f821 	bl	800e36a <xQueueCreateCountingSemaphore>
 800d328:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800d32a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d00c      	beq.n	800d34a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d003      	beq.n	800d33e <osSemaphoreNew+0x11e>
          name = attr->name;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	61fb      	str	r3, [r7, #28]
 800d33c:	e001      	b.n	800d342 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800d33e:	2300      	movs	r3, #0
 800d340:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800d342:	69f9      	ldr	r1, [r7, #28]
 800d344:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d346:	f001 fea7 	bl	800f098 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800d34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	3728      	adds	r7, #40	@ 0x28
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}
 800d354:	20005880 	.word	0x20005880

0800d358 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800d358:	b580      	push	{r7, lr}
 800d35a:	b088      	sub	sp, #32
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
 800d360:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d366:	2300      	movs	r3, #0
 800d368:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800d36a:	69bb      	ldr	r3, [r7, #24]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d103      	bne.n	800d378 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800d370:	f06f 0303 	mvn.w	r3, #3
 800d374:	61fb      	str	r3, [r7, #28]
 800d376:	e04b      	b.n	800d410 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d378:	f3ef 8305 	mrs	r3, IPSR
 800d37c:	617b      	str	r3, [r7, #20]
  return(result);
 800d37e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800d380:	2b00      	cmp	r3, #0
 800d382:	d10f      	bne.n	800d3a4 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d384:	f3ef 8310 	mrs	r3, PRIMASK
 800d388:	613b      	str	r3, [r7, #16]
  return(result);
 800d38a:	693b      	ldr	r3, [r7, #16]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d105      	bne.n	800d39c <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d390:	f3ef 8311 	mrs	r3, BASEPRI
 800d394:	60fb      	str	r3, [r7, #12]
  return(result);
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d026      	beq.n	800d3ea <osSemaphoreAcquire+0x92>
 800d39c:	4b1f      	ldr	r3, [pc, #124]	@ (800d41c <osSemaphoreAcquire+0xc4>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	2b02      	cmp	r3, #2
 800d3a2:	d122      	bne.n	800d3ea <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d003      	beq.n	800d3b2 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800d3aa:	f06f 0303 	mvn.w	r3, #3
 800d3ae:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800d3b0:	e02d      	b.n	800d40e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800d3b6:	f107 0308 	add.w	r3, r7, #8
 800d3ba:	461a      	mov	r2, r3
 800d3bc:	2100      	movs	r1, #0
 800d3be:	69b8      	ldr	r0, [r7, #24]
 800d3c0:	f001 fc52 	bl	800ec68 <xQueueReceiveFromISR>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	2b01      	cmp	r3, #1
 800d3c8:	d003      	beq.n	800d3d2 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800d3ca:	f06f 0302 	mvn.w	r3, #2
 800d3ce:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800d3d0:	e01d      	b.n	800d40e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d01a      	beq.n	800d40e <osSemaphoreAcquire+0xb6>
 800d3d8:	4b11      	ldr	r3, [pc, #68]	@ (800d420 <osSemaphoreAcquire+0xc8>)
 800d3da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d3de:	601a      	str	r2, [r3, #0]
 800d3e0:	f3bf 8f4f 	dsb	sy
 800d3e4:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800d3e8:	e011      	b.n	800d40e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800d3ea:	6839      	ldr	r1, [r7, #0]
 800d3ec:	69b8      	ldr	r0, [r7, #24]
 800d3ee:	f001 fb23 	bl	800ea38 <xQueueSemaphoreTake>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	2b01      	cmp	r3, #1
 800d3f6:	d00b      	beq.n	800d410 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d003      	beq.n	800d406 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800d3fe:	f06f 0301 	mvn.w	r3, #1
 800d402:	61fb      	str	r3, [r7, #28]
 800d404:	e004      	b.n	800d410 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800d406:	f06f 0302 	mvn.w	r3, #2
 800d40a:	61fb      	str	r3, [r7, #28]
 800d40c:	e000      	b.n	800d410 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800d40e:	bf00      	nop
      }
    }
  }

  return (stat);
 800d410:	69fb      	ldr	r3, [r7, #28]
}
 800d412:	4618      	mov	r0, r3
 800d414:	3720      	adds	r7, #32
 800d416:	46bd      	mov	sp, r7
 800d418:	bd80      	pop	{r7, pc}
 800d41a:	bf00      	nop
 800d41c:	20005880 	.word	0x20005880
 800d420:	e000ed04 	.word	0xe000ed04

0800d424 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800d424:	b580      	push	{r7, lr}
 800d426:	b088      	sub	sp, #32
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d430:	2300      	movs	r3, #0
 800d432:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800d434:	69bb      	ldr	r3, [r7, #24]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d103      	bne.n	800d442 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800d43a:	f06f 0303 	mvn.w	r3, #3
 800d43e:	61fb      	str	r3, [r7, #28]
 800d440:	e03e      	b.n	800d4c0 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d442:	f3ef 8305 	mrs	r3, IPSR
 800d446:	617b      	str	r3, [r7, #20]
  return(result);
 800d448:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d10f      	bne.n	800d46e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d44e:	f3ef 8310 	mrs	r3, PRIMASK
 800d452:	613b      	str	r3, [r7, #16]
  return(result);
 800d454:	693b      	ldr	r3, [r7, #16]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d105      	bne.n	800d466 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d45a:	f3ef 8311 	mrs	r3, BASEPRI
 800d45e:	60fb      	str	r3, [r7, #12]
  return(result);
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d01e      	beq.n	800d4a4 <osSemaphoreRelease+0x80>
 800d466:	4b19      	ldr	r3, [pc, #100]	@ (800d4cc <osSemaphoreRelease+0xa8>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	2b02      	cmp	r3, #2
 800d46c:	d11a      	bne.n	800d4a4 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800d46e:	2300      	movs	r3, #0
 800d470:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d472:	f107 0308 	add.w	r3, r7, #8
 800d476:	4619      	mov	r1, r3
 800d478:	69b8      	ldr	r0, [r7, #24]
 800d47a:	f001 f95c 	bl	800e736 <xQueueGiveFromISR>
 800d47e:	4603      	mov	r3, r0
 800d480:	2b01      	cmp	r3, #1
 800d482:	d003      	beq.n	800d48c <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800d484:	f06f 0302 	mvn.w	r3, #2
 800d488:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d48a:	e018      	b.n	800d4be <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800d48c:	68bb      	ldr	r3, [r7, #8]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d015      	beq.n	800d4be <osSemaphoreRelease+0x9a>
 800d492:	4b0f      	ldr	r3, [pc, #60]	@ (800d4d0 <osSemaphoreRelease+0xac>)
 800d494:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d498:	601a      	str	r2, [r3, #0]
 800d49a:	f3bf 8f4f 	dsb	sy
 800d49e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d4a2:	e00c      	b.n	800d4be <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	2100      	movs	r1, #0
 800d4aa:	69b8      	ldr	r0, [r7, #24]
 800d4ac:	f000 ff96 	bl	800e3dc <xQueueGenericSend>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	2b01      	cmp	r3, #1
 800d4b4:	d004      	beq.n	800d4c0 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800d4b6:	f06f 0302 	mvn.w	r3, #2
 800d4ba:	61fb      	str	r3, [r7, #28]
 800d4bc:	e000      	b.n	800d4c0 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d4be:	bf00      	nop
    }
  }

  return (stat);
 800d4c0:	69fb      	ldr	r3, [r7, #28]
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	3720      	adds	r7, #32
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}
 800d4ca:	bf00      	nop
 800d4cc:	20005880 	.word	0x20005880
 800d4d0:	e000ed04 	.word	0xe000ed04

0800d4d4 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b088      	sub	sp, #32
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d4e0:	f3ef 8305 	mrs	r3, IPSR
 800d4e4:	617b      	str	r3, [r7, #20]
  return(result);
 800d4e6:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d10f      	bne.n	800d50c <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d4ec:	f3ef 8310 	mrs	r3, PRIMASK
 800d4f0:	613b      	str	r3, [r7, #16]
  return(result);
 800d4f2:	693b      	ldr	r3, [r7, #16]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d105      	bne.n	800d504 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d4f8:	f3ef 8311 	mrs	r3, BASEPRI
 800d4fc:	60fb      	str	r3, [r7, #12]
  return(result);
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d007      	beq.n	800d514 <osSemaphoreDelete+0x40>
 800d504:	4b0d      	ldr	r3, [pc, #52]	@ (800d53c <osSemaphoreDelete+0x68>)
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	2b02      	cmp	r3, #2
 800d50a:	d103      	bne.n	800d514 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 800d50c:	f06f 0305 	mvn.w	r3, #5
 800d510:	61fb      	str	r3, [r7, #28]
 800d512:	e00e      	b.n	800d532 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 800d514:	69bb      	ldr	r3, [r7, #24]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d103      	bne.n	800d522 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 800d51a:	f06f 0303 	mvn.w	r3, #3
 800d51e:	61fb      	str	r3, [r7, #28]
 800d520:	e007      	b.n	800d532 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800d522:	69b8      	ldr	r0, [r7, #24]
 800d524:	f001 fde2 	bl	800f0ec <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800d528:	2300      	movs	r3, #0
 800d52a:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 800d52c:	69b8      	ldr	r0, [r7, #24]
 800d52e:	f001 fc65 	bl	800edfc <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800d532:	69fb      	ldr	r3, [r7, #28]
}
 800d534:	4618      	mov	r0, r3
 800d536:	3720      	adds	r7, #32
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}
 800d53c:	20005880 	.word	0x20005880

0800d540 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d540:	b580      	push	{r7, lr}
 800d542:	b08c      	sub	sp, #48	@ 0x30
 800d544:	af02      	add	r7, sp, #8
 800d546:	60f8      	str	r0, [r7, #12]
 800d548:	60b9      	str	r1, [r7, #8]
 800d54a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800d54c:	2300      	movs	r3, #0
 800d54e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d550:	f3ef 8305 	mrs	r3, IPSR
 800d554:	61bb      	str	r3, [r7, #24]
  return(result);
 800d556:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d16f      	bne.n	800d63c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d55c:	f3ef 8310 	mrs	r3, PRIMASK
 800d560:	617b      	str	r3, [r7, #20]
  return(result);
 800d562:	697b      	ldr	r3, [r7, #20]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d105      	bne.n	800d574 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d568:	f3ef 8311 	mrs	r3, BASEPRI
 800d56c:	613b      	str	r3, [r7, #16]
  return(result);
 800d56e:	693b      	ldr	r3, [r7, #16]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d003      	beq.n	800d57c <osMessageQueueNew+0x3c>
 800d574:	4b34      	ldr	r3, [pc, #208]	@ (800d648 <osMessageQueueNew+0x108>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	2b02      	cmp	r3, #2
 800d57a:	d05f      	beq.n	800d63c <osMessageQueueNew+0xfc>
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d05c      	beq.n	800d63c <osMessageQueueNew+0xfc>
 800d582:	68bb      	ldr	r3, [r7, #8]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d059      	beq.n	800d63c <osMessageQueueNew+0xfc>
    mem = -1;
 800d588:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d58c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d029      	beq.n	800d5e8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	689b      	ldr	r3, [r3, #8]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d012      	beq.n	800d5c2 <osMessageQueueNew+0x82>
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	68db      	ldr	r3, [r3, #12]
 800d5a0:	2b4f      	cmp	r3, #79	@ 0x4f
 800d5a2:	d90e      	bls.n	800d5c2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d00a      	beq.n	800d5c2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	695a      	ldr	r2, [r3, #20]
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	68b9      	ldr	r1, [r7, #8]
 800d5b4:	fb01 f303 	mul.w	r3, r1, r3
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	d302      	bcc.n	800d5c2 <osMessageQueueNew+0x82>
        mem = 1;
 800d5bc:	2301      	movs	r3, #1
 800d5be:	623b      	str	r3, [r7, #32]
 800d5c0:	e014      	b.n	800d5ec <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	689b      	ldr	r3, [r3, #8]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d110      	bne.n	800d5ec <osMessageQueueNew+0xac>
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	68db      	ldr	r3, [r3, #12]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d10c      	bne.n	800d5ec <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d108      	bne.n	800d5ec <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	695b      	ldr	r3, [r3, #20]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d104      	bne.n	800d5ec <osMessageQueueNew+0xac>
          mem = 0;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	623b      	str	r3, [r7, #32]
 800d5e6:	e001      	b.n	800d5ec <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800d5ec:	6a3b      	ldr	r3, [r7, #32]
 800d5ee:	2b01      	cmp	r3, #1
 800d5f0:	d10b      	bne.n	800d60a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	691a      	ldr	r2, [r3, #16]
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	689b      	ldr	r3, [r3, #8]
 800d5fa:	2100      	movs	r1, #0
 800d5fc:	9100      	str	r1, [sp, #0]
 800d5fe:	68b9      	ldr	r1, [r7, #8]
 800d600:	68f8      	ldr	r0, [r7, #12]
 800d602:	f000 fccb 	bl	800df9c <xQueueGenericCreateStatic>
 800d606:	6278      	str	r0, [r7, #36]	@ 0x24
 800d608:	e008      	b.n	800d61c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800d60a:	6a3b      	ldr	r3, [r7, #32]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d105      	bne.n	800d61c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800d610:	2200      	movs	r2, #0
 800d612:	68b9      	ldr	r1, [r7, #8]
 800d614:	68f8      	ldr	r0, [r7, #12]
 800d616:	f000 fd48 	bl	800e0aa <xQueueGenericCreate>
 800d61a:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800d61c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d00c      	beq.n	800d63c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d003      	beq.n	800d630 <osMessageQueueNew+0xf0>
        name = attr->name;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	61fb      	str	r3, [r7, #28]
 800d62e:	e001      	b.n	800d634 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800d630:	2300      	movs	r3, #0
 800d632:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800d634:	69f9      	ldr	r1, [r7, #28]
 800d636:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d638:	f001 fd2e 	bl	800f098 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800d63c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d63e:	4618      	mov	r0, r3
 800d640:	3728      	adds	r7, #40	@ 0x28
 800d642:	46bd      	mov	sp, r7
 800d644:	bd80      	pop	{r7, pc}
 800d646:	bf00      	nop
 800d648:	20005880 	.word	0x20005880

0800d64c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b08a      	sub	sp, #40	@ 0x28
 800d650:	af00      	add	r7, sp, #0
 800d652:	60f8      	str	r0, [r7, #12]
 800d654:	60b9      	str	r1, [r7, #8]
 800d656:	603b      	str	r3, [r7, #0]
 800d658:	4613      	mov	r3, r2
 800d65a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d660:	2300      	movs	r3, #0
 800d662:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d664:	f3ef 8305 	mrs	r3, IPSR
 800d668:	61fb      	str	r3, [r7, #28]
  return(result);
 800d66a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d10f      	bne.n	800d690 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d670:	f3ef 8310 	mrs	r3, PRIMASK
 800d674:	61bb      	str	r3, [r7, #24]
  return(result);
 800d676:	69bb      	ldr	r3, [r7, #24]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d105      	bne.n	800d688 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d67c:	f3ef 8311 	mrs	r3, BASEPRI
 800d680:	617b      	str	r3, [r7, #20]
  return(result);
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d02c      	beq.n	800d6e2 <osMessageQueuePut+0x96>
 800d688:	4b28      	ldr	r3, [pc, #160]	@ (800d72c <osMessageQueuePut+0xe0>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	2b02      	cmp	r3, #2
 800d68e:	d128      	bne.n	800d6e2 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d690:	6a3b      	ldr	r3, [r7, #32]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d005      	beq.n	800d6a2 <osMessageQueuePut+0x56>
 800d696:	68bb      	ldr	r3, [r7, #8]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d002      	beq.n	800d6a2 <osMessageQueuePut+0x56>
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d003      	beq.n	800d6aa <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800d6a2:	f06f 0303 	mvn.w	r3, #3
 800d6a6:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d6a8:	e039      	b.n	800d71e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d6ae:	f107 0210 	add.w	r2, r7, #16
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	68b9      	ldr	r1, [r7, #8]
 800d6b6:	6a38      	ldr	r0, [r7, #32]
 800d6b8:	f000 ff9a 	bl	800e5f0 <xQueueGenericSendFromISR>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	2b01      	cmp	r3, #1
 800d6c0:	d003      	beq.n	800d6ca <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800d6c2:	f06f 0302 	mvn.w	r3, #2
 800d6c6:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d6c8:	e029      	b.n	800d71e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800d6ca:	693b      	ldr	r3, [r7, #16]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d026      	beq.n	800d71e <osMessageQueuePut+0xd2>
 800d6d0:	4b17      	ldr	r3, [pc, #92]	@ (800d730 <osMessageQueuePut+0xe4>)
 800d6d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6d6:	601a      	str	r2, [r3, #0]
 800d6d8:	f3bf 8f4f 	dsb	sy
 800d6dc:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d6e0:	e01d      	b.n	800d71e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d6e2:	6a3b      	ldr	r3, [r7, #32]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d002      	beq.n	800d6ee <osMessageQueuePut+0xa2>
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d103      	bne.n	800d6f6 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800d6ee:	f06f 0303 	mvn.w	r3, #3
 800d6f2:	627b      	str	r3, [r7, #36]	@ 0x24
 800d6f4:	e014      	b.n	800d720 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	683a      	ldr	r2, [r7, #0]
 800d6fa:	68b9      	ldr	r1, [r7, #8]
 800d6fc:	6a38      	ldr	r0, [r7, #32]
 800d6fe:	f000 fe6d 	bl	800e3dc <xQueueGenericSend>
 800d702:	4603      	mov	r3, r0
 800d704:	2b01      	cmp	r3, #1
 800d706:	d00b      	beq.n	800d720 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d003      	beq.n	800d716 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800d70e:	f06f 0301 	mvn.w	r3, #1
 800d712:	627b      	str	r3, [r7, #36]	@ 0x24
 800d714:	e004      	b.n	800d720 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800d716:	f06f 0302 	mvn.w	r3, #2
 800d71a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d71c:	e000      	b.n	800d720 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d71e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d722:	4618      	mov	r0, r3
 800d724:	3728      	adds	r7, #40	@ 0x28
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}
 800d72a:	bf00      	nop
 800d72c:	20005880 	.word	0x20005880
 800d730:	e000ed04 	.word	0xe000ed04

0800d734 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d734:	b580      	push	{r7, lr}
 800d736:	b08a      	sub	sp, #40	@ 0x28
 800d738:	af00      	add	r7, sp, #0
 800d73a:	60f8      	str	r0, [r7, #12]
 800d73c:	60b9      	str	r1, [r7, #8]
 800d73e:	607a      	str	r2, [r7, #4]
 800d740:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d746:	2300      	movs	r3, #0
 800d748:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d74a:	f3ef 8305 	mrs	r3, IPSR
 800d74e:	61fb      	str	r3, [r7, #28]
  return(result);
 800d750:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d752:	2b00      	cmp	r3, #0
 800d754:	d10f      	bne.n	800d776 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d756:	f3ef 8310 	mrs	r3, PRIMASK
 800d75a:	61bb      	str	r3, [r7, #24]
  return(result);
 800d75c:	69bb      	ldr	r3, [r7, #24]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d105      	bne.n	800d76e <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d762:	f3ef 8311 	mrs	r3, BASEPRI
 800d766:	617b      	str	r3, [r7, #20]
  return(result);
 800d768:	697b      	ldr	r3, [r7, #20]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d02c      	beq.n	800d7c8 <osMessageQueueGet+0x94>
 800d76e:	4b28      	ldr	r3, [pc, #160]	@ (800d810 <osMessageQueueGet+0xdc>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	2b02      	cmp	r3, #2
 800d774:	d128      	bne.n	800d7c8 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d776:	6a3b      	ldr	r3, [r7, #32]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d005      	beq.n	800d788 <osMessageQueueGet+0x54>
 800d77c:	68bb      	ldr	r3, [r7, #8]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d002      	beq.n	800d788 <osMessageQueueGet+0x54>
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d003      	beq.n	800d790 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800d788:	f06f 0303 	mvn.w	r3, #3
 800d78c:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d78e:	e038      	b.n	800d802 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800d790:	2300      	movs	r3, #0
 800d792:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d794:	f107 0310 	add.w	r3, r7, #16
 800d798:	461a      	mov	r2, r3
 800d79a:	68b9      	ldr	r1, [r7, #8]
 800d79c:	6a38      	ldr	r0, [r7, #32]
 800d79e:	f001 fa63 	bl	800ec68 <xQueueReceiveFromISR>
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	2b01      	cmp	r3, #1
 800d7a6:	d003      	beq.n	800d7b0 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800d7a8:	f06f 0302 	mvn.w	r3, #2
 800d7ac:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d7ae:	e028      	b.n	800d802 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800d7b0:	693b      	ldr	r3, [r7, #16]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d025      	beq.n	800d802 <osMessageQueueGet+0xce>
 800d7b6:	4b17      	ldr	r3, [pc, #92]	@ (800d814 <osMessageQueueGet+0xe0>)
 800d7b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d7bc:	601a      	str	r2, [r3, #0]
 800d7be:	f3bf 8f4f 	dsb	sy
 800d7c2:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d7c6:	e01c      	b.n	800d802 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d7c8:	6a3b      	ldr	r3, [r7, #32]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d002      	beq.n	800d7d4 <osMessageQueueGet+0xa0>
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d103      	bne.n	800d7dc <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800d7d4:	f06f 0303 	mvn.w	r3, #3
 800d7d8:	627b      	str	r3, [r7, #36]	@ 0x24
 800d7da:	e013      	b.n	800d804 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d7dc:	683a      	ldr	r2, [r7, #0]
 800d7de:	68b9      	ldr	r1, [r7, #8]
 800d7e0:	6a38      	ldr	r0, [r7, #32]
 800d7e2:	f001 f841 	bl	800e868 <xQueueReceive>
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	2b01      	cmp	r3, #1
 800d7ea:	d00b      	beq.n	800d804 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d003      	beq.n	800d7fa <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800d7f2:	f06f 0301 	mvn.w	r3, #1
 800d7f6:	627b      	str	r3, [r7, #36]	@ 0x24
 800d7f8:	e004      	b.n	800d804 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800d7fa:	f06f 0302 	mvn.w	r3, #2
 800d7fe:	627b      	str	r3, [r7, #36]	@ 0x24
 800d800:	e000      	b.n	800d804 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d802:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d806:	4618      	mov	r0, r3
 800d808:	3728      	adds	r7, #40	@ 0x28
 800d80a:	46bd      	mov	sp, r7
 800d80c:	bd80      	pop	{r7, pc}
 800d80e:	bf00      	nop
 800d810:	20005880 	.word	0x20005880
 800d814:	e000ed04 	.word	0xe000ed04

0800d818 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800d818:	b580      	push	{r7, lr}
 800d81a:	b088      	sub	sp, #32
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 800d824:	69bb      	ldr	r3, [r7, #24]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d102      	bne.n	800d830 <osMessageQueueGetCount+0x18>
    count = 0U;
 800d82a:	2300      	movs	r3, #0
 800d82c:	61fb      	str	r3, [r7, #28]
 800d82e:	e01e      	b.n	800d86e <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d830:	f3ef 8305 	mrs	r3, IPSR
 800d834:	617b      	str	r3, [r7, #20]
  return(result);
 800d836:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d10f      	bne.n	800d85c <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d83c:	f3ef 8310 	mrs	r3, PRIMASK
 800d840:	613b      	str	r3, [r7, #16]
  return(result);
 800d842:	693b      	ldr	r3, [r7, #16]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d105      	bne.n	800d854 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d848:	f3ef 8311 	mrs	r3, BASEPRI
 800d84c:	60fb      	str	r3, [r7, #12]
  return(result);
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d008      	beq.n	800d866 <osMessageQueueGetCount+0x4e>
 800d854:	4b08      	ldr	r3, [pc, #32]	@ (800d878 <osMessageQueueGetCount+0x60>)
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	2b02      	cmp	r3, #2
 800d85a:	d104      	bne.n	800d866 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800d85c:	69b8      	ldr	r0, [r7, #24]
 800d85e:	f001 faac 	bl	800edba <uxQueueMessagesWaitingFromISR>
 800d862:	61f8      	str	r0, [r7, #28]
 800d864:	e003      	b.n	800d86e <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800d866:	69b8      	ldr	r0, [r7, #24]
 800d868:	f001 fa86 	bl	800ed78 <uxQueueMessagesWaiting>
 800d86c:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 800d86e:	69fb      	ldr	r3, [r7, #28]
}
 800d870:	4618      	mov	r0, r3
 800d872:	3720      	adds	r7, #32
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}
 800d878:	20005880 	.word	0x20005880

0800d87c <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b088      	sub	sp, #32
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d888:	f3ef 8305 	mrs	r3, IPSR
 800d88c:	617b      	str	r3, [r7, #20]
  return(result);
 800d88e:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800d890:	2b00      	cmp	r3, #0
 800d892:	d10f      	bne.n	800d8b4 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d894:	f3ef 8310 	mrs	r3, PRIMASK
 800d898:	613b      	str	r3, [r7, #16]
  return(result);
 800d89a:	693b      	ldr	r3, [r7, #16]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d105      	bne.n	800d8ac <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d8a0:	f3ef 8311 	mrs	r3, BASEPRI
 800d8a4:	60fb      	str	r3, [r7, #12]
  return(result);
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d007      	beq.n	800d8bc <osMessageQueueDelete+0x40>
 800d8ac:	4b0d      	ldr	r3, [pc, #52]	@ (800d8e4 <osMessageQueueDelete+0x68>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	2b02      	cmp	r3, #2
 800d8b2:	d103      	bne.n	800d8bc <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 800d8b4:	f06f 0305 	mvn.w	r3, #5
 800d8b8:	61fb      	str	r3, [r7, #28]
 800d8ba:	e00e      	b.n	800d8da <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 800d8bc:	69bb      	ldr	r3, [r7, #24]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d103      	bne.n	800d8ca <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 800d8c2:	f06f 0303 	mvn.w	r3, #3
 800d8c6:	61fb      	str	r3, [r7, #28]
 800d8c8:	e007      	b.n	800d8da <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800d8ca:	69b8      	ldr	r0, [r7, #24]
 800d8cc:	f001 fc0e 	bl	800f0ec <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 800d8d4:	69b8      	ldr	r0, [r7, #24]
 800d8d6:	f001 fa91 	bl	800edfc <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800d8da:	69fb      	ldr	r3, [r7, #28]
}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	3720      	adds	r7, #32
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}
 800d8e4:	20005880 	.word	0x20005880

0800d8e8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d8e8:	b480      	push	{r7}
 800d8ea:	b085      	sub	sp, #20
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	60f8      	str	r0, [r7, #12]
 800d8f0:	60b9      	str	r1, [r7, #8]
 800d8f2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	4a07      	ldr	r2, [pc, #28]	@ (800d914 <vApplicationGetIdleTaskMemory+0x2c>)
 800d8f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	4a06      	ldr	r2, [pc, #24]	@ (800d918 <vApplicationGetIdleTaskMemory+0x30>)
 800d8fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d906:	601a      	str	r2, [r3, #0]
}
 800d908:	bf00      	nop
 800d90a:	3714      	adds	r7, #20
 800d90c:	46bd      	mov	sp, r7
 800d90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d912:	4770      	bx	lr
 800d914:	20005884 	.word	0x20005884
 800d918:	2000592c 	.word	0x2000592c

0800d91c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d91c:	b480      	push	{r7}
 800d91e:	b085      	sub	sp, #20
 800d920:	af00      	add	r7, sp, #0
 800d922:	60f8      	str	r0, [r7, #12]
 800d924:	60b9      	str	r1, [r7, #8]
 800d926:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	4a07      	ldr	r2, [pc, #28]	@ (800d948 <vApplicationGetTimerTaskMemory+0x2c>)
 800d92c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	4a06      	ldr	r2, [pc, #24]	@ (800d94c <vApplicationGetTimerTaskMemory+0x30>)
 800d932:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d93a:	601a      	str	r2, [r3, #0]
}
 800d93c:	bf00      	nop
 800d93e:	3714      	adds	r7, #20
 800d940:	46bd      	mov	sp, r7
 800d942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d946:	4770      	bx	lr
 800d948:	2000612c 	.word	0x2000612c
 800d94c:	200061d4 	.word	0x200061d4

0800d950 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800d950:	b580      	push	{r7, lr}
 800d952:	b086      	sub	sp, #24
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d10d      	bne.n	800d97a <xEventGroupCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d95e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d962:	b672      	cpsid	i
 800d964:	f383 8811 	msr	BASEPRI, r3
 800d968:	f3bf 8f6f 	isb	sy
 800d96c:	f3bf 8f4f 	dsb	sy
 800d970:	b662      	cpsie	i
 800d972:	613b      	str	r3, [r7, #16]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d974:	bf00      	nop
 800d976:	bf00      	nop
 800d978:	e7fd      	b.n	800d976 <xEventGroupCreateStatic+0x26>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800d97a:	2320      	movs	r3, #32
 800d97c:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800d97e:	68bb      	ldr	r3, [r7, #8]
 800d980:	2b20      	cmp	r3, #32
 800d982:	d00d      	beq.n	800d9a0 <xEventGroupCreateStatic+0x50>
	__asm volatile
 800d984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d988:	b672      	cpsid	i
 800d98a:	f383 8811 	msr	BASEPRI, r3
 800d98e:	f3bf 8f6f 	isb	sy
 800d992:	f3bf 8f4f 	dsb	sy
 800d996:	b662      	cpsie	i
 800d998:	60fb      	str	r3, [r7, #12]
}
 800d99a:	bf00      	nop
 800d99c:	bf00      	nop
 800d99e:	e7fd      	b.n	800d99c <xEventGroupCreateStatic+0x4c>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800d9a4:	697b      	ldr	r3, [r7, #20]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d00a      	beq.n	800d9c0 <xEventGroupCreateStatic+0x70>
		{
			pxEventBits->uxEventBits = 0;
 800d9aa:	697b      	ldr	r3, [r7, #20]
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800d9b0:	697b      	ldr	r3, [r7, #20]
 800d9b2:	3304      	adds	r3, #4
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f000 f9d1 	bl	800dd5c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800d9ba:	697b      	ldr	r3, [r7, #20]
 800d9bc:	2201      	movs	r2, #1
 800d9be:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800d9c0:	697b      	ldr	r3, [r7, #20]
	}
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	3718      	adds	r7, #24
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	bd80      	pop	{r7, pc}

0800d9ca <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800d9ca:	b580      	push	{r7, lr}
 800d9cc:	b082      	sub	sp, #8
 800d9ce:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800d9d0:	2020      	movs	r0, #32
 800d9d2:	f003 fab1 	bl	8010f38 <pvPortMalloc>
 800d9d6:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d00a      	beq.n	800d9f4 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	3304      	adds	r3, #4
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	f000 f9b7 	bl	800dd5c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800d9f4:	687b      	ldr	r3, [r7, #4]
	}
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	3708      	adds	r7, #8
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd80      	pop	{r7, pc}
	...

0800da00 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b090      	sub	sp, #64	@ 0x40
 800da04:	af00      	add	r7, sp, #0
 800da06:	60f8      	str	r0, [r7, #12]
 800da08:	60b9      	str	r1, [r7, #8]
 800da0a:	607a      	str	r2, [r7, #4]
 800da0c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800da12:	2300      	movs	r3, #0
 800da14:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800da16:	2300      	movs	r3, #0
 800da18:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d10d      	bne.n	800da3c <xEventGroupWaitBits+0x3c>
	__asm volatile
 800da20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da24:	b672      	cpsid	i
 800da26:	f383 8811 	msr	BASEPRI, r3
 800da2a:	f3bf 8f6f 	isb	sy
 800da2e:	f3bf 8f4f 	dsb	sy
 800da32:	b662      	cpsie	i
 800da34:	623b      	str	r3, [r7, #32]
}
 800da36:	bf00      	nop
 800da38:	bf00      	nop
 800da3a:	e7fd      	b.n	800da38 <xEventGroupWaitBits+0x38>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800da42:	d30d      	bcc.n	800da60 <xEventGroupWaitBits+0x60>
	__asm volatile
 800da44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da48:	b672      	cpsid	i
 800da4a:	f383 8811 	msr	BASEPRI, r3
 800da4e:	f3bf 8f6f 	isb	sy
 800da52:	f3bf 8f4f 	dsb	sy
 800da56:	b662      	cpsie	i
 800da58:	61fb      	str	r3, [r7, #28]
}
 800da5a:	bf00      	nop
 800da5c:	bf00      	nop
 800da5e:	e7fd      	b.n	800da5c <xEventGroupWaitBits+0x5c>
	configASSERT( uxBitsToWaitFor != 0 );
 800da60:	68bb      	ldr	r3, [r7, #8]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d10d      	bne.n	800da82 <xEventGroupWaitBits+0x82>
	__asm volatile
 800da66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da6a:	b672      	cpsid	i
 800da6c:	f383 8811 	msr	BASEPRI, r3
 800da70:	f3bf 8f6f 	isb	sy
 800da74:	f3bf 8f4f 	dsb	sy
 800da78:	b662      	cpsie	i
 800da7a:	61bb      	str	r3, [r7, #24]
}
 800da7c:	bf00      	nop
 800da7e:	bf00      	nop
 800da80:	e7fd      	b.n	800da7e <xEventGroupWaitBits+0x7e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800da82:	f002 fa95 	bl	800ffb0 <xTaskGetSchedulerState>
 800da86:	4603      	mov	r3, r0
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d102      	bne.n	800da92 <xEventGroupWaitBits+0x92>
 800da8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d101      	bne.n	800da96 <xEventGroupWaitBits+0x96>
 800da92:	2301      	movs	r3, #1
 800da94:	e000      	b.n	800da98 <xEventGroupWaitBits+0x98>
 800da96:	2300      	movs	r3, #0
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d10d      	bne.n	800dab8 <xEventGroupWaitBits+0xb8>
	__asm volatile
 800da9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daa0:	b672      	cpsid	i
 800daa2:	f383 8811 	msr	BASEPRI, r3
 800daa6:	f3bf 8f6f 	isb	sy
 800daaa:	f3bf 8f4f 	dsb	sy
 800daae:	b662      	cpsie	i
 800dab0:	617b      	str	r3, [r7, #20]
}
 800dab2:	bf00      	nop
 800dab4:	bf00      	nop
 800dab6:	e7fd      	b.n	800dab4 <xEventGroupWaitBits+0xb4>
	}
	#endif

	vTaskSuspendAll();
 800dab8:	f001 fde8 	bl	800f68c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800dabc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800dac2:	683a      	ldr	r2, [r7, #0]
 800dac4:	68b9      	ldr	r1, [r7, #8]
 800dac6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dac8:	f000 f911 	bl	800dcee <prvTestWaitCondition>
 800dacc:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800dace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d00e      	beq.n	800daf2 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800dad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800dad8:	2300      	movs	r3, #0
 800dada:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d028      	beq.n	800db34 <xEventGroupWaitBits+0x134>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800dae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dae4:	681a      	ldr	r2, [r3, #0]
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	43db      	mvns	r3, r3
 800daea:	401a      	ands	r2, r3
 800daec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800daee:	601a      	str	r2, [r3, #0]
 800daf0:	e020      	b.n	800db34 <xEventGroupWaitBits+0x134>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800daf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d104      	bne.n	800db02 <xEventGroupWaitBits+0x102>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800daf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dafa:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800dafc:	2301      	movs	r3, #1
 800dafe:	633b      	str	r3, [r7, #48]	@ 0x30
 800db00:	e018      	b.n	800db34 <xEventGroupWaitBits+0x134>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d003      	beq.n	800db10 <xEventGroupWaitBits+0x110>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800db08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800db0e:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d003      	beq.n	800db1e <xEventGroupWaitBits+0x11e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800db16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db18:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800db1c:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800db1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db20:	1d18      	adds	r0, r3, #4
 800db22:	68ba      	ldr	r2, [r7, #8]
 800db24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db26:	4313      	orrs	r3, r2
 800db28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800db2a:	4619      	mov	r1, r3
 800db2c:	f001 ffee 	bl	800fb0c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800db30:	2300      	movs	r3, #0
 800db32:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800db34:	f001 fdb8 	bl	800f6a8 <xTaskResumeAll>
 800db38:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800db3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d031      	beq.n	800dba4 <xEventGroupWaitBits+0x1a4>
	{
		if( xAlreadyYielded == pdFALSE )
 800db40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db42:	2b00      	cmp	r3, #0
 800db44:	d107      	bne.n	800db56 <xEventGroupWaitBits+0x156>
		{
			portYIELD_WITHIN_API();
 800db46:	4b1a      	ldr	r3, [pc, #104]	@ (800dbb0 <xEventGroupWaitBits+0x1b0>)
 800db48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db4c:	601a      	str	r2, [r3, #0]
 800db4e:	f3bf 8f4f 	dsb	sy
 800db52:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800db56:	f002 fbad 	bl	80102b4 <uxTaskResetEventItemValue>
 800db5a:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800db5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800db62:	2b00      	cmp	r3, #0
 800db64:	d11a      	bne.n	800db9c <xEventGroupWaitBits+0x19c>
		{
			taskENTER_CRITICAL();
 800db66:	f003 f8b9 	bl	8010cdc <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800db6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800db70:	683a      	ldr	r2, [r7, #0]
 800db72:	68b9      	ldr	r1, [r7, #8]
 800db74:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800db76:	f000 f8ba 	bl	800dcee <prvTestWaitCondition>
 800db7a:	4603      	mov	r3, r0
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d009      	beq.n	800db94 <xEventGroupWaitBits+0x194>
				{
					if( xClearOnExit != pdFALSE )
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d006      	beq.n	800db94 <xEventGroupWaitBits+0x194>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800db86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db88:	681a      	ldr	r2, [r3, #0]
 800db8a:	68bb      	ldr	r3, [r7, #8]
 800db8c:	43db      	mvns	r3, r3
 800db8e:	401a      	ands	r2, r3
 800db90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db92:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800db94:	2301      	movs	r3, #1
 800db96:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800db98:	f003 f8d6 	bl	8010d48 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800db9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db9e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800dba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800dba4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800dba6:	4618      	mov	r0, r3
 800dba8:	3740      	adds	r7, #64	@ 0x40
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	bd80      	pop	{r7, pc}
 800dbae:	bf00      	nop
 800dbb0:	e000ed04 	.word	0xe000ed04

0800dbb4 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b08e      	sub	sp, #56	@ 0x38
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
 800dbbc:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d10d      	bne.n	800dbec <xEventGroupSetBits+0x38>
	__asm volatile
 800dbd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbd4:	b672      	cpsid	i
 800dbd6:	f383 8811 	msr	BASEPRI, r3
 800dbda:	f3bf 8f6f 	isb	sy
 800dbde:	f3bf 8f4f 	dsb	sy
 800dbe2:	b662      	cpsie	i
 800dbe4:	613b      	str	r3, [r7, #16]
}
 800dbe6:	bf00      	nop
 800dbe8:	bf00      	nop
 800dbea:	e7fd      	b.n	800dbe8 <xEventGroupSetBits+0x34>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dbf2:	d30d      	bcc.n	800dc10 <xEventGroupSetBits+0x5c>
	__asm volatile
 800dbf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbf8:	b672      	cpsid	i
 800dbfa:	f383 8811 	msr	BASEPRI, r3
 800dbfe:	f3bf 8f6f 	isb	sy
 800dc02:	f3bf 8f4f 	dsb	sy
 800dc06:	b662      	cpsie	i
 800dc08:	60fb      	str	r3, [r7, #12]
}
 800dc0a:	bf00      	nop
 800dc0c:	bf00      	nop
 800dc0e:	e7fd      	b.n	800dc0c <xEventGroupSetBits+0x58>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800dc10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc12:	3304      	adds	r3, #4
 800dc14:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dc16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc18:	3308      	adds	r3, #8
 800dc1a:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800dc1c:	f001 fd36 	bl	800f68c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800dc20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc22:	68db      	ldr	r3, [r3, #12]
 800dc24:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800dc26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc28:	681a      	ldr	r2, [r3, #0]
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	431a      	orrs	r2, r3
 800dc2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc30:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800dc32:	e03c      	b.n	800dcae <xEventGroupSetBits+0xfa>
		{
			pxNext = listGET_NEXT( pxListItem );
 800dc34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc36:	685b      	ldr	r3, [r3, #4]
 800dc38:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800dc3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800dc40:	2300      	movs	r3, #0
 800dc42:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800dc44:	69bb      	ldr	r3, [r7, #24]
 800dc46:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800dc4a:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800dc4c:	69bb      	ldr	r3, [r7, #24]
 800dc4e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800dc52:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800dc54:	697b      	ldr	r3, [r7, #20]
 800dc56:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d108      	bne.n	800dc70 <xEventGroupSetBits+0xbc>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800dc5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc60:	681a      	ldr	r2, [r3, #0]
 800dc62:	69bb      	ldr	r3, [r7, #24]
 800dc64:	4013      	ands	r3, r2
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d00b      	beq.n	800dc82 <xEventGroupSetBits+0xce>
				{
					xMatchFound = pdTRUE;
 800dc6a:	2301      	movs	r3, #1
 800dc6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dc6e:	e008      	b.n	800dc82 <xEventGroupSetBits+0xce>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800dc70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc72:	681a      	ldr	r2, [r3, #0]
 800dc74:	69bb      	ldr	r3, [r7, #24]
 800dc76:	4013      	ands	r3, r2
 800dc78:	69ba      	ldr	r2, [r7, #24]
 800dc7a:	429a      	cmp	r2, r3
 800dc7c:	d101      	bne.n	800dc82 <xEventGroupSetBits+0xce>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800dc7e:	2301      	movs	r3, #1
 800dc80:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800dc82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d010      	beq.n	800dcaa <xEventGroupSetBits+0xf6>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800dc88:	697b      	ldr	r3, [r7, #20]
 800dc8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d003      	beq.n	800dc9a <xEventGroupSetBits+0xe6>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800dc92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc94:	69bb      	ldr	r3, [r7, #24]
 800dc96:	4313      	orrs	r3, r2
 800dc98:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800dc9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800dca2:	4619      	mov	r1, r3
 800dca4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800dca6:	f002 f807 	bl	800fcb8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800dcaa:	69fb      	ldr	r3, [r7, #28]
 800dcac:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800dcae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dcb0:	6a3b      	ldr	r3, [r7, #32]
 800dcb2:	429a      	cmp	r2, r3
 800dcb4:	d1be      	bne.n	800dc34 <xEventGroupSetBits+0x80>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800dcb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcb8:	681a      	ldr	r2, [r3, #0]
 800dcba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcbc:	43db      	mvns	r3, r3
 800dcbe:	401a      	ands	r2, r3
 800dcc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcc2:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800dcc4:	f001 fcf0 	bl	800f6a8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800dcc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcca:	681b      	ldr	r3, [r3, #0]
}
 800dccc:	4618      	mov	r0, r3
 800dcce:	3738      	adds	r7, #56	@ 0x38
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	bd80      	pop	{r7, pc}

0800dcd4 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b082      	sub	sp, #8
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
 800dcdc:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800dcde:	6839      	ldr	r1, [r7, #0]
 800dce0:	6878      	ldr	r0, [r7, #4]
 800dce2:	f7ff ff67 	bl	800dbb4 <xEventGroupSetBits>
}
 800dce6:	bf00      	nop
 800dce8:	3708      	adds	r7, #8
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}

0800dcee <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800dcee:	b480      	push	{r7}
 800dcf0:	b087      	sub	sp, #28
 800dcf2:	af00      	add	r7, sp, #0
 800dcf4:	60f8      	str	r0, [r7, #12]
 800dcf6:	60b9      	str	r1, [r7, #8]
 800dcf8:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d107      	bne.n	800dd14 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800dd04:	68fa      	ldr	r2, [r7, #12]
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	4013      	ands	r3, r2
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d00a      	beq.n	800dd24 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800dd0e:	2301      	movs	r3, #1
 800dd10:	617b      	str	r3, [r7, #20]
 800dd12:	e007      	b.n	800dd24 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800dd14:	68fa      	ldr	r2, [r7, #12]
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	4013      	ands	r3, r2
 800dd1a:	68ba      	ldr	r2, [r7, #8]
 800dd1c:	429a      	cmp	r2, r3
 800dd1e:	d101      	bne.n	800dd24 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800dd20:	2301      	movs	r3, #1
 800dd22:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800dd24:	697b      	ldr	r3, [r7, #20]
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	371c      	adds	r7, #28
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd30:	4770      	bx	lr
	...

0800dd34 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b086      	sub	sp, #24
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	60f8      	str	r0, [r7, #12]
 800dd3c:	60b9      	str	r1, [r7, #8]
 800dd3e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	68ba      	ldr	r2, [r7, #8]
 800dd44:	68f9      	ldr	r1, [r7, #12]
 800dd46:	4804      	ldr	r0, [pc, #16]	@ (800dd58 <xEventGroupSetBitsFromISR+0x24>)
 800dd48:	f002 fe9c 	bl	8010a84 <xTimerPendFunctionCallFromISR>
 800dd4c:	6178      	str	r0, [r7, #20]

		return xReturn;
 800dd4e:	697b      	ldr	r3, [r7, #20]
	}
 800dd50:	4618      	mov	r0, r3
 800dd52:	3718      	adds	r7, #24
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}
 800dd58:	0800dcd5 	.word	0x0800dcd5

0800dd5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800dd5c:	b480      	push	{r7}
 800dd5e:	b083      	sub	sp, #12
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	f103 0208 	add.w	r2, r3, #8
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dd74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	f103 0208 	add.w	r2, r3, #8
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	f103 0208 	add.w	r2, r3, #8
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dd90:	bf00      	nop
 800dd92:	370c      	adds	r7, #12
 800dd94:	46bd      	mov	sp, r7
 800dd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9a:	4770      	bx	lr

0800dd9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800dd9c:	b480      	push	{r7}
 800dd9e:	b083      	sub	sp, #12
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	2200      	movs	r2, #0
 800dda8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ddaa:	bf00      	nop
 800ddac:	370c      	adds	r7, #12
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb4:	4770      	bx	lr

0800ddb6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ddb6:	b480      	push	{r7}
 800ddb8:	b085      	sub	sp, #20
 800ddba:	af00      	add	r7, sp, #0
 800ddbc:	6078      	str	r0, [r7, #4]
 800ddbe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	685b      	ldr	r3, [r3, #4]
 800ddc4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ddc6:	683b      	ldr	r3, [r7, #0]
 800ddc8:	68fa      	ldr	r2, [r7, #12]
 800ddca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	689a      	ldr	r2, [r3, #8]
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	689b      	ldr	r3, [r3, #8]
 800ddd8:	683a      	ldr	r2, [r7, #0]
 800ddda:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	683a      	ldr	r2, [r7, #0]
 800dde0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	687a      	ldr	r2, [r7, #4]
 800dde6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	1c5a      	adds	r2, r3, #1
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	601a      	str	r2, [r3, #0]
}
 800ddf2:	bf00      	nop
 800ddf4:	3714      	adds	r7, #20
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfc:	4770      	bx	lr

0800ddfe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ddfe:	b480      	push	{r7}
 800de00:	b085      	sub	sp, #20
 800de02:	af00      	add	r7, sp, #0
 800de04:	6078      	str	r0, [r7, #4]
 800de06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800de14:	d103      	bne.n	800de1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	691b      	ldr	r3, [r3, #16]
 800de1a:	60fb      	str	r3, [r7, #12]
 800de1c:	e00c      	b.n	800de38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	3308      	adds	r3, #8
 800de22:	60fb      	str	r3, [r7, #12]
 800de24:	e002      	b.n	800de2c <vListInsert+0x2e>
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	685b      	ldr	r3, [r3, #4]
 800de2a:	60fb      	str	r3, [r7, #12]
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	685b      	ldr	r3, [r3, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	68ba      	ldr	r2, [r7, #8]
 800de34:	429a      	cmp	r2, r3
 800de36:	d2f6      	bcs.n	800de26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	685a      	ldr	r2, [r3, #4]
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	685b      	ldr	r3, [r3, #4]
 800de44:	683a      	ldr	r2, [r7, #0]
 800de46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800de48:	683b      	ldr	r3, [r7, #0]
 800de4a:	68fa      	ldr	r2, [r7, #12]
 800de4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	683a      	ldr	r2, [r7, #0]
 800de52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	687a      	ldr	r2, [r7, #4]
 800de58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	1c5a      	adds	r2, r3, #1
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	601a      	str	r2, [r3, #0]
}
 800de64:	bf00      	nop
 800de66:	3714      	adds	r7, #20
 800de68:	46bd      	mov	sp, r7
 800de6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6e:	4770      	bx	lr

0800de70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800de70:	b480      	push	{r7}
 800de72:	b085      	sub	sp, #20
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	691b      	ldr	r3, [r3, #16]
 800de7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	685b      	ldr	r3, [r3, #4]
 800de82:	687a      	ldr	r2, [r7, #4]
 800de84:	6892      	ldr	r2, [r2, #8]
 800de86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	689b      	ldr	r3, [r3, #8]
 800de8c:	687a      	ldr	r2, [r7, #4]
 800de8e:	6852      	ldr	r2, [r2, #4]
 800de90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	685b      	ldr	r3, [r3, #4]
 800de96:	687a      	ldr	r2, [r7, #4]
 800de98:	429a      	cmp	r2, r3
 800de9a:	d103      	bne.n	800dea4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	689a      	ldr	r2, [r3, #8]
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2200      	movs	r2, #0
 800dea8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	1e5a      	subs	r2, r3, #1
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	681b      	ldr	r3, [r3, #0]
}
 800deb8:	4618      	mov	r0, r3
 800deba:	3714      	adds	r7, #20
 800debc:	46bd      	mov	sp, r7
 800debe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec2:	4770      	bx	lr

0800dec4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b084      	sub	sp, #16
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
 800decc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d10d      	bne.n	800def4 <xQueueGenericReset+0x30>
	__asm volatile
 800ded8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dedc:	b672      	cpsid	i
 800dede:	f383 8811 	msr	BASEPRI, r3
 800dee2:	f3bf 8f6f 	isb	sy
 800dee6:	f3bf 8f4f 	dsb	sy
 800deea:	b662      	cpsie	i
 800deec:	60bb      	str	r3, [r7, #8]
}
 800deee:	bf00      	nop
 800def0:	bf00      	nop
 800def2:	e7fd      	b.n	800def0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800def4:	f002 fef2 	bl	8010cdc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	681a      	ldr	r2, [r3, #0]
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df00:	68f9      	ldr	r1, [r7, #12]
 800df02:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800df04:	fb01 f303 	mul.w	r3, r1, r3
 800df08:	441a      	add	r2, r3
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	2200      	movs	r2, #0
 800df12:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	681a      	ldr	r2, [r3, #0]
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	681a      	ldr	r2, [r3, #0]
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df24:	3b01      	subs	r3, #1
 800df26:	68f9      	ldr	r1, [r7, #12]
 800df28:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800df2a:	fb01 f303 	mul.w	r3, r1, r3
 800df2e:	441a      	add	r2, r3
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	22ff      	movs	r2, #255	@ 0xff
 800df38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	22ff      	movs	r2, #255	@ 0xff
 800df40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d114      	bne.n	800df74 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	691b      	ldr	r3, [r3, #16]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d01a      	beq.n	800df88 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	3310      	adds	r3, #16
 800df56:	4618      	mov	r0, r3
 800df58:	f001 fe48 	bl	800fbec <xTaskRemoveFromEventList>
 800df5c:	4603      	mov	r3, r0
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d012      	beq.n	800df88 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800df62:	4b0d      	ldr	r3, [pc, #52]	@ (800df98 <xQueueGenericReset+0xd4>)
 800df64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df68:	601a      	str	r2, [r3, #0]
 800df6a:	f3bf 8f4f 	dsb	sy
 800df6e:	f3bf 8f6f 	isb	sy
 800df72:	e009      	b.n	800df88 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	3310      	adds	r3, #16
 800df78:	4618      	mov	r0, r3
 800df7a:	f7ff feef 	bl	800dd5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	3324      	adds	r3, #36	@ 0x24
 800df82:	4618      	mov	r0, r3
 800df84:	f7ff feea 	bl	800dd5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800df88:	f002 fede 	bl	8010d48 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800df8c:	2301      	movs	r3, #1
}
 800df8e:	4618      	mov	r0, r3
 800df90:	3710      	adds	r7, #16
 800df92:	46bd      	mov	sp, r7
 800df94:	bd80      	pop	{r7, pc}
 800df96:	bf00      	nop
 800df98:	e000ed04 	.word	0xe000ed04

0800df9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b08e      	sub	sp, #56	@ 0x38
 800dfa0:	af02      	add	r7, sp, #8
 800dfa2:	60f8      	str	r0, [r7, #12]
 800dfa4:	60b9      	str	r1, [r7, #8]
 800dfa6:	607a      	str	r2, [r7, #4]
 800dfa8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d10d      	bne.n	800dfcc <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800dfb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfb4:	b672      	cpsid	i
 800dfb6:	f383 8811 	msr	BASEPRI, r3
 800dfba:	f3bf 8f6f 	isb	sy
 800dfbe:	f3bf 8f4f 	dsb	sy
 800dfc2:	b662      	cpsie	i
 800dfc4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800dfc6:	bf00      	nop
 800dfc8:	bf00      	nop
 800dfca:	e7fd      	b.n	800dfc8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800dfcc:	683b      	ldr	r3, [r7, #0]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d10d      	bne.n	800dfee <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800dfd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfd6:	b672      	cpsid	i
 800dfd8:	f383 8811 	msr	BASEPRI, r3
 800dfdc:	f3bf 8f6f 	isb	sy
 800dfe0:	f3bf 8f4f 	dsb	sy
 800dfe4:	b662      	cpsie	i
 800dfe6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800dfe8:	bf00      	nop
 800dfea:	bf00      	nop
 800dfec:	e7fd      	b.n	800dfea <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d002      	beq.n	800dffa <xQueueGenericCreateStatic+0x5e>
 800dff4:	68bb      	ldr	r3, [r7, #8]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d001      	beq.n	800dffe <xQueueGenericCreateStatic+0x62>
 800dffa:	2301      	movs	r3, #1
 800dffc:	e000      	b.n	800e000 <xQueueGenericCreateStatic+0x64>
 800dffe:	2300      	movs	r3, #0
 800e000:	2b00      	cmp	r3, #0
 800e002:	d10d      	bne.n	800e020 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800e004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e008:	b672      	cpsid	i
 800e00a:	f383 8811 	msr	BASEPRI, r3
 800e00e:	f3bf 8f6f 	isb	sy
 800e012:	f3bf 8f4f 	dsb	sy
 800e016:	b662      	cpsie	i
 800e018:	623b      	str	r3, [r7, #32]
}
 800e01a:	bf00      	nop
 800e01c:	bf00      	nop
 800e01e:	e7fd      	b.n	800e01c <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d102      	bne.n	800e02c <xQueueGenericCreateStatic+0x90>
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d101      	bne.n	800e030 <xQueueGenericCreateStatic+0x94>
 800e02c:	2301      	movs	r3, #1
 800e02e:	e000      	b.n	800e032 <xQueueGenericCreateStatic+0x96>
 800e030:	2300      	movs	r3, #0
 800e032:	2b00      	cmp	r3, #0
 800e034:	d10d      	bne.n	800e052 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800e036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e03a:	b672      	cpsid	i
 800e03c:	f383 8811 	msr	BASEPRI, r3
 800e040:	f3bf 8f6f 	isb	sy
 800e044:	f3bf 8f4f 	dsb	sy
 800e048:	b662      	cpsie	i
 800e04a:	61fb      	str	r3, [r7, #28]
}
 800e04c:	bf00      	nop
 800e04e:	bf00      	nop
 800e050:	e7fd      	b.n	800e04e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e052:	2350      	movs	r3, #80	@ 0x50
 800e054:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e056:	697b      	ldr	r3, [r7, #20]
 800e058:	2b50      	cmp	r3, #80	@ 0x50
 800e05a:	d00d      	beq.n	800e078 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800e05c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e060:	b672      	cpsid	i
 800e062:	f383 8811 	msr	BASEPRI, r3
 800e066:	f3bf 8f6f 	isb	sy
 800e06a:	f3bf 8f4f 	dsb	sy
 800e06e:	b662      	cpsie	i
 800e070:	61bb      	str	r3, [r7, #24]
}
 800e072:	bf00      	nop
 800e074:	bf00      	nop
 800e076:	e7fd      	b.n	800e074 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e078:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800e07e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e080:	2b00      	cmp	r3, #0
 800e082:	d00d      	beq.n	800e0a0 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e086:	2201      	movs	r2, #1
 800e088:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e08c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800e090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e092:	9300      	str	r3, [sp, #0]
 800e094:	4613      	mov	r3, r2
 800e096:	687a      	ldr	r2, [r7, #4]
 800e098:	68b9      	ldr	r1, [r7, #8]
 800e09a:	68f8      	ldr	r0, [r7, #12]
 800e09c:	f000 f848 	bl	800e130 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e0a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	3730      	adds	r7, #48	@ 0x30
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bd80      	pop	{r7, pc}

0800e0aa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e0aa:	b580      	push	{r7, lr}
 800e0ac:	b08a      	sub	sp, #40	@ 0x28
 800e0ae:	af02      	add	r7, sp, #8
 800e0b0:	60f8      	str	r0, [r7, #12]
 800e0b2:	60b9      	str	r1, [r7, #8]
 800e0b4:	4613      	mov	r3, r2
 800e0b6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d10d      	bne.n	800e0da <xQueueGenericCreate+0x30>
	__asm volatile
 800e0be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0c2:	b672      	cpsid	i
 800e0c4:	f383 8811 	msr	BASEPRI, r3
 800e0c8:	f3bf 8f6f 	isb	sy
 800e0cc:	f3bf 8f4f 	dsb	sy
 800e0d0:	b662      	cpsie	i
 800e0d2:	613b      	str	r3, [r7, #16]
}
 800e0d4:	bf00      	nop
 800e0d6:	bf00      	nop
 800e0d8:	e7fd      	b.n	800e0d6 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d102      	bne.n	800e0e6 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	61fb      	str	r3, [r7, #28]
 800e0e4:	e004      	b.n	800e0f0 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	68ba      	ldr	r2, [r7, #8]
 800e0ea:	fb02 f303 	mul.w	r3, r2, r3
 800e0ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e0f0:	69fb      	ldr	r3, [r7, #28]
 800e0f2:	3350      	adds	r3, #80	@ 0x50
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f002 ff1f 	bl	8010f38 <pvPortMalloc>
 800e0fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e0fc:	69bb      	ldr	r3, [r7, #24]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d011      	beq.n	800e126 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e102:	69bb      	ldr	r3, [r7, #24]
 800e104:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	3350      	adds	r3, #80	@ 0x50
 800e10a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e10c:	69bb      	ldr	r3, [r7, #24]
 800e10e:	2200      	movs	r2, #0
 800e110:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e114:	79fa      	ldrb	r2, [r7, #7]
 800e116:	69bb      	ldr	r3, [r7, #24]
 800e118:	9300      	str	r3, [sp, #0]
 800e11a:	4613      	mov	r3, r2
 800e11c:	697a      	ldr	r2, [r7, #20]
 800e11e:	68b9      	ldr	r1, [r7, #8]
 800e120:	68f8      	ldr	r0, [r7, #12]
 800e122:	f000 f805 	bl	800e130 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e126:	69bb      	ldr	r3, [r7, #24]
	}
 800e128:	4618      	mov	r0, r3
 800e12a:	3720      	adds	r7, #32
 800e12c:	46bd      	mov	sp, r7
 800e12e:	bd80      	pop	{r7, pc}

0800e130 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b084      	sub	sp, #16
 800e134:	af00      	add	r7, sp, #0
 800e136:	60f8      	str	r0, [r7, #12]
 800e138:	60b9      	str	r1, [r7, #8]
 800e13a:	607a      	str	r2, [r7, #4]
 800e13c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e13e:	68bb      	ldr	r3, [r7, #8]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d103      	bne.n	800e14c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e144:	69bb      	ldr	r3, [r7, #24]
 800e146:	69ba      	ldr	r2, [r7, #24]
 800e148:	601a      	str	r2, [r3, #0]
 800e14a:	e002      	b.n	800e152 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e14c:	69bb      	ldr	r3, [r7, #24]
 800e14e:	687a      	ldr	r2, [r7, #4]
 800e150:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e152:	69bb      	ldr	r3, [r7, #24]
 800e154:	68fa      	ldr	r2, [r7, #12]
 800e156:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e158:	69bb      	ldr	r3, [r7, #24]
 800e15a:	68ba      	ldr	r2, [r7, #8]
 800e15c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e15e:	2101      	movs	r1, #1
 800e160:	69b8      	ldr	r0, [r7, #24]
 800e162:	f7ff feaf 	bl	800dec4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e166:	69bb      	ldr	r3, [r7, #24]
 800e168:	78fa      	ldrb	r2, [r7, #3]
 800e16a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e16e:	bf00      	nop
 800e170:	3710      	adds	r7, #16
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}

0800e176 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e176:	b580      	push	{r7, lr}
 800e178:	b082      	sub	sp, #8
 800e17a:	af00      	add	r7, sp, #0
 800e17c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d00e      	beq.n	800e1a2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2200      	movs	r2, #0
 800e188:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	2200      	movs	r2, #0
 800e18e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2200      	movs	r2, #0
 800e194:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e196:	2300      	movs	r3, #0
 800e198:	2200      	movs	r2, #0
 800e19a:	2100      	movs	r1, #0
 800e19c:	6878      	ldr	r0, [r7, #4]
 800e19e:	f000 f91d 	bl	800e3dc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e1a2:	bf00      	nop
 800e1a4:	3708      	adds	r7, #8
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bd80      	pop	{r7, pc}

0800e1aa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e1aa:	b580      	push	{r7, lr}
 800e1ac:	b086      	sub	sp, #24
 800e1ae:	af00      	add	r7, sp, #0
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	617b      	str	r3, [r7, #20]
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e1bc:	79fb      	ldrb	r3, [r7, #7]
 800e1be:	461a      	mov	r2, r3
 800e1c0:	6939      	ldr	r1, [r7, #16]
 800e1c2:	6978      	ldr	r0, [r7, #20]
 800e1c4:	f7ff ff71 	bl	800e0aa <xQueueGenericCreate>
 800e1c8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e1ca:	68f8      	ldr	r0, [r7, #12]
 800e1cc:	f7ff ffd3 	bl	800e176 <prvInitialiseMutex>

		return xNewQueue;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
	}
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	3718      	adds	r7, #24
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	bd80      	pop	{r7, pc}

0800e1da <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800e1da:	b580      	push	{r7, lr}
 800e1dc:	b088      	sub	sp, #32
 800e1de:	af02      	add	r7, sp, #8
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	6039      	str	r1, [r7, #0]
 800e1e4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	617b      	str	r3, [r7, #20]
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e1ee:	79fb      	ldrb	r3, [r7, #7]
 800e1f0:	9300      	str	r3, [sp, #0]
 800e1f2:	683b      	ldr	r3, [r7, #0]
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	6939      	ldr	r1, [r7, #16]
 800e1f8:	6978      	ldr	r0, [r7, #20]
 800e1fa:	f7ff fecf 	bl	800df9c <xQueueGenericCreateStatic>
 800e1fe:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e200:	68f8      	ldr	r0, [r7, #12]
 800e202:	f7ff ffb8 	bl	800e176 <prvInitialiseMutex>

		return xNewQueue;
 800e206:	68fb      	ldr	r3, [r7, #12]
	}
 800e208:	4618      	mov	r0, r3
 800e20a:	3718      	adds	r7, #24
 800e20c:	46bd      	mov	sp, r7
 800e20e:	bd80      	pop	{r7, pc}

0800e210 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800e210:	b590      	push	{r4, r7, lr}
 800e212:	b087      	sub	sp, #28
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e21c:	693b      	ldr	r3, [r7, #16]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d10d      	bne.n	800e23e <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 800e222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e226:	b672      	cpsid	i
 800e228:	f383 8811 	msr	BASEPRI, r3
 800e22c:	f3bf 8f6f 	isb	sy
 800e230:	f3bf 8f4f 	dsb	sy
 800e234:	b662      	cpsie	i
 800e236:	60fb      	str	r3, [r7, #12]
}
 800e238:	bf00      	nop
 800e23a:	bf00      	nop
 800e23c:	e7fd      	b.n	800e23a <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e23e:	693b      	ldr	r3, [r7, #16]
 800e240:	689c      	ldr	r4, [r3, #8]
 800e242:	f001 fea5 	bl	800ff90 <xTaskGetCurrentTaskHandle>
 800e246:	4603      	mov	r3, r0
 800e248:	429c      	cmp	r4, r3
 800e24a:	d111      	bne.n	800e270 <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800e24c:	693b      	ldr	r3, [r7, #16]
 800e24e:	68db      	ldr	r3, [r3, #12]
 800e250:	1e5a      	subs	r2, r3, #1
 800e252:	693b      	ldr	r3, [r7, #16]
 800e254:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800e256:	693b      	ldr	r3, [r7, #16]
 800e258:	68db      	ldr	r3, [r3, #12]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d105      	bne.n	800e26a <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800e25e:	2300      	movs	r3, #0
 800e260:	2200      	movs	r2, #0
 800e262:	2100      	movs	r1, #0
 800e264:	6938      	ldr	r0, [r7, #16]
 800e266:	f000 f8b9 	bl	800e3dc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800e26a:	2301      	movs	r3, #1
 800e26c:	617b      	str	r3, [r7, #20]
 800e26e:	e001      	b.n	800e274 <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800e270:	2300      	movs	r3, #0
 800e272:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800e274:	697b      	ldr	r3, [r7, #20]
	}
 800e276:	4618      	mov	r0, r3
 800e278:	371c      	adds	r7, #28
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd90      	pop	{r4, r7, pc}

0800e27e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800e27e:	b590      	push	{r4, r7, lr}
 800e280:	b087      	sub	sp, #28
 800e282:	af00      	add	r7, sp, #0
 800e284:	6078      	str	r0, [r7, #4]
 800e286:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e28c:	693b      	ldr	r3, [r7, #16]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d10d      	bne.n	800e2ae <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 800e292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e296:	b672      	cpsid	i
 800e298:	f383 8811 	msr	BASEPRI, r3
 800e29c:	f3bf 8f6f 	isb	sy
 800e2a0:	f3bf 8f4f 	dsb	sy
 800e2a4:	b662      	cpsie	i
 800e2a6:	60fb      	str	r3, [r7, #12]
}
 800e2a8:	bf00      	nop
 800e2aa:	bf00      	nop
 800e2ac:	e7fd      	b.n	800e2aa <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e2ae:	693b      	ldr	r3, [r7, #16]
 800e2b0:	689c      	ldr	r4, [r3, #8]
 800e2b2:	f001 fe6d 	bl	800ff90 <xTaskGetCurrentTaskHandle>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	429c      	cmp	r4, r3
 800e2ba:	d107      	bne.n	800e2cc <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e2bc:	693b      	ldr	r3, [r7, #16]
 800e2be:	68db      	ldr	r3, [r3, #12]
 800e2c0:	1c5a      	adds	r2, r3, #1
 800e2c2:	693b      	ldr	r3, [r7, #16]
 800e2c4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	617b      	str	r3, [r7, #20]
 800e2ca:	e00c      	b.n	800e2e6 <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800e2cc:	6839      	ldr	r1, [r7, #0]
 800e2ce:	6938      	ldr	r0, [r7, #16]
 800e2d0:	f000 fbb2 	bl	800ea38 <xQueueSemaphoreTake>
 800e2d4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800e2d6:	697b      	ldr	r3, [r7, #20]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d004      	beq.n	800e2e6 <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e2dc:	693b      	ldr	r3, [r7, #16]
 800e2de:	68db      	ldr	r3, [r3, #12]
 800e2e0:	1c5a      	adds	r2, r3, #1
 800e2e2:	693b      	ldr	r3, [r7, #16]
 800e2e4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800e2e6:	697b      	ldr	r3, [r7, #20]
	}
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	371c      	adds	r7, #28
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	bd90      	pop	{r4, r7, pc}

0800e2f0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b08a      	sub	sp, #40	@ 0x28
 800e2f4:	af02      	add	r7, sp, #8
 800e2f6:	60f8      	str	r0, [r7, #12]
 800e2f8:	60b9      	str	r1, [r7, #8]
 800e2fa:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d10d      	bne.n	800e31e <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 800e302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e306:	b672      	cpsid	i
 800e308:	f383 8811 	msr	BASEPRI, r3
 800e30c:	f3bf 8f6f 	isb	sy
 800e310:	f3bf 8f4f 	dsb	sy
 800e314:	b662      	cpsie	i
 800e316:	61bb      	str	r3, [r7, #24]
}
 800e318:	bf00      	nop
 800e31a:	bf00      	nop
 800e31c:	e7fd      	b.n	800e31a <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e31e:	68ba      	ldr	r2, [r7, #8]
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	429a      	cmp	r2, r3
 800e324:	d90d      	bls.n	800e342 <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 800e326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e32a:	b672      	cpsid	i
 800e32c:	f383 8811 	msr	BASEPRI, r3
 800e330:	f3bf 8f6f 	isb	sy
 800e334:	f3bf 8f4f 	dsb	sy
 800e338:	b662      	cpsie	i
 800e33a:	617b      	str	r3, [r7, #20]
}
 800e33c:	bf00      	nop
 800e33e:	bf00      	nop
 800e340:	e7fd      	b.n	800e33e <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e342:	2302      	movs	r3, #2
 800e344:	9300      	str	r3, [sp, #0]
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	2200      	movs	r2, #0
 800e34a:	2100      	movs	r1, #0
 800e34c:	68f8      	ldr	r0, [r7, #12]
 800e34e:	f7ff fe25 	bl	800df9c <xQueueGenericCreateStatic>
 800e352:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800e354:	69fb      	ldr	r3, [r7, #28]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d002      	beq.n	800e360 <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e35a:	69fb      	ldr	r3, [r7, #28]
 800e35c:	68ba      	ldr	r2, [r7, #8]
 800e35e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e360:	69fb      	ldr	r3, [r7, #28]
	}
 800e362:	4618      	mov	r0, r3
 800e364:	3720      	adds	r7, #32
 800e366:	46bd      	mov	sp, r7
 800e368:	bd80      	pop	{r7, pc}

0800e36a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800e36a:	b580      	push	{r7, lr}
 800e36c:	b086      	sub	sp, #24
 800e36e:	af00      	add	r7, sp, #0
 800e370:	6078      	str	r0, [r7, #4]
 800e372:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d10d      	bne.n	800e396 <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 800e37a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e37e:	b672      	cpsid	i
 800e380:	f383 8811 	msr	BASEPRI, r3
 800e384:	f3bf 8f6f 	isb	sy
 800e388:	f3bf 8f4f 	dsb	sy
 800e38c:	b662      	cpsie	i
 800e38e:	613b      	str	r3, [r7, #16]
}
 800e390:	bf00      	nop
 800e392:	bf00      	nop
 800e394:	e7fd      	b.n	800e392 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e396:	683a      	ldr	r2, [r7, #0]
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	429a      	cmp	r2, r3
 800e39c:	d90d      	bls.n	800e3ba <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 800e39e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3a2:	b672      	cpsid	i
 800e3a4:	f383 8811 	msr	BASEPRI, r3
 800e3a8:	f3bf 8f6f 	isb	sy
 800e3ac:	f3bf 8f4f 	dsb	sy
 800e3b0:	b662      	cpsie	i
 800e3b2:	60fb      	str	r3, [r7, #12]
}
 800e3b4:	bf00      	nop
 800e3b6:	bf00      	nop
 800e3b8:	e7fd      	b.n	800e3b6 <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e3ba:	2202      	movs	r2, #2
 800e3bc:	2100      	movs	r1, #0
 800e3be:	6878      	ldr	r0, [r7, #4]
 800e3c0:	f7ff fe73 	bl	800e0aa <xQueueGenericCreate>
 800e3c4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800e3c6:	697b      	ldr	r3, [r7, #20]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d002      	beq.n	800e3d2 <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e3cc:	697b      	ldr	r3, [r7, #20]
 800e3ce:	683a      	ldr	r2, [r7, #0]
 800e3d0:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e3d2:	697b      	ldr	r3, [r7, #20]
	}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3718      	adds	r7, #24
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}

0800e3dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b08e      	sub	sp, #56	@ 0x38
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	60f8      	str	r0, [r7, #12]
 800e3e4:	60b9      	str	r1, [r7, #8]
 800e3e6:	607a      	str	r2, [r7, #4]
 800e3e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d10d      	bne.n	800e414 <xQueueGenericSend+0x38>
	__asm volatile
 800e3f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3fc:	b672      	cpsid	i
 800e3fe:	f383 8811 	msr	BASEPRI, r3
 800e402:	f3bf 8f6f 	isb	sy
 800e406:	f3bf 8f4f 	dsb	sy
 800e40a:	b662      	cpsie	i
 800e40c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e40e:	bf00      	nop
 800e410:	bf00      	nop
 800e412:	e7fd      	b.n	800e410 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e414:	68bb      	ldr	r3, [r7, #8]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d103      	bne.n	800e422 <xQueueGenericSend+0x46>
 800e41a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e41c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d101      	bne.n	800e426 <xQueueGenericSend+0x4a>
 800e422:	2301      	movs	r3, #1
 800e424:	e000      	b.n	800e428 <xQueueGenericSend+0x4c>
 800e426:	2300      	movs	r3, #0
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d10d      	bne.n	800e448 <xQueueGenericSend+0x6c>
	__asm volatile
 800e42c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e430:	b672      	cpsid	i
 800e432:	f383 8811 	msr	BASEPRI, r3
 800e436:	f3bf 8f6f 	isb	sy
 800e43a:	f3bf 8f4f 	dsb	sy
 800e43e:	b662      	cpsie	i
 800e440:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e442:	bf00      	nop
 800e444:	bf00      	nop
 800e446:	e7fd      	b.n	800e444 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	2b02      	cmp	r3, #2
 800e44c:	d103      	bne.n	800e456 <xQueueGenericSend+0x7a>
 800e44e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e452:	2b01      	cmp	r3, #1
 800e454:	d101      	bne.n	800e45a <xQueueGenericSend+0x7e>
 800e456:	2301      	movs	r3, #1
 800e458:	e000      	b.n	800e45c <xQueueGenericSend+0x80>
 800e45a:	2300      	movs	r3, #0
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d10d      	bne.n	800e47c <xQueueGenericSend+0xa0>
	__asm volatile
 800e460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e464:	b672      	cpsid	i
 800e466:	f383 8811 	msr	BASEPRI, r3
 800e46a:	f3bf 8f6f 	isb	sy
 800e46e:	f3bf 8f4f 	dsb	sy
 800e472:	b662      	cpsie	i
 800e474:	623b      	str	r3, [r7, #32]
}
 800e476:	bf00      	nop
 800e478:	bf00      	nop
 800e47a:	e7fd      	b.n	800e478 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e47c:	f001 fd98 	bl	800ffb0 <xTaskGetSchedulerState>
 800e480:	4603      	mov	r3, r0
 800e482:	2b00      	cmp	r3, #0
 800e484:	d102      	bne.n	800e48c <xQueueGenericSend+0xb0>
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d101      	bne.n	800e490 <xQueueGenericSend+0xb4>
 800e48c:	2301      	movs	r3, #1
 800e48e:	e000      	b.n	800e492 <xQueueGenericSend+0xb6>
 800e490:	2300      	movs	r3, #0
 800e492:	2b00      	cmp	r3, #0
 800e494:	d10d      	bne.n	800e4b2 <xQueueGenericSend+0xd6>
	__asm volatile
 800e496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e49a:	b672      	cpsid	i
 800e49c:	f383 8811 	msr	BASEPRI, r3
 800e4a0:	f3bf 8f6f 	isb	sy
 800e4a4:	f3bf 8f4f 	dsb	sy
 800e4a8:	b662      	cpsie	i
 800e4aa:	61fb      	str	r3, [r7, #28]
}
 800e4ac:	bf00      	nop
 800e4ae:	bf00      	nop
 800e4b0:	e7fd      	b.n	800e4ae <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e4b2:	f002 fc13 	bl	8010cdc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e4b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e4ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e4be:	429a      	cmp	r2, r3
 800e4c0:	d302      	bcc.n	800e4c8 <xQueueGenericSend+0xec>
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	2b02      	cmp	r3, #2
 800e4c6:	d129      	bne.n	800e51c <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e4c8:	683a      	ldr	r2, [r7, #0]
 800e4ca:	68b9      	ldr	r1, [r7, #8]
 800e4cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e4ce:	f000 fcd3 	bl	800ee78 <prvCopyDataToQueue>
 800e4d2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e4d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d010      	beq.n	800e4fe <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e4dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4de:	3324      	adds	r3, #36	@ 0x24
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f001 fb83 	bl	800fbec <xTaskRemoveFromEventList>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d013      	beq.n	800e514 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e4ec:	4b3f      	ldr	r3, [pc, #252]	@ (800e5ec <xQueueGenericSend+0x210>)
 800e4ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e4f2:	601a      	str	r2, [r3, #0]
 800e4f4:	f3bf 8f4f 	dsb	sy
 800e4f8:	f3bf 8f6f 	isb	sy
 800e4fc:	e00a      	b.n	800e514 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e4fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e500:	2b00      	cmp	r3, #0
 800e502:	d007      	beq.n	800e514 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e504:	4b39      	ldr	r3, [pc, #228]	@ (800e5ec <xQueueGenericSend+0x210>)
 800e506:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e50a:	601a      	str	r2, [r3, #0]
 800e50c:	f3bf 8f4f 	dsb	sy
 800e510:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e514:	f002 fc18 	bl	8010d48 <vPortExitCritical>
				return pdPASS;
 800e518:	2301      	movs	r3, #1
 800e51a:	e063      	b.n	800e5e4 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d103      	bne.n	800e52a <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e522:	f002 fc11 	bl	8010d48 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e526:	2300      	movs	r3, #0
 800e528:	e05c      	b.n	800e5e4 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e52a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d106      	bne.n	800e53e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e530:	f107 0314 	add.w	r3, r7, #20
 800e534:	4618      	mov	r0, r3
 800e536:	f001 fc27 	bl	800fd88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e53a:	2301      	movs	r3, #1
 800e53c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e53e:	f002 fc03 	bl	8010d48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e542:	f001 f8a3 	bl	800f68c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e546:	f002 fbc9 	bl	8010cdc <vPortEnterCritical>
 800e54a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e54c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e550:	b25b      	sxtb	r3, r3
 800e552:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e556:	d103      	bne.n	800e560 <xQueueGenericSend+0x184>
 800e558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e55a:	2200      	movs	r2, #0
 800e55c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e562:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e566:	b25b      	sxtb	r3, r3
 800e568:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e56c:	d103      	bne.n	800e576 <xQueueGenericSend+0x19a>
 800e56e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e570:	2200      	movs	r2, #0
 800e572:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e576:	f002 fbe7 	bl	8010d48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e57a:	1d3a      	adds	r2, r7, #4
 800e57c:	f107 0314 	add.w	r3, r7, #20
 800e580:	4611      	mov	r1, r2
 800e582:	4618      	mov	r0, r3
 800e584:	f001 fc16 	bl	800fdb4 <xTaskCheckForTimeOut>
 800e588:	4603      	mov	r3, r0
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d124      	bne.n	800e5d8 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e58e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e590:	f000 fd6a 	bl	800f068 <prvIsQueueFull>
 800e594:	4603      	mov	r3, r0
 800e596:	2b00      	cmp	r3, #0
 800e598:	d018      	beq.n	800e5cc <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e59a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e59c:	3310      	adds	r3, #16
 800e59e:	687a      	ldr	r2, [r7, #4]
 800e5a0:	4611      	mov	r1, r2
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	f001 fa8a 	bl	800fabc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e5a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e5aa:	f000 fcf5 	bl	800ef98 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e5ae:	f001 f87b 	bl	800f6a8 <xTaskResumeAll>
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	f47f af7c 	bne.w	800e4b2 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800e5ba:	4b0c      	ldr	r3, [pc, #48]	@ (800e5ec <xQueueGenericSend+0x210>)
 800e5bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e5c0:	601a      	str	r2, [r3, #0]
 800e5c2:	f3bf 8f4f 	dsb	sy
 800e5c6:	f3bf 8f6f 	isb	sy
 800e5ca:	e772      	b.n	800e4b2 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e5cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e5ce:	f000 fce3 	bl	800ef98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e5d2:	f001 f869 	bl	800f6a8 <xTaskResumeAll>
 800e5d6:	e76c      	b.n	800e4b2 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e5d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e5da:	f000 fcdd 	bl	800ef98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e5de:	f001 f863 	bl	800f6a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e5e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	3738      	adds	r7, #56	@ 0x38
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	bd80      	pop	{r7, pc}
 800e5ec:	e000ed04 	.word	0xe000ed04

0800e5f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b08e      	sub	sp, #56	@ 0x38
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	60f8      	str	r0, [r7, #12]
 800e5f8:	60b9      	str	r1, [r7, #8]
 800e5fa:	607a      	str	r2, [r7, #4]
 800e5fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e604:	2b00      	cmp	r3, #0
 800e606:	d10d      	bne.n	800e624 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800e608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e60c:	b672      	cpsid	i
 800e60e:	f383 8811 	msr	BASEPRI, r3
 800e612:	f3bf 8f6f 	isb	sy
 800e616:	f3bf 8f4f 	dsb	sy
 800e61a:	b662      	cpsie	i
 800e61c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e61e:	bf00      	nop
 800e620:	bf00      	nop
 800e622:	e7fd      	b.n	800e620 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d103      	bne.n	800e632 <xQueueGenericSendFromISR+0x42>
 800e62a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e62c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d101      	bne.n	800e636 <xQueueGenericSendFromISR+0x46>
 800e632:	2301      	movs	r3, #1
 800e634:	e000      	b.n	800e638 <xQueueGenericSendFromISR+0x48>
 800e636:	2300      	movs	r3, #0
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d10d      	bne.n	800e658 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800e63c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e640:	b672      	cpsid	i
 800e642:	f383 8811 	msr	BASEPRI, r3
 800e646:	f3bf 8f6f 	isb	sy
 800e64a:	f3bf 8f4f 	dsb	sy
 800e64e:	b662      	cpsie	i
 800e650:	623b      	str	r3, [r7, #32]
}
 800e652:	bf00      	nop
 800e654:	bf00      	nop
 800e656:	e7fd      	b.n	800e654 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	2b02      	cmp	r3, #2
 800e65c:	d103      	bne.n	800e666 <xQueueGenericSendFromISR+0x76>
 800e65e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e662:	2b01      	cmp	r3, #1
 800e664:	d101      	bne.n	800e66a <xQueueGenericSendFromISR+0x7a>
 800e666:	2301      	movs	r3, #1
 800e668:	e000      	b.n	800e66c <xQueueGenericSendFromISR+0x7c>
 800e66a:	2300      	movs	r3, #0
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d10d      	bne.n	800e68c <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800e670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e674:	b672      	cpsid	i
 800e676:	f383 8811 	msr	BASEPRI, r3
 800e67a:	f3bf 8f6f 	isb	sy
 800e67e:	f3bf 8f4f 	dsb	sy
 800e682:	b662      	cpsie	i
 800e684:	61fb      	str	r3, [r7, #28]
}
 800e686:	bf00      	nop
 800e688:	bf00      	nop
 800e68a:	e7fd      	b.n	800e688 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e68c:	f002 fc0e 	bl	8010eac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e690:	f3ef 8211 	mrs	r2, BASEPRI
 800e694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e698:	b672      	cpsid	i
 800e69a:	f383 8811 	msr	BASEPRI, r3
 800e69e:	f3bf 8f6f 	isb	sy
 800e6a2:	f3bf 8f4f 	dsb	sy
 800e6a6:	b662      	cpsie	i
 800e6a8:	61ba      	str	r2, [r7, #24]
 800e6aa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e6ac:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e6ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e6b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e6b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e6b8:	429a      	cmp	r2, r3
 800e6ba:	d302      	bcc.n	800e6c2 <xQueueGenericSendFromISR+0xd2>
 800e6bc:	683b      	ldr	r3, [r7, #0]
 800e6be:	2b02      	cmp	r3, #2
 800e6c0:	d12c      	bne.n	800e71c <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e6c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e6c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e6cc:	683a      	ldr	r2, [r7, #0]
 800e6ce:	68b9      	ldr	r1, [r7, #8]
 800e6d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e6d2:	f000 fbd1 	bl	800ee78 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e6d6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800e6da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e6de:	d112      	bne.n	800e706 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e6e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d016      	beq.n	800e716 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e6e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6ea:	3324      	adds	r3, #36	@ 0x24
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	f001 fa7d 	bl	800fbec <xTaskRemoveFromEventList>
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d00e      	beq.n	800e716 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d00b      	beq.n	800e716 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2201      	movs	r2, #1
 800e702:	601a      	str	r2, [r3, #0]
 800e704:	e007      	b.n	800e716 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e706:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e70a:	3301      	adds	r3, #1
 800e70c:	b2db      	uxtb	r3, r3
 800e70e:	b25a      	sxtb	r2, r3
 800e710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e712:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e716:	2301      	movs	r3, #1
 800e718:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800e71a:	e001      	b.n	800e720 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e71c:	2300      	movs	r3, #0
 800e71e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e722:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e724:	693b      	ldr	r3, [r7, #16]
 800e726:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e72a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e72c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e72e:	4618      	mov	r0, r3
 800e730:	3738      	adds	r7, #56	@ 0x38
 800e732:	46bd      	mov	sp, r7
 800e734:	bd80      	pop	{r7, pc}

0800e736 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e736:	b580      	push	{r7, lr}
 800e738:	b08e      	sub	sp, #56	@ 0x38
 800e73a:	af00      	add	r7, sp, #0
 800e73c:	6078      	str	r0, [r7, #4]
 800e73e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e746:	2b00      	cmp	r3, #0
 800e748:	d10d      	bne.n	800e766 <xQueueGiveFromISR+0x30>
	__asm volatile
 800e74a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e74e:	b672      	cpsid	i
 800e750:	f383 8811 	msr	BASEPRI, r3
 800e754:	f3bf 8f6f 	isb	sy
 800e758:	f3bf 8f4f 	dsb	sy
 800e75c:	b662      	cpsie	i
 800e75e:	623b      	str	r3, [r7, #32]
}
 800e760:	bf00      	nop
 800e762:	bf00      	nop
 800e764:	e7fd      	b.n	800e762 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d00d      	beq.n	800e78a <xQueueGiveFromISR+0x54>
	__asm volatile
 800e76e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e772:	b672      	cpsid	i
 800e774:	f383 8811 	msr	BASEPRI, r3
 800e778:	f3bf 8f6f 	isb	sy
 800e77c:	f3bf 8f4f 	dsb	sy
 800e780:	b662      	cpsie	i
 800e782:	61fb      	str	r3, [r7, #28]
}
 800e784:	bf00      	nop
 800e786:	bf00      	nop
 800e788:	e7fd      	b.n	800e786 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e78a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d103      	bne.n	800e79a <xQueueGiveFromISR+0x64>
 800e792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e794:	689b      	ldr	r3, [r3, #8]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d101      	bne.n	800e79e <xQueueGiveFromISR+0x68>
 800e79a:	2301      	movs	r3, #1
 800e79c:	e000      	b.n	800e7a0 <xQueueGiveFromISR+0x6a>
 800e79e:	2300      	movs	r3, #0
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d10d      	bne.n	800e7c0 <xQueueGiveFromISR+0x8a>
	__asm volatile
 800e7a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7a8:	b672      	cpsid	i
 800e7aa:	f383 8811 	msr	BASEPRI, r3
 800e7ae:	f3bf 8f6f 	isb	sy
 800e7b2:	f3bf 8f4f 	dsb	sy
 800e7b6:	b662      	cpsie	i
 800e7b8:	61bb      	str	r3, [r7, #24]
}
 800e7ba:	bf00      	nop
 800e7bc:	bf00      	nop
 800e7be:	e7fd      	b.n	800e7bc <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e7c0:	f002 fb74 	bl	8010eac <vPortValidateInterruptPriority>
	__asm volatile
 800e7c4:	f3ef 8211 	mrs	r2, BASEPRI
 800e7c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7cc:	b672      	cpsid	i
 800e7ce:	f383 8811 	msr	BASEPRI, r3
 800e7d2:	f3bf 8f6f 	isb	sy
 800e7d6:	f3bf 8f4f 	dsb	sy
 800e7da:	b662      	cpsie	i
 800e7dc:	617a      	str	r2, [r7, #20]
 800e7de:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e7e0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e7e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e7e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7e8:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e7ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e7ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e7f0:	429a      	cmp	r2, r3
 800e7f2:	d22b      	bcs.n	800e84c <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e7f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e7fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e7fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e800:	1c5a      	adds	r2, r3, #1
 800e802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e804:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e806:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e80a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e80e:	d112      	bne.n	800e836 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e814:	2b00      	cmp	r3, #0
 800e816:	d016      	beq.n	800e846 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e81a:	3324      	adds	r3, #36	@ 0x24
 800e81c:	4618      	mov	r0, r3
 800e81e:	f001 f9e5 	bl	800fbec <xTaskRemoveFromEventList>
 800e822:	4603      	mov	r3, r0
 800e824:	2b00      	cmp	r3, #0
 800e826:	d00e      	beq.n	800e846 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d00b      	beq.n	800e846 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	2201      	movs	r2, #1
 800e832:	601a      	str	r2, [r3, #0]
 800e834:	e007      	b.n	800e846 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e836:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e83a:	3301      	adds	r3, #1
 800e83c:	b2db      	uxtb	r3, r3
 800e83e:	b25a      	sxtb	r2, r3
 800e840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e842:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e846:	2301      	movs	r3, #1
 800e848:	637b      	str	r3, [r7, #52]	@ 0x34
 800e84a:	e001      	b.n	800e850 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e84c:	2300      	movs	r3, #0
 800e84e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e852:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	f383 8811 	msr	BASEPRI, r3
}
 800e85a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e85c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e85e:	4618      	mov	r0, r3
 800e860:	3738      	adds	r7, #56	@ 0x38
 800e862:	46bd      	mov	sp, r7
 800e864:	bd80      	pop	{r7, pc}
	...

0800e868 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b08c      	sub	sp, #48	@ 0x30
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	60f8      	str	r0, [r7, #12]
 800e870:	60b9      	str	r1, [r7, #8]
 800e872:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e874:	2300      	movs	r3, #0
 800e876:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e87c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d10d      	bne.n	800e89e <xQueueReceive+0x36>
	__asm volatile
 800e882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e886:	b672      	cpsid	i
 800e888:	f383 8811 	msr	BASEPRI, r3
 800e88c:	f3bf 8f6f 	isb	sy
 800e890:	f3bf 8f4f 	dsb	sy
 800e894:	b662      	cpsie	i
 800e896:	623b      	str	r3, [r7, #32]
}
 800e898:	bf00      	nop
 800e89a:	bf00      	nop
 800e89c:	e7fd      	b.n	800e89a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e89e:	68bb      	ldr	r3, [r7, #8]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d103      	bne.n	800e8ac <xQueueReceive+0x44>
 800e8a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d101      	bne.n	800e8b0 <xQueueReceive+0x48>
 800e8ac:	2301      	movs	r3, #1
 800e8ae:	e000      	b.n	800e8b2 <xQueueReceive+0x4a>
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d10d      	bne.n	800e8d2 <xQueueReceive+0x6a>
	__asm volatile
 800e8b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8ba:	b672      	cpsid	i
 800e8bc:	f383 8811 	msr	BASEPRI, r3
 800e8c0:	f3bf 8f6f 	isb	sy
 800e8c4:	f3bf 8f4f 	dsb	sy
 800e8c8:	b662      	cpsie	i
 800e8ca:	61fb      	str	r3, [r7, #28]
}
 800e8cc:	bf00      	nop
 800e8ce:	bf00      	nop
 800e8d0:	e7fd      	b.n	800e8ce <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e8d2:	f001 fb6d 	bl	800ffb0 <xTaskGetSchedulerState>
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d102      	bne.n	800e8e2 <xQueueReceive+0x7a>
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d101      	bne.n	800e8e6 <xQueueReceive+0x7e>
 800e8e2:	2301      	movs	r3, #1
 800e8e4:	e000      	b.n	800e8e8 <xQueueReceive+0x80>
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d10d      	bne.n	800e908 <xQueueReceive+0xa0>
	__asm volatile
 800e8ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8f0:	b672      	cpsid	i
 800e8f2:	f383 8811 	msr	BASEPRI, r3
 800e8f6:	f3bf 8f6f 	isb	sy
 800e8fa:	f3bf 8f4f 	dsb	sy
 800e8fe:	b662      	cpsie	i
 800e900:	61bb      	str	r3, [r7, #24]
}
 800e902:	bf00      	nop
 800e904:	bf00      	nop
 800e906:	e7fd      	b.n	800e904 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e908:	f002 f9e8 	bl	8010cdc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e90c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e90e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e910:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e914:	2b00      	cmp	r3, #0
 800e916:	d01f      	beq.n	800e958 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e918:	68b9      	ldr	r1, [r7, #8]
 800e91a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e91c:	f000 fb16 	bl	800ef4c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e922:	1e5a      	subs	r2, r3, #1
 800e924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e926:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e92a:	691b      	ldr	r3, [r3, #16]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d00f      	beq.n	800e950 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e932:	3310      	adds	r3, #16
 800e934:	4618      	mov	r0, r3
 800e936:	f001 f959 	bl	800fbec <xTaskRemoveFromEventList>
 800e93a:	4603      	mov	r3, r0
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d007      	beq.n	800e950 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e940:	4b3c      	ldr	r3, [pc, #240]	@ (800ea34 <xQueueReceive+0x1cc>)
 800e942:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e946:	601a      	str	r2, [r3, #0]
 800e948:	f3bf 8f4f 	dsb	sy
 800e94c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e950:	f002 f9fa 	bl	8010d48 <vPortExitCritical>
				return pdPASS;
 800e954:	2301      	movs	r3, #1
 800e956:	e069      	b.n	800ea2c <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d103      	bne.n	800e966 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e95e:	f002 f9f3 	bl	8010d48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e962:	2300      	movs	r3, #0
 800e964:	e062      	b.n	800ea2c <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d106      	bne.n	800e97a <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e96c:	f107 0310 	add.w	r3, r7, #16
 800e970:	4618      	mov	r0, r3
 800e972:	f001 fa09 	bl	800fd88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e976:	2301      	movs	r3, #1
 800e978:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e97a:	f002 f9e5 	bl	8010d48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e97e:	f000 fe85 	bl	800f68c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e982:	f002 f9ab 	bl	8010cdc <vPortEnterCritical>
 800e986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e988:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e98c:	b25b      	sxtb	r3, r3
 800e98e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e992:	d103      	bne.n	800e99c <xQueueReceive+0x134>
 800e994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e996:	2200      	movs	r2, #0
 800e998:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e99c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e99e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e9a2:	b25b      	sxtb	r3, r3
 800e9a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e9a8:	d103      	bne.n	800e9b2 <xQueueReceive+0x14a>
 800e9aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e9b2:	f002 f9c9 	bl	8010d48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e9b6:	1d3a      	adds	r2, r7, #4
 800e9b8:	f107 0310 	add.w	r3, r7, #16
 800e9bc:	4611      	mov	r1, r2
 800e9be:	4618      	mov	r0, r3
 800e9c0:	f001 f9f8 	bl	800fdb4 <xTaskCheckForTimeOut>
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d123      	bne.n	800ea12 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e9ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e9cc:	f000 fb36 	bl	800f03c <prvIsQueueEmpty>
 800e9d0:	4603      	mov	r3, r0
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d017      	beq.n	800ea06 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e9d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9d8:	3324      	adds	r3, #36	@ 0x24
 800e9da:	687a      	ldr	r2, [r7, #4]
 800e9dc:	4611      	mov	r1, r2
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f001 f86c 	bl	800fabc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e9e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e9e6:	f000 fad7 	bl	800ef98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e9ea:	f000 fe5d 	bl	800f6a8 <xTaskResumeAll>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d189      	bne.n	800e908 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800e9f4:	4b0f      	ldr	r3, [pc, #60]	@ (800ea34 <xQueueReceive+0x1cc>)
 800e9f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e9fa:	601a      	str	r2, [r3, #0]
 800e9fc:	f3bf 8f4f 	dsb	sy
 800ea00:	f3bf 8f6f 	isb	sy
 800ea04:	e780      	b.n	800e908 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ea06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ea08:	f000 fac6 	bl	800ef98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ea0c:	f000 fe4c 	bl	800f6a8 <xTaskResumeAll>
 800ea10:	e77a      	b.n	800e908 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ea12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ea14:	f000 fac0 	bl	800ef98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ea18:	f000 fe46 	bl	800f6a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ea1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ea1e:	f000 fb0d 	bl	800f03c <prvIsQueueEmpty>
 800ea22:	4603      	mov	r3, r0
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	f43f af6f 	beq.w	800e908 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ea2a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	3730      	adds	r7, #48	@ 0x30
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd80      	pop	{r7, pc}
 800ea34:	e000ed04 	.word	0xe000ed04

0800ea38 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b08e      	sub	sp, #56	@ 0x38
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
 800ea40:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ea42:	2300      	movs	r3, #0
 800ea44:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ea4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d10d      	bne.n	800ea70 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800ea54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea58:	b672      	cpsid	i
 800ea5a:	f383 8811 	msr	BASEPRI, r3
 800ea5e:	f3bf 8f6f 	isb	sy
 800ea62:	f3bf 8f4f 	dsb	sy
 800ea66:	b662      	cpsie	i
 800ea68:	623b      	str	r3, [r7, #32]
}
 800ea6a:	bf00      	nop
 800ea6c:	bf00      	nop
 800ea6e:	e7fd      	b.n	800ea6c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ea70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d00d      	beq.n	800ea94 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800ea78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea7c:	b672      	cpsid	i
 800ea7e:	f383 8811 	msr	BASEPRI, r3
 800ea82:	f3bf 8f6f 	isb	sy
 800ea86:	f3bf 8f4f 	dsb	sy
 800ea8a:	b662      	cpsie	i
 800ea8c:	61fb      	str	r3, [r7, #28]
}
 800ea8e:	bf00      	nop
 800ea90:	bf00      	nop
 800ea92:	e7fd      	b.n	800ea90 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ea94:	f001 fa8c 	bl	800ffb0 <xTaskGetSchedulerState>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d102      	bne.n	800eaa4 <xQueueSemaphoreTake+0x6c>
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d101      	bne.n	800eaa8 <xQueueSemaphoreTake+0x70>
 800eaa4:	2301      	movs	r3, #1
 800eaa6:	e000      	b.n	800eaaa <xQueueSemaphoreTake+0x72>
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d10d      	bne.n	800eaca <xQueueSemaphoreTake+0x92>
	__asm volatile
 800eaae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eab2:	b672      	cpsid	i
 800eab4:	f383 8811 	msr	BASEPRI, r3
 800eab8:	f3bf 8f6f 	isb	sy
 800eabc:	f3bf 8f4f 	dsb	sy
 800eac0:	b662      	cpsie	i
 800eac2:	61bb      	str	r3, [r7, #24]
}
 800eac4:	bf00      	nop
 800eac6:	bf00      	nop
 800eac8:	e7fd      	b.n	800eac6 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eaca:	f002 f907 	bl	8010cdc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800eace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ead0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ead2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ead4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d024      	beq.n	800eb24 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800eada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eadc:	1e5a      	subs	r2, r3, #1
 800eade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eae0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d104      	bne.n	800eaf4 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800eaea:	f001 fbfb 	bl	80102e4 <pvTaskIncrementMutexHeldCount>
 800eaee:	4602      	mov	r2, r0
 800eaf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaf2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eaf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaf6:	691b      	ldr	r3, [r3, #16]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d00f      	beq.n	800eb1c <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eafc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eafe:	3310      	adds	r3, #16
 800eb00:	4618      	mov	r0, r3
 800eb02:	f001 f873 	bl	800fbec <xTaskRemoveFromEventList>
 800eb06:	4603      	mov	r3, r0
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d007      	beq.n	800eb1c <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800eb0c:	4b55      	ldr	r3, [pc, #340]	@ (800ec64 <xQueueSemaphoreTake+0x22c>)
 800eb0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb12:	601a      	str	r2, [r3, #0]
 800eb14:	f3bf 8f4f 	dsb	sy
 800eb18:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800eb1c:	f002 f914 	bl	8010d48 <vPortExitCritical>
				return pdPASS;
 800eb20:	2301      	movs	r3, #1
 800eb22:	e09a      	b.n	800ec5a <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d114      	bne.n	800eb54 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800eb2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d00d      	beq.n	800eb4c <xQueueSemaphoreTake+0x114>
	__asm volatile
 800eb30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb34:	b672      	cpsid	i
 800eb36:	f383 8811 	msr	BASEPRI, r3
 800eb3a:	f3bf 8f6f 	isb	sy
 800eb3e:	f3bf 8f4f 	dsb	sy
 800eb42:	b662      	cpsie	i
 800eb44:	617b      	str	r3, [r7, #20]
}
 800eb46:	bf00      	nop
 800eb48:	bf00      	nop
 800eb4a:	e7fd      	b.n	800eb48 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800eb4c:	f002 f8fc 	bl	8010d48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800eb50:	2300      	movs	r3, #0
 800eb52:	e082      	b.n	800ec5a <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eb54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d106      	bne.n	800eb68 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eb5a:	f107 030c 	add.w	r3, r7, #12
 800eb5e:	4618      	mov	r0, r3
 800eb60:	f001 f912 	bl	800fd88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eb64:	2301      	movs	r3, #1
 800eb66:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eb68:	f002 f8ee 	bl	8010d48 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eb6c:	f000 fd8e 	bl	800f68c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eb70:	f002 f8b4 	bl	8010cdc <vPortEnterCritical>
 800eb74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb76:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800eb7a:	b25b      	sxtb	r3, r3
 800eb7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eb80:	d103      	bne.n	800eb8a <xQueueSemaphoreTake+0x152>
 800eb82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb84:	2200      	movs	r2, #0
 800eb86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eb8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800eb90:	b25b      	sxtb	r3, r3
 800eb92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eb96:	d103      	bne.n	800eba0 <xQueueSemaphoreTake+0x168>
 800eb98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800eba0:	f002 f8d2 	bl	8010d48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eba4:	463a      	mov	r2, r7
 800eba6:	f107 030c 	add.w	r3, r7, #12
 800ebaa:	4611      	mov	r1, r2
 800ebac:	4618      	mov	r0, r3
 800ebae:	f001 f901 	bl	800fdb4 <xTaskCheckForTimeOut>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d132      	bne.n	800ec1e <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ebb8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ebba:	f000 fa3f 	bl	800f03c <prvIsQueueEmpty>
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d026      	beq.n	800ec12 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ebc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d109      	bne.n	800ebe0 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800ebcc:	f002 f886 	bl	8010cdc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ebd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebd2:	689b      	ldr	r3, [r3, #8]
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	f001 fa09 	bl	800ffec <xTaskPriorityInherit>
 800ebda:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800ebdc:	f002 f8b4 	bl	8010d48 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ebe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebe2:	3324      	adds	r3, #36	@ 0x24
 800ebe4:	683a      	ldr	r2, [r7, #0]
 800ebe6:	4611      	mov	r1, r2
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f000 ff67 	bl	800fabc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ebee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ebf0:	f000 f9d2 	bl	800ef98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ebf4:	f000 fd58 	bl	800f6a8 <xTaskResumeAll>
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	f47f af65 	bne.w	800eaca <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800ec00:	4b18      	ldr	r3, [pc, #96]	@ (800ec64 <xQueueSemaphoreTake+0x22c>)
 800ec02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ec06:	601a      	str	r2, [r3, #0]
 800ec08:	f3bf 8f4f 	dsb	sy
 800ec0c:	f3bf 8f6f 	isb	sy
 800ec10:	e75b      	b.n	800eaca <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ec12:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec14:	f000 f9c0 	bl	800ef98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ec18:	f000 fd46 	bl	800f6a8 <xTaskResumeAll>
 800ec1c:	e755      	b.n	800eaca <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ec1e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec20:	f000 f9ba 	bl	800ef98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ec24:	f000 fd40 	bl	800f6a8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ec28:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec2a:	f000 fa07 	bl	800f03c <prvIsQueueEmpty>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	f43f af4a 	beq.w	800eaca <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ec36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d00d      	beq.n	800ec58 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800ec3c:	f002 f84e 	bl	8010cdc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ec40:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec42:	f000 f901 	bl	800ee48 <prvGetDisinheritPriorityAfterTimeout>
 800ec46:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ec48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec4a:	689b      	ldr	r3, [r3, #8]
 800ec4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f001 faa8 	bl	80101a4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ec54:	f002 f878 	bl	8010d48 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ec58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	3738      	adds	r7, #56	@ 0x38
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}
 800ec62:	bf00      	nop
 800ec64:	e000ed04 	.word	0xe000ed04

0800ec68 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b08e      	sub	sp, #56	@ 0x38
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	60f8      	str	r0, [r7, #12]
 800ec70:	60b9      	str	r1, [r7, #8]
 800ec72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ec78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d10d      	bne.n	800ec9a <xQueueReceiveFromISR+0x32>
	__asm volatile
 800ec7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec82:	b672      	cpsid	i
 800ec84:	f383 8811 	msr	BASEPRI, r3
 800ec88:	f3bf 8f6f 	isb	sy
 800ec8c:	f3bf 8f4f 	dsb	sy
 800ec90:	b662      	cpsie	i
 800ec92:	623b      	str	r3, [r7, #32]
}
 800ec94:	bf00      	nop
 800ec96:	bf00      	nop
 800ec98:	e7fd      	b.n	800ec96 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ec9a:	68bb      	ldr	r3, [r7, #8]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d103      	bne.n	800eca8 <xQueueReceiveFromISR+0x40>
 800eca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d101      	bne.n	800ecac <xQueueReceiveFromISR+0x44>
 800eca8:	2301      	movs	r3, #1
 800ecaa:	e000      	b.n	800ecae <xQueueReceiveFromISR+0x46>
 800ecac:	2300      	movs	r3, #0
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d10d      	bne.n	800ecce <xQueueReceiveFromISR+0x66>
	__asm volatile
 800ecb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecb6:	b672      	cpsid	i
 800ecb8:	f383 8811 	msr	BASEPRI, r3
 800ecbc:	f3bf 8f6f 	isb	sy
 800ecc0:	f3bf 8f4f 	dsb	sy
 800ecc4:	b662      	cpsie	i
 800ecc6:	61fb      	str	r3, [r7, #28]
}
 800ecc8:	bf00      	nop
 800ecca:	bf00      	nop
 800eccc:	e7fd      	b.n	800ecca <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ecce:	f002 f8ed 	bl	8010eac <vPortValidateInterruptPriority>
	__asm volatile
 800ecd2:	f3ef 8211 	mrs	r2, BASEPRI
 800ecd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecda:	b672      	cpsid	i
 800ecdc:	f383 8811 	msr	BASEPRI, r3
 800ece0:	f3bf 8f6f 	isb	sy
 800ece4:	f3bf 8f4f 	dsb	sy
 800ece8:	b662      	cpsie	i
 800ecea:	61ba      	str	r2, [r7, #24]
 800ecec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ecee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ecf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ecf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ecf6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ecf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d02f      	beq.n	800ed5e <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ecfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ed04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ed08:	68b9      	ldr	r1, [r7, #8]
 800ed0a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ed0c:	f000 f91e 	bl	800ef4c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ed10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed12:	1e5a      	subs	r2, r3, #1
 800ed14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed16:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ed18:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ed1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ed20:	d112      	bne.n	800ed48 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ed22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed24:	691b      	ldr	r3, [r3, #16]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d016      	beq.n	800ed58 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ed2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed2c:	3310      	adds	r3, #16
 800ed2e:	4618      	mov	r0, r3
 800ed30:	f000 ff5c 	bl	800fbec <xTaskRemoveFromEventList>
 800ed34:	4603      	mov	r3, r0
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d00e      	beq.n	800ed58 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d00b      	beq.n	800ed58 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2201      	movs	r2, #1
 800ed44:	601a      	str	r2, [r3, #0]
 800ed46:	e007      	b.n	800ed58 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ed48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ed4c:	3301      	adds	r3, #1
 800ed4e:	b2db      	uxtb	r3, r3
 800ed50:	b25a      	sxtb	r2, r3
 800ed52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800ed58:	2301      	movs	r3, #1
 800ed5a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed5c:	e001      	b.n	800ed62 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800ed5e:	2300      	movs	r3, #0
 800ed60:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed64:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ed66:	693b      	ldr	r3, [r7, #16]
 800ed68:	f383 8811 	msr	BASEPRI, r3
}
 800ed6c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ed6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ed70:	4618      	mov	r0, r3
 800ed72:	3738      	adds	r7, #56	@ 0x38
 800ed74:	46bd      	mov	sp, r7
 800ed76:	bd80      	pop	{r7, pc}

0800ed78 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b084      	sub	sp, #16
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d10d      	bne.n	800eda2 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 800ed86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed8a:	b672      	cpsid	i
 800ed8c:	f383 8811 	msr	BASEPRI, r3
 800ed90:	f3bf 8f6f 	isb	sy
 800ed94:	f3bf 8f4f 	dsb	sy
 800ed98:	b662      	cpsie	i
 800ed9a:	60bb      	str	r3, [r7, #8]
}
 800ed9c:	bf00      	nop
 800ed9e:	bf00      	nop
 800eda0:	e7fd      	b.n	800ed9e <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800eda2:	f001 ff9b 	bl	8010cdc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edaa:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800edac:	f001 ffcc 	bl	8010d48 <vPortExitCritical>

	return uxReturn;
 800edb0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800edb2:	4618      	mov	r0, r3
 800edb4:	3710      	adds	r7, #16
 800edb6:	46bd      	mov	sp, r7
 800edb8:	bd80      	pop	{r7, pc}

0800edba <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800edba:	b480      	push	{r7}
 800edbc:	b087      	sub	sp, #28
 800edbe:	af00      	add	r7, sp, #0
 800edc0:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800edc6:	697b      	ldr	r3, [r7, #20]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d10d      	bne.n	800ede8 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 800edcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edd0:	b672      	cpsid	i
 800edd2:	f383 8811 	msr	BASEPRI, r3
 800edd6:	f3bf 8f6f 	isb	sy
 800edda:	f3bf 8f4f 	dsb	sy
 800edde:	b662      	cpsie	i
 800ede0:	60fb      	str	r3, [r7, #12]
}
 800ede2:	bf00      	nop
 800ede4:	bf00      	nop
 800ede6:	e7fd      	b.n	800ede4 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800ede8:	697b      	ldr	r3, [r7, #20]
 800edea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edec:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800edee:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800edf0:	4618      	mov	r0, r3
 800edf2:	371c      	adds	r7, #28
 800edf4:	46bd      	mov	sp, r7
 800edf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfa:	4770      	bx	lr

0800edfc <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b084      	sub	sp, #16
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d10d      	bne.n	800ee2a <vQueueDelete+0x2e>
	__asm volatile
 800ee0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee12:	b672      	cpsid	i
 800ee14:	f383 8811 	msr	BASEPRI, r3
 800ee18:	f3bf 8f6f 	isb	sy
 800ee1c:	f3bf 8f4f 	dsb	sy
 800ee20:	b662      	cpsie	i
 800ee22:	60bb      	str	r3, [r7, #8]
}
 800ee24:	bf00      	nop
 800ee26:	bf00      	nop
 800ee28:	e7fd      	b.n	800ee26 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ee2a:	68f8      	ldr	r0, [r7, #12]
 800ee2c:	f000 f95e 	bl	800f0ec <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d102      	bne.n	800ee40 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 800ee3a:	68f8      	ldr	r0, [r7, #12]
 800ee3c:	f002 f94e 	bl	80110dc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ee40:	bf00      	nop
 800ee42:	3710      	adds	r7, #16
 800ee44:	46bd      	mov	sp, r7
 800ee46:	bd80      	pop	{r7, pc}

0800ee48 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ee48:	b480      	push	{r7}
 800ee4a:	b085      	sub	sp, #20
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d006      	beq.n	800ee66 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800ee62:	60fb      	str	r3, [r7, #12]
 800ee64:	e001      	b.n	800ee6a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ee66:	2300      	movs	r3, #0
 800ee68:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ee6a:	68fb      	ldr	r3, [r7, #12]
	}
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	3714      	adds	r7, #20
 800ee70:	46bd      	mov	sp, r7
 800ee72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee76:	4770      	bx	lr

0800ee78 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b086      	sub	sp, #24
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	60f8      	str	r0, [r7, #12]
 800ee80:	60b9      	str	r1, [r7, #8]
 800ee82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ee84:	2300      	movs	r3, #0
 800ee86:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee8c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d10d      	bne.n	800eeb2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d14d      	bne.n	800ef3a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	689b      	ldr	r3, [r3, #8]
 800eea2:	4618      	mov	r0, r3
 800eea4:	f001 f90a 	bl	80100bc <xTaskPriorityDisinherit>
 800eea8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	2200      	movs	r2, #0
 800eeae:	609a      	str	r2, [r3, #8]
 800eeb0:	e043      	b.n	800ef3a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d119      	bne.n	800eeec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	6858      	ldr	r0, [r3, #4]
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eec0:	461a      	mov	r2, r3
 800eec2:	68b9      	ldr	r1, [r7, #8]
 800eec4:	f012 fb23 	bl	802150e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	685a      	ldr	r2, [r3, #4]
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eed0:	441a      	add	r2, r3
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	685a      	ldr	r2, [r3, #4]
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	689b      	ldr	r3, [r3, #8]
 800eede:	429a      	cmp	r2, r3
 800eee0:	d32b      	bcc.n	800ef3a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	681a      	ldr	r2, [r3, #0]
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	605a      	str	r2, [r3, #4]
 800eeea:	e026      	b.n	800ef3a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	68d8      	ldr	r0, [r3, #12]
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eef4:	461a      	mov	r2, r3
 800eef6:	68b9      	ldr	r1, [r7, #8]
 800eef8:	f012 fb09 	bl	802150e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	68da      	ldr	r2, [r3, #12]
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef04:	425b      	negs	r3, r3
 800ef06:	441a      	add	r2, r3
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	68da      	ldr	r2, [r3, #12]
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	429a      	cmp	r2, r3
 800ef16:	d207      	bcs.n	800ef28 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	689a      	ldr	r2, [r3, #8]
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef20:	425b      	negs	r3, r3
 800ef22:	441a      	add	r2, r3
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2b02      	cmp	r3, #2
 800ef2c:	d105      	bne.n	800ef3a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ef2e:	693b      	ldr	r3, [r7, #16]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d002      	beq.n	800ef3a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ef34:	693b      	ldr	r3, [r7, #16]
 800ef36:	3b01      	subs	r3, #1
 800ef38:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ef3a:	693b      	ldr	r3, [r7, #16]
 800ef3c:	1c5a      	adds	r2, r3, #1
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ef42:	697b      	ldr	r3, [r7, #20]
}
 800ef44:	4618      	mov	r0, r3
 800ef46:	3718      	adds	r7, #24
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}

0800ef4c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b082      	sub	sp, #8
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
 800ef54:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d018      	beq.n	800ef90 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	68da      	ldr	r2, [r3, #12]
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef66:	441a      	add	r2, r3
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	68da      	ldr	r2, [r3, #12]
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	689b      	ldr	r3, [r3, #8]
 800ef74:	429a      	cmp	r2, r3
 800ef76:	d303      	bcc.n	800ef80 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	681a      	ldr	r2, [r3, #0]
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	68d9      	ldr	r1, [r3, #12]
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef88:	461a      	mov	r2, r3
 800ef8a:	6838      	ldr	r0, [r7, #0]
 800ef8c:	f012 fabf 	bl	802150e <memcpy>
	}
}
 800ef90:	bf00      	nop
 800ef92:	3708      	adds	r7, #8
 800ef94:	46bd      	mov	sp, r7
 800ef96:	bd80      	pop	{r7, pc}

0800ef98 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b084      	sub	sp, #16
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800efa0:	f001 fe9c 	bl	8010cdc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800efaa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800efac:	e011      	b.n	800efd2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d012      	beq.n	800efdc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	3324      	adds	r3, #36	@ 0x24
 800efba:	4618      	mov	r0, r3
 800efbc:	f000 fe16 	bl	800fbec <xTaskRemoveFromEventList>
 800efc0:	4603      	mov	r3, r0
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d001      	beq.n	800efca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800efc6:	f000 ff5d 	bl	800fe84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800efca:	7bfb      	ldrb	r3, [r7, #15]
 800efcc:	3b01      	subs	r3, #1
 800efce:	b2db      	uxtb	r3, r3
 800efd0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800efd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	dce9      	bgt.n	800efae <prvUnlockQueue+0x16>
 800efda:	e000      	b.n	800efde <prvUnlockQueue+0x46>
					break;
 800efdc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	22ff      	movs	r2, #255	@ 0xff
 800efe2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800efe6:	f001 feaf 	bl	8010d48 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800efea:	f001 fe77 	bl	8010cdc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800eff4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800eff6:	e011      	b.n	800f01c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	691b      	ldr	r3, [r3, #16]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d012      	beq.n	800f026 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	3310      	adds	r3, #16
 800f004:	4618      	mov	r0, r3
 800f006:	f000 fdf1 	bl	800fbec <xTaskRemoveFromEventList>
 800f00a:	4603      	mov	r3, r0
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d001      	beq.n	800f014 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f010:	f000 ff38 	bl	800fe84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f014:	7bbb      	ldrb	r3, [r7, #14]
 800f016:	3b01      	subs	r3, #1
 800f018:	b2db      	uxtb	r3, r3
 800f01a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f01c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f020:	2b00      	cmp	r3, #0
 800f022:	dce9      	bgt.n	800eff8 <prvUnlockQueue+0x60>
 800f024:	e000      	b.n	800f028 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f026:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	22ff      	movs	r2, #255	@ 0xff
 800f02c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800f030:	f001 fe8a 	bl	8010d48 <vPortExitCritical>
}
 800f034:	bf00      	nop
 800f036:	3710      	adds	r7, #16
 800f038:	46bd      	mov	sp, r7
 800f03a:	bd80      	pop	{r7, pc}

0800f03c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b084      	sub	sp, #16
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f044:	f001 fe4a 	bl	8010cdc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d102      	bne.n	800f056 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f050:	2301      	movs	r3, #1
 800f052:	60fb      	str	r3, [r7, #12]
 800f054:	e001      	b.n	800f05a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f056:	2300      	movs	r3, #0
 800f058:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f05a:	f001 fe75 	bl	8010d48 <vPortExitCritical>

	return xReturn;
 800f05e:	68fb      	ldr	r3, [r7, #12]
}
 800f060:	4618      	mov	r0, r3
 800f062:	3710      	adds	r7, #16
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}

0800f068 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b084      	sub	sp, #16
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f070:	f001 fe34 	bl	8010cdc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d102      	bne.n	800f086 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f080:	2301      	movs	r3, #1
 800f082:	60fb      	str	r3, [r7, #12]
 800f084:	e001      	b.n	800f08a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f086:	2300      	movs	r3, #0
 800f088:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f08a:	f001 fe5d 	bl	8010d48 <vPortExitCritical>

	return xReturn;
 800f08e:	68fb      	ldr	r3, [r7, #12]
}
 800f090:	4618      	mov	r0, r3
 800f092:	3710      	adds	r7, #16
 800f094:	46bd      	mov	sp, r7
 800f096:	bd80      	pop	{r7, pc}

0800f098 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f098:	b480      	push	{r7}
 800f09a:	b085      	sub	sp, #20
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
 800f0a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	60fb      	str	r3, [r7, #12]
 800f0a6:	e014      	b.n	800f0d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f0a8:	4a0f      	ldr	r2, [pc, #60]	@ (800f0e8 <vQueueAddToRegistry+0x50>)
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d10b      	bne.n	800f0cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f0b4:	490c      	ldr	r1, [pc, #48]	@ (800f0e8 <vQueueAddToRegistry+0x50>)
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	683a      	ldr	r2, [r7, #0]
 800f0ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f0be:	4a0a      	ldr	r2, [pc, #40]	@ (800f0e8 <vQueueAddToRegistry+0x50>)
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	00db      	lsls	r3, r3, #3
 800f0c4:	4413      	add	r3, r2
 800f0c6:	687a      	ldr	r2, [r7, #4]
 800f0c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f0ca:	e006      	b.n	800f0da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	3301      	adds	r3, #1
 800f0d0:	60fb      	str	r3, [r7, #12]
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	2b0b      	cmp	r3, #11
 800f0d6:	d9e7      	bls.n	800f0a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f0d8:	bf00      	nop
 800f0da:	bf00      	nop
 800f0dc:	3714      	adds	r7, #20
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e4:	4770      	bx	lr
 800f0e6:	bf00      	nop
 800f0e8:	200071d4 	.word	0x200071d4

0800f0ec <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f0ec:	b480      	push	{r7}
 800f0ee:	b085      	sub	sp, #20
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	60fb      	str	r3, [r7, #12]
 800f0f8:	e016      	b.n	800f128 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f0fa:	4a10      	ldr	r2, [pc, #64]	@ (800f13c <vQueueUnregisterQueue+0x50>)
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	00db      	lsls	r3, r3, #3
 800f100:	4413      	add	r3, r2
 800f102:	685b      	ldr	r3, [r3, #4]
 800f104:	687a      	ldr	r2, [r7, #4]
 800f106:	429a      	cmp	r2, r3
 800f108:	d10b      	bne.n	800f122 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f10a:	4a0c      	ldr	r2, [pc, #48]	@ (800f13c <vQueueUnregisterQueue+0x50>)
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	2100      	movs	r1, #0
 800f110:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f114:	4a09      	ldr	r2, [pc, #36]	@ (800f13c <vQueueUnregisterQueue+0x50>)
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	00db      	lsls	r3, r3, #3
 800f11a:	4413      	add	r3, r2
 800f11c:	2200      	movs	r2, #0
 800f11e:	605a      	str	r2, [r3, #4]
				break;
 800f120:	e006      	b.n	800f130 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	3301      	adds	r3, #1
 800f126:	60fb      	str	r3, [r7, #12]
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	2b0b      	cmp	r3, #11
 800f12c:	d9e5      	bls.n	800f0fa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f12e:	bf00      	nop
 800f130:	bf00      	nop
 800f132:	3714      	adds	r7, #20
 800f134:	46bd      	mov	sp, r7
 800f136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13a:	4770      	bx	lr
 800f13c:	200071d4 	.word	0x200071d4

0800f140 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f140:	b580      	push	{r7, lr}
 800f142:	b086      	sub	sp, #24
 800f144:	af00      	add	r7, sp, #0
 800f146:	60f8      	str	r0, [r7, #12]
 800f148:	60b9      	str	r1, [r7, #8]
 800f14a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f150:	f001 fdc4 	bl	8010cdc <vPortEnterCritical>
 800f154:	697b      	ldr	r3, [r7, #20]
 800f156:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f15a:	b25b      	sxtb	r3, r3
 800f15c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f160:	d103      	bne.n	800f16a <vQueueWaitForMessageRestricted+0x2a>
 800f162:	697b      	ldr	r3, [r7, #20]
 800f164:	2200      	movs	r2, #0
 800f166:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f16a:	697b      	ldr	r3, [r7, #20]
 800f16c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f170:	b25b      	sxtb	r3, r3
 800f172:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f176:	d103      	bne.n	800f180 <vQueueWaitForMessageRestricted+0x40>
 800f178:	697b      	ldr	r3, [r7, #20]
 800f17a:	2200      	movs	r2, #0
 800f17c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f180:	f001 fde2 	bl	8010d48 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f184:	697b      	ldr	r3, [r7, #20]
 800f186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d106      	bne.n	800f19a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f18c:	697b      	ldr	r3, [r7, #20]
 800f18e:	3324      	adds	r3, #36	@ 0x24
 800f190:	687a      	ldr	r2, [r7, #4]
 800f192:	68b9      	ldr	r1, [r7, #8]
 800f194:	4618      	mov	r0, r3
 800f196:	f000 fcfb 	bl	800fb90 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f19a:	6978      	ldr	r0, [r7, #20]
 800f19c:	f7ff fefc 	bl	800ef98 <prvUnlockQueue>
	}
 800f1a0:	bf00      	nop
 800f1a2:	3718      	adds	r7, #24
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bd80      	pop	{r7, pc}

0800f1a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b08e      	sub	sp, #56	@ 0x38
 800f1ac:	af04      	add	r7, sp, #16
 800f1ae:	60f8      	str	r0, [r7, #12]
 800f1b0:	60b9      	str	r1, [r7, #8]
 800f1b2:	607a      	str	r2, [r7, #4]
 800f1b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f1b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d10d      	bne.n	800f1d8 <xTaskCreateStatic+0x30>
	__asm volatile
 800f1bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1c0:	b672      	cpsid	i
 800f1c2:	f383 8811 	msr	BASEPRI, r3
 800f1c6:	f3bf 8f6f 	isb	sy
 800f1ca:	f3bf 8f4f 	dsb	sy
 800f1ce:	b662      	cpsie	i
 800f1d0:	623b      	str	r3, [r7, #32]
}
 800f1d2:	bf00      	nop
 800f1d4:	bf00      	nop
 800f1d6:	e7fd      	b.n	800f1d4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800f1d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d10d      	bne.n	800f1fa <xTaskCreateStatic+0x52>
	__asm volatile
 800f1de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1e2:	b672      	cpsid	i
 800f1e4:	f383 8811 	msr	BASEPRI, r3
 800f1e8:	f3bf 8f6f 	isb	sy
 800f1ec:	f3bf 8f4f 	dsb	sy
 800f1f0:	b662      	cpsie	i
 800f1f2:	61fb      	str	r3, [r7, #28]
}
 800f1f4:	bf00      	nop
 800f1f6:	bf00      	nop
 800f1f8:	e7fd      	b.n	800f1f6 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f1fa:	23a8      	movs	r3, #168	@ 0xa8
 800f1fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f1fe:	693b      	ldr	r3, [r7, #16]
 800f200:	2ba8      	cmp	r3, #168	@ 0xa8
 800f202:	d00d      	beq.n	800f220 <xTaskCreateStatic+0x78>
	__asm volatile
 800f204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f208:	b672      	cpsid	i
 800f20a:	f383 8811 	msr	BASEPRI, r3
 800f20e:	f3bf 8f6f 	isb	sy
 800f212:	f3bf 8f4f 	dsb	sy
 800f216:	b662      	cpsie	i
 800f218:	61bb      	str	r3, [r7, #24]
}
 800f21a:	bf00      	nop
 800f21c:	bf00      	nop
 800f21e:	e7fd      	b.n	800f21c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f220:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f224:	2b00      	cmp	r3, #0
 800f226:	d01e      	beq.n	800f266 <xTaskCreateStatic+0xbe>
 800f228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d01b      	beq.n	800f266 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f22e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f230:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f234:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f236:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f23a:	2202      	movs	r2, #2
 800f23c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f240:	2300      	movs	r3, #0
 800f242:	9303      	str	r3, [sp, #12]
 800f244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f246:	9302      	str	r3, [sp, #8]
 800f248:	f107 0314 	add.w	r3, r7, #20
 800f24c:	9301      	str	r3, [sp, #4]
 800f24e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f250:	9300      	str	r3, [sp, #0]
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	687a      	ldr	r2, [r7, #4]
 800f256:	68b9      	ldr	r1, [r7, #8]
 800f258:	68f8      	ldr	r0, [r7, #12]
 800f25a:	f000 f851 	bl	800f300 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f25e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f260:	f000 f8f8 	bl	800f454 <prvAddNewTaskToReadyList>
 800f264:	e001      	b.n	800f26a <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800f266:	2300      	movs	r3, #0
 800f268:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f26a:	697b      	ldr	r3, [r7, #20]
	}
 800f26c:	4618      	mov	r0, r3
 800f26e:	3728      	adds	r7, #40	@ 0x28
 800f270:	46bd      	mov	sp, r7
 800f272:	bd80      	pop	{r7, pc}

0800f274 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f274:	b580      	push	{r7, lr}
 800f276:	b08c      	sub	sp, #48	@ 0x30
 800f278:	af04      	add	r7, sp, #16
 800f27a:	60f8      	str	r0, [r7, #12]
 800f27c:	60b9      	str	r1, [r7, #8]
 800f27e:	603b      	str	r3, [r7, #0]
 800f280:	4613      	mov	r3, r2
 800f282:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f284:	88fb      	ldrh	r3, [r7, #6]
 800f286:	009b      	lsls	r3, r3, #2
 800f288:	4618      	mov	r0, r3
 800f28a:	f001 fe55 	bl	8010f38 <pvPortMalloc>
 800f28e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f290:	697b      	ldr	r3, [r7, #20]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d00e      	beq.n	800f2b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f296:	20a8      	movs	r0, #168	@ 0xa8
 800f298:	f001 fe4e 	bl	8010f38 <pvPortMalloc>
 800f29c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f29e:	69fb      	ldr	r3, [r7, #28]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d003      	beq.n	800f2ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f2a4:	69fb      	ldr	r3, [r7, #28]
 800f2a6:	697a      	ldr	r2, [r7, #20]
 800f2a8:	631a      	str	r2, [r3, #48]	@ 0x30
 800f2aa:	e005      	b.n	800f2b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f2ac:	6978      	ldr	r0, [r7, #20]
 800f2ae:	f001 ff15 	bl	80110dc <vPortFree>
 800f2b2:	e001      	b.n	800f2b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f2b8:	69fb      	ldr	r3, [r7, #28]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d017      	beq.n	800f2ee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f2be:	69fb      	ldr	r3, [r7, #28]
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f2c6:	88fa      	ldrh	r2, [r7, #6]
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	9303      	str	r3, [sp, #12]
 800f2cc:	69fb      	ldr	r3, [r7, #28]
 800f2ce:	9302      	str	r3, [sp, #8]
 800f2d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2d2:	9301      	str	r3, [sp, #4]
 800f2d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2d6:	9300      	str	r3, [sp, #0]
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	68b9      	ldr	r1, [r7, #8]
 800f2dc:	68f8      	ldr	r0, [r7, #12]
 800f2de:	f000 f80f 	bl	800f300 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f2e2:	69f8      	ldr	r0, [r7, #28]
 800f2e4:	f000 f8b6 	bl	800f454 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f2e8:	2301      	movs	r3, #1
 800f2ea:	61bb      	str	r3, [r7, #24]
 800f2ec:	e002      	b.n	800f2f4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f2ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f2f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f2f4:	69bb      	ldr	r3, [r7, #24]
	}
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	3720      	adds	r7, #32
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	bd80      	pop	{r7, pc}
	...

0800f300 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b088      	sub	sp, #32
 800f304:	af00      	add	r7, sp, #0
 800f306:	60f8      	str	r0, [r7, #12]
 800f308:	60b9      	str	r1, [r7, #8]
 800f30a:	607a      	str	r2, [r7, #4]
 800f30c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f310:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	009b      	lsls	r3, r3, #2
 800f316:	461a      	mov	r2, r3
 800f318:	21a5      	movs	r1, #165	@ 0xa5
 800f31a:	f012 f883 	bl	8021424 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f31e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f320:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f322:	6879      	ldr	r1, [r7, #4]
 800f324:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800f328:	440b      	add	r3, r1
 800f32a:	009b      	lsls	r3, r3, #2
 800f32c:	4413      	add	r3, r2
 800f32e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f330:	69bb      	ldr	r3, [r7, #24]
 800f332:	f023 0307 	bic.w	r3, r3, #7
 800f336:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f338:	69bb      	ldr	r3, [r7, #24]
 800f33a:	f003 0307 	and.w	r3, r3, #7
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d00d      	beq.n	800f35e <prvInitialiseNewTask+0x5e>
	__asm volatile
 800f342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f346:	b672      	cpsid	i
 800f348:	f383 8811 	msr	BASEPRI, r3
 800f34c:	f3bf 8f6f 	isb	sy
 800f350:	f3bf 8f4f 	dsb	sy
 800f354:	b662      	cpsie	i
 800f356:	617b      	str	r3, [r7, #20]
}
 800f358:	bf00      	nop
 800f35a:	bf00      	nop
 800f35c:	e7fd      	b.n	800f35a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f35e:	68bb      	ldr	r3, [r7, #8]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d01f      	beq.n	800f3a4 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f364:	2300      	movs	r3, #0
 800f366:	61fb      	str	r3, [r7, #28]
 800f368:	e012      	b.n	800f390 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f36a:	68ba      	ldr	r2, [r7, #8]
 800f36c:	69fb      	ldr	r3, [r7, #28]
 800f36e:	4413      	add	r3, r2
 800f370:	7819      	ldrb	r1, [r3, #0]
 800f372:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f374:	69fb      	ldr	r3, [r7, #28]
 800f376:	4413      	add	r3, r2
 800f378:	3334      	adds	r3, #52	@ 0x34
 800f37a:	460a      	mov	r2, r1
 800f37c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f37e:	68ba      	ldr	r2, [r7, #8]
 800f380:	69fb      	ldr	r3, [r7, #28]
 800f382:	4413      	add	r3, r2
 800f384:	781b      	ldrb	r3, [r3, #0]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d006      	beq.n	800f398 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f38a:	69fb      	ldr	r3, [r7, #28]
 800f38c:	3301      	adds	r3, #1
 800f38e:	61fb      	str	r3, [r7, #28]
 800f390:	69fb      	ldr	r3, [r7, #28]
 800f392:	2b0f      	cmp	r3, #15
 800f394:	d9e9      	bls.n	800f36a <prvInitialiseNewTask+0x6a>
 800f396:	e000      	b.n	800f39a <prvInitialiseNewTask+0x9a>
			{
				break;
 800f398:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f39a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f39c:	2200      	movs	r2, #0
 800f39e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f3a2:	e003      	b.n	800f3ac <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f3a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f3ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3ae:	2b37      	cmp	r3, #55	@ 0x37
 800f3b0:	d901      	bls.n	800f3b6 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f3b2:	2337      	movs	r3, #55	@ 0x37
 800f3b4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f3b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f3ba:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f3bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f3c0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f3c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3ca:	3304      	adds	r3, #4
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	f7fe fce5 	bl	800dd9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3d4:	3318      	adds	r3, #24
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f7fe fce0 	bl	800dd9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f3dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f3e0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f3e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3e4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f3e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3ea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f3ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f3f0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f3fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f404:	3354      	adds	r3, #84	@ 0x54
 800f406:	224c      	movs	r2, #76	@ 0x4c
 800f408:	2100      	movs	r1, #0
 800f40a:	4618      	mov	r0, r3
 800f40c:	f012 f80a 	bl	8021424 <memset>
 800f410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f412:	4a0d      	ldr	r2, [pc, #52]	@ (800f448 <prvInitialiseNewTask+0x148>)
 800f414:	659a      	str	r2, [r3, #88]	@ 0x58
 800f416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f418:	4a0c      	ldr	r2, [pc, #48]	@ (800f44c <prvInitialiseNewTask+0x14c>)
 800f41a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800f41c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f41e:	4a0c      	ldr	r2, [pc, #48]	@ (800f450 <prvInitialiseNewTask+0x150>)
 800f420:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f422:	683a      	ldr	r2, [r7, #0]
 800f424:	68f9      	ldr	r1, [r7, #12]
 800f426:	69b8      	ldr	r0, [r7, #24]
 800f428:	f001 fb4c 	bl	8010ac4 <pxPortInitialiseStack>
 800f42c:	4602      	mov	r2, r0
 800f42e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f430:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f434:	2b00      	cmp	r3, #0
 800f436:	d002      	beq.n	800f43e <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f43a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f43c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f43e:	bf00      	nop
 800f440:	3720      	adds	r7, #32
 800f442:	46bd      	mov	sp, r7
 800f444:	bd80      	pop	{r7, pc}
 800f446:	bf00      	nop
 800f448:	200287c4 	.word	0x200287c4
 800f44c:	2002882c 	.word	0x2002882c
 800f450:	20028894 	.word	0x20028894

0800f454 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b082      	sub	sp, #8
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f45c:	f001 fc3e 	bl	8010cdc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f460:	4b2d      	ldr	r3, [pc, #180]	@ (800f518 <prvAddNewTaskToReadyList+0xc4>)
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	3301      	adds	r3, #1
 800f466:	4a2c      	ldr	r2, [pc, #176]	@ (800f518 <prvAddNewTaskToReadyList+0xc4>)
 800f468:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f46a:	4b2c      	ldr	r3, [pc, #176]	@ (800f51c <prvAddNewTaskToReadyList+0xc8>)
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d109      	bne.n	800f486 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f472:	4a2a      	ldr	r2, [pc, #168]	@ (800f51c <prvAddNewTaskToReadyList+0xc8>)
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f478:	4b27      	ldr	r3, [pc, #156]	@ (800f518 <prvAddNewTaskToReadyList+0xc4>)
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	2b01      	cmp	r3, #1
 800f47e:	d110      	bne.n	800f4a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f480:	f000 fd24 	bl	800fecc <prvInitialiseTaskLists>
 800f484:	e00d      	b.n	800f4a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f486:	4b26      	ldr	r3, [pc, #152]	@ (800f520 <prvAddNewTaskToReadyList+0xcc>)
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d109      	bne.n	800f4a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f48e:	4b23      	ldr	r3, [pc, #140]	@ (800f51c <prvAddNewTaskToReadyList+0xc8>)
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f498:	429a      	cmp	r2, r3
 800f49a:	d802      	bhi.n	800f4a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f49c:	4a1f      	ldr	r2, [pc, #124]	@ (800f51c <prvAddNewTaskToReadyList+0xc8>)
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f4a2:	4b20      	ldr	r3, [pc, #128]	@ (800f524 <prvAddNewTaskToReadyList+0xd0>)
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	3301      	adds	r3, #1
 800f4a8:	4a1e      	ldr	r2, [pc, #120]	@ (800f524 <prvAddNewTaskToReadyList+0xd0>)
 800f4aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f4ac:	4b1d      	ldr	r3, [pc, #116]	@ (800f524 <prvAddNewTaskToReadyList+0xd0>)
 800f4ae:	681a      	ldr	r2, [r3, #0]
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f4b8:	4b1b      	ldr	r3, [pc, #108]	@ (800f528 <prvAddNewTaskToReadyList+0xd4>)
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	429a      	cmp	r2, r3
 800f4be:	d903      	bls.n	800f4c8 <prvAddNewTaskToReadyList+0x74>
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4c4:	4a18      	ldr	r2, [pc, #96]	@ (800f528 <prvAddNewTaskToReadyList+0xd4>)
 800f4c6:	6013      	str	r3, [r2, #0]
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f4cc:	4613      	mov	r3, r2
 800f4ce:	009b      	lsls	r3, r3, #2
 800f4d0:	4413      	add	r3, r2
 800f4d2:	009b      	lsls	r3, r3, #2
 800f4d4:	4a15      	ldr	r2, [pc, #84]	@ (800f52c <prvAddNewTaskToReadyList+0xd8>)
 800f4d6:	441a      	add	r2, r3
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	3304      	adds	r3, #4
 800f4dc:	4619      	mov	r1, r3
 800f4de:	4610      	mov	r0, r2
 800f4e0:	f7fe fc69 	bl	800ddb6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f4e4:	f001 fc30 	bl	8010d48 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f4e8:	4b0d      	ldr	r3, [pc, #52]	@ (800f520 <prvAddNewTaskToReadyList+0xcc>)
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d00e      	beq.n	800f50e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f4f0:	4b0a      	ldr	r3, [pc, #40]	@ (800f51c <prvAddNewTaskToReadyList+0xc8>)
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4fa:	429a      	cmp	r2, r3
 800f4fc:	d207      	bcs.n	800f50e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f4fe:	4b0c      	ldr	r3, [pc, #48]	@ (800f530 <prvAddNewTaskToReadyList+0xdc>)
 800f500:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f504:	601a      	str	r2, [r3, #0]
 800f506:	f3bf 8f4f 	dsb	sy
 800f50a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f50e:	bf00      	nop
 800f510:	3708      	adds	r7, #8
 800f512:	46bd      	mov	sp, r7
 800f514:	bd80      	pop	{r7, pc}
 800f516:	bf00      	nop
 800f518:	200076f0 	.word	0x200076f0
 800f51c:	20007234 	.word	0x20007234
 800f520:	200076fc 	.word	0x200076fc
 800f524:	2000770c 	.word	0x2000770c
 800f528:	200076f8 	.word	0x200076f8
 800f52c:	20007238 	.word	0x20007238
 800f530:	e000ed04 	.word	0xe000ed04

0800f534 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f534:	b580      	push	{r7, lr}
 800f536:	b084      	sub	sp, #16
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f53c:	2300      	movs	r3, #0
 800f53e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d01a      	beq.n	800f57c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f546:	4b15      	ldr	r3, [pc, #84]	@ (800f59c <vTaskDelay+0x68>)
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d00d      	beq.n	800f56a <vTaskDelay+0x36>
	__asm volatile
 800f54e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f552:	b672      	cpsid	i
 800f554:	f383 8811 	msr	BASEPRI, r3
 800f558:	f3bf 8f6f 	isb	sy
 800f55c:	f3bf 8f4f 	dsb	sy
 800f560:	b662      	cpsie	i
 800f562:	60bb      	str	r3, [r7, #8]
}
 800f564:	bf00      	nop
 800f566:	bf00      	nop
 800f568:	e7fd      	b.n	800f566 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800f56a:	f000 f88f 	bl	800f68c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f56e:	2100      	movs	r1, #0
 800f570:	6878      	ldr	r0, [r7, #4]
 800f572:	f000 fecb 	bl	801030c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f576:	f000 f897 	bl	800f6a8 <xTaskResumeAll>
 800f57a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d107      	bne.n	800f592 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800f582:	4b07      	ldr	r3, [pc, #28]	@ (800f5a0 <vTaskDelay+0x6c>)
 800f584:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f588:	601a      	str	r2, [r3, #0]
 800f58a:	f3bf 8f4f 	dsb	sy
 800f58e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f592:	bf00      	nop
 800f594:	3710      	adds	r7, #16
 800f596:	46bd      	mov	sp, r7
 800f598:	bd80      	pop	{r7, pc}
 800f59a:	bf00      	nop
 800f59c:	20007718 	.word	0x20007718
 800f5a0:	e000ed04 	.word	0xe000ed04

0800f5a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b08a      	sub	sp, #40	@ 0x28
 800f5a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f5b2:	463a      	mov	r2, r7
 800f5b4:	1d39      	adds	r1, r7, #4
 800f5b6:	f107 0308 	add.w	r3, r7, #8
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	f7fe f994 	bl	800d8e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f5c0:	6839      	ldr	r1, [r7, #0]
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	68ba      	ldr	r2, [r7, #8]
 800f5c6:	9202      	str	r2, [sp, #8]
 800f5c8:	9301      	str	r3, [sp, #4]
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	9300      	str	r3, [sp, #0]
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	460a      	mov	r2, r1
 800f5d2:	4926      	ldr	r1, [pc, #152]	@ (800f66c <vTaskStartScheduler+0xc8>)
 800f5d4:	4826      	ldr	r0, [pc, #152]	@ (800f670 <vTaskStartScheduler+0xcc>)
 800f5d6:	f7ff fde7 	bl	800f1a8 <xTaskCreateStatic>
 800f5da:	4603      	mov	r3, r0
 800f5dc:	4a25      	ldr	r2, [pc, #148]	@ (800f674 <vTaskStartScheduler+0xd0>)
 800f5de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f5e0:	4b24      	ldr	r3, [pc, #144]	@ (800f674 <vTaskStartScheduler+0xd0>)
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d002      	beq.n	800f5ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f5e8:	2301      	movs	r3, #1
 800f5ea:	617b      	str	r3, [r7, #20]
 800f5ec:	e001      	b.n	800f5f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f5f2:	697b      	ldr	r3, [r7, #20]
 800f5f4:	2b01      	cmp	r3, #1
 800f5f6:	d102      	bne.n	800f5fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f5f8:	f000 fedc 	bl	80103b4 <xTimerCreateTimerTask>
 800f5fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f5fe:	697b      	ldr	r3, [r7, #20]
 800f600:	2b01      	cmp	r3, #1
 800f602:	d11d      	bne.n	800f640 <vTaskStartScheduler+0x9c>
	__asm volatile
 800f604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f608:	b672      	cpsid	i
 800f60a:	f383 8811 	msr	BASEPRI, r3
 800f60e:	f3bf 8f6f 	isb	sy
 800f612:	f3bf 8f4f 	dsb	sy
 800f616:	b662      	cpsie	i
 800f618:	613b      	str	r3, [r7, #16]
}
 800f61a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f61c:	4b16      	ldr	r3, [pc, #88]	@ (800f678 <vTaskStartScheduler+0xd4>)
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	3354      	adds	r3, #84	@ 0x54
 800f622:	4a16      	ldr	r2, [pc, #88]	@ (800f67c <vTaskStartScheduler+0xd8>)
 800f624:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f626:	4b16      	ldr	r3, [pc, #88]	@ (800f680 <vTaskStartScheduler+0xdc>)
 800f628:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f62c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f62e:	4b15      	ldr	r3, [pc, #84]	@ (800f684 <vTaskStartScheduler+0xe0>)
 800f630:	2201      	movs	r2, #1
 800f632:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f634:	4b14      	ldr	r3, [pc, #80]	@ (800f688 <vTaskStartScheduler+0xe4>)
 800f636:	2200      	movs	r2, #0
 800f638:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f63a:	f001 fad1 	bl	8010be0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f63e:	e011      	b.n	800f664 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f640:	697b      	ldr	r3, [r7, #20]
 800f642:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f646:	d10d      	bne.n	800f664 <vTaskStartScheduler+0xc0>
	__asm volatile
 800f648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f64c:	b672      	cpsid	i
 800f64e:	f383 8811 	msr	BASEPRI, r3
 800f652:	f3bf 8f6f 	isb	sy
 800f656:	f3bf 8f4f 	dsb	sy
 800f65a:	b662      	cpsie	i
 800f65c:	60fb      	str	r3, [r7, #12]
}
 800f65e:	bf00      	nop
 800f660:	bf00      	nop
 800f662:	e7fd      	b.n	800f660 <vTaskStartScheduler+0xbc>
}
 800f664:	bf00      	nop
 800f666:	3718      	adds	r7, #24
 800f668:	46bd      	mov	sp, r7
 800f66a:	bd80      	pop	{r7, pc}
 800f66c:	080225cc 	.word	0x080225cc
 800f670:	0800fe9d 	.word	0x0800fe9d
 800f674:	20007714 	.word	0x20007714
 800f678:	20007234 	.word	0x20007234
 800f67c:	20000080 	.word	0x20000080
 800f680:	20007710 	.word	0x20007710
 800f684:	200076fc 	.word	0x200076fc
 800f688:	200076f4 	.word	0x200076f4

0800f68c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f68c:	b480      	push	{r7}
 800f68e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f690:	4b04      	ldr	r3, [pc, #16]	@ (800f6a4 <vTaskSuspendAll+0x18>)
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	3301      	adds	r3, #1
 800f696:	4a03      	ldr	r2, [pc, #12]	@ (800f6a4 <vTaskSuspendAll+0x18>)
 800f698:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f69a:	bf00      	nop
 800f69c:	46bd      	mov	sp, r7
 800f69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a2:	4770      	bx	lr
 800f6a4:	20007718 	.word	0x20007718

0800f6a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b084      	sub	sp, #16
 800f6ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f6b6:	4b43      	ldr	r3, [pc, #268]	@ (800f7c4 <xTaskResumeAll+0x11c>)
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d10d      	bne.n	800f6da <xTaskResumeAll+0x32>
	__asm volatile
 800f6be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6c2:	b672      	cpsid	i
 800f6c4:	f383 8811 	msr	BASEPRI, r3
 800f6c8:	f3bf 8f6f 	isb	sy
 800f6cc:	f3bf 8f4f 	dsb	sy
 800f6d0:	b662      	cpsie	i
 800f6d2:	603b      	str	r3, [r7, #0]
}
 800f6d4:	bf00      	nop
 800f6d6:	bf00      	nop
 800f6d8:	e7fd      	b.n	800f6d6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f6da:	f001 faff 	bl	8010cdc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f6de:	4b39      	ldr	r3, [pc, #228]	@ (800f7c4 <xTaskResumeAll+0x11c>)
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	3b01      	subs	r3, #1
 800f6e4:	4a37      	ldr	r2, [pc, #220]	@ (800f7c4 <xTaskResumeAll+0x11c>)
 800f6e6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f6e8:	4b36      	ldr	r3, [pc, #216]	@ (800f7c4 <xTaskResumeAll+0x11c>)
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d162      	bne.n	800f7b6 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f6f0:	4b35      	ldr	r3, [pc, #212]	@ (800f7c8 <xTaskResumeAll+0x120>)
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d05e      	beq.n	800f7b6 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f6f8:	e02f      	b.n	800f75a <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6fa:	4b34      	ldr	r3, [pc, #208]	@ (800f7cc <xTaskResumeAll+0x124>)
 800f6fc:	68db      	ldr	r3, [r3, #12]
 800f6fe:	68db      	ldr	r3, [r3, #12]
 800f700:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	3318      	adds	r3, #24
 800f706:	4618      	mov	r0, r3
 800f708:	f7fe fbb2 	bl	800de70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	3304      	adds	r3, #4
 800f710:	4618      	mov	r0, r3
 800f712:	f7fe fbad 	bl	800de70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f71a:	4b2d      	ldr	r3, [pc, #180]	@ (800f7d0 <xTaskResumeAll+0x128>)
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	429a      	cmp	r2, r3
 800f720:	d903      	bls.n	800f72a <xTaskResumeAll+0x82>
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f726:	4a2a      	ldr	r2, [pc, #168]	@ (800f7d0 <xTaskResumeAll+0x128>)
 800f728:	6013      	str	r3, [r2, #0]
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f72e:	4613      	mov	r3, r2
 800f730:	009b      	lsls	r3, r3, #2
 800f732:	4413      	add	r3, r2
 800f734:	009b      	lsls	r3, r3, #2
 800f736:	4a27      	ldr	r2, [pc, #156]	@ (800f7d4 <xTaskResumeAll+0x12c>)
 800f738:	441a      	add	r2, r3
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	3304      	adds	r3, #4
 800f73e:	4619      	mov	r1, r3
 800f740:	4610      	mov	r0, r2
 800f742:	f7fe fb38 	bl	800ddb6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f74a:	4b23      	ldr	r3, [pc, #140]	@ (800f7d8 <xTaskResumeAll+0x130>)
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f750:	429a      	cmp	r2, r3
 800f752:	d302      	bcc.n	800f75a <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 800f754:	4b21      	ldr	r3, [pc, #132]	@ (800f7dc <xTaskResumeAll+0x134>)
 800f756:	2201      	movs	r2, #1
 800f758:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f75a:	4b1c      	ldr	r3, [pc, #112]	@ (800f7cc <xTaskResumeAll+0x124>)
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d1cb      	bne.n	800f6fa <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d001      	beq.n	800f76c <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f768:	f000 fbf2 	bl	800ff50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f76c:	4b1c      	ldr	r3, [pc, #112]	@ (800f7e0 <xTaskResumeAll+0x138>)
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d010      	beq.n	800f79a <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f778:	f000 f858 	bl	800f82c <xTaskIncrementTick>
 800f77c:	4603      	mov	r3, r0
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d002      	beq.n	800f788 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800f782:	4b16      	ldr	r3, [pc, #88]	@ (800f7dc <xTaskResumeAll+0x134>)
 800f784:	2201      	movs	r2, #1
 800f786:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	3b01      	subs	r3, #1
 800f78c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d1f1      	bne.n	800f778 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 800f794:	4b12      	ldr	r3, [pc, #72]	@ (800f7e0 <xTaskResumeAll+0x138>)
 800f796:	2200      	movs	r2, #0
 800f798:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f79a:	4b10      	ldr	r3, [pc, #64]	@ (800f7dc <xTaskResumeAll+0x134>)
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d009      	beq.n	800f7b6 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f7a2:	2301      	movs	r3, #1
 800f7a4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f7a6:	4b0f      	ldr	r3, [pc, #60]	@ (800f7e4 <xTaskResumeAll+0x13c>)
 800f7a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f7ac:	601a      	str	r2, [r3, #0]
 800f7ae:	f3bf 8f4f 	dsb	sy
 800f7b2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f7b6:	f001 fac7 	bl	8010d48 <vPortExitCritical>

	return xAlreadyYielded;
 800f7ba:	68bb      	ldr	r3, [r7, #8]
}
 800f7bc:	4618      	mov	r0, r3
 800f7be:	3710      	adds	r7, #16
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	bd80      	pop	{r7, pc}
 800f7c4:	20007718 	.word	0x20007718
 800f7c8:	200076f0 	.word	0x200076f0
 800f7cc:	200076c8 	.word	0x200076c8
 800f7d0:	200076f8 	.word	0x200076f8
 800f7d4:	20007238 	.word	0x20007238
 800f7d8:	20007234 	.word	0x20007234
 800f7dc:	20007704 	.word	0x20007704
 800f7e0:	20007700 	.word	0x20007700
 800f7e4:	e000ed04 	.word	0xe000ed04

0800f7e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f7e8:	b480      	push	{r7}
 800f7ea:	b083      	sub	sp, #12
 800f7ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f7ee:	4b05      	ldr	r3, [pc, #20]	@ (800f804 <xTaskGetTickCount+0x1c>)
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f7f4:	687b      	ldr	r3, [r7, #4]
}
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	370c      	adds	r7, #12
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f800:	4770      	bx	lr
 800f802:	bf00      	nop
 800f804:	200076f4 	.word	0x200076f4

0800f808 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b082      	sub	sp, #8
 800f80c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f80e:	f001 fb4d 	bl	8010eac <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f812:	2300      	movs	r3, #0
 800f814:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f816:	4b04      	ldr	r3, [pc, #16]	@ (800f828 <xTaskGetTickCountFromISR+0x20>)
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f81c:	683b      	ldr	r3, [r7, #0]
}
 800f81e:	4618      	mov	r0, r3
 800f820:	3708      	adds	r7, #8
 800f822:	46bd      	mov	sp, r7
 800f824:	bd80      	pop	{r7, pc}
 800f826:	bf00      	nop
 800f828:	200076f4 	.word	0x200076f4

0800f82c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b086      	sub	sp, #24
 800f830:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f832:	2300      	movs	r3, #0
 800f834:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f836:	4b50      	ldr	r3, [pc, #320]	@ (800f978 <xTaskIncrementTick+0x14c>)
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	f040 808c 	bne.w	800f958 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f840:	4b4e      	ldr	r3, [pc, #312]	@ (800f97c <xTaskIncrementTick+0x150>)
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	3301      	adds	r3, #1
 800f846:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f848:	4a4c      	ldr	r2, [pc, #304]	@ (800f97c <xTaskIncrementTick+0x150>)
 800f84a:	693b      	ldr	r3, [r7, #16]
 800f84c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f84e:	693b      	ldr	r3, [r7, #16]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d123      	bne.n	800f89c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800f854:	4b4a      	ldr	r3, [pc, #296]	@ (800f980 <xTaskIncrementTick+0x154>)
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d00d      	beq.n	800f87a <xTaskIncrementTick+0x4e>
	__asm volatile
 800f85e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f862:	b672      	cpsid	i
 800f864:	f383 8811 	msr	BASEPRI, r3
 800f868:	f3bf 8f6f 	isb	sy
 800f86c:	f3bf 8f4f 	dsb	sy
 800f870:	b662      	cpsie	i
 800f872:	603b      	str	r3, [r7, #0]
}
 800f874:	bf00      	nop
 800f876:	bf00      	nop
 800f878:	e7fd      	b.n	800f876 <xTaskIncrementTick+0x4a>
 800f87a:	4b41      	ldr	r3, [pc, #260]	@ (800f980 <xTaskIncrementTick+0x154>)
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	60fb      	str	r3, [r7, #12]
 800f880:	4b40      	ldr	r3, [pc, #256]	@ (800f984 <xTaskIncrementTick+0x158>)
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	4a3e      	ldr	r2, [pc, #248]	@ (800f980 <xTaskIncrementTick+0x154>)
 800f886:	6013      	str	r3, [r2, #0]
 800f888:	4a3e      	ldr	r2, [pc, #248]	@ (800f984 <xTaskIncrementTick+0x158>)
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	6013      	str	r3, [r2, #0]
 800f88e:	4b3e      	ldr	r3, [pc, #248]	@ (800f988 <xTaskIncrementTick+0x15c>)
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	3301      	adds	r3, #1
 800f894:	4a3c      	ldr	r2, [pc, #240]	@ (800f988 <xTaskIncrementTick+0x15c>)
 800f896:	6013      	str	r3, [r2, #0]
 800f898:	f000 fb5a 	bl	800ff50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f89c:	4b3b      	ldr	r3, [pc, #236]	@ (800f98c <xTaskIncrementTick+0x160>)
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	693a      	ldr	r2, [r7, #16]
 800f8a2:	429a      	cmp	r2, r3
 800f8a4:	d349      	bcc.n	800f93a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f8a6:	4b36      	ldr	r3, [pc, #216]	@ (800f980 <xTaskIncrementTick+0x154>)
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d104      	bne.n	800f8ba <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f8b0:	4b36      	ldr	r3, [pc, #216]	@ (800f98c <xTaskIncrementTick+0x160>)
 800f8b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f8b6:	601a      	str	r2, [r3, #0]
					break;
 800f8b8:	e03f      	b.n	800f93a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f8ba:	4b31      	ldr	r3, [pc, #196]	@ (800f980 <xTaskIncrementTick+0x154>)
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	68db      	ldr	r3, [r3, #12]
 800f8c0:	68db      	ldr	r3, [r3, #12]
 800f8c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f8c4:	68bb      	ldr	r3, [r7, #8]
 800f8c6:	685b      	ldr	r3, [r3, #4]
 800f8c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f8ca:	693a      	ldr	r2, [r7, #16]
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	429a      	cmp	r2, r3
 800f8d0:	d203      	bcs.n	800f8da <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f8d2:	4a2e      	ldr	r2, [pc, #184]	@ (800f98c <xTaskIncrementTick+0x160>)
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f8d8:	e02f      	b.n	800f93a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f8da:	68bb      	ldr	r3, [r7, #8]
 800f8dc:	3304      	adds	r3, #4
 800f8de:	4618      	mov	r0, r3
 800f8e0:	f7fe fac6 	bl	800de70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f8e4:	68bb      	ldr	r3, [r7, #8]
 800f8e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d004      	beq.n	800f8f6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f8ec:	68bb      	ldr	r3, [r7, #8]
 800f8ee:	3318      	adds	r3, #24
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	f7fe fabd 	bl	800de70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f8f6:	68bb      	ldr	r3, [r7, #8]
 800f8f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f8fa:	4b25      	ldr	r3, [pc, #148]	@ (800f990 <xTaskIncrementTick+0x164>)
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	429a      	cmp	r2, r3
 800f900:	d903      	bls.n	800f90a <xTaskIncrementTick+0xde>
 800f902:	68bb      	ldr	r3, [r7, #8]
 800f904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f906:	4a22      	ldr	r2, [pc, #136]	@ (800f990 <xTaskIncrementTick+0x164>)
 800f908:	6013      	str	r3, [r2, #0]
 800f90a:	68bb      	ldr	r3, [r7, #8]
 800f90c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f90e:	4613      	mov	r3, r2
 800f910:	009b      	lsls	r3, r3, #2
 800f912:	4413      	add	r3, r2
 800f914:	009b      	lsls	r3, r3, #2
 800f916:	4a1f      	ldr	r2, [pc, #124]	@ (800f994 <xTaskIncrementTick+0x168>)
 800f918:	441a      	add	r2, r3
 800f91a:	68bb      	ldr	r3, [r7, #8]
 800f91c:	3304      	adds	r3, #4
 800f91e:	4619      	mov	r1, r3
 800f920:	4610      	mov	r0, r2
 800f922:	f7fe fa48 	bl	800ddb6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f926:	68bb      	ldr	r3, [r7, #8]
 800f928:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f92a:	4b1b      	ldr	r3, [pc, #108]	@ (800f998 <xTaskIncrementTick+0x16c>)
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f930:	429a      	cmp	r2, r3
 800f932:	d3b8      	bcc.n	800f8a6 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800f934:	2301      	movs	r3, #1
 800f936:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f938:	e7b5      	b.n	800f8a6 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f93a:	4b17      	ldr	r3, [pc, #92]	@ (800f998 <xTaskIncrementTick+0x16c>)
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f940:	4914      	ldr	r1, [pc, #80]	@ (800f994 <xTaskIncrementTick+0x168>)
 800f942:	4613      	mov	r3, r2
 800f944:	009b      	lsls	r3, r3, #2
 800f946:	4413      	add	r3, r2
 800f948:	009b      	lsls	r3, r3, #2
 800f94a:	440b      	add	r3, r1
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	2b01      	cmp	r3, #1
 800f950:	d907      	bls.n	800f962 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800f952:	2301      	movs	r3, #1
 800f954:	617b      	str	r3, [r7, #20]
 800f956:	e004      	b.n	800f962 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f958:	4b10      	ldr	r3, [pc, #64]	@ (800f99c <xTaskIncrementTick+0x170>)
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	3301      	adds	r3, #1
 800f95e:	4a0f      	ldr	r2, [pc, #60]	@ (800f99c <xTaskIncrementTick+0x170>)
 800f960:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f962:	4b0f      	ldr	r3, [pc, #60]	@ (800f9a0 <xTaskIncrementTick+0x174>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d001      	beq.n	800f96e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800f96a:	2301      	movs	r3, #1
 800f96c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f96e:	697b      	ldr	r3, [r7, #20]
}
 800f970:	4618      	mov	r0, r3
 800f972:	3718      	adds	r7, #24
 800f974:	46bd      	mov	sp, r7
 800f976:	bd80      	pop	{r7, pc}
 800f978:	20007718 	.word	0x20007718
 800f97c:	200076f4 	.word	0x200076f4
 800f980:	200076c0 	.word	0x200076c0
 800f984:	200076c4 	.word	0x200076c4
 800f988:	20007708 	.word	0x20007708
 800f98c:	20007710 	.word	0x20007710
 800f990:	200076f8 	.word	0x200076f8
 800f994:	20007238 	.word	0x20007238
 800f998:	20007234 	.word	0x20007234
 800f99c:	20007700 	.word	0x20007700
 800f9a0:	20007704 	.word	0x20007704

0800f9a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b086      	sub	sp, #24
 800f9a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f9aa:	4b3e      	ldr	r3, [pc, #248]	@ (800faa4 <vTaskSwitchContext+0x100>)
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d003      	beq.n	800f9ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f9b2:	4b3d      	ldr	r3, [pc, #244]	@ (800faa8 <vTaskSwitchContext+0x104>)
 800f9b4:	2201      	movs	r2, #1
 800f9b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f9b8:	e070      	b.n	800fa9c <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 800f9ba:	4b3b      	ldr	r3, [pc, #236]	@ (800faa8 <vTaskSwitchContext+0x104>)
 800f9bc:	2200      	movs	r2, #0
 800f9be:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800f9c0:	4b3a      	ldr	r3, [pc, #232]	@ (800faac <vTaskSwitchContext+0x108>)
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f9c6:	613b      	str	r3, [r7, #16]
 800f9c8:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800f9cc:	60fb      	str	r3, [r7, #12]
 800f9ce:	693b      	ldr	r3, [r7, #16]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	68fa      	ldr	r2, [r7, #12]
 800f9d4:	429a      	cmp	r2, r3
 800f9d6:	d111      	bne.n	800f9fc <vTaskSwitchContext+0x58>
 800f9d8:	693b      	ldr	r3, [r7, #16]
 800f9da:	3304      	adds	r3, #4
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	68fa      	ldr	r2, [r7, #12]
 800f9e0:	429a      	cmp	r2, r3
 800f9e2:	d10b      	bne.n	800f9fc <vTaskSwitchContext+0x58>
 800f9e4:	693b      	ldr	r3, [r7, #16]
 800f9e6:	3308      	adds	r3, #8
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	68fa      	ldr	r2, [r7, #12]
 800f9ec:	429a      	cmp	r2, r3
 800f9ee:	d105      	bne.n	800f9fc <vTaskSwitchContext+0x58>
 800f9f0:	693b      	ldr	r3, [r7, #16]
 800f9f2:	330c      	adds	r3, #12
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	68fa      	ldr	r2, [r7, #12]
 800f9f8:	429a      	cmp	r2, r3
 800f9fa:	d008      	beq.n	800fa0e <vTaskSwitchContext+0x6a>
 800f9fc:	4b2b      	ldr	r3, [pc, #172]	@ (800faac <vTaskSwitchContext+0x108>)
 800f9fe:	681a      	ldr	r2, [r3, #0]
 800fa00:	4b2a      	ldr	r3, [pc, #168]	@ (800faac <vTaskSwitchContext+0x108>)
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	3334      	adds	r3, #52	@ 0x34
 800fa06:	4619      	mov	r1, r3
 800fa08:	4610      	mov	r0, r2
 800fa0a:	f7f0 ff6f 	bl	80008ec <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa0e:	4b28      	ldr	r3, [pc, #160]	@ (800fab0 <vTaskSwitchContext+0x10c>)
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	617b      	str	r3, [r7, #20]
 800fa14:	e013      	b.n	800fa3e <vTaskSwitchContext+0x9a>
 800fa16:	697b      	ldr	r3, [r7, #20]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d10d      	bne.n	800fa38 <vTaskSwitchContext+0x94>
	__asm volatile
 800fa1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa20:	b672      	cpsid	i
 800fa22:	f383 8811 	msr	BASEPRI, r3
 800fa26:	f3bf 8f6f 	isb	sy
 800fa2a:	f3bf 8f4f 	dsb	sy
 800fa2e:	b662      	cpsie	i
 800fa30:	607b      	str	r3, [r7, #4]
}
 800fa32:	bf00      	nop
 800fa34:	bf00      	nop
 800fa36:	e7fd      	b.n	800fa34 <vTaskSwitchContext+0x90>
 800fa38:	697b      	ldr	r3, [r7, #20]
 800fa3a:	3b01      	subs	r3, #1
 800fa3c:	617b      	str	r3, [r7, #20]
 800fa3e:	491d      	ldr	r1, [pc, #116]	@ (800fab4 <vTaskSwitchContext+0x110>)
 800fa40:	697a      	ldr	r2, [r7, #20]
 800fa42:	4613      	mov	r3, r2
 800fa44:	009b      	lsls	r3, r3, #2
 800fa46:	4413      	add	r3, r2
 800fa48:	009b      	lsls	r3, r3, #2
 800fa4a:	440b      	add	r3, r1
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d0e1      	beq.n	800fa16 <vTaskSwitchContext+0x72>
 800fa52:	697a      	ldr	r2, [r7, #20]
 800fa54:	4613      	mov	r3, r2
 800fa56:	009b      	lsls	r3, r3, #2
 800fa58:	4413      	add	r3, r2
 800fa5a:	009b      	lsls	r3, r3, #2
 800fa5c:	4a15      	ldr	r2, [pc, #84]	@ (800fab4 <vTaskSwitchContext+0x110>)
 800fa5e:	4413      	add	r3, r2
 800fa60:	60bb      	str	r3, [r7, #8]
 800fa62:	68bb      	ldr	r3, [r7, #8]
 800fa64:	685b      	ldr	r3, [r3, #4]
 800fa66:	685a      	ldr	r2, [r3, #4]
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	605a      	str	r2, [r3, #4]
 800fa6c:	68bb      	ldr	r3, [r7, #8]
 800fa6e:	685a      	ldr	r2, [r3, #4]
 800fa70:	68bb      	ldr	r3, [r7, #8]
 800fa72:	3308      	adds	r3, #8
 800fa74:	429a      	cmp	r2, r3
 800fa76:	d104      	bne.n	800fa82 <vTaskSwitchContext+0xde>
 800fa78:	68bb      	ldr	r3, [r7, #8]
 800fa7a:	685b      	ldr	r3, [r3, #4]
 800fa7c:	685a      	ldr	r2, [r3, #4]
 800fa7e:	68bb      	ldr	r3, [r7, #8]
 800fa80:	605a      	str	r2, [r3, #4]
 800fa82:	68bb      	ldr	r3, [r7, #8]
 800fa84:	685b      	ldr	r3, [r3, #4]
 800fa86:	68db      	ldr	r3, [r3, #12]
 800fa88:	4a08      	ldr	r2, [pc, #32]	@ (800faac <vTaskSwitchContext+0x108>)
 800fa8a:	6013      	str	r3, [r2, #0]
 800fa8c:	4a08      	ldr	r2, [pc, #32]	@ (800fab0 <vTaskSwitchContext+0x10c>)
 800fa8e:	697b      	ldr	r3, [r7, #20]
 800fa90:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fa92:	4b06      	ldr	r3, [pc, #24]	@ (800faac <vTaskSwitchContext+0x108>)
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	3354      	adds	r3, #84	@ 0x54
 800fa98:	4a07      	ldr	r2, [pc, #28]	@ (800fab8 <vTaskSwitchContext+0x114>)
 800fa9a:	6013      	str	r3, [r2, #0]
}
 800fa9c:	bf00      	nop
 800fa9e:	3718      	adds	r7, #24
 800faa0:	46bd      	mov	sp, r7
 800faa2:	bd80      	pop	{r7, pc}
 800faa4:	20007718 	.word	0x20007718
 800faa8:	20007704 	.word	0x20007704
 800faac:	20007234 	.word	0x20007234
 800fab0:	200076f8 	.word	0x200076f8
 800fab4:	20007238 	.word	0x20007238
 800fab8:	20000080 	.word	0x20000080

0800fabc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b084      	sub	sp, #16
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
 800fac4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d10d      	bne.n	800fae8 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800facc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fad0:	b672      	cpsid	i
 800fad2:	f383 8811 	msr	BASEPRI, r3
 800fad6:	f3bf 8f6f 	isb	sy
 800fada:	f3bf 8f4f 	dsb	sy
 800fade:	b662      	cpsie	i
 800fae0:	60fb      	str	r3, [r7, #12]
}
 800fae2:	bf00      	nop
 800fae4:	bf00      	nop
 800fae6:	e7fd      	b.n	800fae4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fae8:	4b07      	ldr	r3, [pc, #28]	@ (800fb08 <vTaskPlaceOnEventList+0x4c>)
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	3318      	adds	r3, #24
 800faee:	4619      	mov	r1, r3
 800faf0:	6878      	ldr	r0, [r7, #4]
 800faf2:	f7fe f984 	bl	800ddfe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800faf6:	2101      	movs	r1, #1
 800faf8:	6838      	ldr	r0, [r7, #0]
 800fafa:	f000 fc07 	bl	801030c <prvAddCurrentTaskToDelayedList>
}
 800fafe:	bf00      	nop
 800fb00:	3710      	adds	r7, #16
 800fb02:	46bd      	mov	sp, r7
 800fb04:	bd80      	pop	{r7, pc}
 800fb06:	bf00      	nop
 800fb08:	20007234 	.word	0x20007234

0800fb0c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b086      	sub	sp, #24
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	60f8      	str	r0, [r7, #12]
 800fb14:	60b9      	str	r1, [r7, #8]
 800fb16:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d10d      	bne.n	800fb3a <vTaskPlaceOnUnorderedEventList+0x2e>
	__asm volatile
 800fb1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb22:	b672      	cpsid	i
 800fb24:	f383 8811 	msr	BASEPRI, r3
 800fb28:	f3bf 8f6f 	isb	sy
 800fb2c:	f3bf 8f4f 	dsb	sy
 800fb30:	b662      	cpsie	i
 800fb32:	617b      	str	r3, [r7, #20]
}
 800fb34:	bf00      	nop
 800fb36:	bf00      	nop
 800fb38:	e7fd      	b.n	800fb36 <vTaskPlaceOnUnorderedEventList+0x2a>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800fb3a:	4b13      	ldr	r3, [pc, #76]	@ (800fb88 <vTaskPlaceOnUnorderedEventList+0x7c>)
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d10d      	bne.n	800fb5e <vTaskPlaceOnUnorderedEventList+0x52>
	__asm volatile
 800fb42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb46:	b672      	cpsid	i
 800fb48:	f383 8811 	msr	BASEPRI, r3
 800fb4c:	f3bf 8f6f 	isb	sy
 800fb50:	f3bf 8f4f 	dsb	sy
 800fb54:	b662      	cpsie	i
 800fb56:	613b      	str	r3, [r7, #16]
}
 800fb58:	bf00      	nop
 800fb5a:	bf00      	nop
 800fb5c:	e7fd      	b.n	800fb5a <vTaskPlaceOnUnorderedEventList+0x4e>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800fb5e:	4b0b      	ldr	r3, [pc, #44]	@ (800fb8c <vTaskPlaceOnUnorderedEventList+0x80>)
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	68ba      	ldr	r2, [r7, #8]
 800fb64:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800fb68:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fb6a:	4b08      	ldr	r3, [pc, #32]	@ (800fb8c <vTaskPlaceOnUnorderedEventList+0x80>)
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	3318      	adds	r3, #24
 800fb70:	4619      	mov	r1, r3
 800fb72:	68f8      	ldr	r0, [r7, #12]
 800fb74:	f7fe f91f 	bl	800ddb6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fb78:	2101      	movs	r1, #1
 800fb7a:	6878      	ldr	r0, [r7, #4]
 800fb7c:	f000 fbc6 	bl	801030c <prvAddCurrentTaskToDelayedList>
}
 800fb80:	bf00      	nop
 800fb82:	3718      	adds	r7, #24
 800fb84:	46bd      	mov	sp, r7
 800fb86:	bd80      	pop	{r7, pc}
 800fb88:	20007718 	.word	0x20007718
 800fb8c:	20007234 	.word	0x20007234

0800fb90 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b086      	sub	sp, #24
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	60f8      	str	r0, [r7, #12]
 800fb98:	60b9      	str	r1, [r7, #8]
 800fb9a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d10d      	bne.n	800fbbe <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800fba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fba6:	b672      	cpsid	i
 800fba8:	f383 8811 	msr	BASEPRI, r3
 800fbac:	f3bf 8f6f 	isb	sy
 800fbb0:	f3bf 8f4f 	dsb	sy
 800fbb4:	b662      	cpsie	i
 800fbb6:	617b      	str	r3, [r7, #20]
}
 800fbb8:	bf00      	nop
 800fbba:	bf00      	nop
 800fbbc:	e7fd      	b.n	800fbba <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fbbe:	4b0a      	ldr	r3, [pc, #40]	@ (800fbe8 <vTaskPlaceOnEventListRestricted+0x58>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	3318      	adds	r3, #24
 800fbc4:	4619      	mov	r1, r3
 800fbc6:	68f8      	ldr	r0, [r7, #12]
 800fbc8:	f7fe f8f5 	bl	800ddb6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d002      	beq.n	800fbd8 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800fbd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fbd6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fbd8:	6879      	ldr	r1, [r7, #4]
 800fbda:	68b8      	ldr	r0, [r7, #8]
 800fbdc:	f000 fb96 	bl	801030c <prvAddCurrentTaskToDelayedList>
	}
 800fbe0:	bf00      	nop
 800fbe2:	3718      	adds	r7, #24
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	bd80      	pop	{r7, pc}
 800fbe8:	20007234 	.word	0x20007234

0800fbec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b086      	sub	sp, #24
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	68db      	ldr	r3, [r3, #12]
 800fbf8:	68db      	ldr	r3, [r3, #12]
 800fbfa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fbfc:	693b      	ldr	r3, [r7, #16]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d10d      	bne.n	800fc1e <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800fc02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc06:	b672      	cpsid	i
 800fc08:	f383 8811 	msr	BASEPRI, r3
 800fc0c:	f3bf 8f6f 	isb	sy
 800fc10:	f3bf 8f4f 	dsb	sy
 800fc14:	b662      	cpsie	i
 800fc16:	60fb      	str	r3, [r7, #12]
}
 800fc18:	bf00      	nop
 800fc1a:	bf00      	nop
 800fc1c:	e7fd      	b.n	800fc1a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fc1e:	693b      	ldr	r3, [r7, #16]
 800fc20:	3318      	adds	r3, #24
 800fc22:	4618      	mov	r0, r3
 800fc24:	f7fe f924 	bl	800de70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc28:	4b1d      	ldr	r3, [pc, #116]	@ (800fca0 <xTaskRemoveFromEventList+0xb4>)
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d11d      	bne.n	800fc6c <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fc30:	693b      	ldr	r3, [r7, #16]
 800fc32:	3304      	adds	r3, #4
 800fc34:	4618      	mov	r0, r3
 800fc36:	f7fe f91b 	bl	800de70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fc3a:	693b      	ldr	r3, [r7, #16]
 800fc3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc3e:	4b19      	ldr	r3, [pc, #100]	@ (800fca4 <xTaskRemoveFromEventList+0xb8>)
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	429a      	cmp	r2, r3
 800fc44:	d903      	bls.n	800fc4e <xTaskRemoveFromEventList+0x62>
 800fc46:	693b      	ldr	r3, [r7, #16]
 800fc48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc4a:	4a16      	ldr	r2, [pc, #88]	@ (800fca4 <xTaskRemoveFromEventList+0xb8>)
 800fc4c:	6013      	str	r3, [r2, #0]
 800fc4e:	693b      	ldr	r3, [r7, #16]
 800fc50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc52:	4613      	mov	r3, r2
 800fc54:	009b      	lsls	r3, r3, #2
 800fc56:	4413      	add	r3, r2
 800fc58:	009b      	lsls	r3, r3, #2
 800fc5a:	4a13      	ldr	r2, [pc, #76]	@ (800fca8 <xTaskRemoveFromEventList+0xbc>)
 800fc5c:	441a      	add	r2, r3
 800fc5e:	693b      	ldr	r3, [r7, #16]
 800fc60:	3304      	adds	r3, #4
 800fc62:	4619      	mov	r1, r3
 800fc64:	4610      	mov	r0, r2
 800fc66:	f7fe f8a6 	bl	800ddb6 <vListInsertEnd>
 800fc6a:	e005      	b.n	800fc78 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fc6c:	693b      	ldr	r3, [r7, #16]
 800fc6e:	3318      	adds	r3, #24
 800fc70:	4619      	mov	r1, r3
 800fc72:	480e      	ldr	r0, [pc, #56]	@ (800fcac <xTaskRemoveFromEventList+0xc0>)
 800fc74:	f7fe f89f 	bl	800ddb6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fc78:	693b      	ldr	r3, [r7, #16]
 800fc7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc7c:	4b0c      	ldr	r3, [pc, #48]	@ (800fcb0 <xTaskRemoveFromEventList+0xc4>)
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc82:	429a      	cmp	r2, r3
 800fc84:	d905      	bls.n	800fc92 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fc86:	2301      	movs	r3, #1
 800fc88:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fc8a:	4b0a      	ldr	r3, [pc, #40]	@ (800fcb4 <xTaskRemoveFromEventList+0xc8>)
 800fc8c:	2201      	movs	r2, #1
 800fc8e:	601a      	str	r2, [r3, #0]
 800fc90:	e001      	b.n	800fc96 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800fc92:	2300      	movs	r3, #0
 800fc94:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fc96:	697b      	ldr	r3, [r7, #20]
}
 800fc98:	4618      	mov	r0, r3
 800fc9a:	3718      	adds	r7, #24
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd80      	pop	{r7, pc}
 800fca0:	20007718 	.word	0x20007718
 800fca4:	200076f8 	.word	0x200076f8
 800fca8:	20007238 	.word	0x20007238
 800fcac:	200076c8 	.word	0x200076c8
 800fcb0:	20007234 	.word	0x20007234
 800fcb4:	20007704 	.word	0x20007704

0800fcb8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b086      	sub	sp, #24
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
 800fcc0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800fcc2:	4b2c      	ldr	r3, [pc, #176]	@ (800fd74 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d10d      	bne.n	800fce6 <vTaskRemoveFromUnorderedEventList+0x2e>
	__asm volatile
 800fcca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcce:	b672      	cpsid	i
 800fcd0:	f383 8811 	msr	BASEPRI, r3
 800fcd4:	f3bf 8f6f 	isb	sy
 800fcd8:	f3bf 8f4f 	dsb	sy
 800fcdc:	b662      	cpsie	i
 800fcde:	613b      	str	r3, [r7, #16]
}
 800fce0:	bf00      	nop
 800fce2:	bf00      	nop
 800fce4:	e7fd      	b.n	800fce2 <vTaskRemoveFromUnorderedEventList+0x2a>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800fce6:	683b      	ldr	r3, [r7, #0]
 800fce8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	68db      	ldr	r3, [r3, #12]
 800fcf4:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800fcf6:	697b      	ldr	r3, [r7, #20]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d10d      	bne.n	800fd18 <vTaskRemoveFromUnorderedEventList+0x60>
	__asm volatile
 800fcfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd00:	b672      	cpsid	i
 800fd02:	f383 8811 	msr	BASEPRI, r3
 800fd06:	f3bf 8f6f 	isb	sy
 800fd0a:	f3bf 8f4f 	dsb	sy
 800fd0e:	b662      	cpsie	i
 800fd10:	60fb      	str	r3, [r7, #12]
}
 800fd12:	bf00      	nop
 800fd14:	bf00      	nop
 800fd16:	e7fd      	b.n	800fd14 <vTaskRemoveFromUnorderedEventList+0x5c>
	( void ) uxListRemove( pxEventListItem );
 800fd18:	6878      	ldr	r0, [r7, #4]
 800fd1a:	f7fe f8a9 	bl	800de70 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fd1e:	697b      	ldr	r3, [r7, #20]
 800fd20:	3304      	adds	r3, #4
 800fd22:	4618      	mov	r0, r3
 800fd24:	f7fe f8a4 	bl	800de70 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800fd28:	697b      	ldr	r3, [r7, #20]
 800fd2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd2c:	4b12      	ldr	r3, [pc, #72]	@ (800fd78 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	429a      	cmp	r2, r3
 800fd32:	d903      	bls.n	800fd3c <vTaskRemoveFromUnorderedEventList+0x84>
 800fd34:	697b      	ldr	r3, [r7, #20]
 800fd36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd38:	4a0f      	ldr	r2, [pc, #60]	@ (800fd78 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800fd3a:	6013      	str	r3, [r2, #0]
 800fd3c:	697b      	ldr	r3, [r7, #20]
 800fd3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd40:	4613      	mov	r3, r2
 800fd42:	009b      	lsls	r3, r3, #2
 800fd44:	4413      	add	r3, r2
 800fd46:	009b      	lsls	r3, r3, #2
 800fd48:	4a0c      	ldr	r2, [pc, #48]	@ (800fd7c <vTaskRemoveFromUnorderedEventList+0xc4>)
 800fd4a:	441a      	add	r2, r3
 800fd4c:	697b      	ldr	r3, [r7, #20]
 800fd4e:	3304      	adds	r3, #4
 800fd50:	4619      	mov	r1, r3
 800fd52:	4610      	mov	r0, r2
 800fd54:	f7fe f82f 	bl	800ddb6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fd58:	697b      	ldr	r3, [r7, #20]
 800fd5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd5c:	4b08      	ldr	r3, [pc, #32]	@ (800fd80 <vTaskRemoveFromUnorderedEventList+0xc8>)
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd62:	429a      	cmp	r2, r3
 800fd64:	d902      	bls.n	800fd6c <vTaskRemoveFromUnorderedEventList+0xb4>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800fd66:	4b07      	ldr	r3, [pc, #28]	@ (800fd84 <vTaskRemoveFromUnorderedEventList+0xcc>)
 800fd68:	2201      	movs	r2, #1
 800fd6a:	601a      	str	r2, [r3, #0]
	}
}
 800fd6c:	bf00      	nop
 800fd6e:	3718      	adds	r7, #24
 800fd70:	46bd      	mov	sp, r7
 800fd72:	bd80      	pop	{r7, pc}
 800fd74:	20007718 	.word	0x20007718
 800fd78:	200076f8 	.word	0x200076f8
 800fd7c:	20007238 	.word	0x20007238
 800fd80:	20007234 	.word	0x20007234
 800fd84:	20007704 	.word	0x20007704

0800fd88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fd88:	b480      	push	{r7}
 800fd8a:	b083      	sub	sp, #12
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fd90:	4b06      	ldr	r3, [pc, #24]	@ (800fdac <vTaskInternalSetTimeOutState+0x24>)
 800fd92:	681a      	ldr	r2, [r3, #0]
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fd98:	4b05      	ldr	r3, [pc, #20]	@ (800fdb0 <vTaskInternalSetTimeOutState+0x28>)
 800fd9a:	681a      	ldr	r2, [r3, #0]
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	605a      	str	r2, [r3, #4]
}
 800fda0:	bf00      	nop
 800fda2:	370c      	adds	r7, #12
 800fda4:	46bd      	mov	sp, r7
 800fda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdaa:	4770      	bx	lr
 800fdac:	20007708 	.word	0x20007708
 800fdb0:	200076f4 	.word	0x200076f4

0800fdb4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	b088      	sub	sp, #32
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	6078      	str	r0, [r7, #4]
 800fdbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d10d      	bne.n	800fde0 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800fdc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdc8:	b672      	cpsid	i
 800fdca:	f383 8811 	msr	BASEPRI, r3
 800fdce:	f3bf 8f6f 	isb	sy
 800fdd2:	f3bf 8f4f 	dsb	sy
 800fdd6:	b662      	cpsie	i
 800fdd8:	613b      	str	r3, [r7, #16]
}
 800fdda:	bf00      	nop
 800fddc:	bf00      	nop
 800fdde:	e7fd      	b.n	800fddc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800fde0:	683b      	ldr	r3, [r7, #0]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d10d      	bne.n	800fe02 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800fde6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdea:	b672      	cpsid	i
 800fdec:	f383 8811 	msr	BASEPRI, r3
 800fdf0:	f3bf 8f6f 	isb	sy
 800fdf4:	f3bf 8f4f 	dsb	sy
 800fdf8:	b662      	cpsie	i
 800fdfa:	60fb      	str	r3, [r7, #12]
}
 800fdfc:	bf00      	nop
 800fdfe:	bf00      	nop
 800fe00:	e7fd      	b.n	800fdfe <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800fe02:	f000 ff6b 	bl	8010cdc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fe06:	4b1d      	ldr	r3, [pc, #116]	@ (800fe7c <xTaskCheckForTimeOut+0xc8>)
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	685b      	ldr	r3, [r3, #4]
 800fe10:	69ba      	ldr	r2, [r7, #24]
 800fe12:	1ad3      	subs	r3, r2, r3
 800fe14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fe16:	683b      	ldr	r3, [r7, #0]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fe1e:	d102      	bne.n	800fe26 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fe20:	2300      	movs	r3, #0
 800fe22:	61fb      	str	r3, [r7, #28]
 800fe24:	e023      	b.n	800fe6e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	681a      	ldr	r2, [r3, #0]
 800fe2a:	4b15      	ldr	r3, [pc, #84]	@ (800fe80 <xTaskCheckForTimeOut+0xcc>)
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	429a      	cmp	r2, r3
 800fe30:	d007      	beq.n	800fe42 <xTaskCheckForTimeOut+0x8e>
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	685b      	ldr	r3, [r3, #4]
 800fe36:	69ba      	ldr	r2, [r7, #24]
 800fe38:	429a      	cmp	r2, r3
 800fe3a:	d302      	bcc.n	800fe42 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fe3c:	2301      	movs	r3, #1
 800fe3e:	61fb      	str	r3, [r7, #28]
 800fe40:	e015      	b.n	800fe6e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fe42:	683b      	ldr	r3, [r7, #0]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	697a      	ldr	r2, [r7, #20]
 800fe48:	429a      	cmp	r2, r3
 800fe4a:	d20b      	bcs.n	800fe64 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	681a      	ldr	r2, [r3, #0]
 800fe50:	697b      	ldr	r3, [r7, #20]
 800fe52:	1ad2      	subs	r2, r2, r3
 800fe54:	683b      	ldr	r3, [r7, #0]
 800fe56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fe58:	6878      	ldr	r0, [r7, #4]
 800fe5a:	f7ff ff95 	bl	800fd88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fe5e:	2300      	movs	r3, #0
 800fe60:	61fb      	str	r3, [r7, #28]
 800fe62:	e004      	b.n	800fe6e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800fe64:	683b      	ldr	r3, [r7, #0]
 800fe66:	2200      	movs	r2, #0
 800fe68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fe6a:	2301      	movs	r3, #1
 800fe6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fe6e:	f000 ff6b 	bl	8010d48 <vPortExitCritical>

	return xReturn;
 800fe72:	69fb      	ldr	r3, [r7, #28]
}
 800fe74:	4618      	mov	r0, r3
 800fe76:	3720      	adds	r7, #32
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bd80      	pop	{r7, pc}
 800fe7c:	200076f4 	.word	0x200076f4
 800fe80:	20007708 	.word	0x20007708

0800fe84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fe84:	b480      	push	{r7}
 800fe86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fe88:	4b03      	ldr	r3, [pc, #12]	@ (800fe98 <vTaskMissedYield+0x14>)
 800fe8a:	2201      	movs	r2, #1
 800fe8c:	601a      	str	r2, [r3, #0]
}
 800fe8e:	bf00      	nop
 800fe90:	46bd      	mov	sp, r7
 800fe92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe96:	4770      	bx	lr
 800fe98:	20007704 	.word	0x20007704

0800fe9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b082      	sub	sp, #8
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fea4:	f000 f84c 	bl	800ff40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fea8:	4b06      	ldr	r3, [pc, #24]	@ (800fec4 <prvIdleTask+0x28>)
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	2b01      	cmp	r3, #1
 800feae:	d9f9      	bls.n	800fea4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800feb0:	4b05      	ldr	r3, [pc, #20]	@ (800fec8 <prvIdleTask+0x2c>)
 800feb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800feb6:	601a      	str	r2, [r3, #0]
 800feb8:	f3bf 8f4f 	dsb	sy
 800febc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fec0:	e7f0      	b.n	800fea4 <prvIdleTask+0x8>
 800fec2:	bf00      	nop
 800fec4:	20007238 	.word	0x20007238
 800fec8:	e000ed04 	.word	0xe000ed04

0800fecc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fecc:	b580      	push	{r7, lr}
 800fece:	b082      	sub	sp, #8
 800fed0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fed2:	2300      	movs	r3, #0
 800fed4:	607b      	str	r3, [r7, #4]
 800fed6:	e00c      	b.n	800fef2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fed8:	687a      	ldr	r2, [r7, #4]
 800feda:	4613      	mov	r3, r2
 800fedc:	009b      	lsls	r3, r3, #2
 800fede:	4413      	add	r3, r2
 800fee0:	009b      	lsls	r3, r3, #2
 800fee2:	4a10      	ldr	r2, [pc, #64]	@ (800ff24 <prvInitialiseTaskLists+0x58>)
 800fee4:	4413      	add	r3, r2
 800fee6:	4618      	mov	r0, r3
 800fee8:	f7fd ff38 	bl	800dd5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	3301      	adds	r3, #1
 800fef0:	607b      	str	r3, [r7, #4]
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	2b37      	cmp	r3, #55	@ 0x37
 800fef6:	d9ef      	bls.n	800fed8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fef8:	480b      	ldr	r0, [pc, #44]	@ (800ff28 <prvInitialiseTaskLists+0x5c>)
 800fefa:	f7fd ff2f 	bl	800dd5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fefe:	480b      	ldr	r0, [pc, #44]	@ (800ff2c <prvInitialiseTaskLists+0x60>)
 800ff00:	f7fd ff2c 	bl	800dd5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ff04:	480a      	ldr	r0, [pc, #40]	@ (800ff30 <prvInitialiseTaskLists+0x64>)
 800ff06:	f7fd ff29 	bl	800dd5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ff0a:	480a      	ldr	r0, [pc, #40]	@ (800ff34 <prvInitialiseTaskLists+0x68>)
 800ff0c:	f7fd ff26 	bl	800dd5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ff10:	4b09      	ldr	r3, [pc, #36]	@ (800ff38 <prvInitialiseTaskLists+0x6c>)
 800ff12:	4a05      	ldr	r2, [pc, #20]	@ (800ff28 <prvInitialiseTaskLists+0x5c>)
 800ff14:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ff16:	4b09      	ldr	r3, [pc, #36]	@ (800ff3c <prvInitialiseTaskLists+0x70>)
 800ff18:	4a04      	ldr	r2, [pc, #16]	@ (800ff2c <prvInitialiseTaskLists+0x60>)
 800ff1a:	601a      	str	r2, [r3, #0]
}
 800ff1c:	bf00      	nop
 800ff1e:	3708      	adds	r7, #8
 800ff20:	46bd      	mov	sp, r7
 800ff22:	bd80      	pop	{r7, pc}
 800ff24:	20007238 	.word	0x20007238
 800ff28:	20007698 	.word	0x20007698
 800ff2c:	200076ac 	.word	0x200076ac
 800ff30:	200076c8 	.word	0x200076c8
 800ff34:	200076dc 	.word	0x200076dc
 800ff38:	200076c0 	.word	0x200076c0
 800ff3c:	200076c4 	.word	0x200076c4

0800ff40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ff40:	b480      	push	{r7}
 800ff42:	af00      	add	r7, sp, #0

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ff44:	bf00      	nop
 800ff46:	46bd      	mov	sp, r7
 800ff48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4c:	4770      	bx	lr
	...

0800ff50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ff50:	b480      	push	{r7}
 800ff52:	b083      	sub	sp, #12
 800ff54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ff56:	4b0c      	ldr	r3, [pc, #48]	@ (800ff88 <prvResetNextTaskUnblockTime+0x38>)
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d104      	bne.n	800ff6a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ff60:	4b0a      	ldr	r3, [pc, #40]	@ (800ff8c <prvResetNextTaskUnblockTime+0x3c>)
 800ff62:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ff66:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ff68:	e008      	b.n	800ff7c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff6a:	4b07      	ldr	r3, [pc, #28]	@ (800ff88 <prvResetNextTaskUnblockTime+0x38>)
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	68db      	ldr	r3, [r3, #12]
 800ff70:	68db      	ldr	r3, [r3, #12]
 800ff72:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	685b      	ldr	r3, [r3, #4]
 800ff78:	4a04      	ldr	r2, [pc, #16]	@ (800ff8c <prvResetNextTaskUnblockTime+0x3c>)
 800ff7a:	6013      	str	r3, [r2, #0]
}
 800ff7c:	bf00      	nop
 800ff7e:	370c      	adds	r7, #12
 800ff80:	46bd      	mov	sp, r7
 800ff82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff86:	4770      	bx	lr
 800ff88:	200076c0 	.word	0x200076c0
 800ff8c:	20007710 	.word	0x20007710

0800ff90 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ff90:	b480      	push	{r7}
 800ff92:	b083      	sub	sp, #12
 800ff94:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ff96:	4b05      	ldr	r3, [pc, #20]	@ (800ffac <xTaskGetCurrentTaskHandle+0x1c>)
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ff9c:	687b      	ldr	r3, [r7, #4]
	}
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	370c      	adds	r7, #12
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa8:	4770      	bx	lr
 800ffaa:	bf00      	nop
 800ffac:	20007234 	.word	0x20007234

0800ffb0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ffb0:	b480      	push	{r7}
 800ffb2:	b083      	sub	sp, #12
 800ffb4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ffb6:	4b0b      	ldr	r3, [pc, #44]	@ (800ffe4 <xTaskGetSchedulerState+0x34>)
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d102      	bne.n	800ffc4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ffbe:	2301      	movs	r3, #1
 800ffc0:	607b      	str	r3, [r7, #4]
 800ffc2:	e008      	b.n	800ffd6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ffc4:	4b08      	ldr	r3, [pc, #32]	@ (800ffe8 <xTaskGetSchedulerState+0x38>)
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d102      	bne.n	800ffd2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ffcc:	2302      	movs	r3, #2
 800ffce:	607b      	str	r3, [r7, #4]
 800ffd0:	e001      	b.n	800ffd6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ffd6:	687b      	ldr	r3, [r7, #4]
	}
 800ffd8:	4618      	mov	r0, r3
 800ffda:	370c      	adds	r7, #12
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe2:	4770      	bx	lr
 800ffe4:	200076fc 	.word	0x200076fc
 800ffe8:	20007718 	.word	0x20007718

0800ffec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b084      	sub	sp, #16
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800fff8:	2300      	movs	r3, #0
 800fffa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d051      	beq.n	80100a6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010002:	68bb      	ldr	r3, [r7, #8]
 8010004:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010006:	4b2a      	ldr	r3, [pc, #168]	@ (80100b0 <xTaskPriorityInherit+0xc4>)
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801000c:	429a      	cmp	r2, r3
 801000e:	d241      	bcs.n	8010094 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010010:	68bb      	ldr	r3, [r7, #8]
 8010012:	699b      	ldr	r3, [r3, #24]
 8010014:	2b00      	cmp	r3, #0
 8010016:	db06      	blt.n	8010026 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010018:	4b25      	ldr	r3, [pc, #148]	@ (80100b0 <xTaskPriorityInherit+0xc4>)
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801001e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010022:	68bb      	ldr	r3, [r7, #8]
 8010024:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010026:	68bb      	ldr	r3, [r7, #8]
 8010028:	6959      	ldr	r1, [r3, #20]
 801002a:	68bb      	ldr	r3, [r7, #8]
 801002c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801002e:	4613      	mov	r3, r2
 8010030:	009b      	lsls	r3, r3, #2
 8010032:	4413      	add	r3, r2
 8010034:	009b      	lsls	r3, r3, #2
 8010036:	4a1f      	ldr	r2, [pc, #124]	@ (80100b4 <xTaskPriorityInherit+0xc8>)
 8010038:	4413      	add	r3, r2
 801003a:	4299      	cmp	r1, r3
 801003c:	d122      	bne.n	8010084 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801003e:	68bb      	ldr	r3, [r7, #8]
 8010040:	3304      	adds	r3, #4
 8010042:	4618      	mov	r0, r3
 8010044:	f7fd ff14 	bl	800de70 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010048:	4b19      	ldr	r3, [pc, #100]	@ (80100b0 <xTaskPriorityInherit+0xc4>)
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801004e:	68bb      	ldr	r3, [r7, #8]
 8010050:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010052:	68bb      	ldr	r3, [r7, #8]
 8010054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010056:	4b18      	ldr	r3, [pc, #96]	@ (80100b8 <xTaskPriorityInherit+0xcc>)
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	429a      	cmp	r2, r3
 801005c:	d903      	bls.n	8010066 <xTaskPriorityInherit+0x7a>
 801005e:	68bb      	ldr	r3, [r7, #8]
 8010060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010062:	4a15      	ldr	r2, [pc, #84]	@ (80100b8 <xTaskPriorityInherit+0xcc>)
 8010064:	6013      	str	r3, [r2, #0]
 8010066:	68bb      	ldr	r3, [r7, #8]
 8010068:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801006a:	4613      	mov	r3, r2
 801006c:	009b      	lsls	r3, r3, #2
 801006e:	4413      	add	r3, r2
 8010070:	009b      	lsls	r3, r3, #2
 8010072:	4a10      	ldr	r2, [pc, #64]	@ (80100b4 <xTaskPriorityInherit+0xc8>)
 8010074:	441a      	add	r2, r3
 8010076:	68bb      	ldr	r3, [r7, #8]
 8010078:	3304      	adds	r3, #4
 801007a:	4619      	mov	r1, r3
 801007c:	4610      	mov	r0, r2
 801007e:	f7fd fe9a 	bl	800ddb6 <vListInsertEnd>
 8010082:	e004      	b.n	801008e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010084:	4b0a      	ldr	r3, [pc, #40]	@ (80100b0 <xTaskPriorityInherit+0xc4>)
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801008a:	68bb      	ldr	r3, [r7, #8]
 801008c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801008e:	2301      	movs	r3, #1
 8010090:	60fb      	str	r3, [r7, #12]
 8010092:	e008      	b.n	80100a6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010094:	68bb      	ldr	r3, [r7, #8]
 8010096:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010098:	4b05      	ldr	r3, [pc, #20]	@ (80100b0 <xTaskPriorityInherit+0xc4>)
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801009e:	429a      	cmp	r2, r3
 80100a0:	d201      	bcs.n	80100a6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80100a2:	2301      	movs	r3, #1
 80100a4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80100a6:	68fb      	ldr	r3, [r7, #12]
	}
 80100a8:	4618      	mov	r0, r3
 80100aa:	3710      	adds	r7, #16
 80100ac:	46bd      	mov	sp, r7
 80100ae:	bd80      	pop	{r7, pc}
 80100b0:	20007234 	.word	0x20007234
 80100b4:	20007238 	.word	0x20007238
 80100b8:	200076f8 	.word	0x200076f8

080100bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b086      	sub	sp, #24
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80100c8:	2300      	movs	r3, #0
 80100ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d05c      	beq.n	801018c <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80100d2:	4b31      	ldr	r3, [pc, #196]	@ (8010198 <xTaskPriorityDisinherit+0xdc>)
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	693a      	ldr	r2, [r7, #16]
 80100d8:	429a      	cmp	r2, r3
 80100da:	d00d      	beq.n	80100f8 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80100dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100e0:	b672      	cpsid	i
 80100e2:	f383 8811 	msr	BASEPRI, r3
 80100e6:	f3bf 8f6f 	isb	sy
 80100ea:	f3bf 8f4f 	dsb	sy
 80100ee:	b662      	cpsie	i
 80100f0:	60fb      	str	r3, [r7, #12]
}
 80100f2:	bf00      	nop
 80100f4:	bf00      	nop
 80100f6:	e7fd      	b.n	80100f4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80100f8:	693b      	ldr	r3, [r7, #16]
 80100fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d10d      	bne.n	801011c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8010100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010104:	b672      	cpsid	i
 8010106:	f383 8811 	msr	BASEPRI, r3
 801010a:	f3bf 8f6f 	isb	sy
 801010e:	f3bf 8f4f 	dsb	sy
 8010112:	b662      	cpsie	i
 8010114:	60bb      	str	r3, [r7, #8]
}
 8010116:	bf00      	nop
 8010118:	bf00      	nop
 801011a:	e7fd      	b.n	8010118 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 801011c:	693b      	ldr	r3, [r7, #16]
 801011e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010120:	1e5a      	subs	r2, r3, #1
 8010122:	693b      	ldr	r3, [r7, #16]
 8010124:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010126:	693b      	ldr	r3, [r7, #16]
 8010128:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801012a:	693b      	ldr	r3, [r7, #16]
 801012c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801012e:	429a      	cmp	r2, r3
 8010130:	d02c      	beq.n	801018c <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010132:	693b      	ldr	r3, [r7, #16]
 8010134:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010136:	2b00      	cmp	r3, #0
 8010138:	d128      	bne.n	801018c <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801013a:	693b      	ldr	r3, [r7, #16]
 801013c:	3304      	adds	r3, #4
 801013e:	4618      	mov	r0, r3
 8010140:	f7fd fe96 	bl	800de70 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010144:	693b      	ldr	r3, [r7, #16]
 8010146:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010148:	693b      	ldr	r3, [r7, #16]
 801014a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801014c:	693b      	ldr	r3, [r7, #16]
 801014e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010150:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010154:	693b      	ldr	r3, [r7, #16]
 8010156:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010158:	693b      	ldr	r3, [r7, #16]
 801015a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801015c:	4b0f      	ldr	r3, [pc, #60]	@ (801019c <xTaskPriorityDisinherit+0xe0>)
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	429a      	cmp	r2, r3
 8010162:	d903      	bls.n	801016c <xTaskPriorityDisinherit+0xb0>
 8010164:	693b      	ldr	r3, [r7, #16]
 8010166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010168:	4a0c      	ldr	r2, [pc, #48]	@ (801019c <xTaskPriorityDisinherit+0xe0>)
 801016a:	6013      	str	r3, [r2, #0]
 801016c:	693b      	ldr	r3, [r7, #16]
 801016e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010170:	4613      	mov	r3, r2
 8010172:	009b      	lsls	r3, r3, #2
 8010174:	4413      	add	r3, r2
 8010176:	009b      	lsls	r3, r3, #2
 8010178:	4a09      	ldr	r2, [pc, #36]	@ (80101a0 <xTaskPriorityDisinherit+0xe4>)
 801017a:	441a      	add	r2, r3
 801017c:	693b      	ldr	r3, [r7, #16]
 801017e:	3304      	adds	r3, #4
 8010180:	4619      	mov	r1, r3
 8010182:	4610      	mov	r0, r2
 8010184:	f7fd fe17 	bl	800ddb6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010188:	2301      	movs	r3, #1
 801018a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801018c:	697b      	ldr	r3, [r7, #20]
	}
 801018e:	4618      	mov	r0, r3
 8010190:	3718      	adds	r7, #24
 8010192:	46bd      	mov	sp, r7
 8010194:	bd80      	pop	{r7, pc}
 8010196:	bf00      	nop
 8010198:	20007234 	.word	0x20007234
 801019c:	200076f8 	.word	0x200076f8
 80101a0:	20007238 	.word	0x20007238

080101a4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80101a4:	b580      	push	{r7, lr}
 80101a6:	b088      	sub	sp, #32
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6078      	str	r0, [r7, #4]
 80101ac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80101b2:	2301      	movs	r3, #1
 80101b4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d070      	beq.n	801029e <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80101bc:	69bb      	ldr	r3, [r7, #24]
 80101be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d10d      	bne.n	80101e0 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 80101c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101c8:	b672      	cpsid	i
 80101ca:	f383 8811 	msr	BASEPRI, r3
 80101ce:	f3bf 8f6f 	isb	sy
 80101d2:	f3bf 8f4f 	dsb	sy
 80101d6:	b662      	cpsie	i
 80101d8:	60fb      	str	r3, [r7, #12]
}
 80101da:	bf00      	nop
 80101dc:	bf00      	nop
 80101de:	e7fd      	b.n	80101dc <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80101e0:	69bb      	ldr	r3, [r7, #24]
 80101e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80101e4:	683a      	ldr	r2, [r7, #0]
 80101e6:	429a      	cmp	r2, r3
 80101e8:	d902      	bls.n	80101f0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80101ea:	683b      	ldr	r3, [r7, #0]
 80101ec:	61fb      	str	r3, [r7, #28]
 80101ee:	e002      	b.n	80101f6 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80101f0:	69bb      	ldr	r3, [r7, #24]
 80101f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80101f4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80101f6:	69bb      	ldr	r3, [r7, #24]
 80101f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101fa:	69fa      	ldr	r2, [r7, #28]
 80101fc:	429a      	cmp	r2, r3
 80101fe:	d04e      	beq.n	801029e <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010200:	69bb      	ldr	r3, [r7, #24]
 8010202:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010204:	697a      	ldr	r2, [r7, #20]
 8010206:	429a      	cmp	r2, r3
 8010208:	d149      	bne.n	801029e <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801020a:	4b27      	ldr	r3, [pc, #156]	@ (80102a8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	69ba      	ldr	r2, [r7, #24]
 8010210:	429a      	cmp	r2, r3
 8010212:	d10d      	bne.n	8010230 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8010214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010218:	b672      	cpsid	i
 801021a:	f383 8811 	msr	BASEPRI, r3
 801021e:	f3bf 8f6f 	isb	sy
 8010222:	f3bf 8f4f 	dsb	sy
 8010226:	b662      	cpsie	i
 8010228:	60bb      	str	r3, [r7, #8]
}
 801022a:	bf00      	nop
 801022c:	bf00      	nop
 801022e:	e7fd      	b.n	801022c <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010230:	69bb      	ldr	r3, [r7, #24]
 8010232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010234:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010236:	69bb      	ldr	r3, [r7, #24]
 8010238:	69fa      	ldr	r2, [r7, #28]
 801023a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801023c:	69bb      	ldr	r3, [r7, #24]
 801023e:	699b      	ldr	r3, [r3, #24]
 8010240:	2b00      	cmp	r3, #0
 8010242:	db04      	blt.n	801024e <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010244:	69fb      	ldr	r3, [r7, #28]
 8010246:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801024a:	69bb      	ldr	r3, [r7, #24]
 801024c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801024e:	69bb      	ldr	r3, [r7, #24]
 8010250:	6959      	ldr	r1, [r3, #20]
 8010252:	693a      	ldr	r2, [r7, #16]
 8010254:	4613      	mov	r3, r2
 8010256:	009b      	lsls	r3, r3, #2
 8010258:	4413      	add	r3, r2
 801025a:	009b      	lsls	r3, r3, #2
 801025c:	4a13      	ldr	r2, [pc, #76]	@ (80102ac <vTaskPriorityDisinheritAfterTimeout+0x108>)
 801025e:	4413      	add	r3, r2
 8010260:	4299      	cmp	r1, r3
 8010262:	d11c      	bne.n	801029e <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010264:	69bb      	ldr	r3, [r7, #24]
 8010266:	3304      	adds	r3, #4
 8010268:	4618      	mov	r0, r3
 801026a:	f7fd fe01 	bl	800de70 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801026e:	69bb      	ldr	r3, [r7, #24]
 8010270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010272:	4b0f      	ldr	r3, [pc, #60]	@ (80102b0 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	429a      	cmp	r2, r3
 8010278:	d903      	bls.n	8010282 <vTaskPriorityDisinheritAfterTimeout+0xde>
 801027a:	69bb      	ldr	r3, [r7, #24]
 801027c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801027e:	4a0c      	ldr	r2, [pc, #48]	@ (80102b0 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8010280:	6013      	str	r3, [r2, #0]
 8010282:	69bb      	ldr	r3, [r7, #24]
 8010284:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010286:	4613      	mov	r3, r2
 8010288:	009b      	lsls	r3, r3, #2
 801028a:	4413      	add	r3, r2
 801028c:	009b      	lsls	r3, r3, #2
 801028e:	4a07      	ldr	r2, [pc, #28]	@ (80102ac <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8010290:	441a      	add	r2, r3
 8010292:	69bb      	ldr	r3, [r7, #24]
 8010294:	3304      	adds	r3, #4
 8010296:	4619      	mov	r1, r3
 8010298:	4610      	mov	r0, r2
 801029a:	f7fd fd8c 	bl	800ddb6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801029e:	bf00      	nop
 80102a0:	3720      	adds	r7, #32
 80102a2:	46bd      	mov	sp, r7
 80102a4:	bd80      	pop	{r7, pc}
 80102a6:	bf00      	nop
 80102a8:	20007234 	.word	0x20007234
 80102ac:	20007238 	.word	0x20007238
 80102b0:	200076f8 	.word	0x200076f8

080102b4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80102b4:	b480      	push	{r7}
 80102b6:	b083      	sub	sp, #12
 80102b8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80102ba:	4b09      	ldr	r3, [pc, #36]	@ (80102e0 <uxTaskResetEventItemValue+0x2c>)
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	699b      	ldr	r3, [r3, #24]
 80102c0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80102c2:	4b07      	ldr	r3, [pc, #28]	@ (80102e0 <uxTaskResetEventItemValue+0x2c>)
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80102c8:	4b05      	ldr	r3, [pc, #20]	@ (80102e0 <uxTaskResetEventItemValue+0x2c>)
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 80102d0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80102d2:	687b      	ldr	r3, [r7, #4]
}
 80102d4:	4618      	mov	r0, r3
 80102d6:	370c      	adds	r7, #12
 80102d8:	46bd      	mov	sp, r7
 80102da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102de:	4770      	bx	lr
 80102e0:	20007234 	.word	0x20007234

080102e4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80102e4:	b480      	push	{r7}
 80102e6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80102e8:	4b07      	ldr	r3, [pc, #28]	@ (8010308 <pvTaskIncrementMutexHeldCount+0x24>)
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d004      	beq.n	80102fa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80102f0:	4b05      	ldr	r3, [pc, #20]	@ (8010308 <pvTaskIncrementMutexHeldCount+0x24>)
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80102f6:	3201      	adds	r2, #1
 80102f8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80102fa:	4b03      	ldr	r3, [pc, #12]	@ (8010308 <pvTaskIncrementMutexHeldCount+0x24>)
 80102fc:	681b      	ldr	r3, [r3, #0]
	}
 80102fe:	4618      	mov	r0, r3
 8010300:	46bd      	mov	sp, r7
 8010302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010306:	4770      	bx	lr
 8010308:	20007234 	.word	0x20007234

0801030c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801030c:	b580      	push	{r7, lr}
 801030e:	b084      	sub	sp, #16
 8010310:	af00      	add	r7, sp, #0
 8010312:	6078      	str	r0, [r7, #4]
 8010314:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010316:	4b21      	ldr	r3, [pc, #132]	@ (801039c <prvAddCurrentTaskToDelayedList+0x90>)
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801031c:	4b20      	ldr	r3, [pc, #128]	@ (80103a0 <prvAddCurrentTaskToDelayedList+0x94>)
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	3304      	adds	r3, #4
 8010322:	4618      	mov	r0, r3
 8010324:	f7fd fda4 	bl	800de70 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801032e:	d10a      	bne.n	8010346 <prvAddCurrentTaskToDelayedList+0x3a>
 8010330:	683b      	ldr	r3, [r7, #0]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d007      	beq.n	8010346 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010336:	4b1a      	ldr	r3, [pc, #104]	@ (80103a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	3304      	adds	r3, #4
 801033c:	4619      	mov	r1, r3
 801033e:	4819      	ldr	r0, [pc, #100]	@ (80103a4 <prvAddCurrentTaskToDelayedList+0x98>)
 8010340:	f7fd fd39 	bl	800ddb6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010344:	e026      	b.n	8010394 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010346:	68fa      	ldr	r2, [r7, #12]
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	4413      	add	r3, r2
 801034c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801034e:	4b14      	ldr	r3, [pc, #80]	@ (80103a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	68ba      	ldr	r2, [r7, #8]
 8010354:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010356:	68ba      	ldr	r2, [r7, #8]
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	429a      	cmp	r2, r3
 801035c:	d209      	bcs.n	8010372 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801035e:	4b12      	ldr	r3, [pc, #72]	@ (80103a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010360:	681a      	ldr	r2, [r3, #0]
 8010362:	4b0f      	ldr	r3, [pc, #60]	@ (80103a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	3304      	adds	r3, #4
 8010368:	4619      	mov	r1, r3
 801036a:	4610      	mov	r0, r2
 801036c:	f7fd fd47 	bl	800ddfe <vListInsert>
}
 8010370:	e010      	b.n	8010394 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010372:	4b0e      	ldr	r3, [pc, #56]	@ (80103ac <prvAddCurrentTaskToDelayedList+0xa0>)
 8010374:	681a      	ldr	r2, [r3, #0]
 8010376:	4b0a      	ldr	r3, [pc, #40]	@ (80103a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	3304      	adds	r3, #4
 801037c:	4619      	mov	r1, r3
 801037e:	4610      	mov	r0, r2
 8010380:	f7fd fd3d 	bl	800ddfe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010384:	4b0a      	ldr	r3, [pc, #40]	@ (80103b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	68ba      	ldr	r2, [r7, #8]
 801038a:	429a      	cmp	r2, r3
 801038c:	d202      	bcs.n	8010394 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801038e:	4a08      	ldr	r2, [pc, #32]	@ (80103b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010390:	68bb      	ldr	r3, [r7, #8]
 8010392:	6013      	str	r3, [r2, #0]
}
 8010394:	bf00      	nop
 8010396:	3710      	adds	r7, #16
 8010398:	46bd      	mov	sp, r7
 801039a:	bd80      	pop	{r7, pc}
 801039c:	200076f4 	.word	0x200076f4
 80103a0:	20007234 	.word	0x20007234
 80103a4:	200076dc 	.word	0x200076dc
 80103a8:	200076c4 	.word	0x200076c4
 80103ac:	200076c0 	.word	0x200076c0
 80103b0:	20007710 	.word	0x20007710

080103b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b08a      	sub	sp, #40	@ 0x28
 80103b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80103ba:	2300      	movs	r3, #0
 80103bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80103be:	f000 fb21 	bl	8010a04 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80103c2:	4b1e      	ldr	r3, [pc, #120]	@ (801043c <xTimerCreateTimerTask+0x88>)
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d021      	beq.n	801040e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80103ca:	2300      	movs	r3, #0
 80103cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80103ce:	2300      	movs	r3, #0
 80103d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80103d2:	1d3a      	adds	r2, r7, #4
 80103d4:	f107 0108 	add.w	r1, r7, #8
 80103d8:	f107 030c 	add.w	r3, r7, #12
 80103dc:	4618      	mov	r0, r3
 80103de:	f7fd fa9d 	bl	800d91c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80103e2:	6879      	ldr	r1, [r7, #4]
 80103e4:	68bb      	ldr	r3, [r7, #8]
 80103e6:	68fa      	ldr	r2, [r7, #12]
 80103e8:	9202      	str	r2, [sp, #8]
 80103ea:	9301      	str	r3, [sp, #4]
 80103ec:	2302      	movs	r3, #2
 80103ee:	9300      	str	r3, [sp, #0]
 80103f0:	2300      	movs	r3, #0
 80103f2:	460a      	mov	r2, r1
 80103f4:	4912      	ldr	r1, [pc, #72]	@ (8010440 <xTimerCreateTimerTask+0x8c>)
 80103f6:	4813      	ldr	r0, [pc, #76]	@ (8010444 <xTimerCreateTimerTask+0x90>)
 80103f8:	f7fe fed6 	bl	800f1a8 <xTaskCreateStatic>
 80103fc:	4603      	mov	r3, r0
 80103fe:	4a12      	ldr	r2, [pc, #72]	@ (8010448 <xTimerCreateTimerTask+0x94>)
 8010400:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010402:	4b11      	ldr	r3, [pc, #68]	@ (8010448 <xTimerCreateTimerTask+0x94>)
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d001      	beq.n	801040e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801040a:	2301      	movs	r3, #1
 801040c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801040e:	697b      	ldr	r3, [r7, #20]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d10d      	bne.n	8010430 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8010414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010418:	b672      	cpsid	i
 801041a:	f383 8811 	msr	BASEPRI, r3
 801041e:	f3bf 8f6f 	isb	sy
 8010422:	f3bf 8f4f 	dsb	sy
 8010426:	b662      	cpsie	i
 8010428:	613b      	str	r3, [r7, #16]
}
 801042a:	bf00      	nop
 801042c:	bf00      	nop
 801042e:	e7fd      	b.n	801042c <xTimerCreateTimerTask+0x78>
	return xReturn;
 8010430:	697b      	ldr	r3, [r7, #20]
}
 8010432:	4618      	mov	r0, r3
 8010434:	3718      	adds	r7, #24
 8010436:	46bd      	mov	sp, r7
 8010438:	bd80      	pop	{r7, pc}
 801043a:	bf00      	nop
 801043c:	2000774c 	.word	0x2000774c
 8010440:	080225d4 	.word	0x080225d4
 8010444:	0801058d 	.word	0x0801058d
 8010448:	20007750 	.word	0x20007750

0801044c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b08a      	sub	sp, #40	@ 0x28
 8010450:	af00      	add	r7, sp, #0
 8010452:	60f8      	str	r0, [r7, #12]
 8010454:	60b9      	str	r1, [r7, #8]
 8010456:	607a      	str	r2, [r7, #4]
 8010458:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801045a:	2300      	movs	r3, #0
 801045c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	2b00      	cmp	r3, #0
 8010462:	d10d      	bne.n	8010480 <xTimerGenericCommand+0x34>
	__asm volatile
 8010464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010468:	b672      	cpsid	i
 801046a:	f383 8811 	msr	BASEPRI, r3
 801046e:	f3bf 8f6f 	isb	sy
 8010472:	f3bf 8f4f 	dsb	sy
 8010476:	b662      	cpsie	i
 8010478:	623b      	str	r3, [r7, #32]
}
 801047a:	bf00      	nop
 801047c:	bf00      	nop
 801047e:	e7fd      	b.n	801047c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010480:	4b19      	ldr	r3, [pc, #100]	@ (80104e8 <xTimerGenericCommand+0x9c>)
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d02a      	beq.n	80104de <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010488:	68bb      	ldr	r3, [r7, #8]
 801048a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010494:	68bb      	ldr	r3, [r7, #8]
 8010496:	2b05      	cmp	r3, #5
 8010498:	dc18      	bgt.n	80104cc <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801049a:	f7ff fd89 	bl	800ffb0 <xTaskGetSchedulerState>
 801049e:	4603      	mov	r3, r0
 80104a0:	2b02      	cmp	r3, #2
 80104a2:	d109      	bne.n	80104b8 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80104a4:	4b10      	ldr	r3, [pc, #64]	@ (80104e8 <xTimerGenericCommand+0x9c>)
 80104a6:	6818      	ldr	r0, [r3, #0]
 80104a8:	f107 0110 	add.w	r1, r7, #16
 80104ac:	2300      	movs	r3, #0
 80104ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80104b0:	f7fd ff94 	bl	800e3dc <xQueueGenericSend>
 80104b4:	6278      	str	r0, [r7, #36]	@ 0x24
 80104b6:	e012      	b.n	80104de <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80104b8:	4b0b      	ldr	r3, [pc, #44]	@ (80104e8 <xTimerGenericCommand+0x9c>)
 80104ba:	6818      	ldr	r0, [r3, #0]
 80104bc:	f107 0110 	add.w	r1, r7, #16
 80104c0:	2300      	movs	r3, #0
 80104c2:	2200      	movs	r2, #0
 80104c4:	f7fd ff8a 	bl	800e3dc <xQueueGenericSend>
 80104c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80104ca:	e008      	b.n	80104de <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80104cc:	4b06      	ldr	r3, [pc, #24]	@ (80104e8 <xTimerGenericCommand+0x9c>)
 80104ce:	6818      	ldr	r0, [r3, #0]
 80104d0:	f107 0110 	add.w	r1, r7, #16
 80104d4:	2300      	movs	r3, #0
 80104d6:	683a      	ldr	r2, [r7, #0]
 80104d8:	f7fe f88a 	bl	800e5f0 <xQueueGenericSendFromISR>
 80104dc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80104de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80104e0:	4618      	mov	r0, r3
 80104e2:	3728      	adds	r7, #40	@ 0x28
 80104e4:	46bd      	mov	sp, r7
 80104e6:	bd80      	pop	{r7, pc}
 80104e8:	2000774c 	.word	0x2000774c

080104ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b088      	sub	sp, #32
 80104f0:	af02      	add	r7, sp, #8
 80104f2:	6078      	str	r0, [r7, #4]
 80104f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80104f6:	4b24      	ldr	r3, [pc, #144]	@ (8010588 <prvProcessExpiredTimer+0x9c>)
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	68db      	ldr	r3, [r3, #12]
 80104fc:	68db      	ldr	r3, [r3, #12]
 80104fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010500:	697b      	ldr	r3, [r7, #20]
 8010502:	3304      	adds	r3, #4
 8010504:	4618      	mov	r0, r3
 8010506:	f7fd fcb3 	bl	800de70 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801050a:	697b      	ldr	r3, [r7, #20]
 801050c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010510:	f003 0304 	and.w	r3, r3, #4
 8010514:	2b00      	cmp	r3, #0
 8010516:	d025      	beq.n	8010564 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010518:	697b      	ldr	r3, [r7, #20]
 801051a:	699a      	ldr	r2, [r3, #24]
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	18d1      	adds	r1, r2, r3
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	683a      	ldr	r2, [r7, #0]
 8010524:	6978      	ldr	r0, [r7, #20]
 8010526:	f000 f8d7 	bl	80106d8 <prvInsertTimerInActiveList>
 801052a:	4603      	mov	r3, r0
 801052c:	2b00      	cmp	r3, #0
 801052e:	d022      	beq.n	8010576 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010530:	2300      	movs	r3, #0
 8010532:	9300      	str	r3, [sp, #0]
 8010534:	2300      	movs	r3, #0
 8010536:	687a      	ldr	r2, [r7, #4]
 8010538:	2100      	movs	r1, #0
 801053a:	6978      	ldr	r0, [r7, #20]
 801053c:	f7ff ff86 	bl	801044c <xTimerGenericCommand>
 8010540:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010542:	693b      	ldr	r3, [r7, #16]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d116      	bne.n	8010576 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8010548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801054c:	b672      	cpsid	i
 801054e:	f383 8811 	msr	BASEPRI, r3
 8010552:	f3bf 8f6f 	isb	sy
 8010556:	f3bf 8f4f 	dsb	sy
 801055a:	b662      	cpsie	i
 801055c:	60fb      	str	r3, [r7, #12]
}
 801055e:	bf00      	nop
 8010560:	bf00      	nop
 8010562:	e7fd      	b.n	8010560 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010564:	697b      	ldr	r3, [r7, #20]
 8010566:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801056a:	f023 0301 	bic.w	r3, r3, #1
 801056e:	b2da      	uxtb	r2, r3
 8010570:	697b      	ldr	r3, [r7, #20]
 8010572:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010576:	697b      	ldr	r3, [r7, #20]
 8010578:	6a1b      	ldr	r3, [r3, #32]
 801057a:	6978      	ldr	r0, [r7, #20]
 801057c:	4798      	blx	r3
}
 801057e:	bf00      	nop
 8010580:	3718      	adds	r7, #24
 8010582:	46bd      	mov	sp, r7
 8010584:	bd80      	pop	{r7, pc}
 8010586:	bf00      	nop
 8010588:	20007744 	.word	0x20007744

0801058c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801058c:	b580      	push	{r7, lr}
 801058e:	b084      	sub	sp, #16
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010594:	f107 0308 	add.w	r3, r7, #8
 8010598:	4618      	mov	r0, r3
 801059a:	f000 f859 	bl	8010650 <prvGetNextExpireTime>
 801059e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80105a0:	68bb      	ldr	r3, [r7, #8]
 80105a2:	4619      	mov	r1, r3
 80105a4:	68f8      	ldr	r0, [r7, #12]
 80105a6:	f000 f805 	bl	80105b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80105aa:	f000 f8d7 	bl	801075c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80105ae:	bf00      	nop
 80105b0:	e7f0      	b.n	8010594 <prvTimerTask+0x8>
	...

080105b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b084      	sub	sp, #16
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
 80105bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80105be:	f7ff f865 	bl	800f68c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80105c2:	f107 0308 	add.w	r3, r7, #8
 80105c6:	4618      	mov	r0, r3
 80105c8:	f000 f866 	bl	8010698 <prvSampleTimeNow>
 80105cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80105ce:	68bb      	ldr	r3, [r7, #8]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d130      	bne.n	8010636 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80105d4:	683b      	ldr	r3, [r7, #0]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d10a      	bne.n	80105f0 <prvProcessTimerOrBlockTask+0x3c>
 80105da:	687a      	ldr	r2, [r7, #4]
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	429a      	cmp	r2, r3
 80105e0:	d806      	bhi.n	80105f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80105e2:	f7ff f861 	bl	800f6a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80105e6:	68f9      	ldr	r1, [r7, #12]
 80105e8:	6878      	ldr	r0, [r7, #4]
 80105ea:	f7ff ff7f 	bl	80104ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80105ee:	e024      	b.n	801063a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80105f0:	683b      	ldr	r3, [r7, #0]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d008      	beq.n	8010608 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80105f6:	4b13      	ldr	r3, [pc, #76]	@ (8010644 <prvProcessTimerOrBlockTask+0x90>)
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d101      	bne.n	8010604 <prvProcessTimerOrBlockTask+0x50>
 8010600:	2301      	movs	r3, #1
 8010602:	e000      	b.n	8010606 <prvProcessTimerOrBlockTask+0x52>
 8010604:	2300      	movs	r3, #0
 8010606:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010608:	4b0f      	ldr	r3, [pc, #60]	@ (8010648 <prvProcessTimerOrBlockTask+0x94>)
 801060a:	6818      	ldr	r0, [r3, #0]
 801060c:	687a      	ldr	r2, [r7, #4]
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	1ad3      	subs	r3, r2, r3
 8010612:	683a      	ldr	r2, [r7, #0]
 8010614:	4619      	mov	r1, r3
 8010616:	f7fe fd93 	bl	800f140 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801061a:	f7ff f845 	bl	800f6a8 <xTaskResumeAll>
 801061e:	4603      	mov	r3, r0
 8010620:	2b00      	cmp	r3, #0
 8010622:	d10a      	bne.n	801063a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010624:	4b09      	ldr	r3, [pc, #36]	@ (801064c <prvProcessTimerOrBlockTask+0x98>)
 8010626:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801062a:	601a      	str	r2, [r3, #0]
 801062c:	f3bf 8f4f 	dsb	sy
 8010630:	f3bf 8f6f 	isb	sy
}
 8010634:	e001      	b.n	801063a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010636:	f7ff f837 	bl	800f6a8 <xTaskResumeAll>
}
 801063a:	bf00      	nop
 801063c:	3710      	adds	r7, #16
 801063e:	46bd      	mov	sp, r7
 8010640:	bd80      	pop	{r7, pc}
 8010642:	bf00      	nop
 8010644:	20007748 	.word	0x20007748
 8010648:	2000774c 	.word	0x2000774c
 801064c:	e000ed04 	.word	0xe000ed04

08010650 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010650:	b480      	push	{r7}
 8010652:	b085      	sub	sp, #20
 8010654:	af00      	add	r7, sp, #0
 8010656:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010658:	4b0e      	ldr	r3, [pc, #56]	@ (8010694 <prvGetNextExpireTime+0x44>)
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d101      	bne.n	8010666 <prvGetNextExpireTime+0x16>
 8010662:	2201      	movs	r2, #1
 8010664:	e000      	b.n	8010668 <prvGetNextExpireTime+0x18>
 8010666:	2200      	movs	r2, #0
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	2b00      	cmp	r3, #0
 8010672:	d105      	bne.n	8010680 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010674:	4b07      	ldr	r3, [pc, #28]	@ (8010694 <prvGetNextExpireTime+0x44>)
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	68db      	ldr	r3, [r3, #12]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	60fb      	str	r3, [r7, #12]
 801067e:	e001      	b.n	8010684 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010680:	2300      	movs	r3, #0
 8010682:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010684:	68fb      	ldr	r3, [r7, #12]
}
 8010686:	4618      	mov	r0, r3
 8010688:	3714      	adds	r7, #20
 801068a:	46bd      	mov	sp, r7
 801068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010690:	4770      	bx	lr
 8010692:	bf00      	nop
 8010694:	20007744 	.word	0x20007744

08010698 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010698:	b580      	push	{r7, lr}
 801069a:	b084      	sub	sp, #16
 801069c:	af00      	add	r7, sp, #0
 801069e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80106a0:	f7ff f8a2 	bl	800f7e8 <xTaskGetTickCount>
 80106a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80106a6:	4b0b      	ldr	r3, [pc, #44]	@ (80106d4 <prvSampleTimeNow+0x3c>)
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	68fa      	ldr	r2, [r7, #12]
 80106ac:	429a      	cmp	r2, r3
 80106ae:	d205      	bcs.n	80106bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80106b0:	f000 f940 	bl	8010934 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	2201      	movs	r2, #1
 80106b8:	601a      	str	r2, [r3, #0]
 80106ba:	e002      	b.n	80106c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	2200      	movs	r2, #0
 80106c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80106c2:	4a04      	ldr	r2, [pc, #16]	@ (80106d4 <prvSampleTimeNow+0x3c>)
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80106c8:	68fb      	ldr	r3, [r7, #12]
}
 80106ca:	4618      	mov	r0, r3
 80106cc:	3710      	adds	r7, #16
 80106ce:	46bd      	mov	sp, r7
 80106d0:	bd80      	pop	{r7, pc}
 80106d2:	bf00      	nop
 80106d4:	20007754 	.word	0x20007754

080106d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80106d8:	b580      	push	{r7, lr}
 80106da:	b086      	sub	sp, #24
 80106dc:	af00      	add	r7, sp, #0
 80106de:	60f8      	str	r0, [r7, #12]
 80106e0:	60b9      	str	r1, [r7, #8]
 80106e2:	607a      	str	r2, [r7, #4]
 80106e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80106e6:	2300      	movs	r3, #0
 80106e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	68ba      	ldr	r2, [r7, #8]
 80106ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	68fa      	ldr	r2, [r7, #12]
 80106f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80106f6:	68ba      	ldr	r2, [r7, #8]
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	429a      	cmp	r2, r3
 80106fc:	d812      	bhi.n	8010724 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80106fe:	687a      	ldr	r2, [r7, #4]
 8010700:	683b      	ldr	r3, [r7, #0]
 8010702:	1ad2      	subs	r2, r2, r3
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	699b      	ldr	r3, [r3, #24]
 8010708:	429a      	cmp	r2, r3
 801070a:	d302      	bcc.n	8010712 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801070c:	2301      	movs	r3, #1
 801070e:	617b      	str	r3, [r7, #20]
 8010710:	e01b      	b.n	801074a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010712:	4b10      	ldr	r3, [pc, #64]	@ (8010754 <prvInsertTimerInActiveList+0x7c>)
 8010714:	681a      	ldr	r2, [r3, #0]
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	3304      	adds	r3, #4
 801071a:	4619      	mov	r1, r3
 801071c:	4610      	mov	r0, r2
 801071e:	f7fd fb6e 	bl	800ddfe <vListInsert>
 8010722:	e012      	b.n	801074a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010724:	687a      	ldr	r2, [r7, #4]
 8010726:	683b      	ldr	r3, [r7, #0]
 8010728:	429a      	cmp	r2, r3
 801072a:	d206      	bcs.n	801073a <prvInsertTimerInActiveList+0x62>
 801072c:	68ba      	ldr	r2, [r7, #8]
 801072e:	683b      	ldr	r3, [r7, #0]
 8010730:	429a      	cmp	r2, r3
 8010732:	d302      	bcc.n	801073a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010734:	2301      	movs	r3, #1
 8010736:	617b      	str	r3, [r7, #20]
 8010738:	e007      	b.n	801074a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801073a:	4b07      	ldr	r3, [pc, #28]	@ (8010758 <prvInsertTimerInActiveList+0x80>)
 801073c:	681a      	ldr	r2, [r3, #0]
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	3304      	adds	r3, #4
 8010742:	4619      	mov	r1, r3
 8010744:	4610      	mov	r0, r2
 8010746:	f7fd fb5a 	bl	800ddfe <vListInsert>
		}
	}

	return xProcessTimerNow;
 801074a:	697b      	ldr	r3, [r7, #20]
}
 801074c:	4618      	mov	r0, r3
 801074e:	3718      	adds	r7, #24
 8010750:	46bd      	mov	sp, r7
 8010752:	bd80      	pop	{r7, pc}
 8010754:	20007748 	.word	0x20007748
 8010758:	20007744 	.word	0x20007744

0801075c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801075c:	b580      	push	{r7, lr}
 801075e:	b08e      	sub	sp, #56	@ 0x38
 8010760:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010762:	e0d4      	b.n	801090e <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	2b00      	cmp	r3, #0
 8010768:	da1b      	bge.n	80107a2 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801076a:	1d3b      	adds	r3, r7, #4
 801076c:	3304      	adds	r3, #4
 801076e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010772:	2b00      	cmp	r3, #0
 8010774:	d10d      	bne.n	8010792 <prvProcessReceivedCommands+0x36>
	__asm volatile
 8010776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801077a:	b672      	cpsid	i
 801077c:	f383 8811 	msr	BASEPRI, r3
 8010780:	f3bf 8f6f 	isb	sy
 8010784:	f3bf 8f4f 	dsb	sy
 8010788:	b662      	cpsie	i
 801078a:	61fb      	str	r3, [r7, #28]
}
 801078c:	bf00      	nop
 801078e:	bf00      	nop
 8010790:	e7fd      	b.n	801078e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010798:	6850      	ldr	r0, [r2, #4]
 801079a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801079c:	6892      	ldr	r2, [r2, #8]
 801079e:	4611      	mov	r1, r2
 80107a0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	f2c0 80b2 	blt.w	801090e <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80107ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107b0:	695b      	ldr	r3, [r3, #20]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d004      	beq.n	80107c0 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80107b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107b8:	3304      	adds	r3, #4
 80107ba:	4618      	mov	r0, r3
 80107bc:	f7fd fb58 	bl	800de70 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80107c0:	463b      	mov	r3, r7
 80107c2:	4618      	mov	r0, r3
 80107c4:	f7ff ff68 	bl	8010698 <prvSampleTimeNow>
 80107c8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	2b09      	cmp	r3, #9
 80107ce:	f200 809b 	bhi.w	8010908 <prvProcessReceivedCommands+0x1ac>
 80107d2:	a201      	add	r2, pc, #4	@ (adr r2, 80107d8 <prvProcessReceivedCommands+0x7c>)
 80107d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107d8:	08010801 	.word	0x08010801
 80107dc:	08010801 	.word	0x08010801
 80107e0:	08010801 	.word	0x08010801
 80107e4:	0801087b 	.word	0x0801087b
 80107e8:	0801088f 	.word	0x0801088f
 80107ec:	080108df 	.word	0x080108df
 80107f0:	08010801 	.word	0x08010801
 80107f4:	08010801 	.word	0x08010801
 80107f8:	0801087b 	.word	0x0801087b
 80107fc:	0801088f 	.word	0x0801088f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010802:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010806:	f043 0301 	orr.w	r3, r3, #1
 801080a:	b2da      	uxtb	r2, r3
 801080c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801080e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010812:	68ba      	ldr	r2, [r7, #8]
 8010814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010816:	699b      	ldr	r3, [r3, #24]
 8010818:	18d1      	adds	r1, r2, r3
 801081a:	68bb      	ldr	r3, [r7, #8]
 801081c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801081e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010820:	f7ff ff5a 	bl	80106d8 <prvInsertTimerInActiveList>
 8010824:	4603      	mov	r3, r0
 8010826:	2b00      	cmp	r3, #0
 8010828:	d070      	beq.n	801090c <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801082a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801082c:	6a1b      	ldr	r3, [r3, #32]
 801082e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010830:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010834:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010838:	f003 0304 	and.w	r3, r3, #4
 801083c:	2b00      	cmp	r3, #0
 801083e:	d065      	beq.n	801090c <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010840:	68ba      	ldr	r2, [r7, #8]
 8010842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010844:	699b      	ldr	r3, [r3, #24]
 8010846:	441a      	add	r2, r3
 8010848:	2300      	movs	r3, #0
 801084a:	9300      	str	r3, [sp, #0]
 801084c:	2300      	movs	r3, #0
 801084e:	2100      	movs	r1, #0
 8010850:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010852:	f7ff fdfb 	bl	801044c <xTimerGenericCommand>
 8010856:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010858:	6a3b      	ldr	r3, [r7, #32]
 801085a:	2b00      	cmp	r3, #0
 801085c:	d156      	bne.n	801090c <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 801085e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010862:	b672      	cpsid	i
 8010864:	f383 8811 	msr	BASEPRI, r3
 8010868:	f3bf 8f6f 	isb	sy
 801086c:	f3bf 8f4f 	dsb	sy
 8010870:	b662      	cpsie	i
 8010872:	61bb      	str	r3, [r7, #24]
}
 8010874:	bf00      	nop
 8010876:	bf00      	nop
 8010878:	e7fd      	b.n	8010876 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801087a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801087c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010880:	f023 0301 	bic.w	r3, r3, #1
 8010884:	b2da      	uxtb	r2, r3
 8010886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010888:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801088c:	e03f      	b.n	801090e <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801088e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010890:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010894:	f043 0301 	orr.w	r3, r3, #1
 8010898:	b2da      	uxtb	r2, r3
 801089a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801089c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80108a0:	68ba      	ldr	r2, [r7, #8]
 80108a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108a4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80108a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108a8:	699b      	ldr	r3, [r3, #24]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d10d      	bne.n	80108ca <prvProcessReceivedCommands+0x16e>
	__asm volatile
 80108ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108b2:	b672      	cpsid	i
 80108b4:	f383 8811 	msr	BASEPRI, r3
 80108b8:	f3bf 8f6f 	isb	sy
 80108bc:	f3bf 8f4f 	dsb	sy
 80108c0:	b662      	cpsie	i
 80108c2:	617b      	str	r3, [r7, #20]
}
 80108c4:	bf00      	nop
 80108c6:	bf00      	nop
 80108c8:	e7fd      	b.n	80108c6 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80108ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108cc:	699a      	ldr	r2, [r3, #24]
 80108ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108d0:	18d1      	adds	r1, r2, r3
 80108d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80108d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80108d8:	f7ff fefe 	bl	80106d8 <prvInsertTimerInActiveList>
					break;
 80108dc:	e017      	b.n	801090e <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80108de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80108e4:	f003 0302 	and.w	r3, r3, #2
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d103      	bne.n	80108f4 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 80108ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80108ee:	f000 fbf5 	bl	80110dc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80108f2:	e00c      	b.n	801090e <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80108f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80108fa:	f023 0301 	bic.w	r3, r3, #1
 80108fe:	b2da      	uxtb	r2, r3
 8010900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010902:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010906:	e002      	b.n	801090e <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8010908:	bf00      	nop
 801090a:	e000      	b.n	801090e <prvProcessReceivedCommands+0x1b2>
					break;
 801090c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801090e:	4b08      	ldr	r3, [pc, #32]	@ (8010930 <prvProcessReceivedCommands+0x1d4>)
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	1d39      	adds	r1, r7, #4
 8010914:	2200      	movs	r2, #0
 8010916:	4618      	mov	r0, r3
 8010918:	f7fd ffa6 	bl	800e868 <xQueueReceive>
 801091c:	4603      	mov	r3, r0
 801091e:	2b00      	cmp	r3, #0
 8010920:	f47f af20 	bne.w	8010764 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010924:	bf00      	nop
 8010926:	bf00      	nop
 8010928:	3730      	adds	r7, #48	@ 0x30
 801092a:	46bd      	mov	sp, r7
 801092c:	bd80      	pop	{r7, pc}
 801092e:	bf00      	nop
 8010930:	2000774c 	.word	0x2000774c

08010934 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010934:	b580      	push	{r7, lr}
 8010936:	b088      	sub	sp, #32
 8010938:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801093a:	e04b      	b.n	80109d4 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801093c:	4b2f      	ldr	r3, [pc, #188]	@ (80109fc <prvSwitchTimerLists+0xc8>)
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	68db      	ldr	r3, [r3, #12]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010946:	4b2d      	ldr	r3, [pc, #180]	@ (80109fc <prvSwitchTimerLists+0xc8>)
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	68db      	ldr	r3, [r3, #12]
 801094c:	68db      	ldr	r3, [r3, #12]
 801094e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	3304      	adds	r3, #4
 8010954:	4618      	mov	r0, r3
 8010956:	f7fd fa8b 	bl	800de70 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	6a1b      	ldr	r3, [r3, #32]
 801095e:	68f8      	ldr	r0, [r7, #12]
 8010960:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010968:	f003 0304 	and.w	r3, r3, #4
 801096c:	2b00      	cmp	r3, #0
 801096e:	d031      	beq.n	80109d4 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	699b      	ldr	r3, [r3, #24]
 8010974:	693a      	ldr	r2, [r7, #16]
 8010976:	4413      	add	r3, r2
 8010978:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801097a:	68ba      	ldr	r2, [r7, #8]
 801097c:	693b      	ldr	r3, [r7, #16]
 801097e:	429a      	cmp	r2, r3
 8010980:	d90e      	bls.n	80109a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	68ba      	ldr	r2, [r7, #8]
 8010986:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	68fa      	ldr	r2, [r7, #12]
 801098c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801098e:	4b1b      	ldr	r3, [pc, #108]	@ (80109fc <prvSwitchTimerLists+0xc8>)
 8010990:	681a      	ldr	r2, [r3, #0]
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	3304      	adds	r3, #4
 8010996:	4619      	mov	r1, r3
 8010998:	4610      	mov	r0, r2
 801099a:	f7fd fa30 	bl	800ddfe <vListInsert>
 801099e:	e019      	b.n	80109d4 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80109a0:	2300      	movs	r3, #0
 80109a2:	9300      	str	r3, [sp, #0]
 80109a4:	2300      	movs	r3, #0
 80109a6:	693a      	ldr	r2, [r7, #16]
 80109a8:	2100      	movs	r1, #0
 80109aa:	68f8      	ldr	r0, [r7, #12]
 80109ac:	f7ff fd4e 	bl	801044c <xTimerGenericCommand>
 80109b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d10d      	bne.n	80109d4 <prvSwitchTimerLists+0xa0>
	__asm volatile
 80109b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109bc:	b672      	cpsid	i
 80109be:	f383 8811 	msr	BASEPRI, r3
 80109c2:	f3bf 8f6f 	isb	sy
 80109c6:	f3bf 8f4f 	dsb	sy
 80109ca:	b662      	cpsie	i
 80109cc:	603b      	str	r3, [r7, #0]
}
 80109ce:	bf00      	nop
 80109d0:	bf00      	nop
 80109d2:	e7fd      	b.n	80109d0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80109d4:	4b09      	ldr	r3, [pc, #36]	@ (80109fc <prvSwitchTimerLists+0xc8>)
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d1ae      	bne.n	801093c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80109de:	4b07      	ldr	r3, [pc, #28]	@ (80109fc <prvSwitchTimerLists+0xc8>)
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80109e4:	4b06      	ldr	r3, [pc, #24]	@ (8010a00 <prvSwitchTimerLists+0xcc>)
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	4a04      	ldr	r2, [pc, #16]	@ (80109fc <prvSwitchTimerLists+0xc8>)
 80109ea:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80109ec:	4a04      	ldr	r2, [pc, #16]	@ (8010a00 <prvSwitchTimerLists+0xcc>)
 80109ee:	697b      	ldr	r3, [r7, #20]
 80109f0:	6013      	str	r3, [r2, #0]
}
 80109f2:	bf00      	nop
 80109f4:	3718      	adds	r7, #24
 80109f6:	46bd      	mov	sp, r7
 80109f8:	bd80      	pop	{r7, pc}
 80109fa:	bf00      	nop
 80109fc:	20007744 	.word	0x20007744
 8010a00:	20007748 	.word	0x20007748

08010a04 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010a04:	b580      	push	{r7, lr}
 8010a06:	b082      	sub	sp, #8
 8010a08:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010a0a:	f000 f967 	bl	8010cdc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010a0e:	4b15      	ldr	r3, [pc, #84]	@ (8010a64 <prvCheckForValidListAndQueue+0x60>)
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d120      	bne.n	8010a58 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010a16:	4814      	ldr	r0, [pc, #80]	@ (8010a68 <prvCheckForValidListAndQueue+0x64>)
 8010a18:	f7fd f9a0 	bl	800dd5c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010a1c:	4813      	ldr	r0, [pc, #76]	@ (8010a6c <prvCheckForValidListAndQueue+0x68>)
 8010a1e:	f7fd f99d 	bl	800dd5c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010a22:	4b13      	ldr	r3, [pc, #76]	@ (8010a70 <prvCheckForValidListAndQueue+0x6c>)
 8010a24:	4a10      	ldr	r2, [pc, #64]	@ (8010a68 <prvCheckForValidListAndQueue+0x64>)
 8010a26:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010a28:	4b12      	ldr	r3, [pc, #72]	@ (8010a74 <prvCheckForValidListAndQueue+0x70>)
 8010a2a:	4a10      	ldr	r2, [pc, #64]	@ (8010a6c <prvCheckForValidListAndQueue+0x68>)
 8010a2c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010a2e:	2300      	movs	r3, #0
 8010a30:	9300      	str	r3, [sp, #0]
 8010a32:	4b11      	ldr	r3, [pc, #68]	@ (8010a78 <prvCheckForValidListAndQueue+0x74>)
 8010a34:	4a11      	ldr	r2, [pc, #68]	@ (8010a7c <prvCheckForValidListAndQueue+0x78>)
 8010a36:	2110      	movs	r1, #16
 8010a38:	200a      	movs	r0, #10
 8010a3a:	f7fd faaf 	bl	800df9c <xQueueGenericCreateStatic>
 8010a3e:	4603      	mov	r3, r0
 8010a40:	4a08      	ldr	r2, [pc, #32]	@ (8010a64 <prvCheckForValidListAndQueue+0x60>)
 8010a42:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010a44:	4b07      	ldr	r3, [pc, #28]	@ (8010a64 <prvCheckForValidListAndQueue+0x60>)
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d005      	beq.n	8010a58 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010a4c:	4b05      	ldr	r3, [pc, #20]	@ (8010a64 <prvCheckForValidListAndQueue+0x60>)
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	490b      	ldr	r1, [pc, #44]	@ (8010a80 <prvCheckForValidListAndQueue+0x7c>)
 8010a52:	4618      	mov	r0, r3
 8010a54:	f7fe fb20 	bl	800f098 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010a58:	f000 f976 	bl	8010d48 <vPortExitCritical>
}
 8010a5c:	bf00      	nop
 8010a5e:	46bd      	mov	sp, r7
 8010a60:	bd80      	pop	{r7, pc}
 8010a62:	bf00      	nop
 8010a64:	2000774c 	.word	0x2000774c
 8010a68:	2000771c 	.word	0x2000771c
 8010a6c:	20007730 	.word	0x20007730
 8010a70:	20007744 	.word	0x20007744
 8010a74:	20007748 	.word	0x20007748
 8010a78:	200077f8 	.word	0x200077f8
 8010a7c:	20007758 	.word	0x20007758
 8010a80:	080225dc 	.word	0x080225dc

08010a84 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b08a      	sub	sp, #40	@ 0x28
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	60f8      	str	r0, [r7, #12]
 8010a8c:	60b9      	str	r1, [r7, #8]
 8010a8e:	607a      	str	r2, [r7, #4]
 8010a90:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8010a92:	f06f 0301 	mvn.w	r3, #1
 8010a96:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8010a9c:	68bb      	ldr	r3, [r7, #8]
 8010a9e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010aa4:	4b06      	ldr	r3, [pc, #24]	@ (8010ac0 <xTimerPendFunctionCallFromISR+0x3c>)
 8010aa6:	6818      	ldr	r0, [r3, #0]
 8010aa8:	f107 0114 	add.w	r1, r7, #20
 8010aac:	2300      	movs	r3, #0
 8010aae:	683a      	ldr	r2, [r7, #0]
 8010ab0:	f7fd fd9e 	bl	800e5f0 <xQueueGenericSendFromISR>
 8010ab4:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8010ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8010ab8:	4618      	mov	r0, r3
 8010aba:	3728      	adds	r7, #40	@ 0x28
 8010abc:	46bd      	mov	sp, r7
 8010abe:	bd80      	pop	{r7, pc}
 8010ac0:	2000774c 	.word	0x2000774c

08010ac4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010ac4:	b480      	push	{r7}
 8010ac6:	b085      	sub	sp, #20
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	60f8      	str	r0, [r7, #12]
 8010acc:	60b9      	str	r1, [r7, #8]
 8010ace:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	3b04      	subs	r3, #4
 8010ad4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8010adc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	3b04      	subs	r3, #4
 8010ae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010ae4:	68bb      	ldr	r3, [r7, #8]
 8010ae6:	f023 0201 	bic.w	r2, r3, #1
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	3b04      	subs	r3, #4
 8010af2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010af4:	4a0c      	ldr	r2, [pc, #48]	@ (8010b28 <pxPortInitialiseStack+0x64>)
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	3b14      	subs	r3, #20
 8010afe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010b00:	687a      	ldr	r2, [r7, #4]
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	3b04      	subs	r3, #4
 8010b0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	f06f 0202 	mvn.w	r2, #2
 8010b12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	3b20      	subs	r3, #32
 8010b18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010b1a:	68fb      	ldr	r3, [r7, #12]
}
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	3714      	adds	r7, #20
 8010b20:	46bd      	mov	sp, r7
 8010b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b26:	4770      	bx	lr
 8010b28:	08010b2d 	.word	0x08010b2d

08010b2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010b2c:	b480      	push	{r7}
 8010b2e:	b085      	sub	sp, #20
 8010b30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010b32:	2300      	movs	r3, #0
 8010b34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010b36:	4b15      	ldr	r3, [pc, #84]	@ (8010b8c <prvTaskExitError+0x60>)
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010b3e:	d00d      	beq.n	8010b5c <prvTaskExitError+0x30>
	__asm volatile
 8010b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b44:	b672      	cpsid	i
 8010b46:	f383 8811 	msr	BASEPRI, r3
 8010b4a:	f3bf 8f6f 	isb	sy
 8010b4e:	f3bf 8f4f 	dsb	sy
 8010b52:	b662      	cpsie	i
 8010b54:	60fb      	str	r3, [r7, #12]
}
 8010b56:	bf00      	nop
 8010b58:	bf00      	nop
 8010b5a:	e7fd      	b.n	8010b58 <prvTaskExitError+0x2c>
	__asm volatile
 8010b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b60:	b672      	cpsid	i
 8010b62:	f383 8811 	msr	BASEPRI, r3
 8010b66:	f3bf 8f6f 	isb	sy
 8010b6a:	f3bf 8f4f 	dsb	sy
 8010b6e:	b662      	cpsie	i
 8010b70:	60bb      	str	r3, [r7, #8]
}
 8010b72:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010b74:	bf00      	nop
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d0fc      	beq.n	8010b76 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010b7c:	bf00      	nop
 8010b7e:	bf00      	nop
 8010b80:	3714      	adds	r7, #20
 8010b82:	46bd      	mov	sp, r7
 8010b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b88:	4770      	bx	lr
 8010b8a:	bf00      	nop
 8010b8c:	20000020 	.word	0x20000020

08010b90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010b90:	4b07      	ldr	r3, [pc, #28]	@ (8010bb0 <pxCurrentTCBConst2>)
 8010b92:	6819      	ldr	r1, [r3, #0]
 8010b94:	6808      	ldr	r0, [r1, #0]
 8010b96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b9a:	f380 8809 	msr	PSP, r0
 8010b9e:	f3bf 8f6f 	isb	sy
 8010ba2:	f04f 0000 	mov.w	r0, #0
 8010ba6:	f380 8811 	msr	BASEPRI, r0
 8010baa:	4770      	bx	lr
 8010bac:	f3af 8000 	nop.w

08010bb0 <pxCurrentTCBConst2>:
 8010bb0:	20007234 	.word	0x20007234
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010bb4:	bf00      	nop
 8010bb6:	bf00      	nop

08010bb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010bb8:	4808      	ldr	r0, [pc, #32]	@ (8010bdc <prvPortStartFirstTask+0x24>)
 8010bba:	6800      	ldr	r0, [r0, #0]
 8010bbc:	6800      	ldr	r0, [r0, #0]
 8010bbe:	f380 8808 	msr	MSP, r0
 8010bc2:	f04f 0000 	mov.w	r0, #0
 8010bc6:	f380 8814 	msr	CONTROL, r0
 8010bca:	b662      	cpsie	i
 8010bcc:	b661      	cpsie	f
 8010bce:	f3bf 8f4f 	dsb	sy
 8010bd2:	f3bf 8f6f 	isb	sy
 8010bd6:	df00      	svc	0
 8010bd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010bda:	bf00      	nop
 8010bdc:	e000ed08 	.word	0xe000ed08

08010be0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b084      	sub	sp, #16
 8010be4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010be6:	4b37      	ldr	r3, [pc, #220]	@ (8010cc4 <xPortStartScheduler+0xe4>)
 8010be8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	781b      	ldrb	r3, [r3, #0]
 8010bee:	b2db      	uxtb	r3, r3
 8010bf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	22ff      	movs	r2, #255	@ 0xff
 8010bf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	781b      	ldrb	r3, [r3, #0]
 8010bfc:	b2db      	uxtb	r3, r3
 8010bfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010c00:	78fb      	ldrb	r3, [r7, #3]
 8010c02:	b2db      	uxtb	r3, r3
 8010c04:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8010c08:	b2da      	uxtb	r2, r3
 8010c0a:	4b2f      	ldr	r3, [pc, #188]	@ (8010cc8 <xPortStartScheduler+0xe8>)
 8010c0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010c0e:	4b2f      	ldr	r3, [pc, #188]	@ (8010ccc <xPortStartScheduler+0xec>)
 8010c10:	2207      	movs	r2, #7
 8010c12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010c14:	e009      	b.n	8010c2a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8010c16:	4b2d      	ldr	r3, [pc, #180]	@ (8010ccc <xPortStartScheduler+0xec>)
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	3b01      	subs	r3, #1
 8010c1c:	4a2b      	ldr	r2, [pc, #172]	@ (8010ccc <xPortStartScheduler+0xec>)
 8010c1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010c20:	78fb      	ldrb	r3, [r7, #3]
 8010c22:	b2db      	uxtb	r3, r3
 8010c24:	005b      	lsls	r3, r3, #1
 8010c26:	b2db      	uxtb	r3, r3
 8010c28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010c2a:	78fb      	ldrb	r3, [r7, #3]
 8010c2c:	b2db      	uxtb	r3, r3
 8010c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010c32:	2b80      	cmp	r3, #128	@ 0x80
 8010c34:	d0ef      	beq.n	8010c16 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010c36:	4b25      	ldr	r3, [pc, #148]	@ (8010ccc <xPortStartScheduler+0xec>)
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	f1c3 0307 	rsb	r3, r3, #7
 8010c3e:	2b04      	cmp	r3, #4
 8010c40:	d00d      	beq.n	8010c5e <xPortStartScheduler+0x7e>
	__asm volatile
 8010c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c46:	b672      	cpsid	i
 8010c48:	f383 8811 	msr	BASEPRI, r3
 8010c4c:	f3bf 8f6f 	isb	sy
 8010c50:	f3bf 8f4f 	dsb	sy
 8010c54:	b662      	cpsie	i
 8010c56:	60bb      	str	r3, [r7, #8]
}
 8010c58:	bf00      	nop
 8010c5a:	bf00      	nop
 8010c5c:	e7fd      	b.n	8010c5a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8010ccc <xPortStartScheduler+0xec>)
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	021b      	lsls	r3, r3, #8
 8010c64:	4a19      	ldr	r2, [pc, #100]	@ (8010ccc <xPortStartScheduler+0xec>)
 8010c66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010c68:	4b18      	ldr	r3, [pc, #96]	@ (8010ccc <xPortStartScheduler+0xec>)
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010c70:	4a16      	ldr	r2, [pc, #88]	@ (8010ccc <xPortStartScheduler+0xec>)
 8010c72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	b2da      	uxtb	r2, r3
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010c7c:	4b14      	ldr	r3, [pc, #80]	@ (8010cd0 <xPortStartScheduler+0xf0>)
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	4a13      	ldr	r2, [pc, #76]	@ (8010cd0 <xPortStartScheduler+0xf0>)
 8010c82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010c86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010c88:	4b11      	ldr	r3, [pc, #68]	@ (8010cd0 <xPortStartScheduler+0xf0>)
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	4a10      	ldr	r2, [pc, #64]	@ (8010cd0 <xPortStartScheduler+0xf0>)
 8010c8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8010c92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010c94:	f000 f8dc 	bl	8010e50 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010c98:	4b0e      	ldr	r3, [pc, #56]	@ (8010cd4 <xPortStartScheduler+0xf4>)
 8010c9a:	2200      	movs	r2, #0
 8010c9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010c9e:	f000 f8fb 	bl	8010e98 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8010cd8 <xPortStartScheduler+0xf8>)
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	4a0c      	ldr	r2, [pc, #48]	@ (8010cd8 <xPortStartScheduler+0xf8>)
 8010ca8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8010cac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010cae:	f7ff ff83 	bl	8010bb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010cb2:	f7fe fe77 	bl	800f9a4 <vTaskSwitchContext>
	prvTaskExitError();
 8010cb6:	f7ff ff39 	bl	8010b2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010cba:	2300      	movs	r3, #0
}
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	3710      	adds	r7, #16
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	bd80      	pop	{r7, pc}
 8010cc4:	e000e400 	.word	0xe000e400
 8010cc8:	20007848 	.word	0x20007848
 8010ccc:	2000784c 	.word	0x2000784c
 8010cd0:	e000ed20 	.word	0xe000ed20
 8010cd4:	20000020 	.word	0x20000020
 8010cd8:	e000ef34 	.word	0xe000ef34

08010cdc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010cdc:	b480      	push	{r7}
 8010cde:	b083      	sub	sp, #12
 8010ce0:	af00      	add	r7, sp, #0
	__asm volatile
 8010ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ce6:	b672      	cpsid	i
 8010ce8:	f383 8811 	msr	BASEPRI, r3
 8010cec:	f3bf 8f6f 	isb	sy
 8010cf0:	f3bf 8f4f 	dsb	sy
 8010cf4:	b662      	cpsie	i
 8010cf6:	607b      	str	r3, [r7, #4]
}
 8010cf8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010cfa:	4b11      	ldr	r3, [pc, #68]	@ (8010d40 <vPortEnterCritical+0x64>)
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	3301      	adds	r3, #1
 8010d00:	4a0f      	ldr	r2, [pc, #60]	@ (8010d40 <vPortEnterCritical+0x64>)
 8010d02:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010d04:	4b0e      	ldr	r3, [pc, #56]	@ (8010d40 <vPortEnterCritical+0x64>)
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	2b01      	cmp	r3, #1
 8010d0a:	d112      	bne.n	8010d32 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8010d44 <vPortEnterCritical+0x68>)
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	b2db      	uxtb	r3, r3
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d00d      	beq.n	8010d32 <vPortEnterCritical+0x56>
	__asm volatile
 8010d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d1a:	b672      	cpsid	i
 8010d1c:	f383 8811 	msr	BASEPRI, r3
 8010d20:	f3bf 8f6f 	isb	sy
 8010d24:	f3bf 8f4f 	dsb	sy
 8010d28:	b662      	cpsie	i
 8010d2a:	603b      	str	r3, [r7, #0]
}
 8010d2c:	bf00      	nop
 8010d2e:	bf00      	nop
 8010d30:	e7fd      	b.n	8010d2e <vPortEnterCritical+0x52>
	}
}
 8010d32:	bf00      	nop
 8010d34:	370c      	adds	r7, #12
 8010d36:	46bd      	mov	sp, r7
 8010d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3c:	4770      	bx	lr
 8010d3e:	bf00      	nop
 8010d40:	20000020 	.word	0x20000020
 8010d44:	e000ed04 	.word	0xe000ed04

08010d48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010d48:	b480      	push	{r7}
 8010d4a:	b083      	sub	sp, #12
 8010d4c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010d4e:	4b13      	ldr	r3, [pc, #76]	@ (8010d9c <vPortExitCritical+0x54>)
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d10d      	bne.n	8010d72 <vPortExitCritical+0x2a>
	__asm volatile
 8010d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d5a:	b672      	cpsid	i
 8010d5c:	f383 8811 	msr	BASEPRI, r3
 8010d60:	f3bf 8f6f 	isb	sy
 8010d64:	f3bf 8f4f 	dsb	sy
 8010d68:	b662      	cpsie	i
 8010d6a:	607b      	str	r3, [r7, #4]
}
 8010d6c:	bf00      	nop
 8010d6e:	bf00      	nop
 8010d70:	e7fd      	b.n	8010d6e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8010d72:	4b0a      	ldr	r3, [pc, #40]	@ (8010d9c <vPortExitCritical+0x54>)
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	3b01      	subs	r3, #1
 8010d78:	4a08      	ldr	r2, [pc, #32]	@ (8010d9c <vPortExitCritical+0x54>)
 8010d7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010d7c:	4b07      	ldr	r3, [pc, #28]	@ (8010d9c <vPortExitCritical+0x54>)
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d105      	bne.n	8010d90 <vPortExitCritical+0x48>
 8010d84:	2300      	movs	r3, #0
 8010d86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010d88:	683b      	ldr	r3, [r7, #0]
 8010d8a:	f383 8811 	msr	BASEPRI, r3
}
 8010d8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010d90:	bf00      	nop
 8010d92:	370c      	adds	r7, #12
 8010d94:	46bd      	mov	sp, r7
 8010d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d9a:	4770      	bx	lr
 8010d9c:	20000020 	.word	0x20000020

08010da0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010da0:	f3ef 8009 	mrs	r0, PSP
 8010da4:	f3bf 8f6f 	isb	sy
 8010da8:	4b15      	ldr	r3, [pc, #84]	@ (8010e00 <pxCurrentTCBConst>)
 8010daa:	681a      	ldr	r2, [r3, #0]
 8010dac:	f01e 0f10 	tst.w	lr, #16
 8010db0:	bf08      	it	eq
 8010db2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010db6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dba:	6010      	str	r0, [r2, #0]
 8010dbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010dc0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010dc4:	b672      	cpsid	i
 8010dc6:	f380 8811 	msr	BASEPRI, r0
 8010dca:	f3bf 8f4f 	dsb	sy
 8010dce:	f3bf 8f6f 	isb	sy
 8010dd2:	b662      	cpsie	i
 8010dd4:	f7fe fde6 	bl	800f9a4 <vTaskSwitchContext>
 8010dd8:	f04f 0000 	mov.w	r0, #0
 8010ddc:	f380 8811 	msr	BASEPRI, r0
 8010de0:	bc09      	pop	{r0, r3}
 8010de2:	6819      	ldr	r1, [r3, #0]
 8010de4:	6808      	ldr	r0, [r1, #0]
 8010de6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dea:	f01e 0f10 	tst.w	lr, #16
 8010dee:	bf08      	it	eq
 8010df0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010df4:	f380 8809 	msr	PSP, r0
 8010df8:	f3bf 8f6f 	isb	sy
 8010dfc:	4770      	bx	lr
 8010dfe:	bf00      	nop

08010e00 <pxCurrentTCBConst>:
 8010e00:	20007234 	.word	0x20007234
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010e04:	bf00      	nop
 8010e06:	bf00      	nop

08010e08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b082      	sub	sp, #8
 8010e0c:	af00      	add	r7, sp, #0
	__asm volatile
 8010e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e12:	b672      	cpsid	i
 8010e14:	f383 8811 	msr	BASEPRI, r3
 8010e18:	f3bf 8f6f 	isb	sy
 8010e1c:	f3bf 8f4f 	dsb	sy
 8010e20:	b662      	cpsie	i
 8010e22:	607b      	str	r3, [r7, #4]
}
 8010e24:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010e26:	f7fe fd01 	bl	800f82c <xTaskIncrementTick>
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d003      	beq.n	8010e38 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010e30:	4b06      	ldr	r3, [pc, #24]	@ (8010e4c <SysTick_Handler+0x44>)
 8010e32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010e36:	601a      	str	r2, [r3, #0]
 8010e38:	2300      	movs	r3, #0
 8010e3a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010e3c:	683b      	ldr	r3, [r7, #0]
 8010e3e:	f383 8811 	msr	BASEPRI, r3
}
 8010e42:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010e44:	bf00      	nop
 8010e46:	3708      	adds	r7, #8
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	bd80      	pop	{r7, pc}
 8010e4c:	e000ed04 	.word	0xe000ed04

08010e50 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010e50:	b480      	push	{r7}
 8010e52:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010e54:	4b0b      	ldr	r3, [pc, #44]	@ (8010e84 <vPortSetupTimerInterrupt+0x34>)
 8010e56:	2200      	movs	r2, #0
 8010e58:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8010e88 <vPortSetupTimerInterrupt+0x38>)
 8010e5c:	2200      	movs	r2, #0
 8010e5e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010e60:	4b0a      	ldr	r3, [pc, #40]	@ (8010e8c <vPortSetupTimerInterrupt+0x3c>)
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	4a0a      	ldr	r2, [pc, #40]	@ (8010e90 <vPortSetupTimerInterrupt+0x40>)
 8010e66:	fba2 2303 	umull	r2, r3, r2, r3
 8010e6a:	099b      	lsrs	r3, r3, #6
 8010e6c:	4a09      	ldr	r2, [pc, #36]	@ (8010e94 <vPortSetupTimerInterrupt+0x44>)
 8010e6e:	3b01      	subs	r3, #1
 8010e70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010e72:	4b04      	ldr	r3, [pc, #16]	@ (8010e84 <vPortSetupTimerInterrupt+0x34>)
 8010e74:	2207      	movs	r2, #7
 8010e76:	601a      	str	r2, [r3, #0]
}
 8010e78:	bf00      	nop
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e80:	4770      	bx	lr
 8010e82:	bf00      	nop
 8010e84:	e000e010 	.word	0xe000e010
 8010e88:	e000e018 	.word	0xe000e018
 8010e8c:	20000000 	.word	0x20000000
 8010e90:	10624dd3 	.word	0x10624dd3
 8010e94:	e000e014 	.word	0xe000e014

08010e98 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010e98:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010ea8 <vPortEnableVFP+0x10>
 8010e9c:	6801      	ldr	r1, [r0, #0]
 8010e9e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010ea2:	6001      	str	r1, [r0, #0]
 8010ea4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010ea6:	bf00      	nop
 8010ea8:	e000ed88 	.word	0xe000ed88

08010eac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010eac:	b480      	push	{r7}
 8010eae:	b085      	sub	sp, #20
 8010eb0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010eb2:	f3ef 8305 	mrs	r3, IPSR
 8010eb6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	2b0f      	cmp	r3, #15
 8010ebc:	d917      	bls.n	8010eee <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010ebe:	4a1a      	ldr	r2, [pc, #104]	@ (8010f28 <vPortValidateInterruptPriority+0x7c>)
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	4413      	add	r3, r2
 8010ec4:	781b      	ldrb	r3, [r3, #0]
 8010ec6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010ec8:	4b18      	ldr	r3, [pc, #96]	@ (8010f2c <vPortValidateInterruptPriority+0x80>)
 8010eca:	781b      	ldrb	r3, [r3, #0]
 8010ecc:	7afa      	ldrb	r2, [r7, #11]
 8010ece:	429a      	cmp	r2, r3
 8010ed0:	d20d      	bcs.n	8010eee <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8010ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ed6:	b672      	cpsid	i
 8010ed8:	f383 8811 	msr	BASEPRI, r3
 8010edc:	f3bf 8f6f 	isb	sy
 8010ee0:	f3bf 8f4f 	dsb	sy
 8010ee4:	b662      	cpsie	i
 8010ee6:	607b      	str	r3, [r7, #4]
}
 8010ee8:	bf00      	nop
 8010eea:	bf00      	nop
 8010eec:	e7fd      	b.n	8010eea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010eee:	4b10      	ldr	r3, [pc, #64]	@ (8010f30 <vPortValidateInterruptPriority+0x84>)
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8010ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8010f34 <vPortValidateInterruptPriority+0x88>)
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	429a      	cmp	r2, r3
 8010efc:	d90d      	bls.n	8010f1a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8010efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f02:	b672      	cpsid	i
 8010f04:	f383 8811 	msr	BASEPRI, r3
 8010f08:	f3bf 8f6f 	isb	sy
 8010f0c:	f3bf 8f4f 	dsb	sy
 8010f10:	b662      	cpsie	i
 8010f12:	603b      	str	r3, [r7, #0]
}
 8010f14:	bf00      	nop
 8010f16:	bf00      	nop
 8010f18:	e7fd      	b.n	8010f16 <vPortValidateInterruptPriority+0x6a>
	}
 8010f1a:	bf00      	nop
 8010f1c:	3714      	adds	r7, #20
 8010f1e:	46bd      	mov	sp, r7
 8010f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f24:	4770      	bx	lr
 8010f26:	bf00      	nop
 8010f28:	e000e3f0 	.word	0xe000e3f0
 8010f2c:	20007848 	.word	0x20007848
 8010f30:	e000ed0c 	.word	0xe000ed0c
 8010f34:	2000784c 	.word	0x2000784c

08010f38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	b08a      	sub	sp, #40	@ 0x28
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010f40:	2300      	movs	r3, #0
 8010f42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010f44:	f7fe fba2 	bl	800f68c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010f48:	4b5f      	ldr	r3, [pc, #380]	@ (80110c8 <pvPortMalloc+0x190>)
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d101      	bne.n	8010f54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010f50:	f000 f924 	bl	801119c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010f54:	4b5d      	ldr	r3, [pc, #372]	@ (80110cc <pvPortMalloc+0x194>)
 8010f56:	681a      	ldr	r2, [r3, #0]
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	4013      	ands	r3, r2
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	f040 8094 	bne.w	801108a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d020      	beq.n	8010faa <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8010f68:	2208      	movs	r2, #8
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	4413      	add	r3, r2
 8010f6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	f003 0307 	and.w	r3, r3, #7
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d017      	beq.n	8010faa <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	f023 0307 	bic.w	r3, r3, #7
 8010f80:	3308      	adds	r3, #8
 8010f82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	f003 0307 	and.w	r3, r3, #7
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d00d      	beq.n	8010faa <pvPortMalloc+0x72>
	__asm volatile
 8010f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f92:	b672      	cpsid	i
 8010f94:	f383 8811 	msr	BASEPRI, r3
 8010f98:	f3bf 8f6f 	isb	sy
 8010f9c:	f3bf 8f4f 	dsb	sy
 8010fa0:	b662      	cpsie	i
 8010fa2:	617b      	str	r3, [r7, #20]
}
 8010fa4:	bf00      	nop
 8010fa6:	bf00      	nop
 8010fa8:	e7fd      	b.n	8010fa6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d06c      	beq.n	801108a <pvPortMalloc+0x152>
 8010fb0:	4b47      	ldr	r3, [pc, #284]	@ (80110d0 <pvPortMalloc+0x198>)
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	687a      	ldr	r2, [r7, #4]
 8010fb6:	429a      	cmp	r2, r3
 8010fb8:	d867      	bhi.n	801108a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010fba:	4b46      	ldr	r3, [pc, #280]	@ (80110d4 <pvPortMalloc+0x19c>)
 8010fbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010fbe:	4b45      	ldr	r3, [pc, #276]	@ (80110d4 <pvPortMalloc+0x19c>)
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010fc4:	e004      	b.n	8010fd0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8010fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fd2:	685b      	ldr	r3, [r3, #4]
 8010fd4:	687a      	ldr	r2, [r7, #4]
 8010fd6:	429a      	cmp	r2, r3
 8010fd8:	d903      	bls.n	8010fe2 <pvPortMalloc+0xaa>
 8010fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d1f1      	bne.n	8010fc6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010fe2:	4b39      	ldr	r3, [pc, #228]	@ (80110c8 <pvPortMalloc+0x190>)
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010fe8:	429a      	cmp	r2, r3
 8010fea:	d04e      	beq.n	801108a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010fec:	6a3b      	ldr	r3, [r7, #32]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	2208      	movs	r2, #8
 8010ff2:	4413      	add	r3, r2
 8010ff4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ff8:	681a      	ldr	r2, [r3, #0]
 8010ffa:	6a3b      	ldr	r3, [r7, #32]
 8010ffc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011000:	685a      	ldr	r2, [r3, #4]
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	1ad2      	subs	r2, r2, r3
 8011006:	2308      	movs	r3, #8
 8011008:	005b      	lsls	r3, r3, #1
 801100a:	429a      	cmp	r2, r3
 801100c:	d922      	bls.n	8011054 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801100e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	4413      	add	r3, r2
 8011014:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011016:	69bb      	ldr	r3, [r7, #24]
 8011018:	f003 0307 	and.w	r3, r3, #7
 801101c:	2b00      	cmp	r3, #0
 801101e:	d00d      	beq.n	801103c <pvPortMalloc+0x104>
	__asm volatile
 8011020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011024:	b672      	cpsid	i
 8011026:	f383 8811 	msr	BASEPRI, r3
 801102a:	f3bf 8f6f 	isb	sy
 801102e:	f3bf 8f4f 	dsb	sy
 8011032:	b662      	cpsie	i
 8011034:	613b      	str	r3, [r7, #16]
}
 8011036:	bf00      	nop
 8011038:	bf00      	nop
 801103a:	e7fd      	b.n	8011038 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801103c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801103e:	685a      	ldr	r2, [r3, #4]
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	1ad2      	subs	r2, r2, r3
 8011044:	69bb      	ldr	r3, [r7, #24]
 8011046:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801104a:	687a      	ldr	r2, [r7, #4]
 801104c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801104e:	69b8      	ldr	r0, [r7, #24]
 8011050:	f000 f906 	bl	8011260 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011054:	4b1e      	ldr	r3, [pc, #120]	@ (80110d0 <pvPortMalloc+0x198>)
 8011056:	681a      	ldr	r2, [r3, #0]
 8011058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801105a:	685b      	ldr	r3, [r3, #4]
 801105c:	1ad3      	subs	r3, r2, r3
 801105e:	4a1c      	ldr	r2, [pc, #112]	@ (80110d0 <pvPortMalloc+0x198>)
 8011060:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011062:	4b1b      	ldr	r3, [pc, #108]	@ (80110d0 <pvPortMalloc+0x198>)
 8011064:	681a      	ldr	r2, [r3, #0]
 8011066:	4b1c      	ldr	r3, [pc, #112]	@ (80110d8 <pvPortMalloc+0x1a0>)
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	429a      	cmp	r2, r3
 801106c:	d203      	bcs.n	8011076 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801106e:	4b18      	ldr	r3, [pc, #96]	@ (80110d0 <pvPortMalloc+0x198>)
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	4a19      	ldr	r2, [pc, #100]	@ (80110d8 <pvPortMalloc+0x1a0>)
 8011074:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011078:	685a      	ldr	r2, [r3, #4]
 801107a:	4b14      	ldr	r3, [pc, #80]	@ (80110cc <pvPortMalloc+0x194>)
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	431a      	orrs	r2, r3
 8011080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011082:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011086:	2200      	movs	r2, #0
 8011088:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801108a:	f7fe fb0d 	bl	800f6a8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801108e:	69fb      	ldr	r3, [r7, #28]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d101      	bne.n	8011098 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8011094:	f7ef fc3a 	bl	800090c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011098:	69fb      	ldr	r3, [r7, #28]
 801109a:	f003 0307 	and.w	r3, r3, #7
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d00d      	beq.n	80110be <pvPortMalloc+0x186>
	__asm volatile
 80110a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110a6:	b672      	cpsid	i
 80110a8:	f383 8811 	msr	BASEPRI, r3
 80110ac:	f3bf 8f6f 	isb	sy
 80110b0:	f3bf 8f4f 	dsb	sy
 80110b4:	b662      	cpsie	i
 80110b6:	60fb      	str	r3, [r7, #12]
}
 80110b8:	bf00      	nop
 80110ba:	bf00      	nop
 80110bc:	e7fd      	b.n	80110ba <pvPortMalloc+0x182>
	return pvReturn;
 80110be:	69fb      	ldr	r3, [r7, #28]
}
 80110c0:	4618      	mov	r0, r3
 80110c2:	3728      	adds	r7, #40	@ 0x28
 80110c4:	46bd      	mov	sp, r7
 80110c6:	bd80      	pop	{r7, pc}
 80110c8:	2001f858 	.word	0x2001f858
 80110cc:	2001f864 	.word	0x2001f864
 80110d0:	2001f85c 	.word	0x2001f85c
 80110d4:	2001f850 	.word	0x2001f850
 80110d8:	2001f860 	.word	0x2001f860

080110dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80110dc:	b580      	push	{r7, lr}
 80110de:	b086      	sub	sp, #24
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d04e      	beq.n	801118c <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80110ee:	2308      	movs	r3, #8
 80110f0:	425b      	negs	r3, r3
 80110f2:	697a      	ldr	r2, [r7, #20]
 80110f4:	4413      	add	r3, r2
 80110f6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80110f8:	697b      	ldr	r3, [r7, #20]
 80110fa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80110fc:	693b      	ldr	r3, [r7, #16]
 80110fe:	685a      	ldr	r2, [r3, #4]
 8011100:	4b24      	ldr	r3, [pc, #144]	@ (8011194 <vPortFree+0xb8>)
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	4013      	ands	r3, r2
 8011106:	2b00      	cmp	r3, #0
 8011108:	d10d      	bne.n	8011126 <vPortFree+0x4a>
	__asm volatile
 801110a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801110e:	b672      	cpsid	i
 8011110:	f383 8811 	msr	BASEPRI, r3
 8011114:	f3bf 8f6f 	isb	sy
 8011118:	f3bf 8f4f 	dsb	sy
 801111c:	b662      	cpsie	i
 801111e:	60fb      	str	r3, [r7, #12]
}
 8011120:	bf00      	nop
 8011122:	bf00      	nop
 8011124:	e7fd      	b.n	8011122 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011126:	693b      	ldr	r3, [r7, #16]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d00d      	beq.n	801114a <vPortFree+0x6e>
	__asm volatile
 801112e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011132:	b672      	cpsid	i
 8011134:	f383 8811 	msr	BASEPRI, r3
 8011138:	f3bf 8f6f 	isb	sy
 801113c:	f3bf 8f4f 	dsb	sy
 8011140:	b662      	cpsie	i
 8011142:	60bb      	str	r3, [r7, #8]
}
 8011144:	bf00      	nop
 8011146:	bf00      	nop
 8011148:	e7fd      	b.n	8011146 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801114a:	693b      	ldr	r3, [r7, #16]
 801114c:	685a      	ldr	r2, [r3, #4]
 801114e:	4b11      	ldr	r3, [pc, #68]	@ (8011194 <vPortFree+0xb8>)
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	4013      	ands	r3, r2
 8011154:	2b00      	cmp	r3, #0
 8011156:	d019      	beq.n	801118c <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011158:	693b      	ldr	r3, [r7, #16]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d115      	bne.n	801118c <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011160:	693b      	ldr	r3, [r7, #16]
 8011162:	685a      	ldr	r2, [r3, #4]
 8011164:	4b0b      	ldr	r3, [pc, #44]	@ (8011194 <vPortFree+0xb8>)
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	43db      	mvns	r3, r3
 801116a:	401a      	ands	r2, r3
 801116c:	693b      	ldr	r3, [r7, #16]
 801116e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011170:	f7fe fa8c 	bl	800f68c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011174:	693b      	ldr	r3, [r7, #16]
 8011176:	685a      	ldr	r2, [r3, #4]
 8011178:	4b07      	ldr	r3, [pc, #28]	@ (8011198 <vPortFree+0xbc>)
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	4413      	add	r3, r2
 801117e:	4a06      	ldr	r2, [pc, #24]	@ (8011198 <vPortFree+0xbc>)
 8011180:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011182:	6938      	ldr	r0, [r7, #16]
 8011184:	f000 f86c 	bl	8011260 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011188:	f7fe fa8e 	bl	800f6a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801118c:	bf00      	nop
 801118e:	3718      	adds	r7, #24
 8011190:	46bd      	mov	sp, r7
 8011192:	bd80      	pop	{r7, pc}
 8011194:	2001f864 	.word	0x2001f864
 8011198:	2001f85c 	.word	0x2001f85c

0801119c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801119c:	b480      	push	{r7}
 801119e:	b085      	sub	sp, #20
 80111a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80111a2:	f44f 33c0 	mov.w	r3, #98304	@ 0x18000
 80111a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80111a8:	4b27      	ldr	r3, [pc, #156]	@ (8011248 <prvHeapInit+0xac>)
 80111aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	f003 0307 	and.w	r3, r3, #7
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d00c      	beq.n	80111d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	3307      	adds	r3, #7
 80111ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	f023 0307 	bic.w	r3, r3, #7
 80111c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80111c4:	68ba      	ldr	r2, [r7, #8]
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	1ad3      	subs	r3, r2, r3
 80111ca:	4a1f      	ldr	r2, [pc, #124]	@ (8011248 <prvHeapInit+0xac>)
 80111cc:	4413      	add	r3, r2
 80111ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80111d4:	4a1d      	ldr	r2, [pc, #116]	@ (801124c <prvHeapInit+0xb0>)
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80111da:	4b1c      	ldr	r3, [pc, #112]	@ (801124c <prvHeapInit+0xb0>)
 80111dc:	2200      	movs	r2, #0
 80111de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	68ba      	ldr	r2, [r7, #8]
 80111e4:	4413      	add	r3, r2
 80111e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80111e8:	2208      	movs	r2, #8
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	1a9b      	subs	r3, r3, r2
 80111ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	f023 0307 	bic.w	r3, r3, #7
 80111f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	4a15      	ldr	r2, [pc, #84]	@ (8011250 <prvHeapInit+0xb4>)
 80111fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80111fe:	4b14      	ldr	r3, [pc, #80]	@ (8011250 <prvHeapInit+0xb4>)
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	2200      	movs	r2, #0
 8011204:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011206:	4b12      	ldr	r3, [pc, #72]	@ (8011250 <prvHeapInit+0xb4>)
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	2200      	movs	r2, #0
 801120c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011212:	683b      	ldr	r3, [r7, #0]
 8011214:	68fa      	ldr	r2, [r7, #12]
 8011216:	1ad2      	subs	r2, r2, r3
 8011218:	683b      	ldr	r3, [r7, #0]
 801121a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801121c:	4b0c      	ldr	r3, [pc, #48]	@ (8011250 <prvHeapInit+0xb4>)
 801121e:	681a      	ldr	r2, [r3, #0]
 8011220:	683b      	ldr	r3, [r7, #0]
 8011222:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011224:	683b      	ldr	r3, [r7, #0]
 8011226:	685b      	ldr	r3, [r3, #4]
 8011228:	4a0a      	ldr	r2, [pc, #40]	@ (8011254 <prvHeapInit+0xb8>)
 801122a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801122c:	683b      	ldr	r3, [r7, #0]
 801122e:	685b      	ldr	r3, [r3, #4]
 8011230:	4a09      	ldr	r2, [pc, #36]	@ (8011258 <prvHeapInit+0xbc>)
 8011232:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011234:	4b09      	ldr	r3, [pc, #36]	@ (801125c <prvHeapInit+0xc0>)
 8011236:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801123a:	601a      	str	r2, [r3, #0]
}
 801123c:	bf00      	nop
 801123e:	3714      	adds	r7, #20
 8011240:	46bd      	mov	sp, r7
 8011242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011246:	4770      	bx	lr
 8011248:	20007850 	.word	0x20007850
 801124c:	2001f850 	.word	0x2001f850
 8011250:	2001f858 	.word	0x2001f858
 8011254:	2001f860 	.word	0x2001f860
 8011258:	2001f85c 	.word	0x2001f85c
 801125c:	2001f864 	.word	0x2001f864

08011260 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011260:	b480      	push	{r7}
 8011262:	b085      	sub	sp, #20
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011268:	4b28      	ldr	r3, [pc, #160]	@ (801130c <prvInsertBlockIntoFreeList+0xac>)
 801126a:	60fb      	str	r3, [r7, #12]
 801126c:	e002      	b.n	8011274 <prvInsertBlockIntoFreeList+0x14>
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	60fb      	str	r3, [r7, #12]
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	687a      	ldr	r2, [r7, #4]
 801127a:	429a      	cmp	r2, r3
 801127c:	d8f7      	bhi.n	801126e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	685b      	ldr	r3, [r3, #4]
 8011286:	68ba      	ldr	r2, [r7, #8]
 8011288:	4413      	add	r3, r2
 801128a:	687a      	ldr	r2, [r7, #4]
 801128c:	429a      	cmp	r2, r3
 801128e:	d108      	bne.n	80112a2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	685a      	ldr	r2, [r3, #4]
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	685b      	ldr	r3, [r3, #4]
 8011298:	441a      	add	r2, r3
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	685b      	ldr	r3, [r3, #4]
 80112aa:	68ba      	ldr	r2, [r7, #8]
 80112ac:	441a      	add	r2, r3
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	429a      	cmp	r2, r3
 80112b4:	d118      	bne.n	80112e8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	681a      	ldr	r2, [r3, #0]
 80112ba:	4b15      	ldr	r3, [pc, #84]	@ (8011310 <prvInsertBlockIntoFreeList+0xb0>)
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	429a      	cmp	r2, r3
 80112c0:	d00d      	beq.n	80112de <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	685a      	ldr	r2, [r3, #4]
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	685b      	ldr	r3, [r3, #4]
 80112cc:	441a      	add	r2, r3
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	681a      	ldr	r2, [r3, #0]
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	601a      	str	r2, [r3, #0]
 80112dc:	e008      	b.n	80112f0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80112de:	4b0c      	ldr	r3, [pc, #48]	@ (8011310 <prvInsertBlockIntoFreeList+0xb0>)
 80112e0:	681a      	ldr	r2, [r3, #0]
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	601a      	str	r2, [r3, #0]
 80112e6:	e003      	b.n	80112f0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	681a      	ldr	r2, [r3, #0]
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80112f0:	68fa      	ldr	r2, [r7, #12]
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	429a      	cmp	r2, r3
 80112f6:	d002      	beq.n	80112fe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	687a      	ldr	r2, [r7, #4]
 80112fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80112fe:	bf00      	nop
 8011300:	3714      	adds	r7, #20
 8011302:	46bd      	mov	sp, r7
 8011304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011308:	4770      	bx	lr
 801130a:	bf00      	nop
 801130c:	2001f850 	.word	0x2001f850
 8011310:	2001f858 	.word	0x2001f858

08011314 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8011314:	b580      	push	{r7, lr}
 8011316:	b084      	sub	sp, #16
 8011318:	af00      	add	r7, sp, #0
 801131a:	6078      	str	r0, [r7, #4]
 801131c:	6039      	str	r1, [r7, #0]
  err_t err;

#ifdef LWIP_DEBUG
  /* catch functions that don't set err */
  apimsg->err = ERR_VAL;
 801131e:	683b      	ldr	r3, [r7, #0]
 8011320:	22fa      	movs	r2, #250	@ 0xfa
 8011322:	711a      	strb	r2, [r3, #4]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8011324:	683b      	ldr	r3, [r7, #0]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	330c      	adds	r3, #12
 801132a:	461a      	mov	r2, r3
 801132c:	6839      	ldr	r1, [r7, #0]
 801132e:	6878      	ldr	r0, [r7, #4]
 8011330:	f002 f84e 	bl	80133d0 <tcpip_send_msg_wait_sem>
 8011334:	4603      	mov	r3, r0
 8011336:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8011338:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d103      	bne.n	8011348 <netconn_apimsg+0x34>
    return apimsg->err;
 8011340:	683b      	ldr	r3, [r7, #0]
 8011342:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011346:	e001      	b.n	801134c <netconn_apimsg+0x38>
  }
  return err;
 8011348:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801134c:	4618      	mov	r0, r3
 801134e:	3710      	adds	r7, #16
 8011350:	46bd      	mov	sp, r7
 8011352:	bd80      	pop	{r7, pc}

08011354 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8011354:	b580      	push	{r7, lr}
 8011356:	b08c      	sub	sp, #48	@ 0x30
 8011358:	af00      	add	r7, sp, #0
 801135a:	4603      	mov	r3, r0
 801135c:	603a      	str	r2, [r7, #0]
 801135e:	71fb      	strb	r3, [r7, #7]
 8011360:	460b      	mov	r3, r1
 8011362:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8011364:	79fb      	ldrb	r3, [r7, #7]
 8011366:	6839      	ldr	r1, [r7, #0]
 8011368:	4618      	mov	r0, r3
 801136a:	f000 ff41 	bl	80121f0 <netconn_alloc>
 801136e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 8011370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011372:	2b00      	cmp	r3, #0
 8011374:	d054      	beq.n	8011420 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8011376:	79bb      	ldrb	r3, [r7, #6]
 8011378:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 801137a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801137c:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 801137e:	f107 0308 	add.w	r3, r7, #8
 8011382:	4619      	mov	r1, r3
 8011384:	4829      	ldr	r0, [pc, #164]	@ (801142c <netconn_new_with_proto_and_callback+0xd8>)
 8011386:	f7ff ffc5 	bl	8011314 <netconn_apimsg>
 801138a:	4603      	mov	r3, r0
 801138c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 8011390:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8011394:	2b00      	cmp	r3, #0
 8011396:	d043      	beq.n	8011420 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8011398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801139a:	685b      	ldr	r3, [r3, #4]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d005      	beq.n	80113ac <netconn_new_with_proto_and_callback+0x58>
 80113a0:	4b23      	ldr	r3, [pc, #140]	@ (8011430 <netconn_new_with_proto_and_callback+0xdc>)
 80113a2:	22a3      	movs	r2, #163	@ 0xa3
 80113a4:	4923      	ldr	r1, [pc, #140]	@ (8011434 <netconn_new_with_proto_and_callback+0xe0>)
 80113a6:	4824      	ldr	r0, [pc, #144]	@ (8011438 <netconn_new_with_proto_and_callback+0xe4>)
 80113a8:	f00f fe8c 	bl	80210c4 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80113ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113ae:	3310      	adds	r3, #16
 80113b0:	4618      	mov	r0, r3
 80113b2:	f00e fb89 	bl	801fac8 <sys_mbox_valid>
 80113b6:	4603      	mov	r3, r0
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d105      	bne.n	80113c8 <netconn_new_with_proto_and_callback+0x74>
 80113bc:	4b1c      	ldr	r3, [pc, #112]	@ (8011430 <netconn_new_with_proto_and_callback+0xdc>)
 80113be:	22a4      	movs	r2, #164	@ 0xa4
 80113c0:	491e      	ldr	r1, [pc, #120]	@ (801143c <netconn_new_with_proto_and_callback+0xe8>)
 80113c2:	481d      	ldr	r0, [pc, #116]	@ (8011438 <netconn_new_with_proto_and_callback+0xe4>)
 80113c4:	f00f fe7e 	bl	80210c4 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80113c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113ca:	3314      	adds	r3, #20
 80113cc:	4618      	mov	r0, r3
 80113ce:	f00e fb7b 	bl	801fac8 <sys_mbox_valid>
 80113d2:	4603      	mov	r3, r0
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d005      	beq.n	80113e4 <netconn_new_with_proto_and_callback+0x90>
 80113d8:	4b15      	ldr	r3, [pc, #84]	@ (8011430 <netconn_new_with_proto_and_callback+0xdc>)
 80113da:	22a6      	movs	r2, #166	@ 0xa6
 80113dc:	4918      	ldr	r1, [pc, #96]	@ (8011440 <netconn_new_with_proto_and_callback+0xec>)
 80113de:	4816      	ldr	r0, [pc, #88]	@ (8011438 <netconn_new_with_proto_and_callback+0xe4>)
 80113e0:	f00f fe70 	bl	80210c4 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80113e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113e6:	330c      	adds	r3, #12
 80113e8:	4618      	mov	r0, r3
 80113ea:	f00e fc27 	bl	801fc3c <sys_sem_valid>
 80113ee:	4603      	mov	r3, r0
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d105      	bne.n	8011400 <netconn_new_with_proto_and_callback+0xac>
 80113f4:	4b0e      	ldr	r3, [pc, #56]	@ (8011430 <netconn_new_with_proto_and_callback+0xdc>)
 80113f6:	22a9      	movs	r2, #169	@ 0xa9
 80113f8:	4912      	ldr	r1, [pc, #72]	@ (8011444 <netconn_new_with_proto_and_callback+0xf0>)
 80113fa:	480f      	ldr	r0, [pc, #60]	@ (8011438 <netconn_new_with_proto_and_callback+0xe4>)
 80113fc:	f00f fe62 	bl	80210c4 <iprintf>
      sys_sem_free(&conn->op_completed);
 8011400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011402:	330c      	adds	r3, #12
 8011404:	4618      	mov	r0, r3
 8011406:	f00e fc01 	bl	801fc0c <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 801140a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801140c:	3310      	adds	r3, #16
 801140e:	4618      	mov	r0, r3
 8011410:	f00e fac6 	bl	801f9a0 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8011414:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011416:	2007      	movs	r0, #7
 8011418:	f002 ffc6 	bl	80143a8 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 801141c:	2300      	movs	r3, #0
 801141e:	e000      	b.n	8011422 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8011420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8011422:	4618      	mov	r0, r3
 8011424:	3730      	adds	r7, #48	@ 0x30
 8011426:	46bd      	mov	sp, r7
 8011428:	bd80      	pop	{r7, pc}
 801142a:	bf00      	nop
 801142c:	080121c5 	.word	0x080121c5
 8011430:	080225e4 	.word	0x080225e4
 8011434:	08022618 	.word	0x08022618
 8011438:	0802263c 	.word	0x0802263c
 801143c:	08022664 	.word	0x08022664
 8011440:	0802267c 	.word	0x0802267c
 8011444:	080226a0 	.word	0x080226a0

08011448 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8011448:	b580      	push	{r7, lr}
 801144a:	b08c      	sub	sp, #48	@ 0x30
 801144c:	af00      	add	r7, sp, #0
 801144e:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d101      	bne.n	801145a <netconn_prepare_delete+0x12>
    return ERR_OK;
 8011456:	2300      	movs	r3, #0
 8011458:	e014      	b.n	8011484 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 801145e:	2329      	movs	r3, #41	@ 0x29
 8011460:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8011462:	f107 030c 	add.w	r3, r7, #12
 8011466:	4619      	mov	r1, r3
 8011468:	4808      	ldr	r0, [pc, #32]	@ (801148c <netconn_prepare_delete+0x44>)
 801146a:	f7ff ff53 	bl	8011314 <netconn_apimsg>
 801146e:	4603      	mov	r3, r0
 8011470:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8011474:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8011478:	2b00      	cmp	r3, #0
 801147a:	d002      	beq.n	8011482 <netconn_prepare_delete+0x3a>
    return err;
 801147c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8011480:	e000      	b.n	8011484 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8011482:	2300      	movs	r3, #0
}
 8011484:	4618      	mov	r0, r3
 8011486:	3730      	adds	r7, #48	@ 0x30
 8011488:	46bd      	mov	sp, r7
 801148a:	bd80      	pop	{r7, pc}
 801148c:	08012741 	.word	0x08012741

08011490 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b084      	sub	sp, #16
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d101      	bne.n	80114a2 <netconn_delete+0x12>
    return ERR_OK;
 801149e:	2300      	movs	r3, #0
 80114a0:	e00d      	b.n	80114be <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 80114a2:	6878      	ldr	r0, [r7, #4]
 80114a4:	f7ff ffd0 	bl	8011448 <netconn_prepare_delete>
 80114a8:	4603      	mov	r3, r0
 80114aa:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 80114ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d102      	bne.n	80114ba <netconn_delete+0x2a>
    netconn_free(conn);
 80114b4:	6878      	ldr	r0, [r7, #4]
 80114b6:	f000 ff11 	bl	80122dc <netconn_free>
  }
  return err;
 80114ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80114be:	4618      	mov	r0, r3
 80114c0:	3710      	adds	r7, #16
 80114c2:	46bd      	mov	sp, r7
 80114c4:	bd80      	pop	{r7, pc}
	...

080114c8 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b08e      	sub	sp, #56	@ 0x38
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	60f8      	str	r0, [r7, #12]
 80114d0:	60b9      	str	r1, [r7, #8]
 80114d2:	4613      	mov	r3, r2
 80114d4:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d109      	bne.n	80114f0 <netconn_bind+0x28>
 80114dc:	4b11      	ldr	r3, [pc, #68]	@ (8011524 <netconn_bind+0x5c>)
 80114de:	f44f 729c 	mov.w	r2, #312	@ 0x138
 80114e2:	4911      	ldr	r1, [pc, #68]	@ (8011528 <netconn_bind+0x60>)
 80114e4:	4811      	ldr	r0, [pc, #68]	@ (801152c <netconn_bind+0x64>)
 80114e6:	f00f fded 	bl	80210c4 <iprintf>
 80114ea:	f06f 030f 	mvn.w	r3, #15
 80114ee:	e015      	b.n	801151c <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80114f0:	68bb      	ldr	r3, [r7, #8]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d101      	bne.n	80114fa <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80114f6:	4b0e      	ldr	r3, [pc, #56]	@ (8011530 <netconn_bind+0x68>)
 80114f8:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80114fe:	68bb      	ldr	r3, [r7, #8]
 8011500:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8011502:	88fb      	ldrh	r3, [r7, #6]
 8011504:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8011506:	f107 0314 	add.w	r3, r7, #20
 801150a:	4619      	mov	r1, r3
 801150c:	4809      	ldr	r0, [pc, #36]	@ (8011534 <netconn_bind+0x6c>)
 801150e:	f7ff ff01 	bl	8011314 <netconn_apimsg>
 8011512:	4603      	mov	r3, r0
 8011514:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8011518:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 801151c:	4618      	mov	r0, r3
 801151e:	3738      	adds	r7, #56	@ 0x38
 8011520:	46bd      	mov	sp, r7
 8011522:	bd80      	pop	{r7, pc}
 8011524:	080225e4 	.word	0x080225e4
 8011528:	0802271c 	.word	0x0802271c
 801152c:	0802263c 	.word	0x0802263c
 8011530:	08027264 	.word	0x08027264
 8011534:	0801290d 	.word	0x0801290d

08011538 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8011538:	b580      	push	{r7, lr}
 801153a:	b088      	sub	sp, #32
 801153c:	af00      	add	r7, sp, #0
 801153e:	60f8      	str	r0, [r7, #12]
 8011540:	60b9      	str	r1, [r7, #8]
 8011542:	4613      	mov	r3, r2
 8011544:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8011546:	2300      	movs	r3, #0
 8011548:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 801154a:	68bb      	ldr	r3, [r7, #8]
 801154c:	2b00      	cmp	r3, #0
 801154e:	d109      	bne.n	8011564 <netconn_recv_data+0x2c>
 8011550:	4b5e      	ldr	r3, [pc, #376]	@ (80116cc <netconn_recv_data+0x194>)
 8011552:	f44f 7212 	mov.w	r2, #584	@ 0x248
 8011556:	495e      	ldr	r1, [pc, #376]	@ (80116d0 <netconn_recv_data+0x198>)
 8011558:	485e      	ldr	r0, [pc, #376]	@ (80116d4 <netconn_recv_data+0x19c>)
 801155a:	f00f fdb3 	bl	80210c4 <iprintf>
 801155e:	f06f 030f 	mvn.w	r3, #15
 8011562:	e0ae      	b.n	80116c2 <netconn_recv_data+0x18a>
  *new_buf = NULL;
 8011564:	68bb      	ldr	r3, [r7, #8]
 8011566:	2200      	movs	r2, #0
 8011568:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	2b00      	cmp	r3, #0
 801156e:	d109      	bne.n	8011584 <netconn_recv_data+0x4c>
 8011570:	4b56      	ldr	r3, [pc, #344]	@ (80116cc <netconn_recv_data+0x194>)
 8011572:	f240 224a 	movw	r2, #586	@ 0x24a
 8011576:	4958      	ldr	r1, [pc, #352]	@ (80116d8 <netconn_recv_data+0x1a0>)
 8011578:	4856      	ldr	r0, [pc, #344]	@ (80116d4 <netconn_recv_data+0x19c>)
 801157a:	f00f fda3 	bl	80210c4 <iprintf>
 801157e:	f06f 030f 	mvn.w	r3, #15
 8011582:	e09e      	b.n	80116c2 <netconn_recv_data+0x18a>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	3310      	adds	r3, #16
 8011588:	4618      	mov	r0, r3
 801158a:	f00e fa9d 	bl	801fac8 <sys_mbox_valid>
 801158e:	4603      	mov	r3, r0
 8011590:	2b00      	cmp	r3, #0
 8011592:	d10e      	bne.n	80115b2 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8011594:	68f8      	ldr	r0, [r7, #12]
 8011596:	f000 fa59 	bl	8011a4c <netconn_err>
 801159a:	4603      	mov	r3, r0
 801159c:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 801159e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d002      	beq.n	80115ac <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 80115a6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80115aa:	e08a      	b.n	80116c2 <netconn_recv_data+0x18a>
    }
    return ERR_CONN;
 80115ac:	f06f 030a 	mvn.w	r3, #10
 80115b0:	e087      	b.n	80116c2 <netconn_recv_data+0x18a>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80115b8:	f003 0302 	and.w	r3, r3, #2
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d110      	bne.n	80115e2 <netconn_recv_data+0xaa>
 80115c0:	79fb      	ldrb	r3, [r7, #7]
 80115c2:	f003 0304 	and.w	r3, r3, #4
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d10b      	bne.n	80115e2 <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80115d0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d104      	bne.n	80115e2 <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d024      	beq.n	801162c <netconn_recv_data+0xf4>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	3310      	adds	r3, #16
 80115e6:	f107 0218 	add.w	r2, r7, #24
 80115ea:	4611      	mov	r1, r2
 80115ec:	4618      	mov	r0, r3
 80115ee:	f00e fa54 	bl	801fa9a <sys_arch_mbox_tryfetch>
 80115f2:	4603      	mov	r3, r0
 80115f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80115f8:	d129      	bne.n	801164e <netconn_recv_data+0x116>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 80115fa:	68f8      	ldr	r0, [r7, #12]
 80115fc:	f000 fa26 	bl	8011a4c <netconn_err>
 8011600:	4603      	mov	r3, r0
 8011602:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8011604:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d002      	beq.n	8011612 <netconn_recv_data+0xda>
        /* return pending error */
        return err;
 801160c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011610:	e057      	b.n	80116c2 <netconn_recv_data+0x18a>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011618:	f003 0301 	and.w	r3, r3, #1
 801161c:	2b00      	cmp	r3, #0
 801161e:	d002      	beq.n	8011626 <netconn_recv_data+0xee>
        return ERR_CONN;
 8011620:	f06f 030a 	mvn.w	r3, #10
 8011624:	e04d      	b.n	80116c2 <netconn_recv_data+0x18a>
      }
      return ERR_WOULDBLOCK;
 8011626:	f06f 0306 	mvn.w	r3, #6
 801162a:	e04a      	b.n	80116c2 <netconn_recv_data+0x18a>
    }
  } else {
#if LWIP_SO_RCVTIMEO
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	f103 0010 	add.w	r0, r3, #16
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	69da      	ldr	r2, [r3, #28]
 8011636:	f107 0318 	add.w	r3, r7, #24
 801163a:	4619      	mov	r1, r3
 801163c:	f00e f9fc 	bl	801fa38 <sys_arch_mbox_fetch>
 8011640:	4603      	mov	r3, r0
 8011642:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011646:	d102      	bne.n	801164e <netconn_recv_data+0x116>
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
 8011648:	f06f 0302 	mvn.w	r3, #2
 801164c:	e039      	b.n	80116c2 <netconn_recv_data+0x18a>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	781b      	ldrb	r3, [r3, #0]
 8011652:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011656:	2b10      	cmp	r3, #16
 8011658:	d117      	bne.n	801168a <netconn_recv_data+0x152>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 801165a:	69bb      	ldr	r3, [r7, #24]
 801165c:	f107 0217 	add.w	r2, r7, #23
 8011660:	4611      	mov	r1, r2
 8011662:	4618      	mov	r0, r3
 8011664:	f000 fa44 	bl	8011af0 <lwip_netconn_is_err_msg>
 8011668:	4603      	mov	r3, r0
 801166a:	2b00      	cmp	r3, #0
 801166c:	d009      	beq.n	8011682 <netconn_recv_data+0x14a>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 801166e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011672:	f113 0f0f 	cmn.w	r3, #15
 8011676:	d101      	bne.n	801167c <netconn_recv_data+0x144>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8011678:	2300      	movs	r3, #0
 801167a:	e022      	b.n	80116c2 <netconn_recv_data+0x18a>
      }
      return err;
 801167c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011680:	e01f      	b.n	80116c2 <netconn_recv_data+0x18a>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8011682:	69bb      	ldr	r3, [r7, #24]
 8011684:	891b      	ldrh	r3, [r3, #8]
 8011686:	83fb      	strh	r3, [r7, #30]
 8011688:	e00d      	b.n	80116a6 <netconn_recv_data+0x16e>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 801168a:	69bb      	ldr	r3, [r7, #24]
 801168c:	2b00      	cmp	r3, #0
 801168e:	d106      	bne.n	801169e <netconn_recv_data+0x166>
 8011690:	4b0e      	ldr	r3, [pc, #56]	@ (80116cc <netconn_recv_data+0x194>)
 8011692:	f240 2291 	movw	r2, #657	@ 0x291
 8011696:	4911      	ldr	r1, [pc, #68]	@ (80116dc <netconn_recv_data+0x1a4>)
 8011698:	480e      	ldr	r0, [pc, #56]	@ (80116d4 <netconn_recv_data+0x19c>)
 801169a:	f00f fd13 	bl	80210c4 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 801169e:	69bb      	ldr	r3, [r7, #24]
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	891b      	ldrh	r3, [r3, #8]
 80116a4:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d005      	beq.n	80116ba <netconn_recv_data+0x182>
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80116b2:	8bfa      	ldrh	r2, [r7, #30]
 80116b4:	2101      	movs	r1, #1
 80116b6:	68f8      	ldr	r0, [r7, #12]
 80116b8:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 80116ba:	69ba      	ldr	r2, [r7, #24]
 80116bc:	68bb      	ldr	r3, [r7, #8]
 80116be:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80116c0:	2300      	movs	r3, #0
}
 80116c2:	4618      	mov	r0, r3
 80116c4:	3720      	adds	r7, #32
 80116c6:	46bd      	mov	sp, r7
 80116c8:	bd80      	pop	{r7, pc}
 80116ca:	bf00      	nop
 80116cc:	080225e4 	.word	0x080225e4
 80116d0:	080227fc 	.word	0x080227fc
 80116d4:	0802263c 	.word	0x0802263c
 80116d8:	0802281c 	.word	0x0802281c
 80116dc:	08022838 	.word	0x08022838

080116e0 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 80116e0:	b580      	push	{r7, lr}
 80116e2:	b084      	sub	sp, #16
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	60f8      	str	r0, [r7, #12]
 80116e8:	60b9      	str	r1, [r7, #8]
 80116ea:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d005      	beq.n	80116fe <netconn_tcp_recvd_msg+0x1e>
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	781b      	ldrb	r3, [r3, #0]
 80116f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80116fa:	2b10      	cmp	r3, #16
 80116fc:	d009      	beq.n	8011712 <netconn_tcp_recvd_msg+0x32>
 80116fe:	4b0c      	ldr	r3, [pc, #48]	@ (8011730 <netconn_tcp_recvd_msg+0x50>)
 8011700:	f240 22a7 	movw	r2, #679	@ 0x2a7
 8011704:	490b      	ldr	r1, [pc, #44]	@ (8011734 <netconn_tcp_recvd_msg+0x54>)
 8011706:	480c      	ldr	r0, [pc, #48]	@ (8011738 <netconn_tcp_recvd_msg+0x58>)
 8011708:	f00f fcdc 	bl	80210c4 <iprintf>
 801170c:	f06f 030f 	mvn.w	r3, #15
 8011710:	e00a      	b.n	8011728 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	68fa      	ldr	r2, [r7, #12]
 8011716:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	68ba      	ldr	r2, [r7, #8]
 801171c:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 801171e:	6879      	ldr	r1, [r7, #4]
 8011720:	4806      	ldr	r0, [pc, #24]	@ (801173c <netconn_tcp_recvd_msg+0x5c>)
 8011722:	f7ff fdf7 	bl	8011314 <netconn_apimsg>
 8011726:	4603      	mov	r3, r0
}
 8011728:	4618      	mov	r0, r3
 801172a:	3710      	adds	r7, #16
 801172c:	46bd      	mov	sp, r7
 801172e:	bd80      	pop	{r7, pc}
 8011730:	080225e4 	.word	0x080225e4
 8011734:	08022844 	.word	0x08022844
 8011738:	0802263c 	.word	0x0802263c
 801173c:	08012a1b 	.word	0x08012a1b

08011740 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8011740:	b580      	push	{r7, lr}
 8011742:	b090      	sub	sp, #64	@ 0x40
 8011744:	af00      	add	r7, sp, #0
 8011746:	60f8      	str	r0, [r7, #12]
 8011748:	60b9      	str	r1, [r7, #8]
 801174a:	4613      	mov	r3, r2
 801174c:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	3310      	adds	r3, #16
 8011752:	4618      	mov	r0, r3
 8011754:	f00e f9b8 	bl	801fac8 <sys_mbox_valid>
 8011758:	4603      	mov	r3, r0
 801175a:	2b00      	cmp	r3, #0
 801175c:	d102      	bne.n	8011764 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 801175e:	f06f 030a 	mvn.w	r3, #10
 8011762:	e072      	b.n	801184a <netconn_recv_data_tcp+0x10a>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	f893 3020 	ldrb.w	r3, [r3, #32]
 801176a:	b25b      	sxtb	r3, r3
 801176c:	2b00      	cmp	r3, #0
 801176e:	da09      	bge.n	8011784 <netconn_recv_data_tcp+0x44>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011776:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801177a:	b2da      	uxtb	r2, r3
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	f883 2020 	strb.w	r2, [r3, #32]
    goto handle_fin;
 8011782:	e03b      	b.n	80117fc <netconn_recv_data_tcp+0xbc>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8011784:	79fb      	ldrb	r3, [r7, #7]
 8011786:	461a      	mov	r2, r3
 8011788:	68b9      	ldr	r1, [r7, #8]
 801178a:	68f8      	ldr	r0, [r7, #12]
 801178c:	f7ff fed4 	bl	8011538 <netconn_recv_data>
 8011790:	4603      	mov	r3, r0
 8011792:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 8011796:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 801179a:	2b00      	cmp	r3, #0
 801179c:	d002      	beq.n	80117a4 <netconn_recv_data_tcp+0x64>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 801179e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80117a2:	e052      	b.n	801184a <netconn_recv_data_tcp+0x10a>
  }
  buf = *new_buf;
 80117a4:	68bb      	ldr	r3, [r7, #8]
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80117aa:	79fb      	ldrb	r3, [r7, #7]
 80117ac:	f003 0308 	and.w	r3, r3, #8
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d10e      	bne.n	80117d2 <netconn_recv_data_tcp+0x92>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 80117b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d002      	beq.n	80117c0 <netconn_recv_data_tcp+0x80>
 80117ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117bc:	891b      	ldrh	r3, [r3, #8]
 80117be:	e000      	b.n	80117c2 <netconn_recv_data_tcp+0x82>
 80117c0:	2301      	movs	r3, #1
 80117c2:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 80117c4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80117c6:	f107 0214 	add.w	r2, r7, #20
 80117ca:	4619      	mov	r1, r3
 80117cc:	68f8      	ldr	r0, [r7, #12]
 80117ce:	f7ff ff87 	bl	80116e0 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 80117d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d136      	bne.n	8011846 <netconn_recv_data_tcp+0x106>
    if (apiflags & NETCONN_NOFIN) {
 80117d8:	79fb      	ldrb	r3, [r7, #7]
 80117da:	f003 0310 	and.w	r3, r3, #16
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d00b      	beq.n	80117fa <netconn_recv_data_tcp+0xba>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80117e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80117ec:	b2da      	uxtb	r2, r3
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	f883 2020 	strb.w	r2, [r3, #32]
      return ERR_WOULDBLOCK;
 80117f4:	f06f 0306 	mvn.w	r3, #6
 80117f8:	e027      	b.n	801184a <netconn_recv_data_tcp+0x10a>
    } else {
handle_fin:
 80117fa:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011800:	2b00      	cmp	r3, #0
 8011802:	d005      	beq.n	8011810 <netconn_recv_data_tcp+0xd0>
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011808:	2200      	movs	r2, #0
 801180a:	2101      	movs	r1, #1
 801180c:	68f8      	ldr	r0, [r7, #12]
 801180e:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	685b      	ldr	r3, [r3, #4]
 8011814:	2b00      	cmp	r3, #0
 8011816:	d10f      	bne.n	8011838 <netconn_recv_data_tcp+0xf8>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8011818:	68f8      	ldr	r0, [r7, #12]
 801181a:	f000 f917 	bl	8011a4c <netconn_err>
 801181e:	4603      	mov	r3, r0
 8011820:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 8011824:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8011828:	2b00      	cmp	r3, #0
 801182a:	d002      	beq.n	8011832 <netconn_recv_data_tcp+0xf2>
          return err;
 801182c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8011830:	e00b      	b.n	801184a <netconn_recv_data_tcp+0x10a>
        }
        return ERR_RST;
 8011832:	f06f 030d 	mvn.w	r3, #13
 8011836:	e008      	b.n	801184a <netconn_recv_data_tcp+0x10a>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8011838:	2101      	movs	r1, #1
 801183a:	68f8      	ldr	r0, [r7, #12]
 801183c:	f000 f8d6 	bl	80119ec <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8011840:	f06f 030e 	mvn.w	r3, #14
 8011844:	e001      	b.n	801184a <netconn_recv_data_tcp+0x10a>
    }
  }
  return err;
 8011846:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 801184a:	4618      	mov	r0, r3
 801184c:	3740      	adds	r7, #64	@ 0x40
 801184e:	46bd      	mov	sp, r7
 8011850:	bd80      	pop	{r7, pc}
	...

08011854 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8011854:	b580      	push	{r7, lr}
 8011856:	b086      	sub	sp, #24
 8011858:	af00      	add	r7, sp, #0
 801185a:	6078      	str	r0, [r7, #4]
 801185c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 801185e:	2300      	movs	r3, #0
 8011860:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8011862:	683b      	ldr	r3, [r7, #0]
 8011864:	2b00      	cmp	r3, #0
 8011866:	d109      	bne.n	801187c <netconn_recv+0x28>
 8011868:	4b33      	ldr	r3, [pc, #204]	@ (8011938 <netconn_recv+0xe4>)
 801186a:	f240 3263 	movw	r2, #867	@ 0x363
 801186e:	4933      	ldr	r1, [pc, #204]	@ (801193c <netconn_recv+0xe8>)
 8011870:	4833      	ldr	r0, [pc, #204]	@ (8011940 <netconn_recv+0xec>)
 8011872:	f00f fc27 	bl	80210c4 <iprintf>
 8011876:	f06f 030f 	mvn.w	r3, #15
 801187a:	e059      	b.n	8011930 <netconn_recv+0xdc>
  *new_buf = NULL;
 801187c:	683b      	ldr	r3, [r7, #0]
 801187e:	2200      	movs	r2, #0
 8011880:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d109      	bne.n	801189c <netconn_recv+0x48>
 8011888:	4b2b      	ldr	r3, [pc, #172]	@ (8011938 <netconn_recv+0xe4>)
 801188a:	f240 3265 	movw	r2, #869	@ 0x365
 801188e:	492d      	ldr	r1, [pc, #180]	@ (8011944 <netconn_recv+0xf0>)
 8011890:	482b      	ldr	r0, [pc, #172]	@ (8011940 <netconn_recv+0xec>)
 8011892:	f00f fc17 	bl	80210c4 <iprintf>
 8011896:	f06f 030f 	mvn.w	r3, #15
 801189a:	e049      	b.n	8011930 <netconn_recv+0xdc>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	781b      	ldrb	r3, [r3, #0]
 80118a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80118a4:	2b10      	cmp	r3, #16
 80118a6:	d13d      	bne.n	8011924 <netconn_recv+0xd0>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 80118a8:	2300      	movs	r3, #0
 80118aa:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80118ac:	f240 326f 	movw	r2, #879	@ 0x36f
 80118b0:	4921      	ldr	r1, [pc, #132]	@ (8011938 <netconn_recv+0xe4>)
 80118b2:	2006      	movs	r0, #6
 80118b4:	f002 fce6 	bl	8014284 <memp_malloc_fn>
 80118b8:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 80118ba:	697b      	ldr	r3, [r7, #20]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d102      	bne.n	80118c6 <netconn_recv+0x72>
      return ERR_MEM;
 80118c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80118c4:	e034      	b.n	8011930 <netconn_recv+0xdc>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 80118c6:	f107 030c 	add.w	r3, r7, #12
 80118ca:	2200      	movs	r2, #0
 80118cc:	4619      	mov	r1, r3
 80118ce:	6878      	ldr	r0, [r7, #4]
 80118d0:	f7ff ff36 	bl	8011740 <netconn_recv_data_tcp>
 80118d4:	4603      	mov	r3, r0
 80118d6:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80118d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d006      	beq.n	80118ee <netconn_recv+0x9a>
      memp_free(MEMP_NETBUF, buf);
 80118e0:	6979      	ldr	r1, [r7, #20]
 80118e2:	2006      	movs	r0, #6
 80118e4:	f002 fd60 	bl	80143a8 <memp_free>
      return err;
 80118e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80118ec:	e020      	b.n	8011930 <netconn_recv+0xdc>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d106      	bne.n	8011902 <netconn_recv+0xae>
 80118f4:	4b10      	ldr	r3, [pc, #64]	@ (8011938 <netconn_recv+0xe4>)
 80118f6:	f240 3279 	movw	r2, #889	@ 0x379
 80118fa:	4913      	ldr	r1, [pc, #76]	@ (8011948 <netconn_recv+0xf4>)
 80118fc:	4810      	ldr	r0, [pc, #64]	@ (8011940 <netconn_recv+0xec>)
 80118fe:	f00f fbe1 	bl	80210c4 <iprintf>

    buf->p = p;
 8011902:	68fa      	ldr	r2, [r7, #12]
 8011904:	697b      	ldr	r3, [r7, #20]
 8011906:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8011908:	68fa      	ldr	r2, [r7, #12]
 801190a:	697b      	ldr	r3, [r7, #20]
 801190c:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 801190e:	697b      	ldr	r3, [r7, #20]
 8011910:	2200      	movs	r2, #0
 8011912:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8011914:	697b      	ldr	r3, [r7, #20]
 8011916:	2200      	movs	r2, #0
 8011918:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 801191a:	683b      	ldr	r3, [r7, #0]
 801191c:	697a      	ldr	r2, [r7, #20]
 801191e:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8011920:	2300      	movs	r3, #0
 8011922:	e005      	b.n	8011930 <netconn_recv+0xdc>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8011924:	2200      	movs	r2, #0
 8011926:	6839      	ldr	r1, [r7, #0]
 8011928:	6878      	ldr	r0, [r7, #4]
 801192a:	f7ff fe05 	bl	8011538 <netconn_recv_data>
 801192e:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8011930:	4618      	mov	r0, r3
 8011932:	3718      	adds	r7, #24
 8011934:	46bd      	mov	sp, r7
 8011936:	bd80      	pop	{r7, pc}
 8011938:	080225e4 	.word	0x080225e4
 801193c:	080227fc 	.word	0x080227fc
 8011940:	0802263c 	.word	0x0802263c
 8011944:	0802281c 	.word	0x0802281c
 8011948:	08022894 	.word	0x08022894

0801194c <netconn_sendto>:
 * @param port the remote port to which to send the data
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_sendto(struct netconn *conn, struct netbuf *buf, const ip_addr_t *addr, u16_t port)
{
 801194c:	b580      	push	{r7, lr}
 801194e:	b084      	sub	sp, #16
 8011950:	af00      	add	r7, sp, #0
 8011952:	60f8      	str	r0, [r7, #12]
 8011954:	60b9      	str	r1, [r7, #8]
 8011956:	607a      	str	r2, [r7, #4]
 8011958:	807b      	strh	r3, [r7, #2]
  if (buf != NULL) {
 801195a:	68bb      	ldr	r3, [r7, #8]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d011      	beq.n	8011984 <netconn_sendto+0x38>
    ip_addr_set(&buf->addr, addr);
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d002      	beq.n	801196c <netconn_sendto+0x20>
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	e000      	b.n	801196e <netconn_sendto+0x22>
 801196c:	2300      	movs	r3, #0
 801196e:	68ba      	ldr	r2, [r7, #8]
 8011970:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8011972:	68bb      	ldr	r3, [r7, #8]
 8011974:	887a      	ldrh	r2, [r7, #2]
 8011976:	819a      	strh	r2, [r3, #12]
    return netconn_send(conn, buf);
 8011978:	68b9      	ldr	r1, [r7, #8]
 801197a:	68f8      	ldr	r0, [r7, #12]
 801197c:	f000 f808 	bl	8011990 <netconn_send>
 8011980:	4603      	mov	r3, r0
 8011982:	e001      	b.n	8011988 <netconn_sendto+0x3c>
  }
  return ERR_VAL;
 8011984:	f06f 0305 	mvn.w	r3, #5
}
 8011988:	4618      	mov	r0, r3
 801198a:	3710      	adds	r7, #16
 801198c:	46bd      	mov	sp, r7
 801198e:	bd80      	pop	{r7, pc}

08011990 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8011990:	b580      	push	{r7, lr}
 8011992:	b08c      	sub	sp, #48	@ 0x30
 8011994:	af00      	add	r7, sp, #0
 8011996:	6078      	str	r0, [r7, #4]
 8011998:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	2b00      	cmp	r3, #0
 801199e:	d109      	bne.n	80119b4 <netconn_send+0x24>
 80119a0:	4b0e      	ldr	r3, [pc, #56]	@ (80119dc <netconn_send+0x4c>)
 80119a2:	f240 32b2 	movw	r2, #946	@ 0x3b2
 80119a6:	490e      	ldr	r1, [pc, #56]	@ (80119e0 <netconn_send+0x50>)
 80119a8:	480e      	ldr	r0, [pc, #56]	@ (80119e4 <netconn_send+0x54>)
 80119aa:	f00f fb8b 	bl	80210c4 <iprintf>
 80119ae:	f06f 030f 	mvn.w	r3, #15
 80119b2:	e00e      	b.n	80119d2 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 80119b8:	683b      	ldr	r3, [r7, #0]
 80119ba:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 80119bc:	f107 030c 	add.w	r3, r7, #12
 80119c0:	4619      	mov	r1, r3
 80119c2:	4809      	ldr	r0, [pc, #36]	@ (80119e8 <netconn_send+0x58>)
 80119c4:	f7ff fca6 	bl	8011314 <netconn_apimsg>
 80119c8:	4603      	mov	r3, r0
 80119ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80119ce:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80119d2:	4618      	mov	r0, r3
 80119d4:	3730      	adds	r7, #48	@ 0x30
 80119d6:	46bd      	mov	sp, r7
 80119d8:	bd80      	pop	{r7, pc}
 80119da:	bf00      	nop
 80119dc:	080225e4 	.word	0x080225e4
 80119e0:	080228a0 	.word	0x080228a0
 80119e4:	0802263c 	.word	0x0802263c
 80119e8:	08012981 	.word	0x08012981

080119ec <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80119ec:	b580      	push	{r7, lr}
 80119ee:	b08c      	sub	sp, #48	@ 0x30
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	6078      	str	r0, [r7, #4]
 80119f4:	460b      	mov	r3, r1
 80119f6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d109      	bne.n	8011a12 <netconn_close_shutdown+0x26>
 80119fe:	4b0f      	ldr	r3, [pc, #60]	@ (8011a3c <netconn_close_shutdown+0x50>)
 8011a00:	f240 4247 	movw	r2, #1095	@ 0x447
 8011a04:	490e      	ldr	r1, [pc, #56]	@ (8011a40 <netconn_close_shutdown+0x54>)
 8011a06:	480f      	ldr	r0, [pc, #60]	@ (8011a44 <netconn_close_shutdown+0x58>)
 8011a08:	f00f fb5c 	bl	80210c4 <iprintf>
 8011a0c:	f06f 030f 	mvn.w	r3, #15
 8011a10:	e010      	b.n	8011a34 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8011a16:	78fb      	ldrb	r3, [r7, #3]
 8011a18:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8011a1a:	2329      	movs	r3, #41	@ 0x29
 8011a1c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8011a1e:	f107 030c 	add.w	r3, r7, #12
 8011a22:	4619      	mov	r1, r3
 8011a24:	4808      	ldr	r0, [pc, #32]	@ (8011a48 <netconn_close_shutdown+0x5c>)
 8011a26:	f7ff fc75 	bl	8011314 <netconn_apimsg>
 8011a2a:	4603      	mov	r3, r0
 8011a2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8011a30:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8011a34:	4618      	mov	r0, r3
 8011a36:	3730      	adds	r7, #48	@ 0x30
 8011a38:	46bd      	mov	sp, r7
 8011a3a:	bd80      	pop	{r7, pc}
 8011a3c:	080225e4 	.word	0x080225e4
 8011a40:	08022920 	.word	0x08022920
 8011a44:	0802263c 	.word	0x0802263c
 8011a48:	08012e25 	.word	0x08012e25

08011a4c <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8011a4c:	b580      	push	{r7, lr}
 8011a4e:	b084      	sub	sp, #16
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d101      	bne.n	8011a5e <netconn_err+0x12>
    return ERR_OK;
 8011a5a:	2300      	movs	r3, #0
 8011a5c:	e00d      	b.n	8011a7a <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8011a5e:	f00e f989 	bl	801fd74 <sys_arch_protect>
 8011a62:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	7a1b      	ldrb	r3, [r3, #8]
 8011a68:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	2200      	movs	r2, #0
 8011a6e:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8011a70:	68f8      	ldr	r0, [r7, #12]
 8011a72:	f00e f98d 	bl	801fd90 <sys_arch_unprotect>
  return err;
 8011a76:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	3710      	adds	r7, #16
 8011a7e:	46bd      	mov	sp, r7
 8011a80:	bd80      	pop	{r7, pc}
	...

08011a84 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8011a84:	b580      	push	{r7, lr}
 8011a86:	b082      	sub	sp, #8
 8011a88:	af00      	add	r7, sp, #0
 8011a8a:	4603      	mov	r3, r0
 8011a8c:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8011a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011a92:	f113 0f0d 	cmn.w	r3, #13
 8011a96:	d009      	beq.n	8011aac <lwip_netconn_err_to_msg+0x28>
 8011a98:	f113 0f0d 	cmn.w	r3, #13
 8011a9c:	dc0c      	bgt.n	8011ab8 <lwip_netconn_err_to_msg+0x34>
 8011a9e:	f113 0f0f 	cmn.w	r3, #15
 8011aa2:	d007      	beq.n	8011ab4 <lwip_netconn_err_to_msg+0x30>
 8011aa4:	f113 0f0e 	cmn.w	r3, #14
 8011aa8:	d002      	beq.n	8011ab0 <lwip_netconn_err_to_msg+0x2c>
 8011aaa:	e005      	b.n	8011ab8 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8011aac:	4b0a      	ldr	r3, [pc, #40]	@ (8011ad8 <lwip_netconn_err_to_msg+0x54>)
 8011aae:	e00e      	b.n	8011ace <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8011ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8011adc <lwip_netconn_err_to_msg+0x58>)
 8011ab2:	e00c      	b.n	8011ace <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8011ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8011ae0 <lwip_netconn_err_to_msg+0x5c>)
 8011ab6:	e00a      	b.n	8011ace <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8011ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d005      	beq.n	8011acc <lwip_netconn_err_to_msg+0x48>
 8011ac0:	4b08      	ldr	r3, [pc, #32]	@ (8011ae4 <lwip_netconn_err_to_msg+0x60>)
 8011ac2:	227d      	movs	r2, #125	@ 0x7d
 8011ac4:	4908      	ldr	r1, [pc, #32]	@ (8011ae8 <lwip_netconn_err_to_msg+0x64>)
 8011ac6:	4809      	ldr	r0, [pc, #36]	@ (8011aec <lwip_netconn_err_to_msg+0x68>)
 8011ac8:	f00f fafc 	bl	80210c4 <iprintf>
      return NULL;
 8011acc:	2300      	movs	r3, #0
  }
}
 8011ace:	4618      	mov	r0, r3
 8011ad0:	3708      	adds	r7, #8
 8011ad2:	46bd      	mov	sp, r7
 8011ad4:	bd80      	pop	{r7, pc}
 8011ad6:	bf00      	nop
 8011ad8:	080270e8 	.word	0x080270e8
 8011adc:	080270e9 	.word	0x080270e9
 8011ae0:	080270ea 	.word	0x080270ea
 8011ae4:	0802293c 	.word	0x0802293c
 8011ae8:	08022970 	.word	0x08022970
 8011aec:	08022980 	.word	0x08022980

08011af0 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b082      	sub	sp, #8
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	6078      	str	r0, [r7, #4]
 8011af8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8011afa:	683b      	ldr	r3, [r7, #0]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d105      	bne.n	8011b0c <lwip_netconn_is_err_msg+0x1c>
 8011b00:	4b12      	ldr	r3, [pc, #72]	@ (8011b4c <lwip_netconn_is_err_msg+0x5c>)
 8011b02:	2285      	movs	r2, #133	@ 0x85
 8011b04:	4912      	ldr	r1, [pc, #72]	@ (8011b50 <lwip_netconn_is_err_msg+0x60>)
 8011b06:	4813      	ldr	r0, [pc, #76]	@ (8011b54 <lwip_netconn_is_err_msg+0x64>)
 8011b08:	f00f fadc 	bl	80210c4 <iprintf>

  if (msg == &netconn_aborted) {
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	4a12      	ldr	r2, [pc, #72]	@ (8011b58 <lwip_netconn_is_err_msg+0x68>)
 8011b10:	4293      	cmp	r3, r2
 8011b12:	d104      	bne.n	8011b1e <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8011b14:	683b      	ldr	r3, [r7, #0]
 8011b16:	22f3      	movs	r2, #243	@ 0xf3
 8011b18:	701a      	strb	r2, [r3, #0]
    return 1;
 8011b1a:	2301      	movs	r3, #1
 8011b1c:	e012      	b.n	8011b44 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	4a0e      	ldr	r2, [pc, #56]	@ (8011b5c <lwip_netconn_is_err_msg+0x6c>)
 8011b22:	4293      	cmp	r3, r2
 8011b24:	d104      	bne.n	8011b30 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8011b26:	683b      	ldr	r3, [r7, #0]
 8011b28:	22f2      	movs	r2, #242	@ 0xf2
 8011b2a:	701a      	strb	r2, [r3, #0]
    return 1;
 8011b2c:	2301      	movs	r3, #1
 8011b2e:	e009      	b.n	8011b44 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	4a0b      	ldr	r2, [pc, #44]	@ (8011b60 <lwip_netconn_is_err_msg+0x70>)
 8011b34:	4293      	cmp	r3, r2
 8011b36:	d104      	bne.n	8011b42 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8011b38:	683b      	ldr	r3, [r7, #0]
 8011b3a:	22f1      	movs	r2, #241	@ 0xf1
 8011b3c:	701a      	strb	r2, [r3, #0]
    return 1;
 8011b3e:	2301      	movs	r3, #1
 8011b40:	e000      	b.n	8011b44 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8011b42:	2300      	movs	r3, #0
}
 8011b44:	4618      	mov	r0, r3
 8011b46:	3708      	adds	r7, #8
 8011b48:	46bd      	mov	sp, r7
 8011b4a:	bd80      	pop	{r7, pc}
 8011b4c:	0802293c 	.word	0x0802293c
 8011b50:	080229a8 	.word	0x080229a8
 8011b54:	08022980 	.word	0x08022980
 8011b58:	080270e8 	.word	0x080270e8
 8011b5c:	080270e9 	.word	0x080270e9
 8011b60:	080270ea 	.word	0x080270ea

08011b64 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8011b64:	b580      	push	{r7, lr}
 8011b66:	b088      	sub	sp, #32
 8011b68:	af00      	add	r7, sp, #0
 8011b6a:	60f8      	str	r0, [r7, #12]
 8011b6c:	60b9      	str	r1, [r7, #8]
 8011b6e:	607a      	str	r2, [r7, #4]
 8011b70:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8011b72:	68bb      	ldr	r3, [r7, #8]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d105      	bne.n	8011b84 <recv_udp+0x20>
 8011b78:	4b35      	ldr	r3, [pc, #212]	@ (8011c50 <recv_udp+0xec>)
 8011b7a:	22e5      	movs	r2, #229	@ 0xe5
 8011b7c:	4935      	ldr	r1, [pc, #212]	@ (8011c54 <recv_udp+0xf0>)
 8011b7e:	4836      	ldr	r0, [pc, #216]	@ (8011c58 <recv_udp+0xf4>)
 8011b80:	f00f faa0 	bl	80210c4 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d105      	bne.n	8011b96 <recv_udp+0x32>
 8011b8a:	4b31      	ldr	r3, [pc, #196]	@ (8011c50 <recv_udp+0xec>)
 8011b8c:	22e6      	movs	r2, #230	@ 0xe6
 8011b8e:	4933      	ldr	r1, [pc, #204]	@ (8011c5c <recv_udp+0xf8>)
 8011b90:	4831      	ldr	r0, [pc, #196]	@ (8011c58 <recv_udp+0xf4>)
 8011b92:	f00f fa97 	bl	80210c4 <iprintf>
  conn = (struct netconn *)arg;
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8011b9a:	69fb      	ldr	r3, [r7, #28]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d103      	bne.n	8011ba8 <recv_udp+0x44>
    pbuf_free(p);
 8011ba0:	6878      	ldr	r0, [r7, #4]
 8011ba2:	f003 fbef 	bl	8015384 <pbuf_free>
    return;
 8011ba6:	e04f      	b.n	8011c48 <recv_udp+0xe4>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8011ba8:	69fb      	ldr	r3, [r7, #28]
 8011baa:	685b      	ldr	r3, [r3, #4]
 8011bac:	68ba      	ldr	r2, [r7, #8]
 8011bae:	429a      	cmp	r2, r3
 8011bb0:	d005      	beq.n	8011bbe <recv_udp+0x5a>
 8011bb2:	4b27      	ldr	r3, [pc, #156]	@ (8011c50 <recv_udp+0xec>)
 8011bb4:	22ee      	movs	r2, #238	@ 0xee
 8011bb6:	492a      	ldr	r1, [pc, #168]	@ (8011c60 <recv_udp+0xfc>)
 8011bb8:	4827      	ldr	r0, [pc, #156]	@ (8011c58 <recv_udp+0xf4>)
 8011bba:	f00f fa83 	bl	80210c4 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8011bbe:	69fb      	ldr	r3, [r7, #28]
 8011bc0:	3310      	adds	r3, #16
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	f00d ff80 	bl	801fac8 <sys_mbox_valid>
 8011bc8:	4603      	mov	r3, r0
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d103      	bne.n	8011bd6 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8011bce:	6878      	ldr	r0, [r7, #4]
 8011bd0:	f003 fbd8 	bl	8015384 <pbuf_free>
    return;
 8011bd4:	e038      	b.n	8011c48 <recv_udp+0xe4>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8011bd6:	22fb      	movs	r2, #251	@ 0xfb
 8011bd8:	491d      	ldr	r1, [pc, #116]	@ (8011c50 <recv_udp+0xec>)
 8011bda:	2006      	movs	r0, #6
 8011bdc:	f002 fb52 	bl	8014284 <memp_malloc_fn>
 8011be0:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8011be2:	69bb      	ldr	r3, [r7, #24]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d103      	bne.n	8011bf0 <recv_udp+0x8c>
    pbuf_free(p);
 8011be8:	6878      	ldr	r0, [r7, #4]
 8011bea:	f003 fbcb 	bl	8015384 <pbuf_free>
    return;
 8011bee:	e02b      	b.n	8011c48 <recv_udp+0xe4>
  } else {
    buf->p = p;
 8011bf0:	69bb      	ldr	r3, [r7, #24]
 8011bf2:	687a      	ldr	r2, [r7, #4]
 8011bf4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8011bf6:	69bb      	ldr	r3, [r7, #24]
 8011bf8:	687a      	ldr	r2, [r7, #4]
 8011bfa:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8011bfc:	683b      	ldr	r3, [r7, #0]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d002      	beq.n	8011c08 <recv_udp+0xa4>
 8011c02:	683b      	ldr	r3, [r7, #0]
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	e000      	b.n	8011c0a <recv_udp+0xa6>
 8011c08:	2300      	movs	r3, #0
 8011c0a:	69ba      	ldr	r2, [r7, #24]
 8011c0c:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8011c0e:	69bb      	ldr	r3, [r7, #24]
 8011c10:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8011c12:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	891b      	ldrh	r3, [r3, #8]
 8011c18:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8011c1a:	69fb      	ldr	r3, [r7, #28]
 8011c1c:	3310      	adds	r3, #16
 8011c1e:	69b9      	ldr	r1, [r7, #24]
 8011c20:	4618      	mov	r0, r3
 8011c22:	f00d fee5 	bl	801f9f0 <sys_mbox_trypost>
 8011c26:	4603      	mov	r3, r0
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d003      	beq.n	8011c34 <recv_udp+0xd0>
    netbuf_delete(buf);
 8011c2c:	69b8      	ldr	r0, [r7, #24]
 8011c2e:	f001 f9bd 	bl	8012fac <netbuf_delete>
    return;
 8011c32:	e009      	b.n	8011c48 <recv_udp+0xe4>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8011c34:	69fb      	ldr	r3, [r7, #28]
 8011c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d005      	beq.n	8011c48 <recv_udp+0xe4>
 8011c3c:	69fb      	ldr	r3, [r7, #28]
 8011c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011c40:	8afa      	ldrh	r2, [r7, #22]
 8011c42:	2100      	movs	r1, #0
 8011c44:	69f8      	ldr	r0, [r7, #28]
 8011c46:	4798      	blx	r3
  }
}
 8011c48:	3720      	adds	r7, #32
 8011c4a:	46bd      	mov	sp, r7
 8011c4c:	bd80      	pop	{r7, pc}
 8011c4e:	bf00      	nop
 8011c50:	0802293c 	.word	0x0802293c
 8011c54:	080229b4 	.word	0x080229b4
 8011c58:	08022980 	.word	0x08022980
 8011c5c:	080229d8 	.word	0x080229d8
 8011c60:	080229f8 	.word	0x080229f8

08011c64 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8011c64:	b580      	push	{r7, lr}
 8011c66:	b088      	sub	sp, #32
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	60f8      	str	r0, [r7, #12]
 8011c6c:	60b9      	str	r1, [r7, #8]
 8011c6e:	607a      	str	r2, [r7, #4]
 8011c70:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8011c72:	68bb      	ldr	r3, [r7, #8]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d106      	bne.n	8011c86 <recv_tcp+0x22>
 8011c78:	4b36      	ldr	r3, [pc, #216]	@ (8011d54 <recv_tcp+0xf0>)
 8011c7a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8011c7e:	4936      	ldr	r1, [pc, #216]	@ (8011d58 <recv_tcp+0xf4>)
 8011c80:	4836      	ldr	r0, [pc, #216]	@ (8011d5c <recv_tcp+0xf8>)
 8011c82:	f00f fa1f 	bl	80210c4 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d106      	bne.n	8011c9a <recv_tcp+0x36>
 8011c8c:	4b31      	ldr	r3, [pc, #196]	@ (8011d54 <recv_tcp+0xf0>)
 8011c8e:	f240 122d 	movw	r2, #301	@ 0x12d
 8011c92:	4933      	ldr	r1, [pc, #204]	@ (8011d60 <recv_tcp+0xfc>)
 8011c94:	4831      	ldr	r0, [pc, #196]	@ (8011d5c <recv_tcp+0xf8>)
 8011c96:	f00f fa15 	bl	80210c4 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8011c9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d006      	beq.n	8011cb0 <recv_tcp+0x4c>
 8011ca2:	4b2c      	ldr	r3, [pc, #176]	@ (8011d54 <recv_tcp+0xf0>)
 8011ca4:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8011ca8:	492e      	ldr	r1, [pc, #184]	@ (8011d64 <recv_tcp+0x100>)
 8011caa:	482c      	ldr	r0, [pc, #176]	@ (8011d5c <recv_tcp+0xf8>)
 8011cac:	f00f fa0a 	bl	80210c4 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8011cb4:	697b      	ldr	r3, [r7, #20]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d102      	bne.n	8011cc0 <recv_tcp+0x5c>
    return ERR_VAL;
 8011cba:	f06f 0305 	mvn.w	r3, #5
 8011cbe:	e045      	b.n	8011d4c <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8011cc0:	697b      	ldr	r3, [r7, #20]
 8011cc2:	685b      	ldr	r3, [r3, #4]
 8011cc4:	68ba      	ldr	r2, [r7, #8]
 8011cc6:	429a      	cmp	r2, r3
 8011cc8:	d006      	beq.n	8011cd8 <recv_tcp+0x74>
 8011cca:	4b22      	ldr	r3, [pc, #136]	@ (8011d54 <recv_tcp+0xf0>)
 8011ccc:	f240 1235 	movw	r2, #309	@ 0x135
 8011cd0:	4925      	ldr	r1, [pc, #148]	@ (8011d68 <recv_tcp+0x104>)
 8011cd2:	4822      	ldr	r0, [pc, #136]	@ (8011d5c <recv_tcp+0xf8>)
 8011cd4:	f00f f9f6 	bl	80210c4 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8011cd8:	697b      	ldr	r3, [r7, #20]
 8011cda:	3310      	adds	r3, #16
 8011cdc:	4618      	mov	r0, r3
 8011cde:	f00d fef3 	bl	801fac8 <sys_mbox_valid>
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d10d      	bne.n	8011d04 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d008      	beq.n	8011d00 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	891b      	ldrh	r3, [r3, #8]
 8011cf2:	4619      	mov	r1, r3
 8011cf4:	68b8      	ldr	r0, [r7, #8]
 8011cf6:	f004 fbed 	bl	80164d4 <tcp_recved>
      pbuf_free(p);
 8011cfa:	6878      	ldr	r0, [r7, #4]
 8011cfc:	f003 fb42 	bl	8015384 <pbuf_free>
    }
    return ERR_OK;
 8011d00:	2300      	movs	r3, #0
 8011d02:	e023      	b.n	8011d4c <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d005      	beq.n	8011d16 <recv_tcp+0xb2>
    msg = p;
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	891b      	ldrh	r3, [r3, #8]
 8011d12:	83fb      	strh	r3, [r7, #30]
 8011d14:	e003      	b.n	8011d1e <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8011d16:	4b15      	ldr	r3, [pc, #84]	@ (8011d6c <recv_tcp+0x108>)
 8011d18:	61bb      	str	r3, [r7, #24]
    len = 0;
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8011d1e:	697b      	ldr	r3, [r7, #20]
 8011d20:	3310      	adds	r3, #16
 8011d22:	69b9      	ldr	r1, [r7, #24]
 8011d24:	4618      	mov	r0, r3
 8011d26:	f00d fe63 	bl	801f9f0 <sys_mbox_trypost>
 8011d2a:	4603      	mov	r3, r0
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d002      	beq.n	8011d36 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8011d30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011d34:	e00a      	b.n	8011d4c <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8011d36:	697b      	ldr	r3, [r7, #20]
 8011d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d005      	beq.n	8011d4a <recv_tcp+0xe6>
 8011d3e:	697b      	ldr	r3, [r7, #20]
 8011d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d42:	8bfa      	ldrh	r2, [r7, #30]
 8011d44:	2100      	movs	r1, #0
 8011d46:	6978      	ldr	r0, [r7, #20]
 8011d48:	4798      	blx	r3
  }

  return ERR_OK;
 8011d4a:	2300      	movs	r3, #0
}
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	3720      	adds	r7, #32
 8011d50:	46bd      	mov	sp, r7
 8011d52:	bd80      	pop	{r7, pc}
 8011d54:	0802293c 	.word	0x0802293c
 8011d58:	08022a18 	.word	0x08022a18
 8011d5c:	08022980 	.word	0x08022980
 8011d60:	08022a3c 	.word	0x08022a3c
 8011d64:	08022a5c 	.word	0x08022a5c
 8011d68:	08022a74 	.word	0x08022a74
 8011d6c:	080270ea 	.word	0x080270ea

08011d70 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8011d70:	b580      	push	{r7, lr}
 8011d72:	b084      	sub	sp, #16
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6078      	str	r0, [r7, #4]
 8011d78:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d106      	bne.n	8011d92 <poll_tcp+0x22>
 8011d84:	4b2b      	ldr	r3, [pc, #172]	@ (8011e34 <poll_tcp+0xc4>)
 8011d86:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 8011d8a:	492b      	ldr	r1, [pc, #172]	@ (8011e38 <poll_tcp+0xc8>)
 8011d8c:	482b      	ldr	r0, [pc, #172]	@ (8011e3c <poll_tcp+0xcc>)
 8011d8e:	f00f f999 	bl	80210c4 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	785b      	ldrb	r3, [r3, #1]
 8011d96:	2b01      	cmp	r3, #1
 8011d98:	d104      	bne.n	8011da4 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8011d9a:	2101      	movs	r1, #1
 8011d9c:	68f8      	ldr	r0, [r7, #12]
 8011d9e:	f000 fe71 	bl	8012a84 <lwip_netconn_do_writemore>
 8011da2:	e016      	b.n	8011dd2 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	785b      	ldrb	r3, [r3, #1]
 8011da8:	2b04      	cmp	r3, #4
 8011daa:	d112      	bne.n	8011dd2 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d00a      	beq.n	8011dca <poll_tcp+0x5a>
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011db8:	7a5b      	ldrb	r3, [r3, #9]
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d005      	beq.n	8011dca <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011dc2:	7a5a      	ldrb	r2, [r3, #9]
 8011dc4:	3a01      	subs	r2, #1
 8011dc6:	b2d2      	uxtb	r2, r2
 8011dc8:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8011dca:	2101      	movs	r1, #1
 8011dcc:	68f8      	ldr	r0, [r7, #12]
 8011dce:	f000 fb4d 	bl	801246c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011dd8:	f003 0310 	and.w	r3, r3, #16
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d023      	beq.n	8011e28 <poll_tcp+0xb8>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	685b      	ldr	r3, [r3, #4]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d01f      	beq.n	8011e28 <poll_tcp+0xb8>
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	685b      	ldr	r3, [r3, #4]
 8011dec:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011df0:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8011df4:	d318      	bcc.n	8011e28 <poll_tcp+0xb8>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	685b      	ldr	r3, [r3, #4]
 8011dfa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011dfe:	2b04      	cmp	r3, #4
 8011e00:	d812      	bhi.n	8011e28 <poll_tcp+0xb8>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011e08:	f023 0310 	bic.w	r3, r3, #16
 8011e0c:	b2da      	uxtb	r2, r3
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d005      	beq.n	8011e28 <poll_tcp+0xb8>
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e20:	2200      	movs	r2, #0
 8011e22:	2102      	movs	r1, #2
 8011e24:	68f8      	ldr	r0, [r7, #12]
 8011e26:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8011e28:	2300      	movs	r3, #0
}
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	3710      	adds	r7, #16
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	bd80      	pop	{r7, pc}
 8011e32:	bf00      	nop
 8011e34:	0802293c 	.word	0x0802293c
 8011e38:	08022a94 	.word	0x08022a94
 8011e3c:	08022980 	.word	0x08022980

08011e40 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8011e40:	b580      	push	{r7, lr}
 8011e42:	b086      	sub	sp, #24
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	60f8      	str	r0, [r7, #12]
 8011e48:	60b9      	str	r1, [r7, #8]
 8011e4a:	4613      	mov	r3, r2
 8011e4c:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8011e52:	697b      	ldr	r3, [r7, #20]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d106      	bne.n	8011e66 <sent_tcp+0x26>
 8011e58:	4b21      	ldr	r3, [pc, #132]	@ (8011ee0 <sent_tcp+0xa0>)
 8011e5a:	f240 1293 	movw	r2, #403	@ 0x193
 8011e5e:	4921      	ldr	r1, [pc, #132]	@ (8011ee4 <sent_tcp+0xa4>)
 8011e60:	4821      	ldr	r0, [pc, #132]	@ (8011ee8 <sent_tcp+0xa8>)
 8011e62:	f00f f92f 	bl	80210c4 <iprintf>

  if (conn) {
 8011e66:	697b      	ldr	r3, [r7, #20]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d034      	beq.n	8011ed6 <sent_tcp+0x96>
    if (conn->state == NETCONN_WRITE) {
 8011e6c:	697b      	ldr	r3, [r7, #20]
 8011e6e:	785b      	ldrb	r3, [r3, #1]
 8011e70:	2b01      	cmp	r3, #1
 8011e72:	d104      	bne.n	8011e7e <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8011e74:	2101      	movs	r1, #1
 8011e76:	6978      	ldr	r0, [r7, #20]
 8011e78:	f000 fe04 	bl	8012a84 <lwip_netconn_do_writemore>
 8011e7c:	e007      	b.n	8011e8e <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8011e7e:	697b      	ldr	r3, [r7, #20]
 8011e80:	785b      	ldrb	r3, [r3, #1]
 8011e82:	2b04      	cmp	r3, #4
 8011e84:	d103      	bne.n	8011e8e <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8011e86:	2101      	movs	r1, #1
 8011e88:	6978      	ldr	r0, [r7, #20]
 8011e8a:	f000 faef 	bl	801246c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011e8e:	697b      	ldr	r3, [r7, #20]
 8011e90:	685b      	ldr	r3, [r3, #4]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d01f      	beq.n	8011ed6 <sent_tcp+0x96>
 8011e96:	697b      	ldr	r3, [r7, #20]
 8011e98:	685b      	ldr	r3, [r3, #4]
 8011e9a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011e9e:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8011ea2:	d318      	bcc.n	8011ed6 <sent_tcp+0x96>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8011ea4:	697b      	ldr	r3, [r7, #20]
 8011ea6:	685b      	ldr	r3, [r3, #4]
 8011ea8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011eac:	2b04      	cmp	r3, #4
 8011eae:	d812      	bhi.n	8011ed6 <sent_tcp+0x96>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8011eb0:	697b      	ldr	r3, [r7, #20]
 8011eb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011eb6:	f023 0310 	bic.w	r3, r3, #16
 8011eba:	b2da      	uxtb	r2, r3
 8011ebc:	697b      	ldr	r3, [r7, #20]
 8011ebe:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8011ec2:	697b      	ldr	r3, [r7, #20]
 8011ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d005      	beq.n	8011ed6 <sent_tcp+0x96>
 8011eca:	697b      	ldr	r3, [r7, #20]
 8011ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ece:	88fa      	ldrh	r2, [r7, #6]
 8011ed0:	2102      	movs	r1, #2
 8011ed2:	6978      	ldr	r0, [r7, #20]
 8011ed4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8011ed6:	2300      	movs	r3, #0
}
 8011ed8:	4618      	mov	r0, r3
 8011eda:	3718      	adds	r7, #24
 8011edc:	46bd      	mov	sp, r7
 8011ede:	bd80      	pop	{r7, pc}
 8011ee0:	0802293c 	.word	0x0802293c
 8011ee4:	08022a94 	.word	0x08022a94
 8011ee8:	08022980 	.word	0x08022980

08011eec <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8011eec:	b580      	push	{r7, lr}
 8011eee:	b088      	sub	sp, #32
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	6078      	str	r0, [r7, #4]
 8011ef4:	460b      	mov	r3, r1
 8011ef6:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8011efc:	69fb      	ldr	r3, [r7, #28]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d106      	bne.n	8011f10 <err_tcp+0x24>
 8011f02:	4b61      	ldr	r3, [pc, #388]	@ (8012088 <err_tcp+0x19c>)
 8011f04:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8011f08:	4960      	ldr	r1, [pc, #384]	@ (801208c <err_tcp+0x1a0>)
 8011f0a:	4861      	ldr	r0, [pc, #388]	@ (8012090 <err_tcp+0x1a4>)
 8011f0c:	f00f f8da 	bl	80210c4 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8011f10:	f00d ff30 	bl	801fd74 <sys_arch_protect>
 8011f14:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8011f16:	69fb      	ldr	r3, [r7, #28]
 8011f18:	2200      	movs	r2, #0
 8011f1a:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8011f1c:	69fb      	ldr	r3, [r7, #28]
 8011f1e:	78fa      	ldrb	r2, [r7, #3]
 8011f20:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8011f22:	69fb      	ldr	r3, [r7, #28]
 8011f24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011f28:	f043 0301 	orr.w	r3, r3, #1
 8011f2c:	b2da      	uxtb	r2, r3
 8011f2e:	69fb      	ldr	r3, [r7, #28]
 8011f30:	f883 2020 	strb.w	r2, [r3, #32]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8011f34:	69fb      	ldr	r3, [r7, #28]
 8011f36:	785b      	ldrb	r3, [r3, #1]
 8011f38:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8011f3a:	69fb      	ldr	r3, [r7, #28]
 8011f3c:	2200      	movs	r2, #0
 8011f3e:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8011f40:	69b8      	ldr	r0, [r7, #24]
 8011f42:	f00d ff25 	bl	801fd90 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8011f46:	69fb      	ldr	r3, [r7, #28]
 8011f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d005      	beq.n	8011f5a <err_tcp+0x6e>
 8011f4e:	69fb      	ldr	r3, [r7, #28]
 8011f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f52:	2200      	movs	r2, #0
 8011f54:	2104      	movs	r1, #4
 8011f56:	69f8      	ldr	r0, [r7, #28]
 8011f58:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8011f5a:	69fb      	ldr	r3, [r7, #28]
 8011f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d005      	beq.n	8011f6e <err_tcp+0x82>
 8011f62:	69fb      	ldr	r3, [r7, #28]
 8011f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f66:	2200      	movs	r2, #0
 8011f68:	2100      	movs	r1, #0
 8011f6a:	69f8      	ldr	r0, [r7, #28]
 8011f6c:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8011f6e:	69fb      	ldr	r3, [r7, #28]
 8011f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d005      	beq.n	8011f82 <err_tcp+0x96>
 8011f76:	69fb      	ldr	r3, [r7, #28]
 8011f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f7a:	2200      	movs	r2, #0
 8011f7c:	2102      	movs	r1, #2
 8011f7e:	69f8      	ldr	r0, [r7, #28]
 8011f80:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8011f82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011f86:	4618      	mov	r0, r3
 8011f88:	f7ff fd7c 	bl	8011a84 <lwip_netconn_err_to_msg>
 8011f8c:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8011f8e:	69fb      	ldr	r3, [r7, #28]
 8011f90:	3310      	adds	r3, #16
 8011f92:	4618      	mov	r0, r3
 8011f94:	f00d fd98 	bl	801fac8 <sys_mbox_valid>
 8011f98:	4603      	mov	r3, r0
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d005      	beq.n	8011faa <err_tcp+0xbe>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8011f9e:	69fb      	ldr	r3, [r7, #28]
 8011fa0:	3310      	adds	r3, #16
 8011fa2:	6939      	ldr	r1, [r7, #16]
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	f00d fd23 	bl	801f9f0 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8011faa:	69fb      	ldr	r3, [r7, #28]
 8011fac:	3314      	adds	r3, #20
 8011fae:	4618      	mov	r0, r3
 8011fb0:	f00d fd8a 	bl	801fac8 <sys_mbox_valid>
 8011fb4:	4603      	mov	r3, r0
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d005      	beq.n	8011fc6 <err_tcp+0xda>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8011fba:	69fb      	ldr	r3, [r7, #28]
 8011fbc:	3314      	adds	r3, #20
 8011fbe:	6939      	ldr	r1, [r7, #16]
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	f00d fd15 	bl	801f9f0 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8011fc6:	7dfb      	ldrb	r3, [r7, #23]
 8011fc8:	2b01      	cmp	r3, #1
 8011fca:	d005      	beq.n	8011fd8 <err_tcp+0xec>
 8011fcc:	7dfb      	ldrb	r3, [r7, #23]
 8011fce:	2b04      	cmp	r3, #4
 8011fd0:	d002      	beq.n	8011fd8 <err_tcp+0xec>
 8011fd2:	7dfb      	ldrb	r3, [r7, #23]
 8011fd4:	2b03      	cmp	r3, #3
 8011fd6:	d146      	bne.n	8012066 <err_tcp+0x17a>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8011fd8:	69fb      	ldr	r3, [r7, #28]
 8011fda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011fde:	f003 0304 	and.w	r3, r3, #4
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	bf14      	ite	ne
 8011fe6:	2301      	movne	r3, #1
 8011fe8:	2300      	moveq	r3, #0
 8011fea:	b2db      	uxtb	r3, r3
 8011fec:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8011fee:	69fb      	ldr	r3, [r7, #28]
 8011ff0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011ff4:	f023 0304 	bic.w	r3, r3, #4
 8011ff8:	b2da      	uxtb	r2, r3
 8011ffa:	69fb      	ldr	r3, [r7, #28]
 8011ffc:	f883 2020 	strb.w	r2, [r3, #32]

    if (!was_nonblocking_connect) {
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	2b00      	cmp	r3, #0
 8012004:	d13b      	bne.n	801207e <err_tcp+0x192>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8012006:	69fb      	ldr	r3, [r7, #28]
 8012008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801200a:	2b00      	cmp	r3, #0
 801200c:	d106      	bne.n	801201c <err_tcp+0x130>
 801200e:	4b1e      	ldr	r3, [pc, #120]	@ (8012088 <err_tcp+0x19c>)
 8012010:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8012014:	491f      	ldr	r1, [pc, #124]	@ (8012094 <err_tcp+0x1a8>)
 8012016:	481e      	ldr	r0, [pc, #120]	@ (8012090 <err_tcp+0x1a4>)
 8012018:	f00f f854 	bl	80210c4 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 801201c:	7dfb      	ldrb	r3, [r7, #23]
 801201e:	2b04      	cmp	r3, #4
 8012020:	d104      	bne.n	801202c <err_tcp+0x140>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8012022:	69fb      	ldr	r3, [r7, #28]
 8012024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012026:	2200      	movs	r2, #0
 8012028:	711a      	strb	r2, [r3, #4]
 801202a:	e003      	b.n	8012034 <err_tcp+0x148>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 801202c:	69fb      	ldr	r3, [r7, #28]
 801202e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012030:	78fa      	ldrb	r2, [r7, #3]
 8012032:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8012034:	69fb      	ldr	r3, [r7, #28]
 8012036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	330c      	adds	r3, #12
 801203c:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 801203e:	68b8      	ldr	r0, [r7, #8]
 8012040:	f00d fdfc 	bl	801fc3c <sys_sem_valid>
 8012044:	4603      	mov	r3, r0
 8012046:	2b00      	cmp	r3, #0
 8012048:	d106      	bne.n	8012058 <err_tcp+0x16c>
 801204a:	4b0f      	ldr	r3, [pc, #60]	@ (8012088 <err_tcp+0x19c>)
 801204c:	f240 12ef 	movw	r2, #495	@ 0x1ef
 8012050:	4911      	ldr	r1, [pc, #68]	@ (8012098 <err_tcp+0x1ac>)
 8012052:	480f      	ldr	r0, [pc, #60]	@ (8012090 <err_tcp+0x1a4>)
 8012054:	f00f f836 	bl	80210c4 <iprintf>
      conn->current_msg = NULL;
 8012058:	69fb      	ldr	r3, [r7, #28]
 801205a:	2200      	movs	r2, #0
 801205c:	625a      	str	r2, [r3, #36]	@ 0x24
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 801205e:	68b8      	ldr	r0, [r7, #8]
 8012060:	f00d fdc7 	bl	801fbf2 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8012064:	e00b      	b.n	801207e <err_tcp+0x192>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8012066:	69fb      	ldr	r3, [r7, #28]
 8012068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801206a:	2b00      	cmp	r3, #0
 801206c:	d008      	beq.n	8012080 <err_tcp+0x194>
 801206e:	4b06      	ldr	r3, [pc, #24]	@ (8012088 <err_tcp+0x19c>)
 8012070:	f240 12f7 	movw	r2, #503	@ 0x1f7
 8012074:	4909      	ldr	r1, [pc, #36]	@ (801209c <err_tcp+0x1b0>)
 8012076:	4806      	ldr	r0, [pc, #24]	@ (8012090 <err_tcp+0x1a4>)
 8012078:	f00f f824 	bl	80210c4 <iprintf>
  }
}
 801207c:	e000      	b.n	8012080 <err_tcp+0x194>
      (old_state == NETCONN_CONNECT)) {
 801207e:	bf00      	nop
}
 8012080:	bf00      	nop
 8012082:	3720      	adds	r7, #32
 8012084:	46bd      	mov	sp, r7
 8012086:	bd80      	pop	{r7, pc}
 8012088:	0802293c 	.word	0x0802293c
 801208c:	08022a94 	.word	0x08022a94
 8012090:	08022980 	.word	0x08022980
 8012094:	08022aa4 	.word	0x08022aa4
 8012098:	08022ac0 	.word	0x08022ac0
 801209c:	08022adc 	.word	0x08022adc

080120a0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80120a0:	b580      	push	{r7, lr}
 80120a2:	b084      	sub	sp, #16
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	685b      	ldr	r3, [r3, #4]
 80120ac:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 80120ae:	6879      	ldr	r1, [r7, #4]
 80120b0:	68f8      	ldr	r0, [r7, #12]
 80120b2:	f005 f915 	bl	80172e0 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80120b6:	490a      	ldr	r1, [pc, #40]	@ (80120e0 <setup_tcp+0x40>)
 80120b8:	68f8      	ldr	r0, [r7, #12]
 80120ba:	f005 f923 	bl	8017304 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80120be:	4909      	ldr	r1, [pc, #36]	@ (80120e4 <setup_tcp+0x44>)
 80120c0:	68f8      	ldr	r0, [r7, #12]
 80120c2:	f005 f941 	bl	8017348 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80120c6:	2202      	movs	r2, #2
 80120c8:	4907      	ldr	r1, [pc, #28]	@ (80120e8 <setup_tcp+0x48>)
 80120ca:	68f8      	ldr	r0, [r7, #12]
 80120cc:	f005 f998 	bl	8017400 <tcp_poll>
  tcp_err(pcb, err_tcp);
 80120d0:	4906      	ldr	r1, [pc, #24]	@ (80120ec <setup_tcp+0x4c>)
 80120d2:	68f8      	ldr	r0, [r7, #12]
 80120d4:	f005 f95a 	bl	801738c <tcp_err>
}
 80120d8:	bf00      	nop
 80120da:	3710      	adds	r7, #16
 80120dc:	46bd      	mov	sp, r7
 80120de:	bd80      	pop	{r7, pc}
 80120e0:	08011c65 	.word	0x08011c65
 80120e4:	08011e41 	.word	0x08011e41
 80120e8:	08011d71 	.word	0x08011d71
 80120ec:	08011eed 	.word	0x08011eed

080120f0 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 80120f0:	b590      	push	{r4, r7, lr}
 80120f2:	b085      	sub	sp, #20
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 80120f8:	2300      	movs	r3, #0
 80120fa:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	685b      	ldr	r3, [r3, #4]
 8012102:	2b00      	cmp	r3, #0
 8012104:	d006      	beq.n	8012114 <pcb_new+0x24>
 8012106:	4b2b      	ldr	r3, [pc, #172]	@ (80121b4 <pcb_new+0xc4>)
 8012108:	f240 2265 	movw	r2, #613	@ 0x265
 801210c:	492a      	ldr	r1, [pc, #168]	@ (80121b8 <pcb_new+0xc8>)
 801210e:	482b      	ldr	r0, [pc, #172]	@ (80121bc <pcb_new+0xcc>)
 8012110:	f00e ffd8 	bl	80210c4 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	781b      	ldrb	r3, [r3, #0]
 801211a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801211e:	2b10      	cmp	r3, #16
 8012120:	d022      	beq.n	8012168 <pcb_new+0x78>
 8012122:	2b20      	cmp	r3, #32
 8012124:	d133      	bne.n	801218e <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	681c      	ldr	r4, [r3, #0]
 801212a:	7bfb      	ldrb	r3, [r7, #15]
 801212c:	4618      	mov	r0, r3
 801212e:	f00a fea5 	bl	801ce7c <udp_new_ip_type>
 8012132:	4603      	mov	r3, r0
 8012134:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	685b      	ldr	r3, [r3, #4]
 801213c:	2b00      	cmp	r3, #0
 801213e:	d02a      	beq.n	8012196 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	781b      	ldrb	r3, [r3, #0]
 8012146:	2b22      	cmp	r3, #34	@ 0x22
 8012148:	d104      	bne.n	8012154 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	685b      	ldr	r3, [r3, #4]
 8012150:	2201      	movs	r2, #1
 8012152:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	6858      	ldr	r0, [r3, #4]
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	461a      	mov	r2, r3
 8012160:	4917      	ldr	r1, [pc, #92]	@ (80121c0 <pcb_new+0xd0>)
 8012162:	f00a fe0d 	bl	801cd80 <udp_recv>
      }
      break;
 8012166:	e016      	b.n	8012196 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	681c      	ldr	r4, [r3, #0]
 801216c:	7bfb      	ldrb	r3, [r7, #15]
 801216e:	4618      	mov	r0, r3
 8012170:	f005 f8a8 	bl	80172c4 <tcp_new_ip_type>
 8012174:	4603      	mov	r3, r0
 8012176:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	685b      	ldr	r3, [r3, #4]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d00b      	beq.n	801219a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	4618      	mov	r0, r3
 8012188:	f7ff ff8a 	bl	80120a0 <setup_tcp>
      }
      break;
 801218c:	e005      	b.n	801219a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	22fa      	movs	r2, #250	@ 0xfa
 8012192:	711a      	strb	r2, [r3, #4]
      return;
 8012194:	e00a      	b.n	80121ac <pcb_new+0xbc>
      break;
 8012196:	bf00      	nop
 8012198:	e000      	b.n	801219c <pcb_new+0xac>
      break;
 801219a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	685b      	ldr	r3, [r3, #4]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d102      	bne.n	80121ac <pcb_new+0xbc>
    msg->err = ERR_MEM;
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	22ff      	movs	r2, #255	@ 0xff
 80121aa:	711a      	strb	r2, [r3, #4]
  }
}
 80121ac:	3714      	adds	r7, #20
 80121ae:	46bd      	mov	sp, r7
 80121b0:	bd90      	pop	{r4, r7, pc}
 80121b2:	bf00      	nop
 80121b4:	0802293c 	.word	0x0802293c
 80121b8:	08022b20 	.word	0x08022b20
 80121bc:	08022980 	.word	0x08022980
 80121c0:	08011b65 	.word	0x08011b65

080121c4 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 80121c4:	b580      	push	{r7, lr}
 80121c6:	b084      	sub	sp, #16
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	2200      	movs	r2, #0
 80121d4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	685b      	ldr	r3, [r3, #4]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d102      	bne.n	80121e6 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 80121e0:	68f8      	ldr	r0, [r7, #12]
 80121e2:	f7ff ff85 	bl	80120f0 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 80121e6:	bf00      	nop
 80121e8:	3710      	adds	r7, #16
 80121ea:	46bd      	mov	sp, r7
 80121ec:	bd80      	pop	{r7, pc}
	...

080121f0 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 80121f0:	b580      	push	{r7, lr}
 80121f2:	b086      	sub	sp, #24
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	4603      	mov	r3, r0
 80121f8:	6039      	str	r1, [r7, #0]
 80121fa:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 80121fc:	2300      	movs	r3, #0
 80121fe:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8012200:	f240 22c7 	movw	r2, #711	@ 0x2c7
 8012204:	4932      	ldr	r1, [pc, #200]	@ (80122d0 <netconn_alloc+0xe0>)
 8012206:	2007      	movs	r0, #7
 8012208:	f002 f83c 	bl	8014284 <memp_malloc_fn>
 801220c:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d101      	bne.n	8012218 <netconn_alloc+0x28>
    return NULL;
 8012214:	2300      	movs	r3, #0
 8012216:	e056      	b.n	80122c6 <netconn_alloc+0xd6>
  }

  conn->pending_err = ERR_OK;
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	2200      	movs	r2, #0
 801221c:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	79fa      	ldrb	r2, [r7, #7]
 8012222:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	2200      	movs	r2, #0
 8012228:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 801222a:	79fb      	ldrb	r3, [r7, #7]
 801222c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012230:	2b10      	cmp	r3, #16
 8012232:	d004      	beq.n	801223e <netconn_alloc+0x4e>
 8012234:	2b20      	cmp	r3, #32
 8012236:	d105      	bne.n	8012244 <netconn_alloc+0x54>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8012238:	2306      	movs	r3, #6
 801223a:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 801223c:	e00a      	b.n	8012254 <netconn_alloc+0x64>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 801223e:	2306      	movs	r3, #6
 8012240:	617b      	str	r3, [r7, #20]
      break;
 8012242:	e007      	b.n	8012254 <netconn_alloc+0x64>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8012244:	4b22      	ldr	r3, [pc, #136]	@ (80122d0 <netconn_alloc+0xe0>)
 8012246:	f240 22e5 	movw	r2, #741	@ 0x2e5
 801224a:	4922      	ldr	r1, [pc, #136]	@ (80122d4 <netconn_alloc+0xe4>)
 801224c:	4822      	ldr	r0, [pc, #136]	@ (80122d8 <netconn_alloc+0xe8>)
 801224e:	f00e ff39 	bl	80210c4 <iprintf>
      goto free_and_return;
 8012252:	e033      	b.n	80122bc <netconn_alloc+0xcc>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	3310      	adds	r3, #16
 8012258:	6979      	ldr	r1, [r7, #20]
 801225a:	4618      	mov	r0, r3
 801225c:	f00d fb6e 	bl	801f93c <sys_mbox_new>
 8012260:	4603      	mov	r3, r0
 8012262:	2b00      	cmp	r3, #0
 8012264:	d129      	bne.n	80122ba <netconn_alloc+0xca>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	330c      	adds	r3, #12
 801226a:	2100      	movs	r1, #0
 801226c:	4618      	mov	r0, r3
 801226e:	f00d fc49 	bl	801fb04 <sys_sem_new>
 8012272:	4603      	mov	r3, r0
 8012274:	2b00      	cmp	r3, #0
 8012276:	d005      	beq.n	8012284 <netconn_alloc+0x94>
    sys_mbox_free(&conn->recvmbox);
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	3310      	adds	r3, #16
 801227c:	4618      	mov	r0, r3
 801227e:	f00d fb8f 	bl	801f9a0 <sys_mbox_free>
    goto free_and_return;
 8012282:	e01b      	b.n	80122bc <netconn_alloc+0xcc>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	3314      	adds	r3, #20
 8012288:	4618      	mov	r0, r3
 801228a:	f00d fc2e 	bl	801faea <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	2200      	movs	r2, #0
 8012292:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801229a:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	683a      	ldr	r2, [r7, #0]
 80122a0:	629a      	str	r2, [r3, #40]	@ 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	2200      	movs	r2, #0
 80122a6:	625a      	str	r2, [r3, #36]	@ 0x24
#endif /* LWIP_TCP */
#if LWIP_SO_SNDTIMEO
  conn->send_timeout = 0;
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	2200      	movs	r2, #0
 80122ac:	61da      	str	r2, [r3, #28]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	7cfa      	ldrb	r2, [r7, #19]
 80122b2:	f883 2020 	strb.w	r2, [r3, #32]
  return conn;
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	e005      	b.n	80122c6 <netconn_alloc+0xd6>
    goto free_and_return;
 80122ba:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 80122bc:	68f9      	ldr	r1, [r7, #12]
 80122be:	2007      	movs	r0, #7
 80122c0:	f002 f872 	bl	80143a8 <memp_free>
  return NULL;
 80122c4:	2300      	movs	r3, #0
}
 80122c6:	4618      	mov	r0, r3
 80122c8:	3718      	adds	r7, #24
 80122ca:	46bd      	mov	sp, r7
 80122cc:	bd80      	pop	{r7, pc}
 80122ce:	bf00      	nop
 80122d0:	0802293c 	.word	0x0802293c
 80122d4:	08022b40 	.word	0x08022b40
 80122d8:	08022980 	.word	0x08022980

080122dc <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 80122dc:	b580      	push	{r7, lr}
 80122de:	b082      	sub	sp, #8
 80122e0:	af00      	add	r7, sp, #0
 80122e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	685b      	ldr	r3, [r3, #4]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d006      	beq.n	80122fa <netconn_free+0x1e>
 80122ec:	4b1b      	ldr	r3, [pc, #108]	@ (801235c <netconn_free+0x80>)
 80122ee:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 80122f2:	491b      	ldr	r1, [pc, #108]	@ (8012360 <netconn_free+0x84>)
 80122f4:	481b      	ldr	r0, [pc, #108]	@ (8012364 <netconn_free+0x88>)
 80122f6:	f00e fee5 	bl	80210c4 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	3310      	adds	r3, #16
 80122fe:	4618      	mov	r0, r3
 8012300:	f00d fbe2 	bl	801fac8 <sys_mbox_valid>
 8012304:	4603      	mov	r3, r0
 8012306:	2b00      	cmp	r3, #0
 8012308:	d006      	beq.n	8012318 <netconn_free+0x3c>
 801230a:	4b14      	ldr	r3, [pc, #80]	@ (801235c <netconn_free+0x80>)
 801230c:	f240 3223 	movw	r2, #803	@ 0x323
 8012310:	4915      	ldr	r1, [pc, #84]	@ (8012368 <netconn_free+0x8c>)
 8012312:	4814      	ldr	r0, [pc, #80]	@ (8012364 <netconn_free+0x88>)
 8012314:	f00e fed6 	bl	80210c4 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	3314      	adds	r3, #20
 801231c:	4618      	mov	r0, r3
 801231e:	f00d fbd3 	bl	801fac8 <sys_mbox_valid>
 8012322:	4603      	mov	r3, r0
 8012324:	2b00      	cmp	r3, #0
 8012326:	d006      	beq.n	8012336 <netconn_free+0x5a>
 8012328:	4b0c      	ldr	r3, [pc, #48]	@ (801235c <netconn_free+0x80>)
 801232a:	f240 3226 	movw	r2, #806	@ 0x326
 801232e:	490f      	ldr	r1, [pc, #60]	@ (801236c <netconn_free+0x90>)
 8012330:	480c      	ldr	r0, [pc, #48]	@ (8012364 <netconn_free+0x88>)
 8012332:	f00e fec7 	bl	80210c4 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	330c      	adds	r3, #12
 801233a:	4618      	mov	r0, r3
 801233c:	f00d fc66 	bl	801fc0c <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	330c      	adds	r3, #12
 8012344:	4618      	mov	r0, r3
 8012346:	f00d fc8a 	bl	801fc5e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 801234a:	6879      	ldr	r1, [r7, #4]
 801234c:	2007      	movs	r0, #7
 801234e:	f002 f82b 	bl	80143a8 <memp_free>
}
 8012352:	bf00      	nop
 8012354:	3708      	adds	r7, #8
 8012356:	46bd      	mov	sp, r7
 8012358:	bd80      	pop	{r7, pc}
 801235a:	bf00      	nop
 801235c:	0802293c 	.word	0x0802293c
 8012360:	08022b68 	.word	0x08022b68
 8012364:	08022980 	.word	0x08022980
 8012368:	08022b98 	.word	0x08022b98
 801236c:	08022bd4 	.word	0x08022bd4

08012370 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8012370:	b580      	push	{r7, lr}
 8012372:	b086      	sub	sp, #24
 8012374:	af00      	add	r7, sp, #0
 8012376:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	3310      	adds	r3, #16
 801237c:	4618      	mov	r0, r3
 801237e:	f00d fba3 	bl	801fac8 <sys_mbox_valid>
 8012382:	4603      	mov	r3, r0
 8012384:	2b00      	cmp	r3, #0
 8012386:	d02f      	beq.n	80123e8 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8012388:	e018      	b.n	80123bc <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	781b      	ldrb	r3, [r3, #0]
 801238e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012392:	2b10      	cmp	r3, #16
 8012394:	d10e      	bne.n	80123b4 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8012396:	693b      	ldr	r3, [r7, #16]
 8012398:	f107 020f 	add.w	r2, r7, #15
 801239c:	4611      	mov	r1, r2
 801239e:	4618      	mov	r0, r3
 80123a0:	f7ff fba6 	bl	8011af0 <lwip_netconn_is_err_msg>
 80123a4:	4603      	mov	r3, r0
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d108      	bne.n	80123bc <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 80123aa:	693b      	ldr	r3, [r7, #16]
 80123ac:	4618      	mov	r0, r3
 80123ae:	f002 ffe9 	bl	8015384 <pbuf_free>
 80123b2:	e003      	b.n	80123bc <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 80123b4:	693b      	ldr	r3, [r7, #16]
 80123b6:	4618      	mov	r0, r3
 80123b8:	f000 fdf8 	bl	8012fac <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	3310      	adds	r3, #16
 80123c0:	f107 0210 	add.w	r2, r7, #16
 80123c4:	4611      	mov	r1, r2
 80123c6:	4618      	mov	r0, r3
 80123c8:	f00d fb67 	bl	801fa9a <sys_arch_mbox_tryfetch>
 80123cc:	4603      	mov	r3, r0
 80123ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80123d2:	d1da      	bne.n	801238a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	3310      	adds	r3, #16
 80123d8:	4618      	mov	r0, r3
 80123da:	f00d fae1 	bl	801f9a0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	3310      	adds	r3, #16
 80123e2:	4618      	mov	r0, r3
 80123e4:	f00d fb81 	bl	801faea <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	3314      	adds	r3, #20
 80123ec:	4618      	mov	r0, r3
 80123ee:	f00d fb6b 	bl	801fac8 <sys_mbox_valid>
 80123f2:	4603      	mov	r3, r0
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d034      	beq.n	8012462 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80123f8:	e01d      	b.n	8012436 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 80123fa:	693b      	ldr	r3, [r7, #16]
 80123fc:	f107 020e 	add.w	r2, r7, #14
 8012400:	4611      	mov	r1, r2
 8012402:	4618      	mov	r0, r3
 8012404:	f7ff fb74 	bl	8011af0 <lwip_netconn_is_err_msg>
 8012408:	4603      	mov	r3, r0
 801240a:	2b00      	cmp	r3, #0
 801240c:	d113      	bne.n	8012436 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 801240e:	693b      	ldr	r3, [r7, #16]
 8012410:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8012412:	6978      	ldr	r0, [r7, #20]
 8012414:	f7ff ffac 	bl	8012370 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8012418:	697b      	ldr	r3, [r7, #20]
 801241a:	685b      	ldr	r3, [r3, #4]
 801241c:	2b00      	cmp	r3, #0
 801241e:	d007      	beq.n	8012430 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8012420:	697b      	ldr	r3, [r7, #20]
 8012422:	685b      	ldr	r3, [r3, #4]
 8012424:	4618      	mov	r0, r3
 8012426:	f003 ff57 	bl	80162d8 <tcp_abort>
            newconn->pcb.tcp = NULL;
 801242a:	697b      	ldr	r3, [r7, #20]
 801242c:	2200      	movs	r2, #0
 801242e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8012430:	6978      	ldr	r0, [r7, #20]
 8012432:	f7ff ff53 	bl	80122dc <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	3314      	adds	r3, #20
 801243a:	f107 0210 	add.w	r2, r7, #16
 801243e:	4611      	mov	r1, r2
 8012440:	4618      	mov	r0, r3
 8012442:	f00d fb2a 	bl	801fa9a <sys_arch_mbox_tryfetch>
 8012446:	4603      	mov	r3, r0
 8012448:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801244c:	d1d5      	bne.n	80123fa <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	3314      	adds	r3, #20
 8012452:	4618      	mov	r0, r3
 8012454:	f00d faa4 	bl	801f9a0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	3314      	adds	r3, #20
 801245c:	4618      	mov	r0, r3
 801245e:	f00d fb44 	bl	801faea <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8012462:	bf00      	nop
 8012464:	3718      	adds	r7, #24
 8012466:	46bd      	mov	sp, r7
 8012468:	bd80      	pop	{r7, pc}
	...

0801246c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 801246c:	b580      	push	{r7, lr}
 801246e:	b086      	sub	sp, #24
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
 8012474:	460b      	mov	r3, r1
 8012476:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8012478:	2300      	movs	r3, #0
 801247a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d106      	bne.n	8012490 <lwip_netconn_do_close_internal+0x24>
 8012482:	4b87      	ldr	r3, [pc, #540]	@ (80126a0 <lwip_netconn_do_close_internal+0x234>)
 8012484:	f240 32a2 	movw	r2, #930	@ 0x3a2
 8012488:	4986      	ldr	r1, [pc, #536]	@ (80126a4 <lwip_netconn_do_close_internal+0x238>)
 801248a:	4887      	ldr	r0, [pc, #540]	@ (80126a8 <lwip_netconn_do_close_internal+0x23c>)
 801248c:	f00e fe1a 	bl	80210c4 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	781b      	ldrb	r3, [r3, #0]
 8012494:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012498:	2b10      	cmp	r3, #16
 801249a:	d006      	beq.n	80124aa <lwip_netconn_do_close_internal+0x3e>
 801249c:	4b80      	ldr	r3, [pc, #512]	@ (80126a0 <lwip_netconn_do_close_internal+0x234>)
 801249e:	f240 32a3 	movw	r2, #931	@ 0x3a3
 80124a2:	4982      	ldr	r1, [pc, #520]	@ (80126ac <lwip_netconn_do_close_internal+0x240>)
 80124a4:	4880      	ldr	r0, [pc, #512]	@ (80126a8 <lwip_netconn_do_close_internal+0x23c>)
 80124a6:	f00e fe0d 	bl	80210c4 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	785b      	ldrb	r3, [r3, #1]
 80124ae:	2b04      	cmp	r3, #4
 80124b0:	d006      	beq.n	80124c0 <lwip_netconn_do_close_internal+0x54>
 80124b2:	4b7b      	ldr	r3, [pc, #492]	@ (80126a0 <lwip_netconn_do_close_internal+0x234>)
 80124b4:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 80124b8:	497d      	ldr	r1, [pc, #500]	@ (80126b0 <lwip_netconn_do_close_internal+0x244>)
 80124ba:	487b      	ldr	r0, [pc, #492]	@ (80126a8 <lwip_netconn_do_close_internal+0x23c>)
 80124bc:	f00e fe02 	bl	80210c4 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	685b      	ldr	r3, [r3, #4]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d106      	bne.n	80124d6 <lwip_netconn_do_close_internal+0x6a>
 80124c8:	4b75      	ldr	r3, [pc, #468]	@ (80126a0 <lwip_netconn_do_close_internal+0x234>)
 80124ca:	f240 32a5 	movw	r2, #933	@ 0x3a5
 80124ce:	4979      	ldr	r1, [pc, #484]	@ (80126b4 <lwip_netconn_do_close_internal+0x248>)
 80124d0:	4875      	ldr	r0, [pc, #468]	@ (80126a8 <lwip_netconn_do_close_internal+0x23c>)
 80124d2:	f00e fdf7 	bl	80210c4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d106      	bne.n	80124ec <lwip_netconn_do_close_internal+0x80>
 80124de:	4b70      	ldr	r3, [pc, #448]	@ (80126a0 <lwip_netconn_do_close_internal+0x234>)
 80124e0:	f240 32a6 	movw	r2, #934	@ 0x3a6
 80124e4:	4974      	ldr	r1, [pc, #464]	@ (80126b8 <lwip_netconn_do_close_internal+0x24c>)
 80124e6:	4870      	ldr	r0, [pc, #448]	@ (80126a8 <lwip_netconn_do_close_internal+0x23c>)
 80124e8:	f00e fdec 	bl	80210c4 <iprintf>

  tpcb = conn->pcb.tcp;
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	685b      	ldr	r3, [r3, #4]
 80124f0:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80124f6:	7a1b      	ldrb	r3, [r3, #8]
 80124f8:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 80124fa:	7bfb      	ldrb	r3, [r7, #15]
 80124fc:	f003 0301 	and.w	r3, r3, #1
 8012500:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8012502:	7bfb      	ldrb	r3, [r7, #15]
 8012504:	f003 0302 	and.w	r3, r3, #2
 8012508:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 801250a:	7bfb      	ldrb	r3, [r7, #15]
 801250c:	2b03      	cmp	r3, #3
 801250e:	d102      	bne.n	8012516 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8012510:	2301      	movs	r3, #1
 8012512:	75bb      	strb	r3, [r7, #22]
 8012514:	e01f      	b.n	8012556 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8012516:	7bbb      	ldrb	r3, [r7, #14]
 8012518:	2b00      	cmp	r3, #0
 801251a:	d00e      	beq.n	801253a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 801251c:	693b      	ldr	r3, [r7, #16]
 801251e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8012520:	2b05      	cmp	r3, #5
 8012522:	d007      	beq.n	8012534 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8012524:	693b      	ldr	r3, [r7, #16]
 8012526:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8012528:	2b06      	cmp	r3, #6
 801252a:	d003      	beq.n	8012534 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 801252c:	693b      	ldr	r3, [r7, #16]
 801252e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8012530:	2b08      	cmp	r3, #8
 8012532:	d102      	bne.n	801253a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8012534:	2301      	movs	r3, #1
 8012536:	75bb      	strb	r3, [r7, #22]
 8012538:	e00d      	b.n	8012556 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 801253a:	7b7b      	ldrb	r3, [r7, #13]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d008      	beq.n	8012552 <lwip_netconn_do_close_internal+0xe6>
 8012540:	693b      	ldr	r3, [r7, #16]
 8012542:	8b5b      	ldrh	r3, [r3, #26]
 8012544:	f003 0310 	and.w	r3, r3, #16
 8012548:	2b00      	cmp	r3, #0
 801254a:	d002      	beq.n	8012552 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 801254c:	2301      	movs	r3, #1
 801254e:	75bb      	strb	r3, [r7, #22]
 8012550:	e001      	b.n	8012556 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8012552:	2300      	movs	r3, #0
 8012554:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8012556:	7dbb      	ldrb	r3, [r7, #22]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d003      	beq.n	8012564 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 801255c:	2100      	movs	r1, #0
 801255e:	6938      	ldr	r0, [r7, #16]
 8012560:	f004 febe 	bl	80172e0 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8012564:	693b      	ldr	r3, [r7, #16]
 8012566:	7d1b      	ldrb	r3, [r3, #20]
 8012568:	2b01      	cmp	r3, #1
 801256a:	d104      	bne.n	8012576 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 801256c:	2100      	movs	r1, #0
 801256e:	6938      	ldr	r0, [r7, #16]
 8012570:	f004 ff2e 	bl	80173d0 <tcp_accept>
 8012574:	e01d      	b.n	80125b2 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8012576:	7bbb      	ldrb	r3, [r7, #14]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d007      	beq.n	801258c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 801257c:	2100      	movs	r1, #0
 801257e:	6938      	ldr	r0, [r7, #16]
 8012580:	f004 fec0 	bl	8017304 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8012584:	2100      	movs	r1, #0
 8012586:	6938      	ldr	r0, [r7, #16]
 8012588:	f004 ff22 	bl	80173d0 <tcp_accept>
    }
    if (shut_tx) {
 801258c:	7b7b      	ldrb	r3, [r7, #13]
 801258e:	2b00      	cmp	r3, #0
 8012590:	d003      	beq.n	801259a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8012592:	2100      	movs	r1, #0
 8012594:	6938      	ldr	r0, [r7, #16]
 8012596:	f004 fed7 	bl	8017348 <tcp_sent>
    }
    if (shut_close) {
 801259a:	7dbb      	ldrb	r3, [r7, #22]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d008      	beq.n	80125b2 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 80125a0:	2200      	movs	r2, #0
 80125a2:	2100      	movs	r1, #0
 80125a4:	6938      	ldr	r0, [r7, #16]
 80125a6:	f004 ff2b 	bl	8017400 <tcp_poll>
      tcp_err(tpcb, NULL);
 80125aa:	2100      	movs	r1, #0
 80125ac:	6938      	ldr	r0, [r7, #16]
 80125ae:	f004 feed 	bl	801738c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 80125b2:	7dbb      	ldrb	r3, [r7, #22]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d005      	beq.n	80125c4 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 80125b8:	6938      	ldr	r0, [r7, #16]
 80125ba:	f003 fd47 	bl	801604c <tcp_close>
 80125be:	4603      	mov	r3, r0
 80125c0:	75fb      	strb	r3, [r7, #23]
 80125c2:	e007      	b.n	80125d4 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80125c4:	7bbb      	ldrb	r3, [r7, #14]
 80125c6:	7b7a      	ldrb	r2, [r7, #13]
 80125c8:	4619      	mov	r1, r3
 80125ca:	6938      	ldr	r0, [r7, #16]
 80125cc:	f003 fd6a 	bl	80160a4 <tcp_shutdown>
 80125d0:	4603      	mov	r3, r0
 80125d2:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 80125d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d102      	bne.n	80125e2 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 80125dc:	2301      	movs	r3, #1
 80125de:	757b      	strb	r3, [r7, #21]
 80125e0:	e016      	b.n	8012610 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 80125e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80125e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80125ea:	d10f      	bne.n	801260c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80125f0:	7a5b      	ldrb	r3, [r3, #9]
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d10c      	bne.n	8012610 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 80125f6:	2301      	movs	r3, #1
 80125f8:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 80125fa:	7dbb      	ldrb	r3, [r7, #22]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d007      	beq.n	8012610 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8012600:	6938      	ldr	r0, [r7, #16]
 8012602:	f003 fe69 	bl	80162d8 <tcp_abort>
          err = ERR_OK;
 8012606:	2300      	movs	r3, #0
 8012608:	75fb      	strb	r3, [r7, #23]
 801260a:	e001      	b.n	8012610 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 801260c:	2301      	movs	r3, #1
 801260e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8012610:	7d7b      	ldrb	r3, [r7, #21]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d052      	beq.n	80126bc <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	330c      	adds	r3, #12
 801261e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012624:	7dfa      	ldrb	r2, [r7, #23]
 8012626:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	2200      	movs	r2, #0
 801262c:	625a      	str	r2, [r3, #36]	@ 0x24
    conn->state = NETCONN_NONE;
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	2200      	movs	r2, #0
 8012632:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8012634:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012638:	2b00      	cmp	r3, #0
 801263a:	d129      	bne.n	8012690 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 801263c:	7dbb      	ldrb	r3, [r7, #22]
 801263e:	2b00      	cmp	r3, #0
 8012640:	d00c      	beq.n	801265c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	2200      	movs	r2, #0
 8012646:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801264c:	2b00      	cmp	r3, #0
 801264e:	d005      	beq.n	801265c <lwip_netconn_do_close_internal+0x1f0>
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012654:	2200      	movs	r2, #0
 8012656:	2104      	movs	r1, #4
 8012658:	6878      	ldr	r0, [r7, #4]
 801265a:	4798      	blx	r3
      }
      if (shut_rx) {
 801265c:	7bbb      	ldrb	r3, [r7, #14]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d009      	beq.n	8012676 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012666:	2b00      	cmp	r3, #0
 8012668:	d005      	beq.n	8012676 <lwip_netconn_do_close_internal+0x20a>
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801266e:	2200      	movs	r2, #0
 8012670:	2100      	movs	r1, #0
 8012672:	6878      	ldr	r0, [r7, #4]
 8012674:	4798      	blx	r3
      }
      if (shut_tx) {
 8012676:	7b7b      	ldrb	r3, [r7, #13]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d009      	beq.n	8012690 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012680:	2b00      	cmp	r3, #0
 8012682:	d005      	beq.n	8012690 <lwip_netconn_do_close_internal+0x224>
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012688:	2200      	movs	r2, #0
 801268a:	2102      	movs	r1, #2
 801268c:	6878      	ldr	r0, [r7, #4]
 801268e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8012690:	78fb      	ldrb	r3, [r7, #3]
 8012692:	2b00      	cmp	r3, #0
 8012694:	d002      	beq.n	801269c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8012696:	68b8      	ldr	r0, [r7, #8]
 8012698:	f00d faab 	bl	801fbf2 <sys_sem_signal>
    }
    return ERR_OK;
 801269c:	2300      	movs	r3, #0
 801269e:	e03c      	b.n	801271a <lwip_netconn_do_close_internal+0x2ae>
 80126a0:	0802293c 	.word	0x0802293c
 80126a4:	08022c10 	.word	0x08022c10
 80126a8:	08022980 	.word	0x08022980
 80126ac:	08022c20 	.word	0x08022c20
 80126b0:	08022c40 	.word	0x08022c40
 80126b4:	08022c64 	.word	0x08022c64
 80126b8:	08022aa4 	.word	0x08022aa4
  }
  if (!close_finished) {
 80126bc:	7d7b      	ldrb	r3, [r7, #21]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d11e      	bne.n	8012700 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80126c2:	693b      	ldr	r3, [r7, #16]
 80126c4:	7d1b      	ldrb	r3, [r3, #20]
 80126c6:	2b01      	cmp	r3, #1
 80126c8:	d106      	bne.n	80126d8 <lwip_netconn_do_close_internal+0x26c>
 80126ca:	4b16      	ldr	r3, [pc, #88]	@ (8012724 <lwip_netconn_do_close_internal+0x2b8>)
 80126cc:	f240 4241 	movw	r2, #1089	@ 0x441
 80126d0:	4915      	ldr	r1, [pc, #84]	@ (8012728 <lwip_netconn_do_close_internal+0x2bc>)
 80126d2:	4816      	ldr	r0, [pc, #88]	@ (801272c <lwip_netconn_do_close_internal+0x2c0>)
 80126d4:	f00e fcf6 	bl	80210c4 <iprintf>
    if (shut_tx) {
 80126d8:	7b7b      	ldrb	r3, [r7, #13]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d003      	beq.n	80126e6 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 80126de:	4914      	ldr	r1, [pc, #80]	@ (8012730 <lwip_netconn_do_close_internal+0x2c4>)
 80126e0:	6938      	ldr	r0, [r7, #16]
 80126e2:	f004 fe31 	bl	8017348 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 80126e6:	2201      	movs	r2, #1
 80126e8:	4912      	ldr	r1, [pc, #72]	@ (8012734 <lwip_netconn_do_close_internal+0x2c8>)
 80126ea:	6938      	ldr	r0, [r7, #16]
 80126ec:	f004 fe88 	bl	8017400 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80126f0:	4911      	ldr	r1, [pc, #68]	@ (8012738 <lwip_netconn_do_close_internal+0x2cc>)
 80126f2:	6938      	ldr	r0, [r7, #16]
 80126f4:	f004 fe4a 	bl	801738c <tcp_err>
    tcp_arg(tpcb, conn);
 80126f8:	6879      	ldr	r1, [r7, #4]
 80126fa:	6938      	ldr	r0, [r7, #16]
 80126fc:	f004 fdf0 	bl	80172e0 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8012700:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d106      	bne.n	8012716 <lwip_netconn_do_close_internal+0x2aa>
 8012708:	4b06      	ldr	r3, [pc, #24]	@ (8012724 <lwip_netconn_do_close_internal+0x2b8>)
 801270a:	f240 424d 	movw	r2, #1101	@ 0x44d
 801270e:	490b      	ldr	r1, [pc, #44]	@ (801273c <lwip_netconn_do_close_internal+0x2d0>)
 8012710:	4806      	ldr	r0, [pc, #24]	@ (801272c <lwip_netconn_do_close_internal+0x2c0>)
 8012712:	f00e fcd7 	bl	80210c4 <iprintf>
  return err;
 8012716:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801271a:	4618      	mov	r0, r3
 801271c:	3718      	adds	r7, #24
 801271e:	46bd      	mov	sp, r7
 8012720:	bd80      	pop	{r7, pc}
 8012722:	bf00      	nop
 8012724:	0802293c 	.word	0x0802293c
 8012728:	08022c78 	.word	0x08022c78
 801272c:	08022980 	.word	0x08022980
 8012730:	08011e41 	.word	0x08011e41
 8012734:	08011d71 	.word	0x08011d71
 8012738:	08011eed 	.word	0x08011eed
 801273c:	08022c9c 	.word	0x08022c9c

08012740 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8012740:	b580      	push	{r7, lr}
 8012742:	b084      	sub	sp, #16
 8012744:	af00      	add	r7, sp, #0
 8012746:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	785b      	ldrb	r3, [r3, #1]
 8012752:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8012754:	7afb      	ldrb	r3, [r7, #11]
 8012756:	2b00      	cmp	r3, #0
 8012758:	d00d      	beq.n	8012776 <lwip_netconn_do_delconn+0x36>
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	781b      	ldrb	r3, [r3, #0]
 8012760:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012764:	2b10      	cmp	r3, #16
 8012766:	d006      	beq.n	8012776 <lwip_netconn_do_delconn+0x36>
 8012768:	4b61      	ldr	r3, [pc, #388]	@ (80128f0 <lwip_netconn_do_delconn+0x1b0>)
 801276a:	f240 425e 	movw	r2, #1118	@ 0x45e
 801276e:	4961      	ldr	r1, [pc, #388]	@ (80128f4 <lwip_netconn_do_delconn+0x1b4>)
 8012770:	4861      	ldr	r0, [pc, #388]	@ (80128f8 <lwip_netconn_do_delconn+0x1b8>)
 8012772:	f00e fca7 	bl	80210c4 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8012776:	7afb      	ldrb	r3, [r7, #11]
 8012778:	2b00      	cmp	r3, #0
 801277a:	d005      	beq.n	8012788 <lwip_netconn_do_delconn+0x48>
 801277c:	7afb      	ldrb	r3, [r7, #11]
 801277e:	2b02      	cmp	r3, #2
 8012780:	d002      	beq.n	8012788 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8012782:	7afb      	ldrb	r3, [r7, #11]
 8012784:	2b03      	cmp	r3, #3
 8012786:	d10a      	bne.n	801279e <lwip_netconn_do_delconn+0x5e>
       (state != NETCONN_CONNECT)) ||
 8012788:	7afb      	ldrb	r3, [r7, #11]
 801278a:	2b03      	cmp	r3, #3
 801278c:	d10b      	bne.n	80127a6 <lwip_netconn_do_delconn+0x66>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012796:	f003 0304 	and.w	r3, r3, #4
 801279a:	2b00      	cmp	r3, #0
 801279c:	d103      	bne.n	80127a6 <lwip_netconn_do_delconn+0x66>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	22fb      	movs	r2, #251	@ 0xfb
 80127a2:	711a      	strb	r2, [r3, #4]
 80127a4:	e098      	b.n	80128d8 <lwip_netconn_do_delconn+0x198>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 80127a6:	7afb      	ldrb	r3, [r7, #11]
 80127a8:	2b03      	cmp	r3, #3
 80127aa:	d10e      	bne.n	80127ca <lwip_netconn_do_delconn+0x8a>
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80127b4:	f003 0304 	and.w	r3, r3, #4
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d106      	bne.n	80127ca <lwip_netconn_do_delconn+0x8a>
 80127bc:	4b4c      	ldr	r3, [pc, #304]	@ (80128f0 <lwip_netconn_do_delconn+0x1b0>)
 80127be:	f240 427a 	movw	r2, #1146	@ 0x47a
 80127c2:	494e      	ldr	r1, [pc, #312]	@ (80128fc <lwip_netconn_do_delconn+0x1bc>)
 80127c4:	484c      	ldr	r0, [pc, #304]	@ (80128f8 <lwip_netconn_do_delconn+0x1b8>)
 80127c6:	f00e fc7d 	bl	80210c4 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	2200      	movs	r2, #0
 80127ce:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	4618      	mov	r0, r3
 80127d6:	f7ff fdcb 	bl	8012370 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	685b      	ldr	r3, [r3, #4]
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d05f      	beq.n	80128a4 <lwip_netconn_do_delconn+0x164>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	781b      	ldrb	r3, [r3, #0]
 80127ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80127ee:	2b10      	cmp	r3, #16
 80127f0:	d00d      	beq.n	801280e <lwip_netconn_do_delconn+0xce>
 80127f2:	2b20      	cmp	r3, #32
 80127f4:	d151      	bne.n	801289a <lwip_netconn_do_delconn+0x15a>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	685b      	ldr	r3, [r3, #4]
 80127fc:	2200      	movs	r2, #0
 80127fe:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	685b      	ldr	r3, [r3, #4]
 8012806:	4618      	mov	r0, r3
 8012808:	f00a fada 	bl	801cdc0 <udp_remove>
          break;
 801280c:	e046      	b.n	801289c <lwip_netconn_do_delconn+0x15c>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012814:	2b00      	cmp	r3, #0
 8012816:	d006      	beq.n	8012826 <lwip_netconn_do_delconn+0xe6>
 8012818:	4b35      	ldr	r3, [pc, #212]	@ (80128f0 <lwip_netconn_do_delconn+0x1b0>)
 801281a:	f240 4294 	movw	r2, #1172	@ 0x494
 801281e:	4938      	ldr	r1, [pc, #224]	@ (8012900 <lwip_netconn_do_delconn+0x1c0>)
 8012820:	4835      	ldr	r0, [pc, #212]	@ (80128f8 <lwip_netconn_do_delconn+0x1b8>)
 8012822:	f00e fc4f 	bl	80210c4 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	2204      	movs	r2, #4
 801282c:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	2203      	movs	r2, #3
 8012832:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	68fa      	ldr	r2, [r7, #12]
 801283a:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	2100      	movs	r1, #0
 8012842:	4618      	mov	r0, r3
 8012844:	f7ff fe12 	bl	801246c <lwip_netconn_do_close_internal>
 8012848:	4603      	mov	r3, r0
 801284a:	2b00      	cmp	r3, #0
 801284c:	d04b      	beq.n	80128e6 <lwip_netconn_do_delconn+0x1a6>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	785b      	ldrb	r3, [r3, #1]
 8012854:	2b04      	cmp	r3, #4
 8012856:	d006      	beq.n	8012866 <lwip_netconn_do_delconn+0x126>
 8012858:	4b25      	ldr	r3, [pc, #148]	@ (80128f0 <lwip_netconn_do_delconn+0x1b0>)
 801285a:	f240 429a 	movw	r2, #1178	@ 0x49a
 801285e:	4929      	ldr	r1, [pc, #164]	@ (8012904 <lwip_netconn_do_delconn+0x1c4>)
 8012860:	4825      	ldr	r0, [pc, #148]	@ (80128f8 <lwip_netconn_do_delconn+0x1b8>)
 8012862:	f00e fc2f 	bl	80210c4 <iprintf>
            UNLOCK_TCPIP_CORE();
 8012866:	4828      	ldr	r0, [pc, #160]	@ (8012908 <lwip_netconn_do_delconn+0x1c8>)
 8012868:	f00d fa57 	bl	801fd1a <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	330c      	adds	r3, #12
 8012872:	2100      	movs	r1, #0
 8012874:	4618      	mov	r0, r3
 8012876:	f00d f98b 	bl	801fb90 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 801287a:	4823      	ldr	r0, [pc, #140]	@ (8012908 <lwip_netconn_do_delconn+0x1c8>)
 801287c:	f00d fa3e 	bl	801fcfc <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	785b      	ldrb	r3, [r3, #1]
 8012886:	2b00      	cmp	r3, #0
 8012888:	d02d      	beq.n	80128e6 <lwip_netconn_do_delconn+0x1a6>
 801288a:	4b19      	ldr	r3, [pc, #100]	@ (80128f0 <lwip_netconn_do_delconn+0x1b0>)
 801288c:	f240 429e 	movw	r2, #1182	@ 0x49e
 8012890:	491c      	ldr	r1, [pc, #112]	@ (8012904 <lwip_netconn_do_delconn+0x1c4>)
 8012892:	4819      	ldr	r0, [pc, #100]	@ (80128f8 <lwip_netconn_do_delconn+0x1b8>)
 8012894:	f00e fc16 	bl	80210c4 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8012898:	e025      	b.n	80128e6 <lwip_netconn_do_delconn+0x1a6>
#endif /* LWIP_TCP */
        default:
          break;
 801289a:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	2200      	movs	r2, #0
 80128a2:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d007      	beq.n	80128be <lwip_netconn_do_delconn+0x17e>
 80128ae:	68fb      	ldr	r3, [r7, #12]
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80128b4:	68fa      	ldr	r2, [r7, #12]
 80128b6:	6810      	ldr	r0, [r2, #0]
 80128b8:	2200      	movs	r2, #0
 80128ba:	2100      	movs	r1, #0
 80128bc:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d007      	beq.n	80128d8 <lwip_netconn_do_delconn+0x198>
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80128ce:	68fa      	ldr	r2, [r7, #12]
 80128d0:	6810      	ldr	r0, [r2, #0]
 80128d2:	2200      	movs	r2, #0
 80128d4:	2102      	movs	r1, #2
 80128d6:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	330c      	adds	r3, #12
 80128de:	4618      	mov	r0, r3
 80128e0:	f00d f9ac 	bl	801fc3c <sys_sem_valid>
 80128e4:	e000      	b.n	80128e8 <lwip_netconn_do_delconn+0x1a8>
          return;
 80128e6:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 80128e8:	3710      	adds	r7, #16
 80128ea:	46bd      	mov	sp, r7
 80128ec:	bd80      	pop	{r7, pc}
 80128ee:	bf00      	nop
 80128f0:	0802293c 	.word	0x0802293c
 80128f4:	08022cac 	.word	0x08022cac
 80128f8:	08022980 	.word	0x08022980
 80128fc:	08022cc0 	.word	0x08022cc0
 8012900:	08022ce0 	.word	0x08022ce0
 8012904:	08022cfc 	.word	0x08022cfc
 8012908:	2001f874 	.word	0x2001f874

0801290c <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 801290c:	b580      	push	{r7, lr}
 801290e:	b084      	sub	sp, #16
 8012910:	af00      	add	r7, sp, #0
 8012912:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8012918:	68bb      	ldr	r3, [r7, #8]
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	685b      	ldr	r3, [r3, #4]
 801291e:	2b00      	cmp	r3, #0
 8012920:	d025      	beq.n	801296e <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8012922:	68bb      	ldr	r3, [r7, #8]
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	781b      	ldrb	r3, [r3, #0]
 8012928:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801292c:	2b10      	cmp	r3, #16
 801292e:	d00e      	beq.n	801294e <lwip_netconn_do_bind+0x42>
 8012930:	2b20      	cmp	r3, #32
 8012932:	d119      	bne.n	8012968 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8012934:	68bb      	ldr	r3, [r7, #8]
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	6858      	ldr	r0, [r3, #4]
 801293a:	68bb      	ldr	r3, [r7, #8]
 801293c:	6899      	ldr	r1, [r3, #8]
 801293e:	68bb      	ldr	r3, [r7, #8]
 8012940:	899b      	ldrh	r3, [r3, #12]
 8012942:	461a      	mov	r2, r3
 8012944:	f00a f92e 	bl	801cba4 <udp_bind>
 8012948:	4603      	mov	r3, r0
 801294a:	73fb      	strb	r3, [r7, #15]
        break;
 801294c:	e011      	b.n	8012972 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 801294e:	68bb      	ldr	r3, [r7, #8]
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	6858      	ldr	r0, [r3, #4]
 8012954:	68bb      	ldr	r3, [r7, #8]
 8012956:	6899      	ldr	r1, [r3, #8]
 8012958:	68bb      	ldr	r3, [r7, #8]
 801295a:	899b      	ldrh	r3, [r3, #12]
 801295c:	461a      	mov	r2, r3
 801295e:	f003 fcc7 	bl	80162f0 <tcp_bind>
 8012962:	4603      	mov	r3, r0
 8012964:	73fb      	strb	r3, [r7, #15]
        break;
 8012966:	e004      	b.n	8012972 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8012968:	23fa      	movs	r3, #250	@ 0xfa
 801296a:	73fb      	strb	r3, [r7, #15]
        break;
 801296c:	e001      	b.n	8012972 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 801296e:	23fa      	movs	r3, #250	@ 0xfa
 8012970:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8012972:	68bb      	ldr	r3, [r7, #8]
 8012974:	7bfa      	ldrb	r2, [r7, #15]
 8012976:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8012978:	bf00      	nop
 801297a:	3710      	adds	r7, #16
 801297c:	46bd      	mov	sp, r7
 801297e:	bd80      	pop	{r7, pc}

08012980 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8012980:	b580      	push	{r7, lr}
 8012982:	b084      	sub	sp, #16
 8012984:	af00      	add	r7, sp, #0
 8012986:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 801298c:	68bb      	ldr	r3, [r7, #8]
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	4618      	mov	r0, r3
 8012992:	f7ff f85b 	bl	8011a4c <netconn_err>
 8012996:	4603      	mov	r3, r0
 8012998:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 801299a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d134      	bne.n	8012a0c <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 80129a2:	68bb      	ldr	r3, [r7, #8]
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	685b      	ldr	r3, [r3, #4]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d02d      	beq.n	8012a08 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80129ac:	68bb      	ldr	r3, [r7, #8]
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	781b      	ldrb	r3, [r3, #0]
 80129b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80129b6:	2b20      	cmp	r3, #32
 80129b8:	d123      	bne.n	8012a02 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 80129ba:	68bb      	ldr	r3, [r7, #8]
 80129bc:	689b      	ldr	r3, [r3, #8]
 80129be:	689b      	ldr	r3, [r3, #8]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d10c      	bne.n	80129de <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 80129c4:	68bb      	ldr	r3, [r7, #8]
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	685a      	ldr	r2, [r3, #4]
 80129ca:	68bb      	ldr	r3, [r7, #8]
 80129cc:	689b      	ldr	r3, [r3, #8]
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	4619      	mov	r1, r3
 80129d2:	4610      	mov	r0, r2
 80129d4:	f009 fe76 	bl	801c6c4 <udp_send>
 80129d8:	4603      	mov	r3, r0
 80129da:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 80129dc:	e016      	b.n	8012a0c <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 80129de:	68bb      	ldr	r3, [r7, #8]
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	6858      	ldr	r0, [r3, #4]
 80129e4:	68bb      	ldr	r3, [r7, #8]
 80129e6:	689b      	ldr	r3, [r3, #8]
 80129e8:	6819      	ldr	r1, [r3, #0]
 80129ea:	68bb      	ldr	r3, [r7, #8]
 80129ec:	689b      	ldr	r3, [r3, #8]
 80129ee:	f103 0208 	add.w	r2, r3, #8
 80129f2:	68bb      	ldr	r3, [r7, #8]
 80129f4:	689b      	ldr	r3, [r3, #8]
 80129f6:	899b      	ldrh	r3, [r3, #12]
 80129f8:	f009 fe98 	bl	801c72c <udp_sendto>
 80129fc:	4603      	mov	r3, r0
 80129fe:	73fb      	strb	r3, [r7, #15]
          break;
 8012a00:	e004      	b.n	8012a0c <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 8012a02:	23f5      	movs	r3, #245	@ 0xf5
 8012a04:	73fb      	strb	r3, [r7, #15]
          break;
 8012a06:	e001      	b.n	8012a0c <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 8012a08:	23f5      	movs	r3, #245	@ 0xf5
 8012a0a:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 8012a0c:	68bb      	ldr	r3, [r7, #8]
 8012a0e:	7bfa      	ldrb	r2, [r7, #15]
 8012a10:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8012a12:	bf00      	nop
 8012a14:	3710      	adds	r7, #16
 8012a16:	46bd      	mov	sp, r7
 8012a18:	bd80      	pop	{r7, pc}

08012a1a <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8012a1a:	b580      	push	{r7, lr}
 8012a1c:	b086      	sub	sp, #24
 8012a1e:	af00      	add	r7, sp, #0
 8012a20:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8012a26:	693b      	ldr	r3, [r7, #16]
 8012a28:	2200      	movs	r2, #0
 8012a2a:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8012a2c:	693b      	ldr	r3, [r7, #16]
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	685b      	ldr	r3, [r3, #4]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d022      	beq.n	8012a7c <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8012a36:	693b      	ldr	r3, [r7, #16]
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	781b      	ldrb	r3, [r3, #0]
 8012a3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012a40:	2b10      	cmp	r3, #16
 8012a42:	d11b      	bne.n	8012a7c <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8012a44:	693b      	ldr	r3, [r7, #16]
 8012a46:	689b      	ldr	r3, [r3, #8]
 8012a48:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8012a4a:	697b      	ldr	r3, [r7, #20]
 8012a4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012a50:	d202      	bcs.n	8012a58 <lwip_netconn_do_recv+0x3e>
 8012a52:	697b      	ldr	r3, [r7, #20]
 8012a54:	b29b      	uxth	r3, r3
 8012a56:	e001      	b.n	8012a5c <lwip_netconn_do_recv+0x42>
 8012a58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012a5c:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8012a5e:	693b      	ldr	r3, [r7, #16]
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	685b      	ldr	r3, [r3, #4]
 8012a64:	89fa      	ldrh	r2, [r7, #14]
 8012a66:	4611      	mov	r1, r2
 8012a68:	4618      	mov	r0, r3
 8012a6a:	f003 fd33 	bl	80164d4 <tcp_recved>
        remaining -= recved;
 8012a6e:	89fb      	ldrh	r3, [r7, #14]
 8012a70:	697a      	ldr	r2, [r7, #20]
 8012a72:	1ad3      	subs	r3, r2, r3
 8012a74:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8012a76:	697b      	ldr	r3, [r7, #20]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d1e6      	bne.n	8012a4a <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8012a7c:	bf00      	nop
 8012a7e:	3718      	adds	r7, #24
 8012a80:	46bd      	mov	sp, r7
 8012a82:	bd80      	pop	{r7, pc}

08012a84 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8012a84:	b580      	push	{r7, lr}
 8012a86:	b088      	sub	sp, #32
 8012a88:	af00      	add	r7, sp, #0
 8012a8a:	6078      	str	r0, [r7, #4]
 8012a8c:	460b      	mov	r3, r1
 8012a8e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8012a90:	2300      	movs	r3, #0
 8012a92:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d106      	bne.n	8012aa8 <lwip_netconn_do_writemore+0x24>
 8012a9a:	4b61      	ldr	r3, [pc, #388]	@ (8012c20 <lwip_netconn_do_writemore+0x19c>)
 8012a9c:	f240 6273 	movw	r2, #1651	@ 0x673
 8012aa0:	4960      	ldr	r1, [pc, #384]	@ (8012c24 <lwip_netconn_do_writemore+0x1a0>)
 8012aa2:	4861      	ldr	r0, [pc, #388]	@ (8012c28 <lwip_netconn_do_writemore+0x1a4>)
 8012aa4:	f00e fb0e 	bl	80210c4 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	785b      	ldrb	r3, [r3, #1]
 8012aac:	2b01      	cmp	r3, #1
 8012aae:	d006      	beq.n	8012abe <lwip_netconn_do_writemore+0x3a>
 8012ab0:	4b5b      	ldr	r3, [pc, #364]	@ (8012c20 <lwip_netconn_do_writemore+0x19c>)
 8012ab2:	f240 6274 	movw	r2, #1652	@ 0x674
 8012ab6:	495d      	ldr	r1, [pc, #372]	@ (8012c2c <lwip_netconn_do_writemore+0x1a8>)
 8012ab8:	485b      	ldr	r0, [pc, #364]	@ (8012c28 <lwip_netconn_do_writemore+0x1a4>)
 8012aba:	f00e fb03 	bl	80210c4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d106      	bne.n	8012ad4 <lwip_netconn_do_writemore+0x50>
 8012ac6:	4b56      	ldr	r3, [pc, #344]	@ (8012c20 <lwip_netconn_do_writemore+0x19c>)
 8012ac8:	f240 6275 	movw	r2, #1653	@ 0x675
 8012acc:	4958      	ldr	r1, [pc, #352]	@ (8012c30 <lwip_netconn_do_writemore+0x1ac>)
 8012ace:	4856      	ldr	r0, [pc, #344]	@ (8012c28 <lwip_netconn_do_writemore+0x1a4>)
 8012ad0:	f00e faf8 	bl	80210c4 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	685b      	ldr	r3, [r3, #4]
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d106      	bne.n	8012aea <lwip_netconn_do_writemore+0x66>
 8012adc:	4b50      	ldr	r3, [pc, #320]	@ (8012c20 <lwip_netconn_do_writemore+0x19c>)
 8012ade:	f240 6276 	movw	r2, #1654	@ 0x676
 8012ae2:	4954      	ldr	r1, [pc, #336]	@ (8012c34 <lwip_netconn_do_writemore+0x1b0>)
 8012ae4:	4850      	ldr	r0, [pc, #320]	@ (8012c28 <lwip_netconn_do_writemore+0x1a4>)
 8012ae6:	f00e faed 	bl	80210c4 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012aee:	699a      	ldr	r2, [r3, #24]
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012af4:	695b      	ldr	r3, [r3, #20]
 8012af6:	429a      	cmp	r2, r3
 8012af8:	d306      	bcc.n	8012b08 <lwip_netconn_do_writemore+0x84>
 8012afa:	4b49      	ldr	r3, [pc, #292]	@ (8012c20 <lwip_netconn_do_writemore+0x19c>)
 8012afc:	f240 6277 	movw	r2, #1655	@ 0x677
 8012b00:	494d      	ldr	r1, [pc, #308]	@ (8012c38 <lwip_netconn_do_writemore+0x1b4>)
 8012b02:	4849      	ldr	r0, [pc, #292]	@ (8012c28 <lwip_netconn_do_writemore+0x1a4>)
 8012b04:	f00e fade 	bl	80210c4 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b0c:	899b      	ldrh	r3, [r3, #12]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d106      	bne.n	8012b20 <lwip_netconn_do_writemore+0x9c>
 8012b12:	4b43      	ldr	r3, [pc, #268]	@ (8012c20 <lwip_netconn_do_writemore+0x19c>)
 8012b14:	f240 6279 	movw	r2, #1657	@ 0x679
 8012b18:	4948      	ldr	r1, [pc, #288]	@ (8012c3c <lwip_netconn_do_writemore+0x1b8>)
 8012b1a:	4843      	ldr	r0, [pc, #268]	@ (8012c28 <lwip_netconn_do_writemore+0x1a4>)
 8012b1c:	f00e fad2 	bl	80210c4 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b24:	7f1b      	ldrb	r3, [r3, #28]
 8012b26:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012b2e:	f003 0302 	and.w	r3, r3, #2
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d104      	bne.n	8012b40 <lwip_netconn_do_writemore+0xbc>
 8012b36:	7ebb      	ldrb	r3, [r7, #26]
 8012b38:	f003 0304 	and.w	r3, r3, #4
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d001      	beq.n	8012b44 <lwip_netconn_do_writemore+0xc0>
 8012b40:	2301      	movs	r3, #1
 8012b42:	e000      	b.n	8012b46 <lwip_netconn_do_writemore+0xc2>
 8012b44:	2300      	movs	r3, #0
 8012b46:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b4c:	689b      	ldr	r3, [r3, #8]
 8012b4e:	681a      	ldr	r2, [r3, #0]
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b54:	691b      	ldr	r3, [r3, #16]
 8012b56:	4413      	add	r3, r2
 8012b58:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b5e:	689b      	ldr	r3, [r3, #8]
 8012b60:	685a      	ldr	r2, [r3, #4]
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b66:	691b      	ldr	r3, [r3, #16]
 8012b68:	1ad3      	subs	r3, r2, r3
 8012b6a:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8012b6c:	693b      	ldr	r3, [r7, #16]
 8012b6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012b72:	d307      	bcc.n	8012b84 <lwip_netconn_do_writemore+0x100>
        len = 0xffff;
 8012b74:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012b78:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8012b7a:	7ebb      	ldrb	r3, [r7, #26]
 8012b7c:	f043 0302 	orr.w	r3, r3, #2
 8012b80:	76bb      	strb	r3, [r7, #26]
 8012b82:	e001      	b.n	8012b88 <lwip_netconn_do_writemore+0x104>
      } else {
        len = (u16_t)diff;
 8012b84:	693b      	ldr	r3, [r7, #16]
 8012b86:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	685b      	ldr	r3, [r3, #4]
 8012b8c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012b90:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8012b92:	89fa      	ldrh	r2, [r7, #14]
 8012b94:	8bbb      	ldrh	r3, [r7, #28]
 8012b96:	429a      	cmp	r2, r3
 8012b98:	d216      	bcs.n	8012bc8 <lwip_netconn_do_writemore+0x144>
        /* don't try to write more than sendbuf */
        len = available;
 8012b9a:	89fb      	ldrh	r3, [r7, #14]
 8012b9c:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8012b9e:	7e3b      	ldrb	r3, [r7, #24]
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d00d      	beq.n	8012bc0 <lwip_netconn_do_writemore+0x13c>
          if (!len) {
 8012ba4:	8bbb      	ldrh	r3, [r7, #28]
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d10e      	bne.n	8012bc8 <lwip_netconn_do_writemore+0x144>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012bae:	699b      	ldr	r3, [r3, #24]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d102      	bne.n	8012bba <lwip_netconn_do_writemore+0x136>
 8012bb4:	f06f 0306 	mvn.w	r3, #6
 8012bb8:	e000      	b.n	8012bbc <lwip_netconn_do_writemore+0x138>
 8012bba:	2300      	movs	r3, #0
 8012bbc:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8012bbe:	e08f      	b.n	8012ce0 <lwip_netconn_do_writemore+0x25c>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8012bc0:	7ebb      	ldrb	r3, [r7, #26]
 8012bc2:	f043 0302 	orr.w	r3, r3, #2
 8012bc6:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012bcc:	691a      	ldr	r2, [r3, #16]
 8012bce:	8bbb      	ldrh	r3, [r7, #28]
 8012bd0:	441a      	add	r2, r3
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012bd6:	689b      	ldr	r3, [r3, #8]
 8012bd8:	685b      	ldr	r3, [r3, #4]
 8012bda:	429a      	cmp	r2, r3
 8012bdc:	d906      	bls.n	8012bec <lwip_netconn_do_writemore+0x168>
 8012bde:	4b10      	ldr	r3, [pc, #64]	@ (8012c20 <lwip_netconn_do_writemore+0x19c>)
 8012be0:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8012be4:	4916      	ldr	r1, [pc, #88]	@ (8012c40 <lwip_netconn_do_writemore+0x1bc>)
 8012be6:	4810      	ldr	r0, [pc, #64]	@ (8012c28 <lwip_netconn_do_writemore+0x1a4>)
 8012be8:	f00e fa6c 	bl	80210c4 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8012bec:	8bbb      	ldrh	r3, [r7, #28]
 8012bee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012bf2:	4293      	cmp	r3, r2
 8012bf4:	d103      	bne.n	8012bfe <lwip_netconn_do_writemore+0x17a>
 8012bf6:	693b      	ldr	r3, [r7, #16]
 8012bf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012bfc:	d209      	bcs.n	8012c12 <lwip_netconn_do_writemore+0x18e>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8012bfe:	693b      	ldr	r3, [r7, #16]
 8012c00:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8012c02:	8bba      	ldrh	r2, [r7, #28]
 8012c04:	429a      	cmp	r2, r3
 8012c06:	d11d      	bne.n	8012c44 <lwip_netconn_do_writemore+0x1c0>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c0c:	899b      	ldrh	r3, [r3, #12]
 8012c0e:	2b01      	cmp	r3, #1
 8012c10:	d918      	bls.n	8012c44 <lwip_netconn_do_writemore+0x1c0>
        write_more = 1;
 8012c12:	2301      	movs	r3, #1
 8012c14:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8012c16:	7ebb      	ldrb	r3, [r7, #26]
 8012c18:	f043 0302 	orr.w	r3, r3, #2
 8012c1c:	76bb      	strb	r3, [r7, #26]
 8012c1e:	e013      	b.n	8012c48 <lwip_netconn_do_writemore+0x1c4>
 8012c20:	0802293c 	.word	0x0802293c
 8012c24:	08022a94 	.word	0x08022a94
 8012c28:	08022980 	.word	0x08022980
 8012c2c:	08022d9c 	.word	0x08022d9c
 8012c30:	08022aa4 	.word	0x08022aa4
 8012c34:	08022dbc 	.word	0x08022dbc
 8012c38:	08022dd4 	.word	0x08022dd4
 8012c3c:	08022e14 	.word	0x08022e14
 8012c40:	08022e3c 	.word	0x08022e3c
      } else {
        write_more = 0;
 8012c44:	2300      	movs	r3, #0
 8012c46:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	6858      	ldr	r0, [r3, #4]
 8012c4c:	7ebb      	ldrb	r3, [r7, #26]
 8012c4e:	8bba      	ldrh	r2, [r7, #28]
 8012c50:	6979      	ldr	r1, [r7, #20]
 8012c52:	f007 fb07 	bl	801a264 <tcp_write>
 8012c56:	4603      	mov	r3, r0
 8012c58:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8012c5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d12c      	bne.n	8012cbc <lwip_netconn_do_writemore+0x238>
        conn->current_msg->msg.w.offset += len;
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c66:	6999      	ldr	r1, [r3, #24]
 8012c68:	8bba      	ldrh	r2, [r7, #28]
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c6e:	440a      	add	r2, r1
 8012c70:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c76:	6919      	ldr	r1, [r3, #16]
 8012c78:	8bba      	ldrh	r2, [r7, #28]
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c7e:	440a      	add	r2, r1
 8012c80:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c86:	691a      	ldr	r2, [r3, #16]
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c8c:	689b      	ldr	r3, [r3, #8]
 8012c8e:	685b      	ldr	r3, [r3, #4]
 8012c90:	429a      	cmp	r2, r3
 8012c92:	d113      	bne.n	8012cbc <lwip_netconn_do_writemore+0x238>
          conn->current_msg->msg.w.vector_cnt--;
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c98:	899a      	ldrh	r2, [r3, #12]
 8012c9a:	3a01      	subs	r2, #1
 8012c9c:	b292      	uxth	r2, r2
 8012c9e:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ca4:	899b      	ldrh	r3, [r3, #12]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d008      	beq.n	8012cbc <lwip_netconn_do_writemore+0x238>
            conn->current_msg->msg.w.vector++;
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012cae:	689a      	ldr	r2, [r3, #8]
 8012cb0:	3208      	adds	r2, #8
 8012cb2:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012cb8:	2200      	movs	r2, #0
 8012cba:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8012cbc:	7e7b      	ldrb	r3, [r7, #25]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d004      	beq.n	8012ccc <lwip_netconn_do_writemore+0x248>
 8012cc2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	f43f af3e 	beq.w	8012b48 <lwip_netconn_do_writemore+0xc4>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8012ccc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d004      	beq.n	8012cde <lwip_netconn_do_writemore+0x25a>
 8012cd4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012cd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012cdc:	d136      	bne.n	8012d4c <lwip_netconn_do_writemore+0x2c8>
err_mem:
 8012cde:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8012ce0:	7e3b      	ldrb	r3, [r7, #24]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d01b      	beq.n	8012d1e <lwip_netconn_do_writemore+0x29a>
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012cea:	699a      	ldr	r2, [r3, #24]
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012cf0:	695b      	ldr	r3, [r3, #20]
 8012cf2:	429a      	cmp	r2, r3
 8012cf4:	d213      	bcs.n	8012d1e <lwip_netconn_do_writemore+0x29a>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d005      	beq.n	8012d0a <lwip_netconn_do_writemore+0x286>
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012d02:	2200      	movs	r2, #0
 8012d04:	2103      	movs	r1, #3
 8012d06:	6878      	ldr	r0, [r7, #4]
 8012d08:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012d10:	f043 0310 	orr.w	r3, r3, #16
 8012d14:	b2da      	uxtb	r2, r3
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	f883 2020 	strb.w	r2, [r3, #32]
 8012d1c:	e016      	b.n	8012d4c <lwip_netconn_do_writemore+0x2c8>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	685b      	ldr	r3, [r3, #4]
 8012d22:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012d26:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8012d2a:	d305      	bcc.n	8012d38 <lwip_netconn_do_writemore+0x2b4>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	685b      	ldr	r3, [r3, #4]
 8012d30:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8012d34:	2b04      	cmp	r3, #4
 8012d36:	d909      	bls.n	8012d4c <lwip_netconn_do_writemore+0x2c8>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d005      	beq.n	8012d4c <lwip_netconn_do_writemore+0x2c8>
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012d44:	2200      	movs	r2, #0
 8012d46:	2103      	movs	r1, #3
 8012d48:	6878      	ldr	r0, [r7, #4]
 8012d4a:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8012d4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d11d      	bne.n	8012d90 <lwip_netconn_do_writemore+0x30c>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d58:	699a      	ldr	r2, [r3, #24]
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d5e:	695b      	ldr	r3, [r3, #20]
 8012d60:	429a      	cmp	r2, r3
 8012d62:	d002      	beq.n	8012d6a <lwip_netconn_do_writemore+0x2e6>
 8012d64:	7e3b      	ldrb	r3, [r7, #24]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d001      	beq.n	8012d6e <lwip_netconn_do_writemore+0x2ea>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8012d6a:	2301      	movs	r3, #1
 8012d6c:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	685b      	ldr	r3, [r3, #4]
 8012d72:	4618      	mov	r0, r3
 8012d74:	f008 f8e4 	bl	801af40 <tcp_output>
 8012d78:	4603      	mov	r3, r0
 8012d7a:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8012d7c:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8012d80:	f113 0f04 	cmn.w	r3, #4
 8012d84:	d12c      	bne.n	8012de0 <lwip_netconn_do_writemore+0x35c>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8012d86:	7b3b      	ldrb	r3, [r7, #12]
 8012d88:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8012d8a:	2301      	movs	r3, #1
 8012d8c:	76fb      	strb	r3, [r7, #27]
 8012d8e:	e027      	b.n	8012de0 <lwip_netconn_do_writemore+0x35c>
      }
    } else if (err == ERR_MEM) {
 8012d90:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012d94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012d98:	d120      	bne.n	8012ddc <lwip_netconn_do_writemore+0x358>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	685b      	ldr	r3, [r3, #4]
 8012d9e:	4618      	mov	r0, r3
 8012da0:	f008 f8ce 	bl	801af40 <tcp_output>
 8012da4:	4603      	mov	r3, r0
 8012da6:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8012da8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8012dac:	f113 0f04 	cmn.w	r3, #4
 8012db0:	d104      	bne.n	8012dbc <lwip_netconn_do_writemore+0x338>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8012db2:	7b7b      	ldrb	r3, [r7, #13]
 8012db4:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8012db6:	2301      	movs	r3, #1
 8012db8:	76fb      	strb	r3, [r7, #27]
 8012dba:	e011      	b.n	8012de0 <lwip_netconn_do_writemore+0x35c>
      } else if (dontblock) {
 8012dbc:	7e3b      	ldrb	r3, [r7, #24]
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d00e      	beq.n	8012de0 <lwip_netconn_do_writemore+0x35c>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012dc6:	699b      	ldr	r3, [r3, #24]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d102      	bne.n	8012dd2 <lwip_netconn_do_writemore+0x34e>
 8012dcc:	f06f 0306 	mvn.w	r3, #6
 8012dd0:	e000      	b.n	8012dd4 <lwip_netconn_do_writemore+0x350>
 8012dd2:	2300      	movs	r3, #0
 8012dd4:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8012dd6:	2301      	movs	r3, #1
 8012dd8:	76fb      	strb	r3, [r7, #27]
 8012dda:	e001      	b.n	8012de0 <lwip_netconn_do_writemore+0x35c>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8012ddc:	2301      	movs	r3, #1
 8012dde:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8012de0:	7efb      	ldrb	r3, [r7, #27]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d015      	beq.n	8012e12 <lwip_netconn_do_writemore+0x38e>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	330c      	adds	r3, #12
 8012dee:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012df4:	7ffa      	ldrb	r2, [r7, #31]
 8012df6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	2200      	movs	r2, #0
 8012dfc:	625a      	str	r2, [r3, #36]	@ 0x24
    conn->state = NETCONN_NONE;
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	2200      	movs	r2, #0
 8012e02:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8012e04:	78fb      	ldrb	r3, [r7, #3]
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d006      	beq.n	8012e18 <lwip_netconn_do_writemore+0x394>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8012e0a:	68b8      	ldr	r0, [r7, #8]
 8012e0c:	f00c fef1 	bl	801fbf2 <sys_sem_signal>
 8012e10:	e002      	b.n	8012e18 <lwip_netconn_do_writemore+0x394>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8012e12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012e16:	e000      	b.n	8012e1a <lwip_netconn_do_writemore+0x396>
  }
#endif
  return ERR_OK;
 8012e18:	2300      	movs	r3, #0
}
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	3720      	adds	r7, #32
 8012e1e:	46bd      	mov	sp, r7
 8012e20:	bd80      	pop	{r7, pc}
 8012e22:	bf00      	nop

08012e24 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8012e24:	b580      	push	{r7, lr}
 8012e26:	b084      	sub	sp, #16
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	785b      	ldrb	r3, [r3, #1]
 8012e36:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	685b      	ldr	r3, [r3, #4]
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d069      	beq.n	8012f16 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	781b      	ldrb	r3, [r3, #0]
 8012e48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8012e4c:	2b10      	cmp	r3, #16
 8012e4e:	d162      	bne.n	8012f16 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8012e54:	2b03      	cmp	r3, #3
 8012e56:	d002      	beq.n	8012e5e <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8012e58:	7afb      	ldrb	r3, [r7, #11]
 8012e5a:	2b02      	cmp	r3, #2
 8012e5c:	d05b      	beq.n	8012f16 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8012e5e:	7afb      	ldrb	r3, [r7, #11]
 8012e60:	2b03      	cmp	r3, #3
 8012e62:	d103      	bne.n	8012e6c <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	22f5      	movs	r2, #245	@ 0xf5
 8012e68:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8012e6a:	e059      	b.n	8012f20 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8012e6c:	7afb      	ldrb	r3, [r7, #11]
 8012e6e:	2b01      	cmp	r3, #1
 8012e70:	d103      	bne.n	8012e7a <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	22fb      	movs	r2, #251	@ 0xfb
 8012e76:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8012e78:	e052      	b.n	8012f20 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	7a1b      	ldrb	r3, [r3, #8]
 8012e7e:	f003 0301 	and.w	r3, r3, #1
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d004      	beq.n	8012e90 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	f7ff fa70 	bl	8012370 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d006      	beq.n	8012ea8 <lwip_netconn_do_close+0x84>
 8012e9a:	4b23      	ldr	r3, [pc, #140]	@ (8012f28 <lwip_netconn_do_close+0x104>)
 8012e9c:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 8012ea0:	4922      	ldr	r1, [pc, #136]	@ (8012f2c <lwip_netconn_do_close+0x108>)
 8012ea2:	4823      	ldr	r0, [pc, #140]	@ (8012f30 <lwip_netconn_do_close+0x10c>)
 8012ea4:	f00e f90e 	bl	80210c4 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	2204      	movs	r2, #4
 8012eae:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	68fa      	ldr	r2, [r7, #12]
 8012eb6:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	2100      	movs	r1, #0
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	f7ff fad4 	bl	801246c <lwip_netconn_do_close_internal>
 8012ec4:	4603      	mov	r3, r0
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d029      	beq.n	8012f1e <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	785b      	ldrb	r3, [r3, #1]
 8012ed0:	2b04      	cmp	r3, #4
 8012ed2:	d006      	beq.n	8012ee2 <lwip_netconn_do_close+0xbe>
 8012ed4:	4b14      	ldr	r3, [pc, #80]	@ (8012f28 <lwip_netconn_do_close+0x104>)
 8012ed6:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 8012eda:	4916      	ldr	r1, [pc, #88]	@ (8012f34 <lwip_netconn_do_close+0x110>)
 8012edc:	4814      	ldr	r0, [pc, #80]	@ (8012f30 <lwip_netconn_do_close+0x10c>)
 8012ede:	f00e f8f1 	bl	80210c4 <iprintf>
        UNLOCK_TCPIP_CORE();
 8012ee2:	4815      	ldr	r0, [pc, #84]	@ (8012f38 <lwip_netconn_do_close+0x114>)
 8012ee4:	f00c ff19 	bl	801fd1a <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	330c      	adds	r3, #12
 8012eee:	2100      	movs	r1, #0
 8012ef0:	4618      	mov	r0, r3
 8012ef2:	f00c fe4d 	bl	801fb90 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8012ef6:	4810      	ldr	r0, [pc, #64]	@ (8012f38 <lwip_netconn_do_close+0x114>)
 8012ef8:	f00c ff00 	bl	801fcfc <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	785b      	ldrb	r3, [r3, #1]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d00b      	beq.n	8012f1e <lwip_netconn_do_close+0xfa>
 8012f06:	4b08      	ldr	r3, [pc, #32]	@ (8012f28 <lwip_netconn_do_close+0x104>)
 8012f08:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 8012f0c:	4909      	ldr	r1, [pc, #36]	@ (8012f34 <lwip_netconn_do_close+0x110>)
 8012f0e:	4808      	ldr	r0, [pc, #32]	@ (8012f30 <lwip_netconn_do_close+0x10c>)
 8012f10:	f00e f8d8 	bl	80210c4 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8012f14:	e003      	b.n	8012f1e <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	22f5      	movs	r2, #245	@ 0xf5
 8012f1a:	711a      	strb	r2, [r3, #4]
 8012f1c:	e000      	b.n	8012f20 <lwip_netconn_do_close+0xfc>
      return;
 8012f1e:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8012f20:	3710      	adds	r7, #16
 8012f22:	46bd      	mov	sp, r7
 8012f24:	bd80      	pop	{r7, pc}
 8012f26:	bf00      	nop
 8012f28:	0802293c 	.word	0x0802293c
 8012f2c:	08022ce0 	.word	0x08022ce0
 8012f30:	08022980 	.word	0x08022980
 8012f34:	08022cfc 	.word	0x08022cfc
 8012f38:	2001f874 	.word	0x2001f874

08012f3c <lwip_strerr>:
 * @param err an lwip internal err_t
 * @return a string representation for err
 */
const char *
lwip_strerr(err_t err)
{
 8012f3c:	b480      	push	{r7}
 8012f3e:	b083      	sub	sp, #12
 8012f40:	af00      	add	r7, sp, #0
 8012f42:	4603      	mov	r3, r0
 8012f44:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_strerr))) {
 8012f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	dc04      	bgt.n	8012f58 <lwip_strerr+0x1c>
 8012f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012f52:	f113 0f10 	cmn.w	r3, #16
 8012f56:	da01      	bge.n	8012f5c <lwip_strerr+0x20>
    return "Unknown error.";
 8012f58:	4b06      	ldr	r3, [pc, #24]	@ (8012f74 <lwip_strerr+0x38>)
 8012f5a:	e005      	b.n	8012f68 <lwip_strerr+0x2c>
  }
  return err_strerr[-err];
 8012f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012f60:	425b      	negs	r3, r3
 8012f62:	4a05      	ldr	r2, [pc, #20]	@ (8012f78 <lwip_strerr+0x3c>)
 8012f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8012f68:	4618      	mov	r0, r3
 8012f6a:	370c      	adds	r7, #12
 8012f6c:	46bd      	mov	sp, r7
 8012f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f72:	4770      	bx	lr
 8012f74:	08022fd0 	.word	0x08022fd0
 8012f78:	20000024 	.word	0x20000024

08012f7c <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
 8012f7c:	b580      	push	{r7, lr}
 8012f7e:	b082      	sub	sp, #8
 8012f80:	af00      	add	r7, sp, #0
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8012f82:	2243      	movs	r2, #67	@ 0x43
 8012f84:	4908      	ldr	r1, [pc, #32]	@ (8012fa8 <netbuf_new+0x2c>)
 8012f86:	2006      	movs	r0, #6
 8012f88:	f001 f97c 	bl	8014284 <memp_malloc_fn>
 8012f8c:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d004      	beq.n	8012f9e <netbuf_new+0x22>
    memset(buf, 0, sizeof(struct netbuf));
 8012f94:	2210      	movs	r2, #16
 8012f96:	2100      	movs	r1, #0
 8012f98:	6878      	ldr	r0, [r7, #4]
 8012f9a:	f00e fa43 	bl	8021424 <memset>
  }
  return buf;
 8012f9e:	687b      	ldr	r3, [r7, #4]
}
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	3708      	adds	r7, #8
 8012fa4:	46bd      	mov	sp, r7
 8012fa6:	bd80      	pop	{r7, pc}
 8012fa8:	08022fe0 	.word	0x08022fe0

08012fac <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8012fac:	b580      	push	{r7, lr}
 8012fae:	b082      	sub	sp, #8
 8012fb0:	af00      	add	r7, sp, #0
 8012fb2:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d013      	beq.n	8012fe2 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d00b      	beq.n	8012fda <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	4618      	mov	r0, r3
 8012fc8:	f002 f9dc 	bl	8015384 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	2200      	movs	r2, #0
 8012fd0:	605a      	str	r2, [r3, #4]
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	685a      	ldr	r2, [r3, #4]
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8012fda:	6879      	ldr	r1, [r7, #4]
 8012fdc:	2006      	movs	r0, #6
 8012fde:	f001 f9e3 	bl	80143a8 <memp_free>
  }
}
 8012fe2:	bf00      	nop
 8012fe4:	3708      	adds	r7, #8
 8012fe6:	46bd      	mov	sp, r7
 8012fe8:	bd80      	pop	{r7, pc}
	...

08012fec <netbuf_alloc>:
 * @return pointer to the allocated memory
 *         NULL if no memory could be allocated
 */
void *
netbuf_alloc(struct netbuf *buf, u16_t size)
{
 8012fec:	b580      	push	{r7, lr}
 8012fee:	b082      	sub	sp, #8
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	6078      	str	r0, [r7, #4]
 8012ff4:	460b      	mov	r3, r1
 8012ff6:	807b      	strh	r3, [r7, #2]
  LWIP_ERROR("netbuf_alloc: invalid buf", (buf != NULL), return NULL;);
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d107      	bne.n	801300e <netbuf_alloc+0x22>
 8012ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8013070 <netbuf_alloc+0x84>)
 8013000:	2268      	movs	r2, #104	@ 0x68
 8013002:	491c      	ldr	r1, [pc, #112]	@ (8013074 <netbuf_alloc+0x88>)
 8013004:	481c      	ldr	r0, [pc, #112]	@ (8013078 <netbuf_alloc+0x8c>)
 8013006:	f00e f85d 	bl	80210c4 <iprintf>
 801300a:	2300      	movs	r3, #0
 801300c:	e02b      	b.n	8013066 <netbuf_alloc+0x7a>

  /* Deallocate any previously allocated memory. */
  if (buf->p != NULL) {
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	2b00      	cmp	r3, #0
 8013014:	d004      	beq.n	8013020 <netbuf_alloc+0x34>
    pbuf_free(buf->p);
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	4618      	mov	r0, r3
 801301c:	f002 f9b2 	bl	8015384 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, size, PBUF_RAM);
 8013020:	887b      	ldrh	r3, [r7, #2]
 8013022:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013026:	4619      	mov	r1, r3
 8013028:	2036      	movs	r0, #54	@ 0x36
 801302a:	f001 fe79 	bl	8014d20 <pbuf_alloc>
 801302e:	4602      	mov	r2, r0
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	2b00      	cmp	r3, #0
 801303a:	d101      	bne.n	8013040 <netbuf_alloc+0x54>
    return NULL;
 801303c:	2300      	movs	r3, #0
 801303e:	e012      	b.n	8013066 <netbuf_alloc+0x7a>
  }
  LWIP_ASSERT("check that first pbuf can hold size",
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	895b      	ldrh	r3, [r3, #10]
 8013046:	887a      	ldrh	r2, [r7, #2]
 8013048:	429a      	cmp	r2, r3
 801304a:	d905      	bls.n	8013058 <netbuf_alloc+0x6c>
 801304c:	4b08      	ldr	r3, [pc, #32]	@ (8013070 <netbuf_alloc+0x84>)
 801304e:	2272      	movs	r2, #114	@ 0x72
 8013050:	490a      	ldr	r1, [pc, #40]	@ (801307c <netbuf_alloc+0x90>)
 8013052:	4809      	ldr	r0, [pc, #36]	@ (8013078 <netbuf_alloc+0x8c>)
 8013054:	f00e f836 	bl	80210c4 <iprintf>
              (buf->p->len >= size));
  buf->ptr = buf->p;
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	681a      	ldr	r2, [r3, #0]
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	605a      	str	r2, [r3, #4]
  return buf->p->payload;
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	685b      	ldr	r3, [r3, #4]
}
 8013066:	4618      	mov	r0, r3
 8013068:	3708      	adds	r7, #8
 801306a:	46bd      	mov	sp, r7
 801306c:	bd80      	pop	{r7, pc}
 801306e:	bf00      	nop
 8013070:	08022fe0 	.word	0x08022fe0
 8013074:	08023014 	.word	0x08023014
 8013078:	08023030 	.word	0x08023030
 801307c:	08023058 	.word	0x08023058

08013080 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8013080:	b580      	push	{r7, lr}
 8013082:	b084      	sub	sp, #16
 8013084:	af00      	add	r7, sp, #0
 8013086:	60f8      	str	r0, [r7, #12]
 8013088:	60b9      	str	r1, [r7, #8]
 801308a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	2b00      	cmp	r3, #0
 8013090:	d108      	bne.n	80130a4 <netbuf_data+0x24>
 8013092:	4b1b      	ldr	r3, [pc, #108]	@ (8013100 <netbuf_data+0x80>)
 8013094:	22c6      	movs	r2, #198	@ 0xc6
 8013096:	491b      	ldr	r1, [pc, #108]	@ (8013104 <netbuf_data+0x84>)
 8013098:	481b      	ldr	r0, [pc, #108]	@ (8013108 <netbuf_data+0x88>)
 801309a:	f00e f813 	bl	80210c4 <iprintf>
 801309e:	f06f 030f 	mvn.w	r3, #15
 80130a2:	e029      	b.n	80130f8 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80130a4:	68bb      	ldr	r3, [r7, #8]
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d108      	bne.n	80130bc <netbuf_data+0x3c>
 80130aa:	4b15      	ldr	r3, [pc, #84]	@ (8013100 <netbuf_data+0x80>)
 80130ac:	22c7      	movs	r2, #199	@ 0xc7
 80130ae:	4917      	ldr	r1, [pc, #92]	@ (801310c <netbuf_data+0x8c>)
 80130b0:	4815      	ldr	r0, [pc, #84]	@ (8013108 <netbuf_data+0x88>)
 80130b2:	f00e f807 	bl	80210c4 <iprintf>
 80130b6:	f06f 030f 	mvn.w	r3, #15
 80130ba:	e01d      	b.n	80130f8 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d108      	bne.n	80130d4 <netbuf_data+0x54>
 80130c2:	4b0f      	ldr	r3, [pc, #60]	@ (8013100 <netbuf_data+0x80>)
 80130c4:	22c8      	movs	r2, #200	@ 0xc8
 80130c6:	4912      	ldr	r1, [pc, #72]	@ (8013110 <netbuf_data+0x90>)
 80130c8:	480f      	ldr	r0, [pc, #60]	@ (8013108 <netbuf_data+0x88>)
 80130ca:	f00d fffb 	bl	80210c4 <iprintf>
 80130ce:	f06f 030f 	mvn.w	r3, #15
 80130d2:	e011      	b.n	80130f8 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	685b      	ldr	r3, [r3, #4]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d102      	bne.n	80130e2 <netbuf_data+0x62>
    return ERR_BUF;
 80130dc:	f06f 0301 	mvn.w	r3, #1
 80130e0:	e00a      	b.n	80130f8 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	685b      	ldr	r3, [r3, #4]
 80130e6:	685a      	ldr	r2, [r3, #4]
 80130e8:	68bb      	ldr	r3, [r7, #8]
 80130ea:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	685b      	ldr	r3, [r3, #4]
 80130f0:	895a      	ldrh	r2, [r3, #10]
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 80130f6:	2300      	movs	r3, #0
}
 80130f8:	4618      	mov	r0, r3
 80130fa:	3710      	adds	r7, #16
 80130fc:	46bd      	mov	sp, r7
 80130fe:	bd80      	pop	{r7, pc}
 8013100:	08022fe0 	.word	0x08022fe0
 8013104:	080230e8 	.word	0x080230e8
 8013108:	08023030 	.word	0x08023030
 801310c:	08023104 	.word	0x08023104
 8013110:	08023124 	.word	0x08023124

08013114 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8013114:	b580      	push	{r7, lr}
 8013116:	b084      	sub	sp, #16
 8013118:	af00      	add	r7, sp, #0
 801311a:	6078      	str	r0, [r7, #4]
 801311c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 801311e:	f008 ffe9 	bl	801c0f4 <sys_timeouts_sleeptime>
 8013122:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801312a:	d10b      	bne.n	8013144 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 801312c:	4813      	ldr	r0, [pc, #76]	@ (801317c <tcpip_timeouts_mbox_fetch+0x68>)
 801312e:	f00c fdf4 	bl	801fd1a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8013132:	2200      	movs	r2, #0
 8013134:	6839      	ldr	r1, [r7, #0]
 8013136:	6878      	ldr	r0, [r7, #4]
 8013138:	f00c fc7e 	bl	801fa38 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 801313c:	480f      	ldr	r0, [pc, #60]	@ (801317c <tcpip_timeouts_mbox_fetch+0x68>)
 801313e:	f00c fddd 	bl	801fcfc <sys_mutex_lock>
    return;
 8013142:	e018      	b.n	8013176 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	2b00      	cmp	r3, #0
 8013148:	d102      	bne.n	8013150 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 801314a:	f008 ff99 	bl	801c080 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801314e:	e7e6      	b.n	801311e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8013150:	480a      	ldr	r0, [pc, #40]	@ (801317c <tcpip_timeouts_mbox_fetch+0x68>)
 8013152:	f00c fde2 	bl	801fd1a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8013156:	68fa      	ldr	r2, [r7, #12]
 8013158:	6839      	ldr	r1, [r7, #0]
 801315a:	6878      	ldr	r0, [r7, #4]
 801315c:	f00c fc6c 	bl	801fa38 <sys_arch_mbox_fetch>
 8013160:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8013162:	4806      	ldr	r0, [pc, #24]	@ (801317c <tcpip_timeouts_mbox_fetch+0x68>)
 8013164:	f00c fdca 	bl	801fcfc <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8013168:	68bb      	ldr	r3, [r7, #8]
 801316a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801316e:	d102      	bne.n	8013176 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8013170:	f008 ff86 	bl	801c080 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8013174:	e7d3      	b.n	801311e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8013176:	3710      	adds	r7, #16
 8013178:	46bd      	mov	sp, r7
 801317a:	bd80      	pop	{r7, pc}
 801317c:	2001f874 	.word	0x2001f874

08013180 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8013180:	b580      	push	{r7, lr}
 8013182:	b084      	sub	sp, #16
 8013184:	af00      	add	r7, sp, #0
 8013186:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8013188:	4810      	ldr	r0, [pc, #64]	@ (80131cc <tcpip_thread+0x4c>)
 801318a:	f00c fdb7 	bl	801fcfc <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 801318e:	4b10      	ldr	r3, [pc, #64]	@ (80131d0 <tcpip_thread+0x50>)
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	2b00      	cmp	r3, #0
 8013194:	d005      	beq.n	80131a2 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8013196:	4b0e      	ldr	r3, [pc, #56]	@ (80131d0 <tcpip_thread+0x50>)
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	4a0e      	ldr	r2, [pc, #56]	@ (80131d4 <tcpip_thread+0x54>)
 801319c:	6812      	ldr	r2, [r2, #0]
 801319e:	4610      	mov	r0, r2
 80131a0:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80131a2:	f107 030c 	add.w	r3, r7, #12
 80131a6:	4619      	mov	r1, r3
 80131a8:	480b      	ldr	r0, [pc, #44]	@ (80131d8 <tcpip_thread+0x58>)
 80131aa:	f7ff ffb3 	bl	8013114 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d106      	bne.n	80131c2 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80131b4:	4b09      	ldr	r3, [pc, #36]	@ (80131dc <tcpip_thread+0x5c>)
 80131b6:	2291      	movs	r2, #145	@ 0x91
 80131b8:	4909      	ldr	r1, [pc, #36]	@ (80131e0 <tcpip_thread+0x60>)
 80131ba:	480a      	ldr	r0, [pc, #40]	@ (80131e4 <tcpip_thread+0x64>)
 80131bc:	f00d ff82 	bl	80210c4 <iprintf>
      continue;
 80131c0:	e003      	b.n	80131ca <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	4618      	mov	r0, r3
 80131c6:	f000 f80f 	bl	80131e8 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80131ca:	e7ea      	b.n	80131a2 <tcpip_thread+0x22>
 80131cc:	2001f874 	.word	0x2001f874
 80131d0:	2001f868 	.word	0x2001f868
 80131d4:	2001f86c 	.word	0x2001f86c
 80131d8:	2001f870 	.word	0x2001f870
 80131dc:	08023178 	.word	0x08023178
 80131e0:	080231a8 	.word	0x080231a8
 80131e4:	080231c8 	.word	0x080231c8

080131e8 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80131e8:	b580      	push	{r7, lr}
 80131ea:	b082      	sub	sp, #8
 80131ec:	af00      	add	r7, sp, #0
 80131ee:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	781b      	ldrb	r3, [r3, #0]
 80131f4:	2b02      	cmp	r3, #2
 80131f6:	d026      	beq.n	8013246 <tcpip_thread_handle_msg+0x5e>
 80131f8:	2b02      	cmp	r3, #2
 80131fa:	dc2b      	bgt.n	8013254 <tcpip_thread_handle_msg+0x6c>
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d002      	beq.n	8013206 <tcpip_thread_handle_msg+0x1e>
 8013200:	2b01      	cmp	r3, #1
 8013202:	d015      	beq.n	8013230 <tcpip_thread_handle_msg+0x48>
 8013204:	e026      	b.n	8013254 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	68db      	ldr	r3, [r3, #12]
 801320a:	687a      	ldr	r2, [r7, #4]
 801320c:	6850      	ldr	r0, [r2, #4]
 801320e:	687a      	ldr	r2, [r7, #4]
 8013210:	6892      	ldr	r2, [r2, #8]
 8013212:	4611      	mov	r1, r2
 8013214:	4798      	blx	r3
 8013216:	4603      	mov	r3, r0
 8013218:	2b00      	cmp	r3, #0
 801321a:	d004      	beq.n	8013226 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	685b      	ldr	r3, [r3, #4]
 8013220:	4618      	mov	r0, r3
 8013222:	f002 f8af 	bl	8015384 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8013226:	6879      	ldr	r1, [r7, #4]
 8013228:	2009      	movs	r0, #9
 801322a:	f001 f8bd 	bl	80143a8 <memp_free>
      break;
 801322e:	e018      	b.n	8013262 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	685b      	ldr	r3, [r3, #4]
 8013234:	687a      	ldr	r2, [r7, #4]
 8013236:	6892      	ldr	r2, [r2, #8]
 8013238:	4610      	mov	r0, r2
 801323a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 801323c:	6879      	ldr	r1, [r7, #4]
 801323e:	2008      	movs	r0, #8
 8013240:	f001 f8b2 	bl	80143a8 <memp_free>
      break;
 8013244:	e00d      	b.n	8013262 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	685b      	ldr	r3, [r3, #4]
 801324a:	687a      	ldr	r2, [r7, #4]
 801324c:	6892      	ldr	r2, [r2, #8]
 801324e:	4610      	mov	r0, r2
 8013250:	4798      	blx	r3
      break;
 8013252:	e006      	b.n	8013262 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8013254:	4b05      	ldr	r3, [pc, #20]	@ (801326c <tcpip_thread_handle_msg+0x84>)
 8013256:	22cf      	movs	r2, #207	@ 0xcf
 8013258:	4905      	ldr	r1, [pc, #20]	@ (8013270 <tcpip_thread_handle_msg+0x88>)
 801325a:	4806      	ldr	r0, [pc, #24]	@ (8013274 <tcpip_thread_handle_msg+0x8c>)
 801325c:	f00d ff32 	bl	80210c4 <iprintf>
      break;
 8013260:	bf00      	nop
  }
}
 8013262:	bf00      	nop
 8013264:	3708      	adds	r7, #8
 8013266:	46bd      	mov	sp, r7
 8013268:	bd80      	pop	{r7, pc}
 801326a:	bf00      	nop
 801326c:	08023178 	.word	0x08023178
 8013270:	080231a8 	.word	0x080231a8
 8013274:	080231c8 	.word	0x080231c8

08013278 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8013278:	b580      	push	{r7, lr}
 801327a:	b086      	sub	sp, #24
 801327c:	af00      	add	r7, sp, #0
 801327e:	60f8      	str	r0, [r7, #12]
 8013280:	60b9      	str	r1, [r7, #8]
 8013282:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8013284:	481b      	ldr	r0, [pc, #108]	@ (80132f4 <tcpip_inpkt+0x7c>)
 8013286:	f00c fc1f 	bl	801fac8 <sys_mbox_valid>
 801328a:	4603      	mov	r3, r0
 801328c:	2b00      	cmp	r3, #0
 801328e:	d105      	bne.n	801329c <tcpip_inpkt+0x24>
 8013290:	4b19      	ldr	r3, [pc, #100]	@ (80132f8 <tcpip_inpkt+0x80>)
 8013292:	22fc      	movs	r2, #252	@ 0xfc
 8013294:	4919      	ldr	r1, [pc, #100]	@ (80132fc <tcpip_inpkt+0x84>)
 8013296:	481a      	ldr	r0, [pc, #104]	@ (8013300 <tcpip_inpkt+0x88>)
 8013298:	f00d ff14 	bl	80210c4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 801329c:	22fe      	movs	r2, #254	@ 0xfe
 801329e:	4916      	ldr	r1, [pc, #88]	@ (80132f8 <tcpip_inpkt+0x80>)
 80132a0:	2009      	movs	r0, #9
 80132a2:	f000 ffef 	bl	8014284 <memp_malloc_fn>
 80132a6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80132a8:	697b      	ldr	r3, [r7, #20]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d102      	bne.n	80132b4 <tcpip_inpkt+0x3c>
    return ERR_MEM;
 80132ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80132b2:	e01a      	b.n	80132ea <tcpip_inpkt+0x72>
  }

  msg->type = TCPIP_MSG_INPKT;
 80132b4:	697b      	ldr	r3, [r7, #20]
 80132b6:	2200      	movs	r2, #0
 80132b8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80132ba:	697b      	ldr	r3, [r7, #20]
 80132bc:	68fa      	ldr	r2, [r7, #12]
 80132be:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80132c0:	697b      	ldr	r3, [r7, #20]
 80132c2:	68ba      	ldr	r2, [r7, #8]
 80132c4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80132c6:	697b      	ldr	r3, [r7, #20]
 80132c8:	687a      	ldr	r2, [r7, #4]
 80132ca:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80132cc:	6979      	ldr	r1, [r7, #20]
 80132ce:	4809      	ldr	r0, [pc, #36]	@ (80132f4 <tcpip_inpkt+0x7c>)
 80132d0:	f00c fb8e 	bl	801f9f0 <sys_mbox_trypost>
 80132d4:	4603      	mov	r3, r0
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d006      	beq.n	80132e8 <tcpip_inpkt+0x70>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80132da:	6979      	ldr	r1, [r7, #20]
 80132dc:	2009      	movs	r0, #9
 80132de:	f001 f863 	bl	80143a8 <memp_free>
    return ERR_MEM;
 80132e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80132e6:	e000      	b.n	80132ea <tcpip_inpkt+0x72>
  }
  return ERR_OK;
 80132e8:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80132ea:	4618      	mov	r0, r3
 80132ec:	3718      	adds	r7, #24
 80132ee:	46bd      	mov	sp, r7
 80132f0:	bd80      	pop	{r7, pc}
 80132f2:	bf00      	nop
 80132f4:	2001f870 	.word	0x2001f870
 80132f8:	08023178 	.word	0x08023178
 80132fc:	080231f0 	.word	0x080231f0
 8013300:	080231c8 	.word	0x080231c8

08013304 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8013304:	b580      	push	{r7, lr}
 8013306:	b082      	sub	sp, #8
 8013308:	af00      	add	r7, sp, #0
 801330a:	6078      	str	r0, [r7, #4]
 801330c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801330e:	683b      	ldr	r3, [r7, #0]
 8013310:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013314:	f003 0318 	and.w	r3, r3, #24
 8013318:	2b00      	cmp	r3, #0
 801331a:	d006      	beq.n	801332a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 801331c:	4a08      	ldr	r2, [pc, #32]	@ (8013340 <tcpip_input+0x3c>)
 801331e:	6839      	ldr	r1, [r7, #0]
 8013320:	6878      	ldr	r0, [r7, #4]
 8013322:	f7ff ffa9 	bl	8013278 <tcpip_inpkt>
 8013326:	4603      	mov	r3, r0
 8013328:	e005      	b.n	8013336 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801332a:	4a06      	ldr	r2, [pc, #24]	@ (8013344 <tcpip_input+0x40>)
 801332c:	6839      	ldr	r1, [r7, #0]
 801332e:	6878      	ldr	r0, [r7, #4]
 8013330:	f7ff ffa2 	bl	8013278 <tcpip_inpkt>
 8013334:	4603      	mov	r3, r0
}
 8013336:	4618      	mov	r0, r3
 8013338:	3708      	adds	r7, #8
 801333a:	46bd      	mov	sp, r7
 801333c:	bd80      	pop	{r7, pc}
 801333e:	bf00      	nop
 8013340:	0801f739 	.word	0x0801f739
 8013344:	0801e4f9 	.word	0x0801e4f9

08013348 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8013348:	b580      	push	{r7, lr}
 801334a:	b084      	sub	sp, #16
 801334c:	af00      	add	r7, sp, #0
 801334e:	6078      	str	r0, [r7, #4]
 8013350:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8013352:	481b      	ldr	r0, [pc, #108]	@ (80133c0 <tcpip_try_callback+0x78>)
 8013354:	f00c fbb8 	bl	801fac8 <sys_mbox_valid>
 8013358:	4603      	mov	r3, r0
 801335a:	2b00      	cmp	r3, #0
 801335c:	d106      	bne.n	801336c <tcpip_try_callback+0x24>
 801335e:	4b19      	ldr	r3, [pc, #100]	@ (80133c4 <tcpip_try_callback+0x7c>)
 8013360:	f240 125d 	movw	r2, #349	@ 0x15d
 8013364:	4918      	ldr	r1, [pc, #96]	@ (80133c8 <tcpip_try_callback+0x80>)
 8013366:	4819      	ldr	r0, [pc, #100]	@ (80133cc <tcpip_try_callback+0x84>)
 8013368:	f00d feac 	bl	80210c4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 801336c:	f240 125f 	movw	r2, #351	@ 0x15f
 8013370:	4914      	ldr	r1, [pc, #80]	@ (80133c4 <tcpip_try_callback+0x7c>)
 8013372:	2008      	movs	r0, #8
 8013374:	f000 ff86 	bl	8014284 <memp_malloc_fn>
 8013378:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	2b00      	cmp	r3, #0
 801337e:	d102      	bne.n	8013386 <tcpip_try_callback+0x3e>
    return ERR_MEM;
 8013380:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013384:	e017      	b.n	80133b6 <tcpip_try_callback+0x6e>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	2201      	movs	r2, #1
 801338a:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	687a      	ldr	r2, [r7, #4]
 8013390:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	683a      	ldr	r2, [r7, #0]
 8013396:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8013398:	68f9      	ldr	r1, [r7, #12]
 801339a:	4809      	ldr	r0, [pc, #36]	@ (80133c0 <tcpip_try_callback+0x78>)
 801339c:	f00c fb28 	bl	801f9f0 <sys_mbox_trypost>
 80133a0:	4603      	mov	r3, r0
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d006      	beq.n	80133b4 <tcpip_try_callback+0x6c>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80133a6:	68f9      	ldr	r1, [r7, #12]
 80133a8:	2008      	movs	r0, #8
 80133aa:	f000 fffd 	bl	80143a8 <memp_free>
    return ERR_MEM;
 80133ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80133b2:	e000      	b.n	80133b6 <tcpip_try_callback+0x6e>
  }
  return ERR_OK;
 80133b4:	2300      	movs	r3, #0
}
 80133b6:	4618      	mov	r0, r3
 80133b8:	3710      	adds	r7, #16
 80133ba:	46bd      	mov	sp, r7
 80133bc:	bd80      	pop	{r7, pc}
 80133be:	bf00      	nop
 80133c0:	2001f870 	.word	0x2001f870
 80133c4:	08023178 	.word	0x08023178
 80133c8:	080231f0 	.word	0x080231f0
 80133cc:	080231c8 	.word	0x080231c8

080133d0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 80133d0:	b580      	push	{r7, lr}
 80133d2:	b084      	sub	sp, #16
 80133d4:	af00      	add	r7, sp, #0
 80133d6:	60f8      	str	r0, [r7, #12]
 80133d8:	60b9      	str	r1, [r7, #8]
 80133da:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 80133dc:	4806      	ldr	r0, [pc, #24]	@ (80133f8 <tcpip_send_msg_wait_sem+0x28>)
 80133de:	f00c fc8d 	bl	801fcfc <sys_mutex_lock>
  fn(apimsg);
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	68b8      	ldr	r0, [r7, #8]
 80133e6:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 80133e8:	4803      	ldr	r0, [pc, #12]	@ (80133f8 <tcpip_send_msg_wait_sem+0x28>)
 80133ea:	f00c fc96 	bl	801fd1a <sys_mutex_unlock>
  return ERR_OK;
 80133ee:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 80133f0:	4618      	mov	r0, r3
 80133f2:	3710      	adds	r7, #16
 80133f4:	46bd      	mov	sp, r7
 80133f6:	bd80      	pop	{r7, pc}
 80133f8:	2001f874 	.word	0x2001f874

080133fc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80133fc:	b580      	push	{r7, lr}
 80133fe:	b084      	sub	sp, #16
 8013400:	af02      	add	r7, sp, #8
 8013402:	6078      	str	r0, [r7, #4]
 8013404:	6039      	str	r1, [r7, #0]
  lwip_init();
 8013406:	f000 f872 	bl	80134ee <lwip_init>

  tcpip_init_done = initfunc;
 801340a:	4a17      	ldr	r2, [pc, #92]	@ (8013468 <tcpip_init+0x6c>)
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8013410:	4a16      	ldr	r2, [pc, #88]	@ (801346c <tcpip_init+0x70>)
 8013412:	683b      	ldr	r3, [r7, #0]
 8013414:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8013416:	2106      	movs	r1, #6
 8013418:	4815      	ldr	r0, [pc, #84]	@ (8013470 <tcpip_init+0x74>)
 801341a:	f00c fa8f 	bl	801f93c <sys_mbox_new>
 801341e:	4603      	mov	r3, r0
 8013420:	2b00      	cmp	r3, #0
 8013422:	d006      	beq.n	8013432 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8013424:	4b13      	ldr	r3, [pc, #76]	@ (8013474 <tcpip_init+0x78>)
 8013426:	f240 2261 	movw	r2, #609	@ 0x261
 801342a:	4913      	ldr	r1, [pc, #76]	@ (8013478 <tcpip_init+0x7c>)
 801342c:	4813      	ldr	r0, [pc, #76]	@ (801347c <tcpip_init+0x80>)
 801342e:	f00d fe49 	bl	80210c4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8013432:	4813      	ldr	r0, [pc, #76]	@ (8013480 <tcpip_init+0x84>)
 8013434:	f00c fc2c 	bl	801fc90 <sys_mutex_new>
 8013438:	4603      	mov	r3, r0
 801343a:	2b00      	cmp	r3, #0
 801343c:	d006      	beq.n	801344c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801343e:	4b0d      	ldr	r3, [pc, #52]	@ (8013474 <tcpip_init+0x78>)
 8013440:	f240 2265 	movw	r2, #613	@ 0x265
 8013444:	490f      	ldr	r1, [pc, #60]	@ (8013484 <tcpip_init+0x88>)
 8013446:	480d      	ldr	r0, [pc, #52]	@ (801347c <tcpip_init+0x80>)
 8013448:	f00d fe3c 	bl	80210c4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 801344c:	2318      	movs	r3, #24
 801344e:	9300      	str	r3, [sp, #0]
 8013450:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013454:	2200      	movs	r2, #0
 8013456:	490c      	ldr	r1, [pc, #48]	@ (8013488 <tcpip_init+0x8c>)
 8013458:	480c      	ldr	r0, [pc, #48]	@ (801348c <tcpip_init+0x90>)
 801345a:	f00c fc6b 	bl	801fd34 <sys_thread_new>
}
 801345e:	bf00      	nop
 8013460:	3708      	adds	r7, #8
 8013462:	46bd      	mov	sp, r7
 8013464:	bd80      	pop	{r7, pc}
 8013466:	bf00      	nop
 8013468:	2001f868 	.word	0x2001f868
 801346c:	2001f86c 	.word	0x2001f86c
 8013470:	2001f870 	.word	0x2001f870
 8013474:	08023178 	.word	0x08023178
 8013478:	08023200 	.word	0x08023200
 801347c:	080231c8 	.word	0x080231c8
 8013480:	2001f874 	.word	0x2001f874
 8013484:	08023224 	.word	0x08023224
 8013488:	08013181 	.word	0x08013181
 801348c:	08023248 	.word	0x08023248

08013490 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8013490:	b480      	push	{r7}
 8013492:	b083      	sub	sp, #12
 8013494:	af00      	add	r7, sp, #0
 8013496:	4603      	mov	r3, r0
 8013498:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 801349a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801349e:	021b      	lsls	r3, r3, #8
 80134a0:	b21a      	sxth	r2, r3
 80134a2:	88fb      	ldrh	r3, [r7, #6]
 80134a4:	0a1b      	lsrs	r3, r3, #8
 80134a6:	b29b      	uxth	r3, r3
 80134a8:	b21b      	sxth	r3, r3
 80134aa:	4313      	orrs	r3, r2
 80134ac:	b21b      	sxth	r3, r3
 80134ae:	b29b      	uxth	r3, r3
}
 80134b0:	4618      	mov	r0, r3
 80134b2:	370c      	adds	r7, #12
 80134b4:	46bd      	mov	sp, r7
 80134b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ba:	4770      	bx	lr

080134bc <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80134bc:	b480      	push	{r7}
 80134be:	b083      	sub	sp, #12
 80134c0:	af00      	add	r7, sp, #0
 80134c2:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	061a      	lsls	r2, r3, #24
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	021b      	lsls	r3, r3, #8
 80134cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80134d0:	431a      	orrs	r2, r3
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	0a1b      	lsrs	r3, r3, #8
 80134d6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80134da:	431a      	orrs	r2, r3
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	0e1b      	lsrs	r3, r3, #24
 80134e0:	4313      	orrs	r3, r2
}
 80134e2:	4618      	mov	r0, r3
 80134e4:	370c      	adds	r7, #12
 80134e6:	46bd      	mov	sp, r7
 80134e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ec:	4770      	bx	lr

080134ee <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80134ee:	b580      	push	{r7, lr}
 80134f0:	b082      	sub	sp, #8
 80134f2:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80134f4:	2300      	movs	r3, #0
 80134f6:	607b      	str	r3, [r7, #4]
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 80134f8:	f002 fa1a 	bl	8015930 <stats_init>
#if !NO_SYS
  sys_init();
 80134fc:	f00c fbbc 	bl	801fc78 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8013500:	f000 f956 	bl	80137b0 <mem_init>
  memp_init();
 8013504:	f000 fe10 	bl	8014128 <memp_init>
  pbuf_init();
  netif_init();
 8013508:	f000 ff7a 	bl	8014400 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801350c:	f008 fe2a 	bl	801c164 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8013510:	f002 fb8c 	bl	8015c2c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8013514:	f008 fd6c 	bl	801bff0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8013518:	bf00      	nop
 801351a:	3708      	adds	r7, #8
 801351c:	46bd      	mov	sp, r7
 801351e:	bd80      	pop	{r7, pc}

08013520 <mem_overflow_check_raw>:
 * @param descr1 description of the element source shown on error
 * @param descr2 description of the element source shown on error
 */
void
mem_overflow_check_raw(void *p, size_t size, const char *descr1, const char *descr2)
{
 8013520:	b580      	push	{r7, lr}
 8013522:	b0a8      	sub	sp, #160	@ 0xa0
 8013524:	af02      	add	r7, sp, #8
 8013526:	60f8      	str	r0, [r7, #12]
 8013528:	60b9      	str	r1, [r7, #8]
 801352a:	607a      	str	r2, [r7, #4]
 801352c:	603b      	str	r3, [r7, #0]
#if MEM_SANITY_REGION_AFTER_ALIGNED || MEM_SANITY_REGION_BEFORE_ALIGNED
  u16_t k;
  u8_t *m;

#if MEM_SANITY_REGION_AFTER_ALIGNED > 0
  m = (u8_t *)p + size;
 801352e:	68fa      	ldr	r2, [r7, #12]
 8013530:	68bb      	ldr	r3, [r7, #8]
 8013532:	4413      	add	r3, r2
 8013534:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  for (k = 0; k < MEM_SANITY_REGION_AFTER_ALIGNED; k++) {
 8013538:	2300      	movs	r3, #0
 801353a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
 801353e:	e01c      	b.n	801357a <mem_overflow_check_raw+0x5a>
    if (m[k] != 0xcd) {
 8013540:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8013544:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8013548:	4413      	add	r3, r2
 801354a:	781b      	ldrb	r3, [r3, #0]
 801354c:	2bcd      	cmp	r3, #205	@ 0xcd
 801354e:	d00f      	beq.n	8013570 <mem_overflow_check_raw+0x50>
      char errstr[128];
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 8013550:	f107 0010 	add.w	r0, r7, #16
 8013554:	683b      	ldr	r3, [r7, #0]
 8013556:	9300      	str	r3, [sp, #0]
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	4a21      	ldr	r2, [pc, #132]	@ (80135e0 <mem_overflow_check_raw+0xc0>)
 801355c:	2180      	movs	r1, #128	@ 0x80
 801355e:	f00d fe29 	bl	80211b4 <sniprintf>
      LWIP_ASSERT(errstr, 0);
 8013562:	f107 0110 	add.w	r1, r7, #16
 8013566:	4b1f      	ldr	r3, [pc, #124]	@ (80135e4 <mem_overflow_check_raw+0xc4>)
 8013568:	226d      	movs	r2, #109	@ 0x6d
 801356a:	481f      	ldr	r0, [pc, #124]	@ (80135e8 <mem_overflow_check_raw+0xc8>)
 801356c:	f00d fdaa 	bl	80210c4 <iprintf>
  for (k = 0; k < MEM_SANITY_REGION_AFTER_ALIGNED; k++) {
 8013570:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8013574:	3301      	adds	r3, #1
 8013576:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
 801357a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 801357e:	2b0f      	cmp	r3, #15
 8013580:	d9de      	bls.n	8013540 <mem_overflow_check_raw+0x20>
    }
  }
#endif /* MEM_SANITY_REGION_AFTER_ALIGNED > 0 */

#if MEM_SANITY_REGION_BEFORE_ALIGNED > 0
  m = (u8_t *)p - MEM_SANITY_REGION_BEFORE_ALIGNED;
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	3b10      	subs	r3, #16
 8013586:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  for (k = 0; k < MEM_SANITY_REGION_BEFORE_ALIGNED; k++) {
 801358a:	2300      	movs	r3, #0
 801358c:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
 8013590:	e01c      	b.n	80135cc <mem_overflow_check_raw+0xac>
    if (m[k] != 0xcd) {
 8013592:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8013596:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801359a:	4413      	add	r3, r2
 801359c:	781b      	ldrb	r3, [r3, #0]
 801359e:	2bcd      	cmp	r3, #205	@ 0xcd
 80135a0:	d00f      	beq.n	80135c2 <mem_overflow_check_raw+0xa2>
      char errstr[128];
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 80135a2:	f107 0010 	add.w	r0, r7, #16
 80135a6:	683b      	ldr	r3, [r7, #0]
 80135a8:	9300      	str	r3, [sp, #0]
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	4a0f      	ldr	r2, [pc, #60]	@ (80135ec <mem_overflow_check_raw+0xcc>)
 80135ae:	2180      	movs	r1, #128	@ 0x80
 80135b0:	f00d fe00 	bl	80211b4 <sniprintf>
      LWIP_ASSERT(errstr, 0);
 80135b4:	f107 0110 	add.w	r1, r7, #16
 80135b8:	4b0a      	ldr	r3, [pc, #40]	@ (80135e4 <mem_overflow_check_raw+0xc4>)
 80135ba:	2278      	movs	r2, #120	@ 0x78
 80135bc:	480a      	ldr	r0, [pc, #40]	@ (80135e8 <mem_overflow_check_raw+0xc8>)
 80135be:	f00d fd81 	bl	80210c4 <iprintf>
  for (k = 0; k < MEM_SANITY_REGION_BEFORE_ALIGNED; k++) {
 80135c2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80135c6:	3301      	adds	r3, #1
 80135c8:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
 80135cc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80135d0:	2b0f      	cmp	r3, #15
 80135d2:	d9de      	bls.n	8013592 <mem_overflow_check_raw+0x72>
#else
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(desc);
  LWIP_UNUSED_ARG(descr);
#endif
}
 80135d4:	bf00      	nop
 80135d6:	bf00      	nop
 80135d8:	3798      	adds	r7, #152	@ 0x98
 80135da:	46bd      	mov	sp, r7
 80135dc:	bd80      	pop	{r7, pc}
 80135de:	bf00      	nop
 80135e0:	08023258 	.word	0x08023258
 80135e4:	08023278 	.word	0x08023278
 80135e8:	080232a8 	.word	0x080232a8
 80135ec:	080232d0 	.word	0x080232d0

080135f0 <mem_overflow_init_raw>:
/**
 * Initialize the restricted area of a mem element.
 */
void
mem_overflow_init_raw(void *p, size_t size)
{
 80135f0:	b580      	push	{r7, lr}
 80135f2:	b084      	sub	sp, #16
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	6078      	str	r0, [r7, #4]
 80135f8:	6039      	str	r1, [r7, #0]
#if MEM_SANITY_REGION_BEFORE_ALIGNED > 0 || MEM_SANITY_REGION_AFTER_ALIGNED > 0
  u8_t *m;
#if MEM_SANITY_REGION_BEFORE_ALIGNED > 0
  m = (u8_t *)p - MEM_SANITY_REGION_BEFORE_ALIGNED;
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	3b10      	subs	r3, #16
 80135fe:	60fb      	str	r3, [r7, #12]
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 8013600:	2210      	movs	r2, #16
 8013602:	21cd      	movs	r1, #205	@ 0xcd
 8013604:	68f8      	ldr	r0, [r7, #12]
 8013606:	f00d ff0d 	bl	8021424 <memset>
#endif
#if MEM_SANITY_REGION_AFTER_ALIGNED > 0
  m = (u8_t *)p + size;
 801360a:	687a      	ldr	r2, [r7, #4]
 801360c:	683b      	ldr	r3, [r7, #0]
 801360e:	4413      	add	r3, r2
 8013610:	60fb      	str	r3, [r7, #12]
  memset(m, 0xcd, MEM_SANITY_REGION_AFTER_ALIGNED);
 8013612:	2210      	movs	r2, #16
 8013614:	21cd      	movs	r1, #205	@ 0xcd
 8013616:	68f8      	ldr	r0, [r7, #12]
 8013618:	f00d ff04 	bl	8021424 <memset>
#endif
#else /* MEM_SANITY_REGION_BEFORE_ALIGNED > 0 || MEM_SANITY_REGION_AFTER_ALIGNED > 0 */
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(desc);
#endif /* MEM_SANITY_REGION_BEFORE_ALIGNED > 0 || MEM_SANITY_REGION_AFTER_ALIGNED > 0 */
}
 801361c:	bf00      	nop
 801361e:	3710      	adds	r7, #16
 8013620:	46bd      	mov	sp, r7
 8013622:	bd80      	pop	{r7, pc}

08013624 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8013624:	b480      	push	{r7}
 8013626:	b083      	sub	sp, #12
 8013628:	af00      	add	r7, sp, #0
 801362a:	4603      	mov	r3, r0
 801362c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801362e:	4b05      	ldr	r3, [pc, #20]	@ (8013644 <ptr_to_mem+0x20>)
 8013630:	681a      	ldr	r2, [r3, #0]
 8013632:	88fb      	ldrh	r3, [r7, #6]
 8013634:	4413      	add	r3, r2
}
 8013636:	4618      	mov	r0, r3
 8013638:	370c      	adds	r7, #12
 801363a:	46bd      	mov	sp, r7
 801363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013640:	4770      	bx	lr
 8013642:	bf00      	nop
 8013644:	2001f890 	.word	0x2001f890

08013648 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8013648:	b480      	push	{r7}
 801364a:	b083      	sub	sp, #12
 801364c:	af00      	add	r7, sp, #0
 801364e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8013650:	4b05      	ldr	r3, [pc, #20]	@ (8013668 <mem_to_ptr+0x20>)
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	687a      	ldr	r2, [r7, #4]
 8013656:	1ad3      	subs	r3, r2, r3
 8013658:	b29b      	uxth	r3, r3
}
 801365a:	4618      	mov	r0, r3
 801365c:	370c      	adds	r7, #12
 801365e:	46bd      	mov	sp, r7
 8013660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013664:	4770      	bx	lr
 8013666:	bf00      	nop
 8013668:	2001f890 	.word	0x2001f890

0801366c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 801366c:	b590      	push	{r4, r7, lr}
 801366e:	b085      	sub	sp, #20
 8013670:	af00      	add	r7, sp, #0
 8013672:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8013674:	4b45      	ldr	r3, [pc, #276]	@ (801378c <plug_holes+0x120>)
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	687a      	ldr	r2, [r7, #4]
 801367a:	429a      	cmp	r2, r3
 801367c:	d206      	bcs.n	801368c <plug_holes+0x20>
 801367e:	4b44      	ldr	r3, [pc, #272]	@ (8013790 <plug_holes+0x124>)
 8013680:	f240 12df 	movw	r2, #479	@ 0x1df
 8013684:	4943      	ldr	r1, [pc, #268]	@ (8013794 <plug_holes+0x128>)
 8013686:	4844      	ldr	r0, [pc, #272]	@ (8013798 <plug_holes+0x12c>)
 8013688:	f00d fd1c 	bl	80210c4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801368c:	4b43      	ldr	r3, [pc, #268]	@ (801379c <plug_holes+0x130>)
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	687a      	ldr	r2, [r7, #4]
 8013692:	429a      	cmp	r2, r3
 8013694:	d306      	bcc.n	80136a4 <plug_holes+0x38>
 8013696:	4b3e      	ldr	r3, [pc, #248]	@ (8013790 <plug_holes+0x124>)
 8013698:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801369c:	4940      	ldr	r1, [pc, #256]	@ (80137a0 <plug_holes+0x134>)
 801369e:	483e      	ldr	r0, [pc, #248]	@ (8013798 <plug_holes+0x12c>)
 80136a0:	f00d fd10 	bl	80210c4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	791b      	ldrb	r3, [r3, #4]
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d006      	beq.n	80136ba <plug_holes+0x4e>
 80136ac:	4b38      	ldr	r3, [pc, #224]	@ (8013790 <plug_holes+0x124>)
 80136ae:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80136b2:	493c      	ldr	r1, [pc, #240]	@ (80137a4 <plug_holes+0x138>)
 80136b4:	4838      	ldr	r0, [pc, #224]	@ (8013798 <plug_holes+0x12c>)
 80136b6:	f00d fd05 	bl	80210c4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	881b      	ldrh	r3, [r3, #0]
 80136be:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80136c2:	d906      	bls.n	80136d2 <plug_holes+0x66>
 80136c4:	4b32      	ldr	r3, [pc, #200]	@ (8013790 <plug_holes+0x124>)
 80136c6:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 80136ca:	4937      	ldr	r1, [pc, #220]	@ (80137a8 <plug_holes+0x13c>)
 80136cc:	4832      	ldr	r0, [pc, #200]	@ (8013798 <plug_holes+0x12c>)
 80136ce:	f00d fcf9 	bl	80210c4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	881b      	ldrh	r3, [r3, #0]
 80136d6:	4618      	mov	r0, r3
 80136d8:	f7ff ffa4 	bl	8013624 <ptr_to_mem>
 80136dc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80136de:	687a      	ldr	r2, [r7, #4]
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	429a      	cmp	r2, r3
 80136e4:	d024      	beq.n	8013730 <plug_holes+0xc4>
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	791b      	ldrb	r3, [r3, #4]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d120      	bne.n	8013730 <plug_holes+0xc4>
 80136ee:	4b2b      	ldr	r3, [pc, #172]	@ (801379c <plug_holes+0x130>)
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	68fa      	ldr	r2, [r7, #12]
 80136f4:	429a      	cmp	r2, r3
 80136f6:	d01b      	beq.n	8013730 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80136f8:	4b2c      	ldr	r3, [pc, #176]	@ (80137ac <plug_holes+0x140>)
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	68fa      	ldr	r2, [r7, #12]
 80136fe:	429a      	cmp	r2, r3
 8013700:	d102      	bne.n	8013708 <plug_holes+0x9c>
      lfree = mem;
 8013702:	4a2a      	ldr	r2, [pc, #168]	@ (80137ac <plug_holes+0x140>)
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	881a      	ldrh	r2, [r3, #0]
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	881b      	ldrh	r3, [r3, #0]
 8013714:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8013718:	d00a      	beq.n	8013730 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801371a:	68fb      	ldr	r3, [r7, #12]
 801371c:	881b      	ldrh	r3, [r3, #0]
 801371e:	4618      	mov	r0, r3
 8013720:	f7ff ff80 	bl	8013624 <ptr_to_mem>
 8013724:	4604      	mov	r4, r0
 8013726:	6878      	ldr	r0, [r7, #4]
 8013728:	f7ff ff8e 	bl	8013648 <mem_to_ptr>
 801372c:	4603      	mov	r3, r0
 801372e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	885b      	ldrh	r3, [r3, #2]
 8013734:	4618      	mov	r0, r3
 8013736:	f7ff ff75 	bl	8013624 <ptr_to_mem>
 801373a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 801373c:	68ba      	ldr	r2, [r7, #8]
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	429a      	cmp	r2, r3
 8013742:	d01f      	beq.n	8013784 <plug_holes+0x118>
 8013744:	68bb      	ldr	r3, [r7, #8]
 8013746:	791b      	ldrb	r3, [r3, #4]
 8013748:	2b00      	cmp	r3, #0
 801374a:	d11b      	bne.n	8013784 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 801374c:	4b17      	ldr	r3, [pc, #92]	@ (80137ac <plug_holes+0x140>)
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	687a      	ldr	r2, [r7, #4]
 8013752:	429a      	cmp	r2, r3
 8013754:	d102      	bne.n	801375c <plug_holes+0xf0>
      lfree = pmem;
 8013756:	4a15      	ldr	r2, [pc, #84]	@ (80137ac <plug_holes+0x140>)
 8013758:	68bb      	ldr	r3, [r7, #8]
 801375a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	881a      	ldrh	r2, [r3, #0]
 8013760:	68bb      	ldr	r3, [r7, #8]
 8013762:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	881b      	ldrh	r3, [r3, #0]
 8013768:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 801376c:	d00a      	beq.n	8013784 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	881b      	ldrh	r3, [r3, #0]
 8013772:	4618      	mov	r0, r3
 8013774:	f7ff ff56 	bl	8013624 <ptr_to_mem>
 8013778:	4604      	mov	r4, r0
 801377a:	68b8      	ldr	r0, [r7, #8]
 801377c:	f7ff ff64 	bl	8013648 <mem_to_ptr>
 8013780:	4603      	mov	r3, r0
 8013782:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8013784:	bf00      	nop
 8013786:	3714      	adds	r7, #20
 8013788:	46bd      	mov	sp, r7
 801378a:	bd90      	pop	{r4, r7, pc}
 801378c:	2001f890 	.word	0x2001f890
 8013790:	08023278 	.word	0x08023278
 8013794:	080232f0 	.word	0x080232f0
 8013798:	080232a8 	.word	0x080232a8
 801379c:	2001f894 	.word	0x2001f894
 80137a0:	08023308 	.word	0x08023308
 80137a4:	08023324 	.word	0x08023324
 80137a8:	08023340 	.word	0x08023340
 80137ac:	2001f89c 	.word	0x2001f89c

080137b0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80137b0:	b580      	push	{r7, lr}
 80137b2:	b082      	sub	sp, #8
 80137b4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80137b6:	4b1f      	ldr	r3, [pc, #124]	@ (8013834 <mem_init+0x84>)
 80137b8:	4a1f      	ldr	r2, [pc, #124]	@ (8013838 <mem_init+0x88>)
 80137ba:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80137bc:	4b1d      	ldr	r3, [pc, #116]	@ (8013834 <mem_init+0x84>)
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 80137c8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	2200      	movs	r2, #0
 80137ce:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	2200      	movs	r2, #0
 80137d4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80137d6:	f44f 40a0 	mov.w	r0, #20480	@ 0x5000
 80137da:	f7ff ff23 	bl	8013624 <ptr_to_mem>
 80137de:	4603      	mov	r3, r0
 80137e0:	4a16      	ldr	r2, [pc, #88]	@ (801383c <mem_init+0x8c>)
 80137e2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80137e4:	4b15      	ldr	r3, [pc, #84]	@ (801383c <mem_init+0x8c>)
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	2201      	movs	r2, #1
 80137ea:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80137ec:	4b13      	ldr	r3, [pc, #76]	@ (801383c <mem_init+0x8c>)
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 80137f4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80137f6:	4b11      	ldr	r3, [pc, #68]	@ (801383c <mem_init+0x8c>)
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 80137fe:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8013800:	4b0c      	ldr	r3, [pc, #48]	@ (8013834 <mem_init+0x84>)
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	4a0e      	ldr	r2, [pc, #56]	@ (8013840 <mem_init+0x90>)
 8013806:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 8013808:	4b0e      	ldr	r3, [pc, #56]	@ (8013844 <mem_init+0x94>)
 801380a:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 801380e:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8013812:	480d      	ldr	r0, [pc, #52]	@ (8013848 <mem_init+0x98>)
 8013814:	f00c fa3c 	bl	801fc90 <sys_mutex_new>
 8013818:	4603      	mov	r3, r0
 801381a:	2b00      	cmp	r3, #0
 801381c:	d006      	beq.n	801382c <mem_init+0x7c>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801381e:	4b0b      	ldr	r3, [pc, #44]	@ (801384c <mem_init+0x9c>)
 8013820:	f240 221f 	movw	r2, #543	@ 0x21f
 8013824:	490a      	ldr	r1, [pc, #40]	@ (8013850 <mem_init+0xa0>)
 8013826:	480b      	ldr	r0, [pc, #44]	@ (8013854 <mem_init+0xa4>)
 8013828:	f00d fc4c 	bl	80210c4 <iprintf>
  }
}
 801382c:	bf00      	nop
 801382e:	3708      	adds	r7, #8
 8013830:	46bd      	mov	sp, r7
 8013832:	bd80      	pop	{r7, pc}
 8013834:	2001f890 	.word	0x2001f890
 8013838:	20048000 	.word	0x20048000
 801383c:	2001f894 	.word	0x2001f894
 8013840:	2001f89c 	.word	0x2001f89c
 8013844:	20028318 	.word	0x20028318
 8013848:	2001f898 	.word	0x2001f898
 801384c:	08023278 	.word	0x08023278
 8013850:	0802336c 	.word	0x0802336c
 8013854:	080232a8 	.word	0x080232a8

08013858 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8013858:	b580      	push	{r7, lr}
 801385a:	b086      	sub	sp, #24
 801385c:	af00      	add	r7, sp, #0
 801385e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8013860:	6878      	ldr	r0, [r7, #4]
 8013862:	f7ff fef1 	bl	8013648 <mem_to_ptr>
 8013866:	4603      	mov	r3, r0
 8013868:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	881b      	ldrh	r3, [r3, #0]
 801386e:	4618      	mov	r0, r3
 8013870:	f7ff fed8 	bl	8013624 <ptr_to_mem>
 8013874:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	885b      	ldrh	r3, [r3, #2]
 801387a:	4618      	mov	r0, r3
 801387c:	f7ff fed2 	bl	8013624 <ptr_to_mem>
 8013880:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	881b      	ldrh	r3, [r3, #0]
 8013886:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 801388a:	d818      	bhi.n	80138be <mem_link_valid+0x66>
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	885b      	ldrh	r3, [r3, #2]
 8013890:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8013894:	d813      	bhi.n	80138be <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801389a:	8afa      	ldrh	r2, [r7, #22]
 801389c:	429a      	cmp	r2, r3
 801389e:	d004      	beq.n	80138aa <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	881b      	ldrh	r3, [r3, #0]
 80138a4:	8afa      	ldrh	r2, [r7, #22]
 80138a6:	429a      	cmp	r2, r3
 80138a8:	d109      	bne.n	80138be <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80138aa:	4b08      	ldr	r3, [pc, #32]	@ (80138cc <mem_link_valid+0x74>)
 80138ac:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80138ae:	693a      	ldr	r2, [r7, #16]
 80138b0:	429a      	cmp	r2, r3
 80138b2:	d006      	beq.n	80138c2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80138b4:	693b      	ldr	r3, [r7, #16]
 80138b6:	885b      	ldrh	r3, [r3, #2]
 80138b8:	8afa      	ldrh	r2, [r7, #22]
 80138ba:	429a      	cmp	r2, r3
 80138bc:	d001      	beq.n	80138c2 <mem_link_valid+0x6a>
    return 0;
 80138be:	2300      	movs	r3, #0
 80138c0:	e000      	b.n	80138c4 <mem_link_valid+0x6c>
  }
  return 1;
 80138c2:	2301      	movs	r3, #1
}
 80138c4:	4618      	mov	r0, r3
 80138c6:	3718      	adds	r7, #24
 80138c8:	46bd      	mov	sp, r7
 80138ca:	bd80      	pop	{r7, pc}
 80138cc:	2001f894 	.word	0x2001f894

080138d0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80138d0:	b580      	push	{r7, lr}
 80138d2:	b088      	sub	sp, #32
 80138d4:	af00      	add	r7, sp, #0
 80138d6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d103      	bne.n	80138e6 <mem_free+0x16>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
 80138de:	485a      	ldr	r0, [pc, #360]	@ (8013a48 <mem_free+0x178>)
 80138e0:	f00d fc60 	bl	80211a4 <puts>
    return;
 80138e4:	e0ac      	b.n	8013a40 <mem_free+0x170>
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	f003 0303 	and.w	r3, r3, #3
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d018      	beq.n	8013922 <mem_free+0x52>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80138f0:	4b56      	ldr	r3, [pc, #344]	@ (8013a4c <mem_free+0x17c>)
 80138f2:	f240 2273 	movw	r2, #627	@ 0x273
 80138f6:	4956      	ldr	r1, [pc, #344]	@ (8013a50 <mem_free+0x180>)
 80138f8:	4856      	ldr	r0, [pc, #344]	@ (8013a54 <mem_free+0x184>)
 80138fa:	f00d fbe3 	bl	80210c4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
 80138fe:	4854      	ldr	r0, [pc, #336]	@ (8013a50 <mem_free+0x180>)
 8013900:	f00d fc50 	bl	80211a4 <puts>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013904:	f00c fa36 	bl	801fd74 <sys_arch_protect>
 8013908:	60f8      	str	r0, [r7, #12]
 801390a:	4b53      	ldr	r3, [pc, #332]	@ (8013a58 <mem_free+0x188>)
 801390c:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	@ 0xb4
 8013910:	3301      	adds	r3, #1
 8013912:	b29a      	uxth	r2, r3
 8013914:	4b50      	ldr	r3, [pc, #320]	@ (8013a58 <mem_free+0x188>)
 8013916:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
 801391a:	68f8      	ldr	r0, [r7, #12]
 801391c:	f00c fa38 	bl	801fd90 <sys_arch_unprotect>
    return;
 8013920:	e08e      	b.n	8013a40 <mem_free+0x170>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	3b08      	subs	r3, #8
 8013926:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8013928:	4b4c      	ldr	r3, [pc, #304]	@ (8013a5c <mem_free+0x18c>)
 801392a:	681b      	ldr	r3, [r3, #0]
 801392c:	69fa      	ldr	r2, [r7, #28]
 801392e:	429a      	cmp	r2, r3
 8013930:	d306      	bcc.n	8013940 <mem_free+0x70>
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	f103 020c 	add.w	r2, r3, #12
 8013938:	4b49      	ldr	r3, [pc, #292]	@ (8013a60 <mem_free+0x190>)
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	429a      	cmp	r2, r3
 801393e:	d918      	bls.n	8013972 <mem_free+0xa2>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8013940:	4b42      	ldr	r3, [pc, #264]	@ (8013a4c <mem_free+0x17c>)
 8013942:	f240 227f 	movw	r2, #639	@ 0x27f
 8013946:	4947      	ldr	r1, [pc, #284]	@ (8013a64 <mem_free+0x194>)
 8013948:	4842      	ldr	r0, [pc, #264]	@ (8013a54 <mem_free+0x184>)
 801394a:	f00d fbbb 	bl	80210c4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
 801394e:	4845      	ldr	r0, [pc, #276]	@ (8013a64 <mem_free+0x194>)
 8013950:	f00d fc28 	bl	80211a4 <puts>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013954:	f00c fa0e 	bl	801fd74 <sys_arch_protect>
 8013958:	6138      	str	r0, [r7, #16]
 801395a:	4b3f      	ldr	r3, [pc, #252]	@ (8013a58 <mem_free+0x188>)
 801395c:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	@ 0xb4
 8013960:	3301      	adds	r3, #1
 8013962:	b29a      	uxth	r2, r3
 8013964:	4b3c      	ldr	r3, [pc, #240]	@ (8013a58 <mem_free+0x188>)
 8013966:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
 801396a:	6938      	ldr	r0, [r7, #16]
 801396c:	f00c fa10 	bl	801fd90 <sys_arch_unprotect>
    return;
 8013970:	e066      	b.n	8013a40 <mem_free+0x170>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8013972:	483d      	ldr	r0, [pc, #244]	@ (8013a68 <mem_free+0x198>)
 8013974:	f00c f9c2 	bl	801fcfc <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8013978:	69fb      	ldr	r3, [r7, #28]
 801397a:	791b      	ldrb	r3, [r3, #4]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d11b      	bne.n	80139b8 <mem_free+0xe8>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8013980:	4b32      	ldr	r3, [pc, #200]	@ (8013a4c <mem_free+0x17c>)
 8013982:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8013986:	4939      	ldr	r1, [pc, #228]	@ (8013a6c <mem_free+0x19c>)
 8013988:	4832      	ldr	r0, [pc, #200]	@ (8013a54 <mem_free+0x184>)
 801398a:	f00d fb9b 	bl	80210c4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801398e:	4836      	ldr	r0, [pc, #216]	@ (8013a68 <mem_free+0x198>)
 8013990:	f00c f9c3 	bl	801fd1a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
 8013994:	4836      	ldr	r0, [pc, #216]	@ (8013a70 <mem_free+0x1a0>)
 8013996:	f00d fc05 	bl	80211a4 <puts>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801399a:	f00c f9eb 	bl	801fd74 <sys_arch_protect>
 801399e:	6178      	str	r0, [r7, #20]
 80139a0:	4b2d      	ldr	r3, [pc, #180]	@ (8013a58 <mem_free+0x188>)
 80139a2:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	@ 0xb4
 80139a6:	3301      	adds	r3, #1
 80139a8:	b29a      	uxth	r2, r3
 80139aa:	4b2b      	ldr	r3, [pc, #172]	@ (8013a58 <mem_free+0x188>)
 80139ac:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
 80139b0:	6978      	ldr	r0, [r7, #20]
 80139b2:	f00c f9ed 	bl	801fd90 <sys_arch_unprotect>
    return;
 80139b6:	e043      	b.n	8013a40 <mem_free+0x170>
  }

  if (!mem_link_valid(mem)) {
 80139b8:	69f8      	ldr	r0, [r7, #28]
 80139ba:	f7ff ff4d 	bl	8013858 <mem_link_valid>
 80139be:	4603      	mov	r3, r0
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d11b      	bne.n	80139fc <mem_free+0x12c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80139c4:	4b21      	ldr	r3, [pc, #132]	@ (8013a4c <mem_free+0x17c>)
 80139c6:	f240 2295 	movw	r2, #661	@ 0x295
 80139ca:	492a      	ldr	r1, [pc, #168]	@ (8013a74 <mem_free+0x1a4>)
 80139cc:	4821      	ldr	r0, [pc, #132]	@ (8013a54 <mem_free+0x184>)
 80139ce:	f00d fb79 	bl	80210c4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80139d2:	4825      	ldr	r0, [pc, #148]	@ (8013a68 <mem_free+0x198>)
 80139d4:	f00c f9a1 	bl	801fd1a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
 80139d8:	4827      	ldr	r0, [pc, #156]	@ (8013a78 <mem_free+0x1a8>)
 80139da:	f00d fbe3 	bl	80211a4 <puts>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80139de:	f00c f9c9 	bl	801fd74 <sys_arch_protect>
 80139e2:	61b8      	str	r0, [r7, #24]
 80139e4:	4b1c      	ldr	r3, [pc, #112]	@ (8013a58 <mem_free+0x188>)
 80139e6:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	@ 0xb4
 80139ea:	3301      	adds	r3, #1
 80139ec:	b29a      	uxth	r2, r3
 80139ee:	4b1a      	ldr	r3, [pc, #104]	@ (8013a58 <mem_free+0x188>)
 80139f0:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
 80139f4:	69b8      	ldr	r0, [r7, #24]
 80139f6:	f00c f9cb 	bl	801fd90 <sys_arch_unprotect>
    return;
 80139fa:	e021      	b.n	8013a40 <mem_free+0x170>
  }

  /* mem is now unused. */
  mem->used = 0;
 80139fc:	69fb      	ldr	r3, [r7, #28]
 80139fe:	2200      	movs	r2, #0
 8013a00:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8013a02:	4b1e      	ldr	r3, [pc, #120]	@ (8013a7c <mem_free+0x1ac>)
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	69fa      	ldr	r2, [r7, #28]
 8013a08:	429a      	cmp	r2, r3
 8013a0a:	d202      	bcs.n	8013a12 <mem_free+0x142>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8013a0c:	4a1b      	ldr	r2, [pc, #108]	@ (8013a7c <mem_free+0x1ac>)
 8013a0e:	69fb      	ldr	r3, [r7, #28]
 8013a10:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 8013a12:	4b11      	ldr	r3, [pc, #68]	@ (8013a58 <mem_free+0x188>)
 8013a14:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	@ 0xb0
 8013a18:	4b10      	ldr	r3, [pc, #64]	@ (8013a5c <mem_free+0x18c>)
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	69f9      	ldr	r1, [r7, #28]
 8013a1e:	1acb      	subs	r3, r1, r3
 8013a20:	b299      	uxth	r1, r3
 8013a22:	69fb      	ldr	r3, [r7, #28]
 8013a24:	881b      	ldrh	r3, [r3, #0]
 8013a26:	1acb      	subs	r3, r1, r3
 8013a28:	b29b      	uxth	r3, r3
 8013a2a:	4413      	add	r3, r2
 8013a2c:	b29a      	uxth	r2, r3
 8013a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8013a58 <mem_free+0x188>)
 8013a30:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8013a34:	69f8      	ldr	r0, [r7, #28]
 8013a36:	f7ff fe19 	bl	801366c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8013a3a:	480b      	ldr	r0, [pc, #44]	@ (8013a68 <mem_free+0x198>)
 8013a3c:	f00c f96d 	bl	801fd1a <sys_mutex_unlock>
}
 8013a40:	3720      	adds	r7, #32
 8013a42:	46bd      	mov	sp, r7
 8013a44:	bd80      	pop	{r7, pc}
 8013a46:	bf00      	nop
 8013a48:	08023388 	.word	0x08023388
 8013a4c:	08023278 	.word	0x08023278
 8013a50:	080233a8 	.word	0x080233a8
 8013a54:	080232a8 	.word	0x080232a8
 8013a58:	20028318 	.word	0x20028318
 8013a5c:	2001f890 	.word	0x2001f890
 8013a60:	2001f894 	.word	0x2001f894
 8013a64:	080233cc 	.word	0x080233cc
 8013a68:	2001f898 	.word	0x2001f898
 8013a6c:	080233e8 	.word	0x080233e8
 8013a70:	08023410 	.word	0x08023410
 8013a74:	08023438 	.word	0x08023438
 8013a78:	0802346c 	.word	0x0802346c
 8013a7c:	2001f89c 	.word	0x2001f89c

08013a80 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8013a80:	b580      	push	{r7, lr}
 8013a82:	b088      	sub	sp, #32
 8013a84:	af00      	add	r7, sp, #0
 8013a86:	6078      	str	r0, [r7, #4]
 8013a88:	460b      	mov	r3, r1
 8013a8a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8013a8c:	887b      	ldrh	r3, [r7, #2]
 8013a8e:	3303      	adds	r3, #3
 8013a90:	b29b      	uxth	r3, r3
 8013a92:	f023 0303 	bic.w	r3, r3, #3
 8013a96:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8013a98:	8bfb      	ldrh	r3, [r7, #30]
 8013a9a:	2b0b      	cmp	r3, #11
 8013a9c:	d801      	bhi.n	8013aa2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8013a9e:	230c      	movs	r3, #12
 8013aa0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8013aa2:	8bfb      	ldrh	r3, [r7, #30]
 8013aa4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8013aa8:	d803      	bhi.n	8013ab2 <mem_trim+0x32>
 8013aaa:	8bfa      	ldrh	r2, [r7, #30]
 8013aac:	887b      	ldrh	r3, [r7, #2]
 8013aae:	429a      	cmp	r2, r3
 8013ab0:	d201      	bcs.n	8013ab6 <mem_trim+0x36>
    return NULL;
 8013ab2:	2300      	movs	r3, #0
 8013ab4:	e0fb      	b.n	8013cae <mem_trim+0x22e>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8013ab6:	4b80      	ldr	r3, [pc, #512]	@ (8013cb8 <mem_trim+0x238>)
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	687a      	ldr	r2, [r7, #4]
 8013abc:	429a      	cmp	r2, r3
 8013abe:	d304      	bcc.n	8013aca <mem_trim+0x4a>
 8013ac0:	4b7e      	ldr	r3, [pc, #504]	@ (8013cbc <mem_trim+0x23c>)
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	687a      	ldr	r2, [r7, #4]
 8013ac6:	429a      	cmp	r2, r3
 8013ac8:	d306      	bcc.n	8013ad8 <mem_trim+0x58>
 8013aca:	4b7d      	ldr	r3, [pc, #500]	@ (8013cc0 <mem_trim+0x240>)
 8013acc:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8013ad0:	497c      	ldr	r1, [pc, #496]	@ (8013cc4 <mem_trim+0x244>)
 8013ad2:	487d      	ldr	r0, [pc, #500]	@ (8013cc8 <mem_trim+0x248>)
 8013ad4:	f00d faf6 	bl	80210c4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8013ad8:	4b77      	ldr	r3, [pc, #476]	@ (8013cb8 <mem_trim+0x238>)
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	687a      	ldr	r2, [r7, #4]
 8013ade:	429a      	cmp	r2, r3
 8013ae0:	d304      	bcc.n	8013aec <mem_trim+0x6c>
 8013ae2:	4b76      	ldr	r3, [pc, #472]	@ (8013cbc <mem_trim+0x23c>)
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	687a      	ldr	r2, [r7, #4]
 8013ae8:	429a      	cmp	r2, r3
 8013aea:	d312      	bcc.n	8013b12 <mem_trim+0x92>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
 8013aec:	4877      	ldr	r0, [pc, #476]	@ (8013ccc <mem_trim+0x24c>)
 8013aee:	f00d fb59 	bl	80211a4 <puts>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013af2:	f00c f93f 	bl	801fd74 <sys_arch_protect>
 8013af6:	60b8      	str	r0, [r7, #8]
 8013af8:	4b75      	ldr	r3, [pc, #468]	@ (8013cd0 <mem_trim+0x250>)
 8013afa:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	@ 0xb4
 8013afe:	3301      	adds	r3, #1
 8013b00:	b29a      	uxth	r2, r3
 8013b02:	4b73      	ldr	r3, [pc, #460]	@ (8013cd0 <mem_trim+0x250>)
 8013b04:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
 8013b08:	68b8      	ldr	r0, [r7, #8]
 8013b0a:	f00c f941 	bl	801fd90 <sys_arch_unprotect>
    return rmem;
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	e0cd      	b.n	8013cae <mem_trim+0x22e>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	3b08      	subs	r3, #8
 8013b16:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8013b18:	69b8      	ldr	r0, [r7, #24]
 8013b1a:	f7ff fd95 	bl	8013648 <mem_to_ptr>
 8013b1e:	4603      	mov	r3, r0
 8013b20:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8013b22:	69bb      	ldr	r3, [r7, #24]
 8013b24:	881a      	ldrh	r2, [r3, #0]
 8013b26:	8afb      	ldrh	r3, [r7, #22]
 8013b28:	1ad3      	subs	r3, r2, r3
 8013b2a:	b29b      	uxth	r3, r3
 8013b2c:	3b08      	subs	r3, #8
 8013b2e:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8013b30:	8bfa      	ldrh	r2, [r7, #30]
 8013b32:	8abb      	ldrh	r3, [r7, #20]
 8013b34:	429a      	cmp	r2, r3
 8013b36:	d906      	bls.n	8013b46 <mem_trim+0xc6>
 8013b38:	4b61      	ldr	r3, [pc, #388]	@ (8013cc0 <mem_trim+0x240>)
 8013b3a:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8013b3e:	4965      	ldr	r1, [pc, #404]	@ (8013cd4 <mem_trim+0x254>)
 8013b40:	4861      	ldr	r0, [pc, #388]	@ (8013cc8 <mem_trim+0x248>)
 8013b42:	f00d fabf 	bl	80210c4 <iprintf>
  if (newsize > size) {
 8013b46:	8bfa      	ldrh	r2, [r7, #30]
 8013b48:	8abb      	ldrh	r3, [r7, #20]
 8013b4a:	429a      	cmp	r2, r3
 8013b4c:	d901      	bls.n	8013b52 <mem_trim+0xd2>
    /* not supported */
    return NULL;
 8013b4e:	2300      	movs	r3, #0
 8013b50:	e0ad      	b.n	8013cae <mem_trim+0x22e>
  }
  if (newsize == size) {
 8013b52:	8bfa      	ldrh	r2, [r7, #30]
 8013b54:	8abb      	ldrh	r3, [r7, #20]
 8013b56:	429a      	cmp	r2, r3
 8013b58:	d101      	bne.n	8013b5e <mem_trim+0xde>
    /* No change in size, simply return */
    return rmem;
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	e0a7      	b.n	8013cae <mem_trim+0x22e>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8013b5e:	485e      	ldr	r0, [pc, #376]	@ (8013cd8 <mem_trim+0x258>)
 8013b60:	f00c f8cc 	bl	801fcfc <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8013b64:	69bb      	ldr	r3, [r7, #24]
 8013b66:	881b      	ldrh	r3, [r3, #0]
 8013b68:	4618      	mov	r0, r3
 8013b6a:	f7ff fd5b 	bl	8013624 <ptr_to_mem>
 8013b6e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8013b70:	693b      	ldr	r3, [r7, #16]
 8013b72:	791b      	ldrb	r3, [r3, #4]
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d14b      	bne.n	8013c10 <mem_trim+0x190>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8013b78:	69bb      	ldr	r3, [r7, #24]
 8013b7a:	881b      	ldrh	r3, [r3, #0]
 8013b7c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8013b80:	d106      	bne.n	8013b90 <mem_trim+0x110>
 8013b82:	4b4f      	ldr	r3, [pc, #316]	@ (8013cc0 <mem_trim+0x240>)
 8013b84:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8013b88:	4954      	ldr	r1, [pc, #336]	@ (8013cdc <mem_trim+0x25c>)
 8013b8a:	484f      	ldr	r0, [pc, #316]	@ (8013cc8 <mem_trim+0x248>)
 8013b8c:	f00d fa9a 	bl	80210c4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8013b90:	693b      	ldr	r3, [r7, #16]
 8013b92:	881b      	ldrh	r3, [r3, #0]
 8013b94:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8013b96:	8afa      	ldrh	r2, [r7, #22]
 8013b98:	8bfb      	ldrh	r3, [r7, #30]
 8013b9a:	4413      	add	r3, r2
 8013b9c:	b29b      	uxth	r3, r3
 8013b9e:	3308      	adds	r3, #8
 8013ba0:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8013ba2:	4b4f      	ldr	r3, [pc, #316]	@ (8013ce0 <mem_trim+0x260>)
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	693a      	ldr	r2, [r7, #16]
 8013ba8:	429a      	cmp	r2, r3
 8013baa:	d106      	bne.n	8013bba <mem_trim+0x13a>
      lfree = ptr_to_mem(ptr2);
 8013bac:	89fb      	ldrh	r3, [r7, #14]
 8013bae:	4618      	mov	r0, r3
 8013bb0:	f7ff fd38 	bl	8013624 <ptr_to_mem>
 8013bb4:	4603      	mov	r3, r0
 8013bb6:	4a4a      	ldr	r2, [pc, #296]	@ (8013ce0 <mem_trim+0x260>)
 8013bb8:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8013bba:	89fb      	ldrh	r3, [r7, #14]
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	f7ff fd31 	bl	8013624 <ptr_to_mem>
 8013bc2:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8013bc4:	693b      	ldr	r3, [r7, #16]
 8013bc6:	2200      	movs	r2, #0
 8013bc8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8013bca:	693b      	ldr	r3, [r7, #16]
 8013bcc:	89ba      	ldrh	r2, [r7, #12]
 8013bce:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8013bd0:	693b      	ldr	r3, [r7, #16]
 8013bd2:	8afa      	ldrh	r2, [r7, #22]
 8013bd4:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8013bd6:	69bb      	ldr	r3, [r7, #24]
 8013bd8:	89fa      	ldrh	r2, [r7, #14]
 8013bda:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013bdc:	693b      	ldr	r3, [r7, #16]
 8013bde:	881b      	ldrh	r3, [r3, #0]
 8013be0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8013be4:	d007      	beq.n	8013bf6 <mem_trim+0x176>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8013be6:	693b      	ldr	r3, [r7, #16]
 8013be8:	881b      	ldrh	r3, [r3, #0]
 8013bea:	4618      	mov	r0, r3
 8013bec:	f7ff fd1a 	bl	8013624 <ptr_to_mem>
 8013bf0:	4602      	mov	r2, r0
 8013bf2:	89fb      	ldrh	r3, [r7, #14]
 8013bf4:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 8013bf6:	4b36      	ldr	r3, [pc, #216]	@ (8013cd0 <mem_trim+0x250>)
 8013bf8:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	@ 0xb0
 8013bfc:	8bf9      	ldrh	r1, [r7, #30]
 8013bfe:	8abb      	ldrh	r3, [r7, #20]
 8013c00:	1acb      	subs	r3, r1, r3
 8013c02:	b29b      	uxth	r3, r3
 8013c04:	4413      	add	r3, r2
 8013c06:	b29a      	uxth	r2, r3
 8013c08:	4b31      	ldr	r3, [pc, #196]	@ (8013cd0 <mem_trim+0x250>)
 8013c0a:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
 8013c0e:	e04a      	b.n	8013ca6 <mem_trim+0x226>
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8013c10:	8bfb      	ldrh	r3, [r7, #30]
 8013c12:	f103 0214 	add.w	r2, r3, #20
 8013c16:	8abb      	ldrh	r3, [r7, #20]
 8013c18:	429a      	cmp	r2, r3
 8013c1a:	d844      	bhi.n	8013ca6 <mem_trim+0x226>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8013c1c:	8afa      	ldrh	r2, [r7, #22]
 8013c1e:	8bfb      	ldrh	r3, [r7, #30]
 8013c20:	4413      	add	r3, r2
 8013c22:	b29b      	uxth	r3, r3
 8013c24:	3308      	adds	r3, #8
 8013c26:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8013c28:	69bb      	ldr	r3, [r7, #24]
 8013c2a:	881b      	ldrh	r3, [r3, #0]
 8013c2c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8013c30:	d106      	bne.n	8013c40 <mem_trim+0x1c0>
 8013c32:	4b23      	ldr	r3, [pc, #140]	@ (8013cc0 <mem_trim+0x240>)
 8013c34:	f240 3216 	movw	r2, #790	@ 0x316
 8013c38:	4928      	ldr	r1, [pc, #160]	@ (8013cdc <mem_trim+0x25c>)
 8013c3a:	4823      	ldr	r0, [pc, #140]	@ (8013cc8 <mem_trim+0x248>)
 8013c3c:	f00d fa42 	bl	80210c4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8013c40:	89fb      	ldrh	r3, [r7, #14]
 8013c42:	4618      	mov	r0, r3
 8013c44:	f7ff fcee 	bl	8013624 <ptr_to_mem>
 8013c48:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8013c4a:	4b25      	ldr	r3, [pc, #148]	@ (8013ce0 <mem_trim+0x260>)
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	693a      	ldr	r2, [r7, #16]
 8013c50:	429a      	cmp	r2, r3
 8013c52:	d202      	bcs.n	8013c5a <mem_trim+0x1da>
      lfree = mem2;
 8013c54:	4a22      	ldr	r2, [pc, #136]	@ (8013ce0 <mem_trim+0x260>)
 8013c56:	693b      	ldr	r3, [r7, #16]
 8013c58:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8013c5a:	693b      	ldr	r3, [r7, #16]
 8013c5c:	2200      	movs	r2, #0
 8013c5e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8013c60:	69bb      	ldr	r3, [r7, #24]
 8013c62:	881a      	ldrh	r2, [r3, #0]
 8013c64:	693b      	ldr	r3, [r7, #16]
 8013c66:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8013c68:	693b      	ldr	r3, [r7, #16]
 8013c6a:	8afa      	ldrh	r2, [r7, #22]
 8013c6c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8013c6e:	69bb      	ldr	r3, [r7, #24]
 8013c70:	89fa      	ldrh	r2, [r7, #14]
 8013c72:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013c74:	693b      	ldr	r3, [r7, #16]
 8013c76:	881b      	ldrh	r3, [r3, #0]
 8013c78:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8013c7c:	d007      	beq.n	8013c8e <mem_trim+0x20e>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8013c7e:	693b      	ldr	r3, [r7, #16]
 8013c80:	881b      	ldrh	r3, [r3, #0]
 8013c82:	4618      	mov	r0, r3
 8013c84:	f7ff fcce 	bl	8013624 <ptr_to_mem>
 8013c88:	4602      	mov	r2, r0
 8013c8a:	89fb      	ldrh	r3, [r7, #14]
 8013c8c:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 8013c8e:	4b10      	ldr	r3, [pc, #64]	@ (8013cd0 <mem_trim+0x250>)
 8013c90:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	@ 0xb0
 8013c94:	8bf9      	ldrh	r1, [r7, #30]
 8013c96:	8abb      	ldrh	r3, [r7, #20]
 8013c98:	1acb      	subs	r3, r1, r3
 8013c9a:	b29b      	uxth	r3, r3
 8013c9c:	4413      	add	r3, r2
 8013c9e:	b29a      	uxth	r2, r3
 8013ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8013cd0 <mem_trim+0x250>)
 8013ca2:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8013ca6:	480c      	ldr	r0, [pc, #48]	@ (8013cd8 <mem_trim+0x258>)
 8013ca8:	f00c f837 	bl	801fd1a <sys_mutex_unlock>
  return rmem;
 8013cac:	687b      	ldr	r3, [r7, #4]
}
 8013cae:	4618      	mov	r0, r3
 8013cb0:	3720      	adds	r7, #32
 8013cb2:	46bd      	mov	sp, r7
 8013cb4:	bd80      	pop	{r7, pc}
 8013cb6:	bf00      	nop
 8013cb8:	2001f890 	.word	0x2001f890
 8013cbc:	2001f894 	.word	0x2001f894
 8013cc0:	08023278 	.word	0x08023278
 8013cc4:	080234a0 	.word	0x080234a0
 8013cc8:	080232a8 	.word	0x080232a8
 8013ccc:	080234b8 	.word	0x080234b8
 8013cd0:	20028318 	.word	0x20028318
 8013cd4:	080234d4 	.word	0x080234d4
 8013cd8:	2001f898 	.word	0x2001f898
 8013cdc:	080234f4 	.word	0x080234f4
 8013ce0:	2001f89c 	.word	0x2001f89c

08013ce4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8013ce4:	b590      	push	{r4, r7, lr}
 8013ce6:	b089      	sub	sp, #36	@ 0x24
 8013ce8:	af00      	add	r7, sp, #0
 8013cea:	4603      	mov	r3, r0
 8013cec:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8013cee:	88fb      	ldrh	r3, [r7, #6]
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d101      	bne.n	8013cf8 <mem_malloc+0x14>
    return NULL;
 8013cf4:	2300      	movs	r3, #0
 8013cf6:	e127      	b.n	8013f48 <mem_malloc+0x264>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8013cf8:	88fb      	ldrh	r3, [r7, #6]
 8013cfa:	3303      	adds	r3, #3
 8013cfc:	b29b      	uxth	r3, r3
 8013cfe:	f023 0303 	bic.w	r3, r3, #3
 8013d02:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8013d04:	8bbb      	ldrh	r3, [r7, #28]
 8013d06:	2b0b      	cmp	r3, #11
 8013d08:	d801      	bhi.n	8013d0e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8013d0a:	230c      	movs	r3, #12
 8013d0c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8013d0e:	8bbb      	ldrh	r3, [r7, #28]
 8013d10:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8013d14:	d803      	bhi.n	8013d1e <mem_malloc+0x3a>
 8013d16:	8bba      	ldrh	r2, [r7, #28]
 8013d18:	88fb      	ldrh	r3, [r7, #6]
 8013d1a:	429a      	cmp	r2, r3
 8013d1c:	d201      	bcs.n	8013d22 <mem_malloc+0x3e>
    return NULL;
 8013d1e:	2300      	movs	r3, #0
 8013d20:	e112      	b.n	8013f48 <mem_malloc+0x264>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8013d22:	488b      	ldr	r0, [pc, #556]	@ (8013f50 <mem_malloc+0x26c>)
 8013d24:	f00b ffea 	bl	801fcfc <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013d28:	4b8a      	ldr	r3, [pc, #552]	@ (8013f54 <mem_malloc+0x270>)
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	4618      	mov	r0, r3
 8013d2e:	f7ff fc8b 	bl	8013648 <mem_to_ptr>
 8013d32:	4603      	mov	r3, r0
 8013d34:	83fb      	strh	r3, [r7, #30]
 8013d36:	e0ee      	b.n	8013f16 <mem_malloc+0x232>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8013d38:	8bfb      	ldrh	r3, [r7, #30]
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	f7ff fc72 	bl	8013624 <ptr_to_mem>
 8013d40:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8013d42:	697b      	ldr	r3, [r7, #20]
 8013d44:	791b      	ldrb	r3, [r3, #4]
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	f040 80de 	bne.w	8013f08 <mem_malloc+0x224>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8013d4c:	697b      	ldr	r3, [r7, #20]
 8013d4e:	881b      	ldrh	r3, [r3, #0]
 8013d50:	461a      	mov	r2, r3
 8013d52:	8bfb      	ldrh	r3, [r7, #30]
 8013d54:	1ad3      	subs	r3, r2, r3
 8013d56:	f1a3 0208 	sub.w	r2, r3, #8
 8013d5a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8013d5c:	429a      	cmp	r2, r3
 8013d5e:	f0c0 80d3 	bcc.w	8013f08 <mem_malloc+0x224>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8013d62:	697b      	ldr	r3, [r7, #20]
 8013d64:	881b      	ldrh	r3, [r3, #0]
 8013d66:	461a      	mov	r2, r3
 8013d68:	8bfb      	ldrh	r3, [r7, #30]
 8013d6a:	1ad3      	subs	r3, r2, r3
 8013d6c:	f1a3 0208 	sub.w	r2, r3, #8
 8013d70:	8bbb      	ldrh	r3, [r7, #28]
 8013d72:	3314      	adds	r3, #20
 8013d74:	429a      	cmp	r2, r3
 8013d76:	d34c      	bcc.n	8013e12 <mem_malloc+0x12e>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8013d78:	8bfa      	ldrh	r2, [r7, #30]
 8013d7a:	8bbb      	ldrh	r3, [r7, #28]
 8013d7c:	4413      	add	r3, r2
 8013d7e:	b29b      	uxth	r3, r3
 8013d80:	3308      	adds	r3, #8
 8013d82:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8013d84:	8a7b      	ldrh	r3, [r7, #18]
 8013d86:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8013d8a:	d106      	bne.n	8013d9a <mem_malloc+0xb6>
 8013d8c:	4b72      	ldr	r3, [pc, #456]	@ (8013f58 <mem_malloc+0x274>)
 8013d8e:	f240 3287 	movw	r2, #903	@ 0x387
 8013d92:	4972      	ldr	r1, [pc, #456]	@ (8013f5c <mem_malloc+0x278>)
 8013d94:	4872      	ldr	r0, [pc, #456]	@ (8013f60 <mem_malloc+0x27c>)
 8013d96:	f00d f995 	bl	80210c4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8013d9a:	8a7b      	ldrh	r3, [r7, #18]
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	f7ff fc41 	bl	8013624 <ptr_to_mem>
 8013da2:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	2200      	movs	r2, #0
 8013da8:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8013daa:	697b      	ldr	r3, [r7, #20]
 8013dac:	881a      	ldrh	r2, [r3, #0]
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	8bfa      	ldrh	r2, [r7, #30]
 8013db6:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8013db8:	697b      	ldr	r3, [r7, #20]
 8013dba:	8a7a      	ldrh	r2, [r7, #18]
 8013dbc:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8013dbe:	697b      	ldr	r3, [r7, #20]
 8013dc0:	2201      	movs	r2, #1
 8013dc2:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	881b      	ldrh	r3, [r3, #0]
 8013dc8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8013dcc:	d007      	beq.n	8013dde <mem_malloc+0xfa>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	881b      	ldrh	r3, [r3, #0]
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	f7ff fc26 	bl	8013624 <ptr_to_mem>
 8013dd8:	4602      	mov	r2, r0
 8013dda:	8a7b      	ldrh	r3, [r7, #18]
 8013ddc:	8053      	strh	r3, [r2, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 8013dde:	4b61      	ldr	r3, [pc, #388]	@ (8013f64 <mem_malloc+0x280>)
 8013de0:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	@ 0xb0
 8013de4:	8bbb      	ldrh	r3, [r7, #28]
 8013de6:	4413      	add	r3, r2
 8013de8:	b29b      	uxth	r3, r3
 8013dea:	3308      	adds	r3, #8
 8013dec:	b29a      	uxth	r2, r3
 8013dee:	4b5d      	ldr	r3, [pc, #372]	@ (8013f64 <mem_malloc+0x280>)
 8013df0:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
 8013df4:	4b5b      	ldr	r3, [pc, #364]	@ (8013f64 <mem_malloc+0x280>)
 8013df6:	f8b3 20b2 	ldrh.w	r2, [r3, #178]	@ 0xb2
 8013dfa:	4b5a      	ldr	r3, [pc, #360]	@ (8013f64 <mem_malloc+0x280>)
 8013dfc:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 8013e00:	429a      	cmp	r2, r3
 8013e02:	d227      	bcs.n	8013e54 <mem_malloc+0x170>
 8013e04:	4b57      	ldr	r3, [pc, #348]	@ (8013f64 <mem_malloc+0x280>)
 8013e06:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	@ 0xb0
 8013e0a:	4b56      	ldr	r3, [pc, #344]	@ (8013f64 <mem_malloc+0x280>)
 8013e0c:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
 8013e10:	e020      	b.n	8013e54 <mem_malloc+0x170>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8013e12:	697b      	ldr	r3, [r7, #20]
 8013e14:	2201      	movs	r2, #1
 8013e16:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 8013e18:	4b52      	ldr	r3, [pc, #328]	@ (8013f64 <mem_malloc+0x280>)
 8013e1a:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	@ 0xb0
 8013e1e:	697b      	ldr	r3, [r7, #20]
 8013e20:	881b      	ldrh	r3, [r3, #0]
 8013e22:	4413      	add	r3, r2
 8013e24:	b29c      	uxth	r4, r3
 8013e26:	6978      	ldr	r0, [r7, #20]
 8013e28:	f7ff fc0e 	bl	8013648 <mem_to_ptr>
 8013e2c:	4603      	mov	r3, r0
 8013e2e:	1ae3      	subs	r3, r4, r3
 8013e30:	b29a      	uxth	r2, r3
 8013e32:	4b4c      	ldr	r3, [pc, #304]	@ (8013f64 <mem_malloc+0x280>)
 8013e34:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
 8013e38:	4b4a      	ldr	r3, [pc, #296]	@ (8013f64 <mem_malloc+0x280>)
 8013e3a:	f8b3 20b2 	ldrh.w	r2, [r3, #178]	@ 0xb2
 8013e3e:	4b49      	ldr	r3, [pc, #292]	@ (8013f64 <mem_malloc+0x280>)
 8013e40:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 8013e44:	429a      	cmp	r2, r3
 8013e46:	d205      	bcs.n	8013e54 <mem_malloc+0x170>
 8013e48:	4b46      	ldr	r3, [pc, #280]	@ (8013f64 <mem_malloc+0x280>)
 8013e4a:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	@ 0xb0
 8013e4e:	4b45      	ldr	r3, [pc, #276]	@ (8013f64 <mem_malloc+0x280>)
 8013e50:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8013e54:	4b3f      	ldr	r3, [pc, #252]	@ (8013f54 <mem_malloc+0x270>)
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	697a      	ldr	r2, [r7, #20]
 8013e5a:	429a      	cmp	r2, r3
 8013e5c:	d127      	bne.n	8013eae <mem_malloc+0x1ca>
          struct mem *cur = lfree;
 8013e5e:	4b3d      	ldr	r3, [pc, #244]	@ (8013f54 <mem_malloc+0x270>)
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8013e64:	e005      	b.n	8013e72 <mem_malloc+0x18e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8013e66:	69bb      	ldr	r3, [r7, #24]
 8013e68:	881b      	ldrh	r3, [r3, #0]
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	f7ff fbda 	bl	8013624 <ptr_to_mem>
 8013e70:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8013e72:	69bb      	ldr	r3, [r7, #24]
 8013e74:	791b      	ldrb	r3, [r3, #4]
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d004      	beq.n	8013e84 <mem_malloc+0x1a0>
 8013e7a:	4b3b      	ldr	r3, [pc, #236]	@ (8013f68 <mem_malloc+0x284>)
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	69ba      	ldr	r2, [r7, #24]
 8013e80:	429a      	cmp	r2, r3
 8013e82:	d1f0      	bne.n	8013e66 <mem_malloc+0x182>
          }
          lfree = cur;
 8013e84:	4a33      	ldr	r2, [pc, #204]	@ (8013f54 <mem_malloc+0x270>)
 8013e86:	69bb      	ldr	r3, [r7, #24]
 8013e88:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8013e8a:	4b32      	ldr	r3, [pc, #200]	@ (8013f54 <mem_malloc+0x270>)
 8013e8c:	681a      	ldr	r2, [r3, #0]
 8013e8e:	4b36      	ldr	r3, [pc, #216]	@ (8013f68 <mem_malloc+0x284>)
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	429a      	cmp	r2, r3
 8013e94:	d00b      	beq.n	8013eae <mem_malloc+0x1ca>
 8013e96:	4b2f      	ldr	r3, [pc, #188]	@ (8013f54 <mem_malloc+0x270>)
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	791b      	ldrb	r3, [r3, #4]
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d006      	beq.n	8013eae <mem_malloc+0x1ca>
 8013ea0:	4b2d      	ldr	r3, [pc, #180]	@ (8013f58 <mem_malloc+0x274>)
 8013ea2:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8013ea6:	4931      	ldr	r1, [pc, #196]	@ (8013f6c <mem_malloc+0x288>)
 8013ea8:	482d      	ldr	r0, [pc, #180]	@ (8013f60 <mem_malloc+0x27c>)
 8013eaa:	f00d f90b 	bl	80210c4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8013eae:	4828      	ldr	r0, [pc, #160]	@ (8013f50 <mem_malloc+0x26c>)
 8013eb0:	f00b ff33 	bl	801fd1a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8013eb4:	8bba      	ldrh	r2, [r7, #28]
 8013eb6:	697b      	ldr	r3, [r7, #20]
 8013eb8:	4413      	add	r3, r2
 8013eba:	3308      	adds	r3, #8
 8013ebc:	4a2a      	ldr	r2, [pc, #168]	@ (8013f68 <mem_malloc+0x284>)
 8013ebe:	6812      	ldr	r2, [r2, #0]
 8013ec0:	4293      	cmp	r3, r2
 8013ec2:	d906      	bls.n	8013ed2 <mem_malloc+0x1ee>
 8013ec4:	4b24      	ldr	r3, [pc, #144]	@ (8013f58 <mem_malloc+0x274>)
 8013ec6:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8013eca:	4929      	ldr	r1, [pc, #164]	@ (8013f70 <mem_malloc+0x28c>)
 8013ecc:	4824      	ldr	r0, [pc, #144]	@ (8013f60 <mem_malloc+0x27c>)
 8013ece:	f00d f8f9 	bl	80210c4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8013ed2:	697b      	ldr	r3, [r7, #20]
 8013ed4:	f003 0303 	and.w	r3, r3, #3
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d006      	beq.n	8013eea <mem_malloc+0x206>
 8013edc:	4b1e      	ldr	r3, [pc, #120]	@ (8013f58 <mem_malloc+0x274>)
 8013ede:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8013ee2:	4924      	ldr	r1, [pc, #144]	@ (8013f74 <mem_malloc+0x290>)
 8013ee4:	481e      	ldr	r0, [pc, #120]	@ (8013f60 <mem_malloc+0x27c>)
 8013ee6:	f00d f8ed 	bl	80210c4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8013eea:	697b      	ldr	r3, [r7, #20]
 8013eec:	f003 0303 	and.w	r3, r3, #3
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d006      	beq.n	8013f02 <mem_malloc+0x21e>
 8013ef4:	4b18      	ldr	r3, [pc, #96]	@ (8013f58 <mem_malloc+0x274>)
 8013ef6:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8013efa:	491f      	ldr	r1, [pc, #124]	@ (8013f78 <mem_malloc+0x294>)
 8013efc:	4818      	ldr	r0, [pc, #96]	@ (8013f60 <mem_malloc+0x27c>)
 8013efe:	f00d f8e1 	bl	80210c4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8013f02:	697b      	ldr	r3, [r7, #20]
 8013f04:	3308      	adds	r3, #8
 8013f06:	e01f      	b.n	8013f48 <mem_malloc+0x264>
         ptr = ptr_to_mem(ptr)->next) {
 8013f08:	8bfb      	ldrh	r3, [r7, #30]
 8013f0a:	4618      	mov	r0, r3
 8013f0c:	f7ff fb8a 	bl	8013624 <ptr_to_mem>
 8013f10:	4603      	mov	r3, r0
 8013f12:	881b      	ldrh	r3, [r3, #0]
 8013f14:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013f16:	8bfa      	ldrh	r2, [r7, #30]
 8013f18:	8bbb      	ldrh	r3, [r7, #28]
 8013f1a:	f5c3 43a0 	rsb	r3, r3, #20480	@ 0x5000
 8013f1e:	429a      	cmp	r2, r3
 8013f20:	f4ff af0a 	bcc.w	8013d38 <mem_malloc+0x54>
    }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
 8013f24:	4b0f      	ldr	r3, [pc, #60]	@ (8013f64 <mem_malloc+0x280>)
 8013f26:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8013f2a:	3301      	adds	r3, #1
 8013f2c:	b29a      	uxth	r2, r3
 8013f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8013f64 <mem_malloc+0x280>)
 8013f30:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8013f34:	4806      	ldr	r0, [pc, #24]	@ (8013f50 <mem_malloc+0x26c>)
 8013f36:	f00b fef0 	bl	801fd1a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
 8013f3a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8013f3e:	4619      	mov	r1, r3
 8013f40:	480e      	ldr	r0, [pc, #56]	@ (8013f7c <mem_malloc+0x298>)
 8013f42:	f00d f8bf 	bl	80210c4 <iprintf>
  return NULL;
 8013f46:	2300      	movs	r3, #0
}
 8013f48:	4618      	mov	r0, r3
 8013f4a:	3724      	adds	r7, #36	@ 0x24
 8013f4c:	46bd      	mov	sp, r7
 8013f4e:	bd90      	pop	{r4, r7, pc}
 8013f50:	2001f898 	.word	0x2001f898
 8013f54:	2001f89c 	.word	0x2001f89c
 8013f58:	08023278 	.word	0x08023278
 8013f5c:	080234f4 	.word	0x080234f4
 8013f60:	080232a8 	.word	0x080232a8
 8013f64:	20028318 	.word	0x20028318
 8013f68:	2001f894 	.word	0x2001f894
 8013f6c:	08023508 	.word	0x08023508
 8013f70:	08023524 	.word	0x08023524
 8013f74:	08023554 	.word	0x08023554
 8013f78:	08023584 	.word	0x08023584
 8013f7c:	080235a8 	.word	0x080235a8

08013f80 <memp_sanity>:
/**
 * Check that memp-lists don't form a circle, using "Floyd's cycle-finding algorithm".
 */
static int
memp_sanity(const struct memp_desc *desc)
{
 8013f80:	b480      	push	{r7}
 8013f82:	b085      	sub	sp, #20
 8013f84:	af00      	add	r7, sp, #0
 8013f86:	6078      	str	r0, [r7, #4]
  struct memp *t, *h;

  t = *desc->tab;
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	691b      	ldr	r3, [r3, #16]
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	60fb      	str	r3, [r7, #12]
  if (t != NULL) {
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d01c      	beq.n	8013fd0 <memp_sanity+0x50>
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	60bb      	str	r3, [r7, #8]
 8013f9c:	e012      	b.n	8013fc4 <memp_sanity+0x44>
         h = ((h->next != NULL) ? h->next->next : NULL)) {
      if (t == h) {
 8013f9e:	68fa      	ldr	r2, [r7, #12]
 8013fa0:	68bb      	ldr	r3, [r7, #8]
 8013fa2:	429a      	cmp	r2, r3
 8013fa4:	d101      	bne.n	8013faa <memp_sanity+0x2a>
        return 0;
 8013fa6:	2300      	movs	r3, #0
 8013fa8:	e013      	b.n	8013fd2 <memp_sanity+0x52>
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	60fb      	str	r3, [r7, #12]
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 8013fb0:	68bb      	ldr	r3, [r7, #8]
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d003      	beq.n	8013fc0 <memp_sanity+0x40>
 8013fb8:	68bb      	ldr	r3, [r7, #8]
 8013fba:	681b      	ldr	r3, [r3, #0]
 8013fbc:	681b      	ldr	r3, [r3, #0]
 8013fbe:	e000      	b.n	8013fc2 <memp_sanity+0x42>
 8013fc0:	2300      	movs	r3, #0
 8013fc2:	60bb      	str	r3, [r7, #8]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d002      	beq.n	8013fd0 <memp_sanity+0x50>
 8013fca:	68bb      	ldr	r3, [r7, #8]
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d1e6      	bne.n	8013f9e <memp_sanity+0x1e>
      }
    }
  }

  return 1;
 8013fd0:	2301      	movs	r3, #1
}
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	3714      	adds	r7, #20
 8013fd6:	46bd      	mov	sp, r7
 8013fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fdc:	4770      	bx	lr
	...

08013fe0 <memp_overflow_check_element>:
 * @param p the memp element to check
 * @param desc the pool p comes from
 */
static void
memp_overflow_check_element(struct memp *p, const struct memp_desc *desc)
{
 8013fe0:	b580      	push	{r7, lr}
 8013fe2:	b082      	sub	sp, #8
 8013fe4:	af00      	add	r7, sp, #0
 8013fe6:	6078      	str	r0, [r7, #4]
 8013fe8:	6039      	str	r1, [r7, #0]
  mem_overflow_check_raw((u8_t *)p + MEMP_SIZE, desc->size, "pool ", desc->desc);
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	f103 001c 	add.w	r0, r3, #28
 8013ff0:	683b      	ldr	r3, [r7, #0]
 8013ff2:	891b      	ldrh	r3, [r3, #8]
 8013ff4:	4619      	mov	r1, r3
 8013ff6:	683b      	ldr	r3, [r7, #0]
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	4a03      	ldr	r2, [pc, #12]	@ (8014008 <memp_overflow_check_element+0x28>)
 8013ffc:	f7ff fa90 	bl	8013520 <mem_overflow_check_raw>
}
 8014000:	bf00      	nop
 8014002:	3708      	adds	r7, #8
 8014004:	46bd      	mov	sp, r7
 8014006:	bd80      	pop	{r7, pc}
 8014008:	08023698 	.word	0x08023698

0801400c <memp_overflow_init_element>:
/**
 * Initialize the restricted area of on memp element.
 */
static void
memp_overflow_init_element(struct memp *p, const struct memp_desc *desc)
{
 801400c:	b580      	push	{r7, lr}
 801400e:	b082      	sub	sp, #8
 8014010:	af00      	add	r7, sp, #0
 8014012:	6078      	str	r0, [r7, #4]
 8014014:	6039      	str	r1, [r7, #0]
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	f103 021c 	add.w	r2, r3, #28
 801401c:	683b      	ldr	r3, [r7, #0]
 801401e:	891b      	ldrh	r3, [r3, #8]
 8014020:	4619      	mov	r1, r3
 8014022:	4610      	mov	r0, r2
 8014024:	f7ff fae4 	bl	80135f0 <mem_overflow_init_raw>
}
 8014028:	bf00      	nop
 801402a:	3708      	adds	r7, #8
 801402c:	46bd      	mov	sp, r7
 801402e:	bd80      	pop	{r7, pc}

08014030 <memp_overflow_check_all>:
 *
 * @see memp_overflow_check_element for a description of the check
 */
static void
memp_overflow_check_all(void)
{
 8014030:	b580      	push	{r7, lr}
 8014032:	b084      	sub	sp, #16
 8014034:	af00      	add	r7, sp, #0
  u16_t i, j;
  struct memp *p;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8014036:	f00b fe9d 	bl	801fd74 <sys_arch_protect>
 801403a:	6078      	str	r0, [r7, #4]

  for (i = 0; i < MEMP_MAX; ++i) {
 801403c:	2300      	movs	r3, #0
 801403e:	81fb      	strh	r3, [r7, #14]
 8014040:	e02a      	b.n	8014098 <memp_overflow_check_all+0x68>
    p = (struct memp *)LWIP_MEM_ALIGN(memp_pools[i]->base);
 8014042:	89fb      	ldrh	r3, [r7, #14]
 8014044:	4a19      	ldr	r2, [pc, #100]	@ (80140ac <memp_overflow_check_all+0x7c>)
 8014046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801404a:	68db      	ldr	r3, [r3, #12]
 801404c:	3303      	adds	r3, #3
 801404e:	f023 0303 	bic.w	r3, r3, #3
 8014052:	60bb      	str	r3, [r7, #8]
    for (j = 0; j < memp_pools[i]->num; ++j) {
 8014054:	2300      	movs	r3, #0
 8014056:	81bb      	strh	r3, [r7, #12]
 8014058:	e013      	b.n	8014082 <memp_overflow_check_all+0x52>
      memp_overflow_check_element(p, memp_pools[i]);
 801405a:	89fb      	ldrh	r3, [r7, #14]
 801405c:	4a13      	ldr	r2, [pc, #76]	@ (80140ac <memp_overflow_check_all+0x7c>)
 801405e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014062:	4619      	mov	r1, r3
 8014064:	68b8      	ldr	r0, [r7, #8]
 8014066:	f7ff ffbb 	bl	8013fe0 <memp_overflow_check_element>
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 801406a:	89fb      	ldrh	r3, [r7, #14]
 801406c:	4a0f      	ldr	r2, [pc, #60]	@ (80140ac <memp_overflow_check_all+0x7c>)
 801406e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014072:	891b      	ldrh	r3, [r3, #8]
 8014074:	332c      	adds	r3, #44	@ 0x2c
 8014076:	68ba      	ldr	r2, [r7, #8]
 8014078:	4413      	add	r3, r2
 801407a:	60bb      	str	r3, [r7, #8]
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801407c:	89bb      	ldrh	r3, [r7, #12]
 801407e:	3301      	adds	r3, #1
 8014080:	81bb      	strh	r3, [r7, #12]
 8014082:	89fb      	ldrh	r3, [r7, #14]
 8014084:	4a09      	ldr	r2, [pc, #36]	@ (80140ac <memp_overflow_check_all+0x7c>)
 8014086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801408a:	895b      	ldrh	r3, [r3, #10]
 801408c:	89ba      	ldrh	r2, [r7, #12]
 801408e:	429a      	cmp	r2, r3
 8014090:	d3e3      	bcc.n	801405a <memp_overflow_check_all+0x2a>
  for (i = 0; i < MEMP_MAX; ++i) {
 8014092:	89fb      	ldrh	r3, [r7, #14]
 8014094:	3301      	adds	r3, #1
 8014096:	81fb      	strh	r3, [r7, #14]
 8014098:	89fb      	ldrh	r3, [r7, #14]
 801409a:	2b0c      	cmp	r3, #12
 801409c:	d9d1      	bls.n	8014042 <memp_overflow_check_all+0x12>
    }
  }
  SYS_ARCH_UNPROTECT(old_level);
 801409e:	6878      	ldr	r0, [r7, #4]
 80140a0:	f00b fe76 	bl	801fd90 <sys_arch_unprotect>
}
 80140a4:	bf00      	nop
 80140a6:	3710      	adds	r7, #16
 80140a8:	46bd      	mov	sp, r7
 80140aa:	bd80      	pop	{r7, pc}
 80140ac:	080271f0 	.word	0x080271f0

080140b0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80140b0:	b580      	push	{r7, lr}
 80140b2:	b084      	sub	sp, #16
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	691b      	ldr	r3, [r3, #16]
 80140bc:	2200      	movs	r2, #0
 80140be:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	68db      	ldr	r3, [r3, #12]
 80140c4:	3303      	adds	r3, #3
 80140c6:	f023 0303 	bic.w	r3, r3, #3
 80140ca:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80140cc:	2300      	movs	r3, #0
 80140ce:	60fb      	str	r3, [r7, #12]
 80140d0:	e015      	b.n	80140fe <memp_init_pool+0x4e>
    memp->next = *desc->tab;
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	691b      	ldr	r3, [r3, #16]
 80140d6:	681a      	ldr	r2, [r3, #0]
 80140d8:	68bb      	ldr	r3, [r7, #8]
 80140da:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	691b      	ldr	r3, [r3, #16]
 80140e0:	68ba      	ldr	r2, [r7, #8]
 80140e2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
 80140e4:	6879      	ldr	r1, [r7, #4]
 80140e6:	68b8      	ldr	r0, [r7, #8]
 80140e8:	f7ff ff90 	bl	801400c <memp_overflow_init_element>
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	891b      	ldrh	r3, [r3, #8]
#if MEMP_OVERFLOW_CHECK
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
 80140f0:	332c      	adds	r3, #44	@ 0x2c
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80140f2:	68ba      	ldr	r2, [r7, #8]
 80140f4:	4413      	add	r3, r2
 80140f6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	3301      	adds	r3, #1
 80140fc:	60fb      	str	r3, [r7, #12]
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	895b      	ldrh	r3, [r3, #10]
 8014102:	461a      	mov	r2, r3
 8014104:	68fb      	ldr	r3, [r7, #12]
 8014106:	4293      	cmp	r3, r2
 8014108:	dbe3      	blt.n	80140d2 <memp_init_pool+0x22>
#endif
                                  );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	685b      	ldr	r3, [r3, #4]
 801410e:	687a      	ldr	r2, [r7, #4]
 8014110:	8952      	ldrh	r2, [r2, #10]
 8014112:	80da      	strh	r2, [r3, #6]
#endif /* MEMP_STATS */
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	685b      	ldr	r3, [r3, #4]
 8014118:	687a      	ldr	r2, [r7, #4]
 801411a:	6812      	ldr	r2, [r2, #0]
 801411c:	601a      	str	r2, [r3, #0]
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801411e:	bf00      	nop
 8014120:	3710      	adds	r7, #16
 8014122:	46bd      	mov	sp, r7
 8014124:	bd80      	pop	{r7, pc}
	...

08014128 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8014128:	b580      	push	{r7, lr}
 801412a:	b082      	sub	sp, #8
 801412c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801412e:	2300      	movs	r3, #0
 8014130:	80fb      	strh	r3, [r7, #6]
 8014132:	e013      	b.n	801415c <memp_init+0x34>
    memp_init_pool(memp_pools[i]);
 8014134:	88fb      	ldrh	r3, [r7, #6]
 8014136:	4a0e      	ldr	r2, [pc, #56]	@ (8014170 <memp_init+0x48>)
 8014138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801413c:	4618      	mov	r0, r3
 801413e:	f7ff ffb7 	bl	80140b0 <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
 8014142:	88fb      	ldrh	r3, [r7, #6]
 8014144:	4a0a      	ldr	r2, [pc, #40]	@ (8014170 <memp_init+0x48>)
 8014146:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801414a:	88fb      	ldrh	r3, [r7, #6]
 801414c:	6852      	ldr	r2, [r2, #4]
 801414e:	4909      	ldr	r1, [pc, #36]	@ (8014174 <memp_init+0x4c>)
 8014150:	332e      	adds	r3, #46	@ 0x2e
 8014152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8014156:	88fb      	ldrh	r3, [r7, #6]
 8014158:	3301      	adds	r3, #1
 801415a:	80fb      	strh	r3, [r7, #6]
 801415c:	88fb      	ldrh	r3, [r7, #6]
 801415e:	2b0c      	cmp	r3, #12
 8014160:	d9e8      	bls.n	8014134 <memp_init+0xc>
#endif
  }

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
 8014162:	f7ff ff65 	bl	8014030 <memp_overflow_check_all>
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8014166:	bf00      	nop
 8014168:	3708      	adds	r7, #8
 801416a:	46bd      	mov	sp, r7
 801416c:	bd80      	pop	{r7, pc}
 801416e:	bf00      	nop
 8014170:	080271f0 	.word	0x080271f0
 8014174:	20028318 	.word	0x20028318

08014178 <do_memp_malloc_pool_fn>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8014178:	b580      	push	{r7, lr}
 801417a:	b086      	sub	sp, #24
 801417c:	af00      	add	r7, sp, #0
 801417e:	60f8      	str	r0, [r7, #12]
 8014180:	60b9      	str	r1, [r7, #8]
 8014182:	607a      	str	r2, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8014184:	f00b fdf6 	bl	801fd74 <sys_arch_protect>
 8014188:	6178      	str	r0, [r7, #20]

  memp = *desc->tab;
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	691b      	ldr	r3, [r3, #16]
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	613b      	str	r3, [r7, #16]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8014192:	693b      	ldr	r3, [r7, #16]
 8014194:	2b00      	cmp	r3, #0
 8014196:	d033      	beq.n	8014200 <do_memp_malloc_pool_fn+0x88>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	691b      	ldr	r3, [r3, #16]
 801419c:	693a      	ldr	r2, [r7, #16]
 801419e:	6812      	ldr	r2, [r2, #0]
 80141a0:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp->next = NULL;
 80141a2:	693b      	ldr	r3, [r7, #16]
 80141a4:	2200      	movs	r2, #0
 80141a6:	601a      	str	r2, [r3, #0]
#endif /* MEMP_OVERFLOW_CHECK */
#endif /* !MEMP_MEM_MALLOC */
#if MEMP_OVERFLOW_CHECK
    memp->file = file;
 80141a8:	693b      	ldr	r3, [r7, #16]
 80141aa:	68ba      	ldr	r2, [r7, #8]
 80141ac:	605a      	str	r2, [r3, #4]
    memp->line = line;
 80141ae:	693b      	ldr	r3, [r7, #16]
 80141b0:	687a      	ldr	r2, [r7, #4]
 80141b2:	609a      	str	r2, [r3, #8]
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80141b4:	693b      	ldr	r3, [r7, #16]
 80141b6:	f003 0303 	and.w	r3, r3, #3
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d006      	beq.n	80141cc <do_memp_malloc_pool_fn+0x54>
 80141be:	4b1a      	ldr	r3, [pc, #104]	@ (8014228 <do_memp_malloc_pool_fn+0xb0>)
 80141c0:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80141c4:	4919      	ldr	r1, [pc, #100]	@ (801422c <do_memp_malloc_pool_fn+0xb4>)
 80141c6:	481a      	ldr	r0, [pc, #104]	@ (8014230 <do_memp_malloc_pool_fn+0xb8>)
 80141c8:	f00c ff7c 	bl	80210c4 <iprintf>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	685b      	ldr	r3, [r3, #4]
 80141d0:	891a      	ldrh	r2, [r3, #8]
 80141d2:	3201      	adds	r2, #1
 80141d4:	b292      	uxth	r2, r2
 80141d6:	811a      	strh	r2, [r3, #8]
    if (desc->stats->used > desc->stats->max) {
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	685b      	ldr	r3, [r3, #4]
 80141dc:	891a      	ldrh	r2, [r3, #8]
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	685b      	ldr	r3, [r3, #4]
 80141e2:	895b      	ldrh	r3, [r3, #10]
 80141e4:	429a      	cmp	r2, r3
 80141e6:	d905      	bls.n	80141f4 <do_memp_malloc_pool_fn+0x7c>
      desc->stats->max = desc->stats->used;
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	685a      	ldr	r2, [r3, #4]
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	685b      	ldr	r3, [r3, #4]
 80141f0:	8912      	ldrh	r2, [r2, #8]
 80141f2:	815a      	strh	r2, [r3, #10]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80141f4:	6978      	ldr	r0, [r7, #20]
 80141f6:	f00b fdcb 	bl	801fd90 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80141fa:	693b      	ldr	r3, [r7, #16]
 80141fc:	331c      	adds	r3, #28
 80141fe:	e00f      	b.n	8014220 <do_memp_malloc_pool_fn+0xa8>
  } else {
#if MEMP_STATS
    desc->stats->err++;
 8014200:	68fb      	ldr	r3, [r7, #12]
 8014202:	685b      	ldr	r3, [r3, #4]
 8014204:	889a      	ldrh	r2, [r3, #4]
 8014206:	3201      	adds	r2, #1
 8014208:	b292      	uxth	r2, r2
 801420a:	809a      	strh	r2, [r3, #4]
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801420c:	6978      	ldr	r0, [r7, #20]
 801420e:	f00b fdbf 	bl	801fd90 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	4619      	mov	r1, r3
 8014218:	4806      	ldr	r0, [pc, #24]	@ (8014234 <do_memp_malloc_pool_fn+0xbc>)
 801421a:	f00c ff53 	bl	80210c4 <iprintf>
  }

  return NULL;
 801421e:	2300      	movs	r3, #0
}
 8014220:	4618      	mov	r0, r3
 8014222:	3718      	adds	r7, #24
 8014224:	46bd      	mov	sp, r7
 8014226:	bd80      	pop	{r7, pc}
 8014228:	080236a0 	.word	0x080236a0
 801422c:	080236d0 	.word	0x080236d0
 8014230:	080236f4 	.word	0x080236f4
 8014234:	0802371c 	.word	0x0802371c

08014238 <memp_malloc_pool_fn>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8014238:	b580      	push	{r7, lr}
 801423a:	b084      	sub	sp, #16
 801423c:	af00      	add	r7, sp, #0
 801423e:	60f8      	str	r0, [r7, #12]
 8014240:	60b9      	str	r1, [r7, #8]
 8014242:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	2b00      	cmp	r3, #0
 8014248:	d106      	bne.n	8014258 <memp_malloc_pool_fn+0x20>
 801424a:	4b0b      	ldr	r3, [pc, #44]	@ (8014278 <memp_malloc_pool_fn+0x40>)
 801424c:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8014250:	490a      	ldr	r1, [pc, #40]	@ (801427c <memp_malloc_pool_fn+0x44>)
 8014252:	480b      	ldr	r0, [pc, #44]	@ (8014280 <memp_malloc_pool_fn+0x48>)
 8014254:	f00c ff36 	bl	80210c4 <iprintf>
  if (desc == NULL) {
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	2b00      	cmp	r3, #0
 801425c:	d101      	bne.n	8014262 <memp_malloc_pool_fn+0x2a>
    return NULL;
 801425e:	2300      	movs	r3, #0
 8014260:	e005      	b.n	801426e <memp_malloc_pool_fn+0x36>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
#else
  return do_memp_malloc_pool_fn(desc, file, line);
 8014262:	687a      	ldr	r2, [r7, #4]
 8014264:	68b9      	ldr	r1, [r7, #8]
 8014266:	68f8      	ldr	r0, [r7, #12]
 8014268:	f7ff ff86 	bl	8014178 <do_memp_malloc_pool_fn>
 801426c:	4603      	mov	r3, r0
#endif
}
 801426e:	4618      	mov	r0, r3
 8014270:	3710      	adds	r7, #16
 8014272:	46bd      	mov	sp, r7
 8014274:	bd80      	pop	{r7, pc}
 8014276:	bf00      	nop
 8014278:	080236a0 	.word	0x080236a0
 801427c:	08023744 	.word	0x08023744
 8014280:	080236f4 	.word	0x080236f4

08014284 <memp_malloc_fn>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8014284:	b580      	push	{r7, lr}
 8014286:	b086      	sub	sp, #24
 8014288:	af00      	add	r7, sp, #0
 801428a:	4603      	mov	r3, r0
 801428c:	60b9      	str	r1, [r7, #8]
 801428e:	607a      	str	r2, [r7, #4]
 8014290:	73fb      	strb	r3, [r7, #15]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8014292:	7bfb      	ldrb	r3, [r7, #15]
 8014294:	2b0c      	cmp	r3, #12
 8014296:	d908      	bls.n	80142aa <memp_malloc_fn+0x26>
 8014298:	4b0c      	ldr	r3, [pc, #48]	@ (80142cc <memp_malloc_fn+0x48>)
 801429a:	f240 1257 	movw	r2, #343	@ 0x157
 801429e:	490c      	ldr	r1, [pc, #48]	@ (80142d0 <memp_malloc_fn+0x4c>)
 80142a0:	480c      	ldr	r0, [pc, #48]	@ (80142d4 <memp_malloc_fn+0x50>)
 80142a2:	f00c ff0f 	bl	80210c4 <iprintf>
 80142a6:	2300      	movs	r3, #0
 80142a8:	e00c      	b.n	80142c4 <memp_malloc_fn+0x40>

#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
 80142aa:	f7ff fec1 	bl	8014030 <memp_overflow_check_all>
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
 80142ae:	7bfb      	ldrb	r3, [r7, #15]
 80142b0:	4a09      	ldr	r2, [pc, #36]	@ (80142d8 <memp_malloc_fn+0x54>)
 80142b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80142b6:	687a      	ldr	r2, [r7, #4]
 80142b8:	68b9      	ldr	r1, [r7, #8]
 80142ba:	4618      	mov	r0, r3
 80142bc:	f7ff ff5c 	bl	8014178 <do_memp_malloc_pool_fn>
 80142c0:	6178      	str	r0, [r7, #20]
#endif

  return memp;
 80142c2:	697b      	ldr	r3, [r7, #20]
}
 80142c4:	4618      	mov	r0, r3
 80142c6:	3718      	adds	r7, #24
 80142c8:	46bd      	mov	sp, r7
 80142ca:	bd80      	pop	{r7, pc}
 80142cc:	080236a0 	.word	0x080236a0
 80142d0:	08023758 	.word	0x08023758
 80142d4:	080236f4 	.word	0x080236f4
 80142d8:	080271f0 	.word	0x080271f0

080142dc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80142dc:	b580      	push	{r7, lr}
 80142de:	b084      	sub	sp, #16
 80142e0:	af00      	add	r7, sp, #0
 80142e2:	6078      	str	r0, [r7, #4]
 80142e4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80142e6:	683b      	ldr	r3, [r7, #0]
 80142e8:	f003 0303 	and.w	r3, r3, #3
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d006      	beq.n	80142fe <do_memp_free_pool+0x22>
 80142f0:	4b17      	ldr	r3, [pc, #92]	@ (8014350 <do_memp_free_pool+0x74>)
 80142f2:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 80142f6:	4917      	ldr	r1, [pc, #92]	@ (8014354 <do_memp_free_pool+0x78>)
 80142f8:	4817      	ldr	r0, [pc, #92]	@ (8014358 <do_memp_free_pool+0x7c>)
 80142fa:	f00c fee3 	bl	80210c4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80142fe:	683b      	ldr	r3, [r7, #0]
 8014300:	3b1c      	subs	r3, #28
 8014302:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8014304:	f00b fd36 	bl	801fd74 <sys_arch_protect>
 8014308:	60b8      	str	r0, [r7, #8]
#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	685b      	ldr	r3, [r3, #4]
 801430e:	891a      	ldrh	r2, [r3, #8]
 8014310:	3a01      	subs	r2, #1
 8014312:	b292      	uxth	r2, r2
 8014314:	811a      	strh	r2, [r3, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	691b      	ldr	r3, [r3, #16]
 801431a:	681a      	ldr	r2, [r3, #0]
 801431c:	68fb      	ldr	r3, [r7, #12]
 801431e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	691b      	ldr	r3, [r3, #16]
 8014324:	68fa      	ldr	r2, [r7, #12]
 8014326:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
 8014328:	6878      	ldr	r0, [r7, #4]
 801432a:	f7ff fe29 	bl	8013f80 <memp_sanity>
 801432e:	4603      	mov	r3, r0
 8014330:	2b00      	cmp	r3, #0
 8014332:	d106      	bne.n	8014342 <do_memp_free_pool+0x66>
 8014334:	4b06      	ldr	r3, [pc, #24]	@ (8014350 <do_memp_free_pool+0x74>)
 8014336:	f240 1285 	movw	r2, #389	@ 0x185
 801433a:	4908      	ldr	r1, [pc, #32]	@ (801435c <do_memp_free_pool+0x80>)
 801433c:	4806      	ldr	r0, [pc, #24]	@ (8014358 <do_memp_free_pool+0x7c>)
 801433e:	f00c fec1 	bl	80210c4 <iprintf>
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8014342:	68b8      	ldr	r0, [r7, #8]
 8014344:	f00b fd24 	bl	801fd90 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8014348:	bf00      	nop
 801434a:	3710      	adds	r7, #16
 801434c:	46bd      	mov	sp, r7
 801434e:	bd80      	pop	{r7, pc}
 8014350:	080236a0 	.word	0x080236a0
 8014354:	08023778 	.word	0x08023778
 8014358:	080236f4 	.word	0x080236f4
 801435c:	08023798 	.word	0x08023798

08014360 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8014360:	b580      	push	{r7, lr}
 8014362:	b082      	sub	sp, #8
 8014364:	af00      	add	r7, sp, #0
 8014366:	6078      	str	r0, [r7, #4]
 8014368:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	2b00      	cmp	r3, #0
 801436e:	d106      	bne.n	801437e <memp_free_pool+0x1e>
 8014370:	4b0a      	ldr	r3, [pc, #40]	@ (801439c <memp_free_pool+0x3c>)
 8014372:	f240 1295 	movw	r2, #405	@ 0x195
 8014376:	490a      	ldr	r1, [pc, #40]	@ (80143a0 <memp_free_pool+0x40>)
 8014378:	480a      	ldr	r0, [pc, #40]	@ (80143a4 <memp_free_pool+0x44>)
 801437a:	f00c fea3 	bl	80210c4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	2b00      	cmp	r3, #0
 8014382:	d007      	beq.n	8014394 <memp_free_pool+0x34>
 8014384:	683b      	ldr	r3, [r7, #0]
 8014386:	2b00      	cmp	r3, #0
 8014388:	d004      	beq.n	8014394 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 801438a:	6839      	ldr	r1, [r7, #0]
 801438c:	6878      	ldr	r0, [r7, #4]
 801438e:	f7ff ffa5 	bl	80142dc <do_memp_free_pool>
 8014392:	e000      	b.n	8014396 <memp_free_pool+0x36>
    return;
 8014394:	bf00      	nop
}
 8014396:	3708      	adds	r7, #8
 8014398:	46bd      	mov	sp, r7
 801439a:	bd80      	pop	{r7, pc}
 801439c:	080236a0 	.word	0x080236a0
 80143a0:	08023744 	.word	0x08023744
 80143a4:	080236f4 	.word	0x080236f4

080143a8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80143a8:	b580      	push	{r7, lr}
 80143aa:	b082      	sub	sp, #8
 80143ac:	af00      	add	r7, sp, #0
 80143ae:	4603      	mov	r3, r0
 80143b0:	6039      	str	r1, [r7, #0]
 80143b2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80143b4:	79fb      	ldrb	r3, [r7, #7]
 80143b6:	2b0c      	cmp	r3, #12
 80143b8:	d907      	bls.n	80143ca <memp_free+0x22>
 80143ba:	4b0d      	ldr	r3, [pc, #52]	@ (80143f0 <memp_free+0x48>)
 80143bc:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 80143c0:	490c      	ldr	r1, [pc, #48]	@ (80143f4 <memp_free+0x4c>)
 80143c2:	480d      	ldr	r0, [pc, #52]	@ (80143f8 <memp_free+0x50>)
 80143c4:	f00c fe7e 	bl	80210c4 <iprintf>
 80143c8:	e00e      	b.n	80143e8 <memp_free+0x40>

  if (mem == NULL) {
 80143ca:	683b      	ldr	r3, [r7, #0]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d00a      	beq.n	80143e6 <memp_free+0x3e>
    return;
  }

#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
 80143d0:	f7ff fe2e 	bl	8014030 <memp_overflow_check_all>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80143d4:	79fb      	ldrb	r3, [r7, #7]
 80143d6:	4a09      	ldr	r2, [pc, #36]	@ (80143fc <memp_free+0x54>)
 80143d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80143dc:	6839      	ldr	r1, [r7, #0]
 80143de:	4618      	mov	r0, r3
 80143e0:	f7ff ff7c 	bl	80142dc <do_memp_free_pool>
 80143e4:	e000      	b.n	80143e8 <memp_free+0x40>
    return;
 80143e6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80143e8:	3708      	adds	r7, #8
 80143ea:	46bd      	mov	sp, r7
 80143ec:	bd80      	pop	{r7, pc}
 80143ee:	bf00      	nop
 80143f0:	080236a0 	.word	0x080236a0
 80143f4:	080237a4 	.word	0x080237a4
 80143f8:	080236f4 	.word	0x080236f4
 80143fc:	080271f0 	.word	0x080271f0

08014400 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8014400:	b480      	push	{r7}
 8014402:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8014404:	bf00      	nop
 8014406:	46bd      	mov	sp, r7
 8014408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801440c:	4770      	bx	lr
	...

08014410 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8014410:	b580      	push	{r7, lr}
 8014412:	b088      	sub	sp, #32
 8014414:	af02      	add	r7, sp, #8
 8014416:	60f8      	str	r0, [r7, #12]
 8014418:	60b9      	str	r1, [r7, #8]
 801441a:	607a      	str	r2, [r7, #4]
 801441c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801441e:	68fb      	ldr	r3, [r7, #12]
 8014420:	2b00      	cmp	r3, #0
 8014422:	d108      	bne.n	8014436 <netif_add+0x26>
 8014424:	4b96      	ldr	r3, [pc, #600]	@ (8014680 <netif_add+0x270>)
 8014426:	f240 1227 	movw	r2, #295	@ 0x127
 801442a:	4996      	ldr	r1, [pc, #600]	@ (8014684 <netif_add+0x274>)
 801442c:	4896      	ldr	r0, [pc, #600]	@ (8014688 <netif_add+0x278>)
 801442e:	f00c fe49 	bl	80210c4 <iprintf>
 8014432:	2300      	movs	r3, #0
 8014434:	e14c      	b.n	80146d0 <netif_add+0x2c0>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8014436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014438:	2b00      	cmp	r3, #0
 801443a:	d108      	bne.n	801444e <netif_add+0x3e>
 801443c:	4b90      	ldr	r3, [pc, #576]	@ (8014680 <netif_add+0x270>)
 801443e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8014442:	4992      	ldr	r1, [pc, #584]	@ (801468c <netif_add+0x27c>)
 8014444:	4890      	ldr	r0, [pc, #576]	@ (8014688 <netif_add+0x278>)
 8014446:	f00c fe3d 	bl	80210c4 <iprintf>
 801444a:	2300      	movs	r3, #0
 801444c:	e140      	b.n	80146d0 <netif_add+0x2c0>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801444e:	68bb      	ldr	r3, [r7, #8]
 8014450:	2b00      	cmp	r3, #0
 8014452:	d101      	bne.n	8014458 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8014454:	4b8e      	ldr	r3, [pc, #568]	@ (8014690 <netif_add+0x280>)
 8014456:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	2b00      	cmp	r3, #0
 801445c:	d101      	bne.n	8014462 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801445e:	4b8c      	ldr	r3, [pc, #560]	@ (8014690 <netif_add+0x280>)
 8014460:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8014462:	683b      	ldr	r3, [r7, #0]
 8014464:	2b00      	cmp	r3, #0
 8014466:	d101      	bne.n	801446c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8014468:	4b89      	ldr	r3, [pc, #548]	@ (8014690 <netif_add+0x280>)
 801446a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	2200      	movs	r2, #0
 8014470:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	2200      	movs	r2, #0
 8014476:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8014478:	68fb      	ldr	r3, [r7, #12]
 801447a:	2200      	movs	r2, #0
 801447c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801447e:	68fb      	ldr	r3, [r7, #12]
 8014480:	4a84      	ldr	r2, [pc, #528]	@ (8014694 <netif_add+0x284>)
 8014482:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	2200      	movs	r2, #0
 8014488:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	2200      	movs	r2, #0
 801448e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8014492:	68fb      	ldr	r3, [r7, #12]
 8014494:	2200      	movs	r2, #0
 8014496:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	6a3a      	ldr	r2, [r7, #32]
 801449c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 801449e:	4b7e      	ldr	r3, [pc, #504]	@ (8014698 <netif_add+0x288>)
 80144a0:	781a      	ldrb	r2, [r3, #0]
 80144a2:	68fb      	ldr	r3, [r7, #12]
 80144a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 80144a8:	68fb      	ldr	r3, [r7, #12]
 80144aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80144ac:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80144ae:	683b      	ldr	r3, [r7, #0]
 80144b0:	687a      	ldr	r2, [r7, #4]
 80144b2:	68b9      	ldr	r1, [r7, #8]
 80144b4:	68f8      	ldr	r0, [r7, #12]
 80144b6:	f000 f9f5 	bl	80148a4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80144ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144bc:	68f8      	ldr	r0, [r7, #12]
 80144be:	4798      	blx	r3
 80144c0:	4603      	mov	r3, r0
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d001      	beq.n	80144ca <netif_add+0xba>
    return NULL;
 80144c6:	2300      	movs	r3, #0
 80144c8:	e102      	b.n	80146d0 <netif_add+0x2c0>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80144d0:	2bff      	cmp	r3, #255	@ 0xff
 80144d2:	d103      	bne.n	80144dc <netif_add+0xcc>
        netif->num = 0;
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	2200      	movs	r2, #0
 80144d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 80144dc:	2300      	movs	r3, #0
 80144de:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80144e0:	4b6e      	ldr	r3, [pc, #440]	@ (801469c <netif_add+0x28c>)
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	617b      	str	r3, [r7, #20]
 80144e6:	e02b      	b.n	8014540 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80144e8:	697a      	ldr	r2, [r7, #20]
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	429a      	cmp	r2, r3
 80144ee:	d106      	bne.n	80144fe <netif_add+0xee>
 80144f0:	4b63      	ldr	r3, [pc, #396]	@ (8014680 <netif_add+0x270>)
 80144f2:	f240 128b 	movw	r2, #395	@ 0x18b
 80144f6:	496a      	ldr	r1, [pc, #424]	@ (80146a0 <netif_add+0x290>)
 80144f8:	4863      	ldr	r0, [pc, #396]	@ (8014688 <netif_add+0x278>)
 80144fa:	f00c fde3 	bl	80210c4 <iprintf>
        num_netifs++;
 80144fe:	693b      	ldr	r3, [r7, #16]
 8014500:	3301      	adds	r3, #1
 8014502:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8014504:	693b      	ldr	r3, [r7, #16]
 8014506:	2bff      	cmp	r3, #255	@ 0xff
 8014508:	dd06      	ble.n	8014518 <netif_add+0x108>
 801450a:	4b5d      	ldr	r3, [pc, #372]	@ (8014680 <netif_add+0x270>)
 801450c:	f240 128d 	movw	r2, #397	@ 0x18d
 8014510:	4964      	ldr	r1, [pc, #400]	@ (80146a4 <netif_add+0x294>)
 8014512:	485d      	ldr	r0, [pc, #372]	@ (8014688 <netif_add+0x278>)
 8014514:	f00c fdd6 	bl	80210c4 <iprintf>
        if (netif2->num == netif->num) {
 8014518:	697b      	ldr	r3, [r7, #20]
 801451a:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 801451e:	68fb      	ldr	r3, [r7, #12]
 8014520:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014524:	429a      	cmp	r2, r3
 8014526:	d108      	bne.n	801453a <netif_add+0x12a>
          netif->num++;
 8014528:	68fb      	ldr	r3, [r7, #12]
 801452a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801452e:	3301      	adds	r3, #1
 8014530:	b2da      	uxtb	r2, r3
 8014532:	68fb      	ldr	r3, [r7, #12]
 8014534:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8014538:	e005      	b.n	8014546 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801453a:	697b      	ldr	r3, [r7, #20]
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	617b      	str	r3, [r7, #20]
 8014540:	697b      	ldr	r3, [r7, #20]
 8014542:	2b00      	cmp	r3, #0
 8014544:	d1d0      	bne.n	80144e8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8014546:	697b      	ldr	r3, [r7, #20]
 8014548:	2b00      	cmp	r3, #0
 801454a:	d1be      	bne.n	80144ca <netif_add+0xba>
  }
  if (netif->num == 254) {
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014552:	2bfe      	cmp	r3, #254	@ 0xfe
 8014554:	d103      	bne.n	801455e <netif_add+0x14e>
    netif_num = 0;
 8014556:	4b50      	ldr	r3, [pc, #320]	@ (8014698 <netif_add+0x288>)
 8014558:	2200      	movs	r2, #0
 801455a:	701a      	strb	r2, [r3, #0]
 801455c:	e006      	b.n	801456c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014564:	3301      	adds	r3, #1
 8014566:	b2da      	uxtb	r2, r3
 8014568:	4b4b      	ldr	r3, [pc, #300]	@ (8014698 <netif_add+0x288>)
 801456a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801456c:	4b4b      	ldr	r3, [pc, #300]	@ (801469c <netif_add+0x28c>)
 801456e:	681a      	ldr	r2, [r3, #0]
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8014574:	4a49      	ldr	r2, [pc, #292]	@ (801469c <netif_add+0x28c>)
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	6013      	str	r3, [r2, #0]
  if (netif->flags & NETIF_FLAG_IGMP) {
    igmp_start(netif);
  }
#endif /* LWIP_IGMP */

  LWIP_DEBUGF(NETIF_DEBUG, ("netif: added interface %c%c IP",
 801457a:	68fb      	ldr	r3, [r7, #12]
 801457c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8014580:	4619      	mov	r1, r3
 8014582:	68fb      	ldr	r3, [r7, #12]
 8014584:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8014588:	461a      	mov	r2, r3
 801458a:	4847      	ldr	r0, [pc, #284]	@ (80146a8 <netif_add+0x298>)
 801458c:	f00c fd9a 	bl	80210c4 <iprintf>
                            netif->name[0], netif->name[1]));
#if LWIP_IPV4
  LWIP_DEBUGF(NETIF_DEBUG, (" addr "));
 8014590:	4846      	ldr	r0, [pc, #280]	@ (80146ac <netif_add+0x29c>)
 8014592:	f00c fd97 	bl	80210c4 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, ipaddr);
 8014596:	68bb      	ldr	r3, [r7, #8]
 8014598:	2b00      	cmp	r3, #0
 801459a:	d003      	beq.n	80145a4 <netif_add+0x194>
 801459c:	68bb      	ldr	r3, [r7, #8]
 801459e:	781b      	ldrb	r3, [r3, #0]
 80145a0:	4619      	mov	r1, r3
 80145a2:	e000      	b.n	80145a6 <netif_add+0x196>
 80145a4:	2100      	movs	r1, #0
 80145a6:	68bb      	ldr	r3, [r7, #8]
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d004      	beq.n	80145b6 <netif_add+0x1a6>
 80145ac:	68bb      	ldr	r3, [r7, #8]
 80145ae:	3301      	adds	r3, #1
 80145b0:	781b      	ldrb	r3, [r3, #0]
 80145b2:	461a      	mov	r2, r3
 80145b4:	e000      	b.n	80145b8 <netif_add+0x1a8>
 80145b6:	2200      	movs	r2, #0
 80145b8:	68bb      	ldr	r3, [r7, #8]
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d004      	beq.n	80145c8 <netif_add+0x1b8>
 80145be:	68bb      	ldr	r3, [r7, #8]
 80145c0:	3302      	adds	r3, #2
 80145c2:	781b      	ldrb	r3, [r3, #0]
 80145c4:	4618      	mov	r0, r3
 80145c6:	e000      	b.n	80145ca <netif_add+0x1ba>
 80145c8:	2000      	movs	r0, #0
 80145ca:	68bb      	ldr	r3, [r7, #8]
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d003      	beq.n	80145d8 <netif_add+0x1c8>
 80145d0:	68bb      	ldr	r3, [r7, #8]
 80145d2:	3303      	adds	r3, #3
 80145d4:	781b      	ldrb	r3, [r3, #0]
 80145d6:	e000      	b.n	80145da <netif_add+0x1ca>
 80145d8:	2300      	movs	r3, #0
 80145da:	9300      	str	r3, [sp, #0]
 80145dc:	4603      	mov	r3, r0
 80145de:	4834      	ldr	r0, [pc, #208]	@ (80146b0 <netif_add+0x2a0>)
 80145e0:	f00c fd70 	bl	80210c4 <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
 80145e4:	4833      	ldr	r0, [pc, #204]	@ (80146b4 <netif_add+0x2a4>)
 80145e6:	f00c fd6d 	bl	80210c4 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d003      	beq.n	80145f8 <netif_add+0x1e8>
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	781b      	ldrb	r3, [r3, #0]
 80145f4:	4619      	mov	r1, r3
 80145f6:	e000      	b.n	80145fa <netif_add+0x1ea>
 80145f8:	2100      	movs	r1, #0
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d004      	beq.n	801460a <netif_add+0x1fa>
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	3301      	adds	r3, #1
 8014604:	781b      	ldrb	r3, [r3, #0]
 8014606:	461a      	mov	r2, r3
 8014608:	e000      	b.n	801460c <netif_add+0x1fc>
 801460a:	2200      	movs	r2, #0
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	2b00      	cmp	r3, #0
 8014610:	d004      	beq.n	801461c <netif_add+0x20c>
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	3302      	adds	r3, #2
 8014616:	781b      	ldrb	r3, [r3, #0]
 8014618:	4618      	mov	r0, r3
 801461a:	e000      	b.n	801461e <netif_add+0x20e>
 801461c:	2000      	movs	r0, #0
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	2b00      	cmp	r3, #0
 8014622:	d003      	beq.n	801462c <netif_add+0x21c>
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	3303      	adds	r3, #3
 8014628:	781b      	ldrb	r3, [r3, #0]
 801462a:	e000      	b.n	801462e <netif_add+0x21e>
 801462c:	2300      	movs	r3, #0
 801462e:	9300      	str	r3, [sp, #0]
 8014630:	4603      	mov	r3, r0
 8014632:	481f      	ldr	r0, [pc, #124]	@ (80146b0 <netif_add+0x2a0>)
 8014634:	f00c fd46 	bl	80210c4 <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
 8014638:	481f      	ldr	r0, [pc, #124]	@ (80146b8 <netif_add+0x2a8>)
 801463a:	f00c fd43 	bl	80210c4 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, gw);
 801463e:	683b      	ldr	r3, [r7, #0]
 8014640:	2b00      	cmp	r3, #0
 8014642:	d003      	beq.n	801464c <netif_add+0x23c>
 8014644:	683b      	ldr	r3, [r7, #0]
 8014646:	781b      	ldrb	r3, [r3, #0]
 8014648:	4619      	mov	r1, r3
 801464a:	e000      	b.n	801464e <netif_add+0x23e>
 801464c:	2100      	movs	r1, #0
 801464e:	683b      	ldr	r3, [r7, #0]
 8014650:	2b00      	cmp	r3, #0
 8014652:	d004      	beq.n	801465e <netif_add+0x24e>
 8014654:	683b      	ldr	r3, [r7, #0]
 8014656:	3301      	adds	r3, #1
 8014658:	781b      	ldrb	r3, [r3, #0]
 801465a:	461a      	mov	r2, r3
 801465c:	e000      	b.n	8014660 <netif_add+0x250>
 801465e:	2200      	movs	r2, #0
 8014660:	683b      	ldr	r3, [r7, #0]
 8014662:	2b00      	cmp	r3, #0
 8014664:	d004      	beq.n	8014670 <netif_add+0x260>
 8014666:	683b      	ldr	r3, [r7, #0]
 8014668:	3302      	adds	r3, #2
 801466a:	781b      	ldrb	r3, [r3, #0]
 801466c:	4618      	mov	r0, r3
 801466e:	e000      	b.n	8014672 <netif_add+0x262>
 8014670:	2000      	movs	r0, #0
 8014672:	683b      	ldr	r3, [r7, #0]
 8014674:	2b00      	cmp	r3, #0
 8014676:	d021      	beq.n	80146bc <netif_add+0x2ac>
 8014678:	683b      	ldr	r3, [r7, #0]
 801467a:	3303      	adds	r3, #3
 801467c:	781b      	ldrb	r3, [r3, #0]
 801467e:	e01e      	b.n	80146be <netif_add+0x2ae>
 8014680:	080237c0 	.word	0x080237c0
 8014684:	08023854 	.word	0x08023854
 8014688:	08023810 	.word	0x08023810
 801468c:	08023870 	.word	0x08023870
 8014690:	08027264 	.word	0x08027264
 8014694:	08014ba7 	.word	0x08014ba7
 8014698:	20028314 	.word	0x20028314
 801469c:	2002830c 	.word	0x2002830c
 80146a0:	08023894 	.word	0x08023894
 80146a4:	080238a8 	.word	0x080238a8
 80146a8:	080238d8 	.word	0x080238d8
 80146ac:	080238f8 	.word	0x080238f8
 80146b0:	08023900 	.word	0x08023900
 80146b4:	08023910 	.word	0x08023910
 80146b8:	0802391c 	.word	0x0802391c
 80146bc:	2300      	movs	r3, #0
 80146be:	9300      	str	r3, [sp, #0]
 80146c0:	4603      	mov	r3, r0
 80146c2:	4805      	ldr	r0, [pc, #20]	@ (80146d8 <netif_add+0x2c8>)
 80146c4:	f00c fcfe 	bl	80210c4 <iprintf>
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
 80146c8:	200a      	movs	r0, #10
 80146ca:	f00c fd0d 	bl	80210e8 <putchar>

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80146ce:	68fb      	ldr	r3, [r7, #12]
}
 80146d0:	4618      	mov	r0, r3
 80146d2:	3718      	adds	r7, #24
 80146d4:	46bd      	mov	sp, r7
 80146d6:	bd80      	pop	{r7, pc}
 80146d8:	08023900 	.word	0x08023900

080146dc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80146dc:	b580      	push	{r7, lr}
 80146de:	b082      	sub	sp, #8
 80146e0:	af00      	add	r7, sp, #0
 80146e2:	6078      	str	r0, [r7, #4]
 80146e4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80146e6:	6839      	ldr	r1, [r7, #0]
 80146e8:	6878      	ldr	r0, [r7, #4]
 80146ea:	f003 f835 	bl	8017758 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80146ee:	6839      	ldr	r1, [r7, #0]
 80146f0:	6878      	ldr	r0, [r7, #4]
 80146f2:	f008 fbd1 	bl	801ce98 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80146f6:	bf00      	nop
 80146f8:	3708      	adds	r7, #8
 80146fa:	46bd      	mov	sp, r7
 80146fc:	bd80      	pop	{r7, pc}
	...

08014700 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8014700:	b580      	push	{r7, lr}
 8014702:	b086      	sub	sp, #24
 8014704:	af00      	add	r7, sp, #0
 8014706:	60f8      	str	r0, [r7, #12]
 8014708:	60b9      	str	r1, [r7, #8]
 801470a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801470c:	68bb      	ldr	r3, [r7, #8]
 801470e:	2b00      	cmp	r3, #0
 8014710:	d106      	bne.n	8014720 <netif_do_set_ipaddr+0x20>
 8014712:	4b1e      	ldr	r3, [pc, #120]	@ (801478c <netif_do_set_ipaddr+0x8c>)
 8014714:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8014718:	491d      	ldr	r1, [pc, #116]	@ (8014790 <netif_do_set_ipaddr+0x90>)
 801471a:	481e      	ldr	r0, [pc, #120]	@ (8014794 <netif_do_set_ipaddr+0x94>)
 801471c:	f00c fcd2 	bl	80210c4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	2b00      	cmp	r3, #0
 8014724:	d106      	bne.n	8014734 <netif_do_set_ipaddr+0x34>
 8014726:	4b19      	ldr	r3, [pc, #100]	@ (801478c <netif_do_set_ipaddr+0x8c>)
 8014728:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 801472c:	4918      	ldr	r1, [pc, #96]	@ (8014790 <netif_do_set_ipaddr+0x90>)
 801472e:	4819      	ldr	r0, [pc, #100]	@ (8014794 <netif_do_set_ipaddr+0x94>)
 8014730:	f00c fcc8 	bl	80210c4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8014734:	68bb      	ldr	r3, [r7, #8]
 8014736:	681a      	ldr	r2, [r3, #0]
 8014738:	68fb      	ldr	r3, [r7, #12]
 801473a:	3304      	adds	r3, #4
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	429a      	cmp	r2, r3
 8014740:	d01f      	beq.n	8014782 <netif_do_set_ipaddr+0x82>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8014742:	68bb      	ldr	r3, [r7, #8]
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	3304      	adds	r3, #4
 801474c:	681a      	ldr	r2, [r3, #0]
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
 8014752:	4811      	ldr	r0, [pc, #68]	@ (8014798 <netif_do_set_ipaddr+0x98>)
 8014754:	f00c fd26 	bl	80211a4 <puts>
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8014758:	f107 0314 	add.w	r3, r7, #20
 801475c:	4619      	mov	r1, r3
 801475e:	6878      	ldr	r0, [r7, #4]
 8014760:	f7ff ffbc 	bl	80146dc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8014764:	68bb      	ldr	r3, [r7, #8]
 8014766:	2b00      	cmp	r3, #0
 8014768:	d002      	beq.n	8014770 <netif_do_set_ipaddr+0x70>
 801476a:	68bb      	ldr	r3, [r7, #8]
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	e000      	b.n	8014772 <netif_do_set_ipaddr+0x72>
 8014770:	2300      	movs	r3, #0
 8014772:	68fa      	ldr	r2, [r7, #12]
 8014774:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8014776:	2101      	movs	r1, #1
 8014778:	68f8      	ldr	r0, [r7, #12]
 801477a:	f000 f92d 	bl	80149d8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801477e:	2301      	movs	r3, #1
 8014780:	e000      	b.n	8014784 <netif_do_set_ipaddr+0x84>
  }
  return 0; /* address unchanged */
 8014782:	2300      	movs	r3, #0
}
 8014784:	4618      	mov	r0, r3
 8014786:	3718      	adds	r7, #24
 8014788:	46bd      	mov	sp, r7
 801478a:	bd80      	pop	{r7, pc}
 801478c:	080237c0 	.word	0x080237c0
 8014790:	08023924 	.word	0x08023924
 8014794:	08023810 	.word	0x08023810
 8014798:	08023934 	.word	0x08023934

0801479c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 801479c:	b5b0      	push	{r4, r5, r7, lr}
 801479e:	b088      	sub	sp, #32
 80147a0:	af04      	add	r7, sp, #16
 80147a2:	60f8      	str	r0, [r7, #12]
 80147a4:	60b9      	str	r1, [r7, #8]
 80147a6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80147a8:	68bb      	ldr	r3, [r7, #8]
 80147aa:	681a      	ldr	r2, [r3, #0]
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	3308      	adds	r3, #8
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	429a      	cmp	r2, r3
 80147b4:	d02d      	beq.n	8014812 <netif_do_set_netmask+0x76>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80147b6:	68bb      	ldr	r3, [r7, #8]
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d002      	beq.n	80147c2 <netif_do_set_netmask+0x26>
 80147bc:	68bb      	ldr	r3, [r7, #8]
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	e000      	b.n	80147c4 <netif_do_set_netmask+0x28>
 80147c2:	2300      	movs	r3, #0
 80147c4:	68fa      	ldr	r2, [r7, #12]
 80147c6:	6093      	str	r3, [r2, #8]
    IP_SET_TYPE_VAL(netif->netmask, IPADDR_TYPE_V4);
    mib2_add_route_ip4(0, netif);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: netmask of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80147ce:	4618      	mov	r0, r3
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80147d6:	461c      	mov	r4, r3
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	3308      	adds	r3, #8
 80147dc:	781b      	ldrb	r3, [r3, #0]
 80147de:	461d      	mov	r5, r3
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	3308      	adds	r3, #8
 80147e4:	3301      	adds	r3, #1
 80147e6:	781b      	ldrb	r3, [r3, #0]
 80147e8:	461a      	mov	r2, r3
 80147ea:	68fb      	ldr	r3, [r7, #12]
 80147ec:	3308      	adds	r3, #8
 80147ee:	3302      	adds	r3, #2
 80147f0:	781b      	ldrb	r3, [r3, #0]
 80147f2:	4619      	mov	r1, r3
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	3308      	adds	r3, #8
 80147f8:	3303      	adds	r3, #3
 80147fa:	781b      	ldrb	r3, [r3, #0]
 80147fc:	9302      	str	r3, [sp, #8]
 80147fe:	9101      	str	r1, [sp, #4]
 8014800:	9200      	str	r2, [sp, #0]
 8014802:	462b      	mov	r3, r5
 8014804:	4622      	mov	r2, r4
 8014806:	4601      	mov	r1, r0
 8014808:	4804      	ldr	r0, [pc, #16]	@ (801481c <netif_do_set_netmask+0x80>)
 801480a:	f00c fc5b 	bl	80210c4 <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801480e:	2301      	movs	r3, #1
 8014810:	e000      	b.n	8014814 <netif_do_set_netmask+0x78>
  }
  return 0; /* netmask unchanged */
 8014812:	2300      	movs	r3, #0
}
 8014814:	4618      	mov	r0, r3
 8014816:	3710      	adds	r7, #16
 8014818:	46bd      	mov	sp, r7
 801481a:	bdb0      	pop	{r4, r5, r7, pc}
 801481c:	08023984 	.word	0x08023984

08014820 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8014820:	b5b0      	push	{r4, r5, r7, lr}
 8014822:	b088      	sub	sp, #32
 8014824:	af04      	add	r7, sp, #16
 8014826:	60f8      	str	r0, [r7, #12]
 8014828:	60b9      	str	r1, [r7, #8]
 801482a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801482c:	68bb      	ldr	r3, [r7, #8]
 801482e:	681a      	ldr	r2, [r3, #0]
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	330c      	adds	r3, #12
 8014834:	681b      	ldr	r3, [r3, #0]
 8014836:	429a      	cmp	r2, r3
 8014838:	d02d      	beq.n	8014896 <netif_do_set_gw+0x76>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801483a:	68bb      	ldr	r3, [r7, #8]
 801483c:	2b00      	cmp	r3, #0
 801483e:	d002      	beq.n	8014846 <netif_do_set_gw+0x26>
 8014840:	68bb      	ldr	r3, [r7, #8]
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	e000      	b.n	8014848 <netif_do_set_gw+0x28>
 8014846:	2300      	movs	r3, #0
 8014848:	68fa      	ldr	r2, [r7, #12]
 801484a:	60d3      	str	r3, [r2, #12]
    IP_SET_TYPE_VAL(netif->gw, IPADDR_TYPE_V4);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: GW address of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8014852:	4618      	mov	r0, r3
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801485a:	461c      	mov	r4, r3
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	330c      	adds	r3, #12
 8014860:	781b      	ldrb	r3, [r3, #0]
 8014862:	461d      	mov	r5, r3
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	330c      	adds	r3, #12
 8014868:	3301      	adds	r3, #1
 801486a:	781b      	ldrb	r3, [r3, #0]
 801486c:	461a      	mov	r2, r3
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	330c      	adds	r3, #12
 8014872:	3302      	adds	r3, #2
 8014874:	781b      	ldrb	r3, [r3, #0]
 8014876:	4619      	mov	r1, r3
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	330c      	adds	r3, #12
 801487c:	3303      	adds	r3, #3
 801487e:	781b      	ldrb	r3, [r3, #0]
 8014880:	9302      	str	r3, [sp, #8]
 8014882:	9101      	str	r1, [sp, #4]
 8014884:	9200      	str	r2, [sp, #0]
 8014886:	462b      	mov	r3, r5
 8014888:	4622      	mov	r2, r4
 801488a:	4601      	mov	r1, r0
 801488c:	4804      	ldr	r0, [pc, #16]	@ (80148a0 <netif_do_set_gw+0x80>)
 801488e:	f00c fc19 	bl	80210c4 <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8014892:	2301      	movs	r3, #1
 8014894:	e000      	b.n	8014898 <netif_do_set_gw+0x78>
  }
  return 0; /* gateway unchanged */
 8014896:	2300      	movs	r3, #0
}
 8014898:	4618      	mov	r0, r3
 801489a:	3710      	adds	r7, #16
 801489c:	46bd      	mov	sp, r7
 801489e:	bdb0      	pop	{r4, r5, r7, pc}
 80148a0:	080239e4 	.word	0x080239e4

080148a4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80148a4:	b580      	push	{r7, lr}
 80148a6:	b088      	sub	sp, #32
 80148a8:	af00      	add	r7, sp, #0
 80148aa:	60f8      	str	r0, [r7, #12]
 80148ac:	60b9      	str	r1, [r7, #8]
 80148ae:	607a      	str	r2, [r7, #4]
 80148b0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80148b2:	2300      	movs	r3, #0
 80148b4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80148b6:	2300      	movs	r3, #0
 80148b8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80148ba:	68bb      	ldr	r3, [r7, #8]
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d101      	bne.n	80148c4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80148c0:	4b1c      	ldr	r3, [pc, #112]	@ (8014934 <netif_set_addr+0x90>)
 80148c2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d101      	bne.n	80148ce <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80148ca:	4b1a      	ldr	r3, [pc, #104]	@ (8014934 <netif_set_addr+0x90>)
 80148cc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80148ce:	683b      	ldr	r3, [r7, #0]
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d101      	bne.n	80148d8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80148d4:	4b17      	ldr	r3, [pc, #92]	@ (8014934 <netif_set_addr+0x90>)
 80148d6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80148d8:	68bb      	ldr	r3, [r7, #8]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d003      	beq.n	80148e6 <netif_set_addr+0x42>
 80148de:	68bb      	ldr	r3, [r7, #8]
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d101      	bne.n	80148ea <netif_set_addr+0x46>
 80148e6:	2301      	movs	r3, #1
 80148e8:	e000      	b.n	80148ec <netif_set_addr+0x48>
 80148ea:	2300      	movs	r3, #0
 80148ec:	617b      	str	r3, [r7, #20]
  if (remove) {
 80148ee:	697b      	ldr	r3, [r7, #20]
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d006      	beq.n	8014902 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80148f4:	f107 0310 	add.w	r3, r7, #16
 80148f8:	461a      	mov	r2, r3
 80148fa:	68b9      	ldr	r1, [r7, #8]
 80148fc:	68f8      	ldr	r0, [r7, #12]
 80148fe:	f7ff feff 	bl	8014700 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8014902:	69fa      	ldr	r2, [r7, #28]
 8014904:	6879      	ldr	r1, [r7, #4]
 8014906:	68f8      	ldr	r0, [r7, #12]
 8014908:	f7ff ff48 	bl	801479c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801490c:	69ba      	ldr	r2, [r7, #24]
 801490e:	6839      	ldr	r1, [r7, #0]
 8014910:	68f8      	ldr	r0, [r7, #12]
 8014912:	f7ff ff85 	bl	8014820 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8014916:	697b      	ldr	r3, [r7, #20]
 8014918:	2b00      	cmp	r3, #0
 801491a:	d106      	bne.n	801492a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801491c:	f107 0310 	add.w	r3, r7, #16
 8014920:	461a      	mov	r2, r3
 8014922:	68b9      	ldr	r1, [r7, #8]
 8014924:	68f8      	ldr	r0, [r7, #12]
 8014926:	f7ff feeb 	bl	8014700 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801492a:	bf00      	nop
 801492c:	3720      	adds	r7, #32
 801492e:	46bd      	mov	sp, r7
 8014930:	bd80      	pop	{r7, pc}
 8014932:	bf00      	nop
 8014934:	08027264 	.word	0x08027264

08014938 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8014938:	b580      	push	{r7, lr}
 801493a:	b082      	sub	sp, #8
 801493c:	af00      	add	r7, sp, #0
 801493e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8014940:	4a0d      	ldr	r2, [pc, #52]	@ (8014978 <netif_set_default+0x40>)
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	2b00      	cmp	r3, #0
 801494a:	d004      	beq.n	8014956 <netif_set_default+0x1e>
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8014952:	4619      	mov	r1, r3
 8014954:	e000      	b.n	8014958 <netif_set_default+0x20>
 8014956:	2127      	movs	r1, #39	@ 0x27
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	2b00      	cmp	r3, #0
 801495c:	d003      	beq.n	8014966 <netif_set_default+0x2e>
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8014964:	e000      	b.n	8014968 <netif_set_default+0x30>
 8014966:	2327      	movs	r3, #39	@ 0x27
 8014968:	461a      	mov	r2, r3
 801496a:	4804      	ldr	r0, [pc, #16]	@ (801497c <netif_set_default+0x44>)
 801496c:	f00c fbaa 	bl	80210c4 <iprintf>
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8014970:	bf00      	nop
 8014972:	3708      	adds	r7, #8
 8014974:	46bd      	mov	sp, r7
 8014976:	bd80      	pop	{r7, pc}
 8014978:	20028310 	.word	0x20028310
 801497c:	08023a58 	.word	0x08023a58

08014980 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8014980:	b580      	push	{r7, lr}
 8014982:	b082      	sub	sp, #8
 8014984:	af00      	add	r7, sp, #0
 8014986:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	2b00      	cmp	r3, #0
 801498c:	d107      	bne.n	801499e <netif_set_up+0x1e>
 801498e:	4b0f      	ldr	r3, [pc, #60]	@ (80149cc <netif_set_up+0x4c>)
 8014990:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8014994:	490e      	ldr	r1, [pc, #56]	@ (80149d0 <netif_set_up+0x50>)
 8014996:	480f      	ldr	r0, [pc, #60]	@ (80149d4 <netif_set_up+0x54>)
 8014998:	f00c fb94 	bl	80210c4 <iprintf>
 801499c:	e013      	b.n	80149c6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80149a4:	f003 0301 	and.w	r3, r3, #1
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d10c      	bne.n	80149c6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80149b2:	f043 0301 	orr.w	r3, r3, #1
 80149b6:	b2da      	uxtb	r2, r3
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80149be:	2103      	movs	r1, #3
 80149c0:	6878      	ldr	r0, [r7, #4]
 80149c2:	f000 f809 	bl	80149d8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80149c6:	3708      	adds	r7, #8
 80149c8:	46bd      	mov	sp, r7
 80149ca:	bd80      	pop	{r7, pc}
 80149cc:	080237c0 	.word	0x080237c0
 80149d0:	08023a80 	.word	0x08023a80
 80149d4:	08023810 	.word	0x08023810

080149d8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80149d8:	b580      	push	{r7, lr}
 80149da:	b082      	sub	sp, #8
 80149dc:	af00      	add	r7, sp, #0
 80149de:	6078      	str	r0, [r7, #4]
 80149e0:	460b      	mov	r3, r1
 80149e2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d106      	bne.n	80149f8 <netif_issue_reports+0x20>
 80149ea:	4b18      	ldr	r3, [pc, #96]	@ (8014a4c <netif_issue_reports+0x74>)
 80149ec:	f240 326d 	movw	r2, #877	@ 0x36d
 80149f0:	4917      	ldr	r1, [pc, #92]	@ (8014a50 <netif_issue_reports+0x78>)
 80149f2:	4818      	ldr	r0, [pc, #96]	@ (8014a54 <netif_issue_reports+0x7c>)
 80149f4:	f00c fb66 	bl	80210c4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80149fe:	f003 0304 	and.w	r3, r3, #4
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d01e      	beq.n	8014a44 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014a0c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d017      	beq.n	8014a44 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8014a14:	78fb      	ldrb	r3, [r7, #3]
 8014a16:	f003 0301 	and.w	r3, r3, #1
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d013      	beq.n	8014a46 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	3304      	adds	r3, #4
 8014a22:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d00e      	beq.n	8014a46 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014a2e:	f003 0308 	and.w	r3, r3, #8
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d007      	beq.n	8014a46 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	3304      	adds	r3, #4
 8014a3a:	4619      	mov	r1, r3
 8014a3c:	6878      	ldr	r0, [r7, #4]
 8014a3e:	f009 fa47 	bl	801ded0 <etharp_request>
 8014a42:	e000      	b.n	8014a46 <netif_issue_reports+0x6e>
    return;
 8014a44:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8014a46:	3708      	adds	r7, #8
 8014a48:	46bd      	mov	sp, r7
 8014a4a:	bd80      	pop	{r7, pc}
 8014a4c:	080237c0 	.word	0x080237c0
 8014a50:	08023a9c 	.word	0x08023a9c
 8014a54:	08023810 	.word	0x08023810

08014a58 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8014a58:	b580      	push	{r7, lr}
 8014a5a:	b082      	sub	sp, #8
 8014a5c:	af00      	add	r7, sp, #0
 8014a5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d107      	bne.n	8014a76 <netif_set_down+0x1e>
 8014a66:	4b12      	ldr	r3, [pc, #72]	@ (8014ab0 <netif_set_down+0x58>)
 8014a68:	f240 329b 	movw	r2, #923	@ 0x39b
 8014a6c:	4911      	ldr	r1, [pc, #68]	@ (8014ab4 <netif_set_down+0x5c>)
 8014a6e:	4812      	ldr	r0, [pc, #72]	@ (8014ab8 <netif_set_down+0x60>)
 8014a70:	f00c fb28 	bl	80210c4 <iprintf>
 8014a74:	e019      	b.n	8014aaa <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014a7c:	f003 0301 	and.w	r3, r3, #1
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d012      	beq.n	8014aaa <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014a8a:	f023 0301 	bic.w	r3, r3, #1
 8014a8e:	b2da      	uxtb	r2, r3
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014a9c:	f003 0308 	and.w	r3, r3, #8
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d002      	beq.n	8014aaa <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8014aa4:	6878      	ldr	r0, [r7, #4]
 8014aa6:	f008 fd91 	bl	801d5cc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8014aaa:	3708      	adds	r7, #8
 8014aac:	46bd      	mov	sp, r7
 8014aae:	bd80      	pop	{r7, pc}
 8014ab0:	080237c0 	.word	0x080237c0
 8014ab4:	08023ac0 	.word	0x08023ac0
 8014ab8:	08023810 	.word	0x08023810

08014abc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8014abc:	b580      	push	{r7, lr}
 8014abe:	b082      	sub	sp, #8
 8014ac0:	af00      	add	r7, sp, #0
 8014ac2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d107      	bne.n	8014ada <netif_set_link_up+0x1e>
 8014aca:	4b13      	ldr	r3, [pc, #76]	@ (8014b18 <netif_set_link_up+0x5c>)
 8014acc:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8014ad0:	4912      	ldr	r1, [pc, #72]	@ (8014b1c <netif_set_link_up+0x60>)
 8014ad2:	4813      	ldr	r0, [pc, #76]	@ (8014b20 <netif_set_link_up+0x64>)
 8014ad4:	f00c faf6 	bl	80210c4 <iprintf>
 8014ad8:	e01b      	b.n	8014b12 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014ae0:	f003 0304 	and.w	r3, r3, #4
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d114      	bne.n	8014b12 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014aee:	f043 0304 	orr.w	r3, r3, #4
 8014af2:	b2da      	uxtb	r2, r3
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8014afa:	2103      	movs	r1, #3
 8014afc:	6878      	ldr	r0, [r7, #4]
 8014afe:	f7ff ff6b 	bl	80149d8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	69db      	ldr	r3, [r3, #28]
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d003      	beq.n	8014b12 <netif_set_link_up+0x56>
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	69db      	ldr	r3, [r3, #28]
 8014b0e:	6878      	ldr	r0, [r7, #4]
 8014b10:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8014b12:	3708      	adds	r7, #8
 8014b14:	46bd      	mov	sp, r7
 8014b16:	bd80      	pop	{r7, pc}
 8014b18:	080237c0 	.word	0x080237c0
 8014b1c:	08023ae0 	.word	0x08023ae0
 8014b20:	08023810 	.word	0x08023810

08014b24 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8014b24:	b580      	push	{r7, lr}
 8014b26:	b082      	sub	sp, #8
 8014b28:	af00      	add	r7, sp, #0
 8014b2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d107      	bne.n	8014b42 <netif_set_link_down+0x1e>
 8014b32:	4b11      	ldr	r3, [pc, #68]	@ (8014b78 <netif_set_link_down+0x54>)
 8014b34:	f240 4206 	movw	r2, #1030	@ 0x406
 8014b38:	4910      	ldr	r1, [pc, #64]	@ (8014b7c <netif_set_link_down+0x58>)
 8014b3a:	4811      	ldr	r0, [pc, #68]	@ (8014b80 <netif_set_link_down+0x5c>)
 8014b3c:	f00c fac2 	bl	80210c4 <iprintf>
 8014b40:	e017      	b.n	8014b72 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014b48:	f003 0304 	and.w	r3, r3, #4
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d010      	beq.n	8014b72 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014b56:	f023 0304 	bic.w	r3, r3, #4
 8014b5a:	b2da      	uxtb	r2, r3
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	69db      	ldr	r3, [r3, #28]
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d003      	beq.n	8014b72 <netif_set_link_down+0x4e>
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	69db      	ldr	r3, [r3, #28]
 8014b6e:	6878      	ldr	r0, [r7, #4]
 8014b70:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8014b72:	3708      	adds	r7, #8
 8014b74:	46bd      	mov	sp, r7
 8014b76:	bd80      	pop	{r7, pc}
 8014b78:	080237c0 	.word	0x080237c0
 8014b7c:	08023b04 	.word	0x08023b04
 8014b80:	08023810 	.word	0x08023810

08014b84 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8014b84:	b480      	push	{r7}
 8014b86:	b083      	sub	sp, #12
 8014b88:	af00      	add	r7, sp, #0
 8014b8a:	6078      	str	r0, [r7, #4]
 8014b8c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d002      	beq.n	8014b9a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	683a      	ldr	r2, [r7, #0]
 8014b98:	61da      	str	r2, [r3, #28]
  }
}
 8014b9a:	bf00      	nop
 8014b9c:	370c      	adds	r7, #12
 8014b9e:	46bd      	mov	sp, r7
 8014ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ba4:	4770      	bx	lr

08014ba6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8014ba6:	b480      	push	{r7}
 8014ba8:	b085      	sub	sp, #20
 8014baa:	af00      	add	r7, sp, #0
 8014bac:	60f8      	str	r0, [r7, #12]
 8014bae:	60b9      	str	r1, [r7, #8]
 8014bb0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8014bb2:	f06f 030b 	mvn.w	r3, #11
}
 8014bb6:	4618      	mov	r0, r3
 8014bb8:	3714      	adds	r7, #20
 8014bba:	46bd      	mov	sp, r7
 8014bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bc0:	4770      	bx	lr
	...

08014bc4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8014bc4:	b480      	push	{r7}
 8014bc6:	b085      	sub	sp, #20
 8014bc8:	af00      	add	r7, sp, #0
 8014bca:	4603      	mov	r3, r0
 8014bcc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8014bce:	79fb      	ldrb	r3, [r7, #7]
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d013      	beq.n	8014bfc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8014bd4:	4b0d      	ldr	r3, [pc, #52]	@ (8014c0c <netif_get_by_index+0x48>)
 8014bd6:	681b      	ldr	r3, [r3, #0]
 8014bd8:	60fb      	str	r3, [r7, #12]
 8014bda:	e00c      	b.n	8014bf6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014be2:	3301      	adds	r3, #1
 8014be4:	b2db      	uxtb	r3, r3
 8014be6:	79fa      	ldrb	r2, [r7, #7]
 8014be8:	429a      	cmp	r2, r3
 8014bea:	d101      	bne.n	8014bf0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8014bec:	68fb      	ldr	r3, [r7, #12]
 8014bee:	e006      	b.n	8014bfe <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	60fb      	str	r3, [r7, #12]
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	d1ef      	bne.n	8014bdc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8014bfc:	2300      	movs	r3, #0
}
 8014bfe:	4618      	mov	r0, r3
 8014c00:	3714      	adds	r7, #20
 8014c02:	46bd      	mov	sp, r7
 8014c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c08:	4770      	bx	lr
 8014c0a:	bf00      	nop
 8014c0c:	2002830c 	.word	0x2002830c

08014c10 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8014c10:	b580      	push	{r7, lr}
 8014c12:	b082      	sub	sp, #8
 8014c14:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8014c16:	f00b f8ad 	bl	801fd74 <sys_arch_protect>
 8014c1a:	6038      	str	r0, [r7, #0]
 8014c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8014c58 <pbuf_free_ooseq+0x48>)
 8014c1e:	2200      	movs	r2, #0
 8014c20:	701a      	strb	r2, [r3, #0]
 8014c22:	6838      	ldr	r0, [r7, #0]
 8014c24:	f00b f8b4 	bl	801fd90 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8014c28:	4b0c      	ldr	r3, [pc, #48]	@ (8014c5c <pbuf_free_ooseq+0x4c>)
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	607b      	str	r3, [r7, #4]
 8014c2e:	e00d      	b.n	8014c4c <pbuf_free_ooseq+0x3c>
    if (pcb->ooseq != NULL) {
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d006      	beq.n	8014c46 <pbuf_free_ooseq+0x36>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
 8014c38:	4809      	ldr	r0, [pc, #36]	@ (8014c60 <pbuf_free_ooseq+0x50>)
 8014c3a:	f00c fab3 	bl	80211a4 <puts>
      tcp_free_ooseq(pcb);
 8014c3e:	6878      	ldr	r0, [r7, #4]
 8014c40:	f002 fdc8 	bl	80177d4 <tcp_free_ooseq>
      return;
 8014c44:	e005      	b.n	8014c52 <pbuf_free_ooseq+0x42>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	68db      	ldr	r3, [r3, #12]
 8014c4a:	607b      	str	r3, [r7, #4]
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d1ee      	bne.n	8014c30 <pbuf_free_ooseq+0x20>
    }
  }
}
 8014c52:	3708      	adds	r7, #8
 8014c54:	46bd      	mov	sp, r7
 8014c56:	bd80      	pop	{r7, pc}
 8014c58:	20028315 	.word	0x20028315
 8014c5c:	20028424 	.word	0x20028424
 8014c60:	08023b60 	.word	0x08023b60

08014c64 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8014c64:	b580      	push	{r7, lr}
 8014c66:	b082      	sub	sp, #8
 8014c68:	af00      	add	r7, sp, #0
 8014c6a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8014c6c:	f7ff ffd0 	bl	8014c10 <pbuf_free_ooseq>
}
 8014c70:	bf00      	nop
 8014c72:	3708      	adds	r7, #8
 8014c74:	46bd      	mov	sp, r7
 8014c76:	bd80      	pop	{r7, pc}

08014c78 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8014c78:	b580      	push	{r7, lr}
 8014c7a:	b082      	sub	sp, #8
 8014c7c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8014c7e:	f00b f879 	bl	801fd74 <sys_arch_protect>
 8014c82:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8014c84:	4b0f      	ldr	r3, [pc, #60]	@ (8014cc4 <pbuf_pool_is_empty+0x4c>)
 8014c86:	781b      	ldrb	r3, [r3, #0]
 8014c88:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8014c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8014cc4 <pbuf_pool_is_empty+0x4c>)
 8014c8c:	2201      	movs	r2, #1
 8014c8e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8014c90:	6878      	ldr	r0, [r7, #4]
 8014c92:	f00b f87d 	bl	801fd90 <sys_arch_unprotect>

  if (!queued) {
 8014c96:	78fb      	ldrb	r3, [r7, #3]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d10f      	bne.n	8014cbc <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8014c9c:	2100      	movs	r1, #0
 8014c9e:	480a      	ldr	r0, [pc, #40]	@ (8014cc8 <pbuf_pool_is_empty+0x50>)
 8014ca0:	f7fe fb52 	bl	8013348 <tcpip_try_callback>
 8014ca4:	4603      	mov	r3, r0
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d008      	beq.n	8014cbc <pbuf_pool_is_empty+0x44>
 8014caa:	f00b f863 	bl	801fd74 <sys_arch_protect>
 8014cae:	6078      	str	r0, [r7, #4]
 8014cb0:	4b04      	ldr	r3, [pc, #16]	@ (8014cc4 <pbuf_pool_is_empty+0x4c>)
 8014cb2:	2200      	movs	r2, #0
 8014cb4:	701a      	strb	r2, [r3, #0]
 8014cb6:	6878      	ldr	r0, [r7, #4]
 8014cb8:	f00b f86a 	bl	801fd90 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8014cbc:	bf00      	nop
 8014cbe:	3708      	adds	r7, #8
 8014cc0:	46bd      	mov	sp, r7
 8014cc2:	bd80      	pop	{r7, pc}
 8014cc4:	20028315 	.word	0x20028315
 8014cc8:	08014c65 	.word	0x08014c65

08014ccc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8014ccc:	b480      	push	{r7}
 8014cce:	b085      	sub	sp, #20
 8014cd0:	af00      	add	r7, sp, #0
 8014cd2:	60f8      	str	r0, [r7, #12]
 8014cd4:	60b9      	str	r1, [r7, #8]
 8014cd6:	4611      	mov	r1, r2
 8014cd8:	461a      	mov	r2, r3
 8014cda:	460b      	mov	r3, r1
 8014cdc:	80fb      	strh	r3, [r7, #6]
 8014cde:	4613      	mov	r3, r2
 8014ce0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	2200      	movs	r2, #0
 8014ce6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	68ba      	ldr	r2, [r7, #8]
 8014cec:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	88fa      	ldrh	r2, [r7, #6]
 8014cf2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	88ba      	ldrh	r2, [r7, #4]
 8014cf8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8014cfa:	8b3b      	ldrh	r3, [r7, #24]
 8014cfc:	b2da      	uxtb	r2, r3
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	7f3a      	ldrb	r2, [r7, #28]
 8014d06:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	2201      	movs	r2, #1
 8014d0c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8014d0e:	68fb      	ldr	r3, [r7, #12]
 8014d10:	2200      	movs	r2, #0
 8014d12:	73da      	strb	r2, [r3, #15]
}
 8014d14:	bf00      	nop
 8014d16:	3714      	adds	r7, #20
 8014d18:	46bd      	mov	sp, r7
 8014d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d1e:	4770      	bx	lr

08014d20 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8014d20:	b580      	push	{r7, lr}
 8014d22:	b08c      	sub	sp, #48	@ 0x30
 8014d24:	af02      	add	r7, sp, #8
 8014d26:	4603      	mov	r3, r0
 8014d28:	71fb      	strb	r3, [r7, #7]
 8014d2a:	460b      	mov	r3, r1
 8014d2c:	80bb      	strh	r3, [r7, #4]
 8014d2e:	4613      	mov	r3, r2
 8014d30:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8014d32:	79fb      	ldrb	r3, [r7, #7]
 8014d34:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));
 8014d36:	88bb      	ldrh	r3, [r7, #4]
 8014d38:	4619      	mov	r1, r3
 8014d3a:	4875      	ldr	r0, [pc, #468]	@ (8014f10 <pbuf_alloc+0x1f0>)
 8014d3c:	f00c f9c2 	bl	80210c4 <iprintf>

  switch (type) {
 8014d40:	887b      	ldrh	r3, [r7, #2]
 8014d42:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8014d46:	f000 8082 	beq.w	8014e4e <pbuf_alloc+0x12e>
 8014d4a:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8014d4e:	f300 80ca 	bgt.w	8014ee6 <pbuf_alloc+0x1c6>
 8014d52:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8014d56:	d010      	beq.n	8014d7a <pbuf_alloc+0x5a>
 8014d58:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8014d5c:	f300 80c3 	bgt.w	8014ee6 <pbuf_alloc+0x1c6>
 8014d60:	2b01      	cmp	r3, #1
 8014d62:	d002      	beq.n	8014d6a <pbuf_alloc+0x4a>
 8014d64:	2b41      	cmp	r3, #65	@ 0x41
 8014d66:	f040 80be 	bne.w	8014ee6 <pbuf_alloc+0x1c6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8014d6a:	887a      	ldrh	r2, [r7, #2]
 8014d6c:	88bb      	ldrh	r3, [r7, #4]
 8014d6e:	4619      	mov	r1, r3
 8014d70:	2000      	movs	r0, #0
 8014d72:	f000 f8dd 	bl	8014f30 <pbuf_alloc_reference>
 8014d76:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8014d78:	e0bf      	b.n	8014efa <pbuf_alloc+0x1da>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8014d7a:	2300      	movs	r3, #0
 8014d7c:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8014d7e:	2300      	movs	r3, #0
 8014d80:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8014d82:	88bb      	ldrh	r3, [r7, #4]
 8014d84:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8014d86:	22f3      	movs	r2, #243	@ 0xf3
 8014d88:	4962      	ldr	r1, [pc, #392]	@ (8014f14 <pbuf_alloc+0x1f4>)
 8014d8a:	200c      	movs	r0, #12
 8014d8c:	f7ff fa7a 	bl	8014284 <memp_malloc_fn>
 8014d90:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8014d92:	693b      	ldr	r3, [r7, #16]
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d109      	bne.n	8014dac <pbuf_alloc+0x8c>
          PBUF_POOL_IS_EMPTY();
 8014d98:	f7ff ff6e 	bl	8014c78 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8014d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d002      	beq.n	8014da8 <pbuf_alloc+0x88>
            pbuf_free(p);
 8014da2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014da4:	f000 faee 	bl	8015384 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8014da8:	2300      	movs	r3, #0
 8014daa:	e0ad      	b.n	8014f08 <pbuf_alloc+0x1e8>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8014dac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014dae:	3303      	adds	r3, #3
 8014db0:	b29b      	uxth	r3, r3
 8014db2:	f023 0303 	bic.w	r3, r3, #3
 8014db6:	b29b      	uxth	r3, r3
 8014db8:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8014dbc:	b29b      	uxth	r3, r3
 8014dbe:	8b7a      	ldrh	r2, [r7, #26]
 8014dc0:	4293      	cmp	r3, r2
 8014dc2:	bf28      	it	cs
 8014dc4:	4613      	movcs	r3, r2
 8014dc6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8014dc8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014dca:	3310      	adds	r3, #16
 8014dcc:	693a      	ldr	r2, [r7, #16]
 8014dce:	4413      	add	r3, r2
 8014dd0:	3303      	adds	r3, #3
 8014dd2:	f023 0303 	bic.w	r3, r3, #3
 8014dd6:	4618      	mov	r0, r3
 8014dd8:	89f9      	ldrh	r1, [r7, #14]
 8014dda:	8b7a      	ldrh	r2, [r7, #26]
 8014ddc:	2300      	movs	r3, #0
 8014dde:	9301      	str	r3, [sp, #4]
 8014de0:	887b      	ldrh	r3, [r7, #2]
 8014de2:	9300      	str	r3, [sp, #0]
 8014de4:	460b      	mov	r3, r1
 8014de6:	4601      	mov	r1, r0
 8014de8:	6938      	ldr	r0, [r7, #16]
 8014dea:	f7ff ff6f 	bl	8014ccc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8014dee:	693b      	ldr	r3, [r7, #16]
 8014df0:	685b      	ldr	r3, [r3, #4]
 8014df2:	f003 0303 	and.w	r3, r3, #3
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d006      	beq.n	8014e08 <pbuf_alloc+0xe8>
 8014dfa:	4b46      	ldr	r3, [pc, #280]	@ (8014f14 <pbuf_alloc+0x1f4>)
 8014dfc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8014e00:	4945      	ldr	r1, [pc, #276]	@ (8014f18 <pbuf_alloc+0x1f8>)
 8014e02:	4846      	ldr	r0, [pc, #280]	@ (8014f1c <pbuf_alloc+0x1fc>)
 8014e04:	f00c f95e 	bl	80210c4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8014e08:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014e0a:	3303      	adds	r3, #3
 8014e0c:	f023 0303 	bic.w	r3, r3, #3
 8014e10:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8014e14:	d106      	bne.n	8014e24 <pbuf_alloc+0x104>
 8014e16:	4b3f      	ldr	r3, [pc, #252]	@ (8014f14 <pbuf_alloc+0x1f4>)
 8014e18:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8014e1c:	4940      	ldr	r1, [pc, #256]	@ (8014f20 <pbuf_alloc+0x200>)
 8014e1e:	483f      	ldr	r0, [pc, #252]	@ (8014f1c <pbuf_alloc+0x1fc>)
 8014e20:	f00c f950 	bl	80210c4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8014e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d102      	bne.n	8014e30 <pbuf_alloc+0x110>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8014e2a:	693b      	ldr	r3, [r7, #16]
 8014e2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8014e2e:	e002      	b.n	8014e36 <pbuf_alloc+0x116>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8014e30:	69fb      	ldr	r3, [r7, #28]
 8014e32:	693a      	ldr	r2, [r7, #16]
 8014e34:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8014e36:	693b      	ldr	r3, [r7, #16]
 8014e38:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8014e3a:	8b7a      	ldrh	r2, [r7, #26]
 8014e3c:	89fb      	ldrh	r3, [r7, #14]
 8014e3e:	1ad3      	subs	r3, r2, r3
 8014e40:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8014e42:	2300      	movs	r3, #0
 8014e44:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8014e46:	8b7b      	ldrh	r3, [r7, #26]
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d19c      	bne.n	8014d86 <pbuf_alloc+0x66>
      break;
 8014e4c:	e055      	b.n	8014efa <pbuf_alloc+0x1da>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8014e4e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014e50:	3303      	adds	r3, #3
 8014e52:	b29b      	uxth	r3, r3
 8014e54:	f023 0303 	bic.w	r3, r3, #3
 8014e58:	b29a      	uxth	r2, r3
 8014e5a:	88bb      	ldrh	r3, [r7, #4]
 8014e5c:	3303      	adds	r3, #3
 8014e5e:	b29b      	uxth	r3, r3
 8014e60:	f023 0303 	bic.w	r3, r3, #3
 8014e64:	b29b      	uxth	r3, r3
 8014e66:	4413      	add	r3, r2
 8014e68:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8014e6a:	8b3b      	ldrh	r3, [r7, #24]
 8014e6c:	3310      	adds	r3, #16
 8014e6e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8014e70:	8b3a      	ldrh	r2, [r7, #24]
 8014e72:	88bb      	ldrh	r3, [r7, #4]
 8014e74:	3303      	adds	r3, #3
 8014e76:	f023 0303 	bic.w	r3, r3, #3
 8014e7a:	429a      	cmp	r2, r3
 8014e7c:	d306      	bcc.n	8014e8c <pbuf_alloc+0x16c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8014e7e:	8afa      	ldrh	r2, [r7, #22]
 8014e80:	88bb      	ldrh	r3, [r7, #4]
 8014e82:	3303      	adds	r3, #3
 8014e84:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8014e88:	429a      	cmp	r2, r3
 8014e8a:	d201      	bcs.n	8014e90 <pbuf_alloc+0x170>
        return NULL;
 8014e8c:	2300      	movs	r3, #0
 8014e8e:	e03b      	b.n	8014f08 <pbuf_alloc+0x1e8>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8014e90:	8afb      	ldrh	r3, [r7, #22]
 8014e92:	4618      	mov	r0, r3
 8014e94:	f7fe ff26 	bl	8013ce4 <mem_malloc>
 8014e98:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8014e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d101      	bne.n	8014ea4 <pbuf_alloc+0x184>
        return NULL;
 8014ea0:	2300      	movs	r3, #0
 8014ea2:	e031      	b.n	8014f08 <pbuf_alloc+0x1e8>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8014ea4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014ea6:	3310      	adds	r3, #16
 8014ea8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014eaa:	4413      	add	r3, r2
 8014eac:	3303      	adds	r3, #3
 8014eae:	f023 0303 	bic.w	r3, r3, #3
 8014eb2:	4618      	mov	r0, r3
 8014eb4:	88b9      	ldrh	r1, [r7, #4]
 8014eb6:	88ba      	ldrh	r2, [r7, #4]
 8014eb8:	2300      	movs	r3, #0
 8014eba:	9301      	str	r3, [sp, #4]
 8014ebc:	887b      	ldrh	r3, [r7, #2]
 8014ebe:	9300      	str	r3, [sp, #0]
 8014ec0:	460b      	mov	r3, r1
 8014ec2:	4601      	mov	r1, r0
 8014ec4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014ec6:	f7ff ff01 	bl	8014ccc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8014eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ecc:	685b      	ldr	r3, [r3, #4]
 8014ece:	f003 0303 	and.w	r3, r3, #3
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d010      	beq.n	8014ef8 <pbuf_alloc+0x1d8>
 8014ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8014f14 <pbuf_alloc+0x1f4>)
 8014ed8:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8014edc:	4911      	ldr	r1, [pc, #68]	@ (8014f24 <pbuf_alloc+0x204>)
 8014ede:	480f      	ldr	r0, [pc, #60]	@ (8014f1c <pbuf_alloc+0x1fc>)
 8014ee0:	f00c f8f0 	bl	80210c4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8014ee4:	e008      	b.n	8014ef8 <pbuf_alloc+0x1d8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8014ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8014f14 <pbuf_alloc+0x1f4>)
 8014ee8:	f240 1227 	movw	r2, #295	@ 0x127
 8014eec:	490e      	ldr	r1, [pc, #56]	@ (8014f28 <pbuf_alloc+0x208>)
 8014eee:	480b      	ldr	r0, [pc, #44]	@ (8014f1c <pbuf_alloc+0x1fc>)
 8014ef0:	f00c f8e8 	bl	80210c4 <iprintf>
      return NULL;
 8014ef4:	2300      	movs	r3, #0
 8014ef6:	e007      	b.n	8014f08 <pbuf_alloc+0x1e8>
      break;
 8014ef8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
 8014efa:	88bb      	ldrh	r3, [r7, #4]
 8014efc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014efe:	4619      	mov	r1, r3
 8014f00:	480a      	ldr	r0, [pc, #40]	@ (8014f2c <pbuf_alloc+0x20c>)
 8014f02:	f00c f8df 	bl	80210c4 <iprintf>
  return p;
 8014f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8014f08:	4618      	mov	r0, r3
 8014f0a:	3728      	adds	r7, #40	@ 0x28
 8014f0c:	46bd      	mov	sp, r7
 8014f0e:	bd80      	pop	{r7, pc}
 8014f10:	08023b90 	.word	0x08023b90
 8014f14:	08023ba8 	.word	0x08023ba8
 8014f18:	08023bd8 	.word	0x08023bd8
 8014f1c:	08023c08 	.word	0x08023c08
 8014f20:	08023c30 	.word	0x08023c30
 8014f24:	08023c64 	.word	0x08023c64
 8014f28:	08023c90 	.word	0x08023c90
 8014f2c:	08023cac 	.word	0x08023cac

08014f30 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8014f30:	b580      	push	{r7, lr}
 8014f32:	b086      	sub	sp, #24
 8014f34:	af02      	add	r7, sp, #8
 8014f36:	6078      	str	r0, [r7, #4]
 8014f38:	460b      	mov	r3, r1
 8014f3a:	807b      	strh	r3, [r7, #2]
 8014f3c:	4613      	mov	r3, r2
 8014f3e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8014f40:	883b      	ldrh	r3, [r7, #0]
 8014f42:	2b41      	cmp	r3, #65	@ 0x41
 8014f44:	d009      	beq.n	8014f5a <pbuf_alloc_reference+0x2a>
 8014f46:	883b      	ldrh	r3, [r7, #0]
 8014f48:	2b01      	cmp	r3, #1
 8014f4a:	d006      	beq.n	8014f5a <pbuf_alloc_reference+0x2a>
 8014f4c:	4b16      	ldr	r3, [pc, #88]	@ (8014fa8 <pbuf_alloc_reference+0x78>)
 8014f4e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8014f52:	4916      	ldr	r1, [pc, #88]	@ (8014fac <pbuf_alloc_reference+0x7c>)
 8014f54:	4816      	ldr	r0, [pc, #88]	@ (8014fb0 <pbuf_alloc_reference+0x80>)
 8014f56:	f00c f8b5 	bl	80210c4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8014f5a:	f44f 72a6 	mov.w	r2, #332	@ 0x14c
 8014f5e:	4912      	ldr	r1, [pc, #72]	@ (8014fa8 <pbuf_alloc_reference+0x78>)
 8014f60:	200b      	movs	r0, #11
 8014f62:	f7ff f98f 	bl	8014284 <memp_malloc_fn>
 8014f66:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d10b      	bne.n	8014f86 <pbuf_alloc_reference+0x56>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 8014f6e:	883b      	ldrh	r3, [r7, #0]
 8014f70:	2b01      	cmp	r3, #1
 8014f72:	d101      	bne.n	8014f78 <pbuf_alloc_reference+0x48>
 8014f74:	4b0f      	ldr	r3, [pc, #60]	@ (8014fb4 <pbuf_alloc_reference+0x84>)
 8014f76:	e000      	b.n	8014f7a <pbuf_alloc_reference+0x4a>
 8014f78:	4b0f      	ldr	r3, [pc, #60]	@ (8014fb8 <pbuf_alloc_reference+0x88>)
 8014f7a:	4619      	mov	r1, r3
 8014f7c:	480f      	ldr	r0, [pc, #60]	@ (8014fbc <pbuf_alloc_reference+0x8c>)
 8014f7e:	f00c f8a1 	bl	80210c4 <iprintf>
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8014f82:	2300      	movs	r3, #0
 8014f84:	e00b      	b.n	8014f9e <pbuf_alloc_reference+0x6e>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8014f86:	8879      	ldrh	r1, [r7, #2]
 8014f88:	887a      	ldrh	r2, [r7, #2]
 8014f8a:	2300      	movs	r3, #0
 8014f8c:	9301      	str	r3, [sp, #4]
 8014f8e:	883b      	ldrh	r3, [r7, #0]
 8014f90:	9300      	str	r3, [sp, #0]
 8014f92:	460b      	mov	r3, r1
 8014f94:	6879      	ldr	r1, [r7, #4]
 8014f96:	68f8      	ldr	r0, [r7, #12]
 8014f98:	f7ff fe98 	bl	8014ccc <pbuf_init_alloced_pbuf>
  return p;
 8014f9c:	68fb      	ldr	r3, [r7, #12]
}
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	3710      	adds	r7, #16
 8014fa2:	46bd      	mov	sp, r7
 8014fa4:	bd80      	pop	{r7, pc}
 8014fa6:	bf00      	nop
 8014fa8:	08023ba8 	.word	0x08023ba8
 8014fac:	08023ccc 	.word	0x08023ccc
 8014fb0:	08023c08 	.word	0x08023c08
 8014fb4:	08023ce0 	.word	0x08023ce0
 8014fb8:	08023ce4 	.word	0x08023ce4
 8014fbc:	08023ce8 	.word	0x08023ce8

08014fc0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8014fc0:	b580      	push	{r7, lr}
 8014fc2:	b088      	sub	sp, #32
 8014fc4:	af02      	add	r7, sp, #8
 8014fc6:	607b      	str	r3, [r7, #4]
 8014fc8:	4603      	mov	r3, r0
 8014fca:	73fb      	strb	r3, [r7, #15]
 8014fcc:	460b      	mov	r3, r1
 8014fce:	81bb      	strh	r3, [r7, #12]
 8014fd0:	4613      	mov	r3, r2
 8014fd2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8014fd4:	7bfb      	ldrb	r3, [r7, #15]
 8014fd6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));
 8014fd8:	89bb      	ldrh	r3, [r7, #12]
 8014fda:	4619      	mov	r1, r3
 8014fdc:	4817      	ldr	r0, [pc, #92]	@ (801503c <pbuf_alloced_custom+0x7c>)
 8014fde:	f00c f871 	bl	80210c4 <iprintf>

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8014fe2:	8a7b      	ldrh	r3, [r7, #18]
 8014fe4:	3303      	adds	r3, #3
 8014fe6:	f023 0203 	bic.w	r2, r3, #3
 8014fea:	89bb      	ldrh	r3, [r7, #12]
 8014fec:	441a      	add	r2, r3
 8014fee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014ff0:	429a      	cmp	r2, r3
 8014ff2:	d906      	bls.n	8015002 <pbuf_alloced_custom+0x42>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
 8014ff4:	89bb      	ldrh	r3, [r7, #12]
 8014ff6:	4619      	mov	r1, r3
 8014ff8:	4811      	ldr	r0, [pc, #68]	@ (8015040 <pbuf_alloced_custom+0x80>)
 8014ffa:	f00c f863 	bl	80210c4 <iprintf>
    return NULL;
 8014ffe:	2300      	movs	r3, #0
 8015000:	e018      	b.n	8015034 <pbuf_alloced_custom+0x74>
  }

  if (payload_mem != NULL) {
 8015002:	6a3b      	ldr	r3, [r7, #32]
 8015004:	2b00      	cmp	r3, #0
 8015006:	d007      	beq.n	8015018 <pbuf_alloced_custom+0x58>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8015008:	8a7b      	ldrh	r3, [r7, #18]
 801500a:	3303      	adds	r3, #3
 801500c:	f023 0303 	bic.w	r3, r3, #3
 8015010:	6a3a      	ldr	r2, [r7, #32]
 8015012:	4413      	add	r3, r2
 8015014:	617b      	str	r3, [r7, #20]
 8015016:	e001      	b.n	801501c <pbuf_alloced_custom+0x5c>
  } else {
    payload = NULL;
 8015018:	2300      	movs	r3, #0
 801501a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801501c:	6878      	ldr	r0, [r7, #4]
 801501e:	89b9      	ldrh	r1, [r7, #12]
 8015020:	89ba      	ldrh	r2, [r7, #12]
 8015022:	2302      	movs	r3, #2
 8015024:	9301      	str	r3, [sp, #4]
 8015026:	897b      	ldrh	r3, [r7, #10]
 8015028:	9300      	str	r3, [sp, #0]
 801502a:	460b      	mov	r3, r1
 801502c:	6979      	ldr	r1, [r7, #20]
 801502e:	f7ff fe4d 	bl	8014ccc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8015032:	687b      	ldr	r3, [r7, #4]
}
 8015034:	4618      	mov	r0, r3
 8015036:	3718      	adds	r7, #24
 8015038:	46bd      	mov	sp, r7
 801503a:	bd80      	pop	{r7, pc}
 801503c:	08023d2c 	.word	0x08023d2c
 8015040:	08023d50 	.word	0x08023d50

08015044 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8015044:	b580      	push	{r7, lr}
 8015046:	b084      	sub	sp, #16
 8015048:	af00      	add	r7, sp, #0
 801504a:	6078      	str	r0, [r7, #4]
 801504c:	460b      	mov	r3, r1
 801504e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	2b00      	cmp	r3, #0
 8015054:	d106      	bne.n	8015064 <pbuf_realloc+0x20>
 8015056:	4b3a      	ldr	r3, [pc, #232]	@ (8015140 <pbuf_realloc+0xfc>)
 8015058:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 801505c:	4939      	ldr	r1, [pc, #228]	@ (8015144 <pbuf_realloc+0x100>)
 801505e:	483a      	ldr	r0, [pc, #232]	@ (8015148 <pbuf_realloc+0x104>)
 8015060:	f00c f830 	bl	80210c4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	891b      	ldrh	r3, [r3, #8]
 8015068:	887a      	ldrh	r2, [r7, #2]
 801506a:	429a      	cmp	r2, r3
 801506c:	d263      	bcs.n	8015136 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	891a      	ldrh	r2, [r3, #8]
 8015072:	887b      	ldrh	r3, [r7, #2]
 8015074:	1ad3      	subs	r3, r2, r3
 8015076:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8015078:	887b      	ldrh	r3, [r7, #2]
 801507a:	817b      	strh	r3, [r7, #10]
  q = p;
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8015080:	e018      	b.n	80150b4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	895b      	ldrh	r3, [r3, #10]
 8015086:	897a      	ldrh	r2, [r7, #10]
 8015088:	1ad3      	subs	r3, r2, r3
 801508a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	891a      	ldrh	r2, [r3, #8]
 8015090:	893b      	ldrh	r3, [r7, #8]
 8015092:	1ad3      	subs	r3, r2, r3
 8015094:	b29a      	uxth	r2, r3
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	681b      	ldr	r3, [r3, #0]
 801509e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80150a0:	68fb      	ldr	r3, [r7, #12]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d106      	bne.n	80150b4 <pbuf_realloc+0x70>
 80150a6:	4b26      	ldr	r3, [pc, #152]	@ (8015140 <pbuf_realloc+0xfc>)
 80150a8:	f240 12af 	movw	r2, #431	@ 0x1af
 80150ac:	4927      	ldr	r1, [pc, #156]	@ (801514c <pbuf_realloc+0x108>)
 80150ae:	4826      	ldr	r0, [pc, #152]	@ (8015148 <pbuf_realloc+0x104>)
 80150b0:	f00c f808 	bl	80210c4 <iprintf>
  while (rem_len > q->len) {
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	895b      	ldrh	r3, [r3, #10]
 80150b8:	897a      	ldrh	r2, [r7, #10]
 80150ba:	429a      	cmp	r2, r3
 80150bc:	d8e1      	bhi.n	8015082 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80150be:	68fb      	ldr	r3, [r7, #12]
 80150c0:	7b1b      	ldrb	r3, [r3, #12]
 80150c2:	f003 030f 	and.w	r3, r3, #15
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d121      	bne.n	801510e <pbuf_realloc+0xca>
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	895b      	ldrh	r3, [r3, #10]
 80150ce:	897a      	ldrh	r2, [r7, #10]
 80150d0:	429a      	cmp	r2, r3
 80150d2:	d01c      	beq.n	801510e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80150d4:	68fb      	ldr	r3, [r7, #12]
 80150d6:	7b5b      	ldrb	r3, [r3, #13]
 80150d8:	f003 0302 	and.w	r3, r3, #2
 80150dc:	2b00      	cmp	r3, #0
 80150de:	d116      	bne.n	801510e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	685a      	ldr	r2, [r3, #4]
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	1ad3      	subs	r3, r2, r3
 80150e8:	b29a      	uxth	r2, r3
 80150ea:	897b      	ldrh	r3, [r7, #10]
 80150ec:	4413      	add	r3, r2
 80150ee:	b29b      	uxth	r3, r3
 80150f0:	4619      	mov	r1, r3
 80150f2:	68f8      	ldr	r0, [r7, #12]
 80150f4:	f7fe fcc4 	bl	8013a80 <mem_trim>
 80150f8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d106      	bne.n	801510e <pbuf_realloc+0xca>
 8015100:	4b0f      	ldr	r3, [pc, #60]	@ (8015140 <pbuf_realloc+0xfc>)
 8015102:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8015106:	4912      	ldr	r1, [pc, #72]	@ (8015150 <pbuf_realloc+0x10c>)
 8015108:	480f      	ldr	r0, [pc, #60]	@ (8015148 <pbuf_realloc+0x104>)
 801510a:	f00b ffdb 	bl	80210c4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	897a      	ldrh	r2, [r7, #10]
 8015112:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	895a      	ldrh	r2, [r3, #10]
 8015118:	68fb      	ldr	r3, [r7, #12]
 801511a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801511c:	68fb      	ldr	r3, [r7, #12]
 801511e:	681b      	ldr	r3, [r3, #0]
 8015120:	2b00      	cmp	r3, #0
 8015122:	d004      	beq.n	801512e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8015124:	68fb      	ldr	r3, [r7, #12]
 8015126:	681b      	ldr	r3, [r3, #0]
 8015128:	4618      	mov	r0, r3
 801512a:	f000 f92b 	bl	8015384 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801512e:	68fb      	ldr	r3, [r7, #12]
 8015130:	2200      	movs	r2, #0
 8015132:	601a      	str	r2, [r3, #0]
 8015134:	e000      	b.n	8015138 <pbuf_realloc+0xf4>
    return;
 8015136:	bf00      	nop

}
 8015138:	3710      	adds	r7, #16
 801513a:	46bd      	mov	sp, r7
 801513c:	bd80      	pop	{r7, pc}
 801513e:	bf00      	nop
 8015140:	08023ba8 	.word	0x08023ba8
 8015144:	08023d84 	.word	0x08023d84
 8015148:	08023c08 	.word	0x08023c08
 801514c:	08023d9c 	.word	0x08023d9c
 8015150:	08023db4 	.word	0x08023db4

08015154 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8015154:	b580      	push	{r7, lr}
 8015156:	b086      	sub	sp, #24
 8015158:	af00      	add	r7, sp, #0
 801515a:	60f8      	str	r0, [r7, #12]
 801515c:	60b9      	str	r1, [r7, #8]
 801515e:	4613      	mov	r3, r2
 8015160:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	2b00      	cmp	r3, #0
 8015166:	d106      	bne.n	8015176 <pbuf_add_header_impl+0x22>
 8015168:	4b32      	ldr	r3, [pc, #200]	@ (8015234 <pbuf_add_header_impl+0xe0>)
 801516a:	f240 12df 	movw	r2, #479	@ 0x1df
 801516e:	4932      	ldr	r1, [pc, #200]	@ (8015238 <pbuf_add_header_impl+0xe4>)
 8015170:	4832      	ldr	r0, [pc, #200]	@ (801523c <pbuf_add_header_impl+0xe8>)
 8015172:	f00b ffa7 	bl	80210c4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	2b00      	cmp	r3, #0
 801517a:	d003      	beq.n	8015184 <pbuf_add_header_impl+0x30>
 801517c:	68bb      	ldr	r3, [r7, #8]
 801517e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015182:	d301      	bcc.n	8015188 <pbuf_add_header_impl+0x34>
    return 1;
 8015184:	2301      	movs	r3, #1
 8015186:	e051      	b.n	801522c <pbuf_add_header_impl+0xd8>
  }
  if (header_size_increment == 0) {
 8015188:	68bb      	ldr	r3, [r7, #8]
 801518a:	2b00      	cmp	r3, #0
 801518c:	d101      	bne.n	8015192 <pbuf_add_header_impl+0x3e>
    return 0;
 801518e:	2300      	movs	r3, #0
 8015190:	e04c      	b.n	801522c <pbuf_add_header_impl+0xd8>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8015192:	68bb      	ldr	r3, [r7, #8]
 8015194:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	891a      	ldrh	r2, [r3, #8]
 801519a:	8a7b      	ldrh	r3, [r7, #18]
 801519c:	4413      	add	r3, r2
 801519e:	b29b      	uxth	r3, r3
 80151a0:	8a7a      	ldrh	r2, [r7, #18]
 80151a2:	429a      	cmp	r2, r3
 80151a4:	d901      	bls.n	80151aa <pbuf_add_header_impl+0x56>
    return 1;
 80151a6:	2301      	movs	r3, #1
 80151a8:	e040      	b.n	801522c <pbuf_add_header_impl+0xd8>
  }

  type_internal = p->type_internal;
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	7b1b      	ldrb	r3, [r3, #12]
 80151ae:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80151b0:	8a3b      	ldrh	r3, [r7, #16]
 80151b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d013      	beq.n	80151e2 <pbuf_add_header_impl+0x8e>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	685a      	ldr	r2, [r3, #4]
 80151be:	68bb      	ldr	r3, [r7, #8]
 80151c0:	425b      	negs	r3, r3
 80151c2:	4413      	add	r3, r2
 80151c4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	3310      	adds	r3, #16
 80151ca:	697a      	ldr	r2, [r7, #20]
 80151cc:	429a      	cmp	r2, r3
 80151ce:	d214      	bcs.n	80151fa <pbuf_add_header_impl+0xa6>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	3310      	adds	r3, #16
 80151d4:	461a      	mov	r2, r3
 80151d6:	6979      	ldr	r1, [r7, #20]
 80151d8:	4819      	ldr	r0, [pc, #100]	@ (8015240 <pbuf_add_header_impl+0xec>)
 80151da:	f00b ff73 	bl	80210c4 <iprintf>
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80151de:	2301      	movs	r3, #1
 80151e0:	e024      	b.n	801522c <pbuf_add_header_impl+0xd8>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80151e2:	79fb      	ldrb	r3, [r7, #7]
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d006      	beq.n	80151f6 <pbuf_add_header_impl+0xa2>
      payload = (u8_t *)p->payload - header_size_increment;
 80151e8:	68fb      	ldr	r3, [r7, #12]
 80151ea:	685a      	ldr	r2, [r3, #4]
 80151ec:	68bb      	ldr	r3, [r7, #8]
 80151ee:	425b      	negs	r3, r3
 80151f0:	4413      	add	r3, r2
 80151f2:	617b      	str	r3, [r7, #20]
 80151f4:	e001      	b.n	80151fa <pbuf_add_header_impl+0xa6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80151f6:	2301      	movs	r3, #1
 80151f8:	e018      	b.n	801522c <pbuf_add_header_impl+0xd8>
    }
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	6859      	ldr	r1, [r3, #4]
 80151fe:	8a7b      	ldrh	r3, [r7, #18]
 8015200:	697a      	ldr	r2, [r7, #20]
 8015202:	4810      	ldr	r0, [pc, #64]	@ (8015244 <pbuf_add_header_impl+0xf0>)
 8015204:	f00b ff5e 	bl	80210c4 <iprintf>
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	697a      	ldr	r2, [r7, #20]
 801520c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	895a      	ldrh	r2, [r3, #10]
 8015212:	8a7b      	ldrh	r3, [r7, #18]
 8015214:	4413      	add	r3, r2
 8015216:	b29a      	uxth	r2, r3
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	891a      	ldrh	r2, [r3, #8]
 8015220:	8a7b      	ldrh	r3, [r7, #18]
 8015222:	4413      	add	r3, r2
 8015224:	b29a      	uxth	r2, r3
 8015226:	68fb      	ldr	r3, [r7, #12]
 8015228:	811a      	strh	r2, [r3, #8]


  return 0;
 801522a:	2300      	movs	r3, #0
}
 801522c:	4618      	mov	r0, r3
 801522e:	3718      	adds	r7, #24
 8015230:	46bd      	mov	sp, r7
 8015232:	bd80      	pop	{r7, pc}
 8015234:	08023ba8 	.word	0x08023ba8
 8015238:	08023dd0 	.word	0x08023dd0
 801523c:	08023c08 	.word	0x08023c08
 8015240:	08023ddc 	.word	0x08023ddc
 8015244:	08023e28 	.word	0x08023e28

08015248 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8015248:	b580      	push	{r7, lr}
 801524a:	b082      	sub	sp, #8
 801524c:	af00      	add	r7, sp, #0
 801524e:	6078      	str	r0, [r7, #4]
 8015250:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8015252:	2200      	movs	r2, #0
 8015254:	6839      	ldr	r1, [r7, #0]
 8015256:	6878      	ldr	r0, [r7, #4]
 8015258:	f7ff ff7c 	bl	8015154 <pbuf_add_header_impl>
 801525c:	4603      	mov	r3, r0
}
 801525e:	4618      	mov	r0, r3
 8015260:	3708      	adds	r7, #8
 8015262:	46bd      	mov	sp, r7
 8015264:	bd80      	pop	{r7, pc}
	...

08015268 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8015268:	b580      	push	{r7, lr}
 801526a:	b084      	sub	sp, #16
 801526c:	af00      	add	r7, sp, #0
 801526e:	6078      	str	r0, [r7, #4]
 8015270:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	2b00      	cmp	r3, #0
 8015276:	d106      	bne.n	8015286 <pbuf_remove_header+0x1e>
 8015278:	4b23      	ldr	r3, [pc, #140]	@ (8015308 <pbuf_remove_header+0xa0>)
 801527a:	f240 224b 	movw	r2, #587	@ 0x24b
 801527e:	4923      	ldr	r1, [pc, #140]	@ (801530c <pbuf_remove_header+0xa4>)
 8015280:	4823      	ldr	r0, [pc, #140]	@ (8015310 <pbuf_remove_header+0xa8>)
 8015282:	f00b ff1f 	bl	80210c4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	2b00      	cmp	r3, #0
 801528a:	d003      	beq.n	8015294 <pbuf_remove_header+0x2c>
 801528c:	683b      	ldr	r3, [r7, #0]
 801528e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015292:	d301      	bcc.n	8015298 <pbuf_remove_header+0x30>
    return 1;
 8015294:	2301      	movs	r3, #1
 8015296:	e033      	b.n	8015300 <pbuf_remove_header+0x98>
  }
  if (header_size_decrement == 0) {
 8015298:	683b      	ldr	r3, [r7, #0]
 801529a:	2b00      	cmp	r3, #0
 801529c:	d101      	bne.n	80152a2 <pbuf_remove_header+0x3a>
    return 0;
 801529e:	2300      	movs	r3, #0
 80152a0:	e02e      	b.n	8015300 <pbuf_remove_header+0x98>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80152a2:	683b      	ldr	r3, [r7, #0]
 80152a4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	895b      	ldrh	r3, [r3, #10]
 80152aa:	89fa      	ldrh	r2, [r7, #14]
 80152ac:	429a      	cmp	r2, r3
 80152ae:	d908      	bls.n	80152c2 <pbuf_remove_header+0x5a>
 80152b0:	4b15      	ldr	r3, [pc, #84]	@ (8015308 <pbuf_remove_header+0xa0>)
 80152b2:	f240 2255 	movw	r2, #597	@ 0x255
 80152b6:	4917      	ldr	r1, [pc, #92]	@ (8015314 <pbuf_remove_header+0xac>)
 80152b8:	4815      	ldr	r0, [pc, #84]	@ (8015310 <pbuf_remove_header+0xa8>)
 80152ba:	f00b ff03 	bl	80210c4 <iprintf>
 80152be:	2301      	movs	r3, #1
 80152c0:	e01e      	b.n	8015300 <pbuf_remove_header+0x98>

  /* remember current payload pointer */
  payload = p->payload;
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	685b      	ldr	r3, [r3, #4]
 80152c6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	685a      	ldr	r2, [r3, #4]
 80152cc:	683b      	ldr	r3, [r7, #0]
 80152ce:	441a      	add	r2, r3
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	895a      	ldrh	r2, [r3, #10]
 80152d8:	89fb      	ldrh	r3, [r7, #14]
 80152da:	1ad3      	subs	r3, r2, r3
 80152dc:	b29a      	uxth	r2, r3
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	891a      	ldrh	r2, [r3, #8]
 80152e6:	89fb      	ldrh	r3, [r7, #14]
 80152e8:	1ad3      	subs	r3, r2, r3
 80152ea:	b29a      	uxth	r2, r3
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	685a      	ldr	r2, [r3, #4]
 80152f4:	89fb      	ldrh	r3, [r7, #14]
 80152f6:	68b9      	ldr	r1, [r7, #8]
 80152f8:	4807      	ldr	r0, [pc, #28]	@ (8015318 <pbuf_remove_header+0xb0>)
 80152fa:	f00b fee3 	bl	80210c4 <iprintf>
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80152fe:	2300      	movs	r3, #0
}
 8015300:	4618      	mov	r0, r3
 8015302:	3710      	adds	r7, #16
 8015304:	46bd      	mov	sp, r7
 8015306:	bd80      	pop	{r7, pc}
 8015308:	08023ba8 	.word	0x08023ba8
 801530c:	08023dd0 	.word	0x08023dd0
 8015310:	08023c08 	.word	0x08023c08
 8015314:	08023e50 	.word	0x08023e50
 8015318:	08023e70 	.word	0x08023e70

0801531c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801531c:	b580      	push	{r7, lr}
 801531e:	b082      	sub	sp, #8
 8015320:	af00      	add	r7, sp, #0
 8015322:	6078      	str	r0, [r7, #4]
 8015324:	460b      	mov	r3, r1
 8015326:	807b      	strh	r3, [r7, #2]
 8015328:	4613      	mov	r3, r2
 801532a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801532c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015330:	2b00      	cmp	r3, #0
 8015332:	da08      	bge.n	8015346 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8015334:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015338:	425b      	negs	r3, r3
 801533a:	4619      	mov	r1, r3
 801533c:	6878      	ldr	r0, [r7, #4]
 801533e:	f7ff ff93 	bl	8015268 <pbuf_remove_header>
 8015342:	4603      	mov	r3, r0
 8015344:	e007      	b.n	8015356 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8015346:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801534a:	787a      	ldrb	r2, [r7, #1]
 801534c:	4619      	mov	r1, r3
 801534e:	6878      	ldr	r0, [r7, #4]
 8015350:	f7ff ff00 	bl	8015154 <pbuf_add_header_impl>
 8015354:	4603      	mov	r3, r0
  }
}
 8015356:	4618      	mov	r0, r3
 8015358:	3708      	adds	r7, #8
 801535a:	46bd      	mov	sp, r7
 801535c:	bd80      	pop	{r7, pc}

0801535e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801535e:	b580      	push	{r7, lr}
 8015360:	b082      	sub	sp, #8
 8015362:	af00      	add	r7, sp, #0
 8015364:	6078      	str	r0, [r7, #4]
 8015366:	460b      	mov	r3, r1
 8015368:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801536a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801536e:	2201      	movs	r2, #1
 8015370:	4619      	mov	r1, r3
 8015372:	6878      	ldr	r0, [r7, #4]
 8015374:	f7ff ffd2 	bl	801531c <pbuf_header_impl>
 8015378:	4603      	mov	r3, r0
}
 801537a:	4618      	mov	r0, r3
 801537c:	3708      	adds	r7, #8
 801537e:	46bd      	mov	sp, r7
 8015380:	bd80      	pop	{r7, pc}
	...

08015384 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8015384:	b580      	push	{r7, lr}
 8015386:	b088      	sub	sp, #32
 8015388:	af00      	add	r7, sp, #0
 801538a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	2b00      	cmp	r3, #0
 8015390:	d10e      	bne.n	80153b0 <pbuf_free+0x2c>
    LWIP_ASSERT("p != NULL", p != NULL);
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	2b00      	cmp	r3, #0
 8015396:	d106      	bne.n	80153a6 <pbuf_free+0x22>
 8015398:	4b43      	ldr	r3, [pc, #268]	@ (80154a8 <pbuf_free+0x124>)
 801539a:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 801539e:	4943      	ldr	r1, [pc, #268]	@ (80154ac <pbuf_free+0x128>)
 80153a0:	4843      	ldr	r0, [pc, #268]	@ (80154b0 <pbuf_free+0x12c>)
 80153a2:	f00b fe8f 	bl	80210c4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 80153a6:	4843      	ldr	r0, [pc, #268]	@ (80154b4 <pbuf_free+0x130>)
 80153a8:	f00b fefc 	bl	80211a4 <puts>
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80153ac:	2300      	movs	r3, #0
 80153ae:	e077      	b.n	80154a0 <pbuf_free+0x11c>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));
 80153b0:	6879      	ldr	r1, [r7, #4]
 80153b2:	4841      	ldr	r0, [pc, #260]	@ (80154b8 <pbuf_free+0x134>)
 80153b4:	f00b fe86 	bl	80210c4 <iprintf>

  PERF_START;

  count = 0;
 80153b8:	2300      	movs	r3, #0
 80153ba:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80153bc:	e06c      	b.n	8015498 <pbuf_free+0x114>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80153be:	f00a fcd9 	bl	801fd74 <sys_arch_protect>
 80153c2:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	7b9b      	ldrb	r3, [r3, #14]
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	d106      	bne.n	80153da <pbuf_free+0x56>
 80153cc:	4b36      	ldr	r3, [pc, #216]	@ (80154a8 <pbuf_free+0x124>)
 80153ce:	f240 22f1 	movw	r2, #753	@ 0x2f1
 80153d2:	493a      	ldr	r1, [pc, #232]	@ (80154bc <pbuf_free+0x138>)
 80153d4:	4836      	ldr	r0, [pc, #216]	@ (80154b0 <pbuf_free+0x12c>)
 80153d6:	f00b fe75 	bl	80210c4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	7b9b      	ldrb	r3, [r3, #14]
 80153de:	3b01      	subs	r3, #1
 80153e0:	b2da      	uxtb	r2, r3
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	739a      	strb	r2, [r3, #14]
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	7b9b      	ldrb	r3, [r3, #14]
 80153ea:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80153ec:	69b8      	ldr	r0, [r7, #24]
 80153ee:	f00a fccf 	bl	801fd90 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80153f2:	7dfb      	ldrb	r3, [r7, #23]
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d147      	bne.n	8015488 <pbuf_free+0x104>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	681b      	ldr	r3, [r3, #0]
 80153fc:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
 80153fe:	6879      	ldr	r1, [r7, #4]
 8015400:	482f      	ldr	r0, [pc, #188]	@ (80154c0 <pbuf_free+0x13c>)
 8015402:	f00b fe5f 	bl	80210c4 <iprintf>
      alloc_src = pbuf_get_allocsrc(p);
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	7b1b      	ldrb	r3, [r3, #12]
 801540a:	f003 030f 	and.w	r3, r3, #15
 801540e:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	7b5b      	ldrb	r3, [r3, #13]
 8015414:	f003 0302 	and.w	r3, r3, #2
 8015418:	2b00      	cmp	r3, #0
 801541a:	d011      	beq.n	8015440 <pbuf_free+0xbc>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8015420:	68bb      	ldr	r3, [r7, #8]
 8015422:	691b      	ldr	r3, [r3, #16]
 8015424:	2b00      	cmp	r3, #0
 8015426:	d106      	bne.n	8015436 <pbuf_free+0xb2>
 8015428:	4b1f      	ldr	r3, [pc, #124]	@ (80154a8 <pbuf_free+0x124>)
 801542a:	f240 22ff 	movw	r2, #767	@ 0x2ff
 801542e:	4925      	ldr	r1, [pc, #148]	@ (80154c4 <pbuf_free+0x140>)
 8015430:	481f      	ldr	r0, [pc, #124]	@ (80154b0 <pbuf_free+0x12c>)
 8015432:	f00b fe47 	bl	80210c4 <iprintf>
        pc->custom_free_function(p);
 8015436:	68bb      	ldr	r3, [r7, #8]
 8015438:	691b      	ldr	r3, [r3, #16]
 801543a:	6878      	ldr	r0, [r7, #4]
 801543c:	4798      	blx	r3
 801543e:	e01d      	b.n	801547c <pbuf_free+0xf8>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8015440:	7bfb      	ldrb	r3, [r7, #15]
 8015442:	2b02      	cmp	r3, #2
 8015444:	d104      	bne.n	8015450 <pbuf_free+0xcc>
          memp_free(MEMP_PBUF_POOL, p);
 8015446:	6879      	ldr	r1, [r7, #4]
 8015448:	200c      	movs	r0, #12
 801544a:	f7fe ffad 	bl	80143a8 <memp_free>
 801544e:	e015      	b.n	801547c <pbuf_free+0xf8>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8015450:	7bfb      	ldrb	r3, [r7, #15]
 8015452:	2b01      	cmp	r3, #1
 8015454:	d104      	bne.n	8015460 <pbuf_free+0xdc>
          memp_free(MEMP_PBUF, p);
 8015456:	6879      	ldr	r1, [r7, #4]
 8015458:	200b      	movs	r0, #11
 801545a:	f7fe ffa5 	bl	80143a8 <memp_free>
 801545e:	e00d      	b.n	801547c <pbuf_free+0xf8>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8015460:	7bfb      	ldrb	r3, [r7, #15]
 8015462:	2b00      	cmp	r3, #0
 8015464:	d103      	bne.n	801546e <pbuf_free+0xea>
          mem_free(p);
 8015466:	6878      	ldr	r0, [r7, #4]
 8015468:	f7fe fa32 	bl	80138d0 <mem_free>
 801546c:	e006      	b.n	801547c <pbuf_free+0xf8>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801546e:	4b0e      	ldr	r3, [pc, #56]	@ (80154a8 <pbuf_free+0x124>)
 8015470:	f240 320f 	movw	r2, #783	@ 0x30f
 8015474:	4914      	ldr	r1, [pc, #80]	@ (80154c8 <pbuf_free+0x144>)
 8015476:	480e      	ldr	r0, [pc, #56]	@ (80154b0 <pbuf_free+0x12c>)
 8015478:	f00b fe24 	bl	80210c4 <iprintf>
        }
      }
      count++;
 801547c:	7ffb      	ldrb	r3, [r7, #31]
 801547e:	3301      	adds	r3, #1
 8015480:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8015482:	693b      	ldr	r3, [r7, #16]
 8015484:	607b      	str	r3, [r7, #4]
 8015486:	e007      	b.n	8015498 <pbuf_free+0x114>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
 8015488:	7dfb      	ldrb	r3, [r7, #23]
 801548a:	461a      	mov	r2, r3
 801548c:	6879      	ldr	r1, [r7, #4]
 801548e:	480f      	ldr	r0, [pc, #60]	@ (80154cc <pbuf_free+0x148>)
 8015490:	f00b fe18 	bl	80210c4 <iprintf>
      /* stop walking through the chain */
      p = NULL;
 8015494:	2300      	movs	r3, #0
 8015496:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	2b00      	cmp	r3, #0
 801549c:	d18f      	bne.n	80153be <pbuf_free+0x3a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801549e:	7ffb      	ldrb	r3, [r7, #31]
}
 80154a0:	4618      	mov	r0, r3
 80154a2:	3720      	adds	r7, #32
 80154a4:	46bd      	mov	sp, r7
 80154a6:	bd80      	pop	{r7, pc}
 80154a8:	08023ba8 	.word	0x08023ba8
 80154ac:	08023dd0 	.word	0x08023dd0
 80154b0:	08023c08 	.word	0x08023c08
 80154b4:	08023e9c 	.word	0x08023e9c
 80154b8:	08023ec0 	.word	0x08023ec0
 80154bc:	08023ed0 	.word	0x08023ed0
 80154c0:	08023ee8 	.word	0x08023ee8
 80154c4:	08023f04 	.word	0x08023f04
 80154c8:	08023f28 	.word	0x08023f28
 80154cc:	08023f3c 	.word	0x08023f3c

080154d0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80154d0:	b480      	push	{r7}
 80154d2:	b085      	sub	sp, #20
 80154d4:	af00      	add	r7, sp, #0
 80154d6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80154d8:	2300      	movs	r3, #0
 80154da:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80154dc:	e005      	b.n	80154ea <pbuf_clen+0x1a>
    ++len;
 80154de:	89fb      	ldrh	r3, [r7, #14]
 80154e0:	3301      	adds	r3, #1
 80154e2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	681b      	ldr	r3, [r3, #0]
 80154e8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d1f6      	bne.n	80154de <pbuf_clen+0xe>
  }
  return len;
 80154f0:	89fb      	ldrh	r3, [r7, #14]
}
 80154f2:	4618      	mov	r0, r3
 80154f4:	3714      	adds	r7, #20
 80154f6:	46bd      	mov	sp, r7
 80154f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154fc:	4770      	bx	lr
	...

08015500 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8015500:	b580      	push	{r7, lr}
 8015502:	b084      	sub	sp, #16
 8015504:	af00      	add	r7, sp, #0
 8015506:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	2b00      	cmp	r3, #0
 801550c:	d016      	beq.n	801553c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801550e:	f00a fc31 	bl	801fd74 <sys_arch_protect>
 8015512:	60f8      	str	r0, [r7, #12]
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	7b9b      	ldrb	r3, [r3, #14]
 8015518:	3301      	adds	r3, #1
 801551a:	b2da      	uxtb	r2, r3
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	739a      	strb	r2, [r3, #14]
 8015520:	68f8      	ldr	r0, [r7, #12]
 8015522:	f00a fc35 	bl	801fd90 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	7b9b      	ldrb	r3, [r3, #14]
 801552a:	2b00      	cmp	r3, #0
 801552c:	d106      	bne.n	801553c <pbuf_ref+0x3c>
 801552e:	4b05      	ldr	r3, [pc, #20]	@ (8015544 <pbuf_ref+0x44>)
 8015530:	f240 3242 	movw	r2, #834	@ 0x342
 8015534:	4904      	ldr	r1, [pc, #16]	@ (8015548 <pbuf_ref+0x48>)
 8015536:	4805      	ldr	r0, [pc, #20]	@ (801554c <pbuf_ref+0x4c>)
 8015538:	f00b fdc4 	bl	80210c4 <iprintf>
  }
}
 801553c:	bf00      	nop
 801553e:	3710      	adds	r7, #16
 8015540:	46bd      	mov	sp, r7
 8015542:	bd80      	pop	{r7, pc}
 8015544:	08023ba8 	.word	0x08023ba8
 8015548:	08023f68 	.word	0x08023f68
 801554c:	08023c08 	.word	0x08023c08

08015550 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8015550:	b580      	push	{r7, lr}
 8015552:	b084      	sub	sp, #16
 8015554:	af00      	add	r7, sp, #0
 8015556:	6078      	str	r0, [r7, #4]
 8015558:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	2b00      	cmp	r3, #0
 801555e:	d002      	beq.n	8015566 <pbuf_cat+0x16>
 8015560:	683b      	ldr	r3, [r7, #0]
 8015562:	2b00      	cmp	r3, #0
 8015564:	d107      	bne.n	8015576 <pbuf_cat+0x26>
 8015566:	4b20      	ldr	r3, [pc, #128]	@ (80155e8 <pbuf_cat+0x98>)
 8015568:	f240 3259 	movw	r2, #857	@ 0x359
 801556c:	491f      	ldr	r1, [pc, #124]	@ (80155ec <pbuf_cat+0x9c>)
 801556e:	4820      	ldr	r0, [pc, #128]	@ (80155f0 <pbuf_cat+0xa0>)
 8015570:	f00b fda8 	bl	80210c4 <iprintf>
 8015574:	e034      	b.n	80155e0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	60fb      	str	r3, [r7, #12]
 801557a:	e00a      	b.n	8015592 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801557c:	68fb      	ldr	r3, [r7, #12]
 801557e:	891a      	ldrh	r2, [r3, #8]
 8015580:	683b      	ldr	r3, [r7, #0]
 8015582:	891b      	ldrh	r3, [r3, #8]
 8015584:	4413      	add	r3, r2
 8015586:	b29a      	uxth	r2, r3
 8015588:	68fb      	ldr	r3, [r7, #12]
 801558a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	681b      	ldr	r3, [r3, #0]
 8015590:	60fb      	str	r3, [r7, #12]
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	681b      	ldr	r3, [r3, #0]
 8015596:	2b00      	cmp	r3, #0
 8015598:	d1f0      	bne.n	801557c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801559a:	68fb      	ldr	r3, [r7, #12]
 801559c:	891a      	ldrh	r2, [r3, #8]
 801559e:	68fb      	ldr	r3, [r7, #12]
 80155a0:	895b      	ldrh	r3, [r3, #10]
 80155a2:	429a      	cmp	r2, r3
 80155a4:	d006      	beq.n	80155b4 <pbuf_cat+0x64>
 80155a6:	4b10      	ldr	r3, [pc, #64]	@ (80155e8 <pbuf_cat+0x98>)
 80155a8:	f240 3262 	movw	r2, #866	@ 0x362
 80155ac:	4911      	ldr	r1, [pc, #68]	@ (80155f4 <pbuf_cat+0xa4>)
 80155ae:	4810      	ldr	r0, [pc, #64]	@ (80155f0 <pbuf_cat+0xa0>)
 80155b0:	f00b fd88 	bl	80210c4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80155b4:	68fb      	ldr	r3, [r7, #12]
 80155b6:	681b      	ldr	r3, [r3, #0]
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d006      	beq.n	80155ca <pbuf_cat+0x7a>
 80155bc:	4b0a      	ldr	r3, [pc, #40]	@ (80155e8 <pbuf_cat+0x98>)
 80155be:	f240 3263 	movw	r2, #867	@ 0x363
 80155c2:	490d      	ldr	r1, [pc, #52]	@ (80155f8 <pbuf_cat+0xa8>)
 80155c4:	480a      	ldr	r0, [pc, #40]	@ (80155f0 <pbuf_cat+0xa0>)
 80155c6:	f00b fd7d 	bl	80210c4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80155ca:	68fb      	ldr	r3, [r7, #12]
 80155cc:	891a      	ldrh	r2, [r3, #8]
 80155ce:	683b      	ldr	r3, [r7, #0]
 80155d0:	891b      	ldrh	r3, [r3, #8]
 80155d2:	4413      	add	r3, r2
 80155d4:	b29a      	uxth	r2, r3
 80155d6:	68fb      	ldr	r3, [r7, #12]
 80155d8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80155da:	68fb      	ldr	r3, [r7, #12]
 80155dc:	683a      	ldr	r2, [r7, #0]
 80155de:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80155e0:	3710      	adds	r7, #16
 80155e2:	46bd      	mov	sp, r7
 80155e4:	bd80      	pop	{r7, pc}
 80155e6:	bf00      	nop
 80155e8:	08023ba8 	.word	0x08023ba8
 80155ec:	08023f7c 	.word	0x08023f7c
 80155f0:	08023c08 	.word	0x08023c08
 80155f4:	08023fb4 	.word	0x08023fb4
 80155f8:	08023fe4 	.word	0x08023fe4

080155fc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80155fc:	b580      	push	{r7, lr}
 80155fe:	b082      	sub	sp, #8
 8015600:	af00      	add	r7, sp, #0
 8015602:	6078      	str	r0, [r7, #4]
 8015604:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8015606:	6839      	ldr	r1, [r7, #0]
 8015608:	6878      	ldr	r0, [r7, #4]
 801560a:	f7ff ffa1 	bl	8015550 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801560e:	6838      	ldr	r0, [r7, #0]
 8015610:	f7ff ff76 	bl	8015500 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
 8015614:	683a      	ldr	r2, [r7, #0]
 8015616:	6879      	ldr	r1, [r7, #4]
 8015618:	4803      	ldr	r0, [pc, #12]	@ (8015628 <pbuf_chain+0x2c>)
 801561a:	f00b fd53 	bl	80210c4 <iprintf>
}
 801561e:	bf00      	nop
 8015620:	3708      	adds	r7, #8
 8015622:	46bd      	mov	sp, r7
 8015624:	bd80      	pop	{r7, pc}
 8015626:	bf00      	nop
 8015628:	08023ff4 	.word	0x08023ff4

0801562c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801562c:	b580      	push	{r7, lr}
 801562e:	b086      	sub	sp, #24
 8015630:	af00      	add	r7, sp, #0
 8015632:	6078      	str	r0, [r7, #4]
 8015634:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8015636:	2300      	movs	r3, #0
 8015638:	617b      	str	r3, [r7, #20]
 801563a:	2300      	movs	r3, #0
 801563c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
 801563e:	683a      	ldr	r2, [r7, #0]
 8015640:	6879      	ldr	r1, [r7, #4]
 8015642:	4860      	ldr	r0, [pc, #384]	@ (80157c4 <pbuf_copy+0x198>)
 8015644:	f00b fd3e 	bl	80210c4 <iprintf>
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	2b00      	cmp	r3, #0
 801564c:	d008      	beq.n	8015660 <pbuf_copy+0x34>
 801564e:	683b      	ldr	r3, [r7, #0]
 8015650:	2b00      	cmp	r3, #0
 8015652:	d005      	beq.n	8015660 <pbuf_copy+0x34>
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	891a      	ldrh	r2, [r3, #8]
 8015658:	683b      	ldr	r3, [r7, #0]
 801565a:	891b      	ldrh	r3, [r3, #8]
 801565c:	429a      	cmp	r2, r3
 801565e:	d209      	bcs.n	8015674 <pbuf_copy+0x48>
 8015660:	4b59      	ldr	r3, [pc, #356]	@ (80157c8 <pbuf_copy+0x19c>)
 8015662:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8015666:	4959      	ldr	r1, [pc, #356]	@ (80157cc <pbuf_copy+0x1a0>)
 8015668:	4859      	ldr	r0, [pc, #356]	@ (80157d0 <pbuf_copy+0x1a4>)
 801566a:	f00b fd2b 	bl	80210c4 <iprintf>
 801566e:	f06f 030f 	mvn.w	r3, #15
 8015672:	e0a2      	b.n	80157ba <pbuf_copy+0x18e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	895b      	ldrh	r3, [r3, #10]
 8015678:	461a      	mov	r2, r3
 801567a:	697b      	ldr	r3, [r7, #20]
 801567c:	1ad2      	subs	r2, r2, r3
 801567e:	683b      	ldr	r3, [r7, #0]
 8015680:	895b      	ldrh	r3, [r3, #10]
 8015682:	4619      	mov	r1, r3
 8015684:	693b      	ldr	r3, [r7, #16]
 8015686:	1acb      	subs	r3, r1, r3
 8015688:	429a      	cmp	r2, r3
 801568a:	d306      	bcc.n	801569a <pbuf_copy+0x6e>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801568c:	683b      	ldr	r3, [r7, #0]
 801568e:	895b      	ldrh	r3, [r3, #10]
 8015690:	461a      	mov	r2, r3
 8015692:	693b      	ldr	r3, [r7, #16]
 8015694:	1ad3      	subs	r3, r2, r3
 8015696:	60fb      	str	r3, [r7, #12]
 8015698:	e005      	b.n	80156a6 <pbuf_copy+0x7a>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	895b      	ldrh	r3, [r3, #10]
 801569e:	461a      	mov	r2, r3
 80156a0:	697b      	ldr	r3, [r7, #20]
 80156a2:	1ad3      	subs	r3, r2, r3
 80156a4:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	685a      	ldr	r2, [r3, #4]
 80156aa:	697b      	ldr	r3, [r7, #20]
 80156ac:	18d0      	adds	r0, r2, r3
 80156ae:	683b      	ldr	r3, [r7, #0]
 80156b0:	685a      	ldr	r2, [r3, #4]
 80156b2:	693b      	ldr	r3, [r7, #16]
 80156b4:	4413      	add	r3, r2
 80156b6:	68fa      	ldr	r2, [r7, #12]
 80156b8:	4619      	mov	r1, r3
 80156ba:	f00b ff28 	bl	802150e <memcpy>
    offset_to += len;
 80156be:	697a      	ldr	r2, [r7, #20]
 80156c0:	68fb      	ldr	r3, [r7, #12]
 80156c2:	4413      	add	r3, r2
 80156c4:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80156c6:	693a      	ldr	r2, [r7, #16]
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	4413      	add	r3, r2
 80156cc:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	895b      	ldrh	r3, [r3, #10]
 80156d2:	461a      	mov	r2, r3
 80156d4:	697b      	ldr	r3, [r7, #20]
 80156d6:	4293      	cmp	r3, r2
 80156d8:	d906      	bls.n	80156e8 <pbuf_copy+0xbc>
 80156da:	4b3b      	ldr	r3, [pc, #236]	@ (80157c8 <pbuf_copy+0x19c>)
 80156dc:	f240 32d9 	movw	r2, #985	@ 0x3d9
 80156e0:	493c      	ldr	r1, [pc, #240]	@ (80157d4 <pbuf_copy+0x1a8>)
 80156e2:	483b      	ldr	r0, [pc, #236]	@ (80157d0 <pbuf_copy+0x1a4>)
 80156e4:	f00b fcee 	bl	80210c4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80156e8:	683b      	ldr	r3, [r7, #0]
 80156ea:	895b      	ldrh	r3, [r3, #10]
 80156ec:	461a      	mov	r2, r3
 80156ee:	693b      	ldr	r3, [r7, #16]
 80156f0:	4293      	cmp	r3, r2
 80156f2:	d906      	bls.n	8015702 <pbuf_copy+0xd6>
 80156f4:	4b34      	ldr	r3, [pc, #208]	@ (80157c8 <pbuf_copy+0x19c>)
 80156f6:	f240 32da 	movw	r2, #986	@ 0x3da
 80156fa:	4937      	ldr	r1, [pc, #220]	@ (80157d8 <pbuf_copy+0x1ac>)
 80156fc:	4834      	ldr	r0, [pc, #208]	@ (80157d0 <pbuf_copy+0x1a4>)
 80156fe:	f00b fce1 	bl	80210c4 <iprintf>
    if (offset_from >= p_from->len) {
 8015702:	683b      	ldr	r3, [r7, #0]
 8015704:	895b      	ldrh	r3, [r3, #10]
 8015706:	461a      	mov	r2, r3
 8015708:	693b      	ldr	r3, [r7, #16]
 801570a:	4293      	cmp	r3, r2
 801570c:	d304      	bcc.n	8015718 <pbuf_copy+0xec>
      /* on to next p_from (if any) */
      offset_from = 0;
 801570e:	2300      	movs	r3, #0
 8015710:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8015712:	683b      	ldr	r3, [r7, #0]
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	895b      	ldrh	r3, [r3, #10]
 801571c:	461a      	mov	r2, r3
 801571e:	697b      	ldr	r3, [r7, #20]
 8015720:	4293      	cmp	r3, r2
 8015722:	d114      	bne.n	801574e <pbuf_copy+0x122>
      /* on to next p_to (if any) */
      offset_to = 0;
 8015724:	2300      	movs	r3, #0
 8015726:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	681b      	ldr	r3, [r3, #0]
 801572c:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	2b00      	cmp	r3, #0
 8015732:	d10c      	bne.n	801574e <pbuf_copy+0x122>
 8015734:	683b      	ldr	r3, [r7, #0]
 8015736:	2b00      	cmp	r3, #0
 8015738:	d009      	beq.n	801574e <pbuf_copy+0x122>
 801573a:	4b23      	ldr	r3, [pc, #140]	@ (80157c8 <pbuf_copy+0x19c>)
 801573c:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8015740:	4926      	ldr	r1, [pc, #152]	@ (80157dc <pbuf_copy+0x1b0>)
 8015742:	4823      	ldr	r0, [pc, #140]	@ (80157d0 <pbuf_copy+0x1a4>)
 8015744:	f00b fcbe 	bl	80210c4 <iprintf>
 8015748:	f06f 030f 	mvn.w	r3, #15
 801574c:	e035      	b.n	80157ba <pbuf_copy+0x18e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801574e:	683b      	ldr	r3, [r7, #0]
 8015750:	2b00      	cmp	r3, #0
 8015752:	d013      	beq.n	801577c <pbuf_copy+0x150>
 8015754:	683b      	ldr	r3, [r7, #0]
 8015756:	895a      	ldrh	r2, [r3, #10]
 8015758:	683b      	ldr	r3, [r7, #0]
 801575a:	891b      	ldrh	r3, [r3, #8]
 801575c:	429a      	cmp	r2, r3
 801575e:	d10d      	bne.n	801577c <pbuf_copy+0x150>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8015760:	683b      	ldr	r3, [r7, #0]
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	2b00      	cmp	r3, #0
 8015766:	d009      	beq.n	801577c <pbuf_copy+0x150>
 8015768:	4b17      	ldr	r3, [pc, #92]	@ (80157c8 <pbuf_copy+0x19c>)
 801576a:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 801576e:	491c      	ldr	r1, [pc, #112]	@ (80157e0 <pbuf_copy+0x1b4>)
 8015770:	4817      	ldr	r0, [pc, #92]	@ (80157d0 <pbuf_copy+0x1a4>)
 8015772:	f00b fca7 	bl	80210c4 <iprintf>
 8015776:	f06f 0305 	mvn.w	r3, #5
 801577a:	e01e      	b.n	80157ba <pbuf_copy+0x18e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	2b00      	cmp	r3, #0
 8015780:	d013      	beq.n	80157aa <pbuf_copy+0x17e>
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	895a      	ldrh	r2, [r3, #10]
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	891b      	ldrh	r3, [r3, #8]
 801578a:	429a      	cmp	r2, r3
 801578c:	d10d      	bne.n	80157aa <pbuf_copy+0x17e>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	681b      	ldr	r3, [r3, #0]
 8015792:	2b00      	cmp	r3, #0
 8015794:	d009      	beq.n	80157aa <pbuf_copy+0x17e>
 8015796:	4b0c      	ldr	r3, [pc, #48]	@ (80157c8 <pbuf_copy+0x19c>)
 8015798:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 801579c:	4910      	ldr	r1, [pc, #64]	@ (80157e0 <pbuf_copy+0x1b4>)
 801579e:	480c      	ldr	r0, [pc, #48]	@ (80157d0 <pbuf_copy+0x1a4>)
 80157a0:	f00b fc90 	bl	80210c4 <iprintf>
 80157a4:	f06f 0305 	mvn.w	r3, #5
 80157a8:	e007      	b.n	80157ba <pbuf_copy+0x18e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80157aa:	683b      	ldr	r3, [r7, #0]
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	f47f af61 	bne.w	8015674 <pbuf_copy+0x48>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
 80157b2:	480c      	ldr	r0, [pc, #48]	@ (80157e4 <pbuf_copy+0x1b8>)
 80157b4:	f00b fcf6 	bl	80211a4 <puts>
  return ERR_OK;
 80157b8:	2300      	movs	r3, #0
}
 80157ba:	4618      	mov	r0, r3
 80157bc:	3718      	adds	r7, #24
 80157be:	46bd      	mov	sp, r7
 80157c0:	bd80      	pop	{r7, pc}
 80157c2:	bf00      	nop
 80157c4:	080240b0 	.word	0x080240b0
 80157c8:	08023ba8 	.word	0x08023ba8
 80157cc:	080240c4 	.word	0x080240c4
 80157d0:	08023c08 	.word	0x08023c08
 80157d4:	080240f4 	.word	0x080240f4
 80157d8:	0802410c 	.word	0x0802410c
 80157dc:	08024128 	.word	0x08024128
 80157e0:	08024138 	.word	0x08024138
 80157e4:	08024164 	.word	0x08024164

080157e8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80157e8:	b580      	push	{r7, lr}
 80157ea:	b088      	sub	sp, #32
 80157ec:	af00      	add	r7, sp, #0
 80157ee:	60f8      	str	r0, [r7, #12]
 80157f0:	60b9      	str	r1, [r7, #8]
 80157f2:	4611      	mov	r1, r2
 80157f4:	461a      	mov	r2, r3
 80157f6:	460b      	mov	r3, r1
 80157f8:	80fb      	strh	r3, [r7, #6]
 80157fa:	4613      	mov	r3, r2
 80157fc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80157fe:	2300      	movs	r3, #0
 8015800:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8015802:	2300      	movs	r3, #0
 8015804:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	2b00      	cmp	r3, #0
 801580a:	d108      	bne.n	801581e <pbuf_copy_partial+0x36>
 801580c:	4b2b      	ldr	r3, [pc, #172]	@ (80158bc <pbuf_copy_partial+0xd4>)
 801580e:	f240 420a 	movw	r2, #1034	@ 0x40a
 8015812:	492b      	ldr	r1, [pc, #172]	@ (80158c0 <pbuf_copy_partial+0xd8>)
 8015814:	482b      	ldr	r0, [pc, #172]	@ (80158c4 <pbuf_copy_partial+0xdc>)
 8015816:	f00b fc55 	bl	80210c4 <iprintf>
 801581a:	2300      	movs	r3, #0
 801581c:	e04a      	b.n	80158b4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801581e:	68bb      	ldr	r3, [r7, #8]
 8015820:	2b00      	cmp	r3, #0
 8015822:	d108      	bne.n	8015836 <pbuf_copy_partial+0x4e>
 8015824:	4b25      	ldr	r3, [pc, #148]	@ (80158bc <pbuf_copy_partial+0xd4>)
 8015826:	f240 420b 	movw	r2, #1035	@ 0x40b
 801582a:	4927      	ldr	r1, [pc, #156]	@ (80158c8 <pbuf_copy_partial+0xe0>)
 801582c:	4825      	ldr	r0, [pc, #148]	@ (80158c4 <pbuf_copy_partial+0xdc>)
 801582e:	f00b fc49 	bl	80210c4 <iprintf>
 8015832:	2300      	movs	r3, #0
 8015834:	e03e      	b.n	80158b4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8015836:	68fb      	ldr	r3, [r7, #12]
 8015838:	61fb      	str	r3, [r7, #28]
 801583a:	e034      	b.n	80158a6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801583c:	88bb      	ldrh	r3, [r7, #4]
 801583e:	2b00      	cmp	r3, #0
 8015840:	d00a      	beq.n	8015858 <pbuf_copy_partial+0x70>
 8015842:	69fb      	ldr	r3, [r7, #28]
 8015844:	895b      	ldrh	r3, [r3, #10]
 8015846:	88ba      	ldrh	r2, [r7, #4]
 8015848:	429a      	cmp	r2, r3
 801584a:	d305      	bcc.n	8015858 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801584c:	69fb      	ldr	r3, [r7, #28]
 801584e:	895b      	ldrh	r3, [r3, #10]
 8015850:	88ba      	ldrh	r2, [r7, #4]
 8015852:	1ad3      	subs	r3, r2, r3
 8015854:	80bb      	strh	r3, [r7, #4]
 8015856:	e023      	b.n	80158a0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8015858:	69fb      	ldr	r3, [r7, #28]
 801585a:	895a      	ldrh	r2, [r3, #10]
 801585c:	88bb      	ldrh	r3, [r7, #4]
 801585e:	1ad3      	subs	r3, r2, r3
 8015860:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8015862:	8b3a      	ldrh	r2, [r7, #24]
 8015864:	88fb      	ldrh	r3, [r7, #6]
 8015866:	429a      	cmp	r2, r3
 8015868:	d901      	bls.n	801586e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801586a:	88fb      	ldrh	r3, [r7, #6]
 801586c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801586e:	8b7b      	ldrh	r3, [r7, #26]
 8015870:	68ba      	ldr	r2, [r7, #8]
 8015872:	18d0      	adds	r0, r2, r3
 8015874:	69fb      	ldr	r3, [r7, #28]
 8015876:	685a      	ldr	r2, [r3, #4]
 8015878:	88bb      	ldrh	r3, [r7, #4]
 801587a:	4413      	add	r3, r2
 801587c:	8b3a      	ldrh	r2, [r7, #24]
 801587e:	4619      	mov	r1, r3
 8015880:	f00b fe45 	bl	802150e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8015884:	8afa      	ldrh	r2, [r7, #22]
 8015886:	8b3b      	ldrh	r3, [r7, #24]
 8015888:	4413      	add	r3, r2
 801588a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801588c:	8b7a      	ldrh	r2, [r7, #26]
 801588e:	8b3b      	ldrh	r3, [r7, #24]
 8015890:	4413      	add	r3, r2
 8015892:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8015894:	88fa      	ldrh	r2, [r7, #6]
 8015896:	8b3b      	ldrh	r3, [r7, #24]
 8015898:	1ad3      	subs	r3, r2, r3
 801589a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801589c:	2300      	movs	r3, #0
 801589e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80158a0:	69fb      	ldr	r3, [r7, #28]
 80158a2:	681b      	ldr	r3, [r3, #0]
 80158a4:	61fb      	str	r3, [r7, #28]
 80158a6:	88fb      	ldrh	r3, [r7, #6]
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d002      	beq.n	80158b2 <pbuf_copy_partial+0xca>
 80158ac:	69fb      	ldr	r3, [r7, #28]
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	d1c4      	bne.n	801583c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80158b2:	8afb      	ldrh	r3, [r7, #22]
}
 80158b4:	4618      	mov	r0, r3
 80158b6:	3720      	adds	r7, #32
 80158b8:	46bd      	mov	sp, r7
 80158ba:	bd80      	pop	{r7, pc}
 80158bc:	08023ba8 	.word	0x08023ba8
 80158c0:	08024188 	.word	0x08024188
 80158c4:	08023c08 	.word	0x08023c08
 80158c8:	080241a8 	.word	0x080241a8

080158cc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80158cc:	b580      	push	{r7, lr}
 80158ce:	b084      	sub	sp, #16
 80158d0:	af00      	add	r7, sp, #0
 80158d2:	4603      	mov	r3, r0
 80158d4:	603a      	str	r2, [r7, #0]
 80158d6:	71fb      	strb	r3, [r7, #7]
 80158d8:	460b      	mov	r3, r1
 80158da:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80158dc:	683b      	ldr	r3, [r7, #0]
 80158de:	8919      	ldrh	r1, [r3, #8]
 80158e0:	88ba      	ldrh	r2, [r7, #4]
 80158e2:	79fb      	ldrb	r3, [r7, #7]
 80158e4:	4618      	mov	r0, r3
 80158e6:	f7ff fa1b 	bl	8014d20 <pbuf_alloc>
 80158ea:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80158ec:	68fb      	ldr	r3, [r7, #12]
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d101      	bne.n	80158f6 <pbuf_clone+0x2a>
    return NULL;
 80158f2:	2300      	movs	r3, #0
 80158f4:	e011      	b.n	801591a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80158f6:	6839      	ldr	r1, [r7, #0]
 80158f8:	68f8      	ldr	r0, [r7, #12]
 80158fa:	f7ff fe97 	bl	801562c <pbuf_copy>
 80158fe:	4603      	mov	r3, r0
 8015900:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8015902:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8015906:	2b00      	cmp	r3, #0
 8015908:	d006      	beq.n	8015918 <pbuf_clone+0x4c>
 801590a:	4b06      	ldr	r3, [pc, #24]	@ (8015924 <pbuf_clone+0x58>)
 801590c:	f240 5224 	movw	r2, #1316	@ 0x524
 8015910:	4905      	ldr	r1, [pc, #20]	@ (8015928 <pbuf_clone+0x5c>)
 8015912:	4806      	ldr	r0, [pc, #24]	@ (801592c <pbuf_clone+0x60>)
 8015914:	f00b fbd6 	bl	80210c4 <iprintf>
  return q;
 8015918:	68fb      	ldr	r3, [r7, #12]
}
 801591a:	4618      	mov	r0, r3
 801591c:	3710      	adds	r7, #16
 801591e:	46bd      	mov	sp, r7
 8015920:	bd80      	pop	{r7, pc}
 8015922:	bf00      	nop
 8015924:	08023ba8 	.word	0x08023ba8
 8015928:	080242b4 	.word	0x080242b4
 801592c:	08023c08 	.word	0x08023c08

08015930 <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
 8015930:	b480      	push	{r7}
 8015932:	af00      	add	r7, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
 8015934:	4b04      	ldr	r3, [pc, #16]	@ (8015948 <stats_init+0x18>)
 8015936:	4a05      	ldr	r2, [pc, #20]	@ (801594c <stats_init+0x1c>)
 8015938:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 801593c:	bf00      	nop
 801593e:	46bd      	mov	sp, r7
 8015940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015944:	4770      	bx	lr
 8015946:	bf00      	nop
 8015948:	20028318 	.word	0x20028318
 801594c:	080242c8 	.word	0x080242c8

08015950 <stats_display_proto>:

#if LWIP_STATS_DISPLAY
void
stats_display_proto(struct stats_proto *proto, const char *name)
{
 8015950:	b580      	push	{r7, lr}
 8015952:	b082      	sub	sp, #8
 8015954:	af00      	add	r7, sp, #0
 8015956:	6078      	str	r0, [r7, #4]
 8015958:	6039      	str	r1, [r7, #0]
  LWIP_PLATFORM_DIAG(("\n%s\n\t", name));
 801595a:	6839      	ldr	r1, [r7, #0]
 801595c:	4827      	ldr	r0, [pc, #156]	@ (80159fc <stats_display_proto+0xac>)
 801595e:	f00b fbb1 	bl	80210c4 <iprintf>
  LWIP_PLATFORM_DIAG(("xmit: %"STAT_COUNTER_F"\n\t", proto->xmit));
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	881b      	ldrh	r3, [r3, #0]
 8015966:	4619      	mov	r1, r3
 8015968:	4825      	ldr	r0, [pc, #148]	@ (8015a00 <stats_display_proto+0xb0>)
 801596a:	f00b fbab 	bl	80210c4 <iprintf>
  LWIP_PLATFORM_DIAG(("recv: %"STAT_COUNTER_F"\n\t", proto->recv));
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	885b      	ldrh	r3, [r3, #2]
 8015972:	4619      	mov	r1, r3
 8015974:	4823      	ldr	r0, [pc, #140]	@ (8015a04 <stats_display_proto+0xb4>)
 8015976:	f00b fba5 	bl	80210c4 <iprintf>
  LWIP_PLATFORM_DIAG(("fw: %"STAT_COUNTER_F"\n\t", proto->fw));
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	889b      	ldrh	r3, [r3, #4]
 801597e:	4619      	mov	r1, r3
 8015980:	4821      	ldr	r0, [pc, #132]	@ (8015a08 <stats_display_proto+0xb8>)
 8015982:	f00b fb9f 	bl	80210c4 <iprintf>
  LWIP_PLATFORM_DIAG(("drop: %"STAT_COUNTER_F"\n\t", proto->drop));
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	88db      	ldrh	r3, [r3, #6]
 801598a:	4619      	mov	r1, r3
 801598c:	481f      	ldr	r0, [pc, #124]	@ (8015a0c <stats_display_proto+0xbc>)
 801598e:	f00b fb99 	bl	80210c4 <iprintf>
  LWIP_PLATFORM_DIAG(("chkerr: %"STAT_COUNTER_F"\n\t", proto->chkerr));
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	891b      	ldrh	r3, [r3, #8]
 8015996:	4619      	mov	r1, r3
 8015998:	481d      	ldr	r0, [pc, #116]	@ (8015a10 <stats_display_proto+0xc0>)
 801599a:	f00b fb93 	bl	80210c4 <iprintf>
  LWIP_PLATFORM_DIAG(("lenerr: %"STAT_COUNTER_F"\n\t", proto->lenerr));
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	895b      	ldrh	r3, [r3, #10]
 80159a2:	4619      	mov	r1, r3
 80159a4:	481b      	ldr	r0, [pc, #108]	@ (8015a14 <stats_display_proto+0xc4>)
 80159a6:	f00b fb8d 	bl	80210c4 <iprintf>
  LWIP_PLATFORM_DIAG(("memerr: %"STAT_COUNTER_F"\n\t", proto->memerr));
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	899b      	ldrh	r3, [r3, #12]
 80159ae:	4619      	mov	r1, r3
 80159b0:	4819      	ldr	r0, [pc, #100]	@ (8015a18 <stats_display_proto+0xc8>)
 80159b2:	f00b fb87 	bl	80210c4 <iprintf>
  LWIP_PLATFORM_DIAG(("rterr: %"STAT_COUNTER_F"\n\t", proto->rterr));
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	89db      	ldrh	r3, [r3, #14]
 80159ba:	4619      	mov	r1, r3
 80159bc:	4817      	ldr	r0, [pc, #92]	@ (8015a1c <stats_display_proto+0xcc>)
 80159be:	f00b fb81 	bl	80210c4 <iprintf>
  LWIP_PLATFORM_DIAG(("proterr: %"STAT_COUNTER_F"\n\t", proto->proterr));
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	8a1b      	ldrh	r3, [r3, #16]
 80159c6:	4619      	mov	r1, r3
 80159c8:	4815      	ldr	r0, [pc, #84]	@ (8015a20 <stats_display_proto+0xd0>)
 80159ca:	f00b fb7b 	bl	80210c4 <iprintf>
  LWIP_PLATFORM_DIAG(("opterr: %"STAT_COUNTER_F"\n\t", proto->opterr));
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	8a5b      	ldrh	r3, [r3, #18]
 80159d2:	4619      	mov	r1, r3
 80159d4:	4813      	ldr	r0, [pc, #76]	@ (8015a24 <stats_display_proto+0xd4>)
 80159d6:	f00b fb75 	bl	80210c4 <iprintf>
  LWIP_PLATFORM_DIAG(("err: %"STAT_COUNTER_F"\n\t", proto->err));
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	8a9b      	ldrh	r3, [r3, #20]
 80159de:	4619      	mov	r1, r3
 80159e0:	4811      	ldr	r0, [pc, #68]	@ (8015a28 <stats_display_proto+0xd8>)
 80159e2:	f00b fb6f 	bl	80210c4 <iprintf>
  LWIP_PLATFORM_DIAG(("cachehit: %"STAT_COUNTER_F"\n", proto->cachehit));
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	8adb      	ldrh	r3, [r3, #22]
 80159ea:	4619      	mov	r1, r3
 80159ec:	480f      	ldr	r0, [pc, #60]	@ (8015a2c <stats_display_proto+0xdc>)
 80159ee:	f00b fb69 	bl	80210c4 <iprintf>
}
 80159f2:	bf00      	nop
 80159f4:	3708      	adds	r7, #8
 80159f6:	46bd      	mov	sp, r7
 80159f8:	bd80      	pop	{r7, pc}
 80159fa:	bf00      	nop
 80159fc:	080242cc 	.word	0x080242cc
 8015a00:	080242d4 	.word	0x080242d4
 8015a04:	080242e0 	.word	0x080242e0
 8015a08:	080242ec 	.word	0x080242ec
 8015a0c:	080242f8 	.word	0x080242f8
 8015a10:	08024304 	.word	0x08024304
 8015a14:	08024314 	.word	0x08024314
 8015a18:	08024324 	.word	0x08024324
 8015a1c:	08024334 	.word	0x08024334
 8015a20:	08024344 	.word	0x08024344
 8015a24:	08024354 	.word	0x08024354
 8015a28:	08024364 	.word	0x08024364
 8015a2c:	08024370 	.word	0x08024370

08015a30 <stats_display_mem>:
#endif /* IGMP_STATS || MLD6_STATS */

#if MEM_STATS || MEMP_STATS
void
stats_display_mem(struct stats_mem *mem, const char *name)
{
 8015a30:	b580      	push	{r7, lr}
 8015a32:	b082      	sub	sp, #8
 8015a34:	af00      	add	r7, sp, #0
 8015a36:	6078      	str	r0, [r7, #4]
 8015a38:	6039      	str	r1, [r7, #0]
  LWIP_PLATFORM_DIAG(("\nMEM %s\n\t", name));
 8015a3a:	6839      	ldr	r1, [r7, #0]
 8015a3c:	480f      	ldr	r0, [pc, #60]	@ (8015a7c <stats_display_mem+0x4c>)
 8015a3e:	f00b fb41 	bl	80210c4 <iprintf>
  LWIP_PLATFORM_DIAG(("avail: %"MEM_SIZE_F"\n\t", mem->avail));
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	88db      	ldrh	r3, [r3, #6]
 8015a46:	4619      	mov	r1, r3
 8015a48:	480d      	ldr	r0, [pc, #52]	@ (8015a80 <stats_display_mem+0x50>)
 8015a4a:	f00b fb3b 	bl	80210c4 <iprintf>
  LWIP_PLATFORM_DIAG(("used: %"MEM_SIZE_F"\n\t", mem->used));
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	891b      	ldrh	r3, [r3, #8]
 8015a52:	4619      	mov	r1, r3
 8015a54:	480b      	ldr	r0, [pc, #44]	@ (8015a84 <stats_display_mem+0x54>)
 8015a56:	f00b fb35 	bl	80210c4 <iprintf>
  LWIP_PLATFORM_DIAG(("max: %"MEM_SIZE_F"\n\t", mem->max));
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	895b      	ldrh	r3, [r3, #10]
 8015a5e:	4619      	mov	r1, r3
 8015a60:	4809      	ldr	r0, [pc, #36]	@ (8015a88 <stats_display_mem+0x58>)
 8015a62:	f00b fb2f 	bl	80210c4 <iprintf>
  LWIP_PLATFORM_DIAG(("err: %"STAT_COUNTER_F"\n", mem->err));
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	889b      	ldrh	r3, [r3, #4]
 8015a6a:	4619      	mov	r1, r3
 8015a6c:	4807      	ldr	r0, [pc, #28]	@ (8015a8c <stats_display_mem+0x5c>)
 8015a6e:	f00b fb29 	bl	80210c4 <iprintf>
}
 8015a72:	bf00      	nop
 8015a74:	3708      	adds	r7, #8
 8015a76:	46bd      	mov	sp, r7
 8015a78:	bd80      	pop	{r7, pc}
 8015a7a:	bf00      	nop
 8015a7c:	08024380 	.word	0x08024380
 8015a80:	0802438c 	.word	0x0802438c
 8015a84:	0802439c 	.word	0x0802439c
 8015a88:	080243a8 	.word	0x080243a8
 8015a8c:	080243b4 	.word	0x080243b4

08015a90 <stats_display_memp>:

#if MEMP_STATS
void
stats_display_memp(struct stats_mem *mem, int idx)
{
 8015a90:	b580      	push	{r7, lr}
 8015a92:	b082      	sub	sp, #8
 8015a94:	af00      	add	r7, sp, #0
 8015a96:	6078      	str	r0, [r7, #4]
 8015a98:	6039      	str	r1, [r7, #0]
  if (idx < MEMP_MAX) {
 8015a9a:	683b      	ldr	r3, [r7, #0]
 8015a9c:	2b0c      	cmp	r3, #12
 8015a9e:	dc05      	bgt.n	8015aac <stats_display_memp+0x1c>
    stats_display_mem(mem, mem->name);
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	681b      	ldr	r3, [r3, #0]
 8015aa4:	4619      	mov	r1, r3
 8015aa6:	6878      	ldr	r0, [r7, #4]
 8015aa8:	f7ff ffc2 	bl	8015a30 <stats_display_mem>
  }
}
 8015aac:	bf00      	nop
 8015aae:	3708      	adds	r7, #8
 8015ab0:	46bd      	mov	sp, r7
 8015ab2:	bd80      	pop	{r7, pc}

08015ab4 <stats_display_sys>:
#endif /* MEM_STATS || MEMP_STATS */

#if SYS_STATS
void
stats_display_sys(struct stats_sys *sys)
{
 8015ab4:	b580      	push	{r7, lr}
 8015ab6:	b082      	sub	sp, #8
 8015ab8:	af00      	add	r7, sp, #0
 8015aba:	6078      	str	r0, [r7, #4]
  LWIP_PLATFORM_DIAG(("\nSYS\n\t"));
 8015abc:	481e      	ldr	r0, [pc, #120]	@ (8015b38 <stats_display_sys+0x84>)
 8015abe:	f00b fb01 	bl	80210c4 <iprintf>
  LWIP_PLATFORM_DIAG(("sem.used:  %"STAT_COUNTER_F"\n\t", sys->sem.used));
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	881b      	ldrh	r3, [r3, #0]
 8015ac6:	4619      	mov	r1, r3
 8015ac8:	481c      	ldr	r0, [pc, #112]	@ (8015b3c <stats_display_sys+0x88>)
 8015aca:	f00b fafb 	bl	80210c4 <iprintf>
  LWIP_PLATFORM_DIAG(("sem.max:   %"STAT_COUNTER_F"\n\t", sys->sem.max));
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	885b      	ldrh	r3, [r3, #2]
 8015ad2:	4619      	mov	r1, r3
 8015ad4:	481a      	ldr	r0, [pc, #104]	@ (8015b40 <stats_display_sys+0x8c>)
 8015ad6:	f00b faf5 	bl	80210c4 <iprintf>
  LWIP_PLATFORM_DIAG(("sem.err:   %"STAT_COUNTER_F"\n\t", sys->sem.err));
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	889b      	ldrh	r3, [r3, #4]
 8015ade:	4619      	mov	r1, r3
 8015ae0:	4818      	ldr	r0, [pc, #96]	@ (8015b44 <stats_display_sys+0x90>)
 8015ae2:	f00b faef 	bl	80210c4 <iprintf>
  LWIP_PLATFORM_DIAG(("mutex.used: %"STAT_COUNTER_F"\n\t", sys->mutex.used));
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	88db      	ldrh	r3, [r3, #6]
 8015aea:	4619      	mov	r1, r3
 8015aec:	4816      	ldr	r0, [pc, #88]	@ (8015b48 <stats_display_sys+0x94>)
 8015aee:	f00b fae9 	bl	80210c4 <iprintf>
  LWIP_PLATFORM_DIAG(("mutex.max:  %"STAT_COUNTER_F"\n\t", sys->mutex.max));
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	891b      	ldrh	r3, [r3, #8]
 8015af6:	4619      	mov	r1, r3
 8015af8:	4814      	ldr	r0, [pc, #80]	@ (8015b4c <stats_display_sys+0x98>)
 8015afa:	f00b fae3 	bl	80210c4 <iprintf>
  LWIP_PLATFORM_DIAG(("mutex.err:  %"STAT_COUNTER_F"\n\t", sys->mutex.err));
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	895b      	ldrh	r3, [r3, #10]
 8015b02:	4619      	mov	r1, r3
 8015b04:	4812      	ldr	r0, [pc, #72]	@ (8015b50 <stats_display_sys+0x9c>)
 8015b06:	f00b fadd 	bl	80210c4 <iprintf>
  LWIP_PLATFORM_DIAG(("mbox.used:  %"STAT_COUNTER_F"\n\t", sys->mbox.used));
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	899b      	ldrh	r3, [r3, #12]
 8015b0e:	4619      	mov	r1, r3
 8015b10:	4810      	ldr	r0, [pc, #64]	@ (8015b54 <stats_display_sys+0xa0>)
 8015b12:	f00b fad7 	bl	80210c4 <iprintf>
  LWIP_PLATFORM_DIAG(("mbox.max:   %"STAT_COUNTER_F"\n\t", sys->mbox.max));
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	89db      	ldrh	r3, [r3, #14]
 8015b1a:	4619      	mov	r1, r3
 8015b1c:	480e      	ldr	r0, [pc, #56]	@ (8015b58 <stats_display_sys+0xa4>)
 8015b1e:	f00b fad1 	bl	80210c4 <iprintf>
  LWIP_PLATFORM_DIAG(("mbox.err:   %"STAT_COUNTER_F"\n", sys->mbox.err));
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	8a1b      	ldrh	r3, [r3, #16]
 8015b26:	4619      	mov	r1, r3
 8015b28:	480c      	ldr	r0, [pc, #48]	@ (8015b5c <stats_display_sys+0xa8>)
 8015b2a:	f00b facb 	bl	80210c4 <iprintf>
}
 8015b2e:	bf00      	nop
 8015b30:	3708      	adds	r7, #8
 8015b32:	46bd      	mov	sp, r7
 8015b34:	bd80      	pop	{r7, pc}
 8015b36:	bf00      	nop
 8015b38:	080243c0 	.word	0x080243c0
 8015b3c:	080243c8 	.word	0x080243c8
 8015b40:	080243dc 	.word	0x080243dc
 8015b44:	080243f0 	.word	0x080243f0
 8015b48:	08024404 	.word	0x08024404
 8015b4c:	08024418 	.word	0x08024418
 8015b50:	0802442c 	.word	0x0802442c
 8015b54:	08024440 	.word	0x08024440
 8015b58:	08024454 	.word	0x08024454
 8015b5c:	08024468 	.word	0x08024468

08015b60 <stats_display>:
#endif /* SYS_STATS */

void
stats_display(void)
{
 8015b60:	b580      	push	{r7, lr}
 8015b62:	b082      	sub	sp, #8
 8015b64:	af00      	add	r7, sp, #0
  s16_t i;

  LINK_STATS_DISPLAY();
 8015b66:	4920      	ldr	r1, [pc, #128]	@ (8015be8 <stats_display+0x88>)
 8015b68:	4820      	ldr	r0, [pc, #128]	@ (8015bec <stats_display+0x8c>)
 8015b6a:	f7ff fef1 	bl	8015950 <stats_display_proto>
  ETHARP_STATS_DISPLAY();
 8015b6e:	4920      	ldr	r1, [pc, #128]	@ (8015bf0 <stats_display+0x90>)
 8015b70:	4820      	ldr	r0, [pc, #128]	@ (8015bf4 <stats_display+0x94>)
 8015b72:	f7ff feed 	bl	8015950 <stats_display_proto>
  IPFRAG_STATS_DISPLAY();
 8015b76:	4920      	ldr	r1, [pc, #128]	@ (8015bf8 <stats_display+0x98>)
 8015b78:	4820      	ldr	r0, [pc, #128]	@ (8015bfc <stats_display+0x9c>)
 8015b7a:	f7ff fee9 	bl	8015950 <stats_display_proto>
  IP6_FRAG_STATS_DISPLAY();
  IP_STATS_DISPLAY();
 8015b7e:	4920      	ldr	r1, [pc, #128]	@ (8015c00 <stats_display+0xa0>)
 8015b80:	4820      	ldr	r0, [pc, #128]	@ (8015c04 <stats_display+0xa4>)
 8015b82:	f7ff fee5 	bl	8015950 <stats_display_proto>
  ND6_STATS_DISPLAY();
  IP6_STATS_DISPLAY();
  IGMP_STATS_DISPLAY();
  MLD6_STATS_DISPLAY();
  ICMP_STATS_DISPLAY();
 8015b86:	4920      	ldr	r1, [pc, #128]	@ (8015c08 <stats_display+0xa8>)
 8015b88:	4820      	ldr	r0, [pc, #128]	@ (8015c0c <stats_display+0xac>)
 8015b8a:	f7ff fee1 	bl	8015950 <stats_display_proto>
  ICMP6_STATS_DISPLAY();
  UDP_STATS_DISPLAY();
 8015b8e:	4920      	ldr	r1, [pc, #128]	@ (8015c10 <stats_display+0xb0>)
 8015b90:	4820      	ldr	r0, [pc, #128]	@ (8015c14 <stats_display+0xb4>)
 8015b92:	f7ff fedd 	bl	8015950 <stats_display_proto>
  TCP_STATS_DISPLAY();
 8015b96:	4920      	ldr	r1, [pc, #128]	@ (8015c18 <stats_display+0xb8>)
 8015b98:	4820      	ldr	r0, [pc, #128]	@ (8015c1c <stats_display+0xbc>)
 8015b9a:	f7ff fed9 	bl	8015950 <stats_display_proto>
  MEM_STATS_DISPLAY();
 8015b9e:	4920      	ldr	r1, [pc, #128]	@ (8015c20 <stats_display+0xc0>)
 8015ba0:	4820      	ldr	r0, [pc, #128]	@ (8015c24 <stats_display+0xc4>)
 8015ba2:	f7ff ff45 	bl	8015a30 <stats_display_mem>
  for (i = 0; i < MEMP_MAX; i++) {
 8015ba6:	2300      	movs	r3, #0
 8015ba8:	80fb      	strh	r3, [r7, #6]
 8015baa:	e011      	b.n	8015bd0 <stats_display+0x70>
    MEMP_STATS_DISPLAY(i);
 8015bac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015bb0:	4a0e      	ldr	r2, [pc, #56]	@ (8015bec <stats_display+0x8c>)
 8015bb2:	332e      	adds	r3, #46	@ 0x2e
 8015bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015bb8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8015bbc:	4611      	mov	r1, r2
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	f7ff ff66 	bl	8015a90 <stats_display_memp>
  for (i = 0; i < MEMP_MAX; i++) {
 8015bc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015bc8:	b29b      	uxth	r3, r3
 8015bca:	3301      	adds	r3, #1
 8015bcc:	b29b      	uxth	r3, r3
 8015bce:	80fb      	strh	r3, [r7, #6]
 8015bd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015bd4:	2b0c      	cmp	r3, #12
 8015bd6:	dde9      	ble.n	8015bac <stats_display+0x4c>
  }
  SYS_STATS_DISPLAY();
 8015bd8:	4813      	ldr	r0, [pc, #76]	@ (8015c28 <stats_display+0xc8>)
 8015bda:	f7ff ff6b 	bl	8015ab4 <stats_display_sys>
}
 8015bde:	bf00      	nop
 8015be0:	3708      	adds	r7, #8
 8015be2:	46bd      	mov	sp, r7
 8015be4:	bd80      	pop	{r7, pc}
 8015be6:	bf00      	nop
 8015be8:	0802447c 	.word	0x0802447c
 8015bec:	20028318 	.word	0x20028318
 8015bf0:	08024484 	.word	0x08024484
 8015bf4:	20028330 	.word	0x20028330
 8015bf8:	0802448c 	.word	0x0802448c
 8015bfc:	20028348 	.word	0x20028348
 8015c00:	08024494 	.word	0x08024494
 8015c04:	20028360 	.word	0x20028360
 8015c08:	08024498 	.word	0x08024498
 8015c0c:	20028378 	.word	0x20028378
 8015c10:	080244a0 	.word	0x080244a0
 8015c14:	20028390 	.word	0x20028390
 8015c18:	080244a4 	.word	0x080244a4
 8015c1c:	200283a8 	.word	0x200283a8
 8015c20:	080244a8 	.word	0x080244a8
 8015c24:	200283c0 	.word	0x200283c0
 8015c28:	20028404 	.word	0x20028404

08015c2c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8015c2c:	b580      	push	{r7, lr}
 8015c2e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8015c30:	f00b f948 	bl	8020ec4 <rand>
 8015c34:	4603      	mov	r3, r0
 8015c36:	b29b      	uxth	r3, r3
 8015c38:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015c3c:	b29b      	uxth	r3, r3
 8015c3e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8015c42:	b29a      	uxth	r2, r3
 8015c44:	4b01      	ldr	r3, [pc, #4]	@ (8015c4c <tcp_init+0x20>)
 8015c46:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015c48:	bf00      	nop
 8015c4a:	bd80      	pop	{r7, pc}
 8015c4c:	20000068 	.word	0x20000068

08015c50 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8015c50:	b580      	push	{r7, lr}
 8015c52:	b082      	sub	sp, #8
 8015c54:	af00      	add	r7, sp, #0
 8015c56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	7d1b      	ldrb	r3, [r3, #20]
 8015c5c:	2b01      	cmp	r3, #1
 8015c5e:	d105      	bne.n	8015c6c <tcp_free+0x1c>
 8015c60:	4b06      	ldr	r3, [pc, #24]	@ (8015c7c <tcp_free+0x2c>)
 8015c62:	22d4      	movs	r2, #212	@ 0xd4
 8015c64:	4906      	ldr	r1, [pc, #24]	@ (8015c80 <tcp_free+0x30>)
 8015c66:	4807      	ldr	r0, [pc, #28]	@ (8015c84 <tcp_free+0x34>)
 8015c68:	f00b fa2c 	bl	80210c4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8015c6c:	6879      	ldr	r1, [r7, #4]
 8015c6e:	2001      	movs	r0, #1
 8015c70:	f7fe fb9a 	bl	80143a8 <memp_free>
}
 8015c74:	bf00      	nop
 8015c76:	3708      	adds	r7, #8
 8015c78:	46bd      	mov	sp, r7
 8015c7a:	bd80      	pop	{r7, pc}
 8015c7c:	08024528 	.word	0x08024528
 8015c80:	08024558 	.word	0x08024558
 8015c84:	0802456c 	.word	0x0802456c

08015c88 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8015c88:	b580      	push	{r7, lr}
 8015c8a:	b082      	sub	sp, #8
 8015c8c:	af00      	add	r7, sp, #0
 8015c8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	7d1b      	ldrb	r3, [r3, #20]
 8015c94:	2b01      	cmp	r3, #1
 8015c96:	d105      	bne.n	8015ca4 <tcp_free_listen+0x1c>
 8015c98:	4b06      	ldr	r3, [pc, #24]	@ (8015cb4 <tcp_free_listen+0x2c>)
 8015c9a:	22df      	movs	r2, #223	@ 0xdf
 8015c9c:	4906      	ldr	r1, [pc, #24]	@ (8015cb8 <tcp_free_listen+0x30>)
 8015c9e:	4807      	ldr	r0, [pc, #28]	@ (8015cbc <tcp_free_listen+0x34>)
 8015ca0:	f00b fa10 	bl	80210c4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8015ca4:	6879      	ldr	r1, [r7, #4]
 8015ca6:	2002      	movs	r0, #2
 8015ca8:	f7fe fb7e 	bl	80143a8 <memp_free>
}
 8015cac:	bf00      	nop
 8015cae:	3708      	adds	r7, #8
 8015cb0:	46bd      	mov	sp, r7
 8015cb2:	bd80      	pop	{r7, pc}
 8015cb4:	08024528 	.word	0x08024528
 8015cb8:	08024594 	.word	0x08024594
 8015cbc:	0802456c 	.word	0x0802456c

08015cc0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8015cc0:	b580      	push	{r7, lr}
 8015cc2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8015cc4:	f000 ffde 	bl	8016c84 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8015cc8:	4b07      	ldr	r3, [pc, #28]	@ (8015ce8 <tcp_tmr+0x28>)
 8015cca:	781b      	ldrb	r3, [r3, #0]
 8015ccc:	3301      	adds	r3, #1
 8015cce:	b2da      	uxtb	r2, r3
 8015cd0:	4b05      	ldr	r3, [pc, #20]	@ (8015ce8 <tcp_tmr+0x28>)
 8015cd2:	701a      	strb	r2, [r3, #0]
 8015cd4:	4b04      	ldr	r3, [pc, #16]	@ (8015ce8 <tcp_tmr+0x28>)
 8015cd6:	781b      	ldrb	r3, [r3, #0]
 8015cd8:	f003 0301 	and.w	r3, r3, #1
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d001      	beq.n	8015ce4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8015ce0:	f000 fc8e 	bl	8016600 <tcp_slowtmr>
  }
}
 8015ce4:	bf00      	nop
 8015ce6:	bd80      	pop	{r7, pc}
 8015ce8:	2002842d 	.word	0x2002842d

08015cec <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8015cec:	b580      	push	{r7, lr}
 8015cee:	b084      	sub	sp, #16
 8015cf0:	af00      	add	r7, sp, #0
 8015cf2:	6078      	str	r0, [r7, #4]
 8015cf4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8015cf6:	683b      	ldr	r3, [r7, #0]
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d105      	bne.n	8015d08 <tcp_remove_listener+0x1c>
 8015cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8015d34 <tcp_remove_listener+0x48>)
 8015cfe:	22ff      	movs	r2, #255	@ 0xff
 8015d00:	490d      	ldr	r1, [pc, #52]	@ (8015d38 <tcp_remove_listener+0x4c>)
 8015d02:	480e      	ldr	r0, [pc, #56]	@ (8015d3c <tcp_remove_listener+0x50>)
 8015d04:	f00b f9de 	bl	80210c4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	60fb      	str	r3, [r7, #12]
 8015d0c:	e00a      	b.n	8015d24 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015d12:	683a      	ldr	r2, [r7, #0]
 8015d14:	429a      	cmp	r2, r3
 8015d16:	d102      	bne.n	8015d1e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8015d18:	68fb      	ldr	r3, [r7, #12]
 8015d1a:	2200      	movs	r2, #0
 8015d1c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8015d1e:	68fb      	ldr	r3, [r7, #12]
 8015d20:	68db      	ldr	r3, [r3, #12]
 8015d22:	60fb      	str	r3, [r7, #12]
 8015d24:	68fb      	ldr	r3, [r7, #12]
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d1f1      	bne.n	8015d0e <tcp_remove_listener+0x22>
    }
  }
}
 8015d2a:	bf00      	nop
 8015d2c:	bf00      	nop
 8015d2e:	3710      	adds	r7, #16
 8015d30:	46bd      	mov	sp, r7
 8015d32:	bd80      	pop	{r7, pc}
 8015d34:	08024528 	.word	0x08024528
 8015d38:	080245b0 	.word	0x080245b0
 8015d3c:	0802456c 	.word	0x0802456c

08015d40 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8015d40:	b580      	push	{r7, lr}
 8015d42:	b084      	sub	sp, #16
 8015d44:	af00      	add	r7, sp, #0
 8015d46:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	d106      	bne.n	8015d5c <tcp_listen_closed+0x1c>
 8015d4e:	4b14      	ldr	r3, [pc, #80]	@ (8015da0 <tcp_listen_closed+0x60>)
 8015d50:	f240 1211 	movw	r2, #273	@ 0x111
 8015d54:	4913      	ldr	r1, [pc, #76]	@ (8015da4 <tcp_listen_closed+0x64>)
 8015d56:	4814      	ldr	r0, [pc, #80]	@ (8015da8 <tcp_listen_closed+0x68>)
 8015d58:	f00b f9b4 	bl	80210c4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	7d1b      	ldrb	r3, [r3, #20]
 8015d60:	2b01      	cmp	r3, #1
 8015d62:	d006      	beq.n	8015d72 <tcp_listen_closed+0x32>
 8015d64:	4b0e      	ldr	r3, [pc, #56]	@ (8015da0 <tcp_listen_closed+0x60>)
 8015d66:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8015d6a:	4910      	ldr	r1, [pc, #64]	@ (8015dac <tcp_listen_closed+0x6c>)
 8015d6c:	480e      	ldr	r0, [pc, #56]	@ (8015da8 <tcp_listen_closed+0x68>)
 8015d6e:	f00b f9a9 	bl	80210c4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8015d72:	2301      	movs	r3, #1
 8015d74:	60fb      	str	r3, [r7, #12]
 8015d76:	e00b      	b.n	8015d90 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8015d78:	4a0d      	ldr	r2, [pc, #52]	@ (8015db0 <tcp_listen_closed+0x70>)
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	6879      	ldr	r1, [r7, #4]
 8015d84:	4618      	mov	r0, r3
 8015d86:	f7ff ffb1 	bl	8015cec <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8015d8a:	68fb      	ldr	r3, [r7, #12]
 8015d8c:	3301      	adds	r3, #1
 8015d8e:	60fb      	str	r3, [r7, #12]
 8015d90:	68fb      	ldr	r3, [r7, #12]
 8015d92:	2b03      	cmp	r3, #3
 8015d94:	d9f0      	bls.n	8015d78 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8015d96:	bf00      	nop
 8015d98:	bf00      	nop
 8015d9a:	3710      	adds	r7, #16
 8015d9c:	46bd      	mov	sp, r7
 8015d9e:	bd80      	pop	{r7, pc}
 8015da0:	08024528 	.word	0x08024528
 8015da4:	080245d8 	.word	0x080245d8
 8015da8:	0802456c 	.word	0x0802456c
 8015dac:	080245e4 	.word	0x080245e4
 8015db0:	0802723c 	.word	0x0802723c

08015db4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8015db4:	b5b0      	push	{r4, r5, r7, lr}
 8015db6:	b088      	sub	sp, #32
 8015db8:	af04      	add	r7, sp, #16
 8015dba:	6078      	str	r0, [r7, #4]
 8015dbc:	460b      	mov	r3, r1
 8015dbe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	d106      	bne.n	8015dd4 <tcp_close_shutdown+0x20>
 8015dc6:	4b63      	ldr	r3, [pc, #396]	@ (8015f54 <tcp_close_shutdown+0x1a0>)
 8015dc8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8015dcc:	4962      	ldr	r1, [pc, #392]	@ (8015f58 <tcp_close_shutdown+0x1a4>)
 8015dce:	4863      	ldr	r0, [pc, #396]	@ (8015f5c <tcp_close_shutdown+0x1a8>)
 8015dd0:	f00b f978 	bl	80210c4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8015dd4:	78fb      	ldrb	r3, [r7, #3]
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d066      	beq.n	8015ea8 <tcp_close_shutdown+0xf4>
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	7d1b      	ldrb	r3, [r3, #20]
 8015dde:	2b04      	cmp	r3, #4
 8015de0:	d003      	beq.n	8015dea <tcp_close_shutdown+0x36>
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	7d1b      	ldrb	r3, [r3, #20]
 8015de6:	2b07      	cmp	r3, #7
 8015de8:	d15e      	bne.n	8015ea8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d104      	bne.n	8015dfc <tcp_close_shutdown+0x48>
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015df6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8015dfa:	d055      	beq.n	8015ea8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	8b5b      	ldrh	r3, [r3, #26]
 8015e00:	f003 0310 	and.w	r3, r3, #16
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d106      	bne.n	8015e16 <tcp_close_shutdown+0x62>
 8015e08:	4b52      	ldr	r3, [pc, #328]	@ (8015f54 <tcp_close_shutdown+0x1a0>)
 8015e0a:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8015e0e:	4954      	ldr	r1, [pc, #336]	@ (8015f60 <tcp_close_shutdown+0x1ac>)
 8015e10:	4852      	ldr	r0, [pc, #328]	@ (8015f5c <tcp_close_shutdown+0x1a8>)
 8015e12:	f00b f957 	bl	80210c4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8015e1e:	687d      	ldr	r5, [r7, #4]
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	3304      	adds	r3, #4
 8015e24:	687a      	ldr	r2, [r7, #4]
 8015e26:	8ad2      	ldrh	r2, [r2, #22]
 8015e28:	6879      	ldr	r1, [r7, #4]
 8015e2a:	8b09      	ldrh	r1, [r1, #24]
 8015e2c:	9102      	str	r1, [sp, #8]
 8015e2e:	9201      	str	r2, [sp, #4]
 8015e30:	9300      	str	r3, [sp, #0]
 8015e32:	462b      	mov	r3, r5
 8015e34:	4622      	mov	r2, r4
 8015e36:	4601      	mov	r1, r0
 8015e38:	6878      	ldr	r0, [r7, #4]
 8015e3a:	f005 fe55 	bl	801bae8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8015e3e:	6878      	ldr	r0, [r7, #4]
 8015e40:	f001 fb0e 	bl	8017460 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8015e44:	4b47      	ldr	r3, [pc, #284]	@ (8015f64 <tcp_close_shutdown+0x1b0>)
 8015e46:	681b      	ldr	r3, [r3, #0]
 8015e48:	687a      	ldr	r2, [r7, #4]
 8015e4a:	429a      	cmp	r2, r3
 8015e4c:	d105      	bne.n	8015e5a <tcp_close_shutdown+0xa6>
 8015e4e:	4b45      	ldr	r3, [pc, #276]	@ (8015f64 <tcp_close_shutdown+0x1b0>)
 8015e50:	681b      	ldr	r3, [r3, #0]
 8015e52:	68db      	ldr	r3, [r3, #12]
 8015e54:	4a43      	ldr	r2, [pc, #268]	@ (8015f64 <tcp_close_shutdown+0x1b0>)
 8015e56:	6013      	str	r3, [r2, #0]
 8015e58:	e013      	b.n	8015e82 <tcp_close_shutdown+0xce>
 8015e5a:	4b42      	ldr	r3, [pc, #264]	@ (8015f64 <tcp_close_shutdown+0x1b0>)
 8015e5c:	681b      	ldr	r3, [r3, #0]
 8015e5e:	60fb      	str	r3, [r7, #12]
 8015e60:	e00c      	b.n	8015e7c <tcp_close_shutdown+0xc8>
 8015e62:	68fb      	ldr	r3, [r7, #12]
 8015e64:	68db      	ldr	r3, [r3, #12]
 8015e66:	687a      	ldr	r2, [r7, #4]
 8015e68:	429a      	cmp	r2, r3
 8015e6a:	d104      	bne.n	8015e76 <tcp_close_shutdown+0xc2>
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	68da      	ldr	r2, [r3, #12]
 8015e70:	68fb      	ldr	r3, [r7, #12]
 8015e72:	60da      	str	r2, [r3, #12]
 8015e74:	e005      	b.n	8015e82 <tcp_close_shutdown+0xce>
 8015e76:	68fb      	ldr	r3, [r7, #12]
 8015e78:	68db      	ldr	r3, [r3, #12]
 8015e7a:	60fb      	str	r3, [r7, #12]
 8015e7c:	68fb      	ldr	r3, [r7, #12]
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d1ef      	bne.n	8015e62 <tcp_close_shutdown+0xae>
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	2200      	movs	r2, #0
 8015e86:	60da      	str	r2, [r3, #12]
 8015e88:	4b37      	ldr	r3, [pc, #220]	@ (8015f68 <tcp_close_shutdown+0x1b4>)
 8015e8a:	2201      	movs	r2, #1
 8015e8c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8015e8e:	4b37      	ldr	r3, [pc, #220]	@ (8015f6c <tcp_close_shutdown+0x1b8>)
 8015e90:	681b      	ldr	r3, [r3, #0]
 8015e92:	687a      	ldr	r2, [r7, #4]
 8015e94:	429a      	cmp	r2, r3
 8015e96:	d102      	bne.n	8015e9e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8015e98:	f004 f80e 	bl	8019eb8 <tcp_trigger_input_pcb_close>
 8015e9c:	e002      	b.n	8015ea4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8015e9e:	6878      	ldr	r0, [r7, #4]
 8015ea0:	f7ff fed6 	bl	8015c50 <tcp_free>
      }
      return ERR_OK;
 8015ea4:	2300      	movs	r3, #0
 8015ea6:	e050      	b.n	8015f4a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	7d1b      	ldrb	r3, [r3, #20]
 8015eac:	2b02      	cmp	r3, #2
 8015eae:	d03b      	beq.n	8015f28 <tcp_close_shutdown+0x174>
 8015eb0:	2b02      	cmp	r3, #2
 8015eb2:	dc44      	bgt.n	8015f3e <tcp_close_shutdown+0x18a>
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d002      	beq.n	8015ebe <tcp_close_shutdown+0x10a>
 8015eb8:	2b01      	cmp	r3, #1
 8015eba:	d02a      	beq.n	8015f12 <tcp_close_shutdown+0x15e>
 8015ebc:	e03f      	b.n	8015f3e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	8adb      	ldrh	r3, [r3, #22]
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	d021      	beq.n	8015f0a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8015ec6:	4b2a      	ldr	r3, [pc, #168]	@ (8015f70 <tcp_close_shutdown+0x1bc>)
 8015ec8:	681b      	ldr	r3, [r3, #0]
 8015eca:	687a      	ldr	r2, [r7, #4]
 8015ecc:	429a      	cmp	r2, r3
 8015ece:	d105      	bne.n	8015edc <tcp_close_shutdown+0x128>
 8015ed0:	4b27      	ldr	r3, [pc, #156]	@ (8015f70 <tcp_close_shutdown+0x1bc>)
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	68db      	ldr	r3, [r3, #12]
 8015ed6:	4a26      	ldr	r2, [pc, #152]	@ (8015f70 <tcp_close_shutdown+0x1bc>)
 8015ed8:	6013      	str	r3, [r2, #0]
 8015eda:	e013      	b.n	8015f04 <tcp_close_shutdown+0x150>
 8015edc:	4b24      	ldr	r3, [pc, #144]	@ (8015f70 <tcp_close_shutdown+0x1bc>)
 8015ede:	681b      	ldr	r3, [r3, #0]
 8015ee0:	60bb      	str	r3, [r7, #8]
 8015ee2:	e00c      	b.n	8015efe <tcp_close_shutdown+0x14a>
 8015ee4:	68bb      	ldr	r3, [r7, #8]
 8015ee6:	68db      	ldr	r3, [r3, #12]
 8015ee8:	687a      	ldr	r2, [r7, #4]
 8015eea:	429a      	cmp	r2, r3
 8015eec:	d104      	bne.n	8015ef8 <tcp_close_shutdown+0x144>
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	68da      	ldr	r2, [r3, #12]
 8015ef2:	68bb      	ldr	r3, [r7, #8]
 8015ef4:	60da      	str	r2, [r3, #12]
 8015ef6:	e005      	b.n	8015f04 <tcp_close_shutdown+0x150>
 8015ef8:	68bb      	ldr	r3, [r7, #8]
 8015efa:	68db      	ldr	r3, [r3, #12]
 8015efc:	60bb      	str	r3, [r7, #8]
 8015efe:	68bb      	ldr	r3, [r7, #8]
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d1ef      	bne.n	8015ee4 <tcp_close_shutdown+0x130>
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	2200      	movs	r2, #0
 8015f08:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8015f0a:	6878      	ldr	r0, [r7, #4]
 8015f0c:	f7ff fea0 	bl	8015c50 <tcp_free>
      break;
 8015f10:	e01a      	b.n	8015f48 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8015f12:	6878      	ldr	r0, [r7, #4]
 8015f14:	f7ff ff14 	bl	8015d40 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8015f18:	6879      	ldr	r1, [r7, #4]
 8015f1a:	4816      	ldr	r0, [pc, #88]	@ (8015f74 <tcp_close_shutdown+0x1c0>)
 8015f1c:	f001 faf0 	bl	8017500 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8015f20:	6878      	ldr	r0, [r7, #4]
 8015f22:	f7ff feb1 	bl	8015c88 <tcp_free_listen>
      break;
 8015f26:	e00f      	b.n	8015f48 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8015f28:	6879      	ldr	r1, [r7, #4]
 8015f2a:	480e      	ldr	r0, [pc, #56]	@ (8015f64 <tcp_close_shutdown+0x1b0>)
 8015f2c:	f001 fae8 	bl	8017500 <tcp_pcb_remove>
 8015f30:	4b0d      	ldr	r3, [pc, #52]	@ (8015f68 <tcp_close_shutdown+0x1b4>)
 8015f32:	2201      	movs	r2, #1
 8015f34:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8015f36:	6878      	ldr	r0, [r7, #4]
 8015f38:	f7ff fe8a 	bl	8015c50 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8015f3c:	e004      	b.n	8015f48 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8015f3e:	6878      	ldr	r0, [r7, #4]
 8015f40:	f000 f81a 	bl	8015f78 <tcp_close_shutdown_fin>
 8015f44:	4603      	mov	r3, r0
 8015f46:	e000      	b.n	8015f4a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8015f48:	2300      	movs	r3, #0
}
 8015f4a:	4618      	mov	r0, r3
 8015f4c:	3710      	adds	r7, #16
 8015f4e:	46bd      	mov	sp, r7
 8015f50:	bdb0      	pop	{r4, r5, r7, pc}
 8015f52:	bf00      	nop
 8015f54:	08024528 	.word	0x08024528
 8015f58:	080245fc 	.word	0x080245fc
 8015f5c:	0802456c 	.word	0x0802456c
 8015f60:	0802461c 	.word	0x0802461c
 8015f64:	20028424 	.word	0x20028424
 8015f68:	2002842c 	.word	0x2002842c
 8015f6c:	20028468 	.word	0x20028468
 8015f70:	2002841c 	.word	0x2002841c
 8015f74:	20028420 	.word	0x20028420

08015f78 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8015f78:	b580      	push	{r7, lr}
 8015f7a:	b084      	sub	sp, #16
 8015f7c:	af00      	add	r7, sp, #0
 8015f7e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d106      	bne.n	8015f94 <tcp_close_shutdown_fin+0x1c>
 8015f86:	4b2e      	ldr	r3, [pc, #184]	@ (8016040 <tcp_close_shutdown_fin+0xc8>)
 8015f88:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8015f8c:	492d      	ldr	r1, [pc, #180]	@ (8016044 <tcp_close_shutdown_fin+0xcc>)
 8015f8e:	482e      	ldr	r0, [pc, #184]	@ (8016048 <tcp_close_shutdown_fin+0xd0>)
 8015f90:	f00b f898 	bl	80210c4 <iprintf>

  switch (pcb->state) {
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	7d1b      	ldrb	r3, [r3, #20]
 8015f98:	2b07      	cmp	r3, #7
 8015f9a:	d020      	beq.n	8015fde <tcp_close_shutdown_fin+0x66>
 8015f9c:	2b07      	cmp	r3, #7
 8015f9e:	dc2b      	bgt.n	8015ff8 <tcp_close_shutdown_fin+0x80>
 8015fa0:	2b03      	cmp	r3, #3
 8015fa2:	d002      	beq.n	8015faa <tcp_close_shutdown_fin+0x32>
 8015fa4:	2b04      	cmp	r3, #4
 8015fa6:	d00d      	beq.n	8015fc4 <tcp_close_shutdown_fin+0x4c>
 8015fa8:	e026      	b.n	8015ff8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8015faa:	6878      	ldr	r0, [r7, #4]
 8015fac:	f004 fe78 	bl	801aca0 <tcp_send_fin>
 8015fb0:	4603      	mov	r3, r0
 8015fb2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8015fb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d11f      	bne.n	8015ffc <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	2205      	movs	r2, #5
 8015fc0:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015fc2:	e01b      	b.n	8015ffc <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8015fc4:	6878      	ldr	r0, [r7, #4]
 8015fc6:	f004 fe6b 	bl	801aca0 <tcp_send_fin>
 8015fca:	4603      	mov	r3, r0
 8015fcc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8015fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d114      	bne.n	8016000 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	2205      	movs	r2, #5
 8015fda:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015fdc:	e010      	b.n	8016000 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8015fde:	6878      	ldr	r0, [r7, #4]
 8015fe0:	f004 fe5e 	bl	801aca0 <tcp_send_fin>
 8015fe4:	4603      	mov	r3, r0
 8015fe6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8015fe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	d109      	bne.n	8016004 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	2209      	movs	r2, #9
 8015ff4:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015ff6:	e005      	b.n	8016004 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8015ff8:	2300      	movs	r3, #0
 8015ffa:	e01c      	b.n	8016036 <tcp_close_shutdown_fin+0xbe>
      break;
 8015ffc:	bf00      	nop
 8015ffe:	e002      	b.n	8016006 <tcp_close_shutdown_fin+0x8e>
      break;
 8016000:	bf00      	nop
 8016002:	e000      	b.n	8016006 <tcp_close_shutdown_fin+0x8e>
      break;
 8016004:	bf00      	nop
  }

  if (err == ERR_OK) {
 8016006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801600a:	2b00      	cmp	r3, #0
 801600c:	d103      	bne.n	8016016 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801600e:	6878      	ldr	r0, [r7, #4]
 8016010:	f004 ff96 	bl	801af40 <tcp_output>
 8016014:	e00d      	b.n	8016032 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8016016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801601a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801601e:	d108      	bne.n	8016032 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	8b5b      	ldrh	r3, [r3, #26]
 8016024:	f043 0308 	orr.w	r3, r3, #8
 8016028:	b29a      	uxth	r2, r3
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801602e:	2300      	movs	r3, #0
 8016030:	e001      	b.n	8016036 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8016032:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016036:	4618      	mov	r0, r3
 8016038:	3710      	adds	r7, #16
 801603a:	46bd      	mov	sp, r7
 801603c:	bd80      	pop	{r7, pc}
 801603e:	bf00      	nop
 8016040:	08024528 	.word	0x08024528
 8016044:	080245d8 	.word	0x080245d8
 8016048:	0802456c 	.word	0x0802456c

0801604c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801604c:	b580      	push	{r7, lr}
 801604e:	b082      	sub	sp, #8
 8016050:	af00      	add	r7, sp, #0
 8016052:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	2b00      	cmp	r3, #0
 8016058:	d109      	bne.n	801606e <tcp_close+0x22>
 801605a:	4b0f      	ldr	r3, [pc, #60]	@ (8016098 <tcp_close+0x4c>)
 801605c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8016060:	490e      	ldr	r1, [pc, #56]	@ (801609c <tcp_close+0x50>)
 8016062:	480f      	ldr	r0, [pc, #60]	@ (80160a0 <tcp_close+0x54>)
 8016064:	f00b f82e 	bl	80210c4 <iprintf>
 8016068:	f06f 030f 	mvn.w	r3, #15
 801606c:	e00f      	b.n	801608e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	7d1b      	ldrb	r3, [r3, #20]
 8016072:	2b01      	cmp	r3, #1
 8016074:	d006      	beq.n	8016084 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	8b5b      	ldrh	r3, [r3, #26]
 801607a:	f043 0310 	orr.w	r3, r3, #16
 801607e:	b29a      	uxth	r2, r3
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8016084:	2101      	movs	r1, #1
 8016086:	6878      	ldr	r0, [r7, #4]
 8016088:	f7ff fe94 	bl	8015db4 <tcp_close_shutdown>
 801608c:	4603      	mov	r3, r0
}
 801608e:	4618      	mov	r0, r3
 8016090:	3708      	adds	r7, #8
 8016092:	46bd      	mov	sp, r7
 8016094:	bd80      	pop	{r7, pc}
 8016096:	bf00      	nop
 8016098:	08024528 	.word	0x08024528
 801609c:	08024638 	.word	0x08024638
 80160a0:	0802456c 	.word	0x0802456c

080160a4 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 80160a4:	b580      	push	{r7, lr}
 80160a6:	b084      	sub	sp, #16
 80160a8:	af00      	add	r7, sp, #0
 80160aa:	60f8      	str	r0, [r7, #12]
 80160ac:	60b9      	str	r1, [r7, #8]
 80160ae:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 80160b0:	68fb      	ldr	r3, [r7, #12]
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d109      	bne.n	80160ca <tcp_shutdown+0x26>
 80160b6:	4b26      	ldr	r3, [pc, #152]	@ (8016150 <tcp_shutdown+0xac>)
 80160b8:	f240 2207 	movw	r2, #519	@ 0x207
 80160bc:	4925      	ldr	r1, [pc, #148]	@ (8016154 <tcp_shutdown+0xb0>)
 80160be:	4826      	ldr	r0, [pc, #152]	@ (8016158 <tcp_shutdown+0xb4>)
 80160c0:	f00b f800 	bl	80210c4 <iprintf>
 80160c4:	f06f 030f 	mvn.w	r3, #15
 80160c8:	e03d      	b.n	8016146 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 80160ca:	68fb      	ldr	r3, [r7, #12]
 80160cc:	7d1b      	ldrb	r3, [r3, #20]
 80160ce:	2b01      	cmp	r3, #1
 80160d0:	d102      	bne.n	80160d8 <tcp_shutdown+0x34>
    return ERR_CONN;
 80160d2:	f06f 030a 	mvn.w	r3, #10
 80160d6:	e036      	b.n	8016146 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 80160d8:	68bb      	ldr	r3, [r7, #8]
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d01b      	beq.n	8016116 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80160de:	68fb      	ldr	r3, [r7, #12]
 80160e0:	8b5b      	ldrh	r3, [r3, #26]
 80160e2:	f043 0310 	orr.w	r3, r3, #16
 80160e6:	b29a      	uxth	r2, r3
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	d005      	beq.n	80160fe <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 80160f2:	2101      	movs	r1, #1
 80160f4:	68f8      	ldr	r0, [r7, #12]
 80160f6:	f7ff fe5d 	bl	8015db4 <tcp_close_shutdown>
 80160fa:	4603      	mov	r3, r0
 80160fc:	e023      	b.n	8016146 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 80160fe:	68fb      	ldr	r3, [r7, #12]
 8016100:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016102:	2b00      	cmp	r3, #0
 8016104:	d007      	beq.n	8016116 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801610a:	4618      	mov	r0, r3
 801610c:	f7ff f93a 	bl	8015384 <pbuf_free>
      pcb->refused_data = NULL;
 8016110:	68fb      	ldr	r3, [r7, #12]
 8016112:	2200      	movs	r2, #0
 8016114:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	2b00      	cmp	r3, #0
 801611a:	d013      	beq.n	8016144 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	7d1b      	ldrb	r3, [r3, #20]
 8016120:	2b04      	cmp	r3, #4
 8016122:	dc02      	bgt.n	801612a <tcp_shutdown+0x86>
 8016124:	2b03      	cmp	r3, #3
 8016126:	da02      	bge.n	801612e <tcp_shutdown+0x8a>
 8016128:	e009      	b.n	801613e <tcp_shutdown+0x9a>
 801612a:	2b07      	cmp	r3, #7
 801612c:	d107      	bne.n	801613e <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 801612e:	68bb      	ldr	r3, [r7, #8]
 8016130:	b2db      	uxtb	r3, r3
 8016132:	4619      	mov	r1, r3
 8016134:	68f8      	ldr	r0, [r7, #12]
 8016136:	f7ff fe3d 	bl	8015db4 <tcp_close_shutdown>
 801613a:	4603      	mov	r3, r0
 801613c:	e003      	b.n	8016146 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 801613e:	f06f 030a 	mvn.w	r3, #10
 8016142:	e000      	b.n	8016146 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8016144:	2300      	movs	r3, #0
}
 8016146:	4618      	mov	r0, r3
 8016148:	3710      	adds	r7, #16
 801614a:	46bd      	mov	sp, r7
 801614c:	bd80      	pop	{r7, pc}
 801614e:	bf00      	nop
 8016150:	08024528 	.word	0x08024528
 8016154:	08024650 	.word	0x08024650
 8016158:	0802456c 	.word	0x0802456c

0801615c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801615c:	b580      	push	{r7, lr}
 801615e:	b08e      	sub	sp, #56	@ 0x38
 8016160:	af04      	add	r7, sp, #16
 8016162:	6078      	str	r0, [r7, #4]
 8016164:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	2b00      	cmp	r3, #0
 801616a:	d107      	bne.n	801617c <tcp_abandon+0x20>
 801616c:	4b52      	ldr	r3, [pc, #328]	@ (80162b8 <tcp_abandon+0x15c>)
 801616e:	f240 223d 	movw	r2, #573	@ 0x23d
 8016172:	4952      	ldr	r1, [pc, #328]	@ (80162bc <tcp_abandon+0x160>)
 8016174:	4852      	ldr	r0, [pc, #328]	@ (80162c0 <tcp_abandon+0x164>)
 8016176:	f00a ffa5 	bl	80210c4 <iprintf>
 801617a:	e099      	b.n	80162b0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	7d1b      	ldrb	r3, [r3, #20]
 8016180:	2b01      	cmp	r3, #1
 8016182:	d106      	bne.n	8016192 <tcp_abandon+0x36>
 8016184:	4b4c      	ldr	r3, [pc, #304]	@ (80162b8 <tcp_abandon+0x15c>)
 8016186:	f44f 7210 	mov.w	r2, #576	@ 0x240
 801618a:	494e      	ldr	r1, [pc, #312]	@ (80162c4 <tcp_abandon+0x168>)
 801618c:	484c      	ldr	r0, [pc, #304]	@ (80162c0 <tcp_abandon+0x164>)
 801618e:	f00a ff99 	bl	80210c4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	7d1b      	ldrb	r3, [r3, #20]
 8016196:	2b0a      	cmp	r3, #10
 8016198:	d107      	bne.n	80161aa <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801619a:	6879      	ldr	r1, [r7, #4]
 801619c:	484a      	ldr	r0, [pc, #296]	@ (80162c8 <tcp_abandon+0x16c>)
 801619e:	f001 f9af 	bl	8017500 <tcp_pcb_remove>
    tcp_free(pcb);
 80161a2:	6878      	ldr	r0, [r7, #4]
 80161a4:	f7ff fd54 	bl	8015c50 <tcp_free>
 80161a8:	e082      	b.n	80162b0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80161aa:	2300      	movs	r3, #0
 80161ac:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 80161ae:	2300      	movs	r3, #0
 80161b0:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80161b6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80161bc:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80161c4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	691b      	ldr	r3, [r3, #16]
 80161ca:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	7d1b      	ldrb	r3, [r3, #20]
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d126      	bne.n	8016222 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	8adb      	ldrh	r3, [r3, #22]
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d02e      	beq.n	801623a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80161dc:	4b3b      	ldr	r3, [pc, #236]	@ (80162cc <tcp_abandon+0x170>)
 80161de:	681b      	ldr	r3, [r3, #0]
 80161e0:	687a      	ldr	r2, [r7, #4]
 80161e2:	429a      	cmp	r2, r3
 80161e4:	d105      	bne.n	80161f2 <tcp_abandon+0x96>
 80161e6:	4b39      	ldr	r3, [pc, #228]	@ (80162cc <tcp_abandon+0x170>)
 80161e8:	681b      	ldr	r3, [r3, #0]
 80161ea:	68db      	ldr	r3, [r3, #12]
 80161ec:	4a37      	ldr	r2, [pc, #220]	@ (80162cc <tcp_abandon+0x170>)
 80161ee:	6013      	str	r3, [r2, #0]
 80161f0:	e013      	b.n	801621a <tcp_abandon+0xbe>
 80161f2:	4b36      	ldr	r3, [pc, #216]	@ (80162cc <tcp_abandon+0x170>)
 80161f4:	681b      	ldr	r3, [r3, #0]
 80161f6:	61fb      	str	r3, [r7, #28]
 80161f8:	e00c      	b.n	8016214 <tcp_abandon+0xb8>
 80161fa:	69fb      	ldr	r3, [r7, #28]
 80161fc:	68db      	ldr	r3, [r3, #12]
 80161fe:	687a      	ldr	r2, [r7, #4]
 8016200:	429a      	cmp	r2, r3
 8016202:	d104      	bne.n	801620e <tcp_abandon+0xb2>
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	68da      	ldr	r2, [r3, #12]
 8016208:	69fb      	ldr	r3, [r7, #28]
 801620a:	60da      	str	r2, [r3, #12]
 801620c:	e005      	b.n	801621a <tcp_abandon+0xbe>
 801620e:	69fb      	ldr	r3, [r7, #28]
 8016210:	68db      	ldr	r3, [r3, #12]
 8016212:	61fb      	str	r3, [r7, #28]
 8016214:	69fb      	ldr	r3, [r7, #28]
 8016216:	2b00      	cmp	r3, #0
 8016218:	d1ef      	bne.n	80161fa <tcp_abandon+0x9e>
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	2200      	movs	r2, #0
 801621e:	60da      	str	r2, [r3, #12]
 8016220:	e00b      	b.n	801623a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8016222:	683b      	ldr	r3, [r7, #0]
 8016224:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	8adb      	ldrh	r3, [r3, #22]
 801622a:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801622c:	6879      	ldr	r1, [r7, #4]
 801622e:	4828      	ldr	r0, [pc, #160]	@ (80162d0 <tcp_abandon+0x174>)
 8016230:	f001 f966 	bl	8017500 <tcp_pcb_remove>
 8016234:	4b27      	ldr	r3, [pc, #156]	@ (80162d4 <tcp_abandon+0x178>)
 8016236:	2201      	movs	r2, #1
 8016238:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801623e:	2b00      	cmp	r3, #0
 8016240:	d004      	beq.n	801624c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016246:	4618      	mov	r0, r3
 8016248:	f000 fdfc 	bl	8016e44 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016250:	2b00      	cmp	r3, #0
 8016252:	d004      	beq.n	801625e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016258:	4618      	mov	r0, r3
 801625a:	f000 fdf3 	bl	8016e44 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016262:	2b00      	cmp	r3, #0
 8016264:	d004      	beq.n	8016270 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801626a:	4618      	mov	r0, r3
 801626c:	f000 fdea 	bl	8016e44 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8016270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016272:	2b00      	cmp	r3, #0
 8016274:	d00e      	beq.n	8016294 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8016276:	6879      	ldr	r1, [r7, #4]
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	3304      	adds	r3, #4
 801627c:	687a      	ldr	r2, [r7, #4]
 801627e:	8b12      	ldrh	r2, [r2, #24]
 8016280:	9202      	str	r2, [sp, #8]
 8016282:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8016284:	9201      	str	r2, [sp, #4]
 8016286:	9300      	str	r3, [sp, #0]
 8016288:	460b      	mov	r3, r1
 801628a:	697a      	ldr	r2, [r7, #20]
 801628c:	69b9      	ldr	r1, [r7, #24]
 801628e:	6878      	ldr	r0, [r7, #4]
 8016290:	f005 fc2a 	bl	801bae8 <tcp_rst>
    }
    last_state = pcb->state;
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	7d1b      	ldrb	r3, [r3, #20]
 8016298:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801629a:	6878      	ldr	r0, [r7, #4]
 801629c:	f7ff fcd8 	bl	8015c50 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80162a0:	693b      	ldr	r3, [r7, #16]
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	d004      	beq.n	80162b0 <tcp_abandon+0x154>
 80162a6:	693b      	ldr	r3, [r7, #16]
 80162a8:	f06f 010c 	mvn.w	r1, #12
 80162ac:	68f8      	ldr	r0, [r7, #12]
 80162ae:	4798      	blx	r3
  }
}
 80162b0:	3728      	adds	r7, #40	@ 0x28
 80162b2:	46bd      	mov	sp, r7
 80162b4:	bd80      	pop	{r7, pc}
 80162b6:	bf00      	nop
 80162b8:	08024528 	.word	0x08024528
 80162bc:	0802466c 	.word	0x0802466c
 80162c0:	0802456c 	.word	0x0802456c
 80162c4:	08024688 	.word	0x08024688
 80162c8:	20028428 	.word	0x20028428
 80162cc:	2002841c 	.word	0x2002841c
 80162d0:	20028424 	.word	0x20028424
 80162d4:	2002842c 	.word	0x2002842c

080162d8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80162d8:	b580      	push	{r7, lr}
 80162da:	b082      	sub	sp, #8
 80162dc:	af00      	add	r7, sp, #0
 80162de:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80162e0:	2101      	movs	r1, #1
 80162e2:	6878      	ldr	r0, [r7, #4]
 80162e4:	f7ff ff3a 	bl	801615c <tcp_abandon>
}
 80162e8:	bf00      	nop
 80162ea:	3708      	adds	r7, #8
 80162ec:	46bd      	mov	sp, r7
 80162ee:	bd80      	pop	{r7, pc}

080162f0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80162f0:	b580      	push	{r7, lr}
 80162f2:	b088      	sub	sp, #32
 80162f4:	af00      	add	r7, sp, #0
 80162f6:	60f8      	str	r0, [r7, #12]
 80162f8:	60b9      	str	r1, [r7, #8]
 80162fa:	4613      	mov	r3, r2
 80162fc:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80162fe:	2304      	movs	r3, #4
 8016300:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8016302:	68bb      	ldr	r3, [r7, #8]
 8016304:	2b00      	cmp	r3, #0
 8016306:	d101      	bne.n	801630c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8016308:	4b3e      	ldr	r3, [pc, #248]	@ (8016404 <tcp_bind+0x114>)
 801630a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	2b00      	cmp	r3, #0
 8016310:	d109      	bne.n	8016326 <tcp_bind+0x36>
 8016312:	4b3d      	ldr	r3, [pc, #244]	@ (8016408 <tcp_bind+0x118>)
 8016314:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8016318:	493c      	ldr	r1, [pc, #240]	@ (801640c <tcp_bind+0x11c>)
 801631a:	483d      	ldr	r0, [pc, #244]	@ (8016410 <tcp_bind+0x120>)
 801631c:	f00a fed2 	bl	80210c4 <iprintf>
 8016320:	f06f 030f 	mvn.w	r3, #15
 8016324:	e06a      	b.n	80163fc <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	7d1b      	ldrb	r3, [r3, #20]
 801632a:	2b00      	cmp	r3, #0
 801632c:	d009      	beq.n	8016342 <tcp_bind+0x52>
 801632e:	4b36      	ldr	r3, [pc, #216]	@ (8016408 <tcp_bind+0x118>)
 8016330:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8016334:	4937      	ldr	r1, [pc, #220]	@ (8016414 <tcp_bind+0x124>)
 8016336:	4836      	ldr	r0, [pc, #216]	@ (8016410 <tcp_bind+0x120>)
 8016338:	f00a fec4 	bl	80210c4 <iprintf>
 801633c:	f06f 0305 	mvn.w	r3, #5
 8016340:	e05c      	b.n	80163fc <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8016342:	88fb      	ldrh	r3, [r7, #6]
 8016344:	2b00      	cmp	r3, #0
 8016346:	d109      	bne.n	801635c <tcp_bind+0x6c>
    port = tcp_new_port();
 8016348:	f000 f914 	bl	8016574 <tcp_new_port>
 801634c:	4603      	mov	r3, r0
 801634e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8016350:	88fb      	ldrh	r3, [r7, #6]
 8016352:	2b00      	cmp	r3, #0
 8016354:	d135      	bne.n	80163c2 <tcp_bind+0xd2>
      return ERR_BUF;
 8016356:	f06f 0301 	mvn.w	r3, #1
 801635a:	e04f      	b.n	80163fc <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 801635c:	2300      	movs	r3, #0
 801635e:	61fb      	str	r3, [r7, #28]
 8016360:	e02b      	b.n	80163ba <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8016362:	4a2d      	ldr	r2, [pc, #180]	@ (8016418 <tcp_bind+0x128>)
 8016364:	69fb      	ldr	r3, [r7, #28]
 8016366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801636a:	681b      	ldr	r3, [r3, #0]
 801636c:	61bb      	str	r3, [r7, #24]
 801636e:	e01e      	b.n	80163ae <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8016370:	69bb      	ldr	r3, [r7, #24]
 8016372:	8adb      	ldrh	r3, [r3, #22]
 8016374:	88fa      	ldrh	r2, [r7, #6]
 8016376:	429a      	cmp	r2, r3
 8016378:	d116      	bne.n	80163a8 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 801637a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801637c:	2b00      	cmp	r3, #0
 801637e:	d010      	beq.n	80163a2 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8016380:	69bb      	ldr	r3, [r7, #24]
 8016382:	681b      	ldr	r3, [r3, #0]
 8016384:	2b00      	cmp	r3, #0
 8016386:	d00c      	beq.n	80163a2 <tcp_bind+0xb2>
 8016388:	68bb      	ldr	r3, [r7, #8]
 801638a:	2b00      	cmp	r3, #0
 801638c:	d009      	beq.n	80163a2 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 801638e:	68bb      	ldr	r3, [r7, #8]
 8016390:	681b      	ldr	r3, [r3, #0]
 8016392:	2b00      	cmp	r3, #0
 8016394:	d005      	beq.n	80163a2 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8016396:	69bb      	ldr	r3, [r7, #24]
 8016398:	681a      	ldr	r2, [r3, #0]
 801639a:	68bb      	ldr	r3, [r7, #8]
 801639c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801639e:	429a      	cmp	r2, r3
 80163a0:	d102      	bne.n	80163a8 <tcp_bind+0xb8>
              return ERR_USE;
 80163a2:	f06f 0307 	mvn.w	r3, #7
 80163a6:	e029      	b.n	80163fc <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80163a8:	69bb      	ldr	r3, [r7, #24]
 80163aa:	68db      	ldr	r3, [r3, #12]
 80163ac:	61bb      	str	r3, [r7, #24]
 80163ae:	69bb      	ldr	r3, [r7, #24]
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d1dd      	bne.n	8016370 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 80163b4:	69fb      	ldr	r3, [r7, #28]
 80163b6:	3301      	adds	r3, #1
 80163b8:	61fb      	str	r3, [r7, #28]
 80163ba:	69fa      	ldr	r2, [r7, #28]
 80163bc:	697b      	ldr	r3, [r7, #20]
 80163be:	429a      	cmp	r2, r3
 80163c0:	dbcf      	blt.n	8016362 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 80163c2:	68bb      	ldr	r3, [r7, #8]
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d00c      	beq.n	80163e2 <tcp_bind+0xf2>
 80163c8:	68bb      	ldr	r3, [r7, #8]
 80163ca:	681b      	ldr	r3, [r3, #0]
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d008      	beq.n	80163e2 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80163d0:	68bb      	ldr	r3, [r7, #8]
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	d002      	beq.n	80163dc <tcp_bind+0xec>
 80163d6:	68bb      	ldr	r3, [r7, #8]
 80163d8:	681b      	ldr	r3, [r3, #0]
 80163da:	e000      	b.n	80163de <tcp_bind+0xee>
 80163dc:	2300      	movs	r3, #0
 80163de:	68fa      	ldr	r2, [r7, #12]
 80163e0:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80163e2:	68fb      	ldr	r3, [r7, #12]
 80163e4:	88fa      	ldrh	r2, [r7, #6]
 80163e6:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80163e8:	4b0c      	ldr	r3, [pc, #48]	@ (801641c <tcp_bind+0x12c>)
 80163ea:	681a      	ldr	r2, [r3, #0]
 80163ec:	68fb      	ldr	r3, [r7, #12]
 80163ee:	60da      	str	r2, [r3, #12]
 80163f0:	4a0a      	ldr	r2, [pc, #40]	@ (801641c <tcp_bind+0x12c>)
 80163f2:	68fb      	ldr	r3, [r7, #12]
 80163f4:	6013      	str	r3, [r2, #0]
 80163f6:	f005 fd39 	bl	801be6c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80163fa:	2300      	movs	r3, #0
}
 80163fc:	4618      	mov	r0, r3
 80163fe:	3720      	adds	r7, #32
 8016400:	46bd      	mov	sp, r7
 8016402:	bd80      	pop	{r7, pc}
 8016404:	08027264 	.word	0x08027264
 8016408:	08024528 	.word	0x08024528
 801640c:	080246bc 	.word	0x080246bc
 8016410:	0802456c 	.word	0x0802456c
 8016414:	080246d4 	.word	0x080246d4
 8016418:	0802723c 	.word	0x0802723c
 801641c:	2002841c 	.word	0x2002841c

08016420 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8016420:	b580      	push	{r7, lr}
 8016422:	b084      	sub	sp, #16
 8016424:	af00      	add	r7, sp, #0
 8016426:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	2b00      	cmp	r3, #0
 801642c:	d106      	bne.n	801643c <tcp_update_rcv_ann_wnd+0x1c>
 801642e:	4b25      	ldr	r3, [pc, #148]	@ (80164c4 <tcp_update_rcv_ann_wnd+0xa4>)
 8016430:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8016434:	4924      	ldr	r1, [pc, #144]	@ (80164c8 <tcp_update_rcv_ann_wnd+0xa8>)
 8016436:	4825      	ldr	r0, [pc, #148]	@ (80164cc <tcp_update_rcv_ann_wnd+0xac>)
 8016438:	f00a fe44 	bl	80210c4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016440:	687a      	ldr	r2, [r7, #4]
 8016442:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8016444:	4413      	add	r3, r2
 8016446:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801644c:	687a      	ldr	r2, [r7, #4]
 801644e:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8016450:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8016454:	bf28      	it	cs
 8016456:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 801645a:	b292      	uxth	r2, r2
 801645c:	4413      	add	r3, r2
 801645e:	68fa      	ldr	r2, [r7, #12]
 8016460:	1ad3      	subs	r3, r2, r3
 8016462:	2b00      	cmp	r3, #0
 8016464:	db08      	blt.n	8016478 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016472:	68fa      	ldr	r2, [r7, #12]
 8016474:	1ad3      	subs	r3, r2, r3
 8016476:	e020      	b.n	80164ba <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016480:	1ad3      	subs	r3, r2, r3
 8016482:	2b00      	cmp	r3, #0
 8016484:	dd03      	ble.n	801648e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	2200      	movs	r2, #0
 801648a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801648c:	e014      	b.n	80164b8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016496:	1ad3      	subs	r3, r2, r3
 8016498:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801649a:	68bb      	ldr	r3, [r7, #8]
 801649c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80164a0:	d306      	bcc.n	80164b0 <tcp_update_rcv_ann_wnd+0x90>
 80164a2:	4b08      	ldr	r3, [pc, #32]	@ (80164c4 <tcp_update_rcv_ann_wnd+0xa4>)
 80164a4:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80164a8:	4909      	ldr	r1, [pc, #36]	@ (80164d0 <tcp_update_rcv_ann_wnd+0xb0>)
 80164aa:	4808      	ldr	r0, [pc, #32]	@ (80164cc <tcp_update_rcv_ann_wnd+0xac>)
 80164ac:	f00a fe0a 	bl	80210c4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80164b0:	68bb      	ldr	r3, [r7, #8]
 80164b2:	b29a      	uxth	r2, r3
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80164b8:	2300      	movs	r3, #0
  }
}
 80164ba:	4618      	mov	r0, r3
 80164bc:	3710      	adds	r7, #16
 80164be:	46bd      	mov	sp, r7
 80164c0:	bd80      	pop	{r7, pc}
 80164c2:	bf00      	nop
 80164c4:	08024528 	.word	0x08024528
 80164c8:	08024784 	.word	0x08024784
 80164cc:	0802456c 	.word	0x0802456c
 80164d0:	080247a8 	.word	0x080247a8

080164d4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80164d4:	b580      	push	{r7, lr}
 80164d6:	b084      	sub	sp, #16
 80164d8:	af00      	add	r7, sp, #0
 80164da:	6078      	str	r0, [r7, #4]
 80164dc:	460b      	mov	r3, r1
 80164de:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	d107      	bne.n	80164f6 <tcp_recved+0x22>
 80164e6:	4b1f      	ldr	r3, [pc, #124]	@ (8016564 <tcp_recved+0x90>)
 80164e8:	f240 32cf 	movw	r2, #975	@ 0x3cf
 80164ec:	491e      	ldr	r1, [pc, #120]	@ (8016568 <tcp_recved+0x94>)
 80164ee:	481f      	ldr	r0, [pc, #124]	@ (801656c <tcp_recved+0x98>)
 80164f0:	f00a fde8 	bl	80210c4 <iprintf>
 80164f4:	e032      	b.n	801655c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	7d1b      	ldrb	r3, [r3, #20]
 80164fa:	2b01      	cmp	r3, #1
 80164fc:	d106      	bne.n	801650c <tcp_recved+0x38>
 80164fe:	4b19      	ldr	r3, [pc, #100]	@ (8016564 <tcp_recved+0x90>)
 8016500:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8016504:	491a      	ldr	r1, [pc, #104]	@ (8016570 <tcp_recved+0x9c>)
 8016506:	4819      	ldr	r0, [pc, #100]	@ (801656c <tcp_recved+0x98>)
 8016508:	f00a fddc 	bl	80210c4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8016510:	887b      	ldrh	r3, [r7, #2]
 8016512:	4413      	add	r3, r2
 8016514:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8016516:	89fb      	ldrh	r3, [r7, #14]
 8016518:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801651c:	d804      	bhi.n	8016528 <tcp_recved+0x54>
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016522:	89fa      	ldrh	r2, [r7, #14]
 8016524:	429a      	cmp	r2, r3
 8016526:	d204      	bcs.n	8016532 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 801652e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8016530:	e002      	b.n	8016538 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	89fa      	ldrh	r2, [r7, #14]
 8016536:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8016538:	6878      	ldr	r0, [r7, #4]
 801653a:	f7ff ff71 	bl	8016420 <tcp_update_rcv_ann_wnd>
 801653e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8016540:	68bb      	ldr	r3, [r7, #8]
 8016542:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8016546:	d309      	bcc.n	801655c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	8b5b      	ldrh	r3, [r3, #26]
 801654c:	f043 0302 	orr.w	r3, r3, #2
 8016550:	b29a      	uxth	r2, r3
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016556:	6878      	ldr	r0, [r7, #4]
 8016558:	f004 fcf2 	bl	801af40 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801655c:	3710      	adds	r7, #16
 801655e:	46bd      	mov	sp, r7
 8016560:	bd80      	pop	{r7, pc}
 8016562:	bf00      	nop
 8016564:	08024528 	.word	0x08024528
 8016568:	080247c4 	.word	0x080247c4
 801656c:	0802456c 	.word	0x0802456c
 8016570:	080247dc 	.word	0x080247dc

08016574 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8016574:	b480      	push	{r7}
 8016576:	b083      	sub	sp, #12
 8016578:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801657a:	2300      	movs	r3, #0
 801657c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801657e:	4b1e      	ldr	r3, [pc, #120]	@ (80165f8 <tcp_new_port+0x84>)
 8016580:	881b      	ldrh	r3, [r3, #0]
 8016582:	3301      	adds	r3, #1
 8016584:	b29a      	uxth	r2, r3
 8016586:	4b1c      	ldr	r3, [pc, #112]	@ (80165f8 <tcp_new_port+0x84>)
 8016588:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801658a:	4b1b      	ldr	r3, [pc, #108]	@ (80165f8 <tcp_new_port+0x84>)
 801658c:	881b      	ldrh	r3, [r3, #0]
 801658e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016592:	4293      	cmp	r3, r2
 8016594:	d103      	bne.n	801659e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8016596:	4b18      	ldr	r3, [pc, #96]	@ (80165f8 <tcp_new_port+0x84>)
 8016598:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801659c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801659e:	2300      	movs	r3, #0
 80165a0:	71fb      	strb	r3, [r7, #7]
 80165a2:	e01e      	b.n	80165e2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80165a4:	79fb      	ldrb	r3, [r7, #7]
 80165a6:	4a15      	ldr	r2, [pc, #84]	@ (80165fc <tcp_new_port+0x88>)
 80165a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80165ac:	681b      	ldr	r3, [r3, #0]
 80165ae:	603b      	str	r3, [r7, #0]
 80165b0:	e011      	b.n	80165d6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80165b2:	683b      	ldr	r3, [r7, #0]
 80165b4:	8ada      	ldrh	r2, [r3, #22]
 80165b6:	4b10      	ldr	r3, [pc, #64]	@ (80165f8 <tcp_new_port+0x84>)
 80165b8:	881b      	ldrh	r3, [r3, #0]
 80165ba:	429a      	cmp	r2, r3
 80165bc:	d108      	bne.n	80165d0 <tcp_new_port+0x5c>
        n++;
 80165be:	88bb      	ldrh	r3, [r7, #4]
 80165c0:	3301      	adds	r3, #1
 80165c2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80165c4:	88bb      	ldrh	r3, [r7, #4]
 80165c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80165ca:	d3d8      	bcc.n	801657e <tcp_new_port+0xa>
          return 0;
 80165cc:	2300      	movs	r3, #0
 80165ce:	e00d      	b.n	80165ec <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80165d0:	683b      	ldr	r3, [r7, #0]
 80165d2:	68db      	ldr	r3, [r3, #12]
 80165d4:	603b      	str	r3, [r7, #0]
 80165d6:	683b      	ldr	r3, [r7, #0]
 80165d8:	2b00      	cmp	r3, #0
 80165da:	d1ea      	bne.n	80165b2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80165dc:	79fb      	ldrb	r3, [r7, #7]
 80165de:	3301      	adds	r3, #1
 80165e0:	71fb      	strb	r3, [r7, #7]
 80165e2:	79fb      	ldrb	r3, [r7, #7]
 80165e4:	2b03      	cmp	r3, #3
 80165e6:	d9dd      	bls.n	80165a4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80165e8:	4b03      	ldr	r3, [pc, #12]	@ (80165f8 <tcp_new_port+0x84>)
 80165ea:	881b      	ldrh	r3, [r3, #0]
}
 80165ec:	4618      	mov	r0, r3
 80165ee:	370c      	adds	r7, #12
 80165f0:	46bd      	mov	sp, r7
 80165f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165f6:	4770      	bx	lr
 80165f8:	20000068 	.word	0x20000068
 80165fc:	0802723c 	.word	0x0802723c

08016600 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8016600:	b5b0      	push	{r4, r5, r7, lr}
 8016602:	b090      	sub	sp, #64	@ 0x40
 8016604:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8016606:	2300      	movs	r3, #0
 8016608:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 801660c:	4b95      	ldr	r3, [pc, #596]	@ (8016864 <tcp_slowtmr+0x264>)
 801660e:	681b      	ldr	r3, [r3, #0]
 8016610:	3301      	adds	r3, #1
 8016612:	4a94      	ldr	r2, [pc, #592]	@ (8016864 <tcp_slowtmr+0x264>)
 8016614:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8016616:	4b94      	ldr	r3, [pc, #592]	@ (8016868 <tcp_slowtmr+0x268>)
 8016618:	781b      	ldrb	r3, [r3, #0]
 801661a:	3301      	adds	r3, #1
 801661c:	b2da      	uxtb	r2, r3
 801661e:	4b92      	ldr	r3, [pc, #584]	@ (8016868 <tcp_slowtmr+0x268>)
 8016620:	701a      	strb	r2, [r3, #0]
 8016622:	e000      	b.n	8016626 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8016624:	bf00      	nop
  prev = NULL;
 8016626:	2300      	movs	r3, #0
 8016628:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 801662a:	4b90      	ldr	r3, [pc, #576]	@ (801686c <tcp_slowtmr+0x26c>)
 801662c:	681b      	ldr	r3, [r3, #0]
 801662e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8016630:	e29d      	b.n	8016b6e <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8016632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016634:	7d1b      	ldrb	r3, [r3, #20]
 8016636:	2b00      	cmp	r3, #0
 8016638:	d106      	bne.n	8016648 <tcp_slowtmr+0x48>
 801663a:	4b8d      	ldr	r3, [pc, #564]	@ (8016870 <tcp_slowtmr+0x270>)
 801663c:	f240 42be 	movw	r2, #1214	@ 0x4be
 8016640:	498c      	ldr	r1, [pc, #560]	@ (8016874 <tcp_slowtmr+0x274>)
 8016642:	488d      	ldr	r0, [pc, #564]	@ (8016878 <tcp_slowtmr+0x278>)
 8016644:	f00a fd3e 	bl	80210c4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8016648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801664a:	7d1b      	ldrb	r3, [r3, #20]
 801664c:	2b01      	cmp	r3, #1
 801664e:	d106      	bne.n	801665e <tcp_slowtmr+0x5e>
 8016650:	4b87      	ldr	r3, [pc, #540]	@ (8016870 <tcp_slowtmr+0x270>)
 8016652:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8016656:	4989      	ldr	r1, [pc, #548]	@ (801687c <tcp_slowtmr+0x27c>)
 8016658:	4887      	ldr	r0, [pc, #540]	@ (8016878 <tcp_slowtmr+0x278>)
 801665a:	f00a fd33 	bl	80210c4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801665e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016660:	7d1b      	ldrb	r3, [r3, #20]
 8016662:	2b0a      	cmp	r3, #10
 8016664:	d106      	bne.n	8016674 <tcp_slowtmr+0x74>
 8016666:	4b82      	ldr	r3, [pc, #520]	@ (8016870 <tcp_slowtmr+0x270>)
 8016668:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 801666c:	4984      	ldr	r1, [pc, #528]	@ (8016880 <tcp_slowtmr+0x280>)
 801666e:	4882      	ldr	r0, [pc, #520]	@ (8016878 <tcp_slowtmr+0x278>)
 8016670:	f00a fd28 	bl	80210c4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8016674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016676:	7f9a      	ldrb	r2, [r3, #30]
 8016678:	4b7b      	ldr	r3, [pc, #492]	@ (8016868 <tcp_slowtmr+0x268>)
 801667a:	781b      	ldrb	r3, [r3, #0]
 801667c:	429a      	cmp	r2, r3
 801667e:	d105      	bne.n	801668c <tcp_slowtmr+0x8c>
      prev = pcb;
 8016680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016682:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8016684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016686:	68db      	ldr	r3, [r3, #12]
 8016688:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 801668a:	e270      	b.n	8016b6e <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 801668c:	4b76      	ldr	r3, [pc, #472]	@ (8016868 <tcp_slowtmr+0x268>)
 801668e:	781a      	ldrb	r2, [r3, #0]
 8016690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016692:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8016694:	2300      	movs	r3, #0
 8016696:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 801669a:	2300      	movs	r3, #0
 801669c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80166a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166a2:	7d1b      	ldrb	r3, [r3, #20]
 80166a4:	2b02      	cmp	r3, #2
 80166a6:	d10a      	bne.n	80166be <tcp_slowtmr+0xbe>
 80166a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80166ae:	2b05      	cmp	r3, #5
 80166b0:	d905      	bls.n	80166be <tcp_slowtmr+0xbe>
      ++pcb_remove;
 80166b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80166b6:	3301      	adds	r3, #1
 80166b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 80166bc:	e11e      	b.n	80168fc <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80166be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80166c4:	2b0b      	cmp	r3, #11
 80166c6:	d905      	bls.n	80166d4 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 80166c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80166cc:	3301      	adds	r3, #1
 80166ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80166d2:	e113      	b.n	80168fc <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 80166d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166d6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d075      	beq.n	80167ca <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80166de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	d006      	beq.n	80166f4 <tcp_slowtmr+0xf4>
 80166e6:	4b62      	ldr	r3, [pc, #392]	@ (8016870 <tcp_slowtmr+0x270>)
 80166e8:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 80166ec:	4965      	ldr	r1, [pc, #404]	@ (8016884 <tcp_slowtmr+0x284>)
 80166ee:	4862      	ldr	r0, [pc, #392]	@ (8016878 <tcp_slowtmr+0x278>)
 80166f0:	f00a fce8 	bl	80210c4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80166f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d106      	bne.n	801670a <tcp_slowtmr+0x10a>
 80166fc:	4b5c      	ldr	r3, [pc, #368]	@ (8016870 <tcp_slowtmr+0x270>)
 80166fe:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8016702:	4961      	ldr	r1, [pc, #388]	@ (8016888 <tcp_slowtmr+0x288>)
 8016704:	485c      	ldr	r0, [pc, #368]	@ (8016878 <tcp_slowtmr+0x278>)
 8016706:	f00a fcdd 	bl	80210c4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801670a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801670c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8016710:	2b0b      	cmp	r3, #11
 8016712:	d905      	bls.n	8016720 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8016714:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016718:	3301      	adds	r3, #1
 801671a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801671e:	e0ed      	b.n	80168fc <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8016720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016722:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8016726:	3b01      	subs	r3, #1
 8016728:	4a58      	ldr	r2, [pc, #352]	@ (801688c <tcp_slowtmr+0x28c>)
 801672a:	5cd3      	ldrb	r3, [r2, r3]
 801672c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801672e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016730:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8016734:	7c7a      	ldrb	r2, [r7, #17]
 8016736:	429a      	cmp	r2, r3
 8016738:	d907      	bls.n	801674a <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 801673a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801673c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8016740:	3301      	adds	r3, #1
 8016742:	b2da      	uxtb	r2, r3
 8016744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016746:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801674a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801674c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8016750:	7c7a      	ldrb	r2, [r7, #17]
 8016752:	429a      	cmp	r2, r3
 8016754:	f200 80d2 	bhi.w	80168fc <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8016758:	2301      	movs	r3, #1
 801675a:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 801675c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801675e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8016762:	2b00      	cmp	r3, #0
 8016764:	d108      	bne.n	8016778 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8016766:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016768:	f005 fab2 	bl	801bcd0 <tcp_zero_window_probe>
 801676c:	4603      	mov	r3, r0
 801676e:	2b00      	cmp	r3, #0
 8016770:	d014      	beq.n	801679c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8016772:	2300      	movs	r3, #0
 8016774:	623b      	str	r3, [r7, #32]
 8016776:	e011      	b.n	801679c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8016778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801677a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801677e:	4619      	mov	r1, r3
 8016780:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016782:	f004 f937 	bl	801a9f4 <tcp_split_unsent_seg>
 8016786:	4603      	mov	r3, r0
 8016788:	2b00      	cmp	r3, #0
 801678a:	d107      	bne.n	801679c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 801678c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801678e:	f004 fbd7 	bl	801af40 <tcp_output>
 8016792:	4603      	mov	r3, r0
 8016794:	2b00      	cmp	r3, #0
 8016796:	d101      	bne.n	801679c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8016798:	2300      	movs	r3, #0
 801679a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 801679c:	6a3b      	ldr	r3, [r7, #32]
 801679e:	2b00      	cmp	r3, #0
 80167a0:	f000 80ac 	beq.w	80168fc <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 80167a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167a6:	2200      	movs	r2, #0
 80167a8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80167ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167ae:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80167b2:	2b06      	cmp	r3, #6
 80167b4:	f200 80a2 	bhi.w	80168fc <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 80167b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167ba:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80167be:	3301      	adds	r3, #1
 80167c0:	b2da      	uxtb	r2, r3
 80167c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167c4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 80167c8:	e098      	b.n	80168fc <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80167ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167cc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	db0f      	blt.n	80167f4 <tcp_slowtmr+0x1f4>
 80167d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167d6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80167da:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80167de:	4293      	cmp	r3, r2
 80167e0:	d008      	beq.n	80167f4 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 80167e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167e4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80167e8:	b29b      	uxth	r3, r3
 80167ea:	3301      	adds	r3, #1
 80167ec:	b29b      	uxth	r3, r3
 80167ee:	b21a      	sxth	r2, r3
 80167f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167f2:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 80167f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167f6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80167fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167fc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8016800:	429a      	cmp	r2, r3
 8016802:	db7b      	blt.n	80168fc <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8016804:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016806:	f004 fe9b 	bl	801b540 <tcp_rexmit_rto_prepare>
 801680a:	4603      	mov	r3, r0
 801680c:	2b00      	cmp	r3, #0
 801680e:	d007      	beq.n	8016820 <tcp_slowtmr+0x220>
 8016810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016814:	2b00      	cmp	r3, #0
 8016816:	d171      	bne.n	80168fc <tcp_slowtmr+0x2fc>
 8016818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801681a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801681c:	2b00      	cmp	r3, #0
 801681e:	d06d      	beq.n	80168fc <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8016820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016822:	7d1b      	ldrb	r3, [r3, #20]
 8016824:	2b02      	cmp	r3, #2
 8016826:	d03a      	beq.n	801689e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8016828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801682a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801682e:	2b0c      	cmp	r3, #12
 8016830:	bf28      	it	cs
 8016832:	230c      	movcs	r3, #12
 8016834:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8016836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016838:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801683c:	10db      	asrs	r3, r3, #3
 801683e:	b21b      	sxth	r3, r3
 8016840:	461a      	mov	r2, r3
 8016842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016844:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8016848:	4413      	add	r3, r2
 801684a:	7efa      	ldrb	r2, [r7, #27]
 801684c:	4910      	ldr	r1, [pc, #64]	@ (8016890 <tcp_slowtmr+0x290>)
 801684e:	5c8a      	ldrb	r2, [r1, r2]
 8016850:	4093      	lsls	r3, r2
 8016852:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8016854:	697b      	ldr	r3, [r7, #20]
 8016856:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 801685a:	4293      	cmp	r3, r2
 801685c:	dc1a      	bgt.n	8016894 <tcp_slowtmr+0x294>
 801685e:	697b      	ldr	r3, [r7, #20]
 8016860:	b21a      	sxth	r2, r3
 8016862:	e019      	b.n	8016898 <tcp_slowtmr+0x298>
 8016864:	20028418 	.word	0x20028418
 8016868:	2002842e 	.word	0x2002842e
 801686c:	20028424 	.word	0x20028424
 8016870:	08024528 	.word	0x08024528
 8016874:	0802486c 	.word	0x0802486c
 8016878:	0802456c 	.word	0x0802456c
 801687c:	08024898 	.word	0x08024898
 8016880:	080248c4 	.word	0x080248c4
 8016884:	080248f4 	.word	0x080248f4
 8016888:	08024928 	.word	0x08024928
 801688c:	08027234 	.word	0x08027234
 8016890:	08027224 	.word	0x08027224
 8016894:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8016898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801689a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 801689e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168a0:	2200      	movs	r2, #0
 80168a2:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80168a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168a6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80168aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168ac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80168b0:	4293      	cmp	r3, r2
 80168b2:	bf28      	it	cs
 80168b4:	4613      	movcs	r3, r2
 80168b6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80168b8:	8a7b      	ldrh	r3, [r7, #18]
 80168ba:	085b      	lsrs	r3, r3, #1
 80168bc:	b29a      	uxth	r2, r3
 80168be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168c0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80168c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168c6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80168ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80168ce:	005b      	lsls	r3, r3, #1
 80168d0:	b29b      	uxth	r3, r3
 80168d2:	429a      	cmp	r2, r3
 80168d4:	d206      	bcs.n	80168e4 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80168d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80168da:	005b      	lsls	r3, r3, #1
 80168dc:	b29a      	uxth	r2, r3
 80168de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168e0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 80168e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168e6:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80168e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168ea:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 80168ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168f0:	2200      	movs	r2, #0
 80168f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 80168f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80168f8:	f004 fe9c 	bl	801b634 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 80168fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168fe:	7d1b      	ldrb	r3, [r3, #20]
 8016900:	2b06      	cmp	r3, #6
 8016902:	d111      	bne.n	8016928 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8016904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016906:	8b5b      	ldrh	r3, [r3, #26]
 8016908:	f003 0310 	and.w	r3, r3, #16
 801690c:	2b00      	cmp	r3, #0
 801690e:	d00b      	beq.n	8016928 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016910:	4b9c      	ldr	r3, [pc, #624]	@ (8016b84 <tcp_slowtmr+0x584>)
 8016912:	681a      	ldr	r2, [r3, #0]
 8016914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016916:	6a1b      	ldr	r3, [r3, #32]
 8016918:	1ad3      	subs	r3, r2, r3
 801691a:	2b28      	cmp	r3, #40	@ 0x28
 801691c:	d904      	bls.n	8016928 <tcp_slowtmr+0x328>
          ++pcb_remove;
 801691e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016922:	3301      	adds	r3, #1
 8016924:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8016928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801692a:	7a5b      	ldrb	r3, [r3, #9]
 801692c:	f003 0308 	and.w	r3, r3, #8
 8016930:	2b00      	cmp	r3, #0
 8016932:	d04a      	beq.n	80169ca <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8016934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016936:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8016938:	2b04      	cmp	r3, #4
 801693a:	d003      	beq.n	8016944 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 801693c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801693e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8016940:	2b07      	cmp	r3, #7
 8016942:	d142      	bne.n	80169ca <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016944:	4b8f      	ldr	r3, [pc, #572]	@ (8016b84 <tcp_slowtmr+0x584>)
 8016946:	681a      	ldr	r2, [r3, #0]
 8016948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801694a:	6a1b      	ldr	r3, [r3, #32]
 801694c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801694e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016950:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8016954:	4b8c      	ldr	r3, [pc, #560]	@ (8016b88 <tcp_slowtmr+0x588>)
 8016956:	440b      	add	r3, r1
 8016958:	498c      	ldr	r1, [pc, #560]	@ (8016b8c <tcp_slowtmr+0x58c>)
 801695a:	fba1 1303 	umull	r1, r3, r1, r3
 801695e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016960:	429a      	cmp	r2, r3
 8016962:	d90a      	bls.n	801697a <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8016964:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016968:	3301      	adds	r3, #1
 801696a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 801696e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8016972:	3301      	adds	r3, #1
 8016974:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8016978:	e027      	b.n	80169ca <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801697a:	4b82      	ldr	r3, [pc, #520]	@ (8016b84 <tcp_slowtmr+0x584>)
 801697c:	681a      	ldr	r2, [r3, #0]
 801697e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016980:	6a1b      	ldr	r3, [r3, #32]
 8016982:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8016984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016986:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801698a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801698c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8016990:	4618      	mov	r0, r3
 8016992:	4b7f      	ldr	r3, [pc, #508]	@ (8016b90 <tcp_slowtmr+0x590>)
 8016994:	fb00 f303 	mul.w	r3, r0, r3
 8016998:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801699a:	497c      	ldr	r1, [pc, #496]	@ (8016b8c <tcp_slowtmr+0x58c>)
 801699c:	fba1 1303 	umull	r1, r3, r1, r3
 80169a0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80169a2:	429a      	cmp	r2, r3
 80169a4:	d911      	bls.n	80169ca <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80169a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80169a8:	f005 f952 	bl	801bc50 <tcp_keepalive>
 80169ac:	4603      	mov	r3, r0
 80169ae:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 80169b2:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	d107      	bne.n	80169ca <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80169ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80169bc:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80169c0:	3301      	adds	r3, #1
 80169c2:	b2da      	uxtb	r2, r3
 80169c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80169c6:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 80169ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80169cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d011      	beq.n	80169f6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80169d2:	4b6c      	ldr	r3, [pc, #432]	@ (8016b84 <tcp_slowtmr+0x584>)
 80169d4:	681a      	ldr	r2, [r3, #0]
 80169d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80169d8:	6a1b      	ldr	r3, [r3, #32]
 80169da:	1ad2      	subs	r2, r2, r3
 80169dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80169de:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80169e2:	4619      	mov	r1, r3
 80169e4:	460b      	mov	r3, r1
 80169e6:	005b      	lsls	r3, r3, #1
 80169e8:	440b      	add	r3, r1
 80169ea:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80169ec:	429a      	cmp	r2, r3
 80169ee:	d302      	bcc.n	80169f6 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 80169f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80169f2:	f000 feef 	bl	80177d4 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 80169f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80169f8:	7d1b      	ldrb	r3, [r3, #20]
 80169fa:	2b03      	cmp	r3, #3
 80169fc:	d10b      	bne.n	8016a16 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80169fe:	4b61      	ldr	r3, [pc, #388]	@ (8016b84 <tcp_slowtmr+0x584>)
 8016a00:	681a      	ldr	r2, [r3, #0]
 8016a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a04:	6a1b      	ldr	r3, [r3, #32]
 8016a06:	1ad3      	subs	r3, r2, r3
 8016a08:	2b28      	cmp	r3, #40	@ 0x28
 8016a0a:	d904      	bls.n	8016a16 <tcp_slowtmr+0x416>
        ++pcb_remove;
 8016a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016a10:	3301      	adds	r3, #1
 8016a12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8016a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a18:	7d1b      	ldrb	r3, [r3, #20]
 8016a1a:	2b09      	cmp	r3, #9
 8016a1c:	d10b      	bne.n	8016a36 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8016a1e:	4b59      	ldr	r3, [pc, #356]	@ (8016b84 <tcp_slowtmr+0x584>)
 8016a20:	681a      	ldr	r2, [r3, #0]
 8016a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a24:	6a1b      	ldr	r3, [r3, #32]
 8016a26:	1ad3      	subs	r3, r2, r3
 8016a28:	2bf0      	cmp	r3, #240	@ 0xf0
 8016a2a:	d904      	bls.n	8016a36 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8016a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016a30:	3301      	adds	r3, #1
 8016a32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8016a36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d060      	beq.n	8016b00 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8016a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016a44:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8016a46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016a48:	f000 fd0a 	bl	8017460 <tcp_pcb_purge>
      if (prev != NULL) {
 8016a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	d010      	beq.n	8016a74 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8016a52:	4b50      	ldr	r3, [pc, #320]	@ (8016b94 <tcp_slowtmr+0x594>)
 8016a54:	681b      	ldr	r3, [r3, #0]
 8016a56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016a58:	429a      	cmp	r2, r3
 8016a5a:	d106      	bne.n	8016a6a <tcp_slowtmr+0x46a>
 8016a5c:	4b4e      	ldr	r3, [pc, #312]	@ (8016b98 <tcp_slowtmr+0x598>)
 8016a5e:	f240 526d 	movw	r2, #1389	@ 0x56d
 8016a62:	494e      	ldr	r1, [pc, #312]	@ (8016b9c <tcp_slowtmr+0x59c>)
 8016a64:	484e      	ldr	r0, [pc, #312]	@ (8016ba0 <tcp_slowtmr+0x5a0>)
 8016a66:	f00a fb2d 	bl	80210c4 <iprintf>
        prev->next = pcb->next;
 8016a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a6c:	68da      	ldr	r2, [r3, #12]
 8016a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016a70:	60da      	str	r2, [r3, #12]
 8016a72:	e00f      	b.n	8016a94 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8016a74:	4b47      	ldr	r3, [pc, #284]	@ (8016b94 <tcp_slowtmr+0x594>)
 8016a76:	681b      	ldr	r3, [r3, #0]
 8016a78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016a7a:	429a      	cmp	r2, r3
 8016a7c:	d006      	beq.n	8016a8c <tcp_slowtmr+0x48c>
 8016a7e:	4b46      	ldr	r3, [pc, #280]	@ (8016b98 <tcp_slowtmr+0x598>)
 8016a80:	f240 5271 	movw	r2, #1393	@ 0x571
 8016a84:	4947      	ldr	r1, [pc, #284]	@ (8016ba4 <tcp_slowtmr+0x5a4>)
 8016a86:	4846      	ldr	r0, [pc, #280]	@ (8016ba0 <tcp_slowtmr+0x5a0>)
 8016a88:	f00a fb1c 	bl	80210c4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8016a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a8e:	68db      	ldr	r3, [r3, #12]
 8016a90:	4a40      	ldr	r2, [pc, #256]	@ (8016b94 <tcp_slowtmr+0x594>)
 8016a92:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8016a94:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d013      	beq.n	8016ac4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8016a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a9e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8016aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016aa2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8016aa4:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8016aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016aa8:	3304      	adds	r3, #4
 8016aaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016aac:	8ad2      	ldrh	r2, [r2, #22]
 8016aae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016ab0:	8b09      	ldrh	r1, [r1, #24]
 8016ab2:	9102      	str	r1, [sp, #8]
 8016ab4:	9201      	str	r2, [sp, #4]
 8016ab6:	9300      	str	r3, [sp, #0]
 8016ab8:	462b      	mov	r3, r5
 8016aba:	4622      	mov	r2, r4
 8016abc:	4601      	mov	r1, r0
 8016abe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016ac0:	f005 f812 	bl	801bae8 <tcp_rst>
      err_arg = pcb->callback_arg;
 8016ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ac6:	691b      	ldr	r3, [r3, #16]
 8016ac8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8016aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016acc:	7d1b      	ldrb	r3, [r3, #20]
 8016ace:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8016ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ad2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8016ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ad6:	68db      	ldr	r3, [r3, #12]
 8016ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8016ada:	6838      	ldr	r0, [r7, #0]
 8016adc:	f7ff f8b8 	bl	8015c50 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8016ae0:	4b31      	ldr	r3, [pc, #196]	@ (8016ba8 <tcp_slowtmr+0x5a8>)
 8016ae2:	2200      	movs	r2, #0
 8016ae4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8016ae6:	68fb      	ldr	r3, [r7, #12]
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	d004      	beq.n	8016af6 <tcp_slowtmr+0x4f6>
 8016aec:	68fb      	ldr	r3, [r7, #12]
 8016aee:	f06f 010c 	mvn.w	r1, #12
 8016af2:	68b8      	ldr	r0, [r7, #8]
 8016af4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8016af6:	4b2c      	ldr	r3, [pc, #176]	@ (8016ba8 <tcp_slowtmr+0x5a8>)
 8016af8:	781b      	ldrb	r3, [r3, #0]
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d037      	beq.n	8016b6e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8016afe:	e592      	b.n	8016626 <tcp_slowtmr+0x26>
      prev = pcb;
 8016b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b02:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8016b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b06:	68db      	ldr	r3, [r3, #12]
 8016b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8016b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b0c:	7f1b      	ldrb	r3, [r3, #28]
 8016b0e:	3301      	adds	r3, #1
 8016b10:	b2da      	uxtb	r2, r3
 8016b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b14:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8016b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b18:	7f1a      	ldrb	r2, [r3, #28]
 8016b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b1c:	7f5b      	ldrb	r3, [r3, #29]
 8016b1e:	429a      	cmp	r2, r3
 8016b20:	d325      	bcc.n	8016b6e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8016b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b24:	2200      	movs	r2, #0
 8016b26:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8016b28:	4b1f      	ldr	r3, [pc, #124]	@ (8016ba8 <tcp_slowtmr+0x5a8>)
 8016b2a:	2200      	movs	r2, #0
 8016b2c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8016b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	d00b      	beq.n	8016b50 <tcp_slowtmr+0x550>
 8016b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016b3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016b40:	6912      	ldr	r2, [r2, #16]
 8016b42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016b44:	4610      	mov	r0, r2
 8016b46:	4798      	blx	r3
 8016b48:	4603      	mov	r3, r0
 8016b4a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8016b4e:	e002      	b.n	8016b56 <tcp_slowtmr+0x556>
 8016b50:	2300      	movs	r3, #0
 8016b52:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8016b56:	4b14      	ldr	r3, [pc, #80]	@ (8016ba8 <tcp_slowtmr+0x5a8>)
 8016b58:	781b      	ldrb	r3, [r3, #0]
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	f47f ad62 	bne.w	8016624 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8016b60:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	d102      	bne.n	8016b6e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8016b68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016b6a:	f004 f9e9 	bl	801af40 <tcp_output>
  while (pcb != NULL) {
 8016b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	f47f ad5e 	bne.w	8016632 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8016b76:	2300      	movs	r3, #0
 8016b78:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8016b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8016bac <tcp_slowtmr+0x5ac>)
 8016b7c:	681b      	ldr	r3, [r3, #0]
 8016b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8016b80:	e069      	b.n	8016c56 <tcp_slowtmr+0x656>
 8016b82:	bf00      	nop
 8016b84:	20028418 	.word	0x20028418
 8016b88:	000a4cb8 	.word	0x000a4cb8
 8016b8c:	10624dd3 	.word	0x10624dd3
 8016b90:	000124f8 	.word	0x000124f8
 8016b94:	20028424 	.word	0x20028424
 8016b98:	08024528 	.word	0x08024528
 8016b9c:	08024960 	.word	0x08024960
 8016ba0:	0802456c 	.word	0x0802456c
 8016ba4:	0802498c 	.word	0x0802498c
 8016ba8:	2002842c 	.word	0x2002842c
 8016bac:	20028428 	.word	0x20028428
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8016bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016bb2:	7d1b      	ldrb	r3, [r3, #20]
 8016bb4:	2b0a      	cmp	r3, #10
 8016bb6:	d006      	beq.n	8016bc6 <tcp_slowtmr+0x5c6>
 8016bb8:	4b2b      	ldr	r3, [pc, #172]	@ (8016c68 <tcp_slowtmr+0x668>)
 8016bba:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8016bbe:	492b      	ldr	r1, [pc, #172]	@ (8016c6c <tcp_slowtmr+0x66c>)
 8016bc0:	482b      	ldr	r0, [pc, #172]	@ (8016c70 <tcp_slowtmr+0x670>)
 8016bc2:	f00a fa7f 	bl	80210c4 <iprintf>
    pcb_remove = 0;
 8016bc6:	2300      	movs	r3, #0
 8016bc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8016bcc:	4b29      	ldr	r3, [pc, #164]	@ (8016c74 <tcp_slowtmr+0x674>)
 8016bce:	681a      	ldr	r2, [r3, #0]
 8016bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016bd2:	6a1b      	ldr	r3, [r3, #32]
 8016bd4:	1ad3      	subs	r3, r2, r3
 8016bd6:	2bf0      	cmp	r3, #240	@ 0xf0
 8016bd8:	d904      	bls.n	8016be4 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8016bda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016bde:	3301      	adds	r3, #1
 8016be0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8016be4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d02f      	beq.n	8016c4c <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8016bec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016bee:	f000 fc37 	bl	8017460 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8016bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d010      	beq.n	8016c1a <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8016bf8:	4b1f      	ldr	r3, [pc, #124]	@ (8016c78 <tcp_slowtmr+0x678>)
 8016bfa:	681b      	ldr	r3, [r3, #0]
 8016bfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016bfe:	429a      	cmp	r2, r3
 8016c00:	d106      	bne.n	8016c10 <tcp_slowtmr+0x610>
 8016c02:	4b19      	ldr	r3, [pc, #100]	@ (8016c68 <tcp_slowtmr+0x668>)
 8016c04:	f240 52af 	movw	r2, #1455	@ 0x5af
 8016c08:	491c      	ldr	r1, [pc, #112]	@ (8016c7c <tcp_slowtmr+0x67c>)
 8016c0a:	4819      	ldr	r0, [pc, #100]	@ (8016c70 <tcp_slowtmr+0x670>)
 8016c0c:	f00a fa5a 	bl	80210c4 <iprintf>
        prev->next = pcb->next;
 8016c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c12:	68da      	ldr	r2, [r3, #12]
 8016c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c16:	60da      	str	r2, [r3, #12]
 8016c18:	e00f      	b.n	8016c3a <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8016c1a:	4b17      	ldr	r3, [pc, #92]	@ (8016c78 <tcp_slowtmr+0x678>)
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016c20:	429a      	cmp	r2, r3
 8016c22:	d006      	beq.n	8016c32 <tcp_slowtmr+0x632>
 8016c24:	4b10      	ldr	r3, [pc, #64]	@ (8016c68 <tcp_slowtmr+0x668>)
 8016c26:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8016c2a:	4915      	ldr	r1, [pc, #84]	@ (8016c80 <tcp_slowtmr+0x680>)
 8016c2c:	4810      	ldr	r0, [pc, #64]	@ (8016c70 <tcp_slowtmr+0x670>)
 8016c2e:	f00a fa49 	bl	80210c4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8016c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c34:	68db      	ldr	r3, [r3, #12]
 8016c36:	4a10      	ldr	r2, [pc, #64]	@ (8016c78 <tcp_slowtmr+0x678>)
 8016c38:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8016c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c3c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8016c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c40:	68db      	ldr	r3, [r3, #12]
 8016c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8016c44:	69f8      	ldr	r0, [r7, #28]
 8016c46:	f7ff f803 	bl	8015c50 <tcp_free>
 8016c4a:	e004      	b.n	8016c56 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8016c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8016c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c52:	68db      	ldr	r3, [r3, #12]
 8016c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8016c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d1a9      	bne.n	8016bb0 <tcp_slowtmr+0x5b0>
    }
  }
}
 8016c5c:	bf00      	nop
 8016c5e:	bf00      	nop
 8016c60:	3730      	adds	r7, #48	@ 0x30
 8016c62:	46bd      	mov	sp, r7
 8016c64:	bdb0      	pop	{r4, r5, r7, pc}
 8016c66:	bf00      	nop
 8016c68:	08024528 	.word	0x08024528
 8016c6c:	080249b8 	.word	0x080249b8
 8016c70:	0802456c 	.word	0x0802456c
 8016c74:	20028418 	.word	0x20028418
 8016c78:	20028428 	.word	0x20028428
 8016c7c:	080249e8 	.word	0x080249e8
 8016c80:	08024a10 	.word	0x08024a10

08016c84 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8016c84:	b580      	push	{r7, lr}
 8016c86:	b082      	sub	sp, #8
 8016c88:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8016c8a:	4b2d      	ldr	r3, [pc, #180]	@ (8016d40 <tcp_fasttmr+0xbc>)
 8016c8c:	781b      	ldrb	r3, [r3, #0]
 8016c8e:	3301      	adds	r3, #1
 8016c90:	b2da      	uxtb	r2, r3
 8016c92:	4b2b      	ldr	r3, [pc, #172]	@ (8016d40 <tcp_fasttmr+0xbc>)
 8016c94:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8016c96:	4b2b      	ldr	r3, [pc, #172]	@ (8016d44 <tcp_fasttmr+0xc0>)
 8016c98:	681b      	ldr	r3, [r3, #0]
 8016c9a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8016c9c:	e048      	b.n	8016d30 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	7f9a      	ldrb	r2, [r3, #30]
 8016ca2:	4b27      	ldr	r3, [pc, #156]	@ (8016d40 <tcp_fasttmr+0xbc>)
 8016ca4:	781b      	ldrb	r3, [r3, #0]
 8016ca6:	429a      	cmp	r2, r3
 8016ca8:	d03f      	beq.n	8016d2a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8016caa:	4b25      	ldr	r3, [pc, #148]	@ (8016d40 <tcp_fasttmr+0xbc>)
 8016cac:	781a      	ldrb	r2, [r3, #0]
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	8b5b      	ldrh	r3, [r3, #26]
 8016cb6:	f003 0301 	and.w	r3, r3, #1
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	d010      	beq.n	8016ce0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	8b5b      	ldrh	r3, [r3, #26]
 8016cc2:	f043 0302 	orr.w	r3, r3, #2
 8016cc6:	b29a      	uxth	r2, r3
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8016ccc:	6878      	ldr	r0, [r7, #4]
 8016cce:	f004 f937 	bl	801af40 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	8b5b      	ldrh	r3, [r3, #26]
 8016cd6:	f023 0303 	bic.w	r3, r3, #3
 8016cda:	b29a      	uxth	r2, r3
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	8b5b      	ldrh	r3, [r3, #26]
 8016ce4:	f003 0308 	and.w	r3, r3, #8
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d009      	beq.n	8016d00 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	8b5b      	ldrh	r3, [r3, #26]
 8016cf0:	f023 0308 	bic.w	r3, r3, #8
 8016cf4:	b29a      	uxth	r2, r3
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8016cfa:	6878      	ldr	r0, [r7, #4]
 8016cfc:	f7ff f93c 	bl	8015f78 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	68db      	ldr	r3, [r3, #12]
 8016d04:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d00a      	beq.n	8016d24 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8016d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8016d48 <tcp_fasttmr+0xc4>)
 8016d10:	2200      	movs	r2, #0
 8016d12:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8016d14:	6878      	ldr	r0, [r7, #4]
 8016d16:	f000 f819 	bl	8016d4c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8016d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8016d48 <tcp_fasttmr+0xc4>)
 8016d1c:	781b      	ldrb	r3, [r3, #0]
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d000      	beq.n	8016d24 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8016d22:	e7b8      	b.n	8016c96 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8016d24:	683b      	ldr	r3, [r7, #0]
 8016d26:	607b      	str	r3, [r7, #4]
 8016d28:	e002      	b.n	8016d30 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	68db      	ldr	r3, [r3, #12]
 8016d2e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	d1b3      	bne.n	8016c9e <tcp_fasttmr+0x1a>
    }
  }
}
 8016d36:	bf00      	nop
 8016d38:	bf00      	nop
 8016d3a:	3708      	adds	r7, #8
 8016d3c:	46bd      	mov	sp, r7
 8016d3e:	bd80      	pop	{r7, pc}
 8016d40:	2002842e 	.word	0x2002842e
 8016d44:	20028424 	.word	0x20028424
 8016d48:	2002842c 	.word	0x2002842c

08016d4c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8016d4c:	b590      	push	{r4, r7, lr}
 8016d4e:	b085      	sub	sp, #20
 8016d50:	af00      	add	r7, sp, #0
 8016d52:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	d109      	bne.n	8016d6e <tcp_process_refused_data+0x22>
 8016d5a:	4b37      	ldr	r3, [pc, #220]	@ (8016e38 <tcp_process_refused_data+0xec>)
 8016d5c:	f240 6209 	movw	r2, #1545	@ 0x609
 8016d60:	4936      	ldr	r1, [pc, #216]	@ (8016e3c <tcp_process_refused_data+0xf0>)
 8016d62:	4837      	ldr	r0, [pc, #220]	@ (8016e40 <tcp_process_refused_data+0xf4>)
 8016d64:	f00a f9ae 	bl	80210c4 <iprintf>
 8016d68:	f06f 030f 	mvn.w	r3, #15
 8016d6c:	e060      	b.n	8016e30 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016d72:	7b5b      	ldrb	r3, [r3, #13]
 8016d74:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016d7a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	2200      	movs	r2, #0
 8016d80:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d00b      	beq.n	8016da4 <tcp_process_refused_data+0x58>
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	6918      	ldr	r0, [r3, #16]
 8016d96:	2300      	movs	r3, #0
 8016d98:	68ba      	ldr	r2, [r7, #8]
 8016d9a:	6879      	ldr	r1, [r7, #4]
 8016d9c:	47a0      	blx	r4
 8016d9e:	4603      	mov	r3, r0
 8016da0:	73fb      	strb	r3, [r7, #15]
 8016da2:	e007      	b.n	8016db4 <tcp_process_refused_data+0x68>
 8016da4:	2300      	movs	r3, #0
 8016da6:	68ba      	ldr	r2, [r7, #8]
 8016da8:	6879      	ldr	r1, [r7, #4]
 8016daa:	2000      	movs	r0, #0
 8016dac:	f000 f8a8 	bl	8016f00 <tcp_recv_null>
 8016db0:	4603      	mov	r3, r0
 8016db2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8016db4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d12a      	bne.n	8016e12 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8016dbc:	7bbb      	ldrb	r3, [r7, #14]
 8016dbe:	f003 0320 	and.w	r3, r3, #32
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d033      	beq.n	8016e2e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016dca:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8016dce:	d005      	beq.n	8016ddc <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016dd4:	3301      	adds	r3, #1
 8016dd6:	b29a      	uxth	r2, r3
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	d00b      	beq.n	8016dfe <tcp_process_refused_data+0xb2>
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	6918      	ldr	r0, [r3, #16]
 8016df0:	2300      	movs	r3, #0
 8016df2:	2200      	movs	r2, #0
 8016df4:	6879      	ldr	r1, [r7, #4]
 8016df6:	47a0      	blx	r4
 8016df8:	4603      	mov	r3, r0
 8016dfa:	73fb      	strb	r3, [r7, #15]
 8016dfc:	e001      	b.n	8016e02 <tcp_process_refused_data+0xb6>
 8016dfe:	2300      	movs	r3, #0
 8016e00:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8016e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016e06:	f113 0f0d 	cmn.w	r3, #13
 8016e0a:	d110      	bne.n	8016e2e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8016e0c:	f06f 030c 	mvn.w	r3, #12
 8016e10:	e00e      	b.n	8016e30 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8016e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016e16:	f113 0f0d 	cmn.w	r3, #13
 8016e1a:	d102      	bne.n	8016e22 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8016e1c:	f06f 030c 	mvn.w	r3, #12
 8016e20:	e006      	b.n	8016e30 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	68ba      	ldr	r2, [r7, #8]
 8016e26:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8016e28:	f06f 0304 	mvn.w	r3, #4
 8016e2c:	e000      	b.n	8016e30 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8016e2e:	2300      	movs	r3, #0
}
 8016e30:	4618      	mov	r0, r3
 8016e32:	3714      	adds	r7, #20
 8016e34:	46bd      	mov	sp, r7
 8016e36:	bd90      	pop	{r4, r7, pc}
 8016e38:	08024528 	.word	0x08024528
 8016e3c:	08024a38 	.word	0x08024a38
 8016e40:	0802456c 	.word	0x0802456c

08016e44 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8016e44:	b580      	push	{r7, lr}
 8016e46:	b084      	sub	sp, #16
 8016e48:	af00      	add	r7, sp, #0
 8016e4a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8016e4c:	e007      	b.n	8016e5e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8016e54:	6878      	ldr	r0, [r7, #4]
 8016e56:	f000 f80a 	bl	8016e6e <tcp_seg_free>
    seg = next;
 8016e5a:	68fb      	ldr	r3, [r7, #12]
 8016e5c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8016e5e:	687b      	ldr	r3, [r7, #4]
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	d1f4      	bne.n	8016e4e <tcp_segs_free+0xa>
  }
}
 8016e64:	bf00      	nop
 8016e66:	bf00      	nop
 8016e68:	3710      	adds	r7, #16
 8016e6a:	46bd      	mov	sp, r7
 8016e6c:	bd80      	pop	{r7, pc}

08016e6e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8016e6e:	b580      	push	{r7, lr}
 8016e70:	b082      	sub	sp, #8
 8016e72:	af00      	add	r7, sp, #0
 8016e74:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d00c      	beq.n	8016e96 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	685b      	ldr	r3, [r3, #4]
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	d004      	beq.n	8016e8e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	685b      	ldr	r3, [r3, #4]
 8016e88:	4618      	mov	r0, r3
 8016e8a:	f7fe fa7b 	bl	8015384 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8016e8e:	6879      	ldr	r1, [r7, #4]
 8016e90:	2003      	movs	r0, #3
 8016e92:	f7fd fa89 	bl	80143a8 <memp_free>
  }
}
 8016e96:	bf00      	nop
 8016e98:	3708      	adds	r7, #8
 8016e9a:	46bd      	mov	sp, r7
 8016e9c:	bd80      	pop	{r7, pc}
	...

08016ea0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8016ea0:	b580      	push	{r7, lr}
 8016ea2:	b084      	sub	sp, #16
 8016ea4:	af00      	add	r7, sp, #0
 8016ea6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d106      	bne.n	8016ebc <tcp_seg_copy+0x1c>
 8016eae:	4b11      	ldr	r3, [pc, #68]	@ (8016ef4 <tcp_seg_copy+0x54>)
 8016eb0:	f240 6282 	movw	r2, #1666	@ 0x682
 8016eb4:	4910      	ldr	r1, [pc, #64]	@ (8016ef8 <tcp_seg_copy+0x58>)
 8016eb6:	4811      	ldr	r0, [pc, #68]	@ (8016efc <tcp_seg_copy+0x5c>)
 8016eb8:	f00a f904 	bl	80210c4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8016ebc:	f240 6284 	movw	r2, #1668	@ 0x684
 8016ec0:	490c      	ldr	r1, [pc, #48]	@ (8016ef4 <tcp_seg_copy+0x54>)
 8016ec2:	2003      	movs	r0, #3
 8016ec4:	f7fd f9de 	bl	8014284 <memp_malloc_fn>
 8016ec8:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8016eca:	68fb      	ldr	r3, [r7, #12]
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	d101      	bne.n	8016ed4 <tcp_seg_copy+0x34>
    return NULL;
 8016ed0:	2300      	movs	r3, #0
 8016ed2:	e00a      	b.n	8016eea <tcp_seg_copy+0x4a>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8016ed4:	2214      	movs	r2, #20
 8016ed6:	6879      	ldr	r1, [r7, #4]
 8016ed8:	68f8      	ldr	r0, [r7, #12]
 8016eda:	f00a fb18 	bl	802150e <memcpy>
  pbuf_ref(cseg->p);
 8016ede:	68fb      	ldr	r3, [r7, #12]
 8016ee0:	685b      	ldr	r3, [r3, #4]
 8016ee2:	4618      	mov	r0, r3
 8016ee4:	f7fe fb0c 	bl	8015500 <pbuf_ref>
  return cseg;
 8016ee8:	68fb      	ldr	r3, [r7, #12]
}
 8016eea:	4618      	mov	r0, r3
 8016eec:	3710      	adds	r7, #16
 8016eee:	46bd      	mov	sp, r7
 8016ef0:	bd80      	pop	{r7, pc}
 8016ef2:	bf00      	nop
 8016ef4:	08024528 	.word	0x08024528
 8016ef8:	08024a7c 	.word	0x08024a7c
 8016efc:	0802456c 	.word	0x0802456c

08016f00 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8016f00:	b580      	push	{r7, lr}
 8016f02:	b084      	sub	sp, #16
 8016f04:	af00      	add	r7, sp, #0
 8016f06:	60f8      	str	r0, [r7, #12]
 8016f08:	60b9      	str	r1, [r7, #8]
 8016f0a:	607a      	str	r2, [r7, #4]
 8016f0c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8016f0e:	68bb      	ldr	r3, [r7, #8]
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	d109      	bne.n	8016f28 <tcp_recv_null+0x28>
 8016f14:	4b12      	ldr	r3, [pc, #72]	@ (8016f60 <tcp_recv_null+0x60>)
 8016f16:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8016f1a:	4912      	ldr	r1, [pc, #72]	@ (8016f64 <tcp_recv_null+0x64>)
 8016f1c:	4812      	ldr	r0, [pc, #72]	@ (8016f68 <tcp_recv_null+0x68>)
 8016f1e:	f00a f8d1 	bl	80210c4 <iprintf>
 8016f22:	f06f 030f 	mvn.w	r3, #15
 8016f26:	e016      	b.n	8016f56 <tcp_recv_null+0x56>

  if (p != NULL) {
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	d009      	beq.n	8016f42 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	891b      	ldrh	r3, [r3, #8]
 8016f32:	4619      	mov	r1, r3
 8016f34:	68b8      	ldr	r0, [r7, #8]
 8016f36:	f7ff facd 	bl	80164d4 <tcp_recved>
    pbuf_free(p);
 8016f3a:	6878      	ldr	r0, [r7, #4]
 8016f3c:	f7fe fa22 	bl	8015384 <pbuf_free>
 8016f40:	e008      	b.n	8016f54 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8016f42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	d104      	bne.n	8016f54 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8016f4a:	68b8      	ldr	r0, [r7, #8]
 8016f4c:	f7ff f87e 	bl	801604c <tcp_close>
 8016f50:	4603      	mov	r3, r0
 8016f52:	e000      	b.n	8016f56 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8016f54:	2300      	movs	r3, #0
}
 8016f56:	4618      	mov	r0, r3
 8016f58:	3710      	adds	r7, #16
 8016f5a:	46bd      	mov	sp, r7
 8016f5c:	bd80      	pop	{r7, pc}
 8016f5e:	bf00      	nop
 8016f60:	08024528 	.word	0x08024528
 8016f64:	08024a98 	.word	0x08024a98
 8016f68:	0802456c 	.word	0x0802456c

08016f6c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8016f6c:	b580      	push	{r7, lr}
 8016f6e:	b086      	sub	sp, #24
 8016f70:	af00      	add	r7, sp, #0
 8016f72:	4603      	mov	r3, r0
 8016f74:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8016f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	db01      	blt.n	8016f82 <tcp_kill_prio+0x16>
 8016f7e:	79fb      	ldrb	r3, [r7, #7]
 8016f80:	e000      	b.n	8016f84 <tcp_kill_prio+0x18>
 8016f82:	237f      	movs	r3, #127	@ 0x7f
 8016f84:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8016f86:	7afb      	ldrb	r3, [r7, #11]
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	d034      	beq.n	8016ff6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8016f8c:	7afb      	ldrb	r3, [r7, #11]
 8016f8e:	3b01      	subs	r3, #1
 8016f90:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8016f92:	2300      	movs	r3, #0
 8016f94:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8016f96:	2300      	movs	r3, #0
 8016f98:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016f9a:	4b19      	ldr	r3, [pc, #100]	@ (8017000 <tcp_kill_prio+0x94>)
 8016f9c:	681b      	ldr	r3, [r3, #0]
 8016f9e:	617b      	str	r3, [r7, #20]
 8016fa0:	e01f      	b.n	8016fe2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8016fa2:	697b      	ldr	r3, [r7, #20]
 8016fa4:	7d5b      	ldrb	r3, [r3, #21]
 8016fa6:	7afa      	ldrb	r2, [r7, #11]
 8016fa8:	429a      	cmp	r2, r3
 8016faa:	d80c      	bhi.n	8016fc6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8016fac:	697b      	ldr	r3, [r7, #20]
 8016fae:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8016fb0:	7afa      	ldrb	r2, [r7, #11]
 8016fb2:	429a      	cmp	r2, r3
 8016fb4:	d112      	bne.n	8016fdc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8016fb6:	4b13      	ldr	r3, [pc, #76]	@ (8017004 <tcp_kill_prio+0x98>)
 8016fb8:	681a      	ldr	r2, [r3, #0]
 8016fba:	697b      	ldr	r3, [r7, #20]
 8016fbc:	6a1b      	ldr	r3, [r3, #32]
 8016fbe:	1ad3      	subs	r3, r2, r3
 8016fc0:	68fa      	ldr	r2, [r7, #12]
 8016fc2:	429a      	cmp	r2, r3
 8016fc4:	d80a      	bhi.n	8016fdc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8016fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8017004 <tcp_kill_prio+0x98>)
 8016fc8:	681a      	ldr	r2, [r3, #0]
 8016fca:	697b      	ldr	r3, [r7, #20]
 8016fcc:	6a1b      	ldr	r3, [r3, #32]
 8016fce:	1ad3      	subs	r3, r2, r3
 8016fd0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8016fd2:	697b      	ldr	r3, [r7, #20]
 8016fd4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8016fd6:	697b      	ldr	r3, [r7, #20]
 8016fd8:	7d5b      	ldrb	r3, [r3, #21]
 8016fda:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016fdc:	697b      	ldr	r3, [r7, #20]
 8016fde:	68db      	ldr	r3, [r3, #12]
 8016fe0:	617b      	str	r3, [r7, #20]
 8016fe2:	697b      	ldr	r3, [r7, #20]
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	d1dc      	bne.n	8016fa2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8016fe8:	693b      	ldr	r3, [r7, #16]
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d004      	beq.n	8016ff8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8016fee:	6938      	ldr	r0, [r7, #16]
 8016ff0:	f7ff f972 	bl	80162d8 <tcp_abort>
 8016ff4:	e000      	b.n	8016ff8 <tcp_kill_prio+0x8c>
    return;
 8016ff6:	bf00      	nop
  }
}
 8016ff8:	3718      	adds	r7, #24
 8016ffa:	46bd      	mov	sp, r7
 8016ffc:	bd80      	pop	{r7, pc}
 8016ffe:	bf00      	nop
 8017000:	20028424 	.word	0x20028424
 8017004:	20028418 	.word	0x20028418

08017008 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8017008:	b580      	push	{r7, lr}
 801700a:	b086      	sub	sp, #24
 801700c:	af00      	add	r7, sp, #0
 801700e:	4603      	mov	r3, r0
 8017010:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8017012:	79fb      	ldrb	r3, [r7, #7]
 8017014:	2b08      	cmp	r3, #8
 8017016:	d009      	beq.n	801702c <tcp_kill_state+0x24>
 8017018:	79fb      	ldrb	r3, [r7, #7]
 801701a:	2b09      	cmp	r3, #9
 801701c:	d006      	beq.n	801702c <tcp_kill_state+0x24>
 801701e:	4b1a      	ldr	r3, [pc, #104]	@ (8017088 <tcp_kill_state+0x80>)
 8017020:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8017024:	4919      	ldr	r1, [pc, #100]	@ (801708c <tcp_kill_state+0x84>)
 8017026:	481a      	ldr	r0, [pc, #104]	@ (8017090 <tcp_kill_state+0x88>)
 8017028:	f00a f84c 	bl	80210c4 <iprintf>

  inactivity = 0;
 801702c:	2300      	movs	r3, #0
 801702e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8017030:	2300      	movs	r3, #0
 8017032:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017034:	4b17      	ldr	r3, [pc, #92]	@ (8017094 <tcp_kill_state+0x8c>)
 8017036:	681b      	ldr	r3, [r3, #0]
 8017038:	617b      	str	r3, [r7, #20]
 801703a:	e017      	b.n	801706c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801703c:	697b      	ldr	r3, [r7, #20]
 801703e:	7d1b      	ldrb	r3, [r3, #20]
 8017040:	79fa      	ldrb	r2, [r7, #7]
 8017042:	429a      	cmp	r2, r3
 8017044:	d10f      	bne.n	8017066 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017046:	4b14      	ldr	r3, [pc, #80]	@ (8017098 <tcp_kill_state+0x90>)
 8017048:	681a      	ldr	r2, [r3, #0]
 801704a:	697b      	ldr	r3, [r7, #20]
 801704c:	6a1b      	ldr	r3, [r3, #32]
 801704e:	1ad3      	subs	r3, r2, r3
 8017050:	68fa      	ldr	r2, [r7, #12]
 8017052:	429a      	cmp	r2, r3
 8017054:	d807      	bhi.n	8017066 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8017056:	4b10      	ldr	r3, [pc, #64]	@ (8017098 <tcp_kill_state+0x90>)
 8017058:	681a      	ldr	r2, [r3, #0]
 801705a:	697b      	ldr	r3, [r7, #20]
 801705c:	6a1b      	ldr	r3, [r3, #32]
 801705e:	1ad3      	subs	r3, r2, r3
 8017060:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8017062:	697b      	ldr	r3, [r7, #20]
 8017064:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017066:	697b      	ldr	r3, [r7, #20]
 8017068:	68db      	ldr	r3, [r3, #12]
 801706a:	617b      	str	r3, [r7, #20]
 801706c:	697b      	ldr	r3, [r7, #20]
 801706e:	2b00      	cmp	r3, #0
 8017070:	d1e4      	bne.n	801703c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8017072:	693b      	ldr	r3, [r7, #16]
 8017074:	2b00      	cmp	r3, #0
 8017076:	d003      	beq.n	8017080 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8017078:	2100      	movs	r1, #0
 801707a:	6938      	ldr	r0, [r7, #16]
 801707c:	f7ff f86e 	bl	801615c <tcp_abandon>
  }
}
 8017080:	bf00      	nop
 8017082:	3718      	adds	r7, #24
 8017084:	46bd      	mov	sp, r7
 8017086:	bd80      	pop	{r7, pc}
 8017088:	08024528 	.word	0x08024528
 801708c:	08024ab4 	.word	0x08024ab4
 8017090:	0802456c 	.word	0x0802456c
 8017094:	20028424 	.word	0x20028424
 8017098:	20028418 	.word	0x20028418

0801709c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801709c:	b580      	push	{r7, lr}
 801709e:	b084      	sub	sp, #16
 80170a0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80170a2:	2300      	movs	r3, #0
 80170a4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80170a6:	2300      	movs	r3, #0
 80170a8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80170aa:	4b12      	ldr	r3, [pc, #72]	@ (80170f4 <tcp_kill_timewait+0x58>)
 80170ac:	681b      	ldr	r3, [r3, #0]
 80170ae:	60fb      	str	r3, [r7, #12]
 80170b0:	e012      	b.n	80170d8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80170b2:	4b11      	ldr	r3, [pc, #68]	@ (80170f8 <tcp_kill_timewait+0x5c>)
 80170b4:	681a      	ldr	r2, [r3, #0]
 80170b6:	68fb      	ldr	r3, [r7, #12]
 80170b8:	6a1b      	ldr	r3, [r3, #32]
 80170ba:	1ad3      	subs	r3, r2, r3
 80170bc:	687a      	ldr	r2, [r7, #4]
 80170be:	429a      	cmp	r2, r3
 80170c0:	d807      	bhi.n	80170d2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80170c2:	4b0d      	ldr	r3, [pc, #52]	@ (80170f8 <tcp_kill_timewait+0x5c>)
 80170c4:	681a      	ldr	r2, [r3, #0]
 80170c6:	68fb      	ldr	r3, [r7, #12]
 80170c8:	6a1b      	ldr	r3, [r3, #32]
 80170ca:	1ad3      	subs	r3, r2, r3
 80170cc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80170ce:	68fb      	ldr	r3, [r7, #12]
 80170d0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80170d2:	68fb      	ldr	r3, [r7, #12]
 80170d4:	68db      	ldr	r3, [r3, #12]
 80170d6:	60fb      	str	r3, [r7, #12]
 80170d8:	68fb      	ldr	r3, [r7, #12]
 80170da:	2b00      	cmp	r3, #0
 80170dc:	d1e9      	bne.n	80170b2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80170de:	68bb      	ldr	r3, [r7, #8]
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	d002      	beq.n	80170ea <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80170e4:	68b8      	ldr	r0, [r7, #8]
 80170e6:	f7ff f8f7 	bl	80162d8 <tcp_abort>
  }
}
 80170ea:	bf00      	nop
 80170ec:	3710      	adds	r7, #16
 80170ee:	46bd      	mov	sp, r7
 80170f0:	bd80      	pop	{r7, pc}
 80170f2:	bf00      	nop
 80170f4:	20028428 	.word	0x20028428
 80170f8:	20028418 	.word	0x20028418

080170fc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80170fc:	b580      	push	{r7, lr}
 80170fe:	b082      	sub	sp, #8
 8017100:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8017102:	4b10      	ldr	r3, [pc, #64]	@ (8017144 <tcp_handle_closepend+0x48>)
 8017104:	681b      	ldr	r3, [r3, #0]
 8017106:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8017108:	e014      	b.n	8017134 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801710a:	687b      	ldr	r3, [r7, #4]
 801710c:	68db      	ldr	r3, [r3, #12]
 801710e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	8b5b      	ldrh	r3, [r3, #26]
 8017114:	f003 0308 	and.w	r3, r3, #8
 8017118:	2b00      	cmp	r3, #0
 801711a:	d009      	beq.n	8017130 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	8b5b      	ldrh	r3, [r3, #26]
 8017120:	f023 0308 	bic.w	r3, r3, #8
 8017124:	b29a      	uxth	r2, r3
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801712a:	6878      	ldr	r0, [r7, #4]
 801712c:	f7fe ff24 	bl	8015f78 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8017130:	683b      	ldr	r3, [r7, #0]
 8017132:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	2b00      	cmp	r3, #0
 8017138:	d1e7      	bne.n	801710a <tcp_handle_closepend+0xe>
  }
}
 801713a:	bf00      	nop
 801713c:	bf00      	nop
 801713e:	3708      	adds	r7, #8
 8017140:	46bd      	mov	sp, r7
 8017142:	bd80      	pop	{r7, pc}
 8017144:	20028424 	.word	0x20028424

08017148 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8017148:	b580      	push	{r7, lr}
 801714a:	b084      	sub	sp, #16
 801714c:	af00      	add	r7, sp, #0
 801714e:	4603      	mov	r3, r0
 8017150:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017152:	f44f 62e6 	mov.w	r2, #1840	@ 0x730
 8017156:	4955      	ldr	r1, [pc, #340]	@ (80172ac <tcp_alloc+0x164>)
 8017158:	2001      	movs	r0, #1
 801715a:	f7fd f893 	bl	8014284 <memp_malloc_fn>
 801715e:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8017160:	68fb      	ldr	r3, [r7, #12]
 8017162:	2b00      	cmp	r3, #0
 8017164:	d15a      	bne.n	801721c <tcp_alloc+0xd4>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8017166:	f7ff ffc9 	bl	80170fc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801716a:	f7ff ff97 	bl	801709c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801716e:	f240 7239 	movw	r2, #1849	@ 0x739
 8017172:	494e      	ldr	r1, [pc, #312]	@ (80172ac <tcp_alloc+0x164>)
 8017174:	2001      	movs	r0, #1
 8017176:	f7fd f885 	bl	8014284 <memp_malloc_fn>
 801717a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	2b00      	cmp	r3, #0
 8017180:	d142      	bne.n	8017208 <tcp_alloc+0xc0>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8017182:	2009      	movs	r0, #9
 8017184:	f7ff ff40 	bl	8017008 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017188:	f240 723f 	movw	r2, #1855	@ 0x73f
 801718c:	4947      	ldr	r1, [pc, #284]	@ (80172ac <tcp_alloc+0x164>)
 801718e:	2001      	movs	r0, #1
 8017190:	f7fd f878 	bl	8014284 <memp_malloc_fn>
 8017194:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8017196:	68fb      	ldr	r3, [r7, #12]
 8017198:	2b00      	cmp	r3, #0
 801719a:	d12b      	bne.n	80171f4 <tcp_alloc+0xac>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801719c:	2008      	movs	r0, #8
 801719e:	f7ff ff33 	bl	8017008 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80171a2:	f240 7245 	movw	r2, #1861	@ 0x745
 80171a6:	4941      	ldr	r1, [pc, #260]	@ (80172ac <tcp_alloc+0x164>)
 80171a8:	2001      	movs	r0, #1
 80171aa:	f7fd f86b 	bl	8014284 <memp_malloc_fn>
 80171ae:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d114      	bne.n	80171e0 <tcp_alloc+0x98>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80171b6:	79fb      	ldrb	r3, [r7, #7]
 80171b8:	4618      	mov	r0, r3
 80171ba:	f7ff fed7 	bl	8016f6c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80171be:	f240 724b 	movw	r2, #1867	@ 0x74b
 80171c2:	493a      	ldr	r1, [pc, #232]	@ (80172ac <tcp_alloc+0x164>)
 80171c4:	2001      	movs	r0, #1
 80171c6:	f7fd f85d 	bl	8014284 <memp_malloc_fn>
 80171ca:	60f8      	str	r0, [r7, #12]
          if (pcb != NULL) {
 80171cc:	68fb      	ldr	r3, [r7, #12]
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	d006      	beq.n	80171e0 <tcp_alloc+0x98>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80171d2:	4b37      	ldr	r3, [pc, #220]	@ (80172b0 <tcp_alloc+0x168>)
 80171d4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80171d8:	889a      	ldrh	r2, [r3, #4]
 80171da:	3a01      	subs	r2, #1
 80171dc:	b292      	uxth	r2, r2
 80171de:	809a      	strh	r2, [r3, #4]
          }
        }
        if (pcb != NULL) {
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	2b00      	cmp	r3, #0
 80171e4:	d006      	beq.n	80171f4 <tcp_alloc+0xac>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80171e6:	4b32      	ldr	r3, [pc, #200]	@ (80172b0 <tcp_alloc+0x168>)
 80171e8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80171ec:	889a      	ldrh	r2, [r3, #4]
 80171ee:	3a01      	subs	r2, #1
 80171f0:	b292      	uxth	r2, r2
 80171f2:	809a      	strh	r2, [r3, #4]
        }
      }
      if (pcb != NULL) {
 80171f4:	68fb      	ldr	r3, [r7, #12]
 80171f6:	2b00      	cmp	r3, #0
 80171f8:	d006      	beq.n	8017208 <tcp_alloc+0xc0>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80171fa:	4b2d      	ldr	r3, [pc, #180]	@ (80172b0 <tcp_alloc+0x168>)
 80171fc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8017200:	889a      	ldrh	r2, [r3, #4]
 8017202:	3a01      	subs	r2, #1
 8017204:	b292      	uxth	r2, r2
 8017206:	809a      	strh	r2, [r3, #4]
      }
    }
    if (pcb != NULL) {
 8017208:	68fb      	ldr	r3, [r7, #12]
 801720a:	2b00      	cmp	r3, #0
 801720c:	d006      	beq.n	801721c <tcp_alloc+0xd4>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 801720e:	4b28      	ldr	r3, [pc, #160]	@ (80172b0 <tcp_alloc+0x168>)
 8017210:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8017214:	889a      	ldrh	r2, [r3, #4]
 8017216:	3a01      	subs	r2, #1
 8017218:	b292      	uxth	r2, r2
 801721a:	809a      	strh	r2, [r3, #4]
    }
  }
  if (pcb != NULL) {
 801721c:	68fb      	ldr	r3, [r7, #12]
 801721e:	2b00      	cmp	r3, #0
 8017220:	d03f      	beq.n	80172a2 <tcp_alloc+0x15a>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8017222:	229c      	movs	r2, #156	@ 0x9c
 8017224:	2100      	movs	r1, #0
 8017226:	68f8      	ldr	r0, [r7, #12]
 8017228:	f00a f8fc 	bl	8021424 <memset>
    pcb->prio = prio;
 801722c:	68fb      	ldr	r3, [r7, #12]
 801722e:	79fa      	ldrb	r2, [r7, #7]
 8017230:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8017232:	68fb      	ldr	r3, [r7, #12]
 8017234:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8017238:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801723c:	68fb      	ldr	r3, [r7, #12]
 801723e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8017242:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8017244:	68fb      	ldr	r3, [r7, #12]
 8017246:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8017248:	68fb      	ldr	r3, [r7, #12]
 801724a:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 801724c:	68fb      	ldr	r3, [r7, #12]
 801724e:	22ff      	movs	r2, #255	@ 0xff
 8017250:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8017252:	68fb      	ldr	r3, [r7, #12]
 8017254:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8017258:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801725a:	68fb      	ldr	r3, [r7, #12]
 801725c:	2206      	movs	r2, #6
 801725e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8017262:	68fb      	ldr	r3, [r7, #12]
 8017264:	2206      	movs	r2, #6
 8017266:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8017268:	68fb      	ldr	r3, [r7, #12]
 801726a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801726e:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8017270:	68fb      	ldr	r3, [r7, #12]
 8017272:	2201      	movs	r2, #1
 8017274:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8017278:	4b0e      	ldr	r3, [pc, #56]	@ (80172b4 <tcp_alloc+0x16c>)
 801727a:	681a      	ldr	r2, [r3, #0]
 801727c:	68fb      	ldr	r3, [r7, #12]
 801727e:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8017280:	4b0d      	ldr	r3, [pc, #52]	@ (80172b8 <tcp_alloc+0x170>)
 8017282:	781a      	ldrb	r2, [r3, #0]
 8017284:	68fb      	ldr	r3, [r7, #12]
 8017286:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8017288:	68fb      	ldr	r3, [r7, #12]
 801728a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 801728e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8017292:	68fb      	ldr	r3, [r7, #12]
 8017294:	4a09      	ldr	r2, [pc, #36]	@ (80172bc <tcp_alloc+0x174>)
 8017296:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801729a:	68fb      	ldr	r3, [r7, #12]
 801729c:	4a08      	ldr	r2, [pc, #32]	@ (80172c0 <tcp_alloc+0x178>)
 801729e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80172a2:	68fb      	ldr	r3, [r7, #12]
}
 80172a4:	4618      	mov	r0, r3
 80172a6:	3710      	adds	r7, #16
 80172a8:	46bd      	mov	sp, r7
 80172aa:	bd80      	pop	{r7, pc}
 80172ac:	08024528 	.word	0x08024528
 80172b0:	20028318 	.word	0x20028318
 80172b4:	20028418 	.word	0x20028418
 80172b8:	2002842e 	.word	0x2002842e
 80172bc:	08016f01 	.word	0x08016f01
 80172c0:	006ddd00 	.word	0x006ddd00

080172c4 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80172c4:	b580      	push	{r7, lr}
 80172c6:	b084      	sub	sp, #16
 80172c8:	af00      	add	r7, sp, #0
 80172ca:	4603      	mov	r3, r0
 80172cc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80172ce:	2040      	movs	r0, #64	@ 0x40
 80172d0:	f7ff ff3a 	bl	8017148 <tcp_alloc>
 80172d4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80172d6:	68fb      	ldr	r3, [r7, #12]
}
 80172d8:	4618      	mov	r0, r3
 80172da:	3710      	adds	r7, #16
 80172dc:	46bd      	mov	sp, r7
 80172de:	bd80      	pop	{r7, pc}

080172e0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80172e0:	b480      	push	{r7}
 80172e2:	b083      	sub	sp, #12
 80172e4:	af00      	add	r7, sp, #0
 80172e6:	6078      	str	r0, [r7, #4]
 80172e8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	2b00      	cmp	r3, #0
 80172ee:	d002      	beq.n	80172f6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	683a      	ldr	r2, [r7, #0]
 80172f4:	611a      	str	r2, [r3, #16]
  }
}
 80172f6:	bf00      	nop
 80172f8:	370c      	adds	r7, #12
 80172fa:	46bd      	mov	sp, r7
 80172fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017300:	4770      	bx	lr
	...

08017304 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8017304:	b580      	push	{r7, lr}
 8017306:	b082      	sub	sp, #8
 8017308:	af00      	add	r7, sp, #0
 801730a:	6078      	str	r0, [r7, #4]
 801730c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	2b00      	cmp	r3, #0
 8017312:	d00e      	beq.n	8017332 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	7d1b      	ldrb	r3, [r3, #20]
 8017318:	2b01      	cmp	r3, #1
 801731a:	d106      	bne.n	801732a <tcp_recv+0x26>
 801731c:	4b07      	ldr	r3, [pc, #28]	@ (801733c <tcp_recv+0x38>)
 801731e:	f240 72df 	movw	r2, #2015	@ 0x7df
 8017322:	4907      	ldr	r1, [pc, #28]	@ (8017340 <tcp_recv+0x3c>)
 8017324:	4807      	ldr	r0, [pc, #28]	@ (8017344 <tcp_recv+0x40>)
 8017326:	f009 fecd 	bl	80210c4 <iprintf>
    pcb->recv = recv;
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	683a      	ldr	r2, [r7, #0]
 801732e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 8017332:	bf00      	nop
 8017334:	3708      	adds	r7, #8
 8017336:	46bd      	mov	sp, r7
 8017338:	bd80      	pop	{r7, pc}
 801733a:	bf00      	nop
 801733c:	08024528 	.word	0x08024528
 8017340:	08024ac4 	.word	0x08024ac4
 8017344:	0802456c 	.word	0x0802456c

08017348 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8017348:	b580      	push	{r7, lr}
 801734a:	b082      	sub	sp, #8
 801734c:	af00      	add	r7, sp, #0
 801734e:	6078      	str	r0, [r7, #4]
 8017350:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	2b00      	cmp	r3, #0
 8017356:	d00e      	beq.n	8017376 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	7d1b      	ldrb	r3, [r3, #20]
 801735c:	2b01      	cmp	r3, #1
 801735e:	d106      	bne.n	801736e <tcp_sent+0x26>
 8017360:	4b07      	ldr	r3, [pc, #28]	@ (8017380 <tcp_sent+0x38>)
 8017362:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 8017366:	4907      	ldr	r1, [pc, #28]	@ (8017384 <tcp_sent+0x3c>)
 8017368:	4807      	ldr	r0, [pc, #28]	@ (8017388 <tcp_sent+0x40>)
 801736a:	f009 feab 	bl	80210c4 <iprintf>
    pcb->sent = sent;
 801736e:	687b      	ldr	r3, [r7, #4]
 8017370:	683a      	ldr	r2, [r7, #0]
 8017372:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 8017376:	bf00      	nop
 8017378:	3708      	adds	r7, #8
 801737a:	46bd      	mov	sp, r7
 801737c:	bd80      	pop	{r7, pc}
 801737e:	bf00      	nop
 8017380:	08024528 	.word	0x08024528
 8017384:	08024aec 	.word	0x08024aec
 8017388:	0802456c 	.word	0x0802456c

0801738c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 801738c:	b580      	push	{r7, lr}
 801738e:	b082      	sub	sp, #8
 8017390:	af00      	add	r7, sp, #0
 8017392:	6078      	str	r0, [r7, #4]
 8017394:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	2b00      	cmp	r3, #0
 801739a:	d00e      	beq.n	80173ba <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	7d1b      	ldrb	r3, [r3, #20]
 80173a0:	2b01      	cmp	r3, #1
 80173a2:	d106      	bne.n	80173b2 <tcp_err+0x26>
 80173a4:	4b07      	ldr	r3, [pc, #28]	@ (80173c4 <tcp_err+0x38>)
 80173a6:	f640 020d 	movw	r2, #2061	@ 0x80d
 80173aa:	4907      	ldr	r1, [pc, #28]	@ (80173c8 <tcp_err+0x3c>)
 80173ac:	4807      	ldr	r0, [pc, #28]	@ (80173cc <tcp_err+0x40>)
 80173ae:	f009 fe89 	bl	80210c4 <iprintf>
    pcb->errf = err;
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	683a      	ldr	r2, [r7, #0]
 80173b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 80173ba:	bf00      	nop
 80173bc:	3708      	adds	r7, #8
 80173be:	46bd      	mov	sp, r7
 80173c0:	bd80      	pop	{r7, pc}
 80173c2:	bf00      	nop
 80173c4:	08024528 	.word	0x08024528
 80173c8:	08024b14 	.word	0x08024b14
 80173cc:	0802456c 	.word	0x0802456c

080173d0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80173d0:	b480      	push	{r7}
 80173d2:	b085      	sub	sp, #20
 80173d4:	af00      	add	r7, sp, #0
 80173d6:	6078      	str	r0, [r7, #4]
 80173d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	2b00      	cmp	r3, #0
 80173de:	d008      	beq.n	80173f2 <tcp_accept+0x22>
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	7d1b      	ldrb	r3, [r3, #20]
 80173e4:	2b01      	cmp	r3, #1
 80173e6:	d104      	bne.n	80173f2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80173ec:	68fb      	ldr	r3, [r7, #12]
 80173ee:	683a      	ldr	r2, [r7, #0]
 80173f0:	619a      	str	r2, [r3, #24]
  }
}
 80173f2:	bf00      	nop
 80173f4:	3714      	adds	r7, #20
 80173f6:	46bd      	mov	sp, r7
 80173f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173fc:	4770      	bx	lr
	...

08017400 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8017400:	b580      	push	{r7, lr}
 8017402:	b084      	sub	sp, #16
 8017404:	af00      	add	r7, sp, #0
 8017406:	60f8      	str	r0, [r7, #12]
 8017408:	60b9      	str	r1, [r7, #8]
 801740a:	4613      	mov	r3, r2
 801740c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801740e:	68fb      	ldr	r3, [r7, #12]
 8017410:	2b00      	cmp	r3, #0
 8017412:	d107      	bne.n	8017424 <tcp_poll+0x24>
 8017414:	4b0e      	ldr	r3, [pc, #56]	@ (8017450 <tcp_poll+0x50>)
 8017416:	f640 023d 	movw	r2, #2109	@ 0x83d
 801741a:	490e      	ldr	r1, [pc, #56]	@ (8017454 <tcp_poll+0x54>)
 801741c:	480e      	ldr	r0, [pc, #56]	@ (8017458 <tcp_poll+0x58>)
 801741e:	f009 fe51 	bl	80210c4 <iprintf>
 8017422:	e011      	b.n	8017448 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8017424:	68fb      	ldr	r3, [r7, #12]
 8017426:	7d1b      	ldrb	r3, [r3, #20]
 8017428:	2b01      	cmp	r3, #1
 801742a:	d106      	bne.n	801743a <tcp_poll+0x3a>
 801742c:	4b08      	ldr	r3, [pc, #32]	@ (8017450 <tcp_poll+0x50>)
 801742e:	f640 023e 	movw	r2, #2110	@ 0x83e
 8017432:	490a      	ldr	r1, [pc, #40]	@ (801745c <tcp_poll+0x5c>)
 8017434:	4808      	ldr	r0, [pc, #32]	@ (8017458 <tcp_poll+0x58>)
 8017436:	f009 fe45 	bl	80210c4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801743a:	68fb      	ldr	r3, [r7, #12]
 801743c:	68ba      	ldr	r2, [r7, #8]
 801743e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8017442:	68fb      	ldr	r3, [r7, #12]
 8017444:	79fa      	ldrb	r2, [r7, #7]
 8017446:	775a      	strb	r2, [r3, #29]
}
 8017448:	3710      	adds	r7, #16
 801744a:	46bd      	mov	sp, r7
 801744c:	bd80      	pop	{r7, pc}
 801744e:	bf00      	nop
 8017450:	08024528 	.word	0x08024528
 8017454:	08024b3c 	.word	0x08024b3c
 8017458:	0802456c 	.word	0x0802456c
 801745c:	08024b54 	.word	0x08024b54

08017460 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8017460:	b580      	push	{r7, lr}
 8017462:	b082      	sub	sp, #8
 8017464:	af00      	add	r7, sp, #0
 8017466:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	2b00      	cmp	r3, #0
 801746c:	d107      	bne.n	801747e <tcp_pcb_purge+0x1e>
 801746e:	4b21      	ldr	r3, [pc, #132]	@ (80174f4 <tcp_pcb_purge+0x94>)
 8017470:	f640 0251 	movw	r2, #2129	@ 0x851
 8017474:	4920      	ldr	r1, [pc, #128]	@ (80174f8 <tcp_pcb_purge+0x98>)
 8017476:	4821      	ldr	r0, [pc, #132]	@ (80174fc <tcp_pcb_purge+0x9c>)
 8017478:	f009 fe24 	bl	80210c4 <iprintf>
 801747c:	e037      	b.n	80174ee <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	7d1b      	ldrb	r3, [r3, #20]
 8017482:	2b00      	cmp	r3, #0
 8017484:	d033      	beq.n	80174ee <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801748a:	2b0a      	cmp	r3, #10
 801748c:	d02f      	beq.n	80174ee <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8017492:	2b01      	cmp	r3, #1
 8017494:	d02b      	beq.n	80174ee <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801749a:	2b00      	cmp	r3, #0
 801749c:	d007      	beq.n	80174ae <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80174a2:	4618      	mov	r0, r3
 80174a4:	f7fd ff6e 	bl	8015384 <pbuf_free>
      pcb->refused_data = NULL;
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	2200      	movs	r2, #0
 80174ac:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	d002      	beq.n	80174bc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80174b6:	6878      	ldr	r0, [r7, #4]
 80174b8:	f000 f98c 	bl	80177d4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80174c2:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80174c8:	4618      	mov	r0, r3
 80174ca:	f7ff fcbb 	bl	8016e44 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80174d2:	4618      	mov	r0, r3
 80174d4:	f7ff fcb6 	bl	8016e44 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	2200      	movs	r2, #0
 80174dc:	66da      	str	r2, [r3, #108]	@ 0x6c
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	2200      	movs	r2, #0
 80174ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80174ee:	3708      	adds	r7, #8
 80174f0:	46bd      	mov	sp, r7
 80174f2:	bd80      	pop	{r7, pc}
 80174f4:	08024528 	.word	0x08024528
 80174f8:	08024b74 	.word	0x08024b74
 80174fc:	0802456c 	.word	0x0802456c

08017500 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8017500:	b580      	push	{r7, lr}
 8017502:	b084      	sub	sp, #16
 8017504:	af00      	add	r7, sp, #0
 8017506:	6078      	str	r0, [r7, #4]
 8017508:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801750a:	683b      	ldr	r3, [r7, #0]
 801750c:	2b00      	cmp	r3, #0
 801750e:	d106      	bne.n	801751e <tcp_pcb_remove+0x1e>
 8017510:	4b3e      	ldr	r3, [pc, #248]	@ (801760c <tcp_pcb_remove+0x10c>)
 8017512:	f640 0283 	movw	r2, #2179	@ 0x883
 8017516:	493e      	ldr	r1, [pc, #248]	@ (8017610 <tcp_pcb_remove+0x110>)
 8017518:	483e      	ldr	r0, [pc, #248]	@ (8017614 <tcp_pcb_remove+0x114>)
 801751a:	f009 fdd3 	bl	80210c4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	2b00      	cmp	r3, #0
 8017522:	d106      	bne.n	8017532 <tcp_pcb_remove+0x32>
 8017524:	4b39      	ldr	r3, [pc, #228]	@ (801760c <tcp_pcb_remove+0x10c>)
 8017526:	f640 0284 	movw	r2, #2180	@ 0x884
 801752a:	493b      	ldr	r1, [pc, #236]	@ (8017618 <tcp_pcb_remove+0x118>)
 801752c:	4839      	ldr	r0, [pc, #228]	@ (8017614 <tcp_pcb_remove+0x114>)
 801752e:	f009 fdc9 	bl	80210c4 <iprintf>

  TCP_RMV(pcblist, pcb);
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	681b      	ldr	r3, [r3, #0]
 8017536:	683a      	ldr	r2, [r7, #0]
 8017538:	429a      	cmp	r2, r3
 801753a:	d105      	bne.n	8017548 <tcp_pcb_remove+0x48>
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	681b      	ldr	r3, [r3, #0]
 8017540:	68da      	ldr	r2, [r3, #12]
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	601a      	str	r2, [r3, #0]
 8017546:	e013      	b.n	8017570 <tcp_pcb_remove+0x70>
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	681b      	ldr	r3, [r3, #0]
 801754c:	60fb      	str	r3, [r7, #12]
 801754e:	e00c      	b.n	801756a <tcp_pcb_remove+0x6a>
 8017550:	68fb      	ldr	r3, [r7, #12]
 8017552:	68db      	ldr	r3, [r3, #12]
 8017554:	683a      	ldr	r2, [r7, #0]
 8017556:	429a      	cmp	r2, r3
 8017558:	d104      	bne.n	8017564 <tcp_pcb_remove+0x64>
 801755a:	683b      	ldr	r3, [r7, #0]
 801755c:	68da      	ldr	r2, [r3, #12]
 801755e:	68fb      	ldr	r3, [r7, #12]
 8017560:	60da      	str	r2, [r3, #12]
 8017562:	e005      	b.n	8017570 <tcp_pcb_remove+0x70>
 8017564:	68fb      	ldr	r3, [r7, #12]
 8017566:	68db      	ldr	r3, [r3, #12]
 8017568:	60fb      	str	r3, [r7, #12]
 801756a:	68fb      	ldr	r3, [r7, #12]
 801756c:	2b00      	cmp	r3, #0
 801756e:	d1ef      	bne.n	8017550 <tcp_pcb_remove+0x50>
 8017570:	683b      	ldr	r3, [r7, #0]
 8017572:	2200      	movs	r2, #0
 8017574:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8017576:	6838      	ldr	r0, [r7, #0]
 8017578:	f7ff ff72 	bl	8017460 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801757c:	683b      	ldr	r3, [r7, #0]
 801757e:	7d1b      	ldrb	r3, [r3, #20]
 8017580:	2b0a      	cmp	r3, #10
 8017582:	d013      	beq.n	80175ac <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8017584:	683b      	ldr	r3, [r7, #0]
 8017586:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8017588:	2b01      	cmp	r3, #1
 801758a:	d00f      	beq.n	80175ac <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801758c:	683b      	ldr	r3, [r7, #0]
 801758e:	8b5b      	ldrh	r3, [r3, #26]
 8017590:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8017594:	2b00      	cmp	r3, #0
 8017596:	d009      	beq.n	80175ac <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8017598:	683b      	ldr	r3, [r7, #0]
 801759a:	8b5b      	ldrh	r3, [r3, #26]
 801759c:	f043 0302 	orr.w	r3, r3, #2
 80175a0:	b29a      	uxth	r2, r3
 80175a2:	683b      	ldr	r3, [r7, #0]
 80175a4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80175a6:	6838      	ldr	r0, [r7, #0]
 80175a8:	f003 fcca 	bl	801af40 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80175ac:	683b      	ldr	r3, [r7, #0]
 80175ae:	7d1b      	ldrb	r3, [r3, #20]
 80175b0:	2b01      	cmp	r3, #1
 80175b2:	d020      	beq.n	80175f6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80175b4:	683b      	ldr	r3, [r7, #0]
 80175b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d006      	beq.n	80175ca <tcp_pcb_remove+0xca>
 80175bc:	4b13      	ldr	r3, [pc, #76]	@ (801760c <tcp_pcb_remove+0x10c>)
 80175be:	f640 0293 	movw	r2, #2195	@ 0x893
 80175c2:	4916      	ldr	r1, [pc, #88]	@ (801761c <tcp_pcb_remove+0x11c>)
 80175c4:	4813      	ldr	r0, [pc, #76]	@ (8017614 <tcp_pcb_remove+0x114>)
 80175c6:	f009 fd7d 	bl	80210c4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80175ca:	683b      	ldr	r3, [r7, #0]
 80175cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	d006      	beq.n	80175e0 <tcp_pcb_remove+0xe0>
 80175d2:	4b0e      	ldr	r3, [pc, #56]	@ (801760c <tcp_pcb_remove+0x10c>)
 80175d4:	f640 0294 	movw	r2, #2196	@ 0x894
 80175d8:	4911      	ldr	r1, [pc, #68]	@ (8017620 <tcp_pcb_remove+0x120>)
 80175da:	480e      	ldr	r0, [pc, #56]	@ (8017614 <tcp_pcb_remove+0x114>)
 80175dc:	f009 fd72 	bl	80210c4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80175e0:	683b      	ldr	r3, [r7, #0]
 80175e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	d006      	beq.n	80175f6 <tcp_pcb_remove+0xf6>
 80175e8:	4b08      	ldr	r3, [pc, #32]	@ (801760c <tcp_pcb_remove+0x10c>)
 80175ea:	f640 0296 	movw	r2, #2198	@ 0x896
 80175ee:	490d      	ldr	r1, [pc, #52]	@ (8017624 <tcp_pcb_remove+0x124>)
 80175f0:	4808      	ldr	r0, [pc, #32]	@ (8017614 <tcp_pcb_remove+0x114>)
 80175f2:	f009 fd67 	bl	80210c4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80175f6:	683b      	ldr	r3, [r7, #0]
 80175f8:	2200      	movs	r2, #0
 80175fa:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80175fc:	683b      	ldr	r3, [r7, #0]
 80175fe:	2200      	movs	r2, #0
 8017600:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8017602:	bf00      	nop
 8017604:	3710      	adds	r7, #16
 8017606:	46bd      	mov	sp, r7
 8017608:	bd80      	pop	{r7, pc}
 801760a:	bf00      	nop
 801760c:	08024528 	.word	0x08024528
 8017610:	08024b90 	.word	0x08024b90
 8017614:	0802456c 	.word	0x0802456c
 8017618:	08024bac 	.word	0x08024bac
 801761c:	08024bcc 	.word	0x08024bcc
 8017620:	08024be4 	.word	0x08024be4
 8017624:	08024c00 	.word	0x08024c00

08017628 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8017628:	b580      	push	{r7, lr}
 801762a:	b082      	sub	sp, #8
 801762c:	af00      	add	r7, sp, #0
 801762e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	2b00      	cmp	r3, #0
 8017634:	d106      	bne.n	8017644 <tcp_next_iss+0x1c>
 8017636:	4b0a      	ldr	r3, [pc, #40]	@ (8017660 <tcp_next_iss+0x38>)
 8017638:	f640 02af 	movw	r2, #2223	@ 0x8af
 801763c:	4909      	ldr	r1, [pc, #36]	@ (8017664 <tcp_next_iss+0x3c>)
 801763e:	480a      	ldr	r0, [pc, #40]	@ (8017668 <tcp_next_iss+0x40>)
 8017640:	f009 fd40 	bl	80210c4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8017644:	4b09      	ldr	r3, [pc, #36]	@ (801766c <tcp_next_iss+0x44>)
 8017646:	681a      	ldr	r2, [r3, #0]
 8017648:	4b09      	ldr	r3, [pc, #36]	@ (8017670 <tcp_next_iss+0x48>)
 801764a:	681b      	ldr	r3, [r3, #0]
 801764c:	4413      	add	r3, r2
 801764e:	4a07      	ldr	r2, [pc, #28]	@ (801766c <tcp_next_iss+0x44>)
 8017650:	6013      	str	r3, [r2, #0]
  return iss;
 8017652:	4b06      	ldr	r3, [pc, #24]	@ (801766c <tcp_next_iss+0x44>)
 8017654:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8017656:	4618      	mov	r0, r3
 8017658:	3708      	adds	r7, #8
 801765a:	46bd      	mov	sp, r7
 801765c:	bd80      	pop	{r7, pc}
 801765e:	bf00      	nop
 8017660:	08024528 	.word	0x08024528
 8017664:	08024c18 	.word	0x08024c18
 8017668:	0802456c 	.word	0x0802456c
 801766c:	2000006c 	.word	0x2000006c
 8017670:	20028418 	.word	0x20028418

08017674 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8017674:	b580      	push	{r7, lr}
 8017676:	b086      	sub	sp, #24
 8017678:	af00      	add	r7, sp, #0
 801767a:	4603      	mov	r3, r0
 801767c:	60b9      	str	r1, [r7, #8]
 801767e:	607a      	str	r2, [r7, #4]
 8017680:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	2b00      	cmp	r3, #0
 8017686:	d106      	bne.n	8017696 <tcp_eff_send_mss_netif+0x22>
 8017688:	4b14      	ldr	r3, [pc, #80]	@ (80176dc <tcp_eff_send_mss_netif+0x68>)
 801768a:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 801768e:	4914      	ldr	r1, [pc, #80]	@ (80176e0 <tcp_eff_send_mss_netif+0x6c>)
 8017690:	4814      	ldr	r0, [pc, #80]	@ (80176e4 <tcp_eff_send_mss_netif+0x70>)
 8017692:	f009 fd17 	bl	80210c4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8017696:	68bb      	ldr	r3, [r7, #8]
 8017698:	2b00      	cmp	r3, #0
 801769a:	d101      	bne.n	80176a0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801769c:	89fb      	ldrh	r3, [r7, #14]
 801769e:	e019      	b.n	80176d4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80176a0:	68bb      	ldr	r3, [r7, #8]
 80176a2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80176a4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80176a6:	8afb      	ldrh	r3, [r7, #22]
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d012      	beq.n	80176d2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80176ac:	2328      	movs	r3, #40	@ 0x28
 80176ae:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80176b0:	8afa      	ldrh	r2, [r7, #22]
 80176b2:	8abb      	ldrh	r3, [r7, #20]
 80176b4:	429a      	cmp	r2, r3
 80176b6:	d904      	bls.n	80176c2 <tcp_eff_send_mss_netif+0x4e>
 80176b8:	8afa      	ldrh	r2, [r7, #22]
 80176ba:	8abb      	ldrh	r3, [r7, #20]
 80176bc:	1ad3      	subs	r3, r2, r3
 80176be:	b29b      	uxth	r3, r3
 80176c0:	e000      	b.n	80176c4 <tcp_eff_send_mss_netif+0x50>
 80176c2:	2300      	movs	r3, #0
 80176c4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80176c6:	8a7a      	ldrh	r2, [r7, #18]
 80176c8:	89fb      	ldrh	r3, [r7, #14]
 80176ca:	4293      	cmp	r3, r2
 80176cc:	bf28      	it	cs
 80176ce:	4613      	movcs	r3, r2
 80176d0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80176d2:	89fb      	ldrh	r3, [r7, #14]
}
 80176d4:	4618      	mov	r0, r3
 80176d6:	3718      	adds	r7, #24
 80176d8:	46bd      	mov	sp, r7
 80176da:	bd80      	pop	{r7, pc}
 80176dc:	08024528 	.word	0x08024528
 80176e0:	08024c34 	.word	0x08024c34
 80176e4:	0802456c 	.word	0x0802456c

080176e8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80176e8:	b580      	push	{r7, lr}
 80176ea:	b084      	sub	sp, #16
 80176ec:	af00      	add	r7, sp, #0
 80176ee:	6078      	str	r0, [r7, #4]
 80176f0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80176f2:	683b      	ldr	r3, [r7, #0]
 80176f4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d11d      	bne.n	8017738 <tcp_netif_ip_addr_changed_pcblist+0x50>
 80176fc:	4b12      	ldr	r3, [pc, #72]	@ (8017748 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80176fe:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8017702:	4912      	ldr	r1, [pc, #72]	@ (801774c <tcp_netif_ip_addr_changed_pcblist+0x64>)
 8017704:	4812      	ldr	r0, [pc, #72]	@ (8017750 <tcp_netif_ip_addr_changed_pcblist+0x68>)
 8017706:	f009 fcdd 	bl	80210c4 <iprintf>

  while (pcb != NULL) {
 801770a:	e015      	b.n	8017738 <tcp_netif_ip_addr_changed_pcblist+0x50>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801770c:	68fb      	ldr	r3, [r7, #12]
 801770e:	681a      	ldr	r2, [r3, #0]
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	681b      	ldr	r3, [r3, #0]
 8017714:	429a      	cmp	r2, r3
 8017716:	d10c      	bne.n	8017732 <tcp_netif_ip_addr_changed_pcblist+0x4a>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8017718:	68fb      	ldr	r3, [r7, #12]
 801771a:	68db      	ldr	r3, [r3, #12]
 801771c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
 801771e:	68f9      	ldr	r1, [r7, #12]
 8017720:	480c      	ldr	r0, [pc, #48]	@ (8017754 <tcp_netif_ip_addr_changed_pcblist+0x6c>)
 8017722:	f009 fccf 	bl	80210c4 <iprintf>
      tcp_abort(pcb);
 8017726:	68f8      	ldr	r0, [r7, #12]
 8017728:	f7fe fdd6 	bl	80162d8 <tcp_abort>
      pcb = next;
 801772c:	68bb      	ldr	r3, [r7, #8]
 801772e:	60fb      	str	r3, [r7, #12]
 8017730:	e002      	b.n	8017738 <tcp_netif_ip_addr_changed_pcblist+0x50>
    } else {
      pcb = pcb->next;
 8017732:	68fb      	ldr	r3, [r7, #12]
 8017734:	68db      	ldr	r3, [r3, #12]
 8017736:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8017738:	68fb      	ldr	r3, [r7, #12]
 801773a:	2b00      	cmp	r3, #0
 801773c:	d1e6      	bne.n	801770c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801773e:	bf00      	nop
 8017740:	bf00      	nop
 8017742:	3710      	adds	r7, #16
 8017744:	46bd      	mov	sp, r7
 8017746:	bd80      	pop	{r7, pc}
 8017748:	08024528 	.word	0x08024528
 801774c:	08024c5c 	.word	0x08024c5c
 8017750:	0802456c 	.word	0x0802456c
 8017754:	08024c90 	.word	0x08024c90

08017758 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8017758:	b580      	push	{r7, lr}
 801775a:	b084      	sub	sp, #16
 801775c:	af00      	add	r7, sp, #0
 801775e:	6078      	str	r0, [r7, #4]
 8017760:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	2b00      	cmp	r3, #0
 8017766:	d02a      	beq.n	80177be <tcp_netif_ip_addr_changed+0x66>
 8017768:	687b      	ldr	r3, [r7, #4]
 801776a:	681b      	ldr	r3, [r3, #0]
 801776c:	2b00      	cmp	r3, #0
 801776e:	d026      	beq.n	80177be <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8017770:	4b15      	ldr	r3, [pc, #84]	@ (80177c8 <tcp_netif_ip_addr_changed+0x70>)
 8017772:	681b      	ldr	r3, [r3, #0]
 8017774:	4619      	mov	r1, r3
 8017776:	6878      	ldr	r0, [r7, #4]
 8017778:	f7ff ffb6 	bl	80176e8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801777c:	4b13      	ldr	r3, [pc, #76]	@ (80177cc <tcp_netif_ip_addr_changed+0x74>)
 801777e:	681b      	ldr	r3, [r3, #0]
 8017780:	4619      	mov	r1, r3
 8017782:	6878      	ldr	r0, [r7, #4]
 8017784:	f7ff ffb0 	bl	80176e8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8017788:	683b      	ldr	r3, [r7, #0]
 801778a:	2b00      	cmp	r3, #0
 801778c:	d017      	beq.n	80177be <tcp_netif_ip_addr_changed+0x66>
 801778e:	683b      	ldr	r3, [r7, #0]
 8017790:	681b      	ldr	r3, [r3, #0]
 8017792:	2b00      	cmp	r3, #0
 8017794:	d013      	beq.n	80177be <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017796:	4b0e      	ldr	r3, [pc, #56]	@ (80177d0 <tcp_netif_ip_addr_changed+0x78>)
 8017798:	681b      	ldr	r3, [r3, #0]
 801779a:	60fb      	str	r3, [r7, #12]
 801779c:	e00c      	b.n	80177b8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801779e:	68fb      	ldr	r3, [r7, #12]
 80177a0:	681a      	ldr	r2, [r3, #0]
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	681b      	ldr	r3, [r3, #0]
 80177a6:	429a      	cmp	r2, r3
 80177a8:	d103      	bne.n	80177b2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80177aa:	683b      	ldr	r3, [r7, #0]
 80177ac:	681a      	ldr	r2, [r3, #0]
 80177ae:	68fb      	ldr	r3, [r7, #12]
 80177b0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80177b2:	68fb      	ldr	r3, [r7, #12]
 80177b4:	68db      	ldr	r3, [r3, #12]
 80177b6:	60fb      	str	r3, [r7, #12]
 80177b8:	68fb      	ldr	r3, [r7, #12]
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d1ef      	bne.n	801779e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80177be:	bf00      	nop
 80177c0:	3710      	adds	r7, #16
 80177c2:	46bd      	mov	sp, r7
 80177c4:	bd80      	pop	{r7, pc}
 80177c6:	bf00      	nop
 80177c8:	20028424 	.word	0x20028424
 80177cc:	2002841c 	.word	0x2002841c
 80177d0:	20028420 	.word	0x20028420

080177d4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80177d4:	b580      	push	{r7, lr}
 80177d6:	b082      	sub	sp, #8
 80177d8:	af00      	add	r7, sp, #0
 80177da:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80177dc:	687b      	ldr	r3, [r7, #4]
 80177de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	d007      	beq.n	80177f4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80177e8:	4618      	mov	r0, r3
 80177ea:	f7ff fb2b 	bl	8016e44 <tcp_segs_free>
    pcb->ooseq = NULL;
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	2200      	movs	r2, #0
 80177f2:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80177f4:	bf00      	nop
 80177f6:	3708      	adds	r7, #8
 80177f8:	46bd      	mov	sp, r7
 80177fa:	bd80      	pop	{r7, pc}

080177fc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80177fc:	b590      	push	{r4, r7, lr}
 80177fe:	b08d      	sub	sp, #52	@ 0x34
 8017800:	af04      	add	r7, sp, #16
 8017802:	6078      	str	r0, [r7, #4]
 8017804:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	2b00      	cmp	r3, #0
 801780a:	d105      	bne.n	8017818 <tcp_input+0x1c>
 801780c:	4b9b      	ldr	r3, [pc, #620]	@ (8017a7c <tcp_input+0x280>)
 801780e:	2283      	movs	r2, #131	@ 0x83
 8017810:	499b      	ldr	r1, [pc, #620]	@ (8017a80 <tcp_input+0x284>)
 8017812:	489c      	ldr	r0, [pc, #624]	@ (8017a84 <tcp_input+0x288>)
 8017814:	f009 fc56 	bl	80210c4 <iprintf>

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 8017818:	4b9b      	ldr	r3, [pc, #620]	@ (8017a88 <tcp_input+0x28c>)
 801781a:	f8b3 3092 	ldrh.w	r3, [r3, #146]	@ 0x92
 801781e:	3301      	adds	r3, #1
 8017820:	b29a      	uxth	r2, r3
 8017822:	4b99      	ldr	r3, [pc, #612]	@ (8017a88 <tcp_input+0x28c>)
 8017824:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	685b      	ldr	r3, [r3, #4]
 801782c:	4a97      	ldr	r2, [pc, #604]	@ (8017a8c <tcp_input+0x290>)
 801782e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	895b      	ldrh	r3, [r3, #10]
 8017834:	2b13      	cmp	r3, #19
 8017836:	d809      	bhi.n	801784c <tcp_input+0x50>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 8017838:	4b93      	ldr	r3, [pc, #588]	@ (8017a88 <tcp_input+0x28c>)
 801783a:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 801783e:	3301      	adds	r3, #1
 8017840:	b29a      	uxth	r2, r3
 8017842:	4b91      	ldr	r3, [pc, #580]	@ (8017a88 <tcp_input+0x28c>)
 8017844:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
    goto dropped;
 8017848:	f000 bc1c 	b.w	8018084 <tcp_input+0x888>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801784c:	4b90      	ldr	r3, [pc, #576]	@ (8017a90 <tcp_input+0x294>)
 801784e:	695b      	ldr	r3, [r3, #20]
 8017850:	4a8f      	ldr	r2, [pc, #572]	@ (8017a90 <tcp_input+0x294>)
 8017852:	6812      	ldr	r2, [r2, #0]
 8017854:	4611      	mov	r1, r2
 8017856:	4618      	mov	r0, r3
 8017858:	f007 f8b2 	bl	801e9c0 <ip4_addr_isbroadcast_u32>
 801785c:	4603      	mov	r3, r0
 801785e:	2b00      	cmp	r3, #0
 8017860:	d105      	bne.n	801786e <tcp_input+0x72>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8017862:	4b8b      	ldr	r3, [pc, #556]	@ (8017a90 <tcp_input+0x294>)
 8017864:	695b      	ldr	r3, [r3, #20]
 8017866:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801786a:	2be0      	cmp	r3, #224	@ 0xe0
 801786c:	d109      	bne.n	8017882 <tcp_input+0x86>
    TCP_STATS_INC(tcp.proterr);
 801786e:	4b86      	ldr	r3, [pc, #536]	@ (8017a88 <tcp_input+0x28c>)
 8017870:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8017874:	3301      	adds	r3, #1
 8017876:	b29a      	uxth	r2, r3
 8017878:	4b83      	ldr	r3, [pc, #524]	@ (8017a88 <tcp_input+0x28c>)
 801787a:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
    goto dropped;
 801787e:	f000 bc01 	b.w	8018084 <tcp_input+0x888>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8017882:	4b82      	ldr	r3, [pc, #520]	@ (8017a8c <tcp_input+0x290>)
 8017884:	681b      	ldr	r3, [r3, #0]
 8017886:	899b      	ldrh	r3, [r3, #12]
 8017888:	b29b      	uxth	r3, r3
 801788a:	4618      	mov	r0, r3
 801788c:	f7fb fe00 	bl	8013490 <lwip_htons>
 8017890:	4603      	mov	r3, r0
 8017892:	0b1b      	lsrs	r3, r3, #12
 8017894:	b29b      	uxth	r3, r3
 8017896:	b2db      	uxtb	r3, r3
 8017898:	009b      	lsls	r3, r3, #2
 801789a:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801789c:	7cbb      	ldrb	r3, [r7, #18]
 801789e:	2b13      	cmp	r3, #19
 80178a0:	d905      	bls.n	80178ae <tcp_input+0xb2>
 80178a2:	7cbb      	ldrb	r3, [r7, #18]
 80178a4:	b29a      	uxth	r2, r3
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	891b      	ldrh	r3, [r3, #8]
 80178aa:	429a      	cmp	r2, r3
 80178ac:	d908      	bls.n	80178c0 <tcp_input+0xc4>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
 80178ae:	4b76      	ldr	r3, [pc, #472]	@ (8017a88 <tcp_input+0x28c>)
 80178b0:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 80178b4:	3301      	adds	r3, #1
 80178b6:	b29a      	uxth	r2, r3
 80178b8:	4b73      	ldr	r3, [pc, #460]	@ (8017a88 <tcp_input+0x28c>)
 80178ba:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
    goto dropped;
 80178be:	e3e1      	b.n	8018084 <tcp_input+0x888>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80178c0:	7cbb      	ldrb	r3, [r7, #18]
 80178c2:	b29b      	uxth	r3, r3
 80178c4:	3b14      	subs	r3, #20
 80178c6:	b29a      	uxth	r2, r3
 80178c8:	4b72      	ldr	r3, [pc, #456]	@ (8017a94 <tcp_input+0x298>)
 80178ca:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80178cc:	4b72      	ldr	r3, [pc, #456]	@ (8017a98 <tcp_input+0x29c>)
 80178ce:	2200      	movs	r2, #0
 80178d0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	895a      	ldrh	r2, [r3, #10]
 80178d6:	7cbb      	ldrb	r3, [r7, #18]
 80178d8:	b29b      	uxth	r3, r3
 80178da:	429a      	cmp	r2, r3
 80178dc:	d309      	bcc.n	80178f2 <tcp_input+0xf6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80178de:	4b6d      	ldr	r3, [pc, #436]	@ (8017a94 <tcp_input+0x298>)
 80178e0:	881a      	ldrh	r2, [r3, #0]
 80178e2:	4b6e      	ldr	r3, [pc, #440]	@ (8017a9c <tcp_input+0x2a0>)
 80178e4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80178e6:	7cbb      	ldrb	r3, [r7, #18]
 80178e8:	4619      	mov	r1, r3
 80178ea:	6878      	ldr	r0, [r7, #4]
 80178ec:	f7fd fcbc 	bl	8015268 <pbuf_remove_header>
 80178f0:	e056      	b.n	80179a0 <tcp_input+0x1a4>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	681b      	ldr	r3, [r3, #0]
 80178f6:	2b00      	cmp	r3, #0
 80178f8:	d105      	bne.n	8017906 <tcp_input+0x10a>
 80178fa:	4b60      	ldr	r3, [pc, #384]	@ (8017a7c <tcp_input+0x280>)
 80178fc:	22c2      	movs	r2, #194	@ 0xc2
 80178fe:	4968      	ldr	r1, [pc, #416]	@ (8017aa0 <tcp_input+0x2a4>)
 8017900:	4860      	ldr	r0, [pc, #384]	@ (8017a84 <tcp_input+0x288>)
 8017902:	f009 fbdf 	bl	80210c4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8017906:	2114      	movs	r1, #20
 8017908:	6878      	ldr	r0, [r7, #4]
 801790a:	f7fd fcad 	bl	8015268 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	895a      	ldrh	r2, [r3, #10]
 8017912:	4b62      	ldr	r3, [pc, #392]	@ (8017a9c <tcp_input+0x2a0>)
 8017914:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8017916:	4b5f      	ldr	r3, [pc, #380]	@ (8017a94 <tcp_input+0x298>)
 8017918:	881a      	ldrh	r2, [r3, #0]
 801791a:	4b60      	ldr	r3, [pc, #384]	@ (8017a9c <tcp_input+0x2a0>)
 801791c:	881b      	ldrh	r3, [r3, #0]
 801791e:	1ad3      	subs	r3, r2, r3
 8017920:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8017922:	4b5e      	ldr	r3, [pc, #376]	@ (8017a9c <tcp_input+0x2a0>)
 8017924:	881b      	ldrh	r3, [r3, #0]
 8017926:	4619      	mov	r1, r3
 8017928:	6878      	ldr	r0, [r7, #4]
 801792a:	f7fd fc9d 	bl	8015268 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	681b      	ldr	r3, [r3, #0]
 8017932:	895b      	ldrh	r3, [r3, #10]
 8017934:	8a3a      	ldrh	r2, [r7, #16]
 8017936:	429a      	cmp	r2, r3
 8017938:	d908      	bls.n	801794c <tcp_input+0x150>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
 801793a:	4b53      	ldr	r3, [pc, #332]	@ (8017a88 <tcp_input+0x28c>)
 801793c:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8017940:	3301      	adds	r3, #1
 8017942:	b29a      	uxth	r2, r3
 8017944:	4b50      	ldr	r3, [pc, #320]	@ (8017a88 <tcp_input+0x28c>)
 8017946:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
      goto dropped;
 801794a:	e39b      	b.n	8018084 <tcp_input+0x888>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	681b      	ldr	r3, [r3, #0]
 8017950:	685b      	ldr	r3, [r3, #4]
 8017952:	4a51      	ldr	r2, [pc, #324]	@ (8017a98 <tcp_input+0x29c>)
 8017954:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	681b      	ldr	r3, [r3, #0]
 801795a:	8a3a      	ldrh	r2, [r7, #16]
 801795c:	4611      	mov	r1, r2
 801795e:	4618      	mov	r0, r3
 8017960:	f7fd fc82 	bl	8015268 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	891a      	ldrh	r2, [r3, #8]
 8017968:	8a3b      	ldrh	r3, [r7, #16]
 801796a:	1ad3      	subs	r3, r2, r3
 801796c:	b29a      	uxth	r2, r3
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	895b      	ldrh	r3, [r3, #10]
 8017976:	2b00      	cmp	r3, #0
 8017978:	d005      	beq.n	8017986 <tcp_input+0x18a>
 801797a:	4b40      	ldr	r3, [pc, #256]	@ (8017a7c <tcp_input+0x280>)
 801797c:	22df      	movs	r2, #223	@ 0xdf
 801797e:	4949      	ldr	r1, [pc, #292]	@ (8017aa4 <tcp_input+0x2a8>)
 8017980:	4840      	ldr	r0, [pc, #256]	@ (8017a84 <tcp_input+0x288>)
 8017982:	f009 fb9f 	bl	80210c4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	891a      	ldrh	r2, [r3, #8]
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	681b      	ldr	r3, [r3, #0]
 801798e:	891b      	ldrh	r3, [r3, #8]
 8017990:	429a      	cmp	r2, r3
 8017992:	d005      	beq.n	80179a0 <tcp_input+0x1a4>
 8017994:	4b39      	ldr	r3, [pc, #228]	@ (8017a7c <tcp_input+0x280>)
 8017996:	22e0      	movs	r2, #224	@ 0xe0
 8017998:	4943      	ldr	r1, [pc, #268]	@ (8017aa8 <tcp_input+0x2ac>)
 801799a:	483a      	ldr	r0, [pc, #232]	@ (8017a84 <tcp_input+0x288>)
 801799c:	f009 fb92 	bl	80210c4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80179a0:	4b3a      	ldr	r3, [pc, #232]	@ (8017a8c <tcp_input+0x290>)
 80179a2:	681b      	ldr	r3, [r3, #0]
 80179a4:	881b      	ldrh	r3, [r3, #0]
 80179a6:	b29b      	uxth	r3, r3
 80179a8:	4a38      	ldr	r2, [pc, #224]	@ (8017a8c <tcp_input+0x290>)
 80179aa:	6814      	ldr	r4, [r2, #0]
 80179ac:	4618      	mov	r0, r3
 80179ae:	f7fb fd6f 	bl	8013490 <lwip_htons>
 80179b2:	4603      	mov	r3, r0
 80179b4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80179b6:	4b35      	ldr	r3, [pc, #212]	@ (8017a8c <tcp_input+0x290>)
 80179b8:	681b      	ldr	r3, [r3, #0]
 80179ba:	885b      	ldrh	r3, [r3, #2]
 80179bc:	b29b      	uxth	r3, r3
 80179be:	4a33      	ldr	r2, [pc, #204]	@ (8017a8c <tcp_input+0x290>)
 80179c0:	6814      	ldr	r4, [r2, #0]
 80179c2:	4618      	mov	r0, r3
 80179c4:	f7fb fd64 	bl	8013490 <lwip_htons>
 80179c8:	4603      	mov	r3, r0
 80179ca:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80179cc:	4b2f      	ldr	r3, [pc, #188]	@ (8017a8c <tcp_input+0x290>)
 80179ce:	681b      	ldr	r3, [r3, #0]
 80179d0:	685b      	ldr	r3, [r3, #4]
 80179d2:	4a2e      	ldr	r2, [pc, #184]	@ (8017a8c <tcp_input+0x290>)
 80179d4:	6814      	ldr	r4, [r2, #0]
 80179d6:	4618      	mov	r0, r3
 80179d8:	f7fb fd70 	bl	80134bc <lwip_htonl>
 80179dc:	4603      	mov	r3, r0
 80179de:	6063      	str	r3, [r4, #4]
 80179e0:	6863      	ldr	r3, [r4, #4]
 80179e2:	4a32      	ldr	r2, [pc, #200]	@ (8017aac <tcp_input+0x2b0>)
 80179e4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80179e6:	4b29      	ldr	r3, [pc, #164]	@ (8017a8c <tcp_input+0x290>)
 80179e8:	681b      	ldr	r3, [r3, #0]
 80179ea:	689b      	ldr	r3, [r3, #8]
 80179ec:	4a27      	ldr	r2, [pc, #156]	@ (8017a8c <tcp_input+0x290>)
 80179ee:	6814      	ldr	r4, [r2, #0]
 80179f0:	4618      	mov	r0, r3
 80179f2:	f7fb fd63 	bl	80134bc <lwip_htonl>
 80179f6:	4603      	mov	r3, r0
 80179f8:	60a3      	str	r3, [r4, #8]
 80179fa:	68a3      	ldr	r3, [r4, #8]
 80179fc:	4a2c      	ldr	r2, [pc, #176]	@ (8017ab0 <tcp_input+0x2b4>)
 80179fe:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8017a00:	4b22      	ldr	r3, [pc, #136]	@ (8017a8c <tcp_input+0x290>)
 8017a02:	681b      	ldr	r3, [r3, #0]
 8017a04:	89db      	ldrh	r3, [r3, #14]
 8017a06:	b29b      	uxth	r3, r3
 8017a08:	4a20      	ldr	r2, [pc, #128]	@ (8017a8c <tcp_input+0x290>)
 8017a0a:	6814      	ldr	r4, [r2, #0]
 8017a0c:	4618      	mov	r0, r3
 8017a0e:	f7fb fd3f 	bl	8013490 <lwip_htons>
 8017a12:	4603      	mov	r3, r0
 8017a14:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8017a16:	4b1d      	ldr	r3, [pc, #116]	@ (8017a8c <tcp_input+0x290>)
 8017a18:	681b      	ldr	r3, [r3, #0]
 8017a1a:	899b      	ldrh	r3, [r3, #12]
 8017a1c:	b29b      	uxth	r3, r3
 8017a1e:	4618      	mov	r0, r3
 8017a20:	f7fb fd36 	bl	8013490 <lwip_htons>
 8017a24:	4603      	mov	r3, r0
 8017a26:	b2db      	uxtb	r3, r3
 8017a28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8017a2c:	b2da      	uxtb	r2, r3
 8017a2e:	4b21      	ldr	r3, [pc, #132]	@ (8017ab4 <tcp_input+0x2b8>)
 8017a30:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	891a      	ldrh	r2, [r3, #8]
 8017a36:	4b20      	ldr	r3, [pc, #128]	@ (8017ab8 <tcp_input+0x2bc>)
 8017a38:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8017a3a:	4b1e      	ldr	r3, [pc, #120]	@ (8017ab4 <tcp_input+0x2b8>)
 8017a3c:	781b      	ldrb	r3, [r3, #0]
 8017a3e:	f003 0303 	and.w	r3, r3, #3
 8017a42:	2b00      	cmp	r3, #0
 8017a44:	d014      	beq.n	8017a70 <tcp_input+0x274>
    tcplen++;
 8017a46:	4b1c      	ldr	r3, [pc, #112]	@ (8017ab8 <tcp_input+0x2bc>)
 8017a48:	881b      	ldrh	r3, [r3, #0]
 8017a4a:	3301      	adds	r3, #1
 8017a4c:	b29a      	uxth	r2, r3
 8017a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8017ab8 <tcp_input+0x2bc>)
 8017a50:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	891a      	ldrh	r2, [r3, #8]
 8017a56:	4b18      	ldr	r3, [pc, #96]	@ (8017ab8 <tcp_input+0x2bc>)
 8017a58:	881b      	ldrh	r3, [r3, #0]
 8017a5a:	429a      	cmp	r2, r3
 8017a5c:	d908      	bls.n	8017a70 <tcp_input+0x274>
      /* u16_t overflow, cannot handle this */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: length u16_t overflow, cannot handle this\n"));
      TCP_STATS_INC(tcp.lenerr);
 8017a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8017a88 <tcp_input+0x28c>)
 8017a60:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8017a64:	3301      	adds	r3, #1
 8017a66:	b29a      	uxth	r2, r3
 8017a68:	4b07      	ldr	r3, [pc, #28]	@ (8017a88 <tcp_input+0x28c>)
 8017a6a:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
      goto dropped;
 8017a6e:	e309      	b.n	8018084 <tcp_input+0x888>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8017a70:	2300      	movs	r3, #0
 8017a72:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017a74:	4b11      	ldr	r3, [pc, #68]	@ (8017abc <tcp_input+0x2c0>)
 8017a76:	681b      	ldr	r3, [r3, #0]
 8017a78:	61bb      	str	r3, [r7, #24]
 8017a7a:	e0a1      	b.n	8017bc0 <tcp_input+0x3c4>
 8017a7c:	08024cb8 	.word	0x08024cb8
 8017a80:	08024cec 	.word	0x08024cec
 8017a84:	08024d04 	.word	0x08024d04
 8017a88:	20028318 	.word	0x20028318
 8017a8c:	20028444 	.word	0x20028444
 8017a90:	2001f878 	.word	0x2001f878
 8017a94:	20028448 	.word	0x20028448
 8017a98:	2002844c 	.word	0x2002844c
 8017a9c:	2002844a 	.word	0x2002844a
 8017aa0:	08024d2c 	.word	0x08024d2c
 8017aa4:	08024d3c 	.word	0x08024d3c
 8017aa8:	08024d48 	.word	0x08024d48
 8017aac:	20028454 	.word	0x20028454
 8017ab0:	20028458 	.word	0x20028458
 8017ab4:	20028460 	.word	0x20028460
 8017ab8:	2002845e 	.word	0x2002845e
 8017abc:	20028424 	.word	0x20028424
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8017ac0:	69bb      	ldr	r3, [r7, #24]
 8017ac2:	7d1b      	ldrb	r3, [r3, #20]
 8017ac4:	2b00      	cmp	r3, #0
 8017ac6:	d105      	bne.n	8017ad4 <tcp_input+0x2d8>
 8017ac8:	4b8a      	ldr	r3, [pc, #552]	@ (8017cf4 <tcp_input+0x4f8>)
 8017aca:	22fb      	movs	r2, #251	@ 0xfb
 8017acc:	498a      	ldr	r1, [pc, #552]	@ (8017cf8 <tcp_input+0x4fc>)
 8017ace:	488b      	ldr	r0, [pc, #556]	@ (8017cfc <tcp_input+0x500>)
 8017ad0:	f009 faf8 	bl	80210c4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8017ad4:	69bb      	ldr	r3, [r7, #24]
 8017ad6:	7d1b      	ldrb	r3, [r3, #20]
 8017ad8:	2b0a      	cmp	r3, #10
 8017ada:	d105      	bne.n	8017ae8 <tcp_input+0x2ec>
 8017adc:	4b85      	ldr	r3, [pc, #532]	@ (8017cf4 <tcp_input+0x4f8>)
 8017ade:	22fc      	movs	r2, #252	@ 0xfc
 8017ae0:	4987      	ldr	r1, [pc, #540]	@ (8017d00 <tcp_input+0x504>)
 8017ae2:	4886      	ldr	r0, [pc, #536]	@ (8017cfc <tcp_input+0x500>)
 8017ae4:	f009 faee 	bl	80210c4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8017ae8:	69bb      	ldr	r3, [r7, #24]
 8017aea:	7d1b      	ldrb	r3, [r3, #20]
 8017aec:	2b01      	cmp	r3, #1
 8017aee:	d105      	bne.n	8017afc <tcp_input+0x300>
 8017af0:	4b80      	ldr	r3, [pc, #512]	@ (8017cf4 <tcp_input+0x4f8>)
 8017af2:	22fd      	movs	r2, #253	@ 0xfd
 8017af4:	4983      	ldr	r1, [pc, #524]	@ (8017d04 <tcp_input+0x508>)
 8017af6:	4881      	ldr	r0, [pc, #516]	@ (8017cfc <tcp_input+0x500>)
 8017af8:	f009 fae4 	bl	80210c4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017afc:	69bb      	ldr	r3, [r7, #24]
 8017afe:	7a1b      	ldrb	r3, [r3, #8]
 8017b00:	2b00      	cmp	r3, #0
 8017b02:	d00c      	beq.n	8017b1e <tcp_input+0x322>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017b04:	69bb      	ldr	r3, [r7, #24]
 8017b06:	7a1a      	ldrb	r2, [r3, #8]
 8017b08:	4b7f      	ldr	r3, [pc, #508]	@ (8017d08 <tcp_input+0x50c>)
 8017b0a:	685b      	ldr	r3, [r3, #4]
 8017b0c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8017b10:	3301      	adds	r3, #1
 8017b12:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017b14:	429a      	cmp	r2, r3
 8017b16:	d002      	beq.n	8017b1e <tcp_input+0x322>
      prev = pcb;
 8017b18:	69bb      	ldr	r3, [r7, #24]
 8017b1a:	61fb      	str	r3, [r7, #28]
      continue;
 8017b1c:	e04d      	b.n	8017bba <tcp_input+0x3be>
    }

    if (pcb->remote_port == tcphdr->src &&
 8017b1e:	69bb      	ldr	r3, [r7, #24]
 8017b20:	8b1a      	ldrh	r2, [r3, #24]
 8017b22:	4b7a      	ldr	r3, [pc, #488]	@ (8017d0c <tcp_input+0x510>)
 8017b24:	681b      	ldr	r3, [r3, #0]
 8017b26:	881b      	ldrh	r3, [r3, #0]
 8017b28:	b29b      	uxth	r3, r3
 8017b2a:	429a      	cmp	r2, r3
 8017b2c:	d143      	bne.n	8017bb6 <tcp_input+0x3ba>
        pcb->local_port == tcphdr->dest &&
 8017b2e:	69bb      	ldr	r3, [r7, #24]
 8017b30:	8ada      	ldrh	r2, [r3, #22]
 8017b32:	4b76      	ldr	r3, [pc, #472]	@ (8017d0c <tcp_input+0x510>)
 8017b34:	681b      	ldr	r3, [r3, #0]
 8017b36:	885b      	ldrh	r3, [r3, #2]
 8017b38:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8017b3a:	429a      	cmp	r2, r3
 8017b3c:	d13b      	bne.n	8017bb6 <tcp_input+0x3ba>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017b3e:	69bb      	ldr	r3, [r7, #24]
 8017b40:	685a      	ldr	r2, [r3, #4]
 8017b42:	4b71      	ldr	r3, [pc, #452]	@ (8017d08 <tcp_input+0x50c>)
 8017b44:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8017b46:	429a      	cmp	r2, r3
 8017b48:	d135      	bne.n	8017bb6 <tcp_input+0x3ba>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017b4a:	69bb      	ldr	r3, [r7, #24]
 8017b4c:	681a      	ldr	r2, [r3, #0]
 8017b4e:	4b6e      	ldr	r3, [pc, #440]	@ (8017d08 <tcp_input+0x50c>)
 8017b50:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017b52:	429a      	cmp	r2, r3
 8017b54:	d12f      	bne.n	8017bb6 <tcp_input+0x3ba>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8017b56:	69bb      	ldr	r3, [r7, #24]
 8017b58:	68db      	ldr	r3, [r3, #12]
 8017b5a:	69ba      	ldr	r2, [r7, #24]
 8017b5c:	429a      	cmp	r2, r3
 8017b5e:	d106      	bne.n	8017b6e <tcp_input+0x372>
 8017b60:	4b64      	ldr	r3, [pc, #400]	@ (8017cf4 <tcp_input+0x4f8>)
 8017b62:	f240 120d 	movw	r2, #269	@ 0x10d
 8017b66:	496a      	ldr	r1, [pc, #424]	@ (8017d10 <tcp_input+0x514>)
 8017b68:	4864      	ldr	r0, [pc, #400]	@ (8017cfc <tcp_input+0x500>)
 8017b6a:	f009 faab 	bl	80210c4 <iprintf>
      if (prev != NULL) {
 8017b6e:	69fb      	ldr	r3, [r7, #28]
 8017b70:	2b00      	cmp	r3, #0
 8017b72:	d00b      	beq.n	8017b8c <tcp_input+0x390>
        prev->next = pcb->next;
 8017b74:	69bb      	ldr	r3, [r7, #24]
 8017b76:	68da      	ldr	r2, [r3, #12]
 8017b78:	69fb      	ldr	r3, [r7, #28]
 8017b7a:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8017b7c:	4b65      	ldr	r3, [pc, #404]	@ (8017d14 <tcp_input+0x518>)
 8017b7e:	681a      	ldr	r2, [r3, #0]
 8017b80:	69bb      	ldr	r3, [r7, #24]
 8017b82:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8017b84:	4a63      	ldr	r2, [pc, #396]	@ (8017d14 <tcp_input+0x518>)
 8017b86:	69bb      	ldr	r3, [r7, #24]
 8017b88:	6013      	str	r3, [r2, #0]
 8017b8a:	e007      	b.n	8017b9c <tcp_input+0x3a0>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8017b8c:	4b62      	ldr	r3, [pc, #392]	@ (8017d18 <tcp_input+0x51c>)
 8017b8e:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 8017b92:	3301      	adds	r3, #1
 8017b94:	b29a      	uxth	r2, r3
 8017b96:	4b60      	ldr	r3, [pc, #384]	@ (8017d18 <tcp_input+0x51c>)
 8017b98:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8017b9c:	69bb      	ldr	r3, [r7, #24]
 8017b9e:	68db      	ldr	r3, [r3, #12]
 8017ba0:	69ba      	ldr	r2, [r7, #24]
 8017ba2:	429a      	cmp	r2, r3
 8017ba4:	d111      	bne.n	8017bca <tcp_input+0x3ce>
 8017ba6:	4b53      	ldr	r3, [pc, #332]	@ (8017cf4 <tcp_input+0x4f8>)
 8017ba8:	f240 1215 	movw	r2, #277	@ 0x115
 8017bac:	495b      	ldr	r1, [pc, #364]	@ (8017d1c <tcp_input+0x520>)
 8017bae:	4853      	ldr	r0, [pc, #332]	@ (8017cfc <tcp_input+0x500>)
 8017bb0:	f009 fa88 	bl	80210c4 <iprintf>
      break;
 8017bb4:	e009      	b.n	8017bca <tcp_input+0x3ce>
    }
    prev = pcb;
 8017bb6:	69bb      	ldr	r3, [r7, #24]
 8017bb8:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017bba:	69bb      	ldr	r3, [r7, #24]
 8017bbc:	68db      	ldr	r3, [r3, #12]
 8017bbe:	61bb      	str	r3, [r7, #24]
 8017bc0:	69bb      	ldr	r3, [r7, #24]
 8017bc2:	2b00      	cmp	r3, #0
 8017bc4:	f47f af7c 	bne.w	8017ac0 <tcp_input+0x2c4>
 8017bc8:	e000      	b.n	8017bcc <tcp_input+0x3d0>
      break;
 8017bca:	bf00      	nop
  }

  if (pcb == NULL) {
 8017bcc:	69bb      	ldr	r3, [r7, #24]
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	f040 80bb 	bne.w	8017d4a <tcp_input+0x54e>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017bd4:	4b52      	ldr	r3, [pc, #328]	@ (8017d20 <tcp_input+0x524>)
 8017bd6:	681b      	ldr	r3, [r3, #0]
 8017bd8:	61bb      	str	r3, [r7, #24]
 8017bda:	e03f      	b.n	8017c5c <tcp_input+0x460>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8017bdc:	69bb      	ldr	r3, [r7, #24]
 8017bde:	7d1b      	ldrb	r3, [r3, #20]
 8017be0:	2b0a      	cmp	r3, #10
 8017be2:	d006      	beq.n	8017bf2 <tcp_input+0x3f6>
 8017be4:	4b43      	ldr	r3, [pc, #268]	@ (8017cf4 <tcp_input+0x4f8>)
 8017be6:	f240 121f 	movw	r2, #287	@ 0x11f
 8017bea:	494e      	ldr	r1, [pc, #312]	@ (8017d24 <tcp_input+0x528>)
 8017bec:	4843      	ldr	r0, [pc, #268]	@ (8017cfc <tcp_input+0x500>)
 8017bee:	f009 fa69 	bl	80210c4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017bf2:	69bb      	ldr	r3, [r7, #24]
 8017bf4:	7a1b      	ldrb	r3, [r3, #8]
 8017bf6:	2b00      	cmp	r3, #0
 8017bf8:	d009      	beq.n	8017c0e <tcp_input+0x412>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017bfa:	69bb      	ldr	r3, [r7, #24]
 8017bfc:	7a1a      	ldrb	r2, [r3, #8]
 8017bfe:	4b42      	ldr	r3, [pc, #264]	@ (8017d08 <tcp_input+0x50c>)
 8017c00:	685b      	ldr	r3, [r3, #4]
 8017c02:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8017c06:	3301      	adds	r3, #1
 8017c08:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017c0a:	429a      	cmp	r2, r3
 8017c0c:	d122      	bne.n	8017c54 <tcp_input+0x458>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8017c0e:	69bb      	ldr	r3, [r7, #24]
 8017c10:	8b1a      	ldrh	r2, [r3, #24]
 8017c12:	4b3e      	ldr	r3, [pc, #248]	@ (8017d0c <tcp_input+0x510>)
 8017c14:	681b      	ldr	r3, [r3, #0]
 8017c16:	881b      	ldrh	r3, [r3, #0]
 8017c18:	b29b      	uxth	r3, r3
 8017c1a:	429a      	cmp	r2, r3
 8017c1c:	d11b      	bne.n	8017c56 <tcp_input+0x45a>
          pcb->local_port == tcphdr->dest &&
 8017c1e:	69bb      	ldr	r3, [r7, #24]
 8017c20:	8ada      	ldrh	r2, [r3, #22]
 8017c22:	4b3a      	ldr	r3, [pc, #232]	@ (8017d0c <tcp_input+0x510>)
 8017c24:	681b      	ldr	r3, [r3, #0]
 8017c26:	885b      	ldrh	r3, [r3, #2]
 8017c28:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8017c2a:	429a      	cmp	r2, r3
 8017c2c:	d113      	bne.n	8017c56 <tcp_input+0x45a>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017c2e:	69bb      	ldr	r3, [r7, #24]
 8017c30:	685a      	ldr	r2, [r3, #4]
 8017c32:	4b35      	ldr	r3, [pc, #212]	@ (8017d08 <tcp_input+0x50c>)
 8017c34:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8017c36:	429a      	cmp	r2, r3
 8017c38:	d10d      	bne.n	8017c56 <tcp_input+0x45a>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017c3a:	69bb      	ldr	r3, [r7, #24]
 8017c3c:	681a      	ldr	r2, [r3, #0]
 8017c3e:	4b32      	ldr	r3, [pc, #200]	@ (8017d08 <tcp_input+0x50c>)
 8017c40:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017c42:	429a      	cmp	r2, r3
 8017c44:	d107      	bne.n	8017c56 <tcp_input+0x45a>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8017c46:	69b8      	ldr	r0, [r7, #24]
 8017c48:	f000 fb88 	bl	801835c <tcp_timewait_input>
        }
        pbuf_free(p);
 8017c4c:	6878      	ldr	r0, [r7, #4]
 8017c4e:	f7fd fb99 	bl	8015384 <pbuf_free>
        return;
 8017c52:	e224      	b.n	801809e <tcp_input+0x8a2>
        continue;
 8017c54:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017c56:	69bb      	ldr	r3, [r7, #24]
 8017c58:	68db      	ldr	r3, [r3, #12]
 8017c5a:	61bb      	str	r3, [r7, #24]
 8017c5c:	69bb      	ldr	r3, [r7, #24]
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	d1bc      	bne.n	8017bdc <tcp_input+0x3e0>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8017c62:	2300      	movs	r3, #0
 8017c64:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017c66:	4b30      	ldr	r3, [pc, #192]	@ (8017d28 <tcp_input+0x52c>)
 8017c68:	681b      	ldr	r3, [r3, #0]
 8017c6a:	617b      	str	r3, [r7, #20]
 8017c6c:	e02a      	b.n	8017cc4 <tcp_input+0x4c8>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8017c6e:	697b      	ldr	r3, [r7, #20]
 8017c70:	7a1b      	ldrb	r3, [r3, #8]
 8017c72:	2b00      	cmp	r3, #0
 8017c74:	d00c      	beq.n	8017c90 <tcp_input+0x494>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017c76:	697b      	ldr	r3, [r7, #20]
 8017c78:	7a1a      	ldrb	r2, [r3, #8]
 8017c7a:	4b23      	ldr	r3, [pc, #140]	@ (8017d08 <tcp_input+0x50c>)
 8017c7c:	685b      	ldr	r3, [r3, #4]
 8017c7e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8017c82:	3301      	adds	r3, #1
 8017c84:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8017c86:	429a      	cmp	r2, r3
 8017c88:	d002      	beq.n	8017c90 <tcp_input+0x494>
        prev = (struct tcp_pcb *)lpcb;
 8017c8a:	697b      	ldr	r3, [r7, #20]
 8017c8c:	61fb      	str	r3, [r7, #28]
        continue;
 8017c8e:	e016      	b.n	8017cbe <tcp_input+0x4c2>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8017c90:	697b      	ldr	r3, [r7, #20]
 8017c92:	8ada      	ldrh	r2, [r3, #22]
 8017c94:	4b1d      	ldr	r3, [pc, #116]	@ (8017d0c <tcp_input+0x510>)
 8017c96:	681b      	ldr	r3, [r3, #0]
 8017c98:	885b      	ldrh	r3, [r3, #2]
 8017c9a:	b29b      	uxth	r3, r3
 8017c9c:	429a      	cmp	r2, r3
 8017c9e:	d10c      	bne.n	8017cba <tcp_input+0x4be>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8017ca0:	697b      	ldr	r3, [r7, #20]
 8017ca2:	681a      	ldr	r2, [r3, #0]
 8017ca4:	4b18      	ldr	r3, [pc, #96]	@ (8017d08 <tcp_input+0x50c>)
 8017ca6:	695b      	ldr	r3, [r3, #20]
 8017ca8:	429a      	cmp	r2, r3
 8017caa:	d00f      	beq.n	8017ccc <tcp_input+0x4d0>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8017cac:	697b      	ldr	r3, [r7, #20]
 8017cae:	2b00      	cmp	r3, #0
 8017cb0:	d00d      	beq.n	8017cce <tcp_input+0x4d2>
 8017cb2:	697b      	ldr	r3, [r7, #20]
 8017cb4:	681b      	ldr	r3, [r3, #0]
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	d009      	beq.n	8017cce <tcp_input+0x4d2>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8017cba:	697b      	ldr	r3, [r7, #20]
 8017cbc:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017cbe:	697b      	ldr	r3, [r7, #20]
 8017cc0:	68db      	ldr	r3, [r3, #12]
 8017cc2:	617b      	str	r3, [r7, #20]
 8017cc4:	697b      	ldr	r3, [r7, #20]
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d1d1      	bne.n	8017c6e <tcp_input+0x472>
 8017cca:	e000      	b.n	8017cce <tcp_input+0x4d2>
            break;
 8017ccc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8017cce:	697b      	ldr	r3, [r7, #20]
 8017cd0:	2b00      	cmp	r3, #0
 8017cd2:	d03a      	beq.n	8017d4a <tcp_input+0x54e>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8017cd4:	69fb      	ldr	r3, [r7, #28]
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	d028      	beq.n	8017d2c <tcp_input+0x530>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8017cda:	697b      	ldr	r3, [r7, #20]
 8017cdc:	68da      	ldr	r2, [r3, #12]
 8017cde:	69fb      	ldr	r3, [r7, #28]
 8017ce0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8017ce2:	4b11      	ldr	r3, [pc, #68]	@ (8017d28 <tcp_input+0x52c>)
 8017ce4:	681a      	ldr	r2, [r3, #0]
 8017ce6:	697b      	ldr	r3, [r7, #20]
 8017ce8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8017cea:	4a0f      	ldr	r2, [pc, #60]	@ (8017d28 <tcp_input+0x52c>)
 8017cec:	697b      	ldr	r3, [r7, #20]
 8017cee:	6013      	str	r3, [r2, #0]
 8017cf0:	e024      	b.n	8017d3c <tcp_input+0x540>
 8017cf2:	bf00      	nop
 8017cf4:	08024cb8 	.word	0x08024cb8
 8017cf8:	08024d68 	.word	0x08024d68
 8017cfc:	08024d04 	.word	0x08024d04
 8017d00:	08024d90 	.word	0x08024d90
 8017d04:	08024dbc 	.word	0x08024dbc
 8017d08:	2001f878 	.word	0x2001f878
 8017d0c:	20028444 	.word	0x20028444
 8017d10:	08024de4 	.word	0x08024de4
 8017d14:	20028424 	.word	0x20028424
 8017d18:	20028318 	.word	0x20028318
 8017d1c:	08024e10 	.word	0x08024e10
 8017d20:	20028428 	.word	0x20028428
 8017d24:	08024e3c 	.word	0x08024e3c
 8017d28:	20028420 	.word	0x20028420
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8017d2c:	4ba0      	ldr	r3, [pc, #640]	@ (8017fb0 <tcp_input+0x7b4>)
 8017d2e:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 8017d32:	3301      	adds	r3, #1
 8017d34:	b29a      	uxth	r2, r3
 8017d36:	4b9e      	ldr	r3, [pc, #632]	@ (8017fb0 <tcp_input+0x7b4>)
 8017d38:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8017d3c:	6978      	ldr	r0, [r7, #20]
 8017d3e:	f000 fa05 	bl	801814c <tcp_listen_input>
      }
      pbuf_free(p);
 8017d42:	6878      	ldr	r0, [r7, #4]
 8017d44:	f7fd fb1e 	bl	8015384 <pbuf_free>
      return;
 8017d48:	e1a9      	b.n	801809e <tcp_input+0x8a2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8017d4a:	69bb      	ldr	r3, [r7, #24]
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	f000 815f 	beq.w	8018010 <tcp_input+0x814>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8017d52:	4b98      	ldr	r3, [pc, #608]	@ (8017fb4 <tcp_input+0x7b8>)
 8017d54:	2200      	movs	r2, #0
 8017d56:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	891a      	ldrh	r2, [r3, #8]
 8017d5c:	4b95      	ldr	r3, [pc, #596]	@ (8017fb4 <tcp_input+0x7b8>)
 8017d5e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8017d60:	4a94      	ldr	r2, [pc, #592]	@ (8017fb4 <tcp_input+0x7b8>)
 8017d62:	687b      	ldr	r3, [r7, #4]
 8017d64:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8017d66:	4b94      	ldr	r3, [pc, #592]	@ (8017fb8 <tcp_input+0x7bc>)
 8017d68:	681b      	ldr	r3, [r3, #0]
 8017d6a:	4a92      	ldr	r2, [pc, #584]	@ (8017fb4 <tcp_input+0x7b8>)
 8017d6c:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 8017d6e:	4b93      	ldr	r3, [pc, #588]	@ (8017fbc <tcp_input+0x7c0>)
 8017d70:	2200      	movs	r2, #0
 8017d72:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8017d74:	4b92      	ldr	r3, [pc, #584]	@ (8017fc0 <tcp_input+0x7c4>)
 8017d76:	2200      	movs	r2, #0
 8017d78:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8017d7a:	4b92      	ldr	r3, [pc, #584]	@ (8017fc4 <tcp_input+0x7c8>)
 8017d7c:	2200      	movs	r2, #0
 8017d7e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8017d80:	4b91      	ldr	r3, [pc, #580]	@ (8017fc8 <tcp_input+0x7cc>)
 8017d82:	781b      	ldrb	r3, [r3, #0]
 8017d84:	f003 0308 	and.w	r3, r3, #8
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d006      	beq.n	8017d9a <tcp_input+0x59e>
      p->flags |= PBUF_FLAG_PUSH;
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	7b5b      	ldrb	r3, [r3, #13]
 8017d90:	f043 0301 	orr.w	r3, r3, #1
 8017d94:	b2da      	uxtb	r2, r3
 8017d96:	687b      	ldr	r3, [r7, #4]
 8017d98:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8017d9a:	69bb      	ldr	r3, [r7, #24]
 8017d9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	d01e      	beq.n	8017de0 <tcp_input+0x5e4>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8017da2:	69b8      	ldr	r0, [r7, #24]
 8017da4:	f7fe ffd2 	bl	8016d4c <tcp_process_refused_data>
 8017da8:	4603      	mov	r3, r0
 8017daa:	f113 0f0d 	cmn.w	r3, #13
 8017dae:	d007      	beq.n	8017dc0 <tcp_input+0x5c4>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8017db0:	69bb      	ldr	r3, [r7, #24]
 8017db2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	d013      	beq.n	8017de0 <tcp_input+0x5e4>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8017db8:	4b84      	ldr	r3, [pc, #528]	@ (8017fcc <tcp_input+0x7d0>)
 8017dba:	881b      	ldrh	r3, [r3, #0]
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	d00f      	beq.n	8017de0 <tcp_input+0x5e4>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8017dc0:	69bb      	ldr	r3, [r7, #24]
 8017dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	d102      	bne.n	8017dce <tcp_input+0x5d2>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8017dc8:	69b8      	ldr	r0, [r7, #24]
 8017dca:	f003 fedf 	bl	801bb8c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
 8017dce:	4b78      	ldr	r3, [pc, #480]	@ (8017fb0 <tcp_input+0x7b4>)
 8017dd0:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 8017dd4:	3301      	adds	r3, #1
 8017dd6:	b29a      	uxth	r2, r3
 8017dd8:	4b75      	ldr	r3, [pc, #468]	@ (8017fb0 <tcp_input+0x7b4>)
 8017dda:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8017dde:	e104      	b.n	8017fea <tcp_input+0x7ee>
      }
    }
    tcp_input_pcb = pcb;
 8017de0:	4a7b      	ldr	r2, [pc, #492]	@ (8017fd0 <tcp_input+0x7d4>)
 8017de2:	69bb      	ldr	r3, [r7, #24]
 8017de4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8017de6:	69b8      	ldr	r0, [r7, #24]
 8017de8:	f000 fb32 	bl	8018450 <tcp_process>
 8017dec:	4603      	mov	r3, r0
 8017dee:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8017df0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017df4:	f113 0f0d 	cmn.w	r3, #13
 8017df8:	f000 80d1 	beq.w	8017f9e <tcp_input+0x7a2>
      if (recv_flags & TF_RESET) {
 8017dfc:	4b70      	ldr	r3, [pc, #448]	@ (8017fc0 <tcp_input+0x7c4>)
 8017dfe:	781b      	ldrb	r3, [r3, #0]
 8017e00:	f003 0308 	and.w	r3, r3, #8
 8017e04:	2b00      	cmp	r3, #0
 8017e06:	d015      	beq.n	8017e34 <tcp_input+0x638>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8017e08:	69bb      	ldr	r3, [r7, #24]
 8017e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017e0e:	2b00      	cmp	r3, #0
 8017e10:	d008      	beq.n	8017e24 <tcp_input+0x628>
 8017e12:	69bb      	ldr	r3, [r7, #24]
 8017e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017e18:	69ba      	ldr	r2, [r7, #24]
 8017e1a:	6912      	ldr	r2, [r2, #16]
 8017e1c:	f06f 010d 	mvn.w	r1, #13
 8017e20:	4610      	mov	r0, r2
 8017e22:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8017e24:	69b9      	ldr	r1, [r7, #24]
 8017e26:	486b      	ldr	r0, [pc, #428]	@ (8017fd4 <tcp_input+0x7d8>)
 8017e28:	f7ff fb6a 	bl	8017500 <tcp_pcb_remove>
        tcp_free(pcb);
 8017e2c:	69b8      	ldr	r0, [r7, #24]
 8017e2e:	f7fd ff0f 	bl	8015c50 <tcp_free>
 8017e32:	e0da      	b.n	8017fea <tcp_input+0x7ee>
      } else {
        err = ERR_OK;
 8017e34:	2300      	movs	r3, #0
 8017e36:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8017e38:	4b62      	ldr	r3, [pc, #392]	@ (8017fc4 <tcp_input+0x7c8>)
 8017e3a:	881b      	ldrh	r3, [r3, #0]
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d01d      	beq.n	8017e7c <tcp_input+0x680>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8017e40:	4b60      	ldr	r3, [pc, #384]	@ (8017fc4 <tcp_input+0x7c8>)
 8017e42:	881b      	ldrh	r3, [r3, #0]
 8017e44:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8017e46:	69bb      	ldr	r3, [r7, #24]
 8017e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	d00a      	beq.n	8017e66 <tcp_input+0x66a>
 8017e50:	69bb      	ldr	r3, [r7, #24]
 8017e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017e56:	69ba      	ldr	r2, [r7, #24]
 8017e58:	6910      	ldr	r0, [r2, #16]
 8017e5a:	89fa      	ldrh	r2, [r7, #14]
 8017e5c:	69b9      	ldr	r1, [r7, #24]
 8017e5e:	4798      	blx	r3
 8017e60:	4603      	mov	r3, r0
 8017e62:	74fb      	strb	r3, [r7, #19]
 8017e64:	e001      	b.n	8017e6a <tcp_input+0x66e>
 8017e66:	2300      	movs	r3, #0
 8017e68:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8017e6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017e6e:	f113 0f0d 	cmn.w	r3, #13
 8017e72:	f000 8096 	beq.w	8017fa2 <tcp_input+0x7a6>
              goto aborted;
            }
          }
          recv_acked = 0;
 8017e76:	4b53      	ldr	r3, [pc, #332]	@ (8017fc4 <tcp_input+0x7c8>)
 8017e78:	2200      	movs	r2, #0
 8017e7a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8017e7c:	69b8      	ldr	r0, [r7, #24]
 8017e7e:	f000 f925 	bl	80180cc <tcp_input_delayed_close>
 8017e82:	4603      	mov	r3, r0
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	f040 808e 	bne.w	8017fa6 <tcp_input+0x7aa>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8017e8a:	4b4c      	ldr	r3, [pc, #304]	@ (8017fbc <tcp_input+0x7c0>)
 8017e8c:	681b      	ldr	r3, [r3, #0]
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	d041      	beq.n	8017f16 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8017e92:	69bb      	ldr	r3, [r7, #24]
 8017e94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	d006      	beq.n	8017ea8 <tcp_input+0x6ac>
 8017e9a:	4b4f      	ldr	r3, [pc, #316]	@ (8017fd8 <tcp_input+0x7dc>)
 8017e9c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8017ea0:	494e      	ldr	r1, [pc, #312]	@ (8017fdc <tcp_input+0x7e0>)
 8017ea2:	484f      	ldr	r0, [pc, #316]	@ (8017fe0 <tcp_input+0x7e4>)
 8017ea4:	f009 f90e 	bl	80210c4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8017ea8:	69bb      	ldr	r3, [r7, #24]
 8017eaa:	8b5b      	ldrh	r3, [r3, #26]
 8017eac:	f003 0310 	and.w	r3, r3, #16
 8017eb0:	2b00      	cmp	r3, #0
 8017eb2:	d008      	beq.n	8017ec6 <tcp_input+0x6ca>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8017eb4:	4b41      	ldr	r3, [pc, #260]	@ (8017fbc <tcp_input+0x7c0>)
 8017eb6:	681b      	ldr	r3, [r3, #0]
 8017eb8:	4618      	mov	r0, r3
 8017eba:	f7fd fa63 	bl	8015384 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8017ebe:	69b8      	ldr	r0, [r7, #24]
 8017ec0:	f7fe fa0a 	bl	80162d8 <tcp_abort>
            goto aborted;
 8017ec4:	e091      	b.n	8017fea <tcp_input+0x7ee>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8017ec6:	69bb      	ldr	r3, [r7, #24]
 8017ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8017ecc:	2b00      	cmp	r3, #0
 8017ece:	d00c      	beq.n	8017eea <tcp_input+0x6ee>
 8017ed0:	69bb      	ldr	r3, [r7, #24]
 8017ed2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8017ed6:	69bb      	ldr	r3, [r7, #24]
 8017ed8:	6918      	ldr	r0, [r3, #16]
 8017eda:	4b38      	ldr	r3, [pc, #224]	@ (8017fbc <tcp_input+0x7c0>)
 8017edc:	681a      	ldr	r2, [r3, #0]
 8017ede:	2300      	movs	r3, #0
 8017ee0:	69b9      	ldr	r1, [r7, #24]
 8017ee2:	47a0      	blx	r4
 8017ee4:	4603      	mov	r3, r0
 8017ee6:	74fb      	strb	r3, [r7, #19]
 8017ee8:	e008      	b.n	8017efc <tcp_input+0x700>
 8017eea:	4b34      	ldr	r3, [pc, #208]	@ (8017fbc <tcp_input+0x7c0>)
 8017eec:	681a      	ldr	r2, [r3, #0]
 8017eee:	2300      	movs	r3, #0
 8017ef0:	69b9      	ldr	r1, [r7, #24]
 8017ef2:	2000      	movs	r0, #0
 8017ef4:	f7ff f804 	bl	8016f00 <tcp_recv_null>
 8017ef8:	4603      	mov	r3, r0
 8017efa:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8017efc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017f00:	f113 0f0d 	cmn.w	r3, #13
 8017f04:	d051      	beq.n	8017faa <tcp_input+0x7ae>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8017f06:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	d003      	beq.n	8017f16 <tcp_input+0x71a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8017f0e:	4b2b      	ldr	r3, [pc, #172]	@ (8017fbc <tcp_input+0x7c0>)
 8017f10:	681a      	ldr	r2, [r3, #0]
 8017f12:	69bb      	ldr	r3, [r7, #24]
 8017f14:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8017f16:	4b2a      	ldr	r3, [pc, #168]	@ (8017fc0 <tcp_input+0x7c4>)
 8017f18:	781b      	ldrb	r3, [r3, #0]
 8017f1a:	f003 0320 	and.w	r3, r3, #32
 8017f1e:	2b00      	cmp	r3, #0
 8017f20:	d030      	beq.n	8017f84 <tcp_input+0x788>
          if (pcb->refused_data != NULL) {
 8017f22:	69bb      	ldr	r3, [r7, #24]
 8017f24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d009      	beq.n	8017f3e <tcp_input+0x742>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8017f2a:	69bb      	ldr	r3, [r7, #24]
 8017f2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017f2e:	7b5a      	ldrb	r2, [r3, #13]
 8017f30:	69bb      	ldr	r3, [r7, #24]
 8017f32:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017f34:	f042 0220 	orr.w	r2, r2, #32
 8017f38:	b2d2      	uxtb	r2, r2
 8017f3a:	735a      	strb	r2, [r3, #13]
 8017f3c:	e022      	b.n	8017f84 <tcp_input+0x788>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8017f3e:	69bb      	ldr	r3, [r7, #24]
 8017f40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017f42:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8017f46:	d005      	beq.n	8017f54 <tcp_input+0x758>
              pcb->rcv_wnd++;
 8017f48:	69bb      	ldr	r3, [r7, #24]
 8017f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017f4c:	3301      	adds	r3, #1
 8017f4e:	b29a      	uxth	r2, r3
 8017f50:	69bb      	ldr	r3, [r7, #24]
 8017f52:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8017f54:	69bb      	ldr	r3, [r7, #24]
 8017f56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	d00b      	beq.n	8017f76 <tcp_input+0x77a>
 8017f5e:	69bb      	ldr	r3, [r7, #24]
 8017f60:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8017f64:	69bb      	ldr	r3, [r7, #24]
 8017f66:	6918      	ldr	r0, [r3, #16]
 8017f68:	2300      	movs	r3, #0
 8017f6a:	2200      	movs	r2, #0
 8017f6c:	69b9      	ldr	r1, [r7, #24]
 8017f6e:	47a0      	blx	r4
 8017f70:	4603      	mov	r3, r0
 8017f72:	74fb      	strb	r3, [r7, #19]
 8017f74:	e001      	b.n	8017f7a <tcp_input+0x77e>
 8017f76:	2300      	movs	r3, #0
 8017f78:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8017f7a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017f7e:	f113 0f0d 	cmn.w	r3, #13
 8017f82:	d02f      	beq.n	8017fe4 <tcp_input+0x7e8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8017f84:	4b12      	ldr	r3, [pc, #72]	@ (8017fd0 <tcp_input+0x7d4>)
 8017f86:	2200      	movs	r2, #0
 8017f88:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8017f8a:	69b8      	ldr	r0, [r7, #24]
 8017f8c:	f000 f89e 	bl	80180cc <tcp_input_delayed_close>
 8017f90:	4603      	mov	r3, r0
 8017f92:	2b00      	cmp	r3, #0
 8017f94:	d128      	bne.n	8017fe8 <tcp_input+0x7ec>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8017f96:	69b8      	ldr	r0, [r7, #24]
 8017f98:	f002 ffd2 	bl	801af40 <tcp_output>
 8017f9c:	e025      	b.n	8017fea <tcp_input+0x7ee>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8017f9e:	bf00      	nop
 8017fa0:	e023      	b.n	8017fea <tcp_input+0x7ee>
              goto aborted;
 8017fa2:	bf00      	nop
 8017fa4:	e021      	b.n	8017fea <tcp_input+0x7ee>
          goto aborted;
 8017fa6:	bf00      	nop
 8017fa8:	e01f      	b.n	8017fea <tcp_input+0x7ee>
            goto aborted;
 8017faa:	bf00      	nop
 8017fac:	e01d      	b.n	8017fea <tcp_input+0x7ee>
 8017fae:	bf00      	nop
 8017fb0:	20028318 	.word	0x20028318
 8017fb4:	20028430 	.word	0x20028430
 8017fb8:	20028444 	.word	0x20028444
 8017fbc:	20028464 	.word	0x20028464
 8017fc0:	20028461 	.word	0x20028461
 8017fc4:	2002845c 	.word	0x2002845c
 8017fc8:	20028460 	.word	0x20028460
 8017fcc:	2002845e 	.word	0x2002845e
 8017fd0:	20028468 	.word	0x20028468
 8017fd4:	20028424 	.word	0x20028424
 8017fd8:	08024cb8 	.word	0x08024cb8
 8017fdc:	08024e6c 	.word	0x08024e6c
 8017fe0:	08024d04 	.word	0x08024d04
              goto aborted;
 8017fe4:	bf00      	nop
 8017fe6:	e000      	b.n	8017fea <tcp_input+0x7ee>
          goto aborted;
 8017fe8:	bf00      	nop
    tcp_input_pcb = NULL;
 8017fea:	4b2e      	ldr	r3, [pc, #184]	@ (80180a4 <tcp_input+0x8a8>)
 8017fec:	2200      	movs	r2, #0
 8017fee:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8017ff0:	4b2d      	ldr	r3, [pc, #180]	@ (80180a8 <tcp_input+0x8ac>)
 8017ff2:	2200      	movs	r2, #0
 8017ff4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8017ff6:	4b2d      	ldr	r3, [pc, #180]	@ (80180ac <tcp_input+0x8b0>)
 8017ff8:	685b      	ldr	r3, [r3, #4]
 8017ffa:	2b00      	cmp	r3, #0
 8017ffc:	d04e      	beq.n	801809c <tcp_input+0x8a0>
      pbuf_free(inseg.p);
 8017ffe:	4b2b      	ldr	r3, [pc, #172]	@ (80180ac <tcp_input+0x8b0>)
 8018000:	685b      	ldr	r3, [r3, #4]
 8018002:	4618      	mov	r0, r3
 8018004:	f7fd f9be 	bl	8015384 <pbuf_free>
      inseg.p = NULL;
 8018008:	4b28      	ldr	r3, [pc, #160]	@ (80180ac <tcp_input+0x8b0>)
 801800a:	2200      	movs	r2, #0
 801800c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801800e:	e045      	b.n	801809c <tcp_input+0x8a0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8018010:	4b27      	ldr	r3, [pc, #156]	@ (80180b0 <tcp_input+0x8b4>)
 8018012:	681b      	ldr	r3, [r3, #0]
 8018014:	899b      	ldrh	r3, [r3, #12]
 8018016:	b29b      	uxth	r3, r3
 8018018:	4618      	mov	r0, r3
 801801a:	f7fb fa39 	bl	8013490 <lwip_htons>
 801801e:	4603      	mov	r3, r0
 8018020:	b2db      	uxtb	r3, r3
 8018022:	f003 0304 	and.w	r3, r3, #4
 8018026:	2b00      	cmp	r3, #0
 8018028:	d128      	bne.n	801807c <tcp_input+0x880>
      TCP_STATS_INC(tcp.proterr);
 801802a:	4b22      	ldr	r3, [pc, #136]	@ (80180b4 <tcp_input+0x8b8>)
 801802c:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8018030:	3301      	adds	r3, #1
 8018032:	b29a      	uxth	r2, r3
 8018034:	4b1f      	ldr	r3, [pc, #124]	@ (80180b4 <tcp_input+0x8b8>)
 8018036:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
      TCP_STATS_INC(tcp.drop);
 801803a:	4b1e      	ldr	r3, [pc, #120]	@ (80180b4 <tcp_input+0x8b8>)
 801803c:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 8018040:	3301      	adds	r3, #1
 8018042:	b29a      	uxth	r2, r3
 8018044:	4b1b      	ldr	r3, [pc, #108]	@ (80180b4 <tcp_input+0x8b8>)
 8018046:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801804a:	4b1b      	ldr	r3, [pc, #108]	@ (80180b8 <tcp_input+0x8bc>)
 801804c:	6819      	ldr	r1, [r3, #0]
 801804e:	4b1b      	ldr	r3, [pc, #108]	@ (80180bc <tcp_input+0x8c0>)
 8018050:	881b      	ldrh	r3, [r3, #0]
 8018052:	461a      	mov	r2, r3
 8018054:	4b1a      	ldr	r3, [pc, #104]	@ (80180c0 <tcp_input+0x8c4>)
 8018056:	681b      	ldr	r3, [r3, #0]
 8018058:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801805a:	4b15      	ldr	r3, [pc, #84]	@ (80180b0 <tcp_input+0x8b4>)
 801805c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801805e:	885b      	ldrh	r3, [r3, #2]
 8018060:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018062:	4a13      	ldr	r2, [pc, #76]	@ (80180b0 <tcp_input+0x8b4>)
 8018064:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018066:	8812      	ldrh	r2, [r2, #0]
 8018068:	b292      	uxth	r2, r2
 801806a:	9202      	str	r2, [sp, #8]
 801806c:	9301      	str	r3, [sp, #4]
 801806e:	4b15      	ldr	r3, [pc, #84]	@ (80180c4 <tcp_input+0x8c8>)
 8018070:	9300      	str	r3, [sp, #0]
 8018072:	4b15      	ldr	r3, [pc, #84]	@ (80180c8 <tcp_input+0x8cc>)
 8018074:	4602      	mov	r2, r0
 8018076:	2000      	movs	r0, #0
 8018078:	f003 fd36 	bl	801bae8 <tcp_rst>
    pbuf_free(p);
 801807c:	6878      	ldr	r0, [r7, #4]
 801807e:	f7fd f981 	bl	8015384 <pbuf_free>
  return;
 8018082:	e00b      	b.n	801809c <tcp_input+0x8a0>
dropped:
  TCP_STATS_INC(tcp.drop);
 8018084:	4b0b      	ldr	r3, [pc, #44]	@ (80180b4 <tcp_input+0x8b8>)
 8018086:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 801808a:	3301      	adds	r3, #1
 801808c:	b29a      	uxth	r2, r3
 801808e:	4b09      	ldr	r3, [pc, #36]	@ (80180b4 <tcp_input+0x8b8>)
 8018090:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8018094:	6878      	ldr	r0, [r7, #4]
 8018096:	f7fd f975 	bl	8015384 <pbuf_free>
 801809a:	e000      	b.n	801809e <tcp_input+0x8a2>
  return;
 801809c:	bf00      	nop
}
 801809e:	3724      	adds	r7, #36	@ 0x24
 80180a0:	46bd      	mov	sp, r7
 80180a2:	bd90      	pop	{r4, r7, pc}
 80180a4:	20028468 	.word	0x20028468
 80180a8:	20028464 	.word	0x20028464
 80180ac:	20028430 	.word	0x20028430
 80180b0:	20028444 	.word	0x20028444
 80180b4:	20028318 	.word	0x20028318
 80180b8:	20028458 	.word	0x20028458
 80180bc:	2002845e 	.word	0x2002845e
 80180c0:	20028454 	.word	0x20028454
 80180c4:	2001f888 	.word	0x2001f888
 80180c8:	2001f88c 	.word	0x2001f88c

080180cc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80180cc:	b580      	push	{r7, lr}
 80180ce:	b082      	sub	sp, #8
 80180d0:	af00      	add	r7, sp, #0
 80180d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	2b00      	cmp	r3, #0
 80180d8:	d106      	bne.n	80180e8 <tcp_input_delayed_close+0x1c>
 80180da:	4b17      	ldr	r3, [pc, #92]	@ (8018138 <tcp_input_delayed_close+0x6c>)
 80180dc:	f240 225a 	movw	r2, #602	@ 0x25a
 80180e0:	4916      	ldr	r1, [pc, #88]	@ (801813c <tcp_input_delayed_close+0x70>)
 80180e2:	4817      	ldr	r0, [pc, #92]	@ (8018140 <tcp_input_delayed_close+0x74>)
 80180e4:	f008 ffee 	bl	80210c4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80180e8:	4b16      	ldr	r3, [pc, #88]	@ (8018144 <tcp_input_delayed_close+0x78>)
 80180ea:	781b      	ldrb	r3, [r3, #0]
 80180ec:	f003 0310 	and.w	r3, r3, #16
 80180f0:	2b00      	cmp	r3, #0
 80180f2:	d01c      	beq.n	801812e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	8b5b      	ldrh	r3, [r3, #26]
 80180f8:	f003 0310 	and.w	r3, r3, #16
 80180fc:	2b00      	cmp	r3, #0
 80180fe:	d10d      	bne.n	801811c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018106:	2b00      	cmp	r3, #0
 8018108:	d008      	beq.n	801811c <tcp_input_delayed_close+0x50>
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018110:	687a      	ldr	r2, [r7, #4]
 8018112:	6912      	ldr	r2, [r2, #16]
 8018114:	f06f 010e 	mvn.w	r1, #14
 8018118:	4610      	mov	r0, r2
 801811a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801811c:	6879      	ldr	r1, [r7, #4]
 801811e:	480a      	ldr	r0, [pc, #40]	@ (8018148 <tcp_input_delayed_close+0x7c>)
 8018120:	f7ff f9ee 	bl	8017500 <tcp_pcb_remove>
    tcp_free(pcb);
 8018124:	6878      	ldr	r0, [r7, #4]
 8018126:	f7fd fd93 	bl	8015c50 <tcp_free>
    return 1;
 801812a:	2301      	movs	r3, #1
 801812c:	e000      	b.n	8018130 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801812e:	2300      	movs	r3, #0
}
 8018130:	4618      	mov	r0, r3
 8018132:	3708      	adds	r7, #8
 8018134:	46bd      	mov	sp, r7
 8018136:	bd80      	pop	{r7, pc}
 8018138:	08024cb8 	.word	0x08024cb8
 801813c:	08024e88 	.word	0x08024e88
 8018140:	08024d04 	.word	0x08024d04
 8018144:	20028461 	.word	0x20028461
 8018148:	20028424 	.word	0x20028424

0801814c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801814c:	b590      	push	{r4, r7, lr}
 801814e:	b08b      	sub	sp, #44	@ 0x2c
 8018150:	af04      	add	r7, sp, #16
 8018152:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8018154:	4b73      	ldr	r3, [pc, #460]	@ (8018324 <tcp_listen_input+0x1d8>)
 8018156:	781b      	ldrb	r3, [r3, #0]
 8018158:	f003 0304 	and.w	r3, r3, #4
 801815c:	2b00      	cmp	r3, #0
 801815e:	f040 80da 	bne.w	8018316 <tcp_listen_input+0x1ca>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8018162:	687b      	ldr	r3, [r7, #4]
 8018164:	2b00      	cmp	r3, #0
 8018166:	d106      	bne.n	8018176 <tcp_listen_input+0x2a>
 8018168:	4b6f      	ldr	r3, [pc, #444]	@ (8018328 <tcp_listen_input+0x1dc>)
 801816a:	f240 2281 	movw	r2, #641	@ 0x281
 801816e:	496f      	ldr	r1, [pc, #444]	@ (801832c <tcp_listen_input+0x1e0>)
 8018170:	486f      	ldr	r0, [pc, #444]	@ (8018330 <tcp_listen_input+0x1e4>)
 8018172:	f008 ffa7 	bl	80210c4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8018176:	4b6b      	ldr	r3, [pc, #428]	@ (8018324 <tcp_listen_input+0x1d8>)
 8018178:	781b      	ldrb	r3, [r3, #0]
 801817a:	f003 0310 	and.w	r3, r3, #16
 801817e:	2b00      	cmp	r3, #0
 8018180:	d019      	beq.n	80181b6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018182:	4b6c      	ldr	r3, [pc, #432]	@ (8018334 <tcp_listen_input+0x1e8>)
 8018184:	6819      	ldr	r1, [r3, #0]
 8018186:	4b6c      	ldr	r3, [pc, #432]	@ (8018338 <tcp_listen_input+0x1ec>)
 8018188:	881b      	ldrh	r3, [r3, #0]
 801818a:	461a      	mov	r2, r3
 801818c:	4b6b      	ldr	r3, [pc, #428]	@ (801833c <tcp_listen_input+0x1f0>)
 801818e:	681b      	ldr	r3, [r3, #0]
 8018190:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018192:	4b6b      	ldr	r3, [pc, #428]	@ (8018340 <tcp_listen_input+0x1f4>)
 8018194:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018196:	885b      	ldrh	r3, [r3, #2]
 8018198:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801819a:	4a69      	ldr	r2, [pc, #420]	@ (8018340 <tcp_listen_input+0x1f4>)
 801819c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801819e:	8812      	ldrh	r2, [r2, #0]
 80181a0:	b292      	uxth	r2, r2
 80181a2:	9202      	str	r2, [sp, #8]
 80181a4:	9301      	str	r3, [sp, #4]
 80181a6:	4b67      	ldr	r3, [pc, #412]	@ (8018344 <tcp_listen_input+0x1f8>)
 80181a8:	9300      	str	r3, [sp, #0]
 80181aa:	4b67      	ldr	r3, [pc, #412]	@ (8018348 <tcp_listen_input+0x1fc>)
 80181ac:	4602      	mov	r2, r0
 80181ae:	6878      	ldr	r0, [r7, #4]
 80181b0:	f003 fc9a 	bl	801bae8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80181b4:	e0b1      	b.n	801831a <tcp_listen_input+0x1ce>
  } else if (flags & TCP_SYN) {
 80181b6:	4b5b      	ldr	r3, [pc, #364]	@ (8018324 <tcp_listen_input+0x1d8>)
 80181b8:	781b      	ldrb	r3, [r3, #0]
 80181ba:	f003 0302 	and.w	r3, r3, #2
 80181be:	2b00      	cmp	r3, #0
 80181c0:	f000 80ab 	beq.w	801831a <tcp_listen_input+0x1ce>
    npcb = tcp_alloc(pcb->prio);
 80181c4:	687b      	ldr	r3, [r7, #4]
 80181c6:	7d5b      	ldrb	r3, [r3, #21]
 80181c8:	4618      	mov	r0, r3
 80181ca:	f7fe ffbd 	bl	8017148 <tcp_alloc>
 80181ce:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80181d0:	697b      	ldr	r3, [r7, #20]
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d119      	bne.n	801820a <tcp_listen_input+0xbe>
      TCP_STATS_INC(tcp.memerr);
 80181d6:	4b5d      	ldr	r3, [pc, #372]	@ (801834c <tcp_listen_input+0x200>)
 80181d8:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 80181dc:	3301      	adds	r3, #1
 80181de:	b29a      	uxth	r2, r3
 80181e0:	4b5a      	ldr	r3, [pc, #360]	@ (801834c <tcp_listen_input+0x200>)
 80181e2:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80181e6:	687b      	ldr	r3, [r7, #4]
 80181e8:	699b      	ldr	r3, [r3, #24]
 80181ea:	2b00      	cmp	r3, #0
 80181ec:	d00a      	beq.n	8018204 <tcp_listen_input+0xb8>
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	699b      	ldr	r3, [r3, #24]
 80181f2:	687a      	ldr	r2, [r7, #4]
 80181f4:	6910      	ldr	r0, [r2, #16]
 80181f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80181fa:	2100      	movs	r1, #0
 80181fc:	4798      	blx	r3
 80181fe:	4603      	mov	r3, r0
 8018200:	73bb      	strb	r3, [r7, #14]
      return;
 8018202:	e08b      	b.n	801831c <tcp_listen_input+0x1d0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8018204:	23f0      	movs	r3, #240	@ 0xf0
 8018206:	73bb      	strb	r3, [r7, #14]
      return;
 8018208:	e088      	b.n	801831c <tcp_listen_input+0x1d0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801820a:	4b51      	ldr	r3, [pc, #324]	@ (8018350 <tcp_listen_input+0x204>)
 801820c:	695a      	ldr	r2, [r3, #20]
 801820e:	697b      	ldr	r3, [r7, #20]
 8018210:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8018212:	4b4f      	ldr	r3, [pc, #316]	@ (8018350 <tcp_listen_input+0x204>)
 8018214:	691a      	ldr	r2, [r3, #16]
 8018216:	697b      	ldr	r3, [r7, #20]
 8018218:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	8ada      	ldrh	r2, [r3, #22]
 801821e:	697b      	ldr	r3, [r7, #20]
 8018220:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8018222:	4b47      	ldr	r3, [pc, #284]	@ (8018340 <tcp_listen_input+0x1f4>)
 8018224:	681b      	ldr	r3, [r3, #0]
 8018226:	881b      	ldrh	r3, [r3, #0]
 8018228:	b29a      	uxth	r2, r3
 801822a:	697b      	ldr	r3, [r7, #20]
 801822c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801822e:	697b      	ldr	r3, [r7, #20]
 8018230:	2203      	movs	r2, #3
 8018232:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8018234:	4b41      	ldr	r3, [pc, #260]	@ (801833c <tcp_listen_input+0x1f0>)
 8018236:	681b      	ldr	r3, [r3, #0]
 8018238:	1c5a      	adds	r2, r3, #1
 801823a:	697b      	ldr	r3, [r7, #20]
 801823c:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801823e:	697b      	ldr	r3, [r7, #20]
 8018240:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018242:	697b      	ldr	r3, [r7, #20]
 8018244:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8018246:	6978      	ldr	r0, [r7, #20]
 8018248:	f7ff f9ee 	bl	8017628 <tcp_next_iss>
 801824c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801824e:	697b      	ldr	r3, [r7, #20]
 8018250:	693a      	ldr	r2, [r7, #16]
 8018252:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8018254:	697b      	ldr	r3, [r7, #20]
 8018256:	693a      	ldr	r2, [r7, #16]
 8018258:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 801825a:	697b      	ldr	r3, [r7, #20]
 801825c:	693a      	ldr	r2, [r7, #16]
 801825e:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8018260:	697b      	ldr	r3, [r7, #20]
 8018262:	693a      	ldr	r2, [r7, #16]
 8018264:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8018266:	4b35      	ldr	r3, [pc, #212]	@ (801833c <tcp_listen_input+0x1f0>)
 8018268:	681b      	ldr	r3, [r3, #0]
 801826a:	1e5a      	subs	r2, r3, #1
 801826c:	697b      	ldr	r3, [r7, #20]
 801826e:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	691a      	ldr	r2, [r3, #16]
 8018274:	697b      	ldr	r3, [r7, #20]
 8018276:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8018278:	697b      	ldr	r3, [r7, #20]
 801827a:	687a      	ldr	r2, [r7, #4]
 801827c:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	7a5b      	ldrb	r3, [r3, #9]
 8018282:	f003 030c 	and.w	r3, r3, #12
 8018286:	b2da      	uxtb	r2, r3
 8018288:	697b      	ldr	r3, [r7, #20]
 801828a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	7a1a      	ldrb	r2, [r3, #8]
 8018290:	697b      	ldr	r3, [r7, #20]
 8018292:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8018294:	4b2f      	ldr	r3, [pc, #188]	@ (8018354 <tcp_listen_input+0x208>)
 8018296:	681a      	ldr	r2, [r3, #0]
 8018298:	697b      	ldr	r3, [r7, #20]
 801829a:	60da      	str	r2, [r3, #12]
 801829c:	4a2d      	ldr	r2, [pc, #180]	@ (8018354 <tcp_listen_input+0x208>)
 801829e:	697b      	ldr	r3, [r7, #20]
 80182a0:	6013      	str	r3, [r2, #0]
 80182a2:	f003 fde3 	bl	801be6c <tcp_timer_needed>
 80182a6:	4b2c      	ldr	r3, [pc, #176]	@ (8018358 <tcp_listen_input+0x20c>)
 80182a8:	2201      	movs	r2, #1
 80182aa:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80182ac:	6978      	ldr	r0, [r7, #20]
 80182ae:	f001 fd8d 	bl	8019dcc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80182b2:	4b23      	ldr	r3, [pc, #140]	@ (8018340 <tcp_listen_input+0x1f4>)
 80182b4:	681b      	ldr	r3, [r3, #0]
 80182b6:	89db      	ldrh	r3, [r3, #14]
 80182b8:	b29a      	uxth	r2, r3
 80182ba:	697b      	ldr	r3, [r7, #20]
 80182bc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80182c0:	697b      	ldr	r3, [r7, #20]
 80182c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80182c6:	697b      	ldr	r3, [r7, #20]
 80182c8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80182cc:	697b      	ldr	r3, [r7, #20]
 80182ce:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80182d0:	697b      	ldr	r3, [r7, #20]
 80182d2:	3304      	adds	r3, #4
 80182d4:	4618      	mov	r0, r3
 80182d6:	f006 f86b 	bl	801e3b0 <ip4_route>
 80182da:	4601      	mov	r1, r0
 80182dc:	697b      	ldr	r3, [r7, #20]
 80182de:	3304      	adds	r3, #4
 80182e0:	461a      	mov	r2, r3
 80182e2:	4620      	mov	r0, r4
 80182e4:	f7ff f9c6 	bl	8017674 <tcp_eff_send_mss_netif>
 80182e8:	4603      	mov	r3, r0
 80182ea:	461a      	mov	r2, r3
 80182ec:	697b      	ldr	r3, [r7, #20]
 80182ee:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80182f0:	2112      	movs	r1, #18
 80182f2:	6978      	ldr	r0, [r7, #20]
 80182f4:	f002 fd24 	bl	801ad40 <tcp_enqueue_flags>
 80182f8:	4603      	mov	r3, r0
 80182fa:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80182fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018300:	2b00      	cmp	r3, #0
 8018302:	d004      	beq.n	801830e <tcp_listen_input+0x1c2>
      tcp_abandon(npcb, 0);
 8018304:	2100      	movs	r1, #0
 8018306:	6978      	ldr	r0, [r7, #20]
 8018308:	f7fd ff28 	bl	801615c <tcp_abandon>
      return;
 801830c:	e006      	b.n	801831c <tcp_listen_input+0x1d0>
    tcp_output(npcb);
 801830e:	6978      	ldr	r0, [r7, #20]
 8018310:	f002 fe16 	bl	801af40 <tcp_output>
  return;
 8018314:	e001      	b.n	801831a <tcp_listen_input+0x1ce>
    return;
 8018316:	bf00      	nop
 8018318:	e000      	b.n	801831c <tcp_listen_input+0x1d0>
  return;
 801831a:	bf00      	nop
}
 801831c:	371c      	adds	r7, #28
 801831e:	46bd      	mov	sp, r7
 8018320:	bd90      	pop	{r4, r7, pc}
 8018322:	bf00      	nop
 8018324:	20028460 	.word	0x20028460
 8018328:	08024cb8 	.word	0x08024cb8
 801832c:	08024eb0 	.word	0x08024eb0
 8018330:	08024d04 	.word	0x08024d04
 8018334:	20028458 	.word	0x20028458
 8018338:	2002845e 	.word	0x2002845e
 801833c:	20028454 	.word	0x20028454
 8018340:	20028444 	.word	0x20028444
 8018344:	2001f888 	.word	0x2001f888
 8018348:	2001f88c 	.word	0x2001f88c
 801834c:	20028318 	.word	0x20028318
 8018350:	2001f878 	.word	0x2001f878
 8018354:	20028424 	.word	0x20028424
 8018358:	2002842c 	.word	0x2002842c

0801835c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801835c:	b580      	push	{r7, lr}
 801835e:	b086      	sub	sp, #24
 8018360:	af04      	add	r7, sp, #16
 8018362:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8018364:	4b2f      	ldr	r3, [pc, #188]	@ (8018424 <tcp_timewait_input+0xc8>)
 8018366:	781b      	ldrb	r3, [r3, #0]
 8018368:	f003 0304 	and.w	r3, r3, #4
 801836c:	2b00      	cmp	r3, #0
 801836e:	d153      	bne.n	8018418 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	2b00      	cmp	r3, #0
 8018374:	d106      	bne.n	8018384 <tcp_timewait_input+0x28>
 8018376:	4b2c      	ldr	r3, [pc, #176]	@ (8018428 <tcp_timewait_input+0xcc>)
 8018378:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801837c:	492b      	ldr	r1, [pc, #172]	@ (801842c <tcp_timewait_input+0xd0>)
 801837e:	482c      	ldr	r0, [pc, #176]	@ (8018430 <tcp_timewait_input+0xd4>)
 8018380:	f008 fea0 	bl	80210c4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8018384:	4b27      	ldr	r3, [pc, #156]	@ (8018424 <tcp_timewait_input+0xc8>)
 8018386:	781b      	ldrb	r3, [r3, #0]
 8018388:	f003 0302 	and.w	r3, r3, #2
 801838c:	2b00      	cmp	r3, #0
 801838e:	d02a      	beq.n	80183e6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8018390:	4b28      	ldr	r3, [pc, #160]	@ (8018434 <tcp_timewait_input+0xd8>)
 8018392:	681a      	ldr	r2, [r3, #0]
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018398:	1ad3      	subs	r3, r2, r3
 801839a:	2b00      	cmp	r3, #0
 801839c:	db2d      	blt.n	80183fa <tcp_timewait_input+0x9e>
 801839e:	4b25      	ldr	r3, [pc, #148]	@ (8018434 <tcp_timewait_input+0xd8>)
 80183a0:	681a      	ldr	r2, [r3, #0]
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80183a6:	6879      	ldr	r1, [r7, #4]
 80183a8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80183aa:	440b      	add	r3, r1
 80183ac:	1ad3      	subs	r3, r2, r3
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	dc23      	bgt.n	80183fa <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80183b2:	4b21      	ldr	r3, [pc, #132]	@ (8018438 <tcp_timewait_input+0xdc>)
 80183b4:	6819      	ldr	r1, [r3, #0]
 80183b6:	4b21      	ldr	r3, [pc, #132]	@ (801843c <tcp_timewait_input+0xe0>)
 80183b8:	881b      	ldrh	r3, [r3, #0]
 80183ba:	461a      	mov	r2, r3
 80183bc:	4b1d      	ldr	r3, [pc, #116]	@ (8018434 <tcp_timewait_input+0xd8>)
 80183be:	681b      	ldr	r3, [r3, #0]
 80183c0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80183c2:	4b1f      	ldr	r3, [pc, #124]	@ (8018440 <tcp_timewait_input+0xe4>)
 80183c4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80183c6:	885b      	ldrh	r3, [r3, #2]
 80183c8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80183ca:	4a1d      	ldr	r2, [pc, #116]	@ (8018440 <tcp_timewait_input+0xe4>)
 80183cc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80183ce:	8812      	ldrh	r2, [r2, #0]
 80183d0:	b292      	uxth	r2, r2
 80183d2:	9202      	str	r2, [sp, #8]
 80183d4:	9301      	str	r3, [sp, #4]
 80183d6:	4b1b      	ldr	r3, [pc, #108]	@ (8018444 <tcp_timewait_input+0xe8>)
 80183d8:	9300      	str	r3, [sp, #0]
 80183da:	4b1b      	ldr	r3, [pc, #108]	@ (8018448 <tcp_timewait_input+0xec>)
 80183dc:	4602      	mov	r2, r0
 80183de:	6878      	ldr	r0, [r7, #4]
 80183e0:	f003 fb82 	bl	801bae8 <tcp_rst>
      return;
 80183e4:	e01b      	b.n	801841e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80183e6:	4b0f      	ldr	r3, [pc, #60]	@ (8018424 <tcp_timewait_input+0xc8>)
 80183e8:	781b      	ldrb	r3, [r3, #0]
 80183ea:	f003 0301 	and.w	r3, r3, #1
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	d003      	beq.n	80183fa <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80183f2:	4b16      	ldr	r3, [pc, #88]	@ (801844c <tcp_timewait_input+0xf0>)
 80183f4:	681a      	ldr	r2, [r3, #0]
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80183fa:	4b10      	ldr	r3, [pc, #64]	@ (801843c <tcp_timewait_input+0xe0>)
 80183fc:	881b      	ldrh	r3, [r3, #0]
 80183fe:	2b00      	cmp	r3, #0
 8018400:	d00c      	beq.n	801841c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8018402:	687b      	ldr	r3, [r7, #4]
 8018404:	8b5b      	ldrh	r3, [r3, #26]
 8018406:	f043 0302 	orr.w	r3, r3, #2
 801840a:	b29a      	uxth	r2, r3
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8018410:	6878      	ldr	r0, [r7, #4]
 8018412:	f002 fd95 	bl	801af40 <tcp_output>
  }
  return;
 8018416:	e001      	b.n	801841c <tcp_timewait_input+0xc0>
    return;
 8018418:	bf00      	nop
 801841a:	e000      	b.n	801841e <tcp_timewait_input+0xc2>
  return;
 801841c:	bf00      	nop
}
 801841e:	3708      	adds	r7, #8
 8018420:	46bd      	mov	sp, r7
 8018422:	bd80      	pop	{r7, pc}
 8018424:	20028460 	.word	0x20028460
 8018428:	08024cb8 	.word	0x08024cb8
 801842c:	08024ed0 	.word	0x08024ed0
 8018430:	08024d04 	.word	0x08024d04
 8018434:	20028454 	.word	0x20028454
 8018438:	20028458 	.word	0x20028458
 801843c:	2002845e 	.word	0x2002845e
 8018440:	20028444 	.word	0x20028444
 8018444:	2001f888 	.word	0x2001f888
 8018448:	2001f88c 	.word	0x2001f88c
 801844c:	20028418 	.word	0x20028418

08018450 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8018450:	b590      	push	{r4, r7, lr}
 8018452:	b08d      	sub	sp, #52	@ 0x34
 8018454:	af04      	add	r7, sp, #16
 8018456:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8018458:	2300      	movs	r3, #0
 801845a:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 801845c:	2300      	movs	r3, #0
 801845e:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	2b00      	cmp	r3, #0
 8018464:	d106      	bne.n	8018474 <tcp_process+0x24>
 8018466:	4b9d      	ldr	r3, [pc, #628]	@ (80186dc <tcp_process+0x28c>)
 8018468:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 801846c:	499c      	ldr	r1, [pc, #624]	@ (80186e0 <tcp_process+0x290>)
 801846e:	489d      	ldr	r0, [pc, #628]	@ (80186e4 <tcp_process+0x294>)
 8018470:	f008 fe28 	bl	80210c4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8018474:	4b9c      	ldr	r3, [pc, #624]	@ (80186e8 <tcp_process+0x298>)
 8018476:	781b      	ldrb	r3, [r3, #0]
 8018478:	f003 0304 	and.w	r3, r3, #4
 801847c:	2b00      	cmp	r3, #0
 801847e:	d04e      	beq.n	801851e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	7d1b      	ldrb	r3, [r3, #20]
 8018484:	2b02      	cmp	r3, #2
 8018486:	d108      	bne.n	801849a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801848c:	4b97      	ldr	r3, [pc, #604]	@ (80186ec <tcp_process+0x29c>)
 801848e:	681b      	ldr	r3, [r3, #0]
 8018490:	429a      	cmp	r2, r3
 8018492:	d123      	bne.n	80184dc <tcp_process+0x8c>
        acceptable = 1;
 8018494:	2301      	movs	r3, #1
 8018496:	77fb      	strb	r3, [r7, #31]
 8018498:	e020      	b.n	80184dc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801849e:	4b94      	ldr	r3, [pc, #592]	@ (80186f0 <tcp_process+0x2a0>)
 80184a0:	681b      	ldr	r3, [r3, #0]
 80184a2:	429a      	cmp	r2, r3
 80184a4:	d102      	bne.n	80184ac <tcp_process+0x5c>
        acceptable = 1;
 80184a6:	2301      	movs	r3, #1
 80184a8:	77fb      	strb	r3, [r7, #31]
 80184aa:	e017      	b.n	80184dc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80184ac:	4b90      	ldr	r3, [pc, #576]	@ (80186f0 <tcp_process+0x2a0>)
 80184ae:	681a      	ldr	r2, [r3, #0]
 80184b0:	687b      	ldr	r3, [r7, #4]
 80184b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80184b4:	1ad3      	subs	r3, r2, r3
 80184b6:	2b00      	cmp	r3, #0
 80184b8:	db10      	blt.n	80184dc <tcp_process+0x8c>
 80184ba:	4b8d      	ldr	r3, [pc, #564]	@ (80186f0 <tcp_process+0x2a0>)
 80184bc:	681a      	ldr	r2, [r3, #0]
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80184c2:	6879      	ldr	r1, [r7, #4]
 80184c4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80184c6:	440b      	add	r3, r1
 80184c8:	1ad3      	subs	r3, r2, r3
 80184ca:	2b00      	cmp	r3, #0
 80184cc:	dc06      	bgt.n	80184dc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	8b5b      	ldrh	r3, [r3, #26]
 80184d2:	f043 0302 	orr.w	r3, r3, #2
 80184d6:	b29a      	uxth	r2, r3
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80184dc:	7ffb      	ldrb	r3, [r7, #31]
 80184de:	2b00      	cmp	r3, #0
 80184e0:	d01b      	beq.n	801851a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	7d1b      	ldrb	r3, [r3, #20]
 80184e6:	2b00      	cmp	r3, #0
 80184e8:	d106      	bne.n	80184f8 <tcp_process+0xa8>
 80184ea:	4b7c      	ldr	r3, [pc, #496]	@ (80186dc <tcp_process+0x28c>)
 80184ec:	f44f 724e 	mov.w	r2, #824	@ 0x338
 80184f0:	4980      	ldr	r1, [pc, #512]	@ (80186f4 <tcp_process+0x2a4>)
 80184f2:	487c      	ldr	r0, [pc, #496]	@ (80186e4 <tcp_process+0x294>)
 80184f4:	f008 fde6 	bl	80210c4 <iprintf>
      recv_flags |= TF_RESET;
 80184f8:	4b7f      	ldr	r3, [pc, #508]	@ (80186f8 <tcp_process+0x2a8>)
 80184fa:	781b      	ldrb	r3, [r3, #0]
 80184fc:	f043 0308 	orr.w	r3, r3, #8
 8018500:	b2da      	uxtb	r2, r3
 8018502:	4b7d      	ldr	r3, [pc, #500]	@ (80186f8 <tcp_process+0x2a8>)
 8018504:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	8b5b      	ldrh	r3, [r3, #26]
 801850a:	f023 0301 	bic.w	r3, r3, #1
 801850e:	b29a      	uxth	r2, r3
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8018514:	f06f 030d 	mvn.w	r3, #13
 8018518:	e37a      	b.n	8018c10 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801851a:	2300      	movs	r3, #0
 801851c:	e378      	b.n	8018c10 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801851e:	4b72      	ldr	r3, [pc, #456]	@ (80186e8 <tcp_process+0x298>)
 8018520:	781b      	ldrb	r3, [r3, #0]
 8018522:	f003 0302 	and.w	r3, r3, #2
 8018526:	2b00      	cmp	r3, #0
 8018528:	d010      	beq.n	801854c <tcp_process+0xfc>
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	7d1b      	ldrb	r3, [r3, #20]
 801852e:	2b02      	cmp	r3, #2
 8018530:	d00c      	beq.n	801854c <tcp_process+0xfc>
 8018532:	687b      	ldr	r3, [r7, #4]
 8018534:	7d1b      	ldrb	r3, [r3, #20]
 8018536:	2b03      	cmp	r3, #3
 8018538:	d008      	beq.n	801854c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	8b5b      	ldrh	r3, [r3, #26]
 801853e:	f043 0302 	orr.w	r3, r3, #2
 8018542:	b29a      	uxth	r2, r3
 8018544:	687b      	ldr	r3, [r7, #4]
 8018546:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8018548:	2300      	movs	r3, #0
 801854a:	e361      	b.n	8018c10 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	8b5b      	ldrh	r3, [r3, #26]
 8018550:	f003 0310 	and.w	r3, r3, #16
 8018554:	2b00      	cmp	r3, #0
 8018556:	d103      	bne.n	8018560 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8018558:	4b68      	ldr	r3, [pc, #416]	@ (80186fc <tcp_process+0x2ac>)
 801855a:	681a      	ldr	r2, [r3, #0]
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	2200      	movs	r2, #0
 8018564:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	2200      	movs	r2, #0
 801856c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8018570:	6878      	ldr	r0, [r7, #4]
 8018572:	f001 fc2b 	bl	8019dcc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	7d1b      	ldrb	r3, [r3, #20]
 801857a:	3b02      	subs	r3, #2
 801857c:	2b07      	cmp	r3, #7
 801857e:	f200 8337 	bhi.w	8018bf0 <tcp_process+0x7a0>
 8018582:	a201      	add	r2, pc, #4	@ (adr r2, 8018588 <tcp_process+0x138>)
 8018584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018588:	080185a9 	.word	0x080185a9
 801858c:	080187d9 	.word	0x080187d9
 8018590:	08018951 	.word	0x08018951
 8018594:	0801897b 	.word	0x0801897b
 8018598:	08018a9f 	.word	0x08018a9f
 801859c:	08018951 	.word	0x08018951
 80185a0:	08018b2b 	.word	0x08018b2b
 80185a4:	08018bbb 	.word	0x08018bbb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80185a8:	4b4f      	ldr	r3, [pc, #316]	@ (80186e8 <tcp_process+0x298>)
 80185aa:	781b      	ldrb	r3, [r3, #0]
 80185ac:	f003 0310 	and.w	r3, r3, #16
 80185b0:	2b00      	cmp	r3, #0
 80185b2:	f000 80e4 	beq.w	801877e <tcp_process+0x32e>
 80185b6:	4b4c      	ldr	r3, [pc, #304]	@ (80186e8 <tcp_process+0x298>)
 80185b8:	781b      	ldrb	r3, [r3, #0]
 80185ba:	f003 0302 	and.w	r3, r3, #2
 80185be:	2b00      	cmp	r3, #0
 80185c0:	f000 80dd 	beq.w	801877e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80185c8:	1c5a      	adds	r2, r3, #1
 80185ca:	4b48      	ldr	r3, [pc, #288]	@ (80186ec <tcp_process+0x29c>)
 80185cc:	681b      	ldr	r3, [r3, #0]
 80185ce:	429a      	cmp	r2, r3
 80185d0:	f040 80d5 	bne.w	801877e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80185d4:	4b46      	ldr	r3, [pc, #280]	@ (80186f0 <tcp_process+0x2a0>)
 80185d6:	681b      	ldr	r3, [r3, #0]
 80185d8:	1c5a      	adds	r2, r3, #1
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80185e2:	687b      	ldr	r3, [r7, #4]
 80185e4:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 80185e6:	4b41      	ldr	r3, [pc, #260]	@ (80186ec <tcp_process+0x29c>)
 80185e8:	681a      	ldr	r2, [r3, #0]
 80185ea:	687b      	ldr	r3, [r7, #4]
 80185ec:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80185ee:	4b44      	ldr	r3, [pc, #272]	@ (8018700 <tcp_process+0x2b0>)
 80185f0:	681b      	ldr	r3, [r3, #0]
 80185f2:	89db      	ldrh	r3, [r3, #14]
 80185f4:	b29a      	uxth	r2, r3
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8018602:	687b      	ldr	r3, [r7, #4]
 8018604:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8018608:	4b39      	ldr	r3, [pc, #228]	@ (80186f0 <tcp_process+0x2a0>)
 801860a:	681b      	ldr	r3, [r3, #0]
 801860c:	1e5a      	subs	r2, r3, #1
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	2204      	movs	r2, #4
 8018616:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 801861c:	687b      	ldr	r3, [r7, #4]
 801861e:	3304      	adds	r3, #4
 8018620:	4618      	mov	r0, r3
 8018622:	f005 fec5 	bl	801e3b0 <ip4_route>
 8018626:	4601      	mov	r1, r0
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	3304      	adds	r3, #4
 801862c:	461a      	mov	r2, r3
 801862e:	4620      	mov	r0, r4
 8018630:	f7ff f820 	bl	8017674 <tcp_eff_send_mss_netif>
 8018634:	4603      	mov	r3, r0
 8018636:	461a      	mov	r2, r3
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018640:	009a      	lsls	r2, r3, #2
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018646:	005b      	lsls	r3, r3, #1
 8018648:	f241 111c 	movw	r1, #4380	@ 0x111c
 801864c:	428b      	cmp	r3, r1
 801864e:	bf38      	it	cc
 8018650:	460b      	movcc	r3, r1
 8018652:	429a      	cmp	r2, r3
 8018654:	d204      	bcs.n	8018660 <tcp_process+0x210>
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801865a:	009b      	lsls	r3, r3, #2
 801865c:	b29b      	uxth	r3, r3
 801865e:	e00d      	b.n	801867c <tcp_process+0x22c>
 8018660:	687b      	ldr	r3, [r7, #4]
 8018662:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018664:	005b      	lsls	r3, r3, #1
 8018666:	f241 121c 	movw	r2, #4380	@ 0x111c
 801866a:	4293      	cmp	r3, r2
 801866c:	d904      	bls.n	8018678 <tcp_process+0x228>
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018672:	005b      	lsls	r3, r3, #1
 8018674:	b29b      	uxth	r3, r3
 8018676:	e001      	b.n	801867c <tcp_process+0x22c>
 8018678:	f241 131c 	movw	r3, #4380	@ 0x111c
 801867c:	687a      	ldr	r2, [r7, #4]
 801867e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8018682:	687b      	ldr	r3, [r7, #4]
 8018684:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018688:	2b00      	cmp	r3, #0
 801868a:	d106      	bne.n	801869a <tcp_process+0x24a>
 801868c:	4b13      	ldr	r3, [pc, #76]	@ (80186dc <tcp_process+0x28c>)
 801868e:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8018692:	491c      	ldr	r1, [pc, #112]	@ (8018704 <tcp_process+0x2b4>)
 8018694:	4813      	ldr	r0, [pc, #76]	@ (80186e4 <tcp_process+0x294>)
 8018696:	f008 fd15 	bl	80210c4 <iprintf>
        --pcb->snd_queuelen;
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80186a0:	3b01      	subs	r3, #1
 80186a2:	b29a      	uxth	r2, r3
 80186a4:	687b      	ldr	r3, [r7, #4]
 80186a6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80186aa:	687b      	ldr	r3, [r7, #4]
 80186ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80186ae:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 80186b0:	697b      	ldr	r3, [r7, #20]
 80186b2:	2b00      	cmp	r3, #0
 80186b4:	d12a      	bne.n	801870c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80186ba:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80186bc:	697b      	ldr	r3, [r7, #20]
 80186be:	2b00      	cmp	r3, #0
 80186c0:	d106      	bne.n	80186d0 <tcp_process+0x280>
 80186c2:	4b06      	ldr	r3, [pc, #24]	@ (80186dc <tcp_process+0x28c>)
 80186c4:	f44f 725d 	mov.w	r2, #884	@ 0x374
 80186c8:	490f      	ldr	r1, [pc, #60]	@ (8018708 <tcp_process+0x2b8>)
 80186ca:	4806      	ldr	r0, [pc, #24]	@ (80186e4 <tcp_process+0x294>)
 80186cc:	f008 fcfa 	bl	80210c4 <iprintf>
          pcb->unsent = rseg->next;
 80186d0:	697b      	ldr	r3, [r7, #20]
 80186d2:	681a      	ldr	r2, [r3, #0]
 80186d4:	687b      	ldr	r3, [r7, #4]
 80186d6:	66da      	str	r2, [r3, #108]	@ 0x6c
 80186d8:	e01c      	b.n	8018714 <tcp_process+0x2c4>
 80186da:	bf00      	nop
 80186dc:	08024cb8 	.word	0x08024cb8
 80186e0:	08024ef0 	.word	0x08024ef0
 80186e4:	08024d04 	.word	0x08024d04
 80186e8:	20028460 	.word	0x20028460
 80186ec:	20028458 	.word	0x20028458
 80186f0:	20028454 	.word	0x20028454
 80186f4:	08024f0c 	.word	0x08024f0c
 80186f8:	20028461 	.word	0x20028461
 80186fc:	20028418 	.word	0x20028418
 8018700:	20028444 	.word	0x20028444
 8018704:	08024f2c 	.word	0x08024f2c
 8018708:	08024f44 	.word	0x08024f44
        } else {
          pcb->unacked = rseg->next;
 801870c:	697b      	ldr	r3, [r7, #20]
 801870e:	681a      	ldr	r2, [r3, #0]
 8018710:	687b      	ldr	r3, [r7, #4]
 8018712:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8018714:	6978      	ldr	r0, [r7, #20]
 8018716:	f7fe fbaa 	bl	8016e6e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801871e:	2b00      	cmp	r3, #0
 8018720:	d104      	bne.n	801872c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8018722:	687b      	ldr	r3, [r7, #4]
 8018724:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018728:	861a      	strh	r2, [r3, #48]	@ 0x30
 801872a:	e006      	b.n	801873a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801872c:	687b      	ldr	r3, [r7, #4]
 801872e:	2200      	movs	r2, #0
 8018730:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	2200      	movs	r2, #0
 8018736:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801873a:	687b      	ldr	r3, [r7, #4]
 801873c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018740:	2b00      	cmp	r3, #0
 8018742:	d00a      	beq.n	801875a <tcp_process+0x30a>
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801874a:	687a      	ldr	r2, [r7, #4]
 801874c:	6910      	ldr	r0, [r2, #16]
 801874e:	2200      	movs	r2, #0
 8018750:	6879      	ldr	r1, [r7, #4]
 8018752:	4798      	blx	r3
 8018754:	4603      	mov	r3, r0
 8018756:	77bb      	strb	r3, [r7, #30]
 8018758:	e001      	b.n	801875e <tcp_process+0x30e>
 801875a:	2300      	movs	r3, #0
 801875c:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 801875e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8018762:	f113 0f0d 	cmn.w	r3, #13
 8018766:	d102      	bne.n	801876e <tcp_process+0x31e>
          return ERR_ABRT;
 8018768:	f06f 030c 	mvn.w	r3, #12
 801876c:	e250      	b.n	8018c10 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	8b5b      	ldrh	r3, [r3, #26]
 8018772:	f043 0302 	orr.w	r3, r3, #2
 8018776:	b29a      	uxth	r2, r3
 8018778:	687b      	ldr	r3, [r7, #4]
 801877a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801877c:	e23a      	b.n	8018bf4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801877e:	4b98      	ldr	r3, [pc, #608]	@ (80189e0 <tcp_process+0x590>)
 8018780:	781b      	ldrb	r3, [r3, #0]
 8018782:	f003 0310 	and.w	r3, r3, #16
 8018786:	2b00      	cmp	r3, #0
 8018788:	f000 8234 	beq.w	8018bf4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801878c:	4b95      	ldr	r3, [pc, #596]	@ (80189e4 <tcp_process+0x594>)
 801878e:	6819      	ldr	r1, [r3, #0]
 8018790:	4b95      	ldr	r3, [pc, #596]	@ (80189e8 <tcp_process+0x598>)
 8018792:	881b      	ldrh	r3, [r3, #0]
 8018794:	461a      	mov	r2, r3
 8018796:	4b95      	ldr	r3, [pc, #596]	@ (80189ec <tcp_process+0x59c>)
 8018798:	681b      	ldr	r3, [r3, #0]
 801879a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801879c:	4b94      	ldr	r3, [pc, #592]	@ (80189f0 <tcp_process+0x5a0>)
 801879e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80187a0:	885b      	ldrh	r3, [r3, #2]
 80187a2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80187a4:	4a92      	ldr	r2, [pc, #584]	@ (80189f0 <tcp_process+0x5a0>)
 80187a6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80187a8:	8812      	ldrh	r2, [r2, #0]
 80187aa:	b292      	uxth	r2, r2
 80187ac:	9202      	str	r2, [sp, #8]
 80187ae:	9301      	str	r3, [sp, #4]
 80187b0:	4b90      	ldr	r3, [pc, #576]	@ (80189f4 <tcp_process+0x5a4>)
 80187b2:	9300      	str	r3, [sp, #0]
 80187b4:	4b90      	ldr	r3, [pc, #576]	@ (80189f8 <tcp_process+0x5a8>)
 80187b6:	4602      	mov	r2, r0
 80187b8:	6878      	ldr	r0, [r7, #4]
 80187ba:	f003 f995 	bl	801bae8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80187be:	687b      	ldr	r3, [r7, #4]
 80187c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80187c4:	2b05      	cmp	r3, #5
 80187c6:	f200 8215 	bhi.w	8018bf4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	2200      	movs	r2, #0
 80187ce:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 80187d0:	6878      	ldr	r0, [r7, #4]
 80187d2:	f002 ff57 	bl	801b684 <tcp_rexmit_rto>
      break;
 80187d6:	e20d      	b.n	8018bf4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80187d8:	4b81      	ldr	r3, [pc, #516]	@ (80189e0 <tcp_process+0x590>)
 80187da:	781b      	ldrb	r3, [r3, #0]
 80187dc:	f003 0310 	and.w	r3, r3, #16
 80187e0:	2b00      	cmp	r3, #0
 80187e2:	f000 80a1 	beq.w	8018928 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80187e6:	4b7f      	ldr	r3, [pc, #508]	@ (80189e4 <tcp_process+0x594>)
 80187e8:	681a      	ldr	r2, [r3, #0]
 80187ea:	687b      	ldr	r3, [r7, #4]
 80187ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80187ee:	1ad3      	subs	r3, r2, r3
 80187f0:	3b01      	subs	r3, #1
 80187f2:	2b00      	cmp	r3, #0
 80187f4:	db7e      	blt.n	80188f4 <tcp_process+0x4a4>
 80187f6:	4b7b      	ldr	r3, [pc, #492]	@ (80189e4 <tcp_process+0x594>)
 80187f8:	681a      	ldr	r2, [r3, #0]
 80187fa:	687b      	ldr	r3, [r7, #4]
 80187fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80187fe:	1ad3      	subs	r3, r2, r3
 8018800:	2b00      	cmp	r3, #0
 8018802:	dc77      	bgt.n	80188f4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	2204      	movs	r2, #4
 8018808:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801880a:	687b      	ldr	r3, [r7, #4]
 801880c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801880e:	2b00      	cmp	r3, #0
 8018810:	d102      	bne.n	8018818 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8018812:	23fa      	movs	r3, #250	@ 0xfa
 8018814:	77bb      	strb	r3, [r7, #30]
 8018816:	e01d      	b.n	8018854 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801881c:	699b      	ldr	r3, [r3, #24]
 801881e:	2b00      	cmp	r3, #0
 8018820:	d106      	bne.n	8018830 <tcp_process+0x3e0>
 8018822:	4b76      	ldr	r3, [pc, #472]	@ (80189fc <tcp_process+0x5ac>)
 8018824:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8018828:	4975      	ldr	r1, [pc, #468]	@ (8018a00 <tcp_process+0x5b0>)
 801882a:	4876      	ldr	r0, [pc, #472]	@ (8018a04 <tcp_process+0x5b4>)
 801882c:	f008 fc4a 	bl	80210c4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018834:	699b      	ldr	r3, [r3, #24]
 8018836:	2b00      	cmp	r3, #0
 8018838:	d00a      	beq.n	8018850 <tcp_process+0x400>
 801883a:	687b      	ldr	r3, [r7, #4]
 801883c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801883e:	699b      	ldr	r3, [r3, #24]
 8018840:	687a      	ldr	r2, [r7, #4]
 8018842:	6910      	ldr	r0, [r2, #16]
 8018844:	2200      	movs	r2, #0
 8018846:	6879      	ldr	r1, [r7, #4]
 8018848:	4798      	blx	r3
 801884a:	4603      	mov	r3, r0
 801884c:	77bb      	strb	r3, [r7, #30]
 801884e:	e001      	b.n	8018854 <tcp_process+0x404>
 8018850:	23f0      	movs	r3, #240	@ 0xf0
 8018852:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 8018854:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8018858:	2b00      	cmp	r3, #0
 801885a:	d00a      	beq.n	8018872 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801885c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8018860:	f113 0f0d 	cmn.w	r3, #13
 8018864:	d002      	beq.n	801886c <tcp_process+0x41c>
              tcp_abort(pcb);
 8018866:	6878      	ldr	r0, [r7, #4]
 8018868:	f7fd fd36 	bl	80162d8 <tcp_abort>
            }
            return ERR_ABRT;
 801886c:	f06f 030c 	mvn.w	r3, #12
 8018870:	e1ce      	b.n	8018c10 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8018872:	6878      	ldr	r0, [r7, #4]
 8018874:	f000 fae0 	bl	8018e38 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8018878:	4b63      	ldr	r3, [pc, #396]	@ (8018a08 <tcp_process+0x5b8>)
 801887a:	881b      	ldrh	r3, [r3, #0]
 801887c:	2b00      	cmp	r3, #0
 801887e:	d005      	beq.n	801888c <tcp_process+0x43c>
            recv_acked--;
 8018880:	4b61      	ldr	r3, [pc, #388]	@ (8018a08 <tcp_process+0x5b8>)
 8018882:	881b      	ldrh	r3, [r3, #0]
 8018884:	3b01      	subs	r3, #1
 8018886:	b29a      	uxth	r2, r3
 8018888:	4b5f      	ldr	r3, [pc, #380]	@ (8018a08 <tcp_process+0x5b8>)
 801888a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018890:	009a      	lsls	r2, r3, #2
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018896:	005b      	lsls	r3, r3, #1
 8018898:	f241 111c 	movw	r1, #4380	@ 0x111c
 801889c:	428b      	cmp	r3, r1
 801889e:	bf38      	it	cc
 80188a0:	460b      	movcc	r3, r1
 80188a2:	429a      	cmp	r2, r3
 80188a4:	d204      	bcs.n	80188b0 <tcp_process+0x460>
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80188aa:	009b      	lsls	r3, r3, #2
 80188ac:	b29b      	uxth	r3, r3
 80188ae:	e00d      	b.n	80188cc <tcp_process+0x47c>
 80188b0:	687b      	ldr	r3, [r7, #4]
 80188b2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80188b4:	005b      	lsls	r3, r3, #1
 80188b6:	f241 121c 	movw	r2, #4380	@ 0x111c
 80188ba:	4293      	cmp	r3, r2
 80188bc:	d904      	bls.n	80188c8 <tcp_process+0x478>
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80188c2:	005b      	lsls	r3, r3, #1
 80188c4:	b29b      	uxth	r3, r3
 80188c6:	e001      	b.n	80188cc <tcp_process+0x47c>
 80188c8:	f241 131c 	movw	r3, #4380	@ 0x111c
 80188cc:	687a      	ldr	r2, [r7, #4]
 80188ce:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80188d2:	4b4e      	ldr	r3, [pc, #312]	@ (8018a0c <tcp_process+0x5bc>)
 80188d4:	781b      	ldrb	r3, [r3, #0]
 80188d6:	f003 0320 	and.w	r3, r3, #32
 80188da:	2b00      	cmp	r3, #0
 80188dc:	d037      	beq.n	801894e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	8b5b      	ldrh	r3, [r3, #26]
 80188e2:	f043 0302 	orr.w	r3, r3, #2
 80188e6:	b29a      	uxth	r2, r3
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	2207      	movs	r2, #7
 80188f0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80188f2:	e02c      	b.n	801894e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80188f4:	4b3b      	ldr	r3, [pc, #236]	@ (80189e4 <tcp_process+0x594>)
 80188f6:	6819      	ldr	r1, [r3, #0]
 80188f8:	4b3b      	ldr	r3, [pc, #236]	@ (80189e8 <tcp_process+0x598>)
 80188fa:	881b      	ldrh	r3, [r3, #0]
 80188fc:	461a      	mov	r2, r3
 80188fe:	4b3b      	ldr	r3, [pc, #236]	@ (80189ec <tcp_process+0x59c>)
 8018900:	681b      	ldr	r3, [r3, #0]
 8018902:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018904:	4b3a      	ldr	r3, [pc, #232]	@ (80189f0 <tcp_process+0x5a0>)
 8018906:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018908:	885b      	ldrh	r3, [r3, #2]
 801890a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801890c:	4a38      	ldr	r2, [pc, #224]	@ (80189f0 <tcp_process+0x5a0>)
 801890e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018910:	8812      	ldrh	r2, [r2, #0]
 8018912:	b292      	uxth	r2, r2
 8018914:	9202      	str	r2, [sp, #8]
 8018916:	9301      	str	r3, [sp, #4]
 8018918:	4b36      	ldr	r3, [pc, #216]	@ (80189f4 <tcp_process+0x5a4>)
 801891a:	9300      	str	r3, [sp, #0]
 801891c:	4b36      	ldr	r3, [pc, #216]	@ (80189f8 <tcp_process+0x5a8>)
 801891e:	4602      	mov	r2, r0
 8018920:	6878      	ldr	r0, [r7, #4]
 8018922:	f003 f8e1 	bl	801bae8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8018926:	e167      	b.n	8018bf8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8018928:	4b2d      	ldr	r3, [pc, #180]	@ (80189e0 <tcp_process+0x590>)
 801892a:	781b      	ldrb	r3, [r3, #0]
 801892c:	f003 0302 	and.w	r3, r3, #2
 8018930:	2b00      	cmp	r3, #0
 8018932:	f000 8161 	beq.w	8018bf8 <tcp_process+0x7a8>
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801893a:	1e5a      	subs	r2, r3, #1
 801893c:	4b2b      	ldr	r3, [pc, #172]	@ (80189ec <tcp_process+0x59c>)
 801893e:	681b      	ldr	r3, [r3, #0]
 8018940:	429a      	cmp	r2, r3
 8018942:	f040 8159 	bne.w	8018bf8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8018946:	6878      	ldr	r0, [r7, #4]
 8018948:	f002 febe 	bl	801b6c8 <tcp_rexmit>
      break;
 801894c:	e154      	b.n	8018bf8 <tcp_process+0x7a8>
 801894e:	e153      	b.n	8018bf8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8018950:	6878      	ldr	r0, [r7, #4]
 8018952:	f000 fa71 	bl	8018e38 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8018956:	4b2d      	ldr	r3, [pc, #180]	@ (8018a0c <tcp_process+0x5bc>)
 8018958:	781b      	ldrb	r3, [r3, #0]
 801895a:	f003 0320 	and.w	r3, r3, #32
 801895e:	2b00      	cmp	r3, #0
 8018960:	f000 814c 	beq.w	8018bfc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	8b5b      	ldrh	r3, [r3, #26]
 8018968:	f043 0302 	orr.w	r3, r3, #2
 801896c:	b29a      	uxth	r2, r3
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8018972:	687b      	ldr	r3, [r7, #4]
 8018974:	2207      	movs	r2, #7
 8018976:	751a      	strb	r2, [r3, #20]
      }
      break;
 8018978:	e140      	b.n	8018bfc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801897a:	6878      	ldr	r0, [r7, #4]
 801897c:	f000 fa5c 	bl	8018e38 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8018980:	4b22      	ldr	r3, [pc, #136]	@ (8018a0c <tcp_process+0x5bc>)
 8018982:	781b      	ldrb	r3, [r3, #0]
 8018984:	f003 0320 	and.w	r3, r3, #32
 8018988:	2b00      	cmp	r3, #0
 801898a:	d071      	beq.n	8018a70 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801898c:	4b14      	ldr	r3, [pc, #80]	@ (80189e0 <tcp_process+0x590>)
 801898e:	781b      	ldrb	r3, [r3, #0]
 8018990:	f003 0310 	and.w	r3, r3, #16
 8018994:	2b00      	cmp	r3, #0
 8018996:	d060      	beq.n	8018a5a <tcp_process+0x60a>
 8018998:	687b      	ldr	r3, [r7, #4]
 801899a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801899c:	4b11      	ldr	r3, [pc, #68]	@ (80189e4 <tcp_process+0x594>)
 801899e:	681b      	ldr	r3, [r3, #0]
 80189a0:	429a      	cmp	r2, r3
 80189a2:	d15a      	bne.n	8018a5a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80189a8:	2b00      	cmp	r3, #0
 80189aa:	d156      	bne.n	8018a5a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	8b5b      	ldrh	r3, [r3, #26]
 80189b0:	f043 0302 	orr.w	r3, r3, #2
 80189b4:	b29a      	uxth	r2, r3
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80189ba:	6878      	ldr	r0, [r7, #4]
 80189bc:	f7fe fd50 	bl	8017460 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80189c0:	4b13      	ldr	r3, [pc, #76]	@ (8018a10 <tcp_process+0x5c0>)
 80189c2:	681b      	ldr	r3, [r3, #0]
 80189c4:	687a      	ldr	r2, [r7, #4]
 80189c6:	429a      	cmp	r2, r3
 80189c8:	d105      	bne.n	80189d6 <tcp_process+0x586>
 80189ca:	4b11      	ldr	r3, [pc, #68]	@ (8018a10 <tcp_process+0x5c0>)
 80189cc:	681b      	ldr	r3, [r3, #0]
 80189ce:	68db      	ldr	r3, [r3, #12]
 80189d0:	4a0f      	ldr	r2, [pc, #60]	@ (8018a10 <tcp_process+0x5c0>)
 80189d2:	6013      	str	r3, [r2, #0]
 80189d4:	e02e      	b.n	8018a34 <tcp_process+0x5e4>
 80189d6:	4b0e      	ldr	r3, [pc, #56]	@ (8018a10 <tcp_process+0x5c0>)
 80189d8:	681b      	ldr	r3, [r3, #0]
 80189da:	613b      	str	r3, [r7, #16]
 80189dc:	e027      	b.n	8018a2e <tcp_process+0x5de>
 80189de:	bf00      	nop
 80189e0:	20028460 	.word	0x20028460
 80189e4:	20028458 	.word	0x20028458
 80189e8:	2002845e 	.word	0x2002845e
 80189ec:	20028454 	.word	0x20028454
 80189f0:	20028444 	.word	0x20028444
 80189f4:	2001f888 	.word	0x2001f888
 80189f8:	2001f88c 	.word	0x2001f88c
 80189fc:	08024cb8 	.word	0x08024cb8
 8018a00:	08024f58 	.word	0x08024f58
 8018a04:	08024d04 	.word	0x08024d04
 8018a08:	2002845c 	.word	0x2002845c
 8018a0c:	20028461 	.word	0x20028461
 8018a10:	20028424 	.word	0x20028424
 8018a14:	693b      	ldr	r3, [r7, #16]
 8018a16:	68db      	ldr	r3, [r3, #12]
 8018a18:	687a      	ldr	r2, [r7, #4]
 8018a1a:	429a      	cmp	r2, r3
 8018a1c:	d104      	bne.n	8018a28 <tcp_process+0x5d8>
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	68da      	ldr	r2, [r3, #12]
 8018a22:	693b      	ldr	r3, [r7, #16]
 8018a24:	60da      	str	r2, [r3, #12]
 8018a26:	e005      	b.n	8018a34 <tcp_process+0x5e4>
 8018a28:	693b      	ldr	r3, [r7, #16]
 8018a2a:	68db      	ldr	r3, [r3, #12]
 8018a2c:	613b      	str	r3, [r7, #16]
 8018a2e:	693b      	ldr	r3, [r7, #16]
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	d1ef      	bne.n	8018a14 <tcp_process+0x5c4>
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	2200      	movs	r2, #0
 8018a38:	60da      	str	r2, [r3, #12]
 8018a3a:	4b77      	ldr	r3, [pc, #476]	@ (8018c18 <tcp_process+0x7c8>)
 8018a3c:	2201      	movs	r2, #1
 8018a3e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8018a40:	687b      	ldr	r3, [r7, #4]
 8018a42:	220a      	movs	r2, #10
 8018a44:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8018a46:	4b75      	ldr	r3, [pc, #468]	@ (8018c1c <tcp_process+0x7cc>)
 8018a48:	681a      	ldr	r2, [r3, #0]
 8018a4a:	687b      	ldr	r3, [r7, #4]
 8018a4c:	60da      	str	r2, [r3, #12]
 8018a4e:	4a73      	ldr	r2, [pc, #460]	@ (8018c1c <tcp_process+0x7cc>)
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	6013      	str	r3, [r2, #0]
 8018a54:	f003 fa0a 	bl	801be6c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8018a58:	e0d2      	b.n	8018c00 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8018a5a:	687b      	ldr	r3, [r7, #4]
 8018a5c:	8b5b      	ldrh	r3, [r3, #26]
 8018a5e:	f043 0302 	orr.w	r3, r3, #2
 8018a62:	b29a      	uxth	r2, r3
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8018a68:	687b      	ldr	r3, [r7, #4]
 8018a6a:	2208      	movs	r2, #8
 8018a6c:	751a      	strb	r2, [r3, #20]
      break;
 8018a6e:	e0c7      	b.n	8018c00 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018a70:	4b6b      	ldr	r3, [pc, #428]	@ (8018c20 <tcp_process+0x7d0>)
 8018a72:	781b      	ldrb	r3, [r3, #0]
 8018a74:	f003 0310 	and.w	r3, r3, #16
 8018a78:	2b00      	cmp	r3, #0
 8018a7a:	f000 80c1 	beq.w	8018c00 <tcp_process+0x7b0>
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018a82:	4b68      	ldr	r3, [pc, #416]	@ (8018c24 <tcp_process+0x7d4>)
 8018a84:	681b      	ldr	r3, [r3, #0]
 8018a86:	429a      	cmp	r2, r3
 8018a88:	f040 80ba 	bne.w	8018c00 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8018a8c:	687b      	ldr	r3, [r7, #4]
 8018a8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018a90:	2b00      	cmp	r3, #0
 8018a92:	f040 80b5 	bne.w	8018c00 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8018a96:	687b      	ldr	r3, [r7, #4]
 8018a98:	2206      	movs	r2, #6
 8018a9a:	751a      	strb	r2, [r3, #20]
      break;
 8018a9c:	e0b0      	b.n	8018c00 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8018a9e:	6878      	ldr	r0, [r7, #4]
 8018aa0:	f000 f9ca 	bl	8018e38 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8018aa4:	4b60      	ldr	r3, [pc, #384]	@ (8018c28 <tcp_process+0x7d8>)
 8018aa6:	781b      	ldrb	r3, [r3, #0]
 8018aa8:	f003 0320 	and.w	r3, r3, #32
 8018aac:	2b00      	cmp	r3, #0
 8018aae:	f000 80a9 	beq.w	8018c04 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8018ab2:	687b      	ldr	r3, [r7, #4]
 8018ab4:	8b5b      	ldrh	r3, [r3, #26]
 8018ab6:	f043 0302 	orr.w	r3, r3, #2
 8018aba:	b29a      	uxth	r2, r3
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8018ac0:	6878      	ldr	r0, [r7, #4]
 8018ac2:	f7fe fccd 	bl	8017460 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8018ac6:	4b59      	ldr	r3, [pc, #356]	@ (8018c2c <tcp_process+0x7dc>)
 8018ac8:	681b      	ldr	r3, [r3, #0]
 8018aca:	687a      	ldr	r2, [r7, #4]
 8018acc:	429a      	cmp	r2, r3
 8018ace:	d105      	bne.n	8018adc <tcp_process+0x68c>
 8018ad0:	4b56      	ldr	r3, [pc, #344]	@ (8018c2c <tcp_process+0x7dc>)
 8018ad2:	681b      	ldr	r3, [r3, #0]
 8018ad4:	68db      	ldr	r3, [r3, #12]
 8018ad6:	4a55      	ldr	r2, [pc, #340]	@ (8018c2c <tcp_process+0x7dc>)
 8018ad8:	6013      	str	r3, [r2, #0]
 8018ada:	e013      	b.n	8018b04 <tcp_process+0x6b4>
 8018adc:	4b53      	ldr	r3, [pc, #332]	@ (8018c2c <tcp_process+0x7dc>)
 8018ade:	681b      	ldr	r3, [r3, #0]
 8018ae0:	60fb      	str	r3, [r7, #12]
 8018ae2:	e00c      	b.n	8018afe <tcp_process+0x6ae>
 8018ae4:	68fb      	ldr	r3, [r7, #12]
 8018ae6:	68db      	ldr	r3, [r3, #12]
 8018ae8:	687a      	ldr	r2, [r7, #4]
 8018aea:	429a      	cmp	r2, r3
 8018aec:	d104      	bne.n	8018af8 <tcp_process+0x6a8>
 8018aee:	687b      	ldr	r3, [r7, #4]
 8018af0:	68da      	ldr	r2, [r3, #12]
 8018af2:	68fb      	ldr	r3, [r7, #12]
 8018af4:	60da      	str	r2, [r3, #12]
 8018af6:	e005      	b.n	8018b04 <tcp_process+0x6b4>
 8018af8:	68fb      	ldr	r3, [r7, #12]
 8018afa:	68db      	ldr	r3, [r3, #12]
 8018afc:	60fb      	str	r3, [r7, #12]
 8018afe:	68fb      	ldr	r3, [r7, #12]
 8018b00:	2b00      	cmp	r3, #0
 8018b02:	d1ef      	bne.n	8018ae4 <tcp_process+0x694>
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	2200      	movs	r2, #0
 8018b08:	60da      	str	r2, [r3, #12]
 8018b0a:	4b43      	ldr	r3, [pc, #268]	@ (8018c18 <tcp_process+0x7c8>)
 8018b0c:	2201      	movs	r2, #1
 8018b0e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8018b10:	687b      	ldr	r3, [r7, #4]
 8018b12:	220a      	movs	r2, #10
 8018b14:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8018b16:	4b41      	ldr	r3, [pc, #260]	@ (8018c1c <tcp_process+0x7cc>)
 8018b18:	681a      	ldr	r2, [r3, #0]
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	60da      	str	r2, [r3, #12]
 8018b1e:	4a3f      	ldr	r2, [pc, #252]	@ (8018c1c <tcp_process+0x7cc>)
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	6013      	str	r3, [r2, #0]
 8018b24:	f003 f9a2 	bl	801be6c <tcp_timer_needed>
      }
      break;
 8018b28:	e06c      	b.n	8018c04 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8018b2a:	6878      	ldr	r0, [r7, #4]
 8018b2c:	f000 f984 	bl	8018e38 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8018b30:	4b3b      	ldr	r3, [pc, #236]	@ (8018c20 <tcp_process+0x7d0>)
 8018b32:	781b      	ldrb	r3, [r3, #0]
 8018b34:	f003 0310 	and.w	r3, r3, #16
 8018b38:	2b00      	cmp	r3, #0
 8018b3a:	d065      	beq.n	8018c08 <tcp_process+0x7b8>
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018b40:	4b38      	ldr	r3, [pc, #224]	@ (8018c24 <tcp_process+0x7d4>)
 8018b42:	681b      	ldr	r3, [r3, #0]
 8018b44:	429a      	cmp	r2, r3
 8018b46:	d15f      	bne.n	8018c08 <tcp_process+0x7b8>
 8018b48:	687b      	ldr	r3, [r7, #4]
 8018b4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018b4c:	2b00      	cmp	r3, #0
 8018b4e:	d15b      	bne.n	8018c08 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8018b50:	6878      	ldr	r0, [r7, #4]
 8018b52:	f7fe fc85 	bl	8017460 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8018b56:	4b35      	ldr	r3, [pc, #212]	@ (8018c2c <tcp_process+0x7dc>)
 8018b58:	681b      	ldr	r3, [r3, #0]
 8018b5a:	687a      	ldr	r2, [r7, #4]
 8018b5c:	429a      	cmp	r2, r3
 8018b5e:	d105      	bne.n	8018b6c <tcp_process+0x71c>
 8018b60:	4b32      	ldr	r3, [pc, #200]	@ (8018c2c <tcp_process+0x7dc>)
 8018b62:	681b      	ldr	r3, [r3, #0]
 8018b64:	68db      	ldr	r3, [r3, #12]
 8018b66:	4a31      	ldr	r2, [pc, #196]	@ (8018c2c <tcp_process+0x7dc>)
 8018b68:	6013      	str	r3, [r2, #0]
 8018b6a:	e013      	b.n	8018b94 <tcp_process+0x744>
 8018b6c:	4b2f      	ldr	r3, [pc, #188]	@ (8018c2c <tcp_process+0x7dc>)
 8018b6e:	681b      	ldr	r3, [r3, #0]
 8018b70:	61bb      	str	r3, [r7, #24]
 8018b72:	e00c      	b.n	8018b8e <tcp_process+0x73e>
 8018b74:	69bb      	ldr	r3, [r7, #24]
 8018b76:	68db      	ldr	r3, [r3, #12]
 8018b78:	687a      	ldr	r2, [r7, #4]
 8018b7a:	429a      	cmp	r2, r3
 8018b7c:	d104      	bne.n	8018b88 <tcp_process+0x738>
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	68da      	ldr	r2, [r3, #12]
 8018b82:	69bb      	ldr	r3, [r7, #24]
 8018b84:	60da      	str	r2, [r3, #12]
 8018b86:	e005      	b.n	8018b94 <tcp_process+0x744>
 8018b88:	69bb      	ldr	r3, [r7, #24]
 8018b8a:	68db      	ldr	r3, [r3, #12]
 8018b8c:	61bb      	str	r3, [r7, #24]
 8018b8e:	69bb      	ldr	r3, [r7, #24]
 8018b90:	2b00      	cmp	r3, #0
 8018b92:	d1ef      	bne.n	8018b74 <tcp_process+0x724>
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	2200      	movs	r2, #0
 8018b98:	60da      	str	r2, [r3, #12]
 8018b9a:	4b1f      	ldr	r3, [pc, #124]	@ (8018c18 <tcp_process+0x7c8>)
 8018b9c:	2201      	movs	r2, #1
 8018b9e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8018ba0:	687b      	ldr	r3, [r7, #4]
 8018ba2:	220a      	movs	r2, #10
 8018ba4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8018ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8018c1c <tcp_process+0x7cc>)
 8018ba8:	681a      	ldr	r2, [r3, #0]
 8018baa:	687b      	ldr	r3, [r7, #4]
 8018bac:	60da      	str	r2, [r3, #12]
 8018bae:	4a1b      	ldr	r2, [pc, #108]	@ (8018c1c <tcp_process+0x7cc>)
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	6013      	str	r3, [r2, #0]
 8018bb4:	f003 f95a 	bl	801be6c <tcp_timer_needed>
      }
      break;
 8018bb8:	e026      	b.n	8018c08 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8018bba:	6878      	ldr	r0, [r7, #4]
 8018bbc:	f000 f93c 	bl	8018e38 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8018bc0:	4b17      	ldr	r3, [pc, #92]	@ (8018c20 <tcp_process+0x7d0>)
 8018bc2:	781b      	ldrb	r3, [r3, #0]
 8018bc4:	f003 0310 	and.w	r3, r3, #16
 8018bc8:	2b00      	cmp	r3, #0
 8018bca:	d01f      	beq.n	8018c0c <tcp_process+0x7bc>
 8018bcc:	687b      	ldr	r3, [r7, #4]
 8018bce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018bd0:	4b14      	ldr	r3, [pc, #80]	@ (8018c24 <tcp_process+0x7d4>)
 8018bd2:	681b      	ldr	r3, [r3, #0]
 8018bd4:	429a      	cmp	r2, r3
 8018bd6:	d119      	bne.n	8018c0c <tcp_process+0x7bc>
 8018bd8:	687b      	ldr	r3, [r7, #4]
 8018bda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018bdc:	2b00      	cmp	r3, #0
 8018bde:	d115      	bne.n	8018c0c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8018be0:	4b11      	ldr	r3, [pc, #68]	@ (8018c28 <tcp_process+0x7d8>)
 8018be2:	781b      	ldrb	r3, [r3, #0]
 8018be4:	f043 0310 	orr.w	r3, r3, #16
 8018be8:	b2da      	uxtb	r2, r3
 8018bea:	4b0f      	ldr	r3, [pc, #60]	@ (8018c28 <tcp_process+0x7d8>)
 8018bec:	701a      	strb	r2, [r3, #0]
      }
      break;
 8018bee:	e00d      	b.n	8018c0c <tcp_process+0x7bc>
    default:
      break;
 8018bf0:	bf00      	nop
 8018bf2:	e00c      	b.n	8018c0e <tcp_process+0x7be>
      break;
 8018bf4:	bf00      	nop
 8018bf6:	e00a      	b.n	8018c0e <tcp_process+0x7be>
      break;
 8018bf8:	bf00      	nop
 8018bfa:	e008      	b.n	8018c0e <tcp_process+0x7be>
      break;
 8018bfc:	bf00      	nop
 8018bfe:	e006      	b.n	8018c0e <tcp_process+0x7be>
      break;
 8018c00:	bf00      	nop
 8018c02:	e004      	b.n	8018c0e <tcp_process+0x7be>
      break;
 8018c04:	bf00      	nop
 8018c06:	e002      	b.n	8018c0e <tcp_process+0x7be>
      break;
 8018c08:	bf00      	nop
 8018c0a:	e000      	b.n	8018c0e <tcp_process+0x7be>
      break;
 8018c0c:	bf00      	nop
  }
  return ERR_OK;
 8018c0e:	2300      	movs	r3, #0
}
 8018c10:	4618      	mov	r0, r3
 8018c12:	3724      	adds	r7, #36	@ 0x24
 8018c14:	46bd      	mov	sp, r7
 8018c16:	bd90      	pop	{r4, r7, pc}
 8018c18:	2002842c 	.word	0x2002842c
 8018c1c:	20028428 	.word	0x20028428
 8018c20:	20028460 	.word	0x20028460
 8018c24:	20028458 	.word	0x20028458
 8018c28:	20028461 	.word	0x20028461
 8018c2c:	20028424 	.word	0x20028424

08018c30 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8018c30:	b590      	push	{r4, r7, lr}
 8018c32:	b085      	sub	sp, #20
 8018c34:	af00      	add	r7, sp, #0
 8018c36:	6078      	str	r0, [r7, #4]
 8018c38:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	2b00      	cmp	r3, #0
 8018c3e:	d106      	bne.n	8018c4e <tcp_oos_insert_segment+0x1e>
 8018c40:	4b3b      	ldr	r3, [pc, #236]	@ (8018d30 <tcp_oos_insert_segment+0x100>)
 8018c42:	f240 421f 	movw	r2, #1055	@ 0x41f
 8018c46:	493b      	ldr	r1, [pc, #236]	@ (8018d34 <tcp_oos_insert_segment+0x104>)
 8018c48:	483b      	ldr	r0, [pc, #236]	@ (8018d38 <tcp_oos_insert_segment+0x108>)
 8018c4a:	f008 fa3b 	bl	80210c4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	691b      	ldr	r3, [r3, #16]
 8018c52:	899b      	ldrh	r3, [r3, #12]
 8018c54:	b29b      	uxth	r3, r3
 8018c56:	4618      	mov	r0, r3
 8018c58:	f7fa fc1a 	bl	8013490 <lwip_htons>
 8018c5c:	4603      	mov	r3, r0
 8018c5e:	b2db      	uxtb	r3, r3
 8018c60:	f003 0301 	and.w	r3, r3, #1
 8018c64:	2b00      	cmp	r3, #0
 8018c66:	d028      	beq.n	8018cba <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8018c68:	6838      	ldr	r0, [r7, #0]
 8018c6a:	f7fe f8eb 	bl	8016e44 <tcp_segs_free>
    next = NULL;
 8018c6e:	2300      	movs	r3, #0
 8018c70:	603b      	str	r3, [r7, #0]
 8018c72:	e056      	b.n	8018d22 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8018c74:	683b      	ldr	r3, [r7, #0]
 8018c76:	691b      	ldr	r3, [r3, #16]
 8018c78:	899b      	ldrh	r3, [r3, #12]
 8018c7a:	b29b      	uxth	r3, r3
 8018c7c:	4618      	mov	r0, r3
 8018c7e:	f7fa fc07 	bl	8013490 <lwip_htons>
 8018c82:	4603      	mov	r3, r0
 8018c84:	b2db      	uxtb	r3, r3
 8018c86:	f003 0301 	and.w	r3, r3, #1
 8018c8a:	2b00      	cmp	r3, #0
 8018c8c:	d00d      	beq.n	8018caa <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	691b      	ldr	r3, [r3, #16]
 8018c92:	899b      	ldrh	r3, [r3, #12]
 8018c94:	b29c      	uxth	r4, r3
 8018c96:	2001      	movs	r0, #1
 8018c98:	f7fa fbfa 	bl	8013490 <lwip_htons>
 8018c9c:	4603      	mov	r3, r0
 8018c9e:	461a      	mov	r2, r3
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	691b      	ldr	r3, [r3, #16]
 8018ca4:	4322      	orrs	r2, r4
 8018ca6:	b292      	uxth	r2, r2
 8018ca8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8018caa:	683b      	ldr	r3, [r7, #0]
 8018cac:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8018cae:	683b      	ldr	r3, [r7, #0]
 8018cb0:	681b      	ldr	r3, [r3, #0]
 8018cb2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8018cb4:	68f8      	ldr	r0, [r7, #12]
 8018cb6:	f7fe f8da 	bl	8016e6e <tcp_seg_free>
    while (next &&
 8018cba:	683b      	ldr	r3, [r7, #0]
 8018cbc:	2b00      	cmp	r3, #0
 8018cbe:	d00e      	beq.n	8018cde <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	891b      	ldrh	r3, [r3, #8]
 8018cc4:	461a      	mov	r2, r3
 8018cc6:	4b1d      	ldr	r3, [pc, #116]	@ (8018d3c <tcp_oos_insert_segment+0x10c>)
 8018cc8:	681b      	ldr	r3, [r3, #0]
 8018cca:	441a      	add	r2, r3
 8018ccc:	683b      	ldr	r3, [r7, #0]
 8018cce:	691b      	ldr	r3, [r3, #16]
 8018cd0:	685b      	ldr	r3, [r3, #4]
 8018cd2:	6839      	ldr	r1, [r7, #0]
 8018cd4:	8909      	ldrh	r1, [r1, #8]
 8018cd6:	440b      	add	r3, r1
 8018cd8:	1ad3      	subs	r3, r2, r3
    while (next &&
 8018cda:	2b00      	cmp	r3, #0
 8018cdc:	daca      	bge.n	8018c74 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8018cde:	683b      	ldr	r3, [r7, #0]
 8018ce0:	2b00      	cmp	r3, #0
 8018ce2:	d01e      	beq.n	8018d22 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	891b      	ldrh	r3, [r3, #8]
 8018ce8:	461a      	mov	r2, r3
 8018cea:	4b14      	ldr	r3, [pc, #80]	@ (8018d3c <tcp_oos_insert_segment+0x10c>)
 8018cec:	681b      	ldr	r3, [r3, #0]
 8018cee:	441a      	add	r2, r3
 8018cf0:	683b      	ldr	r3, [r7, #0]
 8018cf2:	691b      	ldr	r3, [r3, #16]
 8018cf4:	685b      	ldr	r3, [r3, #4]
 8018cf6:	1ad3      	subs	r3, r2, r3
    if (next &&
 8018cf8:	2b00      	cmp	r3, #0
 8018cfa:	dd12      	ble.n	8018d22 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8018cfc:	683b      	ldr	r3, [r7, #0]
 8018cfe:	691b      	ldr	r3, [r3, #16]
 8018d00:	685b      	ldr	r3, [r3, #4]
 8018d02:	b29a      	uxth	r2, r3
 8018d04:	4b0d      	ldr	r3, [pc, #52]	@ (8018d3c <tcp_oos_insert_segment+0x10c>)
 8018d06:	681b      	ldr	r3, [r3, #0]
 8018d08:	b29b      	uxth	r3, r3
 8018d0a:	1ad3      	subs	r3, r2, r3
 8018d0c:	b29a      	uxth	r2, r3
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	685a      	ldr	r2, [r3, #4]
 8018d16:	687b      	ldr	r3, [r7, #4]
 8018d18:	891b      	ldrh	r3, [r3, #8]
 8018d1a:	4619      	mov	r1, r3
 8018d1c:	4610      	mov	r0, r2
 8018d1e:	f7fc f991 	bl	8015044 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8018d22:	687b      	ldr	r3, [r7, #4]
 8018d24:	683a      	ldr	r2, [r7, #0]
 8018d26:	601a      	str	r2, [r3, #0]
}
 8018d28:	bf00      	nop
 8018d2a:	3714      	adds	r7, #20
 8018d2c:	46bd      	mov	sp, r7
 8018d2e:	bd90      	pop	{r4, r7, pc}
 8018d30:	08024cb8 	.word	0x08024cb8
 8018d34:	08024f78 	.word	0x08024f78
 8018d38:	08024d04 	.word	0x08024d04
 8018d3c:	20028454 	.word	0x20028454

08018d40 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8018d40:	b5b0      	push	{r4, r5, r7, lr}
 8018d42:	b086      	sub	sp, #24
 8018d44:	af00      	add	r7, sp, #0
 8018d46:	60f8      	str	r0, [r7, #12]
 8018d48:	60b9      	str	r1, [r7, #8]
 8018d4a:	607a      	str	r2, [r7, #4]
 8018d4c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8018d4e:	e03e      	b.n	8018dce <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8018d50:	68bb      	ldr	r3, [r7, #8]
 8018d52:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8018d54:	68bb      	ldr	r3, [r7, #8]
 8018d56:	681b      	ldr	r3, [r3, #0]
 8018d58:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8018d5a:	697b      	ldr	r3, [r7, #20]
 8018d5c:	685b      	ldr	r3, [r3, #4]
 8018d5e:	4618      	mov	r0, r3
 8018d60:	f7fc fbb6 	bl	80154d0 <pbuf_clen>
 8018d64:	4603      	mov	r3, r0
 8018d66:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8018d68:	68fb      	ldr	r3, [r7, #12]
 8018d6a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018d6e:	8a7a      	ldrh	r2, [r7, #18]
 8018d70:	429a      	cmp	r2, r3
 8018d72:	d906      	bls.n	8018d82 <tcp_free_acked_segments+0x42>
 8018d74:	4b2a      	ldr	r3, [pc, #168]	@ (8018e20 <tcp_free_acked_segments+0xe0>)
 8018d76:	f240 4257 	movw	r2, #1111	@ 0x457
 8018d7a:	492a      	ldr	r1, [pc, #168]	@ (8018e24 <tcp_free_acked_segments+0xe4>)
 8018d7c:	482a      	ldr	r0, [pc, #168]	@ (8018e28 <tcp_free_acked_segments+0xe8>)
 8018d7e:	f008 f9a1 	bl	80210c4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8018d82:	68fb      	ldr	r3, [r7, #12]
 8018d84:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8018d88:	8a7b      	ldrh	r3, [r7, #18]
 8018d8a:	1ad3      	subs	r3, r2, r3
 8018d8c:	b29a      	uxth	r2, r3
 8018d8e:	68fb      	ldr	r3, [r7, #12]
 8018d90:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8018d94:	697b      	ldr	r3, [r7, #20]
 8018d96:	891a      	ldrh	r2, [r3, #8]
 8018d98:	4b24      	ldr	r3, [pc, #144]	@ (8018e2c <tcp_free_acked_segments+0xec>)
 8018d9a:	881b      	ldrh	r3, [r3, #0]
 8018d9c:	4413      	add	r3, r2
 8018d9e:	b29a      	uxth	r2, r3
 8018da0:	4b22      	ldr	r3, [pc, #136]	@ (8018e2c <tcp_free_acked_segments+0xec>)
 8018da2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8018da4:	6978      	ldr	r0, [r7, #20]
 8018da6:	f7fe f862 	bl	8016e6e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8018daa:	68fb      	ldr	r3, [r7, #12]
 8018dac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018db0:	2b00      	cmp	r3, #0
 8018db2:	d00c      	beq.n	8018dce <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8018db4:	68bb      	ldr	r3, [r7, #8]
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	d109      	bne.n	8018dce <tcp_free_acked_segments+0x8e>
 8018dba:	683b      	ldr	r3, [r7, #0]
 8018dbc:	2b00      	cmp	r3, #0
 8018dbe:	d106      	bne.n	8018dce <tcp_free_acked_segments+0x8e>
 8018dc0:	4b17      	ldr	r3, [pc, #92]	@ (8018e20 <tcp_free_acked_segments+0xe0>)
 8018dc2:	f240 4261 	movw	r2, #1121	@ 0x461
 8018dc6:	491a      	ldr	r1, [pc, #104]	@ (8018e30 <tcp_free_acked_segments+0xf0>)
 8018dc8:	4817      	ldr	r0, [pc, #92]	@ (8018e28 <tcp_free_acked_segments+0xe8>)
 8018dca:	f008 f97b 	bl	80210c4 <iprintf>
  while (seg_list != NULL &&
 8018dce:	68bb      	ldr	r3, [r7, #8]
 8018dd0:	2b00      	cmp	r3, #0
 8018dd2:	d020      	beq.n	8018e16 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8018dd4:	68bb      	ldr	r3, [r7, #8]
 8018dd6:	691b      	ldr	r3, [r3, #16]
 8018dd8:	685b      	ldr	r3, [r3, #4]
 8018dda:	4618      	mov	r0, r3
 8018ddc:	f7fa fb6e 	bl	80134bc <lwip_htonl>
 8018de0:	4604      	mov	r4, r0
 8018de2:	68bb      	ldr	r3, [r7, #8]
 8018de4:	891b      	ldrh	r3, [r3, #8]
 8018de6:	461d      	mov	r5, r3
 8018de8:	68bb      	ldr	r3, [r7, #8]
 8018dea:	691b      	ldr	r3, [r3, #16]
 8018dec:	899b      	ldrh	r3, [r3, #12]
 8018dee:	b29b      	uxth	r3, r3
 8018df0:	4618      	mov	r0, r3
 8018df2:	f7fa fb4d 	bl	8013490 <lwip_htons>
 8018df6:	4603      	mov	r3, r0
 8018df8:	b2db      	uxtb	r3, r3
 8018dfa:	f003 0303 	and.w	r3, r3, #3
 8018dfe:	2b00      	cmp	r3, #0
 8018e00:	d001      	beq.n	8018e06 <tcp_free_acked_segments+0xc6>
 8018e02:	2301      	movs	r3, #1
 8018e04:	e000      	b.n	8018e08 <tcp_free_acked_segments+0xc8>
 8018e06:	2300      	movs	r3, #0
 8018e08:	442b      	add	r3, r5
 8018e0a:	18e2      	adds	r2, r4, r3
 8018e0c:	4b09      	ldr	r3, [pc, #36]	@ (8018e34 <tcp_free_acked_segments+0xf4>)
 8018e0e:	681b      	ldr	r3, [r3, #0]
 8018e10:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8018e12:	2b00      	cmp	r3, #0
 8018e14:	dd9c      	ble.n	8018d50 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8018e16:	68bb      	ldr	r3, [r7, #8]
}
 8018e18:	4618      	mov	r0, r3
 8018e1a:	3718      	adds	r7, #24
 8018e1c:	46bd      	mov	sp, r7
 8018e1e:	bdb0      	pop	{r4, r5, r7, pc}
 8018e20:	08024cb8 	.word	0x08024cb8
 8018e24:	08024fa0 	.word	0x08024fa0
 8018e28:	08024d04 	.word	0x08024d04
 8018e2c:	2002845c 	.word	0x2002845c
 8018e30:	08024fc8 	.word	0x08024fc8
 8018e34:	20028458 	.word	0x20028458

08018e38 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8018e38:	b5b0      	push	{r4, r5, r7, lr}
 8018e3a:	b094      	sub	sp, #80	@ 0x50
 8018e3c:	af00      	add	r7, sp, #0
 8018e3e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8018e40:	2300      	movs	r3, #0
 8018e42:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	d106      	bne.n	8018e58 <tcp_receive+0x20>
 8018e4a:	4b91      	ldr	r3, [pc, #580]	@ (8019090 <tcp_receive+0x258>)
 8018e4c:	f240 427b 	movw	r2, #1147	@ 0x47b
 8018e50:	4990      	ldr	r1, [pc, #576]	@ (8019094 <tcp_receive+0x25c>)
 8018e52:	4891      	ldr	r0, [pc, #580]	@ (8019098 <tcp_receive+0x260>)
 8018e54:	f008 f936 	bl	80210c4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	7d1b      	ldrb	r3, [r3, #20]
 8018e5c:	2b03      	cmp	r3, #3
 8018e5e:	d806      	bhi.n	8018e6e <tcp_receive+0x36>
 8018e60:	4b8b      	ldr	r3, [pc, #556]	@ (8019090 <tcp_receive+0x258>)
 8018e62:	f240 427c 	movw	r2, #1148	@ 0x47c
 8018e66:	498d      	ldr	r1, [pc, #564]	@ (801909c <tcp_receive+0x264>)
 8018e68:	488b      	ldr	r0, [pc, #556]	@ (8019098 <tcp_receive+0x260>)
 8018e6a:	f008 f92b 	bl	80210c4 <iprintf>

  if (flags & TCP_ACK) {
 8018e6e:	4b8c      	ldr	r3, [pc, #560]	@ (80190a0 <tcp_receive+0x268>)
 8018e70:	781b      	ldrb	r3, [r3, #0]
 8018e72:	f003 0310 	and.w	r3, r3, #16
 8018e76:	2b00      	cmp	r3, #0
 8018e78:	f000 8264 	beq.w	8019344 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8018e7c:	687b      	ldr	r3, [r7, #4]
 8018e7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8018e82:	461a      	mov	r2, r3
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018e88:	4413      	add	r3, r2
 8018e8a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8018e90:	4b84      	ldr	r3, [pc, #528]	@ (80190a4 <tcp_receive+0x26c>)
 8018e92:	681b      	ldr	r3, [r3, #0]
 8018e94:	1ad3      	subs	r3, r2, r3
 8018e96:	2b00      	cmp	r3, #0
 8018e98:	db1b      	blt.n	8018ed2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8018e9e:	4b81      	ldr	r3, [pc, #516]	@ (80190a4 <tcp_receive+0x26c>)
 8018ea0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8018ea2:	429a      	cmp	r2, r3
 8018ea4:	d106      	bne.n	8018eb4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018eaa:	4b7f      	ldr	r3, [pc, #508]	@ (80190a8 <tcp_receive+0x270>)
 8018eac:	681b      	ldr	r3, [r3, #0]
 8018eae:	1ad3      	subs	r3, r2, r3
 8018eb0:	2b00      	cmp	r3, #0
 8018eb2:	db0e      	blt.n	8018ed2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8018eb4:	687b      	ldr	r3, [r7, #4]
 8018eb6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018eb8:	4b7b      	ldr	r3, [pc, #492]	@ (80190a8 <tcp_receive+0x270>)
 8018eba:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018ebc:	429a      	cmp	r2, r3
 8018ebe:	d125      	bne.n	8018f0c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8018ec0:	4b7a      	ldr	r3, [pc, #488]	@ (80190ac <tcp_receive+0x274>)
 8018ec2:	681b      	ldr	r3, [r3, #0]
 8018ec4:	89db      	ldrh	r3, [r3, #14]
 8018ec6:	b29a      	uxth	r2, r3
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8018ece:	429a      	cmp	r2, r3
 8018ed0:	d91c      	bls.n	8018f0c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8018ed2:	4b76      	ldr	r3, [pc, #472]	@ (80190ac <tcp_receive+0x274>)
 8018ed4:	681b      	ldr	r3, [r3, #0]
 8018ed6:	89db      	ldrh	r3, [r3, #14]
 8018ed8:	b29a      	uxth	r2, r3
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8018ee0:	687b      	ldr	r3, [r7, #4]
 8018ee2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8018ee6:	687b      	ldr	r3, [r7, #4]
 8018ee8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8018eec:	429a      	cmp	r2, r3
 8018eee:	d205      	bcs.n	8018efc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8018ef6:	687b      	ldr	r3, [r7, #4]
 8018ef8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8018efc:	4b69      	ldr	r3, [pc, #420]	@ (80190a4 <tcp_receive+0x26c>)
 8018efe:	681a      	ldr	r2, [r3, #0]
 8018f00:	687b      	ldr	r3, [r7, #4]
 8018f02:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8018f04:	4b68      	ldr	r3, [pc, #416]	@ (80190a8 <tcp_receive+0x270>)
 8018f06:	681a      	ldr	r2, [r3, #0]
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8018f0c:	4b66      	ldr	r3, [pc, #408]	@ (80190a8 <tcp_receive+0x270>)
 8018f0e:	681a      	ldr	r2, [r3, #0]
 8018f10:	687b      	ldr	r3, [r7, #4]
 8018f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018f14:	1ad3      	subs	r3, r2, r3
 8018f16:	2b00      	cmp	r3, #0
 8018f18:	dc58      	bgt.n	8018fcc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8018f1a:	4b65      	ldr	r3, [pc, #404]	@ (80190b0 <tcp_receive+0x278>)
 8018f1c:	881b      	ldrh	r3, [r3, #0]
 8018f1e:	2b00      	cmp	r3, #0
 8018f20:	d14b      	bne.n	8018fba <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018f26:	687a      	ldr	r2, [r7, #4]
 8018f28:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8018f2c:	4413      	add	r3, r2
 8018f2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018f30:	429a      	cmp	r2, r3
 8018f32:	d142      	bne.n	8018fba <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8018f3a:	2b00      	cmp	r3, #0
 8018f3c:	db3d      	blt.n	8018fba <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8018f3e:	687b      	ldr	r3, [r7, #4]
 8018f40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018f42:	4b59      	ldr	r3, [pc, #356]	@ (80190a8 <tcp_receive+0x270>)
 8018f44:	681b      	ldr	r3, [r3, #0]
 8018f46:	429a      	cmp	r2, r3
 8018f48:	d137      	bne.n	8018fba <tcp_receive+0x182>
              found_dupack = 1;
 8018f4a:	2301      	movs	r3, #1
 8018f4c:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8018f4e:	687b      	ldr	r3, [r7, #4]
 8018f50:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8018f54:	2bff      	cmp	r3, #255	@ 0xff
 8018f56:	d007      	beq.n	8018f68 <tcp_receive+0x130>
                ++pcb->dupacks;
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8018f5e:	3301      	adds	r3, #1
 8018f60:	b2da      	uxtb	r2, r3
 8018f62:	687b      	ldr	r3, [r7, #4]
 8018f64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8018f6e:	2b03      	cmp	r3, #3
 8018f70:	d91b      	bls.n	8018faa <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8018f72:	687b      	ldr	r3, [r7, #4]
 8018f74:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018f7c:	4413      	add	r3, r2
 8018f7e:	b29a      	uxth	r2, r3
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8018f86:	429a      	cmp	r2, r3
 8018f88:	d30a      	bcc.n	8018fa0 <tcp_receive+0x168>
 8018f8a:	687b      	ldr	r3, [r7, #4]
 8018f8c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018f94:	4413      	add	r3, r2
 8018f96:	b29a      	uxth	r2, r3
 8018f98:	687b      	ldr	r3, [r7, #4]
 8018f9a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8018f9e:	e004      	b.n	8018faa <tcp_receive+0x172>
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018fa6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8018faa:	687b      	ldr	r3, [r7, #4]
 8018fac:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8018fb0:	2b02      	cmp	r3, #2
 8018fb2:	d902      	bls.n	8018fba <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8018fb4:	6878      	ldr	r0, [r7, #4]
 8018fb6:	f002 fbf3 	bl	801b7a0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8018fba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018fbc:	2b00      	cmp	r3, #0
 8018fbe:	f040 8161 	bne.w	8019284 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	2200      	movs	r2, #0
 8018fc6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8018fca:	e15b      	b.n	8019284 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018fcc:	4b36      	ldr	r3, [pc, #216]	@ (80190a8 <tcp_receive+0x270>)
 8018fce:	681a      	ldr	r2, [r3, #0]
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018fd4:	1ad3      	subs	r3, r2, r3
 8018fd6:	3b01      	subs	r3, #1
 8018fd8:	2b00      	cmp	r3, #0
 8018fda:	f2c0 814e 	blt.w	801927a <tcp_receive+0x442>
 8018fde:	4b32      	ldr	r3, [pc, #200]	@ (80190a8 <tcp_receive+0x270>)
 8018fe0:	681a      	ldr	r2, [r3, #0]
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018fe6:	1ad3      	subs	r3, r2, r3
 8018fe8:	2b00      	cmp	r3, #0
 8018fea:	f300 8146 	bgt.w	801927a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	8b5b      	ldrh	r3, [r3, #26]
 8018ff2:	f003 0304 	and.w	r3, r3, #4
 8018ff6:	2b00      	cmp	r3, #0
 8018ff8:	d010      	beq.n	801901c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	8b5b      	ldrh	r3, [r3, #26]
 8018ffe:	f023 0304 	bic.w	r3, r3, #4
 8019002:	b29a      	uxth	r2, r3
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801900e:	687b      	ldr	r3, [r7, #4]
 8019010:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8019014:	687b      	ldr	r3, [r7, #4]
 8019016:	2200      	movs	r2, #0
 8019018:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801901c:	687b      	ldr	r3, [r7, #4]
 801901e:	2200      	movs	r2, #0
 8019020:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801902a:	10db      	asrs	r3, r3, #3
 801902c:	b21b      	sxth	r3, r3
 801902e:	b29a      	uxth	r2, r3
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8019036:	b29b      	uxth	r3, r3
 8019038:	4413      	add	r3, r2
 801903a:	b29b      	uxth	r3, r3
 801903c:	b21a      	sxth	r2, r3
 801903e:	687b      	ldr	r3, [r7, #4]
 8019040:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8019044:	4b18      	ldr	r3, [pc, #96]	@ (80190a8 <tcp_receive+0x270>)
 8019046:	681b      	ldr	r3, [r3, #0]
 8019048:	b29a      	uxth	r2, r3
 801904a:	687b      	ldr	r3, [r7, #4]
 801904c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801904e:	b29b      	uxth	r3, r3
 8019050:	1ad3      	subs	r3, r2, r3
 8019052:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8019054:	687b      	ldr	r3, [r7, #4]
 8019056:	2200      	movs	r2, #0
 8019058:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 801905c:	4b12      	ldr	r3, [pc, #72]	@ (80190a8 <tcp_receive+0x270>)
 801905e:	681a      	ldr	r2, [r3, #0]
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	7d1b      	ldrb	r3, [r3, #20]
 8019068:	2b03      	cmp	r3, #3
 801906a:	f240 8097 	bls.w	801919c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801907a:	429a      	cmp	r2, r3
 801907c:	d245      	bcs.n	801910a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801907e:	687b      	ldr	r3, [r7, #4]
 8019080:	8b5b      	ldrh	r3, [r3, #26]
 8019082:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8019086:	2b00      	cmp	r3, #0
 8019088:	d014      	beq.n	80190b4 <tcp_receive+0x27c>
 801908a:	2301      	movs	r3, #1
 801908c:	e013      	b.n	80190b6 <tcp_receive+0x27e>
 801908e:	bf00      	nop
 8019090:	08024cb8 	.word	0x08024cb8
 8019094:	08024fe8 	.word	0x08024fe8
 8019098:	08024d04 	.word	0x08024d04
 801909c:	08025004 	.word	0x08025004
 80190a0:	20028460 	.word	0x20028460
 80190a4:	20028454 	.word	0x20028454
 80190a8:	20028458 	.word	0x20028458
 80190ac:	20028444 	.word	0x20028444
 80190b0:	2002845e 	.word	0x2002845e
 80190b4:	2302      	movs	r3, #2
 80190b6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80190ba:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80190be:	b29a      	uxth	r2, r3
 80190c0:	687b      	ldr	r3, [r7, #4]
 80190c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80190c4:	fb12 f303 	smulbb	r3, r2, r3
 80190c8:	b29b      	uxth	r3, r3
 80190ca:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80190cc:	4293      	cmp	r3, r2
 80190ce:	bf28      	it	cs
 80190d0:	4613      	movcs	r3, r2
 80190d2:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80190d4:	687b      	ldr	r3, [r7, #4]
 80190d6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80190da:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80190dc:	4413      	add	r3, r2
 80190de:	b29a      	uxth	r2, r3
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80190e6:	429a      	cmp	r2, r3
 80190e8:	d309      	bcc.n	80190fe <tcp_receive+0x2c6>
 80190ea:	687b      	ldr	r3, [r7, #4]
 80190ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80190f0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80190f2:	4413      	add	r3, r2
 80190f4:	b29a      	uxth	r2, r3
 80190f6:	687b      	ldr	r3, [r7, #4]
 80190f8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80190fc:	e04e      	b.n	801919c <tcp_receive+0x364>
 80190fe:	687b      	ldr	r3, [r7, #4]
 8019100:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8019104:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8019108:	e048      	b.n	801919c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801910a:	687b      	ldr	r3, [r7, #4]
 801910c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8019110:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8019112:	4413      	add	r3, r2
 8019114:	b29a      	uxth	r2, r3
 8019116:	687b      	ldr	r3, [r7, #4]
 8019118:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801911c:	429a      	cmp	r2, r3
 801911e:	d309      	bcc.n	8019134 <tcp_receive+0x2fc>
 8019120:	687b      	ldr	r3, [r7, #4]
 8019122:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8019126:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8019128:	4413      	add	r3, r2
 801912a:	b29a      	uxth	r2, r3
 801912c:	687b      	ldr	r3, [r7, #4]
 801912e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8019132:	e004      	b.n	801913e <tcp_receive+0x306>
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801913a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801913e:	687b      	ldr	r3, [r7, #4]
 8019140:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8019144:	687b      	ldr	r3, [r7, #4]
 8019146:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801914a:	429a      	cmp	r2, r3
 801914c:	d326      	bcc.n	801919c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801914e:	687b      	ldr	r3, [r7, #4]
 8019150:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801915a:	1ad3      	subs	r3, r2, r3
 801915c:	b29a      	uxth	r2, r3
 801915e:	687b      	ldr	r3, [r7, #4]
 8019160:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801916a:	687b      	ldr	r3, [r7, #4]
 801916c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801916e:	4413      	add	r3, r2
 8019170:	b29a      	uxth	r2, r3
 8019172:	687b      	ldr	r3, [r7, #4]
 8019174:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8019178:	429a      	cmp	r2, r3
 801917a:	d30a      	bcc.n	8019192 <tcp_receive+0x35a>
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8019182:	687b      	ldr	r3, [r7, #4]
 8019184:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019186:	4413      	add	r3, r2
 8019188:	b29a      	uxth	r2, r3
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8019190:	e004      	b.n	801919c <tcp_receive+0x364>
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8019198:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801919c:	687b      	ldr	r3, [r7, #4]
 801919e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80191a4:	4a98      	ldr	r2, [pc, #608]	@ (8019408 <tcp_receive+0x5d0>)
 80191a6:	6878      	ldr	r0, [r7, #4]
 80191a8:	f7ff fdca 	bl	8018d40 <tcp_free_acked_segments>
 80191ac:	4602      	mov	r2, r0
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80191b2:	687b      	ldr	r3, [r7, #4]
 80191b4:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 80191b6:	687b      	ldr	r3, [r7, #4]
 80191b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80191ba:	4a94      	ldr	r2, [pc, #592]	@ (801940c <tcp_receive+0x5d4>)
 80191bc:	6878      	ldr	r0, [r7, #4]
 80191be:	f7ff fdbf 	bl	8018d40 <tcp_free_acked_segments>
 80191c2:	4602      	mov	r2, r0
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	d104      	bne.n	80191da <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80191d6:	861a      	strh	r2, [r3, #48]	@ 0x30
 80191d8:	e002      	b.n	80191e0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80191da:	687b      	ldr	r3, [r7, #4]
 80191dc:	2200      	movs	r2, #0
 80191de:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	2200      	movs	r2, #0
 80191e4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80191e6:	687b      	ldr	r3, [r7, #4]
 80191e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80191ea:	2b00      	cmp	r3, #0
 80191ec:	d103      	bne.n	80191f6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	2200      	movs	r2, #0
 80191f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80191f6:	687b      	ldr	r3, [r7, #4]
 80191f8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80191fc:	4b84      	ldr	r3, [pc, #528]	@ (8019410 <tcp_receive+0x5d8>)
 80191fe:	881b      	ldrh	r3, [r3, #0]
 8019200:	4413      	add	r3, r2
 8019202:	b29a      	uxth	r2, r3
 8019204:	687b      	ldr	r3, [r7, #4]
 8019206:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801920a:	687b      	ldr	r3, [r7, #4]
 801920c:	8b5b      	ldrh	r3, [r3, #26]
 801920e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8019212:	2b00      	cmp	r3, #0
 8019214:	d035      	beq.n	8019282 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8019216:	687b      	ldr	r3, [r7, #4]
 8019218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801921a:	2b00      	cmp	r3, #0
 801921c:	d118      	bne.n	8019250 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801921e:	687b      	ldr	r3, [r7, #4]
 8019220:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019222:	2b00      	cmp	r3, #0
 8019224:	d00c      	beq.n	8019240 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8019226:	687b      	ldr	r3, [r7, #4]
 8019228:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801922e:	691b      	ldr	r3, [r3, #16]
 8019230:	685b      	ldr	r3, [r3, #4]
 8019232:	4618      	mov	r0, r3
 8019234:	f7fa f942 	bl	80134bc <lwip_htonl>
 8019238:	4603      	mov	r3, r0
 801923a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801923c:	2b00      	cmp	r3, #0
 801923e:	dc20      	bgt.n	8019282 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8019240:	687b      	ldr	r3, [r7, #4]
 8019242:	8b5b      	ldrh	r3, [r3, #26]
 8019244:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8019248:	b29a      	uxth	r2, r3
 801924a:	687b      	ldr	r3, [r7, #4]
 801924c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801924e:	e018      	b.n	8019282 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019258:	691b      	ldr	r3, [r3, #16]
 801925a:	685b      	ldr	r3, [r3, #4]
 801925c:	4618      	mov	r0, r3
 801925e:	f7fa f92d 	bl	80134bc <lwip_htonl>
 8019262:	4603      	mov	r3, r0
 8019264:	1ae3      	subs	r3, r4, r3
 8019266:	2b00      	cmp	r3, #0
 8019268:	dc0b      	bgt.n	8019282 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801926a:	687b      	ldr	r3, [r7, #4]
 801926c:	8b5b      	ldrh	r3, [r3, #26]
 801926e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8019272:	b29a      	uxth	r2, r3
 8019274:	687b      	ldr	r3, [r7, #4]
 8019276:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019278:	e003      	b.n	8019282 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801927a:	6878      	ldr	r0, [r7, #4]
 801927c:	f002 fc86 	bl	801bb8c <tcp_send_empty_ack>
 8019280:	e000      	b.n	8019284 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019282:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8019284:	687b      	ldr	r3, [r7, #4]
 8019286:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019288:	2b00      	cmp	r3, #0
 801928a:	d05b      	beq.n	8019344 <tcp_receive+0x50c>
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019290:	4b60      	ldr	r3, [pc, #384]	@ (8019414 <tcp_receive+0x5dc>)
 8019292:	681b      	ldr	r3, [r3, #0]
 8019294:	1ad3      	subs	r3, r2, r3
 8019296:	2b00      	cmp	r3, #0
 8019298:	da54      	bge.n	8019344 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801929a:	4b5f      	ldr	r3, [pc, #380]	@ (8019418 <tcp_receive+0x5e0>)
 801929c:	681b      	ldr	r3, [r3, #0]
 801929e:	b29a      	uxth	r2, r3
 80192a0:	687b      	ldr	r3, [r7, #4]
 80192a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80192a4:	b29b      	uxth	r3, r3
 80192a6:	1ad3      	subs	r3, r2, r3
 80192a8:	b29b      	uxth	r3, r3
 80192aa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80192ae:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80192b2:	687b      	ldr	r3, [r7, #4]
 80192b4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80192b8:	10db      	asrs	r3, r3, #3
 80192ba:	b21b      	sxth	r3, r3
 80192bc:	b29b      	uxth	r3, r3
 80192be:	1ad3      	subs	r3, r2, r3
 80192c0:	b29b      	uxth	r3, r3
 80192c2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80192c6:	687b      	ldr	r3, [r7, #4]
 80192c8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80192cc:	b29a      	uxth	r2, r3
 80192ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80192d2:	4413      	add	r3, r2
 80192d4:	b29b      	uxth	r3, r3
 80192d6:	b21a      	sxth	r2, r3
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 80192dc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 80192e0:	2b00      	cmp	r3, #0
 80192e2:	da05      	bge.n	80192f0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80192e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80192e8:	425b      	negs	r3, r3
 80192ea:	b29b      	uxth	r3, r3
 80192ec:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80192f0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80192f4:	687b      	ldr	r3, [r7, #4]
 80192f6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80192fa:	109b      	asrs	r3, r3, #2
 80192fc:	b21b      	sxth	r3, r3
 80192fe:	b29b      	uxth	r3, r3
 8019300:	1ad3      	subs	r3, r2, r3
 8019302:	b29b      	uxth	r3, r3
 8019304:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8019308:	687b      	ldr	r3, [r7, #4]
 801930a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801930e:	b29a      	uxth	r2, r3
 8019310:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8019314:	4413      	add	r3, r2
 8019316:	b29b      	uxth	r3, r3
 8019318:	b21a      	sxth	r2, r3
 801931a:	687b      	ldr	r3, [r7, #4]
 801931c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8019324:	10db      	asrs	r3, r3, #3
 8019326:	b21b      	sxth	r3, r3
 8019328:	b29a      	uxth	r2, r3
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8019330:	b29b      	uxth	r3, r3
 8019332:	4413      	add	r3, r2
 8019334:	b29b      	uxth	r3, r3
 8019336:	b21a      	sxth	r2, r3
 8019338:	687b      	ldr	r3, [r7, #4]
 801933a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801933e:	687b      	ldr	r3, [r7, #4]
 8019340:	2200      	movs	r2, #0
 8019342:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8019344:	4b35      	ldr	r3, [pc, #212]	@ (801941c <tcp_receive+0x5e4>)
 8019346:	881b      	ldrh	r3, [r3, #0]
 8019348:	2b00      	cmp	r3, #0
 801934a:	f000 84df 	beq.w	8019d0c <tcp_receive+0xed4>
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	7d1b      	ldrb	r3, [r3, #20]
 8019352:	2b06      	cmp	r3, #6
 8019354:	f200 84da 	bhi.w	8019d0c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8019358:	687b      	ldr	r3, [r7, #4]
 801935a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801935c:	4b30      	ldr	r3, [pc, #192]	@ (8019420 <tcp_receive+0x5e8>)
 801935e:	681b      	ldr	r3, [r3, #0]
 8019360:	1ad3      	subs	r3, r2, r3
 8019362:	3b01      	subs	r3, #1
 8019364:	2b00      	cmp	r3, #0
 8019366:	f2c0 808f 	blt.w	8019488 <tcp_receive+0x650>
 801936a:	687b      	ldr	r3, [r7, #4]
 801936c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801936e:	4b2b      	ldr	r3, [pc, #172]	@ (801941c <tcp_receive+0x5e4>)
 8019370:	881b      	ldrh	r3, [r3, #0]
 8019372:	4619      	mov	r1, r3
 8019374:	4b2a      	ldr	r3, [pc, #168]	@ (8019420 <tcp_receive+0x5e8>)
 8019376:	681b      	ldr	r3, [r3, #0]
 8019378:	440b      	add	r3, r1
 801937a:	1ad3      	subs	r3, r2, r3
 801937c:	3301      	adds	r3, #1
 801937e:	2b00      	cmp	r3, #0
 8019380:	f300 8082 	bgt.w	8019488 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8019384:	4b27      	ldr	r3, [pc, #156]	@ (8019424 <tcp_receive+0x5ec>)
 8019386:	685b      	ldr	r3, [r3, #4]
 8019388:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801938e:	4b24      	ldr	r3, [pc, #144]	@ (8019420 <tcp_receive+0x5e8>)
 8019390:	681b      	ldr	r3, [r3, #0]
 8019392:	1ad3      	subs	r3, r2, r3
 8019394:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8019396:	4b23      	ldr	r3, [pc, #140]	@ (8019424 <tcp_receive+0x5ec>)
 8019398:	685b      	ldr	r3, [r3, #4]
 801939a:	2b00      	cmp	r3, #0
 801939c:	d106      	bne.n	80193ac <tcp_receive+0x574>
 801939e:	4b22      	ldr	r3, [pc, #136]	@ (8019428 <tcp_receive+0x5f0>)
 80193a0:	f240 5294 	movw	r2, #1428	@ 0x594
 80193a4:	4921      	ldr	r1, [pc, #132]	@ (801942c <tcp_receive+0x5f4>)
 80193a6:	4822      	ldr	r0, [pc, #136]	@ (8019430 <tcp_receive+0x5f8>)
 80193a8:	f007 fe8c 	bl	80210c4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80193ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193ae:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80193b2:	4293      	cmp	r3, r2
 80193b4:	d906      	bls.n	80193c4 <tcp_receive+0x58c>
 80193b6:	4b1c      	ldr	r3, [pc, #112]	@ (8019428 <tcp_receive+0x5f0>)
 80193b8:	f240 5295 	movw	r2, #1429	@ 0x595
 80193bc:	491d      	ldr	r1, [pc, #116]	@ (8019434 <tcp_receive+0x5fc>)
 80193be:	481c      	ldr	r0, [pc, #112]	@ (8019430 <tcp_receive+0x5f8>)
 80193c0:	f007 fe80 	bl	80210c4 <iprintf>
      off = (u16_t)off32;
 80193c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193c6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80193ca:	4b16      	ldr	r3, [pc, #88]	@ (8019424 <tcp_receive+0x5ec>)
 80193cc:	685b      	ldr	r3, [r3, #4]
 80193ce:	891b      	ldrh	r3, [r3, #8]
 80193d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80193d4:	429a      	cmp	r2, r3
 80193d6:	d906      	bls.n	80193e6 <tcp_receive+0x5ae>
 80193d8:	4b13      	ldr	r3, [pc, #76]	@ (8019428 <tcp_receive+0x5f0>)
 80193da:	f240 5297 	movw	r2, #1431	@ 0x597
 80193de:	4916      	ldr	r1, [pc, #88]	@ (8019438 <tcp_receive+0x600>)
 80193e0:	4813      	ldr	r0, [pc, #76]	@ (8019430 <tcp_receive+0x5f8>)
 80193e2:	f007 fe6f 	bl	80210c4 <iprintf>
      inseg.len -= off;
 80193e6:	4b0f      	ldr	r3, [pc, #60]	@ (8019424 <tcp_receive+0x5ec>)
 80193e8:	891a      	ldrh	r2, [r3, #8]
 80193ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80193ee:	1ad3      	subs	r3, r2, r3
 80193f0:	b29a      	uxth	r2, r3
 80193f2:	4b0c      	ldr	r3, [pc, #48]	@ (8019424 <tcp_receive+0x5ec>)
 80193f4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80193f6:	4b0b      	ldr	r3, [pc, #44]	@ (8019424 <tcp_receive+0x5ec>)
 80193f8:	685b      	ldr	r3, [r3, #4]
 80193fa:	891a      	ldrh	r2, [r3, #8]
 80193fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019400:	1ad3      	subs	r3, r2, r3
 8019402:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8019404:	e02a      	b.n	801945c <tcp_receive+0x624>
 8019406:	bf00      	nop
 8019408:	08025020 	.word	0x08025020
 801940c:	08025028 	.word	0x08025028
 8019410:	2002845c 	.word	0x2002845c
 8019414:	20028458 	.word	0x20028458
 8019418:	20028418 	.word	0x20028418
 801941c:	2002845e 	.word	0x2002845e
 8019420:	20028454 	.word	0x20028454
 8019424:	20028430 	.word	0x20028430
 8019428:	08024cb8 	.word	0x08024cb8
 801942c:	08025030 	.word	0x08025030
 8019430:	08024d04 	.word	0x08024d04
 8019434:	08025040 	.word	0x08025040
 8019438:	08025050 	.word	0x08025050
        off -= p->len;
 801943c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801943e:	895b      	ldrh	r3, [r3, #10]
 8019440:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019444:	1ad3      	subs	r3, r2, r3
 8019446:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801944a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801944c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801944e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8019450:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019452:	2200      	movs	r2, #0
 8019454:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8019456:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019458:	681b      	ldr	r3, [r3, #0]
 801945a:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 801945c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801945e:	895b      	ldrh	r3, [r3, #10]
 8019460:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019464:	429a      	cmp	r2, r3
 8019466:	d8e9      	bhi.n	801943c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8019468:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801946c:	4619      	mov	r1, r3
 801946e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8019470:	f7fb fefa 	bl	8015268 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8019474:	687b      	ldr	r3, [r7, #4]
 8019476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019478:	4a90      	ldr	r2, [pc, #576]	@ (80196bc <tcp_receive+0x884>)
 801947a:	6013      	str	r3, [r2, #0]
 801947c:	4b90      	ldr	r3, [pc, #576]	@ (80196c0 <tcp_receive+0x888>)
 801947e:	691b      	ldr	r3, [r3, #16]
 8019480:	4a8e      	ldr	r2, [pc, #568]	@ (80196bc <tcp_receive+0x884>)
 8019482:	6812      	ldr	r2, [r2, #0]
 8019484:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8019486:	e00d      	b.n	80194a4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8019488:	4b8c      	ldr	r3, [pc, #560]	@ (80196bc <tcp_receive+0x884>)
 801948a:	681a      	ldr	r2, [r3, #0]
 801948c:	687b      	ldr	r3, [r7, #4]
 801948e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019490:	1ad3      	subs	r3, r2, r3
 8019492:	2b00      	cmp	r3, #0
 8019494:	da06      	bge.n	80194a4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8019496:	687b      	ldr	r3, [r7, #4]
 8019498:	8b5b      	ldrh	r3, [r3, #26]
 801949a:	f043 0302 	orr.w	r3, r3, #2
 801949e:	b29a      	uxth	r2, r3
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80194a4:	4b85      	ldr	r3, [pc, #532]	@ (80196bc <tcp_receive+0x884>)
 80194a6:	681a      	ldr	r2, [r3, #0]
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80194ac:	1ad3      	subs	r3, r2, r3
 80194ae:	2b00      	cmp	r3, #0
 80194b0:	f2c0 8427 	blt.w	8019d02 <tcp_receive+0xeca>
 80194b4:	4b81      	ldr	r3, [pc, #516]	@ (80196bc <tcp_receive+0x884>)
 80194b6:	681a      	ldr	r2, [r3, #0]
 80194b8:	687b      	ldr	r3, [r7, #4]
 80194ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80194bc:	6879      	ldr	r1, [r7, #4]
 80194be:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80194c0:	440b      	add	r3, r1
 80194c2:	1ad3      	subs	r3, r2, r3
 80194c4:	3301      	adds	r3, #1
 80194c6:	2b00      	cmp	r3, #0
 80194c8:	f300 841b 	bgt.w	8019d02 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80194d0:	4b7a      	ldr	r3, [pc, #488]	@ (80196bc <tcp_receive+0x884>)
 80194d2:	681b      	ldr	r3, [r3, #0]
 80194d4:	429a      	cmp	r2, r3
 80194d6:	f040 8298 	bne.w	8019a0a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80194da:	4b79      	ldr	r3, [pc, #484]	@ (80196c0 <tcp_receive+0x888>)
 80194dc:	891c      	ldrh	r4, [r3, #8]
 80194de:	4b78      	ldr	r3, [pc, #480]	@ (80196c0 <tcp_receive+0x888>)
 80194e0:	691b      	ldr	r3, [r3, #16]
 80194e2:	899b      	ldrh	r3, [r3, #12]
 80194e4:	b29b      	uxth	r3, r3
 80194e6:	4618      	mov	r0, r3
 80194e8:	f7f9 ffd2 	bl	8013490 <lwip_htons>
 80194ec:	4603      	mov	r3, r0
 80194ee:	b2db      	uxtb	r3, r3
 80194f0:	f003 0303 	and.w	r3, r3, #3
 80194f4:	2b00      	cmp	r3, #0
 80194f6:	d001      	beq.n	80194fc <tcp_receive+0x6c4>
 80194f8:	2301      	movs	r3, #1
 80194fa:	e000      	b.n	80194fe <tcp_receive+0x6c6>
 80194fc:	2300      	movs	r3, #0
 80194fe:	4423      	add	r3, r4
 8019500:	b29a      	uxth	r2, r3
 8019502:	4b70      	ldr	r3, [pc, #448]	@ (80196c4 <tcp_receive+0x88c>)
 8019504:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8019506:	687b      	ldr	r3, [r7, #4]
 8019508:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801950a:	4b6e      	ldr	r3, [pc, #440]	@ (80196c4 <tcp_receive+0x88c>)
 801950c:	881b      	ldrh	r3, [r3, #0]
 801950e:	429a      	cmp	r2, r3
 8019510:	d274      	bcs.n	80195fc <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019512:	4b6b      	ldr	r3, [pc, #428]	@ (80196c0 <tcp_receive+0x888>)
 8019514:	691b      	ldr	r3, [r3, #16]
 8019516:	899b      	ldrh	r3, [r3, #12]
 8019518:	b29b      	uxth	r3, r3
 801951a:	4618      	mov	r0, r3
 801951c:	f7f9 ffb8 	bl	8013490 <lwip_htons>
 8019520:	4603      	mov	r3, r0
 8019522:	b2db      	uxtb	r3, r3
 8019524:	f003 0301 	and.w	r3, r3, #1
 8019528:	2b00      	cmp	r3, #0
 801952a:	d01e      	beq.n	801956a <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801952c:	4b64      	ldr	r3, [pc, #400]	@ (80196c0 <tcp_receive+0x888>)
 801952e:	691b      	ldr	r3, [r3, #16]
 8019530:	899b      	ldrh	r3, [r3, #12]
 8019532:	b29b      	uxth	r3, r3
 8019534:	b21b      	sxth	r3, r3
 8019536:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801953a:	b21c      	sxth	r4, r3
 801953c:	4b60      	ldr	r3, [pc, #384]	@ (80196c0 <tcp_receive+0x888>)
 801953e:	691b      	ldr	r3, [r3, #16]
 8019540:	899b      	ldrh	r3, [r3, #12]
 8019542:	b29b      	uxth	r3, r3
 8019544:	4618      	mov	r0, r3
 8019546:	f7f9 ffa3 	bl	8013490 <lwip_htons>
 801954a:	4603      	mov	r3, r0
 801954c:	b2db      	uxtb	r3, r3
 801954e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8019552:	b29b      	uxth	r3, r3
 8019554:	4618      	mov	r0, r3
 8019556:	f7f9 ff9b 	bl	8013490 <lwip_htons>
 801955a:	4603      	mov	r3, r0
 801955c:	b21b      	sxth	r3, r3
 801955e:	4323      	orrs	r3, r4
 8019560:	b21a      	sxth	r2, r3
 8019562:	4b57      	ldr	r3, [pc, #348]	@ (80196c0 <tcp_receive+0x888>)
 8019564:	691b      	ldr	r3, [r3, #16]
 8019566:	b292      	uxth	r2, r2
 8019568:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801956a:	687b      	ldr	r3, [r7, #4]
 801956c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801956e:	4b54      	ldr	r3, [pc, #336]	@ (80196c0 <tcp_receive+0x888>)
 8019570:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8019572:	4b53      	ldr	r3, [pc, #332]	@ (80196c0 <tcp_receive+0x888>)
 8019574:	691b      	ldr	r3, [r3, #16]
 8019576:	899b      	ldrh	r3, [r3, #12]
 8019578:	b29b      	uxth	r3, r3
 801957a:	4618      	mov	r0, r3
 801957c:	f7f9 ff88 	bl	8013490 <lwip_htons>
 8019580:	4603      	mov	r3, r0
 8019582:	b2db      	uxtb	r3, r3
 8019584:	f003 0302 	and.w	r3, r3, #2
 8019588:	2b00      	cmp	r3, #0
 801958a:	d005      	beq.n	8019598 <tcp_receive+0x760>
            inseg.len -= 1;
 801958c:	4b4c      	ldr	r3, [pc, #304]	@ (80196c0 <tcp_receive+0x888>)
 801958e:	891b      	ldrh	r3, [r3, #8]
 8019590:	3b01      	subs	r3, #1
 8019592:	b29a      	uxth	r2, r3
 8019594:	4b4a      	ldr	r3, [pc, #296]	@ (80196c0 <tcp_receive+0x888>)
 8019596:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8019598:	4b49      	ldr	r3, [pc, #292]	@ (80196c0 <tcp_receive+0x888>)
 801959a:	685b      	ldr	r3, [r3, #4]
 801959c:	4a48      	ldr	r2, [pc, #288]	@ (80196c0 <tcp_receive+0x888>)
 801959e:	8912      	ldrh	r2, [r2, #8]
 80195a0:	4611      	mov	r1, r2
 80195a2:	4618      	mov	r0, r3
 80195a4:	f7fb fd4e 	bl	8015044 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80195a8:	4b45      	ldr	r3, [pc, #276]	@ (80196c0 <tcp_receive+0x888>)
 80195aa:	891c      	ldrh	r4, [r3, #8]
 80195ac:	4b44      	ldr	r3, [pc, #272]	@ (80196c0 <tcp_receive+0x888>)
 80195ae:	691b      	ldr	r3, [r3, #16]
 80195b0:	899b      	ldrh	r3, [r3, #12]
 80195b2:	b29b      	uxth	r3, r3
 80195b4:	4618      	mov	r0, r3
 80195b6:	f7f9 ff6b 	bl	8013490 <lwip_htons>
 80195ba:	4603      	mov	r3, r0
 80195bc:	b2db      	uxtb	r3, r3
 80195be:	f003 0303 	and.w	r3, r3, #3
 80195c2:	2b00      	cmp	r3, #0
 80195c4:	d001      	beq.n	80195ca <tcp_receive+0x792>
 80195c6:	2301      	movs	r3, #1
 80195c8:	e000      	b.n	80195cc <tcp_receive+0x794>
 80195ca:	2300      	movs	r3, #0
 80195cc:	4423      	add	r3, r4
 80195ce:	b29a      	uxth	r2, r3
 80195d0:	4b3c      	ldr	r3, [pc, #240]	@ (80196c4 <tcp_receive+0x88c>)
 80195d2:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80195d4:	4b3b      	ldr	r3, [pc, #236]	@ (80196c4 <tcp_receive+0x88c>)
 80195d6:	881b      	ldrh	r3, [r3, #0]
 80195d8:	461a      	mov	r2, r3
 80195da:	4b38      	ldr	r3, [pc, #224]	@ (80196bc <tcp_receive+0x884>)
 80195dc:	681b      	ldr	r3, [r3, #0]
 80195de:	441a      	add	r2, r3
 80195e0:	687b      	ldr	r3, [r7, #4]
 80195e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80195e4:	6879      	ldr	r1, [r7, #4]
 80195e6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80195e8:	440b      	add	r3, r1
 80195ea:	429a      	cmp	r2, r3
 80195ec:	d006      	beq.n	80195fc <tcp_receive+0x7c4>
 80195ee:	4b36      	ldr	r3, [pc, #216]	@ (80196c8 <tcp_receive+0x890>)
 80195f0:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 80195f4:	4935      	ldr	r1, [pc, #212]	@ (80196cc <tcp_receive+0x894>)
 80195f6:	4836      	ldr	r0, [pc, #216]	@ (80196d0 <tcp_receive+0x898>)
 80195f8:	f007 fd64 	bl	80210c4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80195fc:	687b      	ldr	r3, [r7, #4]
 80195fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019600:	2b00      	cmp	r3, #0
 8019602:	f000 80e6 	beq.w	80197d2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019606:	4b2e      	ldr	r3, [pc, #184]	@ (80196c0 <tcp_receive+0x888>)
 8019608:	691b      	ldr	r3, [r3, #16]
 801960a:	899b      	ldrh	r3, [r3, #12]
 801960c:	b29b      	uxth	r3, r3
 801960e:	4618      	mov	r0, r3
 8019610:	f7f9 ff3e 	bl	8013490 <lwip_htons>
 8019614:	4603      	mov	r3, r0
 8019616:	b2db      	uxtb	r3, r3
 8019618:	f003 0301 	and.w	r3, r3, #1
 801961c:	2b00      	cmp	r3, #0
 801961e:	d010      	beq.n	8019642 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8019620:	e00a      	b.n	8019638 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019626:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801962c:	681a      	ldr	r2, [r3, #0]
 801962e:	687b      	ldr	r3, [r7, #4]
 8019630:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8019632:	68f8      	ldr	r0, [r7, #12]
 8019634:	f7fd fc1b 	bl	8016e6e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8019638:	687b      	ldr	r3, [r7, #4]
 801963a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801963c:	2b00      	cmp	r3, #0
 801963e:	d1f0      	bne.n	8019622 <tcp_receive+0x7ea>
 8019640:	e0c7      	b.n	80197d2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8019642:	687b      	ldr	r3, [r7, #4]
 8019644:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019646:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8019648:	e051      	b.n	80196ee <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801964a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801964c:	691b      	ldr	r3, [r3, #16]
 801964e:	899b      	ldrh	r3, [r3, #12]
 8019650:	b29b      	uxth	r3, r3
 8019652:	4618      	mov	r0, r3
 8019654:	f7f9 ff1c 	bl	8013490 <lwip_htons>
 8019658:	4603      	mov	r3, r0
 801965a:	b2db      	uxtb	r3, r3
 801965c:	f003 0301 	and.w	r3, r3, #1
 8019660:	2b00      	cmp	r3, #0
 8019662:	d03c      	beq.n	80196de <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8019664:	4b16      	ldr	r3, [pc, #88]	@ (80196c0 <tcp_receive+0x888>)
 8019666:	691b      	ldr	r3, [r3, #16]
 8019668:	899b      	ldrh	r3, [r3, #12]
 801966a:	b29b      	uxth	r3, r3
 801966c:	4618      	mov	r0, r3
 801966e:	f7f9 ff0f 	bl	8013490 <lwip_htons>
 8019672:	4603      	mov	r3, r0
 8019674:	b2db      	uxtb	r3, r3
 8019676:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801967a:	2b00      	cmp	r3, #0
 801967c:	d12f      	bne.n	80196de <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801967e:	4b10      	ldr	r3, [pc, #64]	@ (80196c0 <tcp_receive+0x888>)
 8019680:	691b      	ldr	r3, [r3, #16]
 8019682:	899b      	ldrh	r3, [r3, #12]
 8019684:	b29c      	uxth	r4, r3
 8019686:	2001      	movs	r0, #1
 8019688:	f7f9 ff02 	bl	8013490 <lwip_htons>
 801968c:	4603      	mov	r3, r0
 801968e:	461a      	mov	r2, r3
 8019690:	4b0b      	ldr	r3, [pc, #44]	@ (80196c0 <tcp_receive+0x888>)
 8019692:	691b      	ldr	r3, [r3, #16]
 8019694:	4322      	orrs	r2, r4
 8019696:	b292      	uxth	r2, r2
 8019698:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801969a:	4b09      	ldr	r3, [pc, #36]	@ (80196c0 <tcp_receive+0x888>)
 801969c:	891c      	ldrh	r4, [r3, #8]
 801969e:	4b08      	ldr	r3, [pc, #32]	@ (80196c0 <tcp_receive+0x888>)
 80196a0:	691b      	ldr	r3, [r3, #16]
 80196a2:	899b      	ldrh	r3, [r3, #12]
 80196a4:	b29b      	uxth	r3, r3
 80196a6:	4618      	mov	r0, r3
 80196a8:	f7f9 fef2 	bl	8013490 <lwip_htons>
 80196ac:	4603      	mov	r3, r0
 80196ae:	b2db      	uxtb	r3, r3
 80196b0:	f003 0303 	and.w	r3, r3, #3
 80196b4:	2b00      	cmp	r3, #0
 80196b6:	d00d      	beq.n	80196d4 <tcp_receive+0x89c>
 80196b8:	2301      	movs	r3, #1
 80196ba:	e00c      	b.n	80196d6 <tcp_receive+0x89e>
 80196bc:	20028454 	.word	0x20028454
 80196c0:	20028430 	.word	0x20028430
 80196c4:	2002845e 	.word	0x2002845e
 80196c8:	08024cb8 	.word	0x08024cb8
 80196cc:	08025060 	.word	0x08025060
 80196d0:	08024d04 	.word	0x08024d04
 80196d4:	2300      	movs	r3, #0
 80196d6:	4423      	add	r3, r4
 80196d8:	b29a      	uxth	r2, r3
 80196da:	4b98      	ldr	r3, [pc, #608]	@ (801993c <tcp_receive+0xb04>)
 80196dc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80196de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80196e0:	613b      	str	r3, [r7, #16]
              next = next->next;
 80196e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80196e4:	681b      	ldr	r3, [r3, #0]
 80196e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 80196e8:	6938      	ldr	r0, [r7, #16]
 80196ea:	f7fd fbc0 	bl	8016e6e <tcp_seg_free>
            while (next &&
 80196ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80196f0:	2b00      	cmp	r3, #0
 80196f2:	d00e      	beq.n	8019712 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80196f4:	4b91      	ldr	r3, [pc, #580]	@ (801993c <tcp_receive+0xb04>)
 80196f6:	881b      	ldrh	r3, [r3, #0]
 80196f8:	461a      	mov	r2, r3
 80196fa:	4b91      	ldr	r3, [pc, #580]	@ (8019940 <tcp_receive+0xb08>)
 80196fc:	681b      	ldr	r3, [r3, #0]
 80196fe:	441a      	add	r2, r3
 8019700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019702:	691b      	ldr	r3, [r3, #16]
 8019704:	685b      	ldr	r3, [r3, #4]
 8019706:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8019708:	8909      	ldrh	r1, [r1, #8]
 801970a:	440b      	add	r3, r1
 801970c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801970e:	2b00      	cmp	r3, #0
 8019710:	da9b      	bge.n	801964a <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8019712:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019714:	2b00      	cmp	r3, #0
 8019716:	d059      	beq.n	80197cc <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8019718:	4b88      	ldr	r3, [pc, #544]	@ (801993c <tcp_receive+0xb04>)
 801971a:	881b      	ldrh	r3, [r3, #0]
 801971c:	461a      	mov	r2, r3
 801971e:	4b88      	ldr	r3, [pc, #544]	@ (8019940 <tcp_receive+0xb08>)
 8019720:	681b      	ldr	r3, [r3, #0]
 8019722:	441a      	add	r2, r3
 8019724:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019726:	691b      	ldr	r3, [r3, #16]
 8019728:	685b      	ldr	r3, [r3, #4]
 801972a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801972c:	2b00      	cmp	r3, #0
 801972e:	dd4d      	ble.n	80197cc <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8019730:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019732:	691b      	ldr	r3, [r3, #16]
 8019734:	685b      	ldr	r3, [r3, #4]
 8019736:	b29a      	uxth	r2, r3
 8019738:	4b81      	ldr	r3, [pc, #516]	@ (8019940 <tcp_receive+0xb08>)
 801973a:	681b      	ldr	r3, [r3, #0]
 801973c:	b29b      	uxth	r3, r3
 801973e:	1ad3      	subs	r3, r2, r3
 8019740:	b29a      	uxth	r2, r3
 8019742:	4b80      	ldr	r3, [pc, #512]	@ (8019944 <tcp_receive+0xb0c>)
 8019744:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8019746:	4b7f      	ldr	r3, [pc, #508]	@ (8019944 <tcp_receive+0xb0c>)
 8019748:	691b      	ldr	r3, [r3, #16]
 801974a:	899b      	ldrh	r3, [r3, #12]
 801974c:	b29b      	uxth	r3, r3
 801974e:	4618      	mov	r0, r3
 8019750:	f7f9 fe9e 	bl	8013490 <lwip_htons>
 8019754:	4603      	mov	r3, r0
 8019756:	b2db      	uxtb	r3, r3
 8019758:	f003 0302 	and.w	r3, r3, #2
 801975c:	2b00      	cmp	r3, #0
 801975e:	d005      	beq.n	801976c <tcp_receive+0x934>
                inseg.len -= 1;
 8019760:	4b78      	ldr	r3, [pc, #480]	@ (8019944 <tcp_receive+0xb0c>)
 8019762:	891b      	ldrh	r3, [r3, #8]
 8019764:	3b01      	subs	r3, #1
 8019766:	b29a      	uxth	r2, r3
 8019768:	4b76      	ldr	r3, [pc, #472]	@ (8019944 <tcp_receive+0xb0c>)
 801976a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801976c:	4b75      	ldr	r3, [pc, #468]	@ (8019944 <tcp_receive+0xb0c>)
 801976e:	685b      	ldr	r3, [r3, #4]
 8019770:	4a74      	ldr	r2, [pc, #464]	@ (8019944 <tcp_receive+0xb0c>)
 8019772:	8912      	ldrh	r2, [r2, #8]
 8019774:	4611      	mov	r1, r2
 8019776:	4618      	mov	r0, r3
 8019778:	f7fb fc64 	bl	8015044 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801977c:	4b71      	ldr	r3, [pc, #452]	@ (8019944 <tcp_receive+0xb0c>)
 801977e:	891c      	ldrh	r4, [r3, #8]
 8019780:	4b70      	ldr	r3, [pc, #448]	@ (8019944 <tcp_receive+0xb0c>)
 8019782:	691b      	ldr	r3, [r3, #16]
 8019784:	899b      	ldrh	r3, [r3, #12]
 8019786:	b29b      	uxth	r3, r3
 8019788:	4618      	mov	r0, r3
 801978a:	f7f9 fe81 	bl	8013490 <lwip_htons>
 801978e:	4603      	mov	r3, r0
 8019790:	b2db      	uxtb	r3, r3
 8019792:	f003 0303 	and.w	r3, r3, #3
 8019796:	2b00      	cmp	r3, #0
 8019798:	d001      	beq.n	801979e <tcp_receive+0x966>
 801979a:	2301      	movs	r3, #1
 801979c:	e000      	b.n	80197a0 <tcp_receive+0x968>
 801979e:	2300      	movs	r3, #0
 80197a0:	4423      	add	r3, r4
 80197a2:	b29a      	uxth	r2, r3
 80197a4:	4b65      	ldr	r3, [pc, #404]	@ (801993c <tcp_receive+0xb04>)
 80197a6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80197a8:	4b64      	ldr	r3, [pc, #400]	@ (801993c <tcp_receive+0xb04>)
 80197aa:	881b      	ldrh	r3, [r3, #0]
 80197ac:	461a      	mov	r2, r3
 80197ae:	4b64      	ldr	r3, [pc, #400]	@ (8019940 <tcp_receive+0xb08>)
 80197b0:	681b      	ldr	r3, [r3, #0]
 80197b2:	441a      	add	r2, r3
 80197b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80197b6:	691b      	ldr	r3, [r3, #16]
 80197b8:	685b      	ldr	r3, [r3, #4]
 80197ba:	429a      	cmp	r2, r3
 80197bc:	d006      	beq.n	80197cc <tcp_receive+0x994>
 80197be:	4b62      	ldr	r3, [pc, #392]	@ (8019948 <tcp_receive+0xb10>)
 80197c0:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 80197c4:	4961      	ldr	r1, [pc, #388]	@ (801994c <tcp_receive+0xb14>)
 80197c6:	4862      	ldr	r0, [pc, #392]	@ (8019950 <tcp_receive+0xb18>)
 80197c8:	f007 fc7c 	bl	80210c4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80197cc:	687b      	ldr	r3, [r7, #4]
 80197ce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80197d0:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80197d2:	4b5a      	ldr	r3, [pc, #360]	@ (801993c <tcp_receive+0xb04>)
 80197d4:	881b      	ldrh	r3, [r3, #0]
 80197d6:	461a      	mov	r2, r3
 80197d8:	4b59      	ldr	r3, [pc, #356]	@ (8019940 <tcp_receive+0xb08>)
 80197da:	681b      	ldr	r3, [r3, #0]
 80197dc:	441a      	add	r2, r3
 80197de:	687b      	ldr	r3, [r7, #4]
 80197e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80197e2:	687b      	ldr	r3, [r7, #4]
 80197e4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80197e6:	4b55      	ldr	r3, [pc, #340]	@ (801993c <tcp_receive+0xb04>)
 80197e8:	881b      	ldrh	r3, [r3, #0]
 80197ea:	429a      	cmp	r2, r3
 80197ec:	d206      	bcs.n	80197fc <tcp_receive+0x9c4>
 80197ee:	4b56      	ldr	r3, [pc, #344]	@ (8019948 <tcp_receive+0xb10>)
 80197f0:	f240 6207 	movw	r2, #1543	@ 0x607
 80197f4:	4957      	ldr	r1, [pc, #348]	@ (8019954 <tcp_receive+0xb1c>)
 80197f6:	4856      	ldr	r0, [pc, #344]	@ (8019950 <tcp_receive+0xb18>)
 80197f8:	f007 fc64 	bl	80210c4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8019800:	4b4e      	ldr	r3, [pc, #312]	@ (801993c <tcp_receive+0xb04>)
 8019802:	881b      	ldrh	r3, [r3, #0]
 8019804:	1ad3      	subs	r3, r2, r3
 8019806:	b29a      	uxth	r2, r3
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801980c:	6878      	ldr	r0, [r7, #4]
 801980e:	f7fc fe07 	bl	8016420 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8019812:	4b4c      	ldr	r3, [pc, #304]	@ (8019944 <tcp_receive+0xb0c>)
 8019814:	685b      	ldr	r3, [r3, #4]
 8019816:	891b      	ldrh	r3, [r3, #8]
 8019818:	2b00      	cmp	r3, #0
 801981a:	d006      	beq.n	801982a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801981c:	4b49      	ldr	r3, [pc, #292]	@ (8019944 <tcp_receive+0xb0c>)
 801981e:	685b      	ldr	r3, [r3, #4]
 8019820:	4a4d      	ldr	r2, [pc, #308]	@ (8019958 <tcp_receive+0xb20>)
 8019822:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8019824:	4b47      	ldr	r3, [pc, #284]	@ (8019944 <tcp_receive+0xb0c>)
 8019826:	2200      	movs	r2, #0
 8019828:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801982a:	4b46      	ldr	r3, [pc, #280]	@ (8019944 <tcp_receive+0xb0c>)
 801982c:	691b      	ldr	r3, [r3, #16]
 801982e:	899b      	ldrh	r3, [r3, #12]
 8019830:	b29b      	uxth	r3, r3
 8019832:	4618      	mov	r0, r3
 8019834:	f7f9 fe2c 	bl	8013490 <lwip_htons>
 8019838:	4603      	mov	r3, r0
 801983a:	b2db      	uxtb	r3, r3
 801983c:	f003 0301 	and.w	r3, r3, #1
 8019840:	2b00      	cmp	r3, #0
 8019842:	f000 80b8 	beq.w	80199b6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8019846:	4b45      	ldr	r3, [pc, #276]	@ (801995c <tcp_receive+0xb24>)
 8019848:	781b      	ldrb	r3, [r3, #0]
 801984a:	f043 0320 	orr.w	r3, r3, #32
 801984e:	b2da      	uxtb	r2, r3
 8019850:	4b42      	ldr	r3, [pc, #264]	@ (801995c <tcp_receive+0xb24>)
 8019852:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8019854:	e0af      	b.n	80199b6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8019856:	687b      	ldr	r3, [r7, #4]
 8019858:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801985a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801985c:	687b      	ldr	r3, [r7, #4]
 801985e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019860:	691b      	ldr	r3, [r3, #16]
 8019862:	685b      	ldr	r3, [r3, #4]
 8019864:	4a36      	ldr	r2, [pc, #216]	@ (8019940 <tcp_receive+0xb08>)
 8019866:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8019868:	68bb      	ldr	r3, [r7, #8]
 801986a:	891b      	ldrh	r3, [r3, #8]
 801986c:	461c      	mov	r4, r3
 801986e:	68bb      	ldr	r3, [r7, #8]
 8019870:	691b      	ldr	r3, [r3, #16]
 8019872:	899b      	ldrh	r3, [r3, #12]
 8019874:	b29b      	uxth	r3, r3
 8019876:	4618      	mov	r0, r3
 8019878:	f7f9 fe0a 	bl	8013490 <lwip_htons>
 801987c:	4603      	mov	r3, r0
 801987e:	b2db      	uxtb	r3, r3
 8019880:	f003 0303 	and.w	r3, r3, #3
 8019884:	2b00      	cmp	r3, #0
 8019886:	d001      	beq.n	801988c <tcp_receive+0xa54>
 8019888:	2301      	movs	r3, #1
 801988a:	e000      	b.n	801988e <tcp_receive+0xa56>
 801988c:	2300      	movs	r3, #0
 801988e:	191a      	adds	r2, r3, r4
 8019890:	687b      	ldr	r3, [r7, #4]
 8019892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019894:	441a      	add	r2, r3
 8019896:	687b      	ldr	r3, [r7, #4]
 8019898:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801989a:	687b      	ldr	r3, [r7, #4]
 801989c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801989e:	461c      	mov	r4, r3
 80198a0:	68bb      	ldr	r3, [r7, #8]
 80198a2:	891b      	ldrh	r3, [r3, #8]
 80198a4:	461d      	mov	r5, r3
 80198a6:	68bb      	ldr	r3, [r7, #8]
 80198a8:	691b      	ldr	r3, [r3, #16]
 80198aa:	899b      	ldrh	r3, [r3, #12]
 80198ac:	b29b      	uxth	r3, r3
 80198ae:	4618      	mov	r0, r3
 80198b0:	f7f9 fdee 	bl	8013490 <lwip_htons>
 80198b4:	4603      	mov	r3, r0
 80198b6:	b2db      	uxtb	r3, r3
 80198b8:	f003 0303 	and.w	r3, r3, #3
 80198bc:	2b00      	cmp	r3, #0
 80198be:	d001      	beq.n	80198c4 <tcp_receive+0xa8c>
 80198c0:	2301      	movs	r3, #1
 80198c2:	e000      	b.n	80198c6 <tcp_receive+0xa8e>
 80198c4:	2300      	movs	r3, #0
 80198c6:	442b      	add	r3, r5
 80198c8:	429c      	cmp	r4, r3
 80198ca:	d206      	bcs.n	80198da <tcp_receive+0xaa2>
 80198cc:	4b1e      	ldr	r3, [pc, #120]	@ (8019948 <tcp_receive+0xb10>)
 80198ce:	f240 622b 	movw	r2, #1579	@ 0x62b
 80198d2:	4923      	ldr	r1, [pc, #140]	@ (8019960 <tcp_receive+0xb28>)
 80198d4:	481e      	ldr	r0, [pc, #120]	@ (8019950 <tcp_receive+0xb18>)
 80198d6:	f007 fbf5 	bl	80210c4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80198da:	68bb      	ldr	r3, [r7, #8]
 80198dc:	891b      	ldrh	r3, [r3, #8]
 80198de:	461c      	mov	r4, r3
 80198e0:	68bb      	ldr	r3, [r7, #8]
 80198e2:	691b      	ldr	r3, [r3, #16]
 80198e4:	899b      	ldrh	r3, [r3, #12]
 80198e6:	b29b      	uxth	r3, r3
 80198e8:	4618      	mov	r0, r3
 80198ea:	f7f9 fdd1 	bl	8013490 <lwip_htons>
 80198ee:	4603      	mov	r3, r0
 80198f0:	b2db      	uxtb	r3, r3
 80198f2:	f003 0303 	and.w	r3, r3, #3
 80198f6:	2b00      	cmp	r3, #0
 80198f8:	d001      	beq.n	80198fe <tcp_receive+0xac6>
 80198fa:	2301      	movs	r3, #1
 80198fc:	e000      	b.n	8019900 <tcp_receive+0xac8>
 80198fe:	2300      	movs	r3, #0
 8019900:	1919      	adds	r1, r3, r4
 8019902:	687b      	ldr	r3, [r7, #4]
 8019904:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8019906:	b28b      	uxth	r3, r1
 8019908:	1ad3      	subs	r3, r2, r3
 801990a:	b29a      	uxth	r2, r3
 801990c:	687b      	ldr	r3, [r7, #4]
 801990e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8019910:	6878      	ldr	r0, [r7, #4]
 8019912:	f7fc fd85 	bl	8016420 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8019916:	68bb      	ldr	r3, [r7, #8]
 8019918:	685b      	ldr	r3, [r3, #4]
 801991a:	891b      	ldrh	r3, [r3, #8]
 801991c:	2b00      	cmp	r3, #0
 801991e:	d028      	beq.n	8019972 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8019920:	4b0d      	ldr	r3, [pc, #52]	@ (8019958 <tcp_receive+0xb20>)
 8019922:	681b      	ldr	r3, [r3, #0]
 8019924:	2b00      	cmp	r3, #0
 8019926:	d01d      	beq.n	8019964 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8019928:	4b0b      	ldr	r3, [pc, #44]	@ (8019958 <tcp_receive+0xb20>)
 801992a:	681a      	ldr	r2, [r3, #0]
 801992c:	68bb      	ldr	r3, [r7, #8]
 801992e:	685b      	ldr	r3, [r3, #4]
 8019930:	4619      	mov	r1, r3
 8019932:	4610      	mov	r0, r2
 8019934:	f7fb fe0c 	bl	8015550 <pbuf_cat>
 8019938:	e018      	b.n	801996c <tcp_receive+0xb34>
 801993a:	bf00      	nop
 801993c:	2002845e 	.word	0x2002845e
 8019940:	20028454 	.word	0x20028454
 8019944:	20028430 	.word	0x20028430
 8019948:	08024cb8 	.word	0x08024cb8
 801994c:	08025098 	.word	0x08025098
 8019950:	08024d04 	.word	0x08024d04
 8019954:	080250d4 	.word	0x080250d4
 8019958:	20028464 	.word	0x20028464
 801995c:	20028461 	.word	0x20028461
 8019960:	080250f4 	.word	0x080250f4
            } else {
              recv_data = cseg->p;
 8019964:	68bb      	ldr	r3, [r7, #8]
 8019966:	685b      	ldr	r3, [r3, #4]
 8019968:	4a70      	ldr	r2, [pc, #448]	@ (8019b2c <tcp_receive+0xcf4>)
 801996a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801996c:	68bb      	ldr	r3, [r7, #8]
 801996e:	2200      	movs	r2, #0
 8019970:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8019972:	68bb      	ldr	r3, [r7, #8]
 8019974:	691b      	ldr	r3, [r3, #16]
 8019976:	899b      	ldrh	r3, [r3, #12]
 8019978:	b29b      	uxth	r3, r3
 801997a:	4618      	mov	r0, r3
 801997c:	f7f9 fd88 	bl	8013490 <lwip_htons>
 8019980:	4603      	mov	r3, r0
 8019982:	b2db      	uxtb	r3, r3
 8019984:	f003 0301 	and.w	r3, r3, #1
 8019988:	2b00      	cmp	r3, #0
 801998a:	d00d      	beq.n	80199a8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801998c:	4b68      	ldr	r3, [pc, #416]	@ (8019b30 <tcp_receive+0xcf8>)
 801998e:	781b      	ldrb	r3, [r3, #0]
 8019990:	f043 0320 	orr.w	r3, r3, #32
 8019994:	b2da      	uxtb	r2, r3
 8019996:	4b66      	ldr	r3, [pc, #408]	@ (8019b30 <tcp_receive+0xcf8>)
 8019998:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	7d1b      	ldrb	r3, [r3, #20]
 801999e:	2b04      	cmp	r3, #4
 80199a0:	d102      	bne.n	80199a8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	2207      	movs	r2, #7
 80199a6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80199a8:	68bb      	ldr	r3, [r7, #8]
 80199aa:	681a      	ldr	r2, [r3, #0]
 80199ac:	687b      	ldr	r3, [r7, #4]
 80199ae:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 80199b0:	68b8      	ldr	r0, [r7, #8]
 80199b2:	f7fd fa5c 	bl	8016e6e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80199b6:	687b      	ldr	r3, [r7, #4]
 80199b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80199ba:	2b00      	cmp	r3, #0
 80199bc:	d008      	beq.n	80199d0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80199be:	687b      	ldr	r3, [r7, #4]
 80199c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80199c2:	691b      	ldr	r3, [r3, #16]
 80199c4:	685a      	ldr	r2, [r3, #4]
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 80199ca:	429a      	cmp	r2, r3
 80199cc:	f43f af43 	beq.w	8019856 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80199d0:	687b      	ldr	r3, [r7, #4]
 80199d2:	8b5b      	ldrh	r3, [r3, #26]
 80199d4:	f003 0301 	and.w	r3, r3, #1
 80199d8:	2b00      	cmp	r3, #0
 80199da:	d00e      	beq.n	80199fa <tcp_receive+0xbc2>
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	8b5b      	ldrh	r3, [r3, #26]
 80199e0:	f023 0301 	bic.w	r3, r3, #1
 80199e4:	b29a      	uxth	r2, r3
 80199e6:	687b      	ldr	r3, [r7, #4]
 80199e8:	835a      	strh	r2, [r3, #26]
 80199ea:	687b      	ldr	r3, [r7, #4]
 80199ec:	8b5b      	ldrh	r3, [r3, #26]
 80199ee:	f043 0302 	orr.w	r3, r3, #2
 80199f2:	b29a      	uxth	r2, r3
 80199f4:	687b      	ldr	r3, [r7, #4]
 80199f6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80199f8:	e187      	b.n	8019d0a <tcp_receive+0xed2>
        tcp_ack(pcb);
 80199fa:	687b      	ldr	r3, [r7, #4]
 80199fc:	8b5b      	ldrh	r3, [r3, #26]
 80199fe:	f043 0301 	orr.w	r3, r3, #1
 8019a02:	b29a      	uxth	r2, r3
 8019a04:	687b      	ldr	r3, [r7, #4]
 8019a06:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8019a08:	e17f      	b.n	8019d0a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019a0e:	2b00      	cmp	r3, #0
 8019a10:	d106      	bne.n	8019a20 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8019a12:	4848      	ldr	r0, [pc, #288]	@ (8019b34 <tcp_receive+0xcfc>)
 8019a14:	f7fd fa44 	bl	8016ea0 <tcp_seg_copy>
 8019a18:	4602      	mov	r2, r0
 8019a1a:	687b      	ldr	r3, [r7, #4]
 8019a1c:	675a      	str	r2, [r3, #116]	@ 0x74
 8019a1e:	e16c      	b.n	8019cfa <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8019a20:	2300      	movs	r3, #0
 8019a22:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8019a24:	687b      	ldr	r3, [r7, #4]
 8019a26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019a28:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019a2a:	e156      	b.n	8019cda <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8019a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a2e:	691b      	ldr	r3, [r3, #16]
 8019a30:	685a      	ldr	r2, [r3, #4]
 8019a32:	4b41      	ldr	r3, [pc, #260]	@ (8019b38 <tcp_receive+0xd00>)
 8019a34:	681b      	ldr	r3, [r3, #0]
 8019a36:	429a      	cmp	r2, r3
 8019a38:	d11d      	bne.n	8019a76 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8019a3a:	4b3e      	ldr	r3, [pc, #248]	@ (8019b34 <tcp_receive+0xcfc>)
 8019a3c:	891a      	ldrh	r2, [r3, #8]
 8019a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a40:	891b      	ldrh	r3, [r3, #8]
 8019a42:	429a      	cmp	r2, r3
 8019a44:	f240 814e 	bls.w	8019ce4 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019a48:	483a      	ldr	r0, [pc, #232]	@ (8019b34 <tcp_receive+0xcfc>)
 8019a4a:	f7fd fa29 	bl	8016ea0 <tcp_seg_copy>
 8019a4e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8019a50:	697b      	ldr	r3, [r7, #20]
 8019a52:	2b00      	cmp	r3, #0
 8019a54:	f000 8148 	beq.w	8019ce8 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8019a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019a5a:	2b00      	cmp	r3, #0
 8019a5c:	d003      	beq.n	8019a66 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8019a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019a60:	697a      	ldr	r2, [r7, #20]
 8019a62:	601a      	str	r2, [r3, #0]
 8019a64:	e002      	b.n	8019a6c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8019a66:	687b      	ldr	r3, [r7, #4]
 8019a68:	697a      	ldr	r2, [r7, #20]
 8019a6a:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8019a6c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8019a6e:	6978      	ldr	r0, [r7, #20]
 8019a70:	f7ff f8de 	bl	8018c30 <tcp_oos_insert_segment>
                }
                break;
 8019a74:	e138      	b.n	8019ce8 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8019a76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019a78:	2b00      	cmp	r3, #0
 8019a7a:	d117      	bne.n	8019aac <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8019a7c:	4b2e      	ldr	r3, [pc, #184]	@ (8019b38 <tcp_receive+0xd00>)
 8019a7e:	681a      	ldr	r2, [r3, #0]
 8019a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a82:	691b      	ldr	r3, [r3, #16]
 8019a84:	685b      	ldr	r3, [r3, #4]
 8019a86:	1ad3      	subs	r3, r2, r3
 8019a88:	2b00      	cmp	r3, #0
 8019a8a:	da57      	bge.n	8019b3c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019a8c:	4829      	ldr	r0, [pc, #164]	@ (8019b34 <tcp_receive+0xcfc>)
 8019a8e:	f7fd fa07 	bl	8016ea0 <tcp_seg_copy>
 8019a92:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8019a94:	69bb      	ldr	r3, [r7, #24]
 8019a96:	2b00      	cmp	r3, #0
 8019a98:	f000 8128 	beq.w	8019cec <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8019a9c:	687b      	ldr	r3, [r7, #4]
 8019a9e:	69ba      	ldr	r2, [r7, #24]
 8019aa0:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8019aa2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8019aa4:	69b8      	ldr	r0, [r7, #24]
 8019aa6:	f7ff f8c3 	bl	8018c30 <tcp_oos_insert_segment>
                  }
                  break;
 8019aaa:	e11f      	b.n	8019cec <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8019aac:	4b22      	ldr	r3, [pc, #136]	@ (8019b38 <tcp_receive+0xd00>)
 8019aae:	681a      	ldr	r2, [r3, #0]
 8019ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019ab2:	691b      	ldr	r3, [r3, #16]
 8019ab4:	685b      	ldr	r3, [r3, #4]
 8019ab6:	1ad3      	subs	r3, r2, r3
 8019ab8:	3b01      	subs	r3, #1
 8019aba:	2b00      	cmp	r3, #0
 8019abc:	db3e      	blt.n	8019b3c <tcp_receive+0xd04>
 8019abe:	4b1e      	ldr	r3, [pc, #120]	@ (8019b38 <tcp_receive+0xd00>)
 8019ac0:	681a      	ldr	r2, [r3, #0]
 8019ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ac4:	691b      	ldr	r3, [r3, #16]
 8019ac6:	685b      	ldr	r3, [r3, #4]
 8019ac8:	1ad3      	subs	r3, r2, r3
 8019aca:	3301      	adds	r3, #1
 8019acc:	2b00      	cmp	r3, #0
 8019ace:	dc35      	bgt.n	8019b3c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019ad0:	4818      	ldr	r0, [pc, #96]	@ (8019b34 <tcp_receive+0xcfc>)
 8019ad2:	f7fd f9e5 	bl	8016ea0 <tcp_seg_copy>
 8019ad6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8019ad8:	69fb      	ldr	r3, [r7, #28]
 8019ada:	2b00      	cmp	r3, #0
 8019adc:	f000 8108 	beq.w	8019cf0 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8019ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019ae2:	691b      	ldr	r3, [r3, #16]
 8019ae4:	685b      	ldr	r3, [r3, #4]
 8019ae6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019ae8:	8912      	ldrh	r2, [r2, #8]
 8019aea:	441a      	add	r2, r3
 8019aec:	4b12      	ldr	r3, [pc, #72]	@ (8019b38 <tcp_receive+0xd00>)
 8019aee:	681b      	ldr	r3, [r3, #0]
 8019af0:	1ad3      	subs	r3, r2, r3
 8019af2:	2b00      	cmp	r3, #0
 8019af4:	dd12      	ble.n	8019b1c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8019af6:	4b10      	ldr	r3, [pc, #64]	@ (8019b38 <tcp_receive+0xd00>)
 8019af8:	681b      	ldr	r3, [r3, #0]
 8019afa:	b29a      	uxth	r2, r3
 8019afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019afe:	691b      	ldr	r3, [r3, #16]
 8019b00:	685b      	ldr	r3, [r3, #4]
 8019b02:	b29b      	uxth	r3, r3
 8019b04:	1ad3      	subs	r3, r2, r3
 8019b06:	b29a      	uxth	r2, r3
 8019b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019b0a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8019b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019b0e:	685a      	ldr	r2, [r3, #4]
 8019b10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019b12:	891b      	ldrh	r3, [r3, #8]
 8019b14:	4619      	mov	r1, r3
 8019b16:	4610      	mov	r0, r2
 8019b18:	f7fb fa94 	bl	8015044 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8019b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019b1e:	69fa      	ldr	r2, [r7, #28]
 8019b20:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8019b22:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8019b24:	69f8      	ldr	r0, [r7, #28]
 8019b26:	f7ff f883 	bl	8018c30 <tcp_oos_insert_segment>
                  }
                  break;
 8019b2a:	e0e1      	b.n	8019cf0 <tcp_receive+0xeb8>
 8019b2c:	20028464 	.word	0x20028464
 8019b30:	20028461 	.word	0x20028461
 8019b34:	20028430 	.word	0x20028430
 8019b38:	20028454 	.word	0x20028454
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8019b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b3e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8019b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b42:	681b      	ldr	r3, [r3, #0]
 8019b44:	2b00      	cmp	r3, #0
 8019b46:	f040 80c5 	bne.w	8019cd4 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8019b4a:	4b7f      	ldr	r3, [pc, #508]	@ (8019d48 <tcp_receive+0xf10>)
 8019b4c:	681a      	ldr	r2, [r3, #0]
 8019b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b50:	691b      	ldr	r3, [r3, #16]
 8019b52:	685b      	ldr	r3, [r3, #4]
 8019b54:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8019b56:	2b00      	cmp	r3, #0
 8019b58:	f340 80bc 	ble.w	8019cd4 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8019b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b5e:	691b      	ldr	r3, [r3, #16]
 8019b60:	899b      	ldrh	r3, [r3, #12]
 8019b62:	b29b      	uxth	r3, r3
 8019b64:	4618      	mov	r0, r3
 8019b66:	f7f9 fc93 	bl	8013490 <lwip_htons>
 8019b6a:	4603      	mov	r3, r0
 8019b6c:	b2db      	uxtb	r3, r3
 8019b6e:	f003 0301 	and.w	r3, r3, #1
 8019b72:	2b00      	cmp	r3, #0
 8019b74:	f040 80be 	bne.w	8019cf4 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8019b78:	4874      	ldr	r0, [pc, #464]	@ (8019d4c <tcp_receive+0xf14>)
 8019b7a:	f7fd f991 	bl	8016ea0 <tcp_seg_copy>
 8019b7e:	4602      	mov	r2, r0
 8019b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b82:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8019b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b86:	681b      	ldr	r3, [r3, #0]
 8019b88:	2b00      	cmp	r3, #0
 8019b8a:	f000 80b5 	beq.w	8019cf8 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8019b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b90:	691b      	ldr	r3, [r3, #16]
 8019b92:	685b      	ldr	r3, [r3, #4]
 8019b94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019b96:	8912      	ldrh	r2, [r2, #8]
 8019b98:	441a      	add	r2, r3
 8019b9a:	4b6b      	ldr	r3, [pc, #428]	@ (8019d48 <tcp_receive+0xf10>)
 8019b9c:	681b      	ldr	r3, [r3, #0]
 8019b9e:	1ad3      	subs	r3, r2, r3
 8019ba0:	2b00      	cmp	r3, #0
 8019ba2:	dd12      	ble.n	8019bca <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8019ba4:	4b68      	ldr	r3, [pc, #416]	@ (8019d48 <tcp_receive+0xf10>)
 8019ba6:	681b      	ldr	r3, [r3, #0]
 8019ba8:	b29a      	uxth	r2, r3
 8019baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019bac:	691b      	ldr	r3, [r3, #16]
 8019bae:	685b      	ldr	r3, [r3, #4]
 8019bb0:	b29b      	uxth	r3, r3
 8019bb2:	1ad3      	subs	r3, r2, r3
 8019bb4:	b29a      	uxth	r2, r3
 8019bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019bb8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8019bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019bbc:	685a      	ldr	r2, [r3, #4]
 8019bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019bc0:	891b      	ldrh	r3, [r3, #8]
 8019bc2:	4619      	mov	r1, r3
 8019bc4:	4610      	mov	r0, r2
 8019bc6:	f7fb fa3d 	bl	8015044 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8019bca:	4b61      	ldr	r3, [pc, #388]	@ (8019d50 <tcp_receive+0xf18>)
 8019bcc:	881b      	ldrh	r3, [r3, #0]
 8019bce:	461a      	mov	r2, r3
 8019bd0:	4b5d      	ldr	r3, [pc, #372]	@ (8019d48 <tcp_receive+0xf10>)
 8019bd2:	681b      	ldr	r3, [r3, #0]
 8019bd4:	441a      	add	r2, r3
 8019bd6:	687b      	ldr	r3, [r7, #4]
 8019bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019bda:	6879      	ldr	r1, [r7, #4]
 8019bdc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8019bde:	440b      	add	r3, r1
 8019be0:	1ad3      	subs	r3, r2, r3
 8019be2:	2b00      	cmp	r3, #0
 8019be4:	f340 8088 	ble.w	8019cf8 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8019be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019bea:	681b      	ldr	r3, [r3, #0]
 8019bec:	691b      	ldr	r3, [r3, #16]
 8019bee:	899b      	ldrh	r3, [r3, #12]
 8019bf0:	b29b      	uxth	r3, r3
 8019bf2:	4618      	mov	r0, r3
 8019bf4:	f7f9 fc4c 	bl	8013490 <lwip_htons>
 8019bf8:	4603      	mov	r3, r0
 8019bfa:	b2db      	uxtb	r3, r3
 8019bfc:	f003 0301 	and.w	r3, r3, #1
 8019c00:	2b00      	cmp	r3, #0
 8019c02:	d021      	beq.n	8019c48 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8019c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c06:	681b      	ldr	r3, [r3, #0]
 8019c08:	691b      	ldr	r3, [r3, #16]
 8019c0a:	899b      	ldrh	r3, [r3, #12]
 8019c0c:	b29b      	uxth	r3, r3
 8019c0e:	b21b      	sxth	r3, r3
 8019c10:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8019c14:	b21c      	sxth	r4, r3
 8019c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c18:	681b      	ldr	r3, [r3, #0]
 8019c1a:	691b      	ldr	r3, [r3, #16]
 8019c1c:	899b      	ldrh	r3, [r3, #12]
 8019c1e:	b29b      	uxth	r3, r3
 8019c20:	4618      	mov	r0, r3
 8019c22:	f7f9 fc35 	bl	8013490 <lwip_htons>
 8019c26:	4603      	mov	r3, r0
 8019c28:	b2db      	uxtb	r3, r3
 8019c2a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8019c2e:	b29b      	uxth	r3, r3
 8019c30:	4618      	mov	r0, r3
 8019c32:	f7f9 fc2d 	bl	8013490 <lwip_htons>
 8019c36:	4603      	mov	r3, r0
 8019c38:	b21b      	sxth	r3, r3
 8019c3a:	4323      	orrs	r3, r4
 8019c3c:	b21a      	sxth	r2, r3
 8019c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c40:	681b      	ldr	r3, [r3, #0]
 8019c42:	691b      	ldr	r3, [r3, #16]
 8019c44:	b292      	uxth	r2, r2
 8019c46:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8019c48:	687b      	ldr	r3, [r7, #4]
 8019c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019c4c:	b29a      	uxth	r2, r3
 8019c4e:	687b      	ldr	r3, [r7, #4]
 8019c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8019c52:	4413      	add	r3, r2
 8019c54:	b299      	uxth	r1, r3
 8019c56:	4b3c      	ldr	r3, [pc, #240]	@ (8019d48 <tcp_receive+0xf10>)
 8019c58:	681b      	ldr	r3, [r3, #0]
 8019c5a:	b29a      	uxth	r2, r3
 8019c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c5e:	681b      	ldr	r3, [r3, #0]
 8019c60:	1a8a      	subs	r2, r1, r2
 8019c62:	b292      	uxth	r2, r2
 8019c64:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8019c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c68:	681b      	ldr	r3, [r3, #0]
 8019c6a:	685a      	ldr	r2, [r3, #4]
 8019c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c6e:	681b      	ldr	r3, [r3, #0]
 8019c70:	891b      	ldrh	r3, [r3, #8]
 8019c72:	4619      	mov	r1, r3
 8019c74:	4610      	mov	r0, r2
 8019c76:	f7fb f9e5 	bl	8015044 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8019c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c7c:	681b      	ldr	r3, [r3, #0]
 8019c7e:	891c      	ldrh	r4, [r3, #8]
 8019c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c82:	681b      	ldr	r3, [r3, #0]
 8019c84:	691b      	ldr	r3, [r3, #16]
 8019c86:	899b      	ldrh	r3, [r3, #12]
 8019c88:	b29b      	uxth	r3, r3
 8019c8a:	4618      	mov	r0, r3
 8019c8c:	f7f9 fc00 	bl	8013490 <lwip_htons>
 8019c90:	4603      	mov	r3, r0
 8019c92:	b2db      	uxtb	r3, r3
 8019c94:	f003 0303 	and.w	r3, r3, #3
 8019c98:	2b00      	cmp	r3, #0
 8019c9a:	d001      	beq.n	8019ca0 <tcp_receive+0xe68>
 8019c9c:	2301      	movs	r3, #1
 8019c9e:	e000      	b.n	8019ca2 <tcp_receive+0xe6a>
 8019ca0:	2300      	movs	r3, #0
 8019ca2:	4423      	add	r3, r4
 8019ca4:	b29a      	uxth	r2, r3
 8019ca6:	4b2a      	ldr	r3, [pc, #168]	@ (8019d50 <tcp_receive+0xf18>)
 8019ca8:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019caa:	4b29      	ldr	r3, [pc, #164]	@ (8019d50 <tcp_receive+0xf18>)
 8019cac:	881b      	ldrh	r3, [r3, #0]
 8019cae:	461a      	mov	r2, r3
 8019cb0:	4b25      	ldr	r3, [pc, #148]	@ (8019d48 <tcp_receive+0xf10>)
 8019cb2:	681b      	ldr	r3, [r3, #0]
 8019cb4:	441a      	add	r2, r3
 8019cb6:	687b      	ldr	r3, [r7, #4]
 8019cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019cba:	6879      	ldr	r1, [r7, #4]
 8019cbc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8019cbe:	440b      	add	r3, r1
 8019cc0:	429a      	cmp	r2, r3
 8019cc2:	d019      	beq.n	8019cf8 <tcp_receive+0xec0>
 8019cc4:	4b23      	ldr	r3, [pc, #140]	@ (8019d54 <tcp_receive+0xf1c>)
 8019cc6:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8019cca:	4923      	ldr	r1, [pc, #140]	@ (8019d58 <tcp_receive+0xf20>)
 8019ccc:	4823      	ldr	r0, [pc, #140]	@ (8019d5c <tcp_receive+0xf24>)
 8019cce:	f007 f9f9 	bl	80210c4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8019cd2:	e011      	b.n	8019cf8 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8019cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019cd6:	681b      	ldr	r3, [r3, #0]
 8019cd8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	f47f aea5 	bne.w	8019a2c <tcp_receive+0xbf4>
 8019ce2:	e00a      	b.n	8019cfa <tcp_receive+0xec2>
                break;
 8019ce4:	bf00      	nop
 8019ce6:	e008      	b.n	8019cfa <tcp_receive+0xec2>
                break;
 8019ce8:	bf00      	nop
 8019cea:	e006      	b.n	8019cfa <tcp_receive+0xec2>
                  break;
 8019cec:	bf00      	nop
 8019cee:	e004      	b.n	8019cfa <tcp_receive+0xec2>
                  break;
 8019cf0:	bf00      	nop
 8019cf2:	e002      	b.n	8019cfa <tcp_receive+0xec2>
                  break;
 8019cf4:	bf00      	nop
 8019cf6:	e000      	b.n	8019cfa <tcp_receive+0xec2>
                break;
 8019cf8:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8019cfa:	6878      	ldr	r0, [r7, #4]
 8019cfc:	f001 ff46 	bl	801bb8c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8019d00:	e003      	b.n	8019d0a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8019d02:	6878      	ldr	r0, [r7, #4]
 8019d04:	f001 ff42 	bl	801bb8c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8019d08:	e01a      	b.n	8019d40 <tcp_receive+0xf08>
 8019d0a:	e019      	b.n	8019d40 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8019d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8019d48 <tcp_receive+0xf10>)
 8019d0e:	681a      	ldr	r2, [r3, #0]
 8019d10:	687b      	ldr	r3, [r7, #4]
 8019d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019d14:	1ad3      	subs	r3, r2, r3
 8019d16:	2b00      	cmp	r3, #0
 8019d18:	db0a      	blt.n	8019d30 <tcp_receive+0xef8>
 8019d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8019d48 <tcp_receive+0xf10>)
 8019d1c:	681a      	ldr	r2, [r3, #0]
 8019d1e:	687b      	ldr	r3, [r7, #4]
 8019d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019d22:	6879      	ldr	r1, [r7, #4]
 8019d24:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8019d26:	440b      	add	r3, r1
 8019d28:	1ad3      	subs	r3, r2, r3
 8019d2a:	3301      	adds	r3, #1
 8019d2c:	2b00      	cmp	r3, #0
 8019d2e:	dd07      	ble.n	8019d40 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8019d30:	687b      	ldr	r3, [r7, #4]
 8019d32:	8b5b      	ldrh	r3, [r3, #26]
 8019d34:	f043 0302 	orr.w	r3, r3, #2
 8019d38:	b29a      	uxth	r2, r3
 8019d3a:	687b      	ldr	r3, [r7, #4]
 8019d3c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8019d3e:	e7ff      	b.n	8019d40 <tcp_receive+0xf08>
 8019d40:	bf00      	nop
 8019d42:	3750      	adds	r7, #80	@ 0x50
 8019d44:	46bd      	mov	sp, r7
 8019d46:	bdb0      	pop	{r4, r5, r7, pc}
 8019d48:	20028454 	.word	0x20028454
 8019d4c:	20028430 	.word	0x20028430
 8019d50:	2002845e 	.word	0x2002845e
 8019d54:	08024cb8 	.word	0x08024cb8
 8019d58:	08025060 	.word	0x08025060
 8019d5c:	08024d04 	.word	0x08024d04

08019d60 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8019d60:	b480      	push	{r7}
 8019d62:	b083      	sub	sp, #12
 8019d64:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8019d66:	4b15      	ldr	r3, [pc, #84]	@ (8019dbc <tcp_get_next_optbyte+0x5c>)
 8019d68:	881b      	ldrh	r3, [r3, #0]
 8019d6a:	1c5a      	adds	r2, r3, #1
 8019d6c:	b291      	uxth	r1, r2
 8019d6e:	4a13      	ldr	r2, [pc, #76]	@ (8019dbc <tcp_get_next_optbyte+0x5c>)
 8019d70:	8011      	strh	r1, [r2, #0]
 8019d72:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8019d74:	4b12      	ldr	r3, [pc, #72]	@ (8019dc0 <tcp_get_next_optbyte+0x60>)
 8019d76:	681b      	ldr	r3, [r3, #0]
 8019d78:	2b00      	cmp	r3, #0
 8019d7a:	d004      	beq.n	8019d86 <tcp_get_next_optbyte+0x26>
 8019d7c:	4b11      	ldr	r3, [pc, #68]	@ (8019dc4 <tcp_get_next_optbyte+0x64>)
 8019d7e:	881b      	ldrh	r3, [r3, #0]
 8019d80:	88fa      	ldrh	r2, [r7, #6]
 8019d82:	429a      	cmp	r2, r3
 8019d84:	d208      	bcs.n	8019d98 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8019d86:	4b10      	ldr	r3, [pc, #64]	@ (8019dc8 <tcp_get_next_optbyte+0x68>)
 8019d88:	681b      	ldr	r3, [r3, #0]
 8019d8a:	3314      	adds	r3, #20
 8019d8c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8019d8e:	88fb      	ldrh	r3, [r7, #6]
 8019d90:	683a      	ldr	r2, [r7, #0]
 8019d92:	4413      	add	r3, r2
 8019d94:	781b      	ldrb	r3, [r3, #0]
 8019d96:	e00b      	b.n	8019db0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8019d98:	88fb      	ldrh	r3, [r7, #6]
 8019d9a:	b2da      	uxtb	r2, r3
 8019d9c:	4b09      	ldr	r3, [pc, #36]	@ (8019dc4 <tcp_get_next_optbyte+0x64>)
 8019d9e:	881b      	ldrh	r3, [r3, #0]
 8019da0:	b2db      	uxtb	r3, r3
 8019da2:	1ad3      	subs	r3, r2, r3
 8019da4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8019da6:	4b06      	ldr	r3, [pc, #24]	@ (8019dc0 <tcp_get_next_optbyte+0x60>)
 8019da8:	681a      	ldr	r2, [r3, #0]
 8019daa:	797b      	ldrb	r3, [r7, #5]
 8019dac:	4413      	add	r3, r2
 8019dae:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019db0:	4618      	mov	r0, r3
 8019db2:	370c      	adds	r7, #12
 8019db4:	46bd      	mov	sp, r7
 8019db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dba:	4770      	bx	lr
 8019dbc:	20028450 	.word	0x20028450
 8019dc0:	2002844c 	.word	0x2002844c
 8019dc4:	2002844a 	.word	0x2002844a
 8019dc8:	20028444 	.word	0x20028444

08019dcc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8019dcc:	b580      	push	{r7, lr}
 8019dce:	b084      	sub	sp, #16
 8019dd0:	af00      	add	r7, sp, #0
 8019dd2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8019dd4:	687b      	ldr	r3, [r7, #4]
 8019dd6:	2b00      	cmp	r3, #0
 8019dd8:	d106      	bne.n	8019de8 <tcp_parseopt+0x1c>
 8019dda:	4b32      	ldr	r3, [pc, #200]	@ (8019ea4 <tcp_parseopt+0xd8>)
 8019ddc:	f240 727d 	movw	r2, #1917	@ 0x77d
 8019de0:	4931      	ldr	r1, [pc, #196]	@ (8019ea8 <tcp_parseopt+0xdc>)
 8019de2:	4832      	ldr	r0, [pc, #200]	@ (8019eac <tcp_parseopt+0xe0>)
 8019de4:	f007 f96e 	bl	80210c4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8019de8:	4b31      	ldr	r3, [pc, #196]	@ (8019eb0 <tcp_parseopt+0xe4>)
 8019dea:	881b      	ldrh	r3, [r3, #0]
 8019dec:	2b00      	cmp	r3, #0
 8019dee:	d056      	beq.n	8019e9e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8019df0:	4b30      	ldr	r3, [pc, #192]	@ (8019eb4 <tcp_parseopt+0xe8>)
 8019df2:	2200      	movs	r2, #0
 8019df4:	801a      	strh	r2, [r3, #0]
 8019df6:	e046      	b.n	8019e86 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8019df8:	f7ff ffb2 	bl	8019d60 <tcp_get_next_optbyte>
 8019dfc:	4603      	mov	r3, r0
 8019dfe:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8019e00:	7bfb      	ldrb	r3, [r7, #15]
 8019e02:	2b02      	cmp	r3, #2
 8019e04:	d006      	beq.n	8019e14 <tcp_parseopt+0x48>
 8019e06:	2b02      	cmp	r3, #2
 8019e08:	dc2a      	bgt.n	8019e60 <tcp_parseopt+0x94>
 8019e0a:	2b00      	cmp	r3, #0
 8019e0c:	d042      	beq.n	8019e94 <tcp_parseopt+0xc8>
 8019e0e:	2b01      	cmp	r3, #1
 8019e10:	d038      	beq.n	8019e84 <tcp_parseopt+0xb8>
 8019e12:	e025      	b.n	8019e60 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8019e14:	f7ff ffa4 	bl	8019d60 <tcp_get_next_optbyte>
 8019e18:	4603      	mov	r3, r0
 8019e1a:	2b04      	cmp	r3, #4
 8019e1c:	d13c      	bne.n	8019e98 <tcp_parseopt+0xcc>
 8019e1e:	4b25      	ldr	r3, [pc, #148]	@ (8019eb4 <tcp_parseopt+0xe8>)
 8019e20:	881b      	ldrh	r3, [r3, #0]
 8019e22:	3301      	adds	r3, #1
 8019e24:	4a22      	ldr	r2, [pc, #136]	@ (8019eb0 <tcp_parseopt+0xe4>)
 8019e26:	8812      	ldrh	r2, [r2, #0]
 8019e28:	4293      	cmp	r3, r2
 8019e2a:	da35      	bge.n	8019e98 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8019e2c:	f7ff ff98 	bl	8019d60 <tcp_get_next_optbyte>
 8019e30:	4603      	mov	r3, r0
 8019e32:	021b      	lsls	r3, r3, #8
 8019e34:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8019e36:	f7ff ff93 	bl	8019d60 <tcp_get_next_optbyte>
 8019e3a:	4603      	mov	r3, r0
 8019e3c:	461a      	mov	r2, r3
 8019e3e:	89bb      	ldrh	r3, [r7, #12]
 8019e40:	4313      	orrs	r3, r2
 8019e42:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8019e44:	89bb      	ldrh	r3, [r7, #12]
 8019e46:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8019e4a:	d804      	bhi.n	8019e56 <tcp_parseopt+0x8a>
 8019e4c:	89bb      	ldrh	r3, [r7, #12]
 8019e4e:	2b00      	cmp	r3, #0
 8019e50:	d001      	beq.n	8019e56 <tcp_parseopt+0x8a>
 8019e52:	89ba      	ldrh	r2, [r7, #12]
 8019e54:	e001      	b.n	8019e5a <tcp_parseopt+0x8e>
 8019e56:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8019e5a:	687b      	ldr	r3, [r7, #4]
 8019e5c:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8019e5e:	e012      	b.n	8019e86 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8019e60:	f7ff ff7e 	bl	8019d60 <tcp_get_next_optbyte>
 8019e64:	4603      	mov	r3, r0
 8019e66:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8019e68:	7afb      	ldrb	r3, [r7, #11]
 8019e6a:	2b01      	cmp	r3, #1
 8019e6c:	d916      	bls.n	8019e9c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8019e6e:	7afb      	ldrb	r3, [r7, #11]
 8019e70:	b29a      	uxth	r2, r3
 8019e72:	4b10      	ldr	r3, [pc, #64]	@ (8019eb4 <tcp_parseopt+0xe8>)
 8019e74:	881b      	ldrh	r3, [r3, #0]
 8019e76:	4413      	add	r3, r2
 8019e78:	b29b      	uxth	r3, r3
 8019e7a:	3b02      	subs	r3, #2
 8019e7c:	b29a      	uxth	r2, r3
 8019e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8019eb4 <tcp_parseopt+0xe8>)
 8019e80:	801a      	strh	r2, [r3, #0]
 8019e82:	e000      	b.n	8019e86 <tcp_parseopt+0xba>
          break;
 8019e84:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8019e86:	4b0b      	ldr	r3, [pc, #44]	@ (8019eb4 <tcp_parseopt+0xe8>)
 8019e88:	881a      	ldrh	r2, [r3, #0]
 8019e8a:	4b09      	ldr	r3, [pc, #36]	@ (8019eb0 <tcp_parseopt+0xe4>)
 8019e8c:	881b      	ldrh	r3, [r3, #0]
 8019e8e:	429a      	cmp	r2, r3
 8019e90:	d3b2      	bcc.n	8019df8 <tcp_parseopt+0x2c>
 8019e92:	e004      	b.n	8019e9e <tcp_parseopt+0xd2>
          return;
 8019e94:	bf00      	nop
 8019e96:	e002      	b.n	8019e9e <tcp_parseopt+0xd2>
            return;
 8019e98:	bf00      	nop
 8019e9a:	e000      	b.n	8019e9e <tcp_parseopt+0xd2>
            return;
 8019e9c:	bf00      	nop
      }
    }
  }
}
 8019e9e:	3710      	adds	r7, #16
 8019ea0:	46bd      	mov	sp, r7
 8019ea2:	bd80      	pop	{r7, pc}
 8019ea4:	08024cb8 	.word	0x08024cb8
 8019ea8:	0802511c 	.word	0x0802511c
 8019eac:	08024d04 	.word	0x08024d04
 8019eb0:	20028448 	.word	0x20028448
 8019eb4:	20028450 	.word	0x20028450

08019eb8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8019eb8:	b480      	push	{r7}
 8019eba:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8019ebc:	4b05      	ldr	r3, [pc, #20]	@ (8019ed4 <tcp_trigger_input_pcb_close+0x1c>)
 8019ebe:	781b      	ldrb	r3, [r3, #0]
 8019ec0:	f043 0310 	orr.w	r3, r3, #16
 8019ec4:	b2da      	uxtb	r2, r3
 8019ec6:	4b03      	ldr	r3, [pc, #12]	@ (8019ed4 <tcp_trigger_input_pcb_close+0x1c>)
 8019ec8:	701a      	strb	r2, [r3, #0]
}
 8019eca:	bf00      	nop
 8019ecc:	46bd      	mov	sp, r7
 8019ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ed2:	4770      	bx	lr
 8019ed4:	20028461 	.word	0x20028461

08019ed8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8019ed8:	b580      	push	{r7, lr}
 8019eda:	b084      	sub	sp, #16
 8019edc:	af00      	add	r7, sp, #0
 8019ede:	60f8      	str	r0, [r7, #12]
 8019ee0:	60b9      	str	r1, [r7, #8]
 8019ee2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8019ee4:	68fb      	ldr	r3, [r7, #12]
 8019ee6:	2b00      	cmp	r3, #0
 8019ee8:	d00a      	beq.n	8019f00 <tcp_route+0x28>
 8019eea:	68fb      	ldr	r3, [r7, #12]
 8019eec:	7a1b      	ldrb	r3, [r3, #8]
 8019eee:	2b00      	cmp	r3, #0
 8019ef0:	d006      	beq.n	8019f00 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8019ef2:	68fb      	ldr	r3, [r7, #12]
 8019ef4:	7a1b      	ldrb	r3, [r3, #8]
 8019ef6:	4618      	mov	r0, r3
 8019ef8:	f7fa fe64 	bl	8014bc4 <netif_get_by_index>
 8019efc:	4603      	mov	r3, r0
 8019efe:	e003      	b.n	8019f08 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8019f00:	6878      	ldr	r0, [r7, #4]
 8019f02:	f004 fa55 	bl	801e3b0 <ip4_route>
 8019f06:	4603      	mov	r3, r0
  }
}
 8019f08:	4618      	mov	r0, r3
 8019f0a:	3710      	adds	r7, #16
 8019f0c:	46bd      	mov	sp, r7
 8019f0e:	bd80      	pop	{r7, pc}

08019f10 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8019f10:	b590      	push	{r4, r7, lr}
 8019f12:	b087      	sub	sp, #28
 8019f14:	af00      	add	r7, sp, #0
 8019f16:	60f8      	str	r0, [r7, #12]
 8019f18:	60b9      	str	r1, [r7, #8]
 8019f1a:	603b      	str	r3, [r7, #0]
 8019f1c:	4613      	mov	r3, r2
 8019f1e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8019f20:	68fb      	ldr	r3, [r7, #12]
 8019f22:	2b00      	cmp	r3, #0
 8019f24:	d105      	bne.n	8019f32 <tcp_create_segment+0x22>
 8019f26:	4b4a      	ldr	r3, [pc, #296]	@ (801a050 <tcp_create_segment+0x140>)
 8019f28:	22a3      	movs	r2, #163	@ 0xa3
 8019f2a:	494a      	ldr	r1, [pc, #296]	@ (801a054 <tcp_create_segment+0x144>)
 8019f2c:	484a      	ldr	r0, [pc, #296]	@ (801a058 <tcp_create_segment+0x148>)
 8019f2e:	f007 f8c9 	bl	80210c4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8019f32:	68bb      	ldr	r3, [r7, #8]
 8019f34:	2b00      	cmp	r3, #0
 8019f36:	d105      	bne.n	8019f44 <tcp_create_segment+0x34>
 8019f38:	4b45      	ldr	r3, [pc, #276]	@ (801a050 <tcp_create_segment+0x140>)
 8019f3a:	22a4      	movs	r2, #164	@ 0xa4
 8019f3c:	4947      	ldr	r1, [pc, #284]	@ (801a05c <tcp_create_segment+0x14c>)
 8019f3e:	4846      	ldr	r0, [pc, #280]	@ (801a058 <tcp_create_segment+0x148>)
 8019f40:	f007 f8c0 	bl	80210c4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019f44:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8019f48:	009b      	lsls	r3, r3, #2
 8019f4a:	b2db      	uxtb	r3, r3
 8019f4c:	f003 0304 	and.w	r3, r3, #4
 8019f50:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8019f52:	22a8      	movs	r2, #168	@ 0xa8
 8019f54:	493e      	ldr	r1, [pc, #248]	@ (801a050 <tcp_create_segment+0x140>)
 8019f56:	2003      	movs	r0, #3
 8019f58:	f7fa f994 	bl	8014284 <memp_malloc_fn>
 8019f5c:	6138      	str	r0, [r7, #16]
 8019f5e:	693b      	ldr	r3, [r7, #16]
 8019f60:	2b00      	cmp	r3, #0
 8019f62:	d104      	bne.n	8019f6e <tcp_create_segment+0x5e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8019f64:	68b8      	ldr	r0, [r7, #8]
 8019f66:	f7fb fa0d 	bl	8015384 <pbuf_free>
    return NULL;
 8019f6a:	2300      	movs	r3, #0
 8019f6c:	e06b      	b.n	801a046 <tcp_create_segment+0x136>
  }
  seg->flags = optflags;
 8019f6e:	693b      	ldr	r3, [r7, #16]
 8019f70:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8019f74:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 8019f76:	693b      	ldr	r3, [r7, #16]
 8019f78:	2200      	movs	r2, #0
 8019f7a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8019f7c:	693b      	ldr	r3, [r7, #16]
 8019f7e:	68ba      	ldr	r2, [r7, #8]
 8019f80:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8019f82:	68bb      	ldr	r3, [r7, #8]
 8019f84:	891a      	ldrh	r2, [r3, #8]
 8019f86:	7dfb      	ldrb	r3, [r7, #23]
 8019f88:	b29b      	uxth	r3, r3
 8019f8a:	429a      	cmp	r2, r3
 8019f8c:	d205      	bcs.n	8019f9a <tcp_create_segment+0x8a>
 8019f8e:	4b30      	ldr	r3, [pc, #192]	@ (801a050 <tcp_create_segment+0x140>)
 8019f90:	22b0      	movs	r2, #176	@ 0xb0
 8019f92:	4933      	ldr	r1, [pc, #204]	@ (801a060 <tcp_create_segment+0x150>)
 8019f94:	4830      	ldr	r0, [pc, #192]	@ (801a058 <tcp_create_segment+0x148>)
 8019f96:	f007 f895 	bl	80210c4 <iprintf>
  seg->len = p->tot_len - optlen;
 8019f9a:	68bb      	ldr	r3, [r7, #8]
 8019f9c:	891a      	ldrh	r2, [r3, #8]
 8019f9e:	7dfb      	ldrb	r3, [r7, #23]
 8019fa0:	b29b      	uxth	r3, r3
 8019fa2:	1ad3      	subs	r3, r2, r3
 8019fa4:	b29a      	uxth	r2, r3
 8019fa6:	693b      	ldr	r3, [r7, #16]
 8019fa8:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 8019faa:	693b      	ldr	r3, [r7, #16]
 8019fac:	2200      	movs	r2, #0
 8019fae:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8019fb0:	2114      	movs	r1, #20
 8019fb2:	68b8      	ldr	r0, [r7, #8]
 8019fb4:	f7fb f948 	bl	8015248 <pbuf_add_header>
 8019fb8:	4603      	mov	r3, r0
 8019fba:	2b00      	cmp	r3, #0
 8019fbc:	d00c      	beq.n	8019fd8 <tcp_create_segment+0xc8>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 8019fbe:	4b29      	ldr	r3, [pc, #164]	@ (801a064 <tcp_create_segment+0x154>)
 8019fc0:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 8019fc4:	3301      	adds	r3, #1
 8019fc6:	b29a      	uxth	r2, r3
 8019fc8:	4b26      	ldr	r3, [pc, #152]	@ (801a064 <tcp_create_segment+0x154>)
 8019fca:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
    tcp_seg_free(seg);
 8019fce:	6938      	ldr	r0, [r7, #16]
 8019fd0:	f7fc ff4d 	bl	8016e6e <tcp_seg_free>
    return NULL;
 8019fd4:	2300      	movs	r3, #0
 8019fd6:	e036      	b.n	801a046 <tcp_create_segment+0x136>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8019fd8:	693b      	ldr	r3, [r7, #16]
 8019fda:	685b      	ldr	r3, [r3, #4]
 8019fdc:	685a      	ldr	r2, [r3, #4]
 8019fde:	693b      	ldr	r3, [r7, #16]
 8019fe0:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8019fe2:	68fb      	ldr	r3, [r7, #12]
 8019fe4:	8ada      	ldrh	r2, [r3, #22]
 8019fe6:	693b      	ldr	r3, [r7, #16]
 8019fe8:	691c      	ldr	r4, [r3, #16]
 8019fea:	4610      	mov	r0, r2
 8019fec:	f7f9 fa50 	bl	8013490 <lwip_htons>
 8019ff0:	4603      	mov	r3, r0
 8019ff2:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8019ff4:	68fb      	ldr	r3, [r7, #12]
 8019ff6:	8b1a      	ldrh	r2, [r3, #24]
 8019ff8:	693b      	ldr	r3, [r7, #16]
 8019ffa:	691c      	ldr	r4, [r3, #16]
 8019ffc:	4610      	mov	r0, r2
 8019ffe:	f7f9 fa47 	bl	8013490 <lwip_htons>
 801a002:	4603      	mov	r3, r0
 801a004:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801a006:	693b      	ldr	r3, [r7, #16]
 801a008:	691c      	ldr	r4, [r3, #16]
 801a00a:	6838      	ldr	r0, [r7, #0]
 801a00c:	f7f9 fa56 	bl	80134bc <lwip_htonl>
 801a010:	4603      	mov	r3, r0
 801a012:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801a014:	7dfb      	ldrb	r3, [r7, #23]
 801a016:	089b      	lsrs	r3, r3, #2
 801a018:	b2db      	uxtb	r3, r3
 801a01a:	3305      	adds	r3, #5
 801a01c:	b29b      	uxth	r3, r3
 801a01e:	031b      	lsls	r3, r3, #12
 801a020:	b29a      	uxth	r2, r3
 801a022:	79fb      	ldrb	r3, [r7, #7]
 801a024:	b29b      	uxth	r3, r3
 801a026:	4313      	orrs	r3, r2
 801a028:	b29a      	uxth	r2, r3
 801a02a:	693b      	ldr	r3, [r7, #16]
 801a02c:	691c      	ldr	r4, [r3, #16]
 801a02e:	4610      	mov	r0, r2
 801a030:	f7f9 fa2e 	bl	8013490 <lwip_htons>
 801a034:	4603      	mov	r3, r0
 801a036:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801a038:	693b      	ldr	r3, [r7, #16]
 801a03a:	691b      	ldr	r3, [r3, #16]
 801a03c:	2200      	movs	r2, #0
 801a03e:	749a      	strb	r2, [r3, #18]
 801a040:	2200      	movs	r2, #0
 801a042:	74da      	strb	r2, [r3, #19]
  return seg;
 801a044:	693b      	ldr	r3, [r7, #16]
}
 801a046:	4618      	mov	r0, r3
 801a048:	371c      	adds	r7, #28
 801a04a:	46bd      	mov	sp, r7
 801a04c:	bd90      	pop	{r4, r7, pc}
 801a04e:	bf00      	nop
 801a050:	08025138 	.word	0x08025138
 801a054:	0802516c 	.word	0x0802516c
 801a058:	0802518c 	.word	0x0802518c
 801a05c:	080251b4 	.word	0x080251b4
 801a060:	080251d8 	.word	0x080251d8
 801a064:	20028318 	.word	0x20028318

0801a068 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801a068:	b580      	push	{r7, lr}
 801a06a:	b086      	sub	sp, #24
 801a06c:	af00      	add	r7, sp, #0
 801a06e:	607b      	str	r3, [r7, #4]
 801a070:	4603      	mov	r3, r0
 801a072:	73fb      	strb	r3, [r7, #15]
 801a074:	460b      	mov	r3, r1
 801a076:	81bb      	strh	r3, [r7, #12]
 801a078:	4613      	mov	r3, r2
 801a07a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801a07c:	89bb      	ldrh	r3, [r7, #12]
 801a07e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801a080:	687b      	ldr	r3, [r7, #4]
 801a082:	2b00      	cmp	r3, #0
 801a084:	d105      	bne.n	801a092 <tcp_pbuf_prealloc+0x2a>
 801a086:	4b30      	ldr	r3, [pc, #192]	@ (801a148 <tcp_pbuf_prealloc+0xe0>)
 801a088:	22e8      	movs	r2, #232	@ 0xe8
 801a08a:	4930      	ldr	r1, [pc, #192]	@ (801a14c <tcp_pbuf_prealloc+0xe4>)
 801a08c:	4830      	ldr	r0, [pc, #192]	@ (801a150 <tcp_pbuf_prealloc+0xe8>)
 801a08e:	f007 f819 	bl	80210c4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801a092:	6a3b      	ldr	r3, [r7, #32]
 801a094:	2b00      	cmp	r3, #0
 801a096:	d105      	bne.n	801a0a4 <tcp_pbuf_prealloc+0x3c>
 801a098:	4b2b      	ldr	r3, [pc, #172]	@ (801a148 <tcp_pbuf_prealloc+0xe0>)
 801a09a:	22e9      	movs	r2, #233	@ 0xe9
 801a09c:	492d      	ldr	r1, [pc, #180]	@ (801a154 <tcp_pbuf_prealloc+0xec>)
 801a09e:	482c      	ldr	r0, [pc, #176]	@ (801a150 <tcp_pbuf_prealloc+0xe8>)
 801a0a0:	f007 f810 	bl	80210c4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801a0a4:	89ba      	ldrh	r2, [r7, #12]
 801a0a6:	897b      	ldrh	r3, [r7, #10]
 801a0a8:	429a      	cmp	r2, r3
 801a0aa:	d221      	bcs.n	801a0f0 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801a0ac:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801a0b0:	f003 0302 	and.w	r3, r3, #2
 801a0b4:	2b00      	cmp	r3, #0
 801a0b6:	d111      	bne.n	801a0dc <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801a0b8:	6a3b      	ldr	r3, [r7, #32]
 801a0ba:	8b5b      	ldrh	r3, [r3, #26]
 801a0bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801a0c0:	2b00      	cmp	r3, #0
 801a0c2:	d115      	bne.n	801a0f0 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801a0c4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801a0c8:	2b00      	cmp	r3, #0
 801a0ca:	d007      	beq.n	801a0dc <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801a0cc:	6a3b      	ldr	r3, [r7, #32]
 801a0ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 801a0d0:	2b00      	cmp	r3, #0
 801a0d2:	d103      	bne.n	801a0dc <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801a0d4:	6a3b      	ldr	r3, [r7, #32]
 801a0d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 801a0d8:	2b00      	cmp	r3, #0
 801a0da:	d009      	beq.n	801a0f0 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801a0dc:	89bb      	ldrh	r3, [r7, #12]
 801a0de:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 801a0e2:	f023 0203 	bic.w	r2, r3, #3
 801a0e6:	897b      	ldrh	r3, [r7, #10]
 801a0e8:	4293      	cmp	r3, r2
 801a0ea:	bf28      	it	cs
 801a0ec:	4613      	movcs	r3, r2
 801a0ee:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801a0f0:	8af9      	ldrh	r1, [r7, #22]
 801a0f2:	7bfb      	ldrb	r3, [r7, #15]
 801a0f4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a0f8:	4618      	mov	r0, r3
 801a0fa:	f7fa fe11 	bl	8014d20 <pbuf_alloc>
 801a0fe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a100:	693b      	ldr	r3, [r7, #16]
 801a102:	2b00      	cmp	r3, #0
 801a104:	d101      	bne.n	801a10a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801a106:	2300      	movs	r3, #0
 801a108:	e019      	b.n	801a13e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801a10a:	693b      	ldr	r3, [r7, #16]
 801a10c:	681b      	ldr	r3, [r3, #0]
 801a10e:	2b00      	cmp	r3, #0
 801a110:	d006      	beq.n	801a120 <tcp_pbuf_prealloc+0xb8>
 801a112:	4b0d      	ldr	r3, [pc, #52]	@ (801a148 <tcp_pbuf_prealloc+0xe0>)
 801a114:	f240 120b 	movw	r2, #267	@ 0x10b
 801a118:	490f      	ldr	r1, [pc, #60]	@ (801a158 <tcp_pbuf_prealloc+0xf0>)
 801a11a:	480d      	ldr	r0, [pc, #52]	@ (801a150 <tcp_pbuf_prealloc+0xe8>)
 801a11c:	f006 ffd2 	bl	80210c4 <iprintf>
  *oversize = p->len - length;
 801a120:	693b      	ldr	r3, [r7, #16]
 801a122:	895a      	ldrh	r2, [r3, #10]
 801a124:	89bb      	ldrh	r3, [r7, #12]
 801a126:	1ad3      	subs	r3, r2, r3
 801a128:	b29a      	uxth	r2, r3
 801a12a:	687b      	ldr	r3, [r7, #4]
 801a12c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801a12e:	693b      	ldr	r3, [r7, #16]
 801a130:	89ba      	ldrh	r2, [r7, #12]
 801a132:	811a      	strh	r2, [r3, #8]
 801a134:	693b      	ldr	r3, [r7, #16]
 801a136:	891a      	ldrh	r2, [r3, #8]
 801a138:	693b      	ldr	r3, [r7, #16]
 801a13a:	815a      	strh	r2, [r3, #10]
  return p;
 801a13c:	693b      	ldr	r3, [r7, #16]
}
 801a13e:	4618      	mov	r0, r3
 801a140:	3718      	adds	r7, #24
 801a142:	46bd      	mov	sp, r7
 801a144:	bd80      	pop	{r7, pc}
 801a146:	bf00      	nop
 801a148:	08025138 	.word	0x08025138
 801a14c:	080251f0 	.word	0x080251f0
 801a150:	0802518c 	.word	0x0802518c
 801a154:	08025214 	.word	0x08025214
 801a158:	08025234 	.word	0x08025234

0801a15c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801a15c:	b580      	push	{r7, lr}
 801a15e:	b082      	sub	sp, #8
 801a160:	af00      	add	r7, sp, #0
 801a162:	6078      	str	r0, [r7, #4]
 801a164:	460b      	mov	r3, r1
 801a166:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801a168:	687b      	ldr	r3, [r7, #4]
 801a16a:	2b00      	cmp	r3, #0
 801a16c:	d106      	bne.n	801a17c <tcp_write_checks+0x20>
 801a16e:	4b37      	ldr	r3, [pc, #220]	@ (801a24c <tcp_write_checks+0xf0>)
 801a170:	f240 1233 	movw	r2, #307	@ 0x133
 801a174:	4936      	ldr	r1, [pc, #216]	@ (801a250 <tcp_write_checks+0xf4>)
 801a176:	4837      	ldr	r0, [pc, #220]	@ (801a254 <tcp_write_checks+0xf8>)
 801a178:	f006 ffa4 	bl	80210c4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801a17c:	687b      	ldr	r3, [r7, #4]
 801a17e:	7d1b      	ldrb	r3, [r3, #20]
 801a180:	2b04      	cmp	r3, #4
 801a182:	d00e      	beq.n	801a1a2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801a184:	687b      	ldr	r3, [r7, #4]
 801a186:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801a188:	2b07      	cmp	r3, #7
 801a18a:	d00a      	beq.n	801a1a2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801a18c:	687b      	ldr	r3, [r7, #4]
 801a18e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801a190:	2b02      	cmp	r3, #2
 801a192:	d006      	beq.n	801a1a2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801a194:	687b      	ldr	r3, [r7, #4]
 801a196:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801a198:	2b03      	cmp	r3, #3
 801a19a:	d002      	beq.n	801a1a2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801a19c:	f06f 030a 	mvn.w	r3, #10
 801a1a0:	e050      	b.n	801a244 <tcp_write_checks+0xe8>
  } else if (len == 0) {
 801a1a2:	887b      	ldrh	r3, [r7, #2]
 801a1a4:	2b00      	cmp	r3, #0
 801a1a6:	d101      	bne.n	801a1ac <tcp_write_checks+0x50>
    return ERR_OK;
 801a1a8:	2300      	movs	r3, #0
 801a1aa:	e04b      	b.n	801a244 <tcp_write_checks+0xe8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801a1ac:	687b      	ldr	r3, [r7, #4]
 801a1ae:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801a1b2:	887a      	ldrh	r2, [r7, #2]
 801a1b4:	429a      	cmp	r2, r3
 801a1b6:	d909      	bls.n	801a1cc <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a1b8:	687b      	ldr	r3, [r7, #4]
 801a1ba:	8b5b      	ldrh	r3, [r3, #26]
 801a1bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a1c0:	b29a      	uxth	r2, r3
 801a1c2:	687b      	ldr	r3, [r7, #4]
 801a1c4:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801a1c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a1ca:	e03b      	b.n	801a244 <tcp_write_checks+0xe8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801a1cc:	687b      	ldr	r3, [r7, #4]
 801a1ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a1d2:	2b08      	cmp	r3, #8
 801a1d4:	d911      	bls.n	801a1fa <tcp_write_checks+0x9e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 801a1d6:	4b20      	ldr	r3, [pc, #128]	@ (801a258 <tcp_write_checks+0xfc>)
 801a1d8:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801a1dc:	3301      	adds	r3, #1
 801a1de:	b29a      	uxth	r2, r3
 801a1e0:	4b1d      	ldr	r3, [pc, #116]	@ (801a258 <tcp_write_checks+0xfc>)
 801a1e2:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a1e6:	687b      	ldr	r3, [r7, #4]
 801a1e8:	8b5b      	ldrh	r3, [r3, #26]
 801a1ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a1ee:	b29a      	uxth	r2, r3
 801a1f0:	687b      	ldr	r3, [r7, #4]
 801a1f2:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801a1f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a1f8:	e024      	b.n	801a244 <tcp_write_checks+0xe8>
  }
  if (pcb->snd_queuelen != 0) {
 801a1fa:	687b      	ldr	r3, [r7, #4]
 801a1fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a200:	2b00      	cmp	r3, #0
 801a202:	d00f      	beq.n	801a224 <tcp_write_checks+0xc8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801a204:	687b      	ldr	r3, [r7, #4]
 801a206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a208:	2b00      	cmp	r3, #0
 801a20a:	d11a      	bne.n	801a242 <tcp_write_checks+0xe6>
 801a20c:	687b      	ldr	r3, [r7, #4]
 801a20e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a210:	2b00      	cmp	r3, #0
 801a212:	d116      	bne.n	801a242 <tcp_write_checks+0xe6>
 801a214:	4b0d      	ldr	r3, [pc, #52]	@ (801a24c <tcp_write_checks+0xf0>)
 801a216:	f240 1255 	movw	r2, #341	@ 0x155
 801a21a:	4910      	ldr	r1, [pc, #64]	@ (801a25c <tcp_write_checks+0x100>)
 801a21c:	480d      	ldr	r0, [pc, #52]	@ (801a254 <tcp_write_checks+0xf8>)
 801a21e:	f006 ff51 	bl	80210c4 <iprintf>
 801a222:	e00e      	b.n	801a242 <tcp_write_checks+0xe6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801a224:	687b      	ldr	r3, [r7, #4]
 801a226:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a228:	2b00      	cmp	r3, #0
 801a22a:	d103      	bne.n	801a234 <tcp_write_checks+0xd8>
 801a22c:	687b      	ldr	r3, [r7, #4]
 801a22e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a230:	2b00      	cmp	r3, #0
 801a232:	d006      	beq.n	801a242 <tcp_write_checks+0xe6>
 801a234:	4b05      	ldr	r3, [pc, #20]	@ (801a24c <tcp_write_checks+0xf0>)
 801a236:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 801a23a:	4909      	ldr	r1, [pc, #36]	@ (801a260 <tcp_write_checks+0x104>)
 801a23c:	4805      	ldr	r0, [pc, #20]	@ (801a254 <tcp_write_checks+0xf8>)
 801a23e:	f006 ff41 	bl	80210c4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801a242:	2300      	movs	r3, #0
}
 801a244:	4618      	mov	r0, r3
 801a246:	3708      	adds	r7, #8
 801a248:	46bd      	mov	sp, r7
 801a24a:	bd80      	pop	{r7, pc}
 801a24c:	08025138 	.word	0x08025138
 801a250:	08025248 	.word	0x08025248
 801a254:	0802518c 	.word	0x0802518c
 801a258:	20028318 	.word	0x20028318
 801a25c:	08025268 	.word	0x08025268
 801a260:	080252a4 	.word	0x080252a4

0801a264 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801a264:	b590      	push	{r4, r7, lr}
 801a266:	b09d      	sub	sp, #116	@ 0x74
 801a268:	af04      	add	r7, sp, #16
 801a26a:	60f8      	str	r0, [r7, #12]
 801a26c:	60b9      	str	r1, [r7, #8]
 801a26e:	4611      	mov	r1, r2
 801a270:	461a      	mov	r2, r3
 801a272:	460b      	mov	r3, r1
 801a274:	80fb      	strh	r3, [r7, #6]
 801a276:	4613      	mov	r3, r2
 801a278:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801a27a:	2300      	movs	r3, #0
 801a27c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801a27e:	2300      	movs	r3, #0
 801a280:	643b      	str	r3, [r7, #64]	@ 0x40
 801a282:	2300      	movs	r3, #0
 801a284:	657b      	str	r3, [r7, #84]	@ 0x54
 801a286:	2300      	movs	r3, #0
 801a288:	653b      	str	r3, [r7, #80]	@ 0x50
 801a28a:	2300      	movs	r3, #0
 801a28c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  u16_t pos = 0; /* position in 'arg' data */
 801a28e:	2300      	movs	r3, #0
 801a290:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801a294:	2300      	movs	r3, #0
 801a296:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801a29a:	2300      	movs	r3, #0
 801a29c:	82fb      	strh	r3, [r7, #22]
  u16_t oversize_used = 0;
 801a29e:	2300      	movs	r3, #0
 801a2a0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
 801a2a4:	2300      	movs	r3, #0
 801a2a6:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801a2aa:	2300      	movs	r3, #0
 801a2ac:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801a2b0:	68fb      	ldr	r3, [r7, #12]
 801a2b2:	2b00      	cmp	r3, #0
 801a2b4:	d109      	bne.n	801a2ca <tcp_write+0x66>
 801a2b6:	4b9c      	ldr	r3, [pc, #624]	@ (801a528 <tcp_write+0x2c4>)
 801a2b8:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 801a2bc:	499b      	ldr	r1, [pc, #620]	@ (801a52c <tcp_write+0x2c8>)
 801a2be:	489c      	ldr	r0, [pc, #624]	@ (801a530 <tcp_write+0x2cc>)
 801a2c0:	f006 ff00 	bl	80210c4 <iprintf>
 801a2c4:	f06f 030f 	mvn.w	r3, #15
 801a2c8:	e381      	b.n	801a9ce <tcp_write+0x76a>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801a2ca:	68fb      	ldr	r3, [r7, #12]
 801a2cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801a2d0:	085b      	lsrs	r3, r3, #1
 801a2d2:	b29a      	uxth	r2, r3
 801a2d4:	68fb      	ldr	r3, [r7, #12]
 801a2d6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801a2d8:	4293      	cmp	r3, r2
 801a2da:	bf28      	it	cs
 801a2dc:	4613      	movcs	r3, r2
 801a2de:	853b      	strh	r3, [r7, #40]	@ 0x28
  mss_local = mss_local ? mss_local : pcb->mss;
 801a2e0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801a2e2:	2b00      	cmp	r3, #0
 801a2e4:	d102      	bne.n	801a2ec <tcp_write+0x88>
 801a2e6:	68fb      	ldr	r3, [r7, #12]
 801a2e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801a2ea:	e000      	b.n	801a2ee <tcp_write+0x8a>
 801a2ec:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801a2ee:	853b      	strh	r3, [r7, #40]	@ 0x28
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801a2f0:	68bb      	ldr	r3, [r7, #8]
 801a2f2:	2b00      	cmp	r3, #0
 801a2f4:	d109      	bne.n	801a30a <tcp_write+0xa6>
 801a2f6:	4b8c      	ldr	r3, [pc, #560]	@ (801a528 <tcp_write+0x2c4>)
 801a2f8:	f240 12ad 	movw	r2, #429	@ 0x1ad
 801a2fc:	498d      	ldr	r1, [pc, #564]	@ (801a534 <tcp_write+0x2d0>)
 801a2fe:	488c      	ldr	r0, [pc, #560]	@ (801a530 <tcp_write+0x2cc>)
 801a300:	f006 fee0 	bl	80210c4 <iprintf>
 801a304:	f06f 030f 	mvn.w	r3, #15
 801a308:	e361      	b.n	801a9ce <tcp_write+0x76a>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801a30a:	88fb      	ldrh	r3, [r7, #6]
 801a30c:	4619      	mov	r1, r3
 801a30e:	68f8      	ldr	r0, [r7, #12]
 801a310:	f7ff ff24 	bl	801a15c <tcp_write_checks>
 801a314:	4603      	mov	r3, r0
 801a316:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (err != ERR_OK) {
 801a31a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801a31e:	2b00      	cmp	r3, #0
 801a320:	d002      	beq.n	801a328 <tcp_write+0xc4>
    return err;
 801a322:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801a326:	e352      	b.n	801a9ce <tcp_write+0x76a>
  }
  queuelen = pcb->snd_queuelen;
 801a328:	68fb      	ldr	r3, [r7, #12]
 801a32a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a32e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a332:	2300      	movs	r3, #0
 801a334:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801a338:	68fb      	ldr	r3, [r7, #12]
 801a33a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a33c:	2b00      	cmp	r3, #0
 801a33e:	f000 8127 	beq.w	801a590 <tcp_write+0x32c>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a342:	68fb      	ldr	r3, [r7, #12]
 801a344:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a346:	643b      	str	r3, [r7, #64]	@ 0x40
 801a348:	e002      	b.n	801a350 <tcp_write+0xec>
         last_unsent = last_unsent->next);
 801a34a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a34c:	681b      	ldr	r3, [r3, #0]
 801a34e:	643b      	str	r3, [r7, #64]	@ 0x40
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a350:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a352:	681b      	ldr	r3, [r3, #0]
 801a354:	2b00      	cmp	r3, #0
 801a356:	d1f8      	bne.n	801a34a <tcp_write+0xe6>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801a358:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a35a:	7b1b      	ldrb	r3, [r3, #12]
 801a35c:	009b      	lsls	r3, r3, #2
 801a35e:	b29b      	uxth	r3, r3
 801a360:	f003 0304 	and.w	r3, r3, #4
 801a364:	84bb      	strh	r3, [r7, #36]	@ 0x24
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801a366:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801a368:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a36a:	891b      	ldrh	r3, [r3, #8]
 801a36c:	4619      	mov	r1, r3
 801a36e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a370:	440b      	add	r3, r1
 801a372:	429a      	cmp	r2, r3
 801a374:	da06      	bge.n	801a384 <tcp_write+0x120>
 801a376:	4b6c      	ldr	r3, [pc, #432]	@ (801a528 <tcp_write+0x2c4>)
 801a378:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801a37c:	496e      	ldr	r1, [pc, #440]	@ (801a538 <tcp_write+0x2d4>)
 801a37e:	486c      	ldr	r0, [pc, #432]	@ (801a530 <tcp_write+0x2cc>)
 801a380:	f006 fea0 	bl	80210c4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801a384:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a386:	891a      	ldrh	r2, [r3, #8]
 801a388:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a38a:	4413      	add	r3, r2
 801a38c:	b29b      	uxth	r3, r3
 801a38e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801a390:	1ad3      	subs	r3, r2, r3
 801a392:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
     * function.
     */
#if TCP_OVERSIZE
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 801a396:	68fb      	ldr	r3, [r7, #12]
 801a398:	f8b3 2068 	ldrh.w	r2, [r3, #104]	@ 0x68
 801a39c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a39e:	895b      	ldrh	r3, [r3, #10]
 801a3a0:	429a      	cmp	r2, r3
 801a3a2:	d006      	beq.n	801a3b2 <tcp_write+0x14e>
 801a3a4:	4b60      	ldr	r3, [pc, #384]	@ (801a528 <tcp_write+0x2c4>)
 801a3a6:	f240 12f3 	movw	r2, #499	@ 0x1f3
 801a3aa:	4964      	ldr	r1, [pc, #400]	@ (801a53c <tcp_write+0x2d8>)
 801a3ac:	4860      	ldr	r0, [pc, #384]	@ (801a530 <tcp_write+0x2cc>)
 801a3ae:	f006 fe89 	bl	80210c4 <iprintf>
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801a3b2:	68fb      	ldr	r3, [r7, #12]
 801a3b4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a3b8:	82fb      	strh	r3, [r7, #22]
    if (oversize > 0) {
 801a3ba:	8afb      	ldrh	r3, [r7, #22]
 801a3bc:	2b00      	cmp	r3, #0
 801a3be:	d02e      	beq.n	801a41e <tcp_write+0x1ba>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801a3c0:	8afb      	ldrh	r3, [r7, #22]
 801a3c2:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 801a3c6:	429a      	cmp	r2, r3
 801a3c8:	d206      	bcs.n	801a3d8 <tcp_write+0x174>
 801a3ca:	4b57      	ldr	r3, [pc, #348]	@ (801a528 <tcp_write+0x2c4>)
 801a3cc:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 801a3d0:	495b      	ldr	r1, [pc, #364]	@ (801a540 <tcp_write+0x2dc>)
 801a3d2:	4857      	ldr	r0, [pc, #348]	@ (801a530 <tcp_write+0x2cc>)
 801a3d4:	f006 fe76 	bl	80210c4 <iprintf>
      seg = last_unsent;
 801a3d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a3da:	657b      	str	r3, [r7, #84]	@ 0x54
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801a3dc:	8afb      	ldrh	r3, [r7, #22]
 801a3de:	88fa      	ldrh	r2, [r7, #6]
 801a3e0:	4293      	cmp	r3, r2
 801a3e2:	bf28      	it	cs
 801a3e4:	4613      	movcs	r3, r2
 801a3e6:	b29b      	uxth	r3, r3
 801a3e8:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 801a3ec:	4293      	cmp	r3, r2
 801a3ee:	bf28      	it	cs
 801a3f0:	4613      	movcs	r3, r2
 801a3f2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      pos += oversize_used;
 801a3f6:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 801a3fa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a3fe:	4413      	add	r3, r2
 801a400:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
      oversize -= oversize_used;
 801a404:	8afa      	ldrh	r2, [r7, #22]
 801a406:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a40a:	1ad3      	subs	r3, r2, r3
 801a40c:	b29b      	uxth	r3, r3
 801a40e:	82fb      	strh	r3, [r7, #22]
      space -= oversize_used;
 801a410:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 801a414:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a418:	1ad3      	subs	r3, r2, r3
 801a41a:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801a41e:	8afb      	ldrh	r3, [r7, #22]
 801a420:	2b00      	cmp	r3, #0
 801a422:	d00b      	beq.n	801a43c <tcp_write+0x1d8>
 801a424:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 801a428:	88fb      	ldrh	r3, [r7, #6]
 801a42a:	429a      	cmp	r2, r3
 801a42c:	d006      	beq.n	801a43c <tcp_write+0x1d8>
 801a42e:	4b3e      	ldr	r3, [pc, #248]	@ (801a528 <tcp_write+0x2c4>)
 801a430:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a434:	4943      	ldr	r1, [pc, #268]	@ (801a544 <tcp_write+0x2e0>)
 801a436:	483e      	ldr	r0, [pc, #248]	@ (801a530 <tcp_write+0x2cc>)
 801a438:	f006 fe44 	bl	80210c4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801a43c:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 801a440:	88fb      	ldrh	r3, [r7, #6]
 801a442:	429a      	cmp	r2, r3
 801a444:	f080 8172 	bcs.w	801a72c <tcp_write+0x4c8>
 801a448:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 801a44c:	2b00      	cmp	r3, #0
 801a44e:	f000 816d 	beq.w	801a72c <tcp_write+0x4c8>
 801a452:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a454:	891b      	ldrh	r3, [r3, #8]
 801a456:	2b00      	cmp	r3, #0
 801a458:	f000 8168 	beq.w	801a72c <tcp_write+0x4c8>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801a45c:	88fa      	ldrh	r2, [r7, #6]
 801a45e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 801a462:	1ad2      	subs	r2, r2, r3
 801a464:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 801a468:	4293      	cmp	r3, r2
 801a46a:	bfa8      	it	ge
 801a46c:	4613      	movge	r3, r2
 801a46e:	847b      	strh	r3, [r7, #34]	@ 0x22
      seg = last_unsent;
 801a470:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a472:	657b      	str	r3, [r7, #84]	@ 0x54

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801a474:	797b      	ldrb	r3, [r7, #5]
 801a476:	f003 0301 	and.w	r3, r3, #1
 801a47a:	2b00      	cmp	r3, #0
 801a47c:	d02b      	beq.n	801a4d6 <tcp_write+0x272>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801a47e:	f107 0016 	add.w	r0, r7, #22
 801a482:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 801a486:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 801a488:	2301      	movs	r3, #1
 801a48a:	9302      	str	r3, [sp, #8]
 801a48c:	797b      	ldrb	r3, [r7, #5]
 801a48e:	9301      	str	r3, [sp, #4]
 801a490:	68fb      	ldr	r3, [r7, #12]
 801a492:	9300      	str	r3, [sp, #0]
 801a494:	4603      	mov	r3, r0
 801a496:	2000      	movs	r0, #0
 801a498:	f7ff fde6 	bl	801a068 <tcp_pbuf_prealloc>
 801a49c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 801a49e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a4a0:	2b00      	cmp	r3, #0
 801a4a2:	f000 825a 	beq.w	801a95a <tcp_write+0x6f6>
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
 801a4a6:	8afb      	ldrh	r3, [r7, #22]
 801a4a8:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801a4ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a4ae:	6858      	ldr	r0, [r3, #4]
 801a4b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 801a4b4:	68ba      	ldr	r2, [r7, #8]
 801a4b6:	4413      	add	r3, r2
 801a4b8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801a4ba:	4619      	mov	r1, r3
 801a4bc:	f007 f827 	bl	802150e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801a4c0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801a4c2:	f7fb f805 	bl	80154d0 <pbuf_clen>
 801a4c6:	4603      	mov	r3, r0
 801a4c8:	461a      	mov	r2, r3
 801a4ca:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 801a4ce:	4413      	add	r3, r2
 801a4d0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 801a4d4:	e055      	b.n	801a582 <tcp_write+0x31e>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801a4d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a4d8:	685b      	ldr	r3, [r3, #4]
 801a4da:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a4dc:	e002      	b.n	801a4e4 <tcp_write+0x280>
 801a4de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a4e0:	681b      	ldr	r3, [r3, #0]
 801a4e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a4e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a4e6:	681b      	ldr	r3, [r3, #0]
 801a4e8:	2b00      	cmp	r3, #0
 801a4ea:	d1f8      	bne.n	801a4de <tcp_write+0x27a>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801a4ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a4ee:	7b1b      	ldrb	r3, [r3, #12]
 801a4f0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801a4f4:	2b00      	cmp	r3, #0
 801a4f6:	d129      	bne.n	801a54c <tcp_write+0x2e8>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801a4f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a4fa:	685b      	ldr	r3, [r3, #4]
 801a4fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801a4fe:	8952      	ldrh	r2, [r2, #10]
 801a500:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801a502:	68ba      	ldr	r2, [r7, #8]
 801a504:	429a      	cmp	r2, r3
 801a506:	d121      	bne.n	801a54c <tcp_write+0x2e8>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801a508:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 801a50c:	2b00      	cmp	r3, #0
 801a50e:	d006      	beq.n	801a51e <tcp_write+0x2ba>
 801a510:	4b05      	ldr	r3, [pc, #20]	@ (801a528 <tcp_write+0x2c4>)
 801a512:	f240 2231 	movw	r2, #561	@ 0x231
 801a516:	490c      	ldr	r1, [pc, #48]	@ (801a548 <tcp_write+0x2e4>)
 801a518:	4805      	ldr	r0, [pc, #20]	@ (801a530 <tcp_write+0x2cc>)
 801a51a:	f006 fdd3 	bl	80210c4 <iprintf>
          extendlen = seglen;
 801a51e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a520:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 801a524:	e02d      	b.n	801a582 <tcp_write+0x31e>
 801a526:	bf00      	nop
 801a528:	08025138 	.word	0x08025138
 801a52c:	080252d8 	.word	0x080252d8
 801a530:	0802518c 	.word	0x0802518c
 801a534:	080252f0 	.word	0x080252f0
 801a538:	08025324 	.word	0x08025324
 801a53c:	0802533c 	.word	0x0802533c
 801a540:	0802536c 	.word	0x0802536c
 801a544:	0802538c 	.word	0x0802538c
 801a548:	080253ac 	.word	0x080253ac
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801a54c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a54e:	2201      	movs	r2, #1
 801a550:	4619      	mov	r1, r3
 801a552:	2000      	movs	r0, #0
 801a554:	f7fa fbe4 	bl	8014d20 <pbuf_alloc>
 801a558:	63f8      	str	r0, [r7, #60]	@ 0x3c
 801a55a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a55c:	2b00      	cmp	r3, #0
 801a55e:	f000 81fe 	beq.w	801a95e <tcp_write+0x6fa>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801a562:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 801a566:	68ba      	ldr	r2, [r7, #8]
 801a568:	441a      	add	r2, r3
 801a56a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a56c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801a56e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801a570:	f7fa ffae 	bl	80154d0 <pbuf_clen>
 801a574:	4603      	mov	r3, r0
 801a576:	461a      	mov	r2, r3
 801a578:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 801a57c:	4413      	add	r3, r2
 801a57e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801a582:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 801a586:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a588:	4413      	add	r3, r2
 801a58a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 801a58e:	e0cd      	b.n	801a72c <tcp_write+0x4c8>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801a590:	68fb      	ldr	r3, [r7, #12]
 801a592:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a596:	2b00      	cmp	r3, #0
 801a598:	f000 80c8 	beq.w	801a72c <tcp_write+0x4c8>
 801a59c:	4b72      	ldr	r3, [pc, #456]	@ (801a768 <tcp_write+0x504>)
 801a59e:	f240 224a 	movw	r2, #586	@ 0x24a
 801a5a2:	4972      	ldr	r1, [pc, #456]	@ (801a76c <tcp_write+0x508>)
 801a5a4:	4872      	ldr	r0, [pc, #456]	@ (801a770 <tcp_write+0x50c>)
 801a5a6:	f006 fd8d 	bl	80210c4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801a5aa:	e0bf      	b.n	801a72c <tcp_write+0x4c8>
    struct pbuf *p;
    u16_t left = len - pos;
 801a5ac:	88fa      	ldrh	r2, [r7, #6]
 801a5ae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 801a5b2:	1ad3      	subs	r3, r2, r3
 801a5b4:	843b      	strh	r3, [r7, #32]
    u16_t max_len = mss_local - optlen;
 801a5b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a5ba:	b29b      	uxth	r3, r3
 801a5bc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801a5be:	1ad3      	subs	r3, r2, r3
 801a5c0:	83fb      	strh	r3, [r7, #30]
    u16_t seglen = LWIP_MIN(left, max_len);
 801a5c2:	8bfa      	ldrh	r2, [r7, #30]
 801a5c4:	8c3b      	ldrh	r3, [r7, #32]
 801a5c6:	4293      	cmp	r3, r2
 801a5c8:	bf28      	it	cs
 801a5ca:	4613      	movcs	r3, r2
 801a5cc:	83bb      	strh	r3, [r7, #28]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801a5ce:	797b      	ldrb	r3, [r7, #5]
 801a5d0:	f003 0301 	and.w	r3, r3, #1
 801a5d4:	2b00      	cmp	r3, #0
 801a5d6:	d036      	beq.n	801a646 <tcp_write+0x3e2>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801a5d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a5dc:	b29a      	uxth	r2, r3
 801a5de:	8bbb      	ldrh	r3, [r7, #28]
 801a5e0:	4413      	add	r3, r2
 801a5e2:	b299      	uxth	r1, r3
 801a5e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a5e6:	2b00      	cmp	r3, #0
 801a5e8:	bf0c      	ite	eq
 801a5ea:	2301      	moveq	r3, #1
 801a5ec:	2300      	movne	r3, #0
 801a5ee:	b2db      	uxtb	r3, r3
 801a5f0:	f107 0016 	add.w	r0, r7, #22
 801a5f4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801a5f6:	9302      	str	r3, [sp, #8]
 801a5f8:	797b      	ldrb	r3, [r7, #5]
 801a5fa:	9301      	str	r3, [sp, #4]
 801a5fc:	68fb      	ldr	r3, [r7, #12]
 801a5fe:	9300      	str	r3, [sp, #0]
 801a600:	4603      	mov	r3, r0
 801a602:	2036      	movs	r0, #54	@ 0x36
 801a604:	f7ff fd30 	bl	801a068 <tcp_pbuf_prealloc>
 801a608:	6378      	str	r0, [r7, #52]	@ 0x34
 801a60a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a60c:	2b00      	cmp	r3, #0
 801a60e:	f000 81a8 	beq.w	801a962 <tcp_write+0x6fe>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801a612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a614:	895b      	ldrh	r3, [r3, #10]
 801a616:	8bba      	ldrh	r2, [r7, #28]
 801a618:	429a      	cmp	r2, r3
 801a61a:	d906      	bls.n	801a62a <tcp_write+0x3c6>
 801a61c:	4b52      	ldr	r3, [pc, #328]	@ (801a768 <tcp_write+0x504>)
 801a61e:	f240 2266 	movw	r2, #614	@ 0x266
 801a622:	4954      	ldr	r1, [pc, #336]	@ (801a774 <tcp_write+0x510>)
 801a624:	4852      	ldr	r0, [pc, #328]	@ (801a770 <tcp_write+0x50c>)
 801a626:	f006 fd4d 	bl	80210c4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801a62a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a62c:	685a      	ldr	r2, [r3, #4]
 801a62e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a632:	18d0      	adds	r0, r2, r3
 801a634:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 801a638:	68ba      	ldr	r2, [r7, #8]
 801a63a:	4413      	add	r3, r2
 801a63c:	8bba      	ldrh	r2, [r7, #28]
 801a63e:	4619      	mov	r1, r3
 801a640:	f006 ff65 	bl	802150e <memcpy>
 801a644:	e02f      	b.n	801a6a6 <tcp_write+0x442>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801a646:	8afb      	ldrh	r3, [r7, #22]
 801a648:	2b00      	cmp	r3, #0
 801a64a:	d006      	beq.n	801a65a <tcp_write+0x3f6>
 801a64c:	4b46      	ldr	r3, [pc, #280]	@ (801a768 <tcp_write+0x504>)
 801a64e:	f240 2271 	movw	r2, #625	@ 0x271
 801a652:	4949      	ldr	r1, [pc, #292]	@ (801a778 <tcp_write+0x514>)
 801a654:	4846      	ldr	r0, [pc, #280]	@ (801a770 <tcp_write+0x50c>)
 801a656:	f006 fd35 	bl	80210c4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801a65a:	8bbb      	ldrh	r3, [r7, #28]
 801a65c:	2201      	movs	r2, #1
 801a65e:	4619      	mov	r1, r3
 801a660:	2036      	movs	r0, #54	@ 0x36
 801a662:	f7fa fb5d 	bl	8014d20 <pbuf_alloc>
 801a666:	61b8      	str	r0, [r7, #24]
 801a668:	69bb      	ldr	r3, [r7, #24]
 801a66a:	2b00      	cmp	r3, #0
 801a66c:	f000 817b 	beq.w	801a966 <tcp_write+0x702>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801a670:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 801a674:	68ba      	ldr	r2, [r7, #8]
 801a676:	441a      	add	r2, r3
 801a678:	69bb      	ldr	r3, [r7, #24]
 801a67a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801a67c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a680:	b29b      	uxth	r3, r3
 801a682:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a686:	4619      	mov	r1, r3
 801a688:	2036      	movs	r0, #54	@ 0x36
 801a68a:	f7fa fb49 	bl	8014d20 <pbuf_alloc>
 801a68e:	6378      	str	r0, [r7, #52]	@ 0x34
 801a690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a692:	2b00      	cmp	r3, #0
 801a694:	d103      	bne.n	801a69e <tcp_write+0x43a>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801a696:	69b8      	ldr	r0, [r7, #24]
 801a698:	f7fa fe74 	bl	8015384 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801a69c:	e166      	b.n	801a96c <tcp_write+0x708>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801a69e:	69b9      	ldr	r1, [r7, #24]
 801a6a0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801a6a2:	f7fa ff55 	bl	8015550 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801a6a6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801a6a8:	f7fa ff12 	bl	80154d0 <pbuf_clen>
 801a6ac:	4603      	mov	r3, r0
 801a6ae:	461a      	mov	r2, r3
 801a6b0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 801a6b4:	4413      	add	r3, r2
 801a6b6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801a6ba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 801a6be:	2b09      	cmp	r3, #9
 801a6c0:	d903      	bls.n	801a6ca <tcp_write+0x466>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801a6c2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801a6c4:	f7fa fe5e 	bl	8015384 <pbuf_free>
      goto memerr;
 801a6c8:	e150      	b.n	801a96c <tcp_write+0x708>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801a6ca:	68fb      	ldr	r3, [r7, #12]
 801a6cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801a6ce:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 801a6d2:	441a      	add	r2, r3
 801a6d4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801a6d8:	9300      	str	r3, [sp, #0]
 801a6da:	4613      	mov	r3, r2
 801a6dc:	2200      	movs	r2, #0
 801a6de:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801a6e0:	68f8      	ldr	r0, [r7, #12]
 801a6e2:	f7ff fc15 	bl	8019f10 <tcp_create_segment>
 801a6e6:	6578      	str	r0, [r7, #84]	@ 0x54
 801a6e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a6ea:	2b00      	cmp	r3, #0
 801a6ec:	f000 813d 	beq.w	801a96a <tcp_write+0x706>
      goto memerr;
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = oversize;
 801a6f0:	8afa      	ldrh	r2, [r7, #22]
 801a6f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a6f4:	815a      	strh	r2, [r3, #10]
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801a6f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a6f8:	2b00      	cmp	r3, #0
 801a6fa:	d102      	bne.n	801a702 <tcp_write+0x49e>
      queue = seg;
 801a6fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a6fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801a700:	e00c      	b.n	801a71c <tcp_write+0x4b8>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801a702:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a704:	2b00      	cmp	r3, #0
 801a706:	d106      	bne.n	801a716 <tcp_write+0x4b2>
 801a708:	4b17      	ldr	r3, [pc, #92]	@ (801a768 <tcp_write+0x504>)
 801a70a:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801a70e:	491b      	ldr	r1, [pc, #108]	@ (801a77c <tcp_write+0x518>)
 801a710:	4817      	ldr	r0, [pc, #92]	@ (801a770 <tcp_write+0x50c>)
 801a712:	f006 fcd7 	bl	80210c4 <iprintf>
      prev_seg->next = seg;
 801a716:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a718:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a71a:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801a71c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a71e:	653b      	str	r3, [r7, #80]	@ 0x50

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801a720:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 801a724:	8bbb      	ldrh	r3, [r7, #28]
 801a726:	4413      	add	r3, r2
 801a728:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
  while (pos < len) {
 801a72c:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 801a730:	88fb      	ldrh	r3, [r7, #6]
 801a732:	429a      	cmp	r2, r3
 801a734:	f4ff af3a 	bcc.w	801a5ac <tcp_write+0x348>
  /*
   * All three segmentation phases were successful. We can commit the
   * transaction.
   */
#if TCP_OVERSIZE_DBGCHECK
  if ((last_unsent != NULL) && (oversize_add != 0)) {
 801a738:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a73a:	2b00      	cmp	r3, #0
 801a73c:	d00b      	beq.n	801a756 <tcp_write+0x4f2>
 801a73e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 801a742:	2b00      	cmp	r3, #0
 801a744:	d007      	beq.n	801a756 <tcp_write+0x4f2>
    last_unsent->oversize_left += oversize_add;
 801a746:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a748:	895a      	ldrh	r2, [r3, #10]
 801a74a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 801a74e:	4413      	add	r3, r2
 801a750:	b29a      	uxth	r2, r3
 801a752:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a754:	815a      	strh	r2, [r3, #10]
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801a756:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a75a:	2b00      	cmp	r3, #0
 801a75c:	d052      	beq.n	801a804 <tcp_write+0x5a0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801a75e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a760:	685b      	ldr	r3, [r3, #4]
 801a762:	633b      	str	r3, [r7, #48]	@ 0x30
 801a764:	e02e      	b.n	801a7c4 <tcp_write+0x560>
 801a766:	bf00      	nop
 801a768:	08025138 	.word	0x08025138
 801a76c:	080253d8 	.word	0x080253d8
 801a770:	0802518c 	.word	0x0802518c
 801a774:	08025408 	.word	0x08025408
 801a778:	08025448 	.word	0x08025448
 801a77c:	08025458 	.word	0x08025458
      p->tot_len += oversize_used;
 801a780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a782:	891a      	ldrh	r2, [r3, #8]
 801a784:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a788:	4413      	add	r3, r2
 801a78a:	b29a      	uxth	r2, r3
 801a78c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a78e:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801a790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a792:	681b      	ldr	r3, [r3, #0]
 801a794:	2b00      	cmp	r3, #0
 801a796:	d112      	bne.n	801a7be <tcp_write+0x55a>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801a798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a79a:	685b      	ldr	r3, [r3, #4]
 801a79c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a79e:	8952      	ldrh	r2, [r2, #10]
 801a7a0:	4413      	add	r3, r2
 801a7a2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801a7a6:	68b9      	ldr	r1, [r7, #8]
 801a7a8:	4618      	mov	r0, r3
 801a7aa:	f006 feb0 	bl	802150e <memcpy>
        p->len += oversize_used;
 801a7ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a7b0:	895a      	ldrh	r2, [r3, #10]
 801a7b2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a7b6:	4413      	add	r3, r2
 801a7b8:	b29a      	uxth	r2, r3
 801a7ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a7bc:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801a7be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a7c0:	681b      	ldr	r3, [r3, #0]
 801a7c2:	633b      	str	r3, [r7, #48]	@ 0x30
 801a7c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a7c6:	2b00      	cmp	r3, #0
 801a7c8:	d1da      	bne.n	801a780 <tcp_write+0x51c>
      }
    }
    last_unsent->len += oversize_used;
 801a7ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a7cc:	891a      	ldrh	r2, [r3, #8]
 801a7ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a7d2:	4413      	add	r3, r2
 801a7d4:	b29a      	uxth	r2, r3
 801a7d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a7d8:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 801a7da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a7dc:	895b      	ldrh	r3, [r3, #10]
 801a7de:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801a7e2:	429a      	cmp	r2, r3
 801a7e4:	d906      	bls.n	801a7f4 <tcp_write+0x590>
 801a7e6:	4b7c      	ldr	r3, [pc, #496]	@ (801a9d8 <tcp_write+0x774>)
 801a7e8:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801a7ec:	497b      	ldr	r1, [pc, #492]	@ (801a9dc <tcp_write+0x778>)
 801a7ee:	487c      	ldr	r0, [pc, #496]	@ (801a9e0 <tcp_write+0x77c>)
 801a7f0:	f006 fc68 	bl	80210c4 <iprintf>
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
 801a7f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a7f6:	895a      	ldrh	r2, [r3, #10]
 801a7f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a7fc:	1ad3      	subs	r3, r2, r3
 801a7fe:	b29a      	uxth	r2, r3
 801a800:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a802:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801a804:	8afa      	ldrh	r2, [r7, #22]
 801a806:	68fb      	ldr	r3, [r7, #12]
 801a808:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801a80c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a80e:	2b00      	cmp	r3, #0
 801a810:	d018      	beq.n	801a844 <tcp_write+0x5e0>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801a812:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a814:	2b00      	cmp	r3, #0
 801a816:	d106      	bne.n	801a826 <tcp_write+0x5c2>
 801a818:	4b6f      	ldr	r3, [pc, #444]	@ (801a9d8 <tcp_write+0x774>)
 801a81a:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 801a81e:	4971      	ldr	r1, [pc, #452]	@ (801a9e4 <tcp_write+0x780>)
 801a820:	486f      	ldr	r0, [pc, #444]	@ (801a9e0 <tcp_write+0x77c>)
 801a822:	f006 fc4f 	bl	80210c4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801a826:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a828:	685b      	ldr	r3, [r3, #4]
 801a82a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801a82c:	4618      	mov	r0, r3
 801a82e:	f7fa fe8f 	bl	8015550 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801a832:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a834:	891a      	ldrh	r2, [r3, #8]
 801a836:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a838:	891b      	ldrh	r3, [r3, #8]
 801a83a:	4413      	add	r3, r2
 801a83c:	b29a      	uxth	r2, r3
 801a83e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a840:	811a      	strh	r2, [r3, #8]
 801a842:	e03c      	b.n	801a8be <tcp_write+0x65a>
  } else if (extendlen > 0) {
 801a844:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 801a848:	2b00      	cmp	r3, #0
 801a84a:	d038      	beq.n	801a8be <tcp_write+0x65a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801a84c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a84e:	2b00      	cmp	r3, #0
 801a850:	d003      	beq.n	801a85a <tcp_write+0x5f6>
 801a852:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a854:	685b      	ldr	r3, [r3, #4]
 801a856:	2b00      	cmp	r3, #0
 801a858:	d106      	bne.n	801a868 <tcp_write+0x604>
 801a85a:	4b5f      	ldr	r3, [pc, #380]	@ (801a9d8 <tcp_write+0x774>)
 801a85c:	f240 22e6 	movw	r2, #742	@ 0x2e6
 801a860:	4961      	ldr	r1, [pc, #388]	@ (801a9e8 <tcp_write+0x784>)
 801a862:	485f      	ldr	r0, [pc, #380]	@ (801a9e0 <tcp_write+0x77c>)
 801a864:	f006 fc2e 	bl	80210c4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801a868:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a86a:	685b      	ldr	r3, [r3, #4]
 801a86c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a86e:	e00a      	b.n	801a886 <tcp_write+0x622>
      p->tot_len += extendlen;
 801a870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a872:	891a      	ldrh	r2, [r3, #8]
 801a874:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 801a878:	4413      	add	r3, r2
 801a87a:	b29a      	uxth	r2, r3
 801a87c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a87e:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801a880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a882:	681b      	ldr	r3, [r3, #0]
 801a884:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a888:	681b      	ldr	r3, [r3, #0]
 801a88a:	2b00      	cmp	r3, #0
 801a88c:	d1f0      	bne.n	801a870 <tcp_write+0x60c>
    }
    p->tot_len += extendlen;
 801a88e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a890:	891a      	ldrh	r2, [r3, #8]
 801a892:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 801a896:	4413      	add	r3, r2
 801a898:	b29a      	uxth	r2, r3
 801a89a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a89c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801a89e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a8a0:	895a      	ldrh	r2, [r3, #10]
 801a8a2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 801a8a6:	4413      	add	r3, r2
 801a8a8:	b29a      	uxth	r2, r3
 801a8aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a8ac:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801a8ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a8b0:	891a      	ldrh	r2, [r3, #8]
 801a8b2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 801a8b6:	4413      	add	r3, r2
 801a8b8:	b29a      	uxth	r2, r3
 801a8ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a8bc:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801a8be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a8c0:	2b00      	cmp	r3, #0
 801a8c2:	d103      	bne.n	801a8cc <tcp_write+0x668>
    pcb->unsent = queue;
 801a8c4:	68fb      	ldr	r3, [r7, #12]
 801a8c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801a8c8:	66da      	str	r2, [r3, #108]	@ 0x6c
 801a8ca:	e002      	b.n	801a8d2 <tcp_write+0x66e>
  } else {
    last_unsent->next = queue;
 801a8cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a8ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801a8d0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801a8d2:	68fb      	ldr	r3, [r7, #12]
 801a8d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801a8d6:	88fb      	ldrh	r3, [r7, #6]
 801a8d8:	441a      	add	r2, r3
 801a8da:	68fb      	ldr	r3, [r7, #12]
 801a8dc:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 801a8de:	68fb      	ldr	r3, [r7, #12]
 801a8e0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 801a8e4:	88fb      	ldrh	r3, [r7, #6]
 801a8e6:	1ad3      	subs	r3, r2, r3
 801a8e8:	b29a      	uxth	r2, r3
 801a8ea:	68fb      	ldr	r3, [r7, #12]
 801a8ec:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 801a8f0:	68fb      	ldr	r3, [r7, #12]
 801a8f2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 801a8f6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801a8fa:	68fb      	ldr	r3, [r7, #12]
 801a8fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a900:	2b00      	cmp	r3, #0
 801a902:	d00e      	beq.n	801a922 <tcp_write+0x6be>
    LWIP_ASSERT("tcp_write: valid queue length",
 801a904:	68fb      	ldr	r3, [r7, #12]
 801a906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a908:	2b00      	cmp	r3, #0
 801a90a:	d10a      	bne.n	801a922 <tcp_write+0x6be>
 801a90c:	68fb      	ldr	r3, [r7, #12]
 801a90e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a910:	2b00      	cmp	r3, #0
 801a912:	d106      	bne.n	801a922 <tcp_write+0x6be>
 801a914:	4b30      	ldr	r3, [pc, #192]	@ (801a9d8 <tcp_write+0x774>)
 801a916:	f240 3212 	movw	r2, #786	@ 0x312
 801a91a:	4934      	ldr	r1, [pc, #208]	@ (801a9ec <tcp_write+0x788>)
 801a91c:	4830      	ldr	r0, [pc, #192]	@ (801a9e0 <tcp_write+0x77c>)
 801a91e:	f006 fbd1 	bl	80210c4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801a922:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a924:	2b00      	cmp	r3, #0
 801a926:	d016      	beq.n	801a956 <tcp_write+0x6f2>
 801a928:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a92a:	691b      	ldr	r3, [r3, #16]
 801a92c:	2b00      	cmp	r3, #0
 801a92e:	d012      	beq.n	801a956 <tcp_write+0x6f2>
 801a930:	797b      	ldrb	r3, [r7, #5]
 801a932:	f003 0302 	and.w	r3, r3, #2
 801a936:	2b00      	cmp	r3, #0
 801a938:	d10d      	bne.n	801a956 <tcp_write+0x6f2>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801a93a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a93c:	691b      	ldr	r3, [r3, #16]
 801a93e:	899b      	ldrh	r3, [r3, #12]
 801a940:	b29c      	uxth	r4, r3
 801a942:	2008      	movs	r0, #8
 801a944:	f7f8 fda4 	bl	8013490 <lwip_htons>
 801a948:	4603      	mov	r3, r0
 801a94a:	461a      	mov	r2, r3
 801a94c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a94e:	691b      	ldr	r3, [r3, #16]
 801a950:	4322      	orrs	r2, r4
 801a952:	b292      	uxth	r2, r2
 801a954:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801a956:	2300      	movs	r3, #0
 801a958:	e039      	b.n	801a9ce <tcp_write+0x76a>
          goto memerr;
 801a95a:	bf00      	nop
 801a95c:	e006      	b.n	801a96c <tcp_write+0x708>
            goto memerr;
 801a95e:	bf00      	nop
 801a960:	e004      	b.n	801a96c <tcp_write+0x708>
        goto memerr;
 801a962:	bf00      	nop
 801a964:	e002      	b.n	801a96c <tcp_write+0x708>
        goto memerr;
 801a966:	bf00      	nop
 801a968:	e000      	b.n	801a96c <tcp_write+0x708>
      goto memerr;
 801a96a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a96c:	68fb      	ldr	r3, [r7, #12]
 801a96e:	8b5b      	ldrh	r3, [r3, #26]
 801a970:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a974:	b29a      	uxth	r2, r3
 801a976:	68fb      	ldr	r3, [r7, #12]
 801a978:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);
 801a97a:	4b1d      	ldr	r3, [pc, #116]	@ (801a9f0 <tcp_write+0x78c>)
 801a97c:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801a980:	3301      	adds	r3, #1
 801a982:	b29a      	uxth	r2, r3
 801a984:	4b1a      	ldr	r3, [pc, #104]	@ (801a9f0 <tcp_write+0x78c>)
 801a986:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

  if (concat_p != NULL) {
 801a98a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a98c:	2b00      	cmp	r3, #0
 801a98e:	d002      	beq.n	801a996 <tcp_write+0x732>
    pbuf_free(concat_p);
 801a990:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801a992:	f7fa fcf7 	bl	8015384 <pbuf_free>
  }
  if (queue != NULL) {
 801a996:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a998:	2b00      	cmp	r3, #0
 801a99a:	d002      	beq.n	801a9a2 <tcp_write+0x73e>
    tcp_segs_free(queue);
 801a99c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801a99e:	f7fc fa51 	bl	8016e44 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801a9a2:	68fb      	ldr	r3, [r7, #12]
 801a9a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a9a8:	2b00      	cmp	r3, #0
 801a9aa:	d00e      	beq.n	801a9ca <tcp_write+0x766>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801a9ac:	68fb      	ldr	r3, [r7, #12]
 801a9ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a9b0:	2b00      	cmp	r3, #0
 801a9b2:	d10a      	bne.n	801a9ca <tcp_write+0x766>
 801a9b4:	68fb      	ldr	r3, [r7, #12]
 801a9b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a9b8:	2b00      	cmp	r3, #0
 801a9ba:	d106      	bne.n	801a9ca <tcp_write+0x766>
 801a9bc:	4b06      	ldr	r3, [pc, #24]	@ (801a9d8 <tcp_write+0x774>)
 801a9be:	f240 3227 	movw	r2, #807	@ 0x327
 801a9c2:	490a      	ldr	r1, [pc, #40]	@ (801a9ec <tcp_write+0x788>)
 801a9c4:	4806      	ldr	r0, [pc, #24]	@ (801a9e0 <tcp_write+0x77c>)
 801a9c6:	f006 fb7d 	bl	80210c4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801a9ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801a9ce:	4618      	mov	r0, r3
 801a9d0:	3764      	adds	r7, #100	@ 0x64
 801a9d2:	46bd      	mov	sp, r7
 801a9d4:	bd90      	pop	{r4, r7, pc}
 801a9d6:	bf00      	nop
 801a9d8:	08025138 	.word	0x08025138
 801a9dc:	0802546c 	.word	0x0802546c
 801a9e0:	0802518c 	.word	0x0802518c
 801a9e4:	08025498 	.word	0x08025498
 801a9e8:	080254d0 	.word	0x080254d0
 801a9ec:	08025508 	.word	0x08025508
 801a9f0:	20028318 	.word	0x20028318

0801a9f4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801a9f4:	b590      	push	{r4, r7, lr}
 801a9f6:	b08b      	sub	sp, #44	@ 0x2c
 801a9f8:	af02      	add	r7, sp, #8
 801a9fa:	6078      	str	r0, [r7, #4]
 801a9fc:	460b      	mov	r3, r1
 801a9fe:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801aa00:	2300      	movs	r3, #0
 801aa02:	61bb      	str	r3, [r7, #24]
 801aa04:	2300      	movs	r3, #0
 801aa06:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801aa08:	2300      	movs	r3, #0
 801aa0a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801aa0c:	687b      	ldr	r3, [r7, #4]
 801aa0e:	2b00      	cmp	r3, #0
 801aa10:	d106      	bne.n	801aa20 <tcp_split_unsent_seg+0x2c>
 801aa12:	4b9b      	ldr	r3, [pc, #620]	@ (801ac80 <tcp_split_unsent_seg+0x28c>)
 801aa14:	f240 324b 	movw	r2, #843	@ 0x34b
 801aa18:	499a      	ldr	r1, [pc, #616]	@ (801ac84 <tcp_split_unsent_seg+0x290>)
 801aa1a:	489b      	ldr	r0, [pc, #620]	@ (801ac88 <tcp_split_unsent_seg+0x294>)
 801aa1c:	f006 fb52 	bl	80210c4 <iprintf>

  useg = pcb->unsent;
 801aa20:	687b      	ldr	r3, [r7, #4]
 801aa22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801aa24:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801aa26:	697b      	ldr	r3, [r7, #20]
 801aa28:	2b00      	cmp	r3, #0
 801aa2a:	d102      	bne.n	801aa32 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801aa2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801aa30:	e121      	b.n	801ac76 <tcp_split_unsent_seg+0x282>
  }

  if (split == 0) {
 801aa32:	887b      	ldrh	r3, [r7, #2]
 801aa34:	2b00      	cmp	r3, #0
 801aa36:	d109      	bne.n	801aa4c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801aa38:	4b91      	ldr	r3, [pc, #580]	@ (801ac80 <tcp_split_unsent_seg+0x28c>)
 801aa3a:	f240 3253 	movw	r2, #851	@ 0x353
 801aa3e:	4993      	ldr	r1, [pc, #588]	@ (801ac8c <tcp_split_unsent_seg+0x298>)
 801aa40:	4891      	ldr	r0, [pc, #580]	@ (801ac88 <tcp_split_unsent_seg+0x294>)
 801aa42:	f006 fb3f 	bl	80210c4 <iprintf>
    return ERR_VAL;
 801aa46:	f06f 0305 	mvn.w	r3, #5
 801aa4a:	e114      	b.n	801ac76 <tcp_split_unsent_seg+0x282>
  }

  if (useg->len <= split) {
 801aa4c:	697b      	ldr	r3, [r7, #20]
 801aa4e:	891b      	ldrh	r3, [r3, #8]
 801aa50:	887a      	ldrh	r2, [r7, #2]
 801aa52:	429a      	cmp	r2, r3
 801aa54:	d301      	bcc.n	801aa5a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801aa56:	2300      	movs	r3, #0
 801aa58:	e10d      	b.n	801ac76 <tcp_split_unsent_seg+0x282>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801aa5a:	687b      	ldr	r3, [r7, #4]
 801aa5c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801aa5e:	887a      	ldrh	r2, [r7, #2]
 801aa60:	429a      	cmp	r2, r3
 801aa62:	d906      	bls.n	801aa72 <tcp_split_unsent_seg+0x7e>
 801aa64:	4b86      	ldr	r3, [pc, #536]	@ (801ac80 <tcp_split_unsent_seg+0x28c>)
 801aa66:	f240 325b 	movw	r2, #859	@ 0x35b
 801aa6a:	4989      	ldr	r1, [pc, #548]	@ (801ac90 <tcp_split_unsent_seg+0x29c>)
 801aa6c:	4886      	ldr	r0, [pc, #536]	@ (801ac88 <tcp_split_unsent_seg+0x294>)
 801aa6e:	f006 fb29 	bl	80210c4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801aa72:	697b      	ldr	r3, [r7, #20]
 801aa74:	891b      	ldrh	r3, [r3, #8]
 801aa76:	2b00      	cmp	r3, #0
 801aa78:	d106      	bne.n	801aa88 <tcp_split_unsent_seg+0x94>
 801aa7a:	4b81      	ldr	r3, [pc, #516]	@ (801ac80 <tcp_split_unsent_seg+0x28c>)
 801aa7c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 801aa80:	4984      	ldr	r1, [pc, #528]	@ (801ac94 <tcp_split_unsent_seg+0x2a0>)
 801aa82:	4881      	ldr	r0, [pc, #516]	@ (801ac88 <tcp_split_unsent_seg+0x294>)
 801aa84:	f006 fb1e 	bl	80210c4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801aa88:	697b      	ldr	r3, [r7, #20]
 801aa8a:	7b1b      	ldrb	r3, [r3, #12]
 801aa8c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801aa8e:	7bfb      	ldrb	r3, [r7, #15]
 801aa90:	009b      	lsls	r3, r3, #2
 801aa92:	b2db      	uxtb	r3, r3
 801aa94:	f003 0304 	and.w	r3, r3, #4
 801aa98:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801aa9a:	697b      	ldr	r3, [r7, #20]
 801aa9c:	891a      	ldrh	r2, [r3, #8]
 801aa9e:	887b      	ldrh	r3, [r7, #2]
 801aaa0:	1ad3      	subs	r3, r2, r3
 801aaa2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801aaa4:	7bbb      	ldrb	r3, [r7, #14]
 801aaa6:	b29a      	uxth	r2, r3
 801aaa8:	89bb      	ldrh	r3, [r7, #12]
 801aaaa:	4413      	add	r3, r2
 801aaac:	b29b      	uxth	r3, r3
 801aaae:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801aab2:	4619      	mov	r1, r3
 801aab4:	2036      	movs	r0, #54	@ 0x36
 801aab6:	f7fa f933 	bl	8014d20 <pbuf_alloc>
 801aaba:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801aabc:	693b      	ldr	r3, [r7, #16]
 801aabe:	2b00      	cmp	r3, #0
 801aac0:	f000 80ba 	beq.w	801ac38 <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801aac4:	697b      	ldr	r3, [r7, #20]
 801aac6:	685b      	ldr	r3, [r3, #4]
 801aac8:	891a      	ldrh	r2, [r3, #8]
 801aaca:	697b      	ldr	r3, [r7, #20]
 801aacc:	891b      	ldrh	r3, [r3, #8]
 801aace:	1ad3      	subs	r3, r2, r3
 801aad0:	b29a      	uxth	r2, r3
 801aad2:	887b      	ldrh	r3, [r7, #2]
 801aad4:	4413      	add	r3, r2
 801aad6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801aad8:	697b      	ldr	r3, [r7, #20]
 801aada:	6858      	ldr	r0, [r3, #4]
 801aadc:	693b      	ldr	r3, [r7, #16]
 801aade:	685a      	ldr	r2, [r3, #4]
 801aae0:	7bbb      	ldrb	r3, [r7, #14]
 801aae2:	18d1      	adds	r1, r2, r3
 801aae4:	897b      	ldrh	r3, [r7, #10]
 801aae6:	89ba      	ldrh	r2, [r7, #12]
 801aae8:	f7fa fe7e 	bl	80157e8 <pbuf_copy_partial>
 801aaec:	4603      	mov	r3, r0
 801aaee:	461a      	mov	r2, r3
 801aaf0:	89bb      	ldrh	r3, [r7, #12]
 801aaf2:	4293      	cmp	r3, r2
 801aaf4:	f040 80a2 	bne.w	801ac3c <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801aaf8:	697b      	ldr	r3, [r7, #20]
 801aafa:	691b      	ldr	r3, [r3, #16]
 801aafc:	899b      	ldrh	r3, [r3, #12]
 801aafe:	b29b      	uxth	r3, r3
 801ab00:	4618      	mov	r0, r3
 801ab02:	f7f8 fcc5 	bl	8013490 <lwip_htons>
 801ab06:	4603      	mov	r3, r0
 801ab08:	b2db      	uxtb	r3, r3
 801ab0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ab0e:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801ab10:	2300      	movs	r3, #0
 801ab12:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 801ab14:	7ffb      	ldrb	r3, [r7, #31]
 801ab16:	f003 0308 	and.w	r3, r3, #8
 801ab1a:	2b00      	cmp	r3, #0
 801ab1c:	d007      	beq.n	801ab2e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801ab1e:	7ffb      	ldrb	r3, [r7, #31]
 801ab20:	f023 0308 	bic.w	r3, r3, #8
 801ab24:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 801ab26:	7fbb      	ldrb	r3, [r7, #30]
 801ab28:	f043 0308 	orr.w	r3, r3, #8
 801ab2c:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 801ab2e:	7ffb      	ldrb	r3, [r7, #31]
 801ab30:	f003 0301 	and.w	r3, r3, #1
 801ab34:	2b00      	cmp	r3, #0
 801ab36:	d007      	beq.n	801ab48 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801ab38:	7ffb      	ldrb	r3, [r7, #31]
 801ab3a:	f023 0301 	bic.w	r3, r3, #1
 801ab3e:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 801ab40:	7fbb      	ldrb	r3, [r7, #30]
 801ab42:	f043 0301 	orr.w	r3, r3, #1
 801ab46:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801ab48:	697b      	ldr	r3, [r7, #20]
 801ab4a:	691b      	ldr	r3, [r3, #16]
 801ab4c:	685b      	ldr	r3, [r3, #4]
 801ab4e:	4618      	mov	r0, r3
 801ab50:	f7f8 fcb4 	bl	80134bc <lwip_htonl>
 801ab54:	4602      	mov	r2, r0
 801ab56:	887b      	ldrh	r3, [r7, #2]
 801ab58:	18d1      	adds	r1, r2, r3
 801ab5a:	7fba      	ldrb	r2, [r7, #30]
 801ab5c:	7bfb      	ldrb	r3, [r7, #15]
 801ab5e:	9300      	str	r3, [sp, #0]
 801ab60:	460b      	mov	r3, r1
 801ab62:	6939      	ldr	r1, [r7, #16]
 801ab64:	6878      	ldr	r0, [r7, #4]
 801ab66:	f7ff f9d3 	bl	8019f10 <tcp_create_segment>
 801ab6a:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 801ab6c:	69bb      	ldr	r3, [r7, #24]
 801ab6e:	2b00      	cmp	r3, #0
 801ab70:	d066      	beq.n	801ac40 <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801ab72:	697b      	ldr	r3, [r7, #20]
 801ab74:	685b      	ldr	r3, [r3, #4]
 801ab76:	4618      	mov	r0, r3
 801ab78:	f7fa fcaa 	bl	80154d0 <pbuf_clen>
 801ab7c:	4603      	mov	r3, r0
 801ab7e:	461a      	mov	r2, r3
 801ab80:	687b      	ldr	r3, [r7, #4]
 801ab82:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801ab86:	1a9b      	subs	r3, r3, r2
 801ab88:	b29a      	uxth	r2, r3
 801ab8a:	687b      	ldr	r3, [r7, #4]
 801ab8c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801ab90:	697b      	ldr	r3, [r7, #20]
 801ab92:	6858      	ldr	r0, [r3, #4]
 801ab94:	697b      	ldr	r3, [r7, #20]
 801ab96:	685b      	ldr	r3, [r3, #4]
 801ab98:	891a      	ldrh	r2, [r3, #8]
 801ab9a:	89bb      	ldrh	r3, [r7, #12]
 801ab9c:	1ad3      	subs	r3, r2, r3
 801ab9e:	b29b      	uxth	r3, r3
 801aba0:	4619      	mov	r1, r3
 801aba2:	f7fa fa4f 	bl	8015044 <pbuf_realloc>
  useg->len -= remainder;
 801aba6:	697b      	ldr	r3, [r7, #20]
 801aba8:	891a      	ldrh	r2, [r3, #8]
 801abaa:	89bb      	ldrh	r3, [r7, #12]
 801abac:	1ad3      	subs	r3, r2, r3
 801abae:	b29a      	uxth	r2, r3
 801abb0:	697b      	ldr	r3, [r7, #20]
 801abb2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801abb4:	697b      	ldr	r3, [r7, #20]
 801abb6:	691b      	ldr	r3, [r3, #16]
 801abb8:	899b      	ldrh	r3, [r3, #12]
 801abba:	b29c      	uxth	r4, r3
 801abbc:	7ffb      	ldrb	r3, [r7, #31]
 801abbe:	b29b      	uxth	r3, r3
 801abc0:	4618      	mov	r0, r3
 801abc2:	f7f8 fc65 	bl	8013490 <lwip_htons>
 801abc6:	4603      	mov	r3, r0
 801abc8:	461a      	mov	r2, r3
 801abca:	697b      	ldr	r3, [r7, #20]
 801abcc:	691b      	ldr	r3, [r3, #16]
 801abce:	4322      	orrs	r2, r4
 801abd0:	b292      	uxth	r2, r2
 801abd2:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 801abd4:	697b      	ldr	r3, [r7, #20]
 801abd6:	2200      	movs	r2, #0
 801abd8:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801abda:	697b      	ldr	r3, [r7, #20]
 801abdc:	685b      	ldr	r3, [r3, #4]
 801abde:	4618      	mov	r0, r3
 801abe0:	f7fa fc76 	bl	80154d0 <pbuf_clen>
 801abe4:	4603      	mov	r3, r0
 801abe6:	461a      	mov	r2, r3
 801abe8:	687b      	ldr	r3, [r7, #4]
 801abea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801abee:	4413      	add	r3, r2
 801abf0:	b29a      	uxth	r2, r3
 801abf2:	687b      	ldr	r3, [r7, #4]
 801abf4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801abf8:	69bb      	ldr	r3, [r7, #24]
 801abfa:	685b      	ldr	r3, [r3, #4]
 801abfc:	4618      	mov	r0, r3
 801abfe:	f7fa fc67 	bl	80154d0 <pbuf_clen>
 801ac02:	4603      	mov	r3, r0
 801ac04:	461a      	mov	r2, r3
 801ac06:	687b      	ldr	r3, [r7, #4]
 801ac08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801ac0c:	4413      	add	r3, r2
 801ac0e:	b29a      	uxth	r2, r3
 801ac10:	687b      	ldr	r3, [r7, #4]
 801ac12:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801ac16:	697b      	ldr	r3, [r7, #20]
 801ac18:	681a      	ldr	r2, [r3, #0]
 801ac1a:	69bb      	ldr	r3, [r7, #24]
 801ac1c:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801ac1e:	697b      	ldr	r3, [r7, #20]
 801ac20:	69ba      	ldr	r2, [r7, #24]
 801ac22:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801ac24:	69bb      	ldr	r3, [r7, #24]
 801ac26:	681b      	ldr	r3, [r3, #0]
 801ac28:	2b00      	cmp	r3, #0
 801ac2a:	d103      	bne.n	801ac34 <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 801ac2c:	687b      	ldr	r3, [r7, #4]
 801ac2e:	2200      	movs	r2, #0
 801ac30:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801ac34:	2300      	movs	r3, #0
 801ac36:	e01e      	b.n	801ac76 <tcp_split_unsent_seg+0x282>
    goto memerr;
 801ac38:	bf00      	nop
 801ac3a:	e002      	b.n	801ac42 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 801ac3c:	bf00      	nop
 801ac3e:	e000      	b.n	801ac42 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 801ac40:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);
 801ac42:	4b15      	ldr	r3, [pc, #84]	@ (801ac98 <tcp_split_unsent_seg+0x2a4>)
 801ac44:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801ac48:	3301      	adds	r3, #1
 801ac4a:	b29a      	uxth	r2, r3
 801ac4c:	4b12      	ldr	r3, [pc, #72]	@ (801ac98 <tcp_split_unsent_seg+0x2a4>)
 801ac4e:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801ac52:	69bb      	ldr	r3, [r7, #24]
 801ac54:	2b00      	cmp	r3, #0
 801ac56:	d006      	beq.n	801ac66 <tcp_split_unsent_seg+0x272>
 801ac58:	4b09      	ldr	r3, [pc, #36]	@ (801ac80 <tcp_split_unsent_seg+0x28c>)
 801ac5a:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 801ac5e:	490f      	ldr	r1, [pc, #60]	@ (801ac9c <tcp_split_unsent_seg+0x2a8>)
 801ac60:	4809      	ldr	r0, [pc, #36]	@ (801ac88 <tcp_split_unsent_seg+0x294>)
 801ac62:	f006 fa2f 	bl	80210c4 <iprintf>
  if (p != NULL) {
 801ac66:	693b      	ldr	r3, [r7, #16]
 801ac68:	2b00      	cmp	r3, #0
 801ac6a:	d002      	beq.n	801ac72 <tcp_split_unsent_seg+0x27e>
    pbuf_free(p);
 801ac6c:	6938      	ldr	r0, [r7, #16]
 801ac6e:	f7fa fb89 	bl	8015384 <pbuf_free>
  }

  return ERR_MEM;
 801ac72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801ac76:	4618      	mov	r0, r3
 801ac78:	3724      	adds	r7, #36	@ 0x24
 801ac7a:	46bd      	mov	sp, r7
 801ac7c:	bd90      	pop	{r4, r7, pc}
 801ac7e:	bf00      	nop
 801ac80:	08025138 	.word	0x08025138
 801ac84:	08025528 	.word	0x08025528
 801ac88:	0802518c 	.word	0x0802518c
 801ac8c:	0802554c 	.word	0x0802554c
 801ac90:	08025570 	.word	0x08025570
 801ac94:	08025580 	.word	0x08025580
 801ac98:	20028318 	.word	0x20028318
 801ac9c:	08025590 	.word	0x08025590

0801aca0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801aca0:	b590      	push	{r4, r7, lr}
 801aca2:	b085      	sub	sp, #20
 801aca4:	af00      	add	r7, sp, #0
 801aca6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801aca8:	687b      	ldr	r3, [r7, #4]
 801acaa:	2b00      	cmp	r3, #0
 801acac:	d106      	bne.n	801acbc <tcp_send_fin+0x1c>
 801acae:	4b21      	ldr	r3, [pc, #132]	@ (801ad34 <tcp_send_fin+0x94>)
 801acb0:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 801acb4:	4920      	ldr	r1, [pc, #128]	@ (801ad38 <tcp_send_fin+0x98>)
 801acb6:	4821      	ldr	r0, [pc, #132]	@ (801ad3c <tcp_send_fin+0x9c>)
 801acb8:	f006 fa04 	bl	80210c4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801acbc:	687b      	ldr	r3, [r7, #4]
 801acbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801acc0:	2b00      	cmp	r3, #0
 801acc2:	d02e      	beq.n	801ad22 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801acc4:	687b      	ldr	r3, [r7, #4]
 801acc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801acc8:	60fb      	str	r3, [r7, #12]
 801acca:	e002      	b.n	801acd2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801accc:	68fb      	ldr	r3, [r7, #12]
 801acce:	681b      	ldr	r3, [r3, #0]
 801acd0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801acd2:	68fb      	ldr	r3, [r7, #12]
 801acd4:	681b      	ldr	r3, [r3, #0]
 801acd6:	2b00      	cmp	r3, #0
 801acd8:	d1f8      	bne.n	801accc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801acda:	68fb      	ldr	r3, [r7, #12]
 801acdc:	691b      	ldr	r3, [r3, #16]
 801acde:	899b      	ldrh	r3, [r3, #12]
 801ace0:	b29b      	uxth	r3, r3
 801ace2:	4618      	mov	r0, r3
 801ace4:	f7f8 fbd4 	bl	8013490 <lwip_htons>
 801ace8:	4603      	mov	r3, r0
 801acea:	b2db      	uxtb	r3, r3
 801acec:	f003 0307 	and.w	r3, r3, #7
 801acf0:	2b00      	cmp	r3, #0
 801acf2:	d116      	bne.n	801ad22 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801acf4:	68fb      	ldr	r3, [r7, #12]
 801acf6:	691b      	ldr	r3, [r3, #16]
 801acf8:	899b      	ldrh	r3, [r3, #12]
 801acfa:	b29c      	uxth	r4, r3
 801acfc:	2001      	movs	r0, #1
 801acfe:	f7f8 fbc7 	bl	8013490 <lwip_htons>
 801ad02:	4603      	mov	r3, r0
 801ad04:	461a      	mov	r2, r3
 801ad06:	68fb      	ldr	r3, [r7, #12]
 801ad08:	691b      	ldr	r3, [r3, #16]
 801ad0a:	4322      	orrs	r2, r4
 801ad0c:	b292      	uxth	r2, r2
 801ad0e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801ad10:	687b      	ldr	r3, [r7, #4]
 801ad12:	8b5b      	ldrh	r3, [r3, #26]
 801ad14:	f043 0320 	orr.w	r3, r3, #32
 801ad18:	b29a      	uxth	r2, r3
 801ad1a:	687b      	ldr	r3, [r7, #4]
 801ad1c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801ad1e:	2300      	movs	r3, #0
 801ad20:	e004      	b.n	801ad2c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801ad22:	2101      	movs	r1, #1
 801ad24:	6878      	ldr	r0, [r7, #4]
 801ad26:	f000 f80b 	bl	801ad40 <tcp_enqueue_flags>
 801ad2a:	4603      	mov	r3, r0
}
 801ad2c:	4618      	mov	r0, r3
 801ad2e:	3714      	adds	r7, #20
 801ad30:	46bd      	mov	sp, r7
 801ad32:	bd90      	pop	{r4, r7, pc}
 801ad34:	08025138 	.word	0x08025138
 801ad38:	0802559c 	.word	0x0802559c
 801ad3c:	0802518c 	.word	0x0802518c

0801ad40 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801ad40:	b580      	push	{r7, lr}
 801ad42:	b088      	sub	sp, #32
 801ad44:	af02      	add	r7, sp, #8
 801ad46:	6078      	str	r0, [r7, #4]
 801ad48:	460b      	mov	r3, r1
 801ad4a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801ad4c:	2300      	movs	r3, #0
 801ad4e:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 801ad50:	2300      	movs	r3, #0
 801ad52:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801ad54:	78fb      	ldrb	r3, [r7, #3]
 801ad56:	f003 0303 	and.w	r3, r3, #3
 801ad5a:	2b00      	cmp	r3, #0
 801ad5c:	d106      	bne.n	801ad6c <tcp_enqueue_flags+0x2c>
 801ad5e:	4b6f      	ldr	r3, [pc, #444]	@ (801af1c <tcp_enqueue_flags+0x1dc>)
 801ad60:	f240 4211 	movw	r2, #1041	@ 0x411
 801ad64:	496e      	ldr	r1, [pc, #440]	@ (801af20 <tcp_enqueue_flags+0x1e0>)
 801ad66:	486f      	ldr	r0, [pc, #444]	@ (801af24 <tcp_enqueue_flags+0x1e4>)
 801ad68:	f006 f9ac 	bl	80210c4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801ad6c:	687b      	ldr	r3, [r7, #4]
 801ad6e:	2b00      	cmp	r3, #0
 801ad70:	d106      	bne.n	801ad80 <tcp_enqueue_flags+0x40>
 801ad72:	4b6a      	ldr	r3, [pc, #424]	@ (801af1c <tcp_enqueue_flags+0x1dc>)
 801ad74:	f240 4213 	movw	r2, #1043	@ 0x413
 801ad78:	496b      	ldr	r1, [pc, #428]	@ (801af28 <tcp_enqueue_flags+0x1e8>)
 801ad7a:	486a      	ldr	r0, [pc, #424]	@ (801af24 <tcp_enqueue_flags+0x1e4>)
 801ad7c:	f006 f9a2 	bl	80210c4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801ad80:	78fb      	ldrb	r3, [r7, #3]
 801ad82:	f003 0302 	and.w	r3, r3, #2
 801ad86:	2b00      	cmp	r3, #0
 801ad88:	d001      	beq.n	801ad8e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801ad8a:	2301      	movs	r3, #1
 801ad8c:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801ad8e:	7dfb      	ldrb	r3, [r7, #23]
 801ad90:	009b      	lsls	r3, r3, #2
 801ad92:	b2db      	uxtb	r3, r3
 801ad94:	f003 0304 	and.w	r3, r3, #4
 801ad98:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801ad9a:	7dbb      	ldrb	r3, [r7, #22]
 801ad9c:	b29b      	uxth	r3, r3
 801ad9e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801ada2:	4619      	mov	r1, r3
 801ada4:	2036      	movs	r0, #54	@ 0x36
 801ada6:	f7f9 ffbb 	bl	8014d20 <pbuf_alloc>
 801adaa:	60f8      	str	r0, [r7, #12]
 801adac:	68fb      	ldr	r3, [r7, #12]
 801adae:	2b00      	cmp	r3, #0
 801adb0:	d111      	bne.n	801add6 <tcp_enqueue_flags+0x96>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801adb2:	687b      	ldr	r3, [r7, #4]
 801adb4:	8b5b      	ldrh	r3, [r3, #26]
 801adb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801adba:	b29a      	uxth	r2, r3
 801adbc:	687b      	ldr	r3, [r7, #4]
 801adbe:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 801adc0:	4b5a      	ldr	r3, [pc, #360]	@ (801af2c <tcp_enqueue_flags+0x1ec>)
 801adc2:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801adc6:	3301      	adds	r3, #1
 801adc8:	b29a      	uxth	r2, r3
 801adca:	4b58      	ldr	r3, [pc, #352]	@ (801af2c <tcp_enqueue_flags+0x1ec>)
 801adcc:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    return ERR_MEM;
 801add0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801add4:	e09d      	b.n	801af12 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801add6:	68fb      	ldr	r3, [r7, #12]
 801add8:	895a      	ldrh	r2, [r3, #10]
 801adda:	7dbb      	ldrb	r3, [r7, #22]
 801addc:	b29b      	uxth	r3, r3
 801adde:	429a      	cmp	r2, r3
 801ade0:	d206      	bcs.n	801adf0 <tcp_enqueue_flags+0xb0>
 801ade2:	4b4e      	ldr	r3, [pc, #312]	@ (801af1c <tcp_enqueue_flags+0x1dc>)
 801ade4:	f240 4239 	movw	r2, #1081	@ 0x439
 801ade8:	4951      	ldr	r1, [pc, #324]	@ (801af30 <tcp_enqueue_flags+0x1f0>)
 801adea:	484e      	ldr	r0, [pc, #312]	@ (801af24 <tcp_enqueue_flags+0x1e4>)
 801adec:	f006 f96a 	bl	80210c4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801adf0:	687b      	ldr	r3, [r7, #4]
 801adf2:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 801adf4:	78fa      	ldrb	r2, [r7, #3]
 801adf6:	7dfb      	ldrb	r3, [r7, #23]
 801adf8:	9300      	str	r3, [sp, #0]
 801adfa:	460b      	mov	r3, r1
 801adfc:	68f9      	ldr	r1, [r7, #12]
 801adfe:	6878      	ldr	r0, [r7, #4]
 801ae00:	f7ff f886 	bl	8019f10 <tcp_create_segment>
 801ae04:	60b8      	str	r0, [r7, #8]
 801ae06:	68bb      	ldr	r3, [r7, #8]
 801ae08:	2b00      	cmp	r3, #0
 801ae0a:	d111      	bne.n	801ae30 <tcp_enqueue_flags+0xf0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ae0c:	687b      	ldr	r3, [r7, #4]
 801ae0e:	8b5b      	ldrh	r3, [r3, #26]
 801ae10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ae14:	b29a      	uxth	r2, r3
 801ae16:	687b      	ldr	r3, [r7, #4]
 801ae18:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 801ae1a:	4b44      	ldr	r3, [pc, #272]	@ (801af2c <tcp_enqueue_flags+0x1ec>)
 801ae1c:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801ae20:	3301      	adds	r3, #1
 801ae22:	b29a      	uxth	r2, r3
 801ae24:	4b41      	ldr	r3, [pc, #260]	@ (801af2c <tcp_enqueue_flags+0x1ec>)
 801ae26:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    return ERR_MEM;
 801ae2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ae2e:	e070      	b.n	801af12 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801ae30:	68bb      	ldr	r3, [r7, #8]
 801ae32:	691b      	ldr	r3, [r3, #16]
 801ae34:	f003 0303 	and.w	r3, r3, #3
 801ae38:	2b00      	cmp	r3, #0
 801ae3a:	d006      	beq.n	801ae4a <tcp_enqueue_flags+0x10a>
 801ae3c:	4b37      	ldr	r3, [pc, #220]	@ (801af1c <tcp_enqueue_flags+0x1dc>)
 801ae3e:	f240 4242 	movw	r2, #1090	@ 0x442
 801ae42:	493c      	ldr	r1, [pc, #240]	@ (801af34 <tcp_enqueue_flags+0x1f4>)
 801ae44:	4837      	ldr	r0, [pc, #220]	@ (801af24 <tcp_enqueue_flags+0x1e4>)
 801ae46:	f006 f93d 	bl	80210c4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801ae4a:	68bb      	ldr	r3, [r7, #8]
 801ae4c:	891b      	ldrh	r3, [r3, #8]
 801ae4e:	2b00      	cmp	r3, #0
 801ae50:	d006      	beq.n	801ae60 <tcp_enqueue_flags+0x120>
 801ae52:	4b32      	ldr	r3, [pc, #200]	@ (801af1c <tcp_enqueue_flags+0x1dc>)
 801ae54:	f240 4243 	movw	r2, #1091	@ 0x443
 801ae58:	4937      	ldr	r1, [pc, #220]	@ (801af38 <tcp_enqueue_flags+0x1f8>)
 801ae5a:	4832      	ldr	r0, [pc, #200]	@ (801af24 <tcp_enqueue_flags+0x1e4>)
 801ae5c:	f006 f932 	bl	80210c4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801ae60:	687b      	ldr	r3, [r7, #4]
 801ae62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ae64:	2b00      	cmp	r3, #0
 801ae66:	d103      	bne.n	801ae70 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 801ae68:	687b      	ldr	r3, [r7, #4]
 801ae6a:	68ba      	ldr	r2, [r7, #8]
 801ae6c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801ae6e:	e00d      	b.n	801ae8c <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801ae70:	687b      	ldr	r3, [r7, #4]
 801ae72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ae74:	613b      	str	r3, [r7, #16]
 801ae76:	e002      	b.n	801ae7e <tcp_enqueue_flags+0x13e>
 801ae78:	693b      	ldr	r3, [r7, #16]
 801ae7a:	681b      	ldr	r3, [r3, #0]
 801ae7c:	613b      	str	r3, [r7, #16]
 801ae7e:	693b      	ldr	r3, [r7, #16]
 801ae80:	681b      	ldr	r3, [r3, #0]
 801ae82:	2b00      	cmp	r3, #0
 801ae84:	d1f8      	bne.n	801ae78 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 801ae86:	693b      	ldr	r3, [r7, #16]
 801ae88:	68ba      	ldr	r2, [r7, #8]
 801ae8a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801ae8c:	687b      	ldr	r3, [r7, #4]
 801ae8e:	2200      	movs	r2, #0
 801ae90:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801ae94:	78fb      	ldrb	r3, [r7, #3]
 801ae96:	f003 0302 	and.w	r3, r3, #2
 801ae9a:	2b00      	cmp	r3, #0
 801ae9c:	d104      	bne.n	801aea8 <tcp_enqueue_flags+0x168>
 801ae9e:	78fb      	ldrb	r3, [r7, #3]
 801aea0:	f003 0301 	and.w	r3, r3, #1
 801aea4:	2b00      	cmp	r3, #0
 801aea6:	d004      	beq.n	801aeb2 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 801aea8:	687b      	ldr	r3, [r7, #4]
 801aeaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801aeac:	1c5a      	adds	r2, r3, #1
 801aeae:	687b      	ldr	r3, [r7, #4]
 801aeb0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801aeb2:	78fb      	ldrb	r3, [r7, #3]
 801aeb4:	f003 0301 	and.w	r3, r3, #1
 801aeb8:	2b00      	cmp	r3, #0
 801aeba:	d006      	beq.n	801aeca <tcp_enqueue_flags+0x18a>
    tcp_set_flags(pcb, TF_FIN);
 801aebc:	687b      	ldr	r3, [r7, #4]
 801aebe:	8b5b      	ldrh	r3, [r3, #26]
 801aec0:	f043 0320 	orr.w	r3, r3, #32
 801aec4:	b29a      	uxth	r2, r3
 801aec6:	687b      	ldr	r3, [r7, #4]
 801aec8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801aeca:	68bb      	ldr	r3, [r7, #8]
 801aecc:	685b      	ldr	r3, [r3, #4]
 801aece:	4618      	mov	r0, r3
 801aed0:	f7fa fafe 	bl	80154d0 <pbuf_clen>
 801aed4:	4603      	mov	r3, r0
 801aed6:	461a      	mov	r2, r3
 801aed8:	687b      	ldr	r3, [r7, #4]
 801aeda:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801aede:	4413      	add	r3, r2
 801aee0:	b29a      	uxth	r2, r3
 801aee2:	687b      	ldr	r3, [r7, #4]
 801aee4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801aee8:	687b      	ldr	r3, [r7, #4]
 801aeea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801aeee:	2b00      	cmp	r3, #0
 801aef0:	d00e      	beq.n	801af10 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801aef2:	687b      	ldr	r3, [r7, #4]
 801aef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801aef6:	2b00      	cmp	r3, #0
 801aef8:	d10a      	bne.n	801af10 <tcp_enqueue_flags+0x1d0>
 801aefa:	687b      	ldr	r3, [r7, #4]
 801aefc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801aefe:	2b00      	cmp	r3, #0
 801af00:	d106      	bne.n	801af10 <tcp_enqueue_flags+0x1d0>
 801af02:	4b06      	ldr	r3, [pc, #24]	@ (801af1c <tcp_enqueue_flags+0x1dc>)
 801af04:	f240 4265 	movw	r2, #1125	@ 0x465
 801af08:	490c      	ldr	r1, [pc, #48]	@ (801af3c <tcp_enqueue_flags+0x1fc>)
 801af0a:	4806      	ldr	r0, [pc, #24]	@ (801af24 <tcp_enqueue_flags+0x1e4>)
 801af0c:	f006 f8da 	bl	80210c4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801af10:	2300      	movs	r3, #0
}
 801af12:	4618      	mov	r0, r3
 801af14:	3718      	adds	r7, #24
 801af16:	46bd      	mov	sp, r7
 801af18:	bd80      	pop	{r7, pc}
 801af1a:	bf00      	nop
 801af1c:	08025138 	.word	0x08025138
 801af20:	080255b8 	.word	0x080255b8
 801af24:	0802518c 	.word	0x0802518c
 801af28:	08025610 	.word	0x08025610
 801af2c:	20028318 	.word	0x20028318
 801af30:	08025630 	.word	0x08025630
 801af34:	0802566c 	.word	0x0802566c
 801af38:	08025684 	.word	0x08025684
 801af3c:	080256b0 	.word	0x080256b0

0801af40 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801af40:	b5b0      	push	{r4, r5, r7, lr}
 801af42:	b08a      	sub	sp, #40	@ 0x28
 801af44:	af00      	add	r7, sp, #0
 801af46:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801af48:	687b      	ldr	r3, [r7, #4]
 801af4a:	2b00      	cmp	r3, #0
 801af4c:	d106      	bne.n	801af5c <tcp_output+0x1c>
 801af4e:	4b8a      	ldr	r3, [pc, #552]	@ (801b178 <tcp_output+0x238>)
 801af50:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 801af54:	4989      	ldr	r1, [pc, #548]	@ (801b17c <tcp_output+0x23c>)
 801af56:	488a      	ldr	r0, [pc, #552]	@ (801b180 <tcp_output+0x240>)
 801af58:	f006 f8b4 	bl	80210c4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801af5c:	687b      	ldr	r3, [r7, #4]
 801af5e:	7d1b      	ldrb	r3, [r3, #20]
 801af60:	2b01      	cmp	r3, #1
 801af62:	d106      	bne.n	801af72 <tcp_output+0x32>
 801af64:	4b84      	ldr	r3, [pc, #528]	@ (801b178 <tcp_output+0x238>)
 801af66:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 801af6a:	4986      	ldr	r1, [pc, #536]	@ (801b184 <tcp_output+0x244>)
 801af6c:	4884      	ldr	r0, [pc, #528]	@ (801b180 <tcp_output+0x240>)
 801af6e:	f006 f8a9 	bl	80210c4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801af72:	4b85      	ldr	r3, [pc, #532]	@ (801b188 <tcp_output+0x248>)
 801af74:	681b      	ldr	r3, [r3, #0]
 801af76:	687a      	ldr	r2, [r7, #4]
 801af78:	429a      	cmp	r2, r3
 801af7a:	d101      	bne.n	801af80 <tcp_output+0x40>
    return ERR_OK;
 801af7c:	2300      	movs	r3, #0
 801af7e:	e1d1      	b.n	801b324 <tcp_output+0x3e4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801af80:	687b      	ldr	r3, [r7, #4]
 801af82:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801af86:	687b      	ldr	r3, [r7, #4]
 801af88:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801af8c:	4293      	cmp	r3, r2
 801af8e:	bf28      	it	cs
 801af90:	4613      	movcs	r3, r2
 801af92:	b29b      	uxth	r3, r3
 801af94:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801af96:	687b      	ldr	r3, [r7, #4]
 801af98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801af9a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 801af9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af9e:	2b00      	cmp	r3, #0
 801afa0:	d10b      	bne.n	801afba <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801afa2:	687b      	ldr	r3, [r7, #4]
 801afa4:	8b5b      	ldrh	r3, [r3, #26]
 801afa6:	f003 0302 	and.w	r3, r3, #2
 801afaa:	2b00      	cmp	r3, #0
 801afac:	f000 81ad 	beq.w	801b30a <tcp_output+0x3ca>
      return tcp_send_empty_ack(pcb);
 801afb0:	6878      	ldr	r0, [r7, #4]
 801afb2:	f000 fdeb 	bl	801bb8c <tcp_send_empty_ack>
 801afb6:	4603      	mov	r3, r0
 801afb8:	e1b4      	b.n	801b324 <tcp_output+0x3e4>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801afba:	6879      	ldr	r1, [r7, #4]
 801afbc:	687b      	ldr	r3, [r7, #4]
 801afbe:	3304      	adds	r3, #4
 801afc0:	461a      	mov	r2, r3
 801afc2:	6878      	ldr	r0, [r7, #4]
 801afc4:	f7fe ff88 	bl	8019ed8 <tcp_route>
 801afc8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801afca:	697b      	ldr	r3, [r7, #20]
 801afcc:	2b00      	cmp	r3, #0
 801afce:	d102      	bne.n	801afd6 <tcp_output+0x96>
    return ERR_RTE;
 801afd0:	f06f 0303 	mvn.w	r3, #3
 801afd4:	e1a6      	b.n	801b324 <tcp_output+0x3e4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801afd6:	687b      	ldr	r3, [r7, #4]
 801afd8:	2b00      	cmp	r3, #0
 801afda:	d003      	beq.n	801afe4 <tcp_output+0xa4>
 801afdc:	687b      	ldr	r3, [r7, #4]
 801afde:	681b      	ldr	r3, [r3, #0]
 801afe0:	2b00      	cmp	r3, #0
 801afe2:	d111      	bne.n	801b008 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801afe4:	697b      	ldr	r3, [r7, #20]
 801afe6:	2b00      	cmp	r3, #0
 801afe8:	d002      	beq.n	801aff0 <tcp_output+0xb0>
 801afea:	697b      	ldr	r3, [r7, #20]
 801afec:	3304      	adds	r3, #4
 801afee:	e000      	b.n	801aff2 <tcp_output+0xb2>
 801aff0:	2300      	movs	r3, #0
 801aff2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801aff4:	693b      	ldr	r3, [r7, #16]
 801aff6:	2b00      	cmp	r3, #0
 801aff8:	d102      	bne.n	801b000 <tcp_output+0xc0>
      return ERR_RTE;
 801affa:	f06f 0303 	mvn.w	r3, #3
 801affe:	e191      	b.n	801b324 <tcp_output+0x3e4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801b000:	693b      	ldr	r3, [r7, #16]
 801b002:	681a      	ldr	r2, [r3, #0]
 801b004:	687b      	ldr	r3, [r7, #4]
 801b006:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801b008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b00a:	691b      	ldr	r3, [r3, #16]
 801b00c:	685b      	ldr	r3, [r3, #4]
 801b00e:	4618      	mov	r0, r3
 801b010:	f7f8 fa54 	bl	80134bc <lwip_htonl>
 801b014:	4602      	mov	r2, r0
 801b016:	687b      	ldr	r3, [r7, #4]
 801b018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b01a:	1ad3      	subs	r3, r2, r3
 801b01c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b01e:	8912      	ldrh	r2, [r2, #8]
 801b020:	4413      	add	r3, r2
 801b022:	69ba      	ldr	r2, [r7, #24]
 801b024:	429a      	cmp	r2, r3
 801b026:	d227      	bcs.n	801b078 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801b028:	687b      	ldr	r3, [r7, #4]
 801b02a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801b02e:	461a      	mov	r2, r3
 801b030:	69bb      	ldr	r3, [r7, #24]
 801b032:	4293      	cmp	r3, r2
 801b034:	d114      	bne.n	801b060 <tcp_output+0x120>
 801b036:	687b      	ldr	r3, [r7, #4]
 801b038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b03a:	2b00      	cmp	r3, #0
 801b03c:	d110      	bne.n	801b060 <tcp_output+0x120>
 801b03e:	687b      	ldr	r3, [r7, #4]
 801b040:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801b044:	2b00      	cmp	r3, #0
 801b046:	d10b      	bne.n	801b060 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801b048:	687b      	ldr	r3, [r7, #4]
 801b04a:	2200      	movs	r2, #0
 801b04c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 801b050:	687b      	ldr	r3, [r7, #4]
 801b052:	2201      	movs	r2, #1
 801b054:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 801b058:	687b      	ldr	r3, [r7, #4]
 801b05a:	2200      	movs	r2, #0
 801b05c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801b060:	687b      	ldr	r3, [r7, #4]
 801b062:	8b5b      	ldrh	r3, [r3, #26]
 801b064:	f003 0302 	and.w	r3, r3, #2
 801b068:	2b00      	cmp	r3, #0
 801b06a:	f000 8150 	beq.w	801b30e <tcp_output+0x3ce>
      return tcp_send_empty_ack(pcb);
 801b06e:	6878      	ldr	r0, [r7, #4]
 801b070:	f000 fd8c 	bl	801bb8c <tcp_send_empty_ack>
 801b074:	4603      	mov	r3, r0
 801b076:	e155      	b.n	801b324 <tcp_output+0x3e4>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801b078:	687b      	ldr	r3, [r7, #4]
 801b07a:	2200      	movs	r2, #0
 801b07c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801b080:	687b      	ldr	r3, [r7, #4]
 801b082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b084:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801b086:	6a3b      	ldr	r3, [r7, #32]
 801b088:	2b00      	cmp	r3, #0
 801b08a:	f000 811f 	beq.w	801b2cc <tcp_output+0x38c>
    for (; useg->next != NULL; useg = useg->next);
 801b08e:	e002      	b.n	801b096 <tcp_output+0x156>
 801b090:	6a3b      	ldr	r3, [r7, #32]
 801b092:	681b      	ldr	r3, [r3, #0]
 801b094:	623b      	str	r3, [r7, #32]
 801b096:	6a3b      	ldr	r3, [r7, #32]
 801b098:	681b      	ldr	r3, [r3, #0]
 801b09a:	2b00      	cmp	r3, #0
 801b09c:	d1f8      	bne.n	801b090 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801b09e:	e115      	b.n	801b2cc <tcp_output+0x38c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801b0a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0a2:	691b      	ldr	r3, [r3, #16]
 801b0a4:	899b      	ldrh	r3, [r3, #12]
 801b0a6:	b29b      	uxth	r3, r3
 801b0a8:	4618      	mov	r0, r3
 801b0aa:	f7f8 f9f1 	bl	8013490 <lwip_htons>
 801b0ae:	4603      	mov	r3, r0
 801b0b0:	b2db      	uxtb	r3, r3
 801b0b2:	f003 0304 	and.w	r3, r3, #4
 801b0b6:	2b00      	cmp	r3, #0
 801b0b8:	d006      	beq.n	801b0c8 <tcp_output+0x188>
 801b0ba:	4b2f      	ldr	r3, [pc, #188]	@ (801b178 <tcp_output+0x238>)
 801b0bc:	f240 5236 	movw	r2, #1334	@ 0x536
 801b0c0:	4932      	ldr	r1, [pc, #200]	@ (801b18c <tcp_output+0x24c>)
 801b0c2:	482f      	ldr	r0, [pc, #188]	@ (801b180 <tcp_output+0x240>)
 801b0c4:	f005 fffe 	bl	80210c4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801b0c8:	687b      	ldr	r3, [r7, #4]
 801b0ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b0cc:	2b00      	cmp	r3, #0
 801b0ce:	d01f      	beq.n	801b110 <tcp_output+0x1d0>
 801b0d0:	687b      	ldr	r3, [r7, #4]
 801b0d2:	8b5b      	ldrh	r3, [r3, #26]
 801b0d4:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801b0d8:	2b00      	cmp	r3, #0
 801b0da:	d119      	bne.n	801b110 <tcp_output+0x1d0>
 801b0dc:	687b      	ldr	r3, [r7, #4]
 801b0de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b0e0:	2b00      	cmp	r3, #0
 801b0e2:	d00b      	beq.n	801b0fc <tcp_output+0x1bc>
 801b0e4:	687b      	ldr	r3, [r7, #4]
 801b0e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b0e8:	681b      	ldr	r3, [r3, #0]
 801b0ea:	2b00      	cmp	r3, #0
 801b0ec:	d110      	bne.n	801b110 <tcp_output+0x1d0>
 801b0ee:	687b      	ldr	r3, [r7, #4]
 801b0f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b0f2:	891a      	ldrh	r2, [r3, #8]
 801b0f4:	687b      	ldr	r3, [r7, #4]
 801b0f6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801b0f8:	429a      	cmp	r2, r3
 801b0fa:	d209      	bcs.n	801b110 <tcp_output+0x1d0>
 801b0fc:	687b      	ldr	r3, [r7, #4]
 801b0fe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801b102:	2b00      	cmp	r3, #0
 801b104:	d004      	beq.n	801b110 <tcp_output+0x1d0>
 801b106:	687b      	ldr	r3, [r7, #4]
 801b108:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801b10c:	2b08      	cmp	r3, #8
 801b10e:	d901      	bls.n	801b114 <tcp_output+0x1d4>
 801b110:	2301      	movs	r3, #1
 801b112:	e000      	b.n	801b116 <tcp_output+0x1d6>
 801b114:	2300      	movs	r3, #0
 801b116:	2b00      	cmp	r3, #0
 801b118:	d106      	bne.n	801b128 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801b11a:	687b      	ldr	r3, [r7, #4]
 801b11c:	8b5b      	ldrh	r3, [r3, #26]
 801b11e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801b122:	2b00      	cmp	r3, #0
 801b124:	f000 80e7 	beq.w	801b2f6 <tcp_output+0x3b6>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801b128:	687b      	ldr	r3, [r7, #4]
 801b12a:	7d1b      	ldrb	r3, [r3, #20]
 801b12c:	2b02      	cmp	r3, #2
 801b12e:	d00d      	beq.n	801b14c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801b130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b132:	691b      	ldr	r3, [r3, #16]
 801b134:	899b      	ldrh	r3, [r3, #12]
 801b136:	b29c      	uxth	r4, r3
 801b138:	2010      	movs	r0, #16
 801b13a:	f7f8 f9a9 	bl	8013490 <lwip_htons>
 801b13e:	4603      	mov	r3, r0
 801b140:	461a      	mov	r2, r3
 801b142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b144:	691b      	ldr	r3, [r3, #16]
 801b146:	4322      	orrs	r2, r4
 801b148:	b292      	uxth	r2, r2
 801b14a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801b14c:	697a      	ldr	r2, [r7, #20]
 801b14e:	6879      	ldr	r1, [r7, #4]
 801b150:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b152:	f000 f90b 	bl	801b36c <tcp_output_segment>
 801b156:	4603      	mov	r3, r0
 801b158:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801b15a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b15e:	2b00      	cmp	r3, #0
 801b160:	d016      	beq.n	801b190 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b162:	687b      	ldr	r3, [r7, #4]
 801b164:	8b5b      	ldrh	r3, [r3, #26]
 801b166:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b16a:	b29a      	uxth	r2, r3
 801b16c:	687b      	ldr	r3, [r7, #4]
 801b16e:	835a      	strh	r2, [r3, #26]
      return err;
 801b170:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b174:	e0d6      	b.n	801b324 <tcp_output+0x3e4>
 801b176:	bf00      	nop
 801b178:	08025138 	.word	0x08025138
 801b17c:	080256d8 	.word	0x080256d8
 801b180:	0802518c 	.word	0x0802518c
 801b184:	080256f0 	.word	0x080256f0
 801b188:	20028468 	.word	0x20028468
 801b18c:	08025718 	.word	0x08025718
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 801b190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b192:	2200      	movs	r2, #0
 801b194:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801b196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b198:	681a      	ldr	r2, [r3, #0]
 801b19a:	687b      	ldr	r3, [r7, #4]
 801b19c:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 801b19e:	687b      	ldr	r3, [r7, #4]
 801b1a0:	7d1b      	ldrb	r3, [r3, #20]
 801b1a2:	2b02      	cmp	r3, #2
 801b1a4:	d006      	beq.n	801b1b4 <tcp_output+0x274>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b1a6:	687b      	ldr	r3, [r7, #4]
 801b1a8:	8b5b      	ldrh	r3, [r3, #26]
 801b1aa:	f023 0303 	bic.w	r3, r3, #3
 801b1ae:	b29a      	uxth	r2, r3
 801b1b0:	687b      	ldr	r3, [r7, #4]
 801b1b2:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801b1b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b1b6:	691b      	ldr	r3, [r3, #16]
 801b1b8:	685b      	ldr	r3, [r3, #4]
 801b1ba:	4618      	mov	r0, r3
 801b1bc:	f7f8 f97e 	bl	80134bc <lwip_htonl>
 801b1c0:	4604      	mov	r4, r0
 801b1c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b1c4:	891b      	ldrh	r3, [r3, #8]
 801b1c6:	461d      	mov	r5, r3
 801b1c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b1ca:	691b      	ldr	r3, [r3, #16]
 801b1cc:	899b      	ldrh	r3, [r3, #12]
 801b1ce:	b29b      	uxth	r3, r3
 801b1d0:	4618      	mov	r0, r3
 801b1d2:	f7f8 f95d 	bl	8013490 <lwip_htons>
 801b1d6:	4603      	mov	r3, r0
 801b1d8:	b2db      	uxtb	r3, r3
 801b1da:	f003 0303 	and.w	r3, r3, #3
 801b1de:	2b00      	cmp	r3, #0
 801b1e0:	d001      	beq.n	801b1e6 <tcp_output+0x2a6>
 801b1e2:	2301      	movs	r3, #1
 801b1e4:	e000      	b.n	801b1e8 <tcp_output+0x2a8>
 801b1e6:	2300      	movs	r3, #0
 801b1e8:	442b      	add	r3, r5
 801b1ea:	4423      	add	r3, r4
 801b1ec:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b1ee:	687b      	ldr	r3, [r7, #4]
 801b1f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b1f2:	68bb      	ldr	r3, [r7, #8]
 801b1f4:	1ad3      	subs	r3, r2, r3
 801b1f6:	2b00      	cmp	r3, #0
 801b1f8:	da02      	bge.n	801b200 <tcp_output+0x2c0>
      pcb->snd_nxt = snd_nxt;
 801b1fa:	687b      	ldr	r3, [r7, #4]
 801b1fc:	68ba      	ldr	r2, [r7, #8]
 801b1fe:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801b200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b202:	891b      	ldrh	r3, [r3, #8]
 801b204:	461c      	mov	r4, r3
 801b206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b208:	691b      	ldr	r3, [r3, #16]
 801b20a:	899b      	ldrh	r3, [r3, #12]
 801b20c:	b29b      	uxth	r3, r3
 801b20e:	4618      	mov	r0, r3
 801b210:	f7f8 f93e 	bl	8013490 <lwip_htons>
 801b214:	4603      	mov	r3, r0
 801b216:	b2db      	uxtb	r3, r3
 801b218:	f003 0303 	and.w	r3, r3, #3
 801b21c:	2b00      	cmp	r3, #0
 801b21e:	d001      	beq.n	801b224 <tcp_output+0x2e4>
 801b220:	2301      	movs	r3, #1
 801b222:	e000      	b.n	801b226 <tcp_output+0x2e6>
 801b224:	2300      	movs	r3, #0
 801b226:	4423      	add	r3, r4
 801b228:	2b00      	cmp	r3, #0
 801b22a:	d049      	beq.n	801b2c0 <tcp_output+0x380>
      seg->next = NULL;
 801b22c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b22e:	2200      	movs	r2, #0
 801b230:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801b232:	687b      	ldr	r3, [r7, #4]
 801b234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b236:	2b00      	cmp	r3, #0
 801b238:	d105      	bne.n	801b246 <tcp_output+0x306>
        pcb->unacked = seg;
 801b23a:	687b      	ldr	r3, [r7, #4]
 801b23c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b23e:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801b240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b242:	623b      	str	r3, [r7, #32]
 801b244:	e03f      	b.n	801b2c6 <tcp_output+0x386>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801b246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b248:	691b      	ldr	r3, [r3, #16]
 801b24a:	685b      	ldr	r3, [r3, #4]
 801b24c:	4618      	mov	r0, r3
 801b24e:	f7f8 f935 	bl	80134bc <lwip_htonl>
 801b252:	4604      	mov	r4, r0
 801b254:	6a3b      	ldr	r3, [r7, #32]
 801b256:	691b      	ldr	r3, [r3, #16]
 801b258:	685b      	ldr	r3, [r3, #4]
 801b25a:	4618      	mov	r0, r3
 801b25c:	f7f8 f92e 	bl	80134bc <lwip_htonl>
 801b260:	4603      	mov	r3, r0
 801b262:	1ae3      	subs	r3, r4, r3
 801b264:	2b00      	cmp	r3, #0
 801b266:	da24      	bge.n	801b2b2 <tcp_output+0x372>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801b268:	687b      	ldr	r3, [r7, #4]
 801b26a:	3370      	adds	r3, #112	@ 0x70
 801b26c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801b26e:	e002      	b.n	801b276 <tcp_output+0x336>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801b270:	69fb      	ldr	r3, [r7, #28]
 801b272:	681b      	ldr	r3, [r3, #0]
 801b274:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801b276:	69fb      	ldr	r3, [r7, #28]
 801b278:	681b      	ldr	r3, [r3, #0]
 801b27a:	2b00      	cmp	r3, #0
 801b27c:	d011      	beq.n	801b2a2 <tcp_output+0x362>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801b27e:	69fb      	ldr	r3, [r7, #28]
 801b280:	681b      	ldr	r3, [r3, #0]
 801b282:	691b      	ldr	r3, [r3, #16]
 801b284:	685b      	ldr	r3, [r3, #4]
 801b286:	4618      	mov	r0, r3
 801b288:	f7f8 f918 	bl	80134bc <lwip_htonl>
 801b28c:	4604      	mov	r4, r0
 801b28e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b290:	691b      	ldr	r3, [r3, #16]
 801b292:	685b      	ldr	r3, [r3, #4]
 801b294:	4618      	mov	r0, r3
 801b296:	f7f8 f911 	bl	80134bc <lwip_htonl>
 801b29a:	4603      	mov	r3, r0
 801b29c:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801b29e:	2b00      	cmp	r3, #0
 801b2a0:	dbe6      	blt.n	801b270 <tcp_output+0x330>
          }
          seg->next = (*cur_seg);
 801b2a2:	69fb      	ldr	r3, [r7, #28]
 801b2a4:	681a      	ldr	r2, [r3, #0]
 801b2a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b2a8:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801b2aa:	69fb      	ldr	r3, [r7, #28]
 801b2ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b2ae:	601a      	str	r2, [r3, #0]
 801b2b0:	e009      	b.n	801b2c6 <tcp_output+0x386>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801b2b2:	6a3b      	ldr	r3, [r7, #32]
 801b2b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b2b6:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801b2b8:	6a3b      	ldr	r3, [r7, #32]
 801b2ba:	681b      	ldr	r3, [r3, #0]
 801b2bc:	623b      	str	r3, [r7, #32]
 801b2be:	e002      	b.n	801b2c6 <tcp_output+0x386>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801b2c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b2c2:	f7fb fdd4 	bl	8016e6e <tcp_seg_free>
    }
    seg = pcb->unsent;
 801b2c6:	687b      	ldr	r3, [r7, #4]
 801b2c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b2ca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801b2cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b2ce:	2b00      	cmp	r3, #0
 801b2d0:	d012      	beq.n	801b2f8 <tcp_output+0x3b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801b2d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b2d4:	691b      	ldr	r3, [r3, #16]
 801b2d6:	685b      	ldr	r3, [r3, #4]
 801b2d8:	4618      	mov	r0, r3
 801b2da:	f7f8 f8ef 	bl	80134bc <lwip_htonl>
 801b2de:	4602      	mov	r2, r0
 801b2e0:	687b      	ldr	r3, [r7, #4]
 801b2e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b2e4:	1ad3      	subs	r3, r2, r3
 801b2e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b2e8:	8912      	ldrh	r2, [r2, #8]
 801b2ea:	4413      	add	r3, r2
  while (seg != NULL &&
 801b2ec:	69ba      	ldr	r2, [r7, #24]
 801b2ee:	429a      	cmp	r2, r3
 801b2f0:	f4bf aed6 	bcs.w	801b0a0 <tcp_output+0x160>
 801b2f4:	e000      	b.n	801b2f8 <tcp_output+0x3b8>
      break;
 801b2f6:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801b2f8:	687b      	ldr	r3, [r7, #4]
 801b2fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b2fc:	2b00      	cmp	r3, #0
 801b2fe:	d108      	bne.n	801b312 <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801b300:	687b      	ldr	r3, [r7, #4]
 801b302:	2200      	movs	r2, #0
 801b304:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801b308:	e004      	b.n	801b314 <tcp_output+0x3d4>
    goto output_done;
 801b30a:	bf00      	nop
 801b30c:	e002      	b.n	801b314 <tcp_output+0x3d4>
    goto output_done;
 801b30e:	bf00      	nop
 801b310:	e000      	b.n	801b314 <tcp_output+0x3d4>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801b312:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801b314:	687b      	ldr	r3, [r7, #4]
 801b316:	8b5b      	ldrh	r3, [r3, #26]
 801b318:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801b31c:	b29a      	uxth	r2, r3
 801b31e:	687b      	ldr	r3, [r7, #4]
 801b320:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801b322:	2300      	movs	r3, #0
}
 801b324:	4618      	mov	r0, r3
 801b326:	3728      	adds	r7, #40	@ 0x28
 801b328:	46bd      	mov	sp, r7
 801b32a:	bdb0      	pop	{r4, r5, r7, pc}

0801b32c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801b32c:	b580      	push	{r7, lr}
 801b32e:	b082      	sub	sp, #8
 801b330:	af00      	add	r7, sp, #0
 801b332:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801b334:	687b      	ldr	r3, [r7, #4]
 801b336:	2b00      	cmp	r3, #0
 801b338:	d106      	bne.n	801b348 <tcp_output_segment_busy+0x1c>
 801b33a:	4b09      	ldr	r3, [pc, #36]	@ (801b360 <tcp_output_segment_busy+0x34>)
 801b33c:	f240 529a 	movw	r2, #1434	@ 0x59a
 801b340:	4908      	ldr	r1, [pc, #32]	@ (801b364 <tcp_output_segment_busy+0x38>)
 801b342:	4809      	ldr	r0, [pc, #36]	@ (801b368 <tcp_output_segment_busy+0x3c>)
 801b344:	f005 febe 	bl	80210c4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801b348:	687b      	ldr	r3, [r7, #4]
 801b34a:	685b      	ldr	r3, [r3, #4]
 801b34c:	7b9b      	ldrb	r3, [r3, #14]
 801b34e:	2b01      	cmp	r3, #1
 801b350:	d001      	beq.n	801b356 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801b352:	2301      	movs	r3, #1
 801b354:	e000      	b.n	801b358 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801b356:	2300      	movs	r3, #0
}
 801b358:	4618      	mov	r0, r3
 801b35a:	3708      	adds	r7, #8
 801b35c:	46bd      	mov	sp, r7
 801b35e:	bd80      	pop	{r7, pc}
 801b360:	08025138 	.word	0x08025138
 801b364:	08025730 	.word	0x08025730
 801b368:	0802518c 	.word	0x0802518c

0801b36c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801b36c:	b5b0      	push	{r4, r5, r7, lr}
 801b36e:	b08c      	sub	sp, #48	@ 0x30
 801b370:	af04      	add	r7, sp, #16
 801b372:	60f8      	str	r0, [r7, #12]
 801b374:	60b9      	str	r1, [r7, #8]
 801b376:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801b378:	68fb      	ldr	r3, [r7, #12]
 801b37a:	2b00      	cmp	r3, #0
 801b37c:	d106      	bne.n	801b38c <tcp_output_segment+0x20>
 801b37e:	4b68      	ldr	r3, [pc, #416]	@ (801b520 <tcp_output_segment+0x1b4>)
 801b380:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 801b384:	4967      	ldr	r1, [pc, #412]	@ (801b524 <tcp_output_segment+0x1b8>)
 801b386:	4868      	ldr	r0, [pc, #416]	@ (801b528 <tcp_output_segment+0x1bc>)
 801b388:	f005 fe9c 	bl	80210c4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801b38c:	68bb      	ldr	r3, [r7, #8]
 801b38e:	2b00      	cmp	r3, #0
 801b390:	d106      	bne.n	801b3a0 <tcp_output_segment+0x34>
 801b392:	4b63      	ldr	r3, [pc, #396]	@ (801b520 <tcp_output_segment+0x1b4>)
 801b394:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 801b398:	4964      	ldr	r1, [pc, #400]	@ (801b52c <tcp_output_segment+0x1c0>)
 801b39a:	4863      	ldr	r0, [pc, #396]	@ (801b528 <tcp_output_segment+0x1bc>)
 801b39c:	f005 fe92 	bl	80210c4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801b3a0:	687b      	ldr	r3, [r7, #4]
 801b3a2:	2b00      	cmp	r3, #0
 801b3a4:	d106      	bne.n	801b3b4 <tcp_output_segment+0x48>
 801b3a6:	4b5e      	ldr	r3, [pc, #376]	@ (801b520 <tcp_output_segment+0x1b4>)
 801b3a8:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 801b3ac:	4960      	ldr	r1, [pc, #384]	@ (801b530 <tcp_output_segment+0x1c4>)
 801b3ae:	485e      	ldr	r0, [pc, #376]	@ (801b528 <tcp_output_segment+0x1bc>)
 801b3b0:	f005 fe88 	bl	80210c4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801b3b4:	68f8      	ldr	r0, [r7, #12]
 801b3b6:	f7ff ffb9 	bl	801b32c <tcp_output_segment_busy>
 801b3ba:	4603      	mov	r3, r0
 801b3bc:	2b00      	cmp	r3, #0
 801b3be:	d001      	beq.n	801b3c4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801b3c0:	2300      	movs	r3, #0
 801b3c2:	e0a9      	b.n	801b518 <tcp_output_segment+0x1ac>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801b3c4:	68bb      	ldr	r3, [r7, #8]
 801b3c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b3c8:	68fb      	ldr	r3, [r7, #12]
 801b3ca:	691c      	ldr	r4, [r3, #16]
 801b3cc:	4610      	mov	r0, r2
 801b3ce:	f7f8 f875 	bl	80134bc <lwip_htonl>
 801b3d2:	4603      	mov	r3, r0
 801b3d4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801b3d6:	68bb      	ldr	r3, [r7, #8]
 801b3d8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801b3da:	68fb      	ldr	r3, [r7, #12]
 801b3dc:	691c      	ldr	r4, [r3, #16]
 801b3de:	4610      	mov	r0, r2
 801b3e0:	f7f8 f856 	bl	8013490 <lwip_htons>
 801b3e4:	4603      	mov	r3, r0
 801b3e6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801b3e8:	68bb      	ldr	r3, [r7, #8]
 801b3ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b3ec:	68ba      	ldr	r2, [r7, #8]
 801b3ee:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801b3f0:	441a      	add	r2, r3
 801b3f2:	68bb      	ldr	r3, [r7, #8]
 801b3f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801b3f6:	68fb      	ldr	r3, [r7, #12]
 801b3f8:	691b      	ldr	r3, [r3, #16]
 801b3fa:	3314      	adds	r3, #20
 801b3fc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801b3fe:	68fb      	ldr	r3, [r7, #12]
 801b400:	7b1b      	ldrb	r3, [r3, #12]
 801b402:	f003 0301 	and.w	r3, r3, #1
 801b406:	2b00      	cmp	r3, #0
 801b408:	d015      	beq.n	801b436 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801b40a:	68bb      	ldr	r3, [r7, #8]
 801b40c:	3304      	adds	r3, #4
 801b40e:	461a      	mov	r2, r3
 801b410:	6879      	ldr	r1, [r7, #4]
 801b412:	f44f 7006 	mov.w	r0, #536	@ 0x218
 801b416:	f7fc f92d 	bl	8017674 <tcp_eff_send_mss_netif>
 801b41a:	4603      	mov	r3, r0
 801b41c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801b41e:	8b7b      	ldrh	r3, [r7, #26]
 801b420:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 801b424:	4618      	mov	r0, r3
 801b426:	f7f8 f849 	bl	80134bc <lwip_htonl>
 801b42a:	4602      	mov	r2, r0
 801b42c:	69fb      	ldr	r3, [r7, #28]
 801b42e:	601a      	str	r2, [r3, #0]
    opts += 1;
 801b430:	69fb      	ldr	r3, [r7, #28]
 801b432:	3304      	adds	r3, #4
 801b434:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801b436:	68bb      	ldr	r3, [r7, #8]
 801b438:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801b43c:	2b00      	cmp	r3, #0
 801b43e:	da02      	bge.n	801b446 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801b440:	68bb      	ldr	r3, [r7, #8]
 801b442:	2200      	movs	r2, #0
 801b444:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 801b446:	68bb      	ldr	r3, [r7, #8]
 801b448:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b44a:	2b00      	cmp	r3, #0
 801b44c:	d10c      	bne.n	801b468 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801b44e:	4b39      	ldr	r3, [pc, #228]	@ (801b534 <tcp_output_segment+0x1c8>)
 801b450:	681a      	ldr	r2, [r3, #0]
 801b452:	68bb      	ldr	r3, [r7, #8]
 801b454:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801b456:	68fb      	ldr	r3, [r7, #12]
 801b458:	691b      	ldr	r3, [r3, #16]
 801b45a:	685b      	ldr	r3, [r3, #4]
 801b45c:	4618      	mov	r0, r3
 801b45e:	f7f8 f82d 	bl	80134bc <lwip_htonl>
 801b462:	4602      	mov	r2, r0
 801b464:	68bb      	ldr	r3, [r7, #8]
 801b466:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801b468:	68fb      	ldr	r3, [r7, #12]
 801b46a:	691a      	ldr	r2, [r3, #16]
 801b46c:	68fb      	ldr	r3, [r7, #12]
 801b46e:	685b      	ldr	r3, [r3, #4]
 801b470:	685b      	ldr	r3, [r3, #4]
 801b472:	1ad3      	subs	r3, r2, r3
 801b474:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801b476:	68fb      	ldr	r3, [r7, #12]
 801b478:	685b      	ldr	r3, [r3, #4]
 801b47a:	8959      	ldrh	r1, [r3, #10]
 801b47c:	68fb      	ldr	r3, [r7, #12]
 801b47e:	685b      	ldr	r3, [r3, #4]
 801b480:	8b3a      	ldrh	r2, [r7, #24]
 801b482:	1a8a      	subs	r2, r1, r2
 801b484:	b292      	uxth	r2, r2
 801b486:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801b488:	68fb      	ldr	r3, [r7, #12]
 801b48a:	685b      	ldr	r3, [r3, #4]
 801b48c:	8919      	ldrh	r1, [r3, #8]
 801b48e:	68fb      	ldr	r3, [r7, #12]
 801b490:	685b      	ldr	r3, [r3, #4]
 801b492:	8b3a      	ldrh	r2, [r7, #24]
 801b494:	1a8a      	subs	r2, r1, r2
 801b496:	b292      	uxth	r2, r2
 801b498:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801b49a:	68fb      	ldr	r3, [r7, #12]
 801b49c:	685b      	ldr	r3, [r3, #4]
 801b49e:	68fa      	ldr	r2, [r7, #12]
 801b4a0:	6912      	ldr	r2, [r2, #16]
 801b4a2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801b4a4:	68fb      	ldr	r3, [r7, #12]
 801b4a6:	691b      	ldr	r3, [r3, #16]
 801b4a8:	2200      	movs	r2, #0
 801b4aa:	741a      	strb	r2, [r3, #16]
 801b4ac:	2200      	movs	r2, #0
 801b4ae:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801b4b0:	68fb      	ldr	r3, [r7, #12]
 801b4b2:	691a      	ldr	r2, [r3, #16]
 801b4b4:	68fb      	ldr	r3, [r7, #12]
 801b4b6:	7b1b      	ldrb	r3, [r3, #12]
 801b4b8:	f003 0301 	and.w	r3, r3, #1
 801b4bc:	2b00      	cmp	r3, #0
 801b4be:	d001      	beq.n	801b4c4 <tcp_output_segment+0x158>
 801b4c0:	2318      	movs	r3, #24
 801b4c2:	e000      	b.n	801b4c6 <tcp_output_segment+0x15a>
 801b4c4:	2314      	movs	r3, #20
 801b4c6:	4413      	add	r3, r2
 801b4c8:	69fa      	ldr	r2, [r7, #28]
 801b4ca:	429a      	cmp	r2, r3
 801b4cc:	d006      	beq.n	801b4dc <tcp_output_segment+0x170>
 801b4ce:	4b14      	ldr	r3, [pc, #80]	@ (801b520 <tcp_output_segment+0x1b4>)
 801b4d0:	f240 621c 	movw	r2, #1564	@ 0x61c
 801b4d4:	4918      	ldr	r1, [pc, #96]	@ (801b538 <tcp_output_segment+0x1cc>)
 801b4d6:	4814      	ldr	r0, [pc, #80]	@ (801b528 <tcp_output_segment+0x1bc>)
 801b4d8:	f005 fdf4 	bl	80210c4 <iprintf>
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 801b4dc:	4b17      	ldr	r3, [pc, #92]	@ (801b53c <tcp_output_segment+0x1d0>)
 801b4de:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 801b4e2:	3301      	adds	r3, #1
 801b4e4:	b29a      	uxth	r2, r3
 801b4e6:	4b15      	ldr	r3, [pc, #84]	@ (801b53c <tcp_output_segment+0x1d0>)
 801b4e8:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801b4ec:	68fb      	ldr	r3, [r7, #12]
 801b4ee:	6858      	ldr	r0, [r3, #4]
 801b4f0:	68b9      	ldr	r1, [r7, #8]
 801b4f2:	68bb      	ldr	r3, [r7, #8]
 801b4f4:	1d1c      	adds	r4, r3, #4
 801b4f6:	68bb      	ldr	r3, [r7, #8]
 801b4f8:	7add      	ldrb	r5, [r3, #11]
 801b4fa:	68bb      	ldr	r3, [r7, #8]
 801b4fc:	7a9b      	ldrb	r3, [r3, #10]
 801b4fe:	687a      	ldr	r2, [r7, #4]
 801b500:	9202      	str	r2, [sp, #8]
 801b502:	2206      	movs	r2, #6
 801b504:	9201      	str	r2, [sp, #4]
 801b506:	9300      	str	r3, [sp, #0]
 801b508:	462b      	mov	r3, r5
 801b50a:	4622      	mov	r2, r4
 801b50c:	f003 f966 	bl	801e7dc <ip4_output_if>
 801b510:	4603      	mov	r3, r0
 801b512:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801b514:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b518:	4618      	mov	r0, r3
 801b51a:	3720      	adds	r7, #32
 801b51c:	46bd      	mov	sp, r7
 801b51e:	bdb0      	pop	{r4, r5, r7, pc}
 801b520:	08025138 	.word	0x08025138
 801b524:	08025758 	.word	0x08025758
 801b528:	0802518c 	.word	0x0802518c
 801b52c:	08025778 	.word	0x08025778
 801b530:	08025798 	.word	0x08025798
 801b534:	20028418 	.word	0x20028418
 801b538:	080257bc 	.word	0x080257bc
 801b53c:	20028318 	.word	0x20028318

0801b540 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801b540:	b5b0      	push	{r4, r5, r7, lr}
 801b542:	b084      	sub	sp, #16
 801b544:	af00      	add	r7, sp, #0
 801b546:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801b548:	687b      	ldr	r3, [r7, #4]
 801b54a:	2b00      	cmp	r3, #0
 801b54c:	d106      	bne.n	801b55c <tcp_rexmit_rto_prepare+0x1c>
 801b54e:	4b36      	ldr	r3, [pc, #216]	@ (801b628 <tcp_rexmit_rto_prepare+0xe8>)
 801b550:	f240 6263 	movw	r2, #1635	@ 0x663
 801b554:	4935      	ldr	r1, [pc, #212]	@ (801b62c <tcp_rexmit_rto_prepare+0xec>)
 801b556:	4836      	ldr	r0, [pc, #216]	@ (801b630 <tcp_rexmit_rto_prepare+0xf0>)
 801b558:	f005 fdb4 	bl	80210c4 <iprintf>

  if (pcb->unacked == NULL) {
 801b55c:	687b      	ldr	r3, [r7, #4]
 801b55e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b560:	2b00      	cmp	r3, #0
 801b562:	d102      	bne.n	801b56a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801b564:	f06f 0305 	mvn.w	r3, #5
 801b568:	e059      	b.n	801b61e <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801b56a:	687b      	ldr	r3, [r7, #4]
 801b56c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b56e:	60fb      	str	r3, [r7, #12]
 801b570:	e00b      	b.n	801b58a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801b572:	68f8      	ldr	r0, [r7, #12]
 801b574:	f7ff feda 	bl	801b32c <tcp_output_segment_busy>
 801b578:	4603      	mov	r3, r0
 801b57a:	2b00      	cmp	r3, #0
 801b57c:	d002      	beq.n	801b584 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801b57e:	f06f 0305 	mvn.w	r3, #5
 801b582:	e04c      	b.n	801b61e <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801b584:	68fb      	ldr	r3, [r7, #12]
 801b586:	681b      	ldr	r3, [r3, #0]
 801b588:	60fb      	str	r3, [r7, #12]
 801b58a:	68fb      	ldr	r3, [r7, #12]
 801b58c:	681b      	ldr	r3, [r3, #0]
 801b58e:	2b00      	cmp	r3, #0
 801b590:	d1ef      	bne.n	801b572 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801b592:	68f8      	ldr	r0, [r7, #12]
 801b594:	f7ff feca 	bl	801b32c <tcp_output_segment_busy>
 801b598:	4603      	mov	r3, r0
 801b59a:	2b00      	cmp	r3, #0
 801b59c:	d002      	beq.n	801b5a4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801b59e:	f06f 0305 	mvn.w	r3, #5
 801b5a2:	e03c      	b.n	801b61e <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801b5a4:	687b      	ldr	r3, [r7, #4]
 801b5a6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801b5a8:	68fb      	ldr	r3, [r7, #12]
 801b5aa:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 801b5ac:	687b      	ldr	r3, [r7, #4]
 801b5ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b5b0:	2b00      	cmp	r3, #0
 801b5b2:	d104      	bne.n	801b5be <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 801b5b4:	68fb      	ldr	r3, [r7, #12]
 801b5b6:	895a      	ldrh	r2, [r3, #10]
 801b5b8:	687b      	ldr	r3, [r7, #4]
 801b5ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801b5be:	687b      	ldr	r3, [r7, #4]
 801b5c0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801b5c2:	687b      	ldr	r3, [r7, #4]
 801b5c4:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801b5c6:	687b      	ldr	r3, [r7, #4]
 801b5c8:	2200      	movs	r2, #0
 801b5ca:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801b5cc:	687b      	ldr	r3, [r7, #4]
 801b5ce:	8b5b      	ldrh	r3, [r3, #26]
 801b5d0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801b5d4:	b29a      	uxth	r2, r3
 801b5d6:	687b      	ldr	r3, [r7, #4]
 801b5d8:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801b5da:	68fb      	ldr	r3, [r7, #12]
 801b5dc:	691b      	ldr	r3, [r3, #16]
 801b5de:	685b      	ldr	r3, [r3, #4]
 801b5e0:	4618      	mov	r0, r3
 801b5e2:	f7f7 ff6b 	bl	80134bc <lwip_htonl>
 801b5e6:	4604      	mov	r4, r0
 801b5e8:	68fb      	ldr	r3, [r7, #12]
 801b5ea:	891b      	ldrh	r3, [r3, #8]
 801b5ec:	461d      	mov	r5, r3
 801b5ee:	68fb      	ldr	r3, [r7, #12]
 801b5f0:	691b      	ldr	r3, [r3, #16]
 801b5f2:	899b      	ldrh	r3, [r3, #12]
 801b5f4:	b29b      	uxth	r3, r3
 801b5f6:	4618      	mov	r0, r3
 801b5f8:	f7f7 ff4a 	bl	8013490 <lwip_htons>
 801b5fc:	4603      	mov	r3, r0
 801b5fe:	b2db      	uxtb	r3, r3
 801b600:	f003 0303 	and.w	r3, r3, #3
 801b604:	2b00      	cmp	r3, #0
 801b606:	d001      	beq.n	801b60c <tcp_rexmit_rto_prepare+0xcc>
 801b608:	2301      	movs	r3, #1
 801b60a:	e000      	b.n	801b60e <tcp_rexmit_rto_prepare+0xce>
 801b60c:	2300      	movs	r3, #0
 801b60e:	442b      	add	r3, r5
 801b610:	18e2      	adds	r2, r4, r3
 801b612:	687b      	ldr	r3, [r7, #4]
 801b614:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801b616:	687b      	ldr	r3, [r7, #4]
 801b618:	2200      	movs	r2, #0
 801b61a:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801b61c:	2300      	movs	r3, #0
}
 801b61e:	4618      	mov	r0, r3
 801b620:	3710      	adds	r7, #16
 801b622:	46bd      	mov	sp, r7
 801b624:	bdb0      	pop	{r4, r5, r7, pc}
 801b626:	bf00      	nop
 801b628:	08025138 	.word	0x08025138
 801b62c:	080257d0 	.word	0x080257d0
 801b630:	0802518c 	.word	0x0802518c

0801b634 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801b634:	b580      	push	{r7, lr}
 801b636:	b082      	sub	sp, #8
 801b638:	af00      	add	r7, sp, #0
 801b63a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801b63c:	687b      	ldr	r3, [r7, #4]
 801b63e:	2b00      	cmp	r3, #0
 801b640:	d106      	bne.n	801b650 <tcp_rexmit_rto_commit+0x1c>
 801b642:	4b0d      	ldr	r3, [pc, #52]	@ (801b678 <tcp_rexmit_rto_commit+0x44>)
 801b644:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801b648:	490c      	ldr	r1, [pc, #48]	@ (801b67c <tcp_rexmit_rto_commit+0x48>)
 801b64a:	480d      	ldr	r0, [pc, #52]	@ (801b680 <tcp_rexmit_rto_commit+0x4c>)
 801b64c:	f005 fd3a 	bl	80210c4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801b650:	687b      	ldr	r3, [r7, #4]
 801b652:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801b656:	2bff      	cmp	r3, #255	@ 0xff
 801b658:	d007      	beq.n	801b66a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801b65a:	687b      	ldr	r3, [r7, #4]
 801b65c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801b660:	3301      	adds	r3, #1
 801b662:	b2da      	uxtb	r2, r3
 801b664:	687b      	ldr	r3, [r7, #4]
 801b666:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801b66a:	6878      	ldr	r0, [r7, #4]
 801b66c:	f7ff fc68 	bl	801af40 <tcp_output>
}
 801b670:	bf00      	nop
 801b672:	3708      	adds	r7, #8
 801b674:	46bd      	mov	sp, r7
 801b676:	bd80      	pop	{r7, pc}
 801b678:	08025138 	.word	0x08025138
 801b67c:	080257f4 	.word	0x080257f4
 801b680:	0802518c 	.word	0x0802518c

0801b684 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801b684:	b580      	push	{r7, lr}
 801b686:	b082      	sub	sp, #8
 801b688:	af00      	add	r7, sp, #0
 801b68a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801b68c:	687b      	ldr	r3, [r7, #4]
 801b68e:	2b00      	cmp	r3, #0
 801b690:	d106      	bne.n	801b6a0 <tcp_rexmit_rto+0x1c>
 801b692:	4b0a      	ldr	r3, [pc, #40]	@ (801b6bc <tcp_rexmit_rto+0x38>)
 801b694:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 801b698:	4909      	ldr	r1, [pc, #36]	@ (801b6c0 <tcp_rexmit_rto+0x3c>)
 801b69a:	480a      	ldr	r0, [pc, #40]	@ (801b6c4 <tcp_rexmit_rto+0x40>)
 801b69c:	f005 fd12 	bl	80210c4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801b6a0:	6878      	ldr	r0, [r7, #4]
 801b6a2:	f7ff ff4d 	bl	801b540 <tcp_rexmit_rto_prepare>
 801b6a6:	4603      	mov	r3, r0
 801b6a8:	2b00      	cmp	r3, #0
 801b6aa:	d102      	bne.n	801b6b2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801b6ac:	6878      	ldr	r0, [r7, #4]
 801b6ae:	f7ff ffc1 	bl	801b634 <tcp_rexmit_rto_commit>
  }
}
 801b6b2:	bf00      	nop
 801b6b4:	3708      	adds	r7, #8
 801b6b6:	46bd      	mov	sp, r7
 801b6b8:	bd80      	pop	{r7, pc}
 801b6ba:	bf00      	nop
 801b6bc:	08025138 	.word	0x08025138
 801b6c0:	08025818 	.word	0x08025818
 801b6c4:	0802518c 	.word	0x0802518c

0801b6c8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801b6c8:	b590      	push	{r4, r7, lr}
 801b6ca:	b085      	sub	sp, #20
 801b6cc:	af00      	add	r7, sp, #0
 801b6ce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801b6d0:	687b      	ldr	r3, [r7, #4]
 801b6d2:	2b00      	cmp	r3, #0
 801b6d4:	d106      	bne.n	801b6e4 <tcp_rexmit+0x1c>
 801b6d6:	4b2f      	ldr	r3, [pc, #188]	@ (801b794 <tcp_rexmit+0xcc>)
 801b6d8:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 801b6dc:	492e      	ldr	r1, [pc, #184]	@ (801b798 <tcp_rexmit+0xd0>)
 801b6de:	482f      	ldr	r0, [pc, #188]	@ (801b79c <tcp_rexmit+0xd4>)
 801b6e0:	f005 fcf0 	bl	80210c4 <iprintf>

  if (pcb->unacked == NULL) {
 801b6e4:	687b      	ldr	r3, [r7, #4]
 801b6e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b6e8:	2b00      	cmp	r3, #0
 801b6ea:	d102      	bne.n	801b6f2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801b6ec:	f06f 0305 	mvn.w	r3, #5
 801b6f0:	e04c      	b.n	801b78c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801b6f2:	687b      	ldr	r3, [r7, #4]
 801b6f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b6f6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801b6f8:	68b8      	ldr	r0, [r7, #8]
 801b6fa:	f7ff fe17 	bl	801b32c <tcp_output_segment_busy>
 801b6fe:	4603      	mov	r3, r0
 801b700:	2b00      	cmp	r3, #0
 801b702:	d002      	beq.n	801b70a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801b704:	f06f 0305 	mvn.w	r3, #5
 801b708:	e040      	b.n	801b78c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801b70a:	68bb      	ldr	r3, [r7, #8]
 801b70c:	681a      	ldr	r2, [r3, #0]
 801b70e:	687b      	ldr	r3, [r7, #4]
 801b710:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 801b712:	687b      	ldr	r3, [r7, #4]
 801b714:	336c      	adds	r3, #108	@ 0x6c
 801b716:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801b718:	e002      	b.n	801b720 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801b71a:	68fb      	ldr	r3, [r7, #12]
 801b71c:	681b      	ldr	r3, [r3, #0]
 801b71e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801b720:	68fb      	ldr	r3, [r7, #12]
 801b722:	681b      	ldr	r3, [r3, #0]
 801b724:	2b00      	cmp	r3, #0
 801b726:	d011      	beq.n	801b74c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801b728:	68fb      	ldr	r3, [r7, #12]
 801b72a:	681b      	ldr	r3, [r3, #0]
 801b72c:	691b      	ldr	r3, [r3, #16]
 801b72e:	685b      	ldr	r3, [r3, #4]
 801b730:	4618      	mov	r0, r3
 801b732:	f7f7 fec3 	bl	80134bc <lwip_htonl>
 801b736:	4604      	mov	r4, r0
 801b738:	68bb      	ldr	r3, [r7, #8]
 801b73a:	691b      	ldr	r3, [r3, #16]
 801b73c:	685b      	ldr	r3, [r3, #4]
 801b73e:	4618      	mov	r0, r3
 801b740:	f7f7 febc 	bl	80134bc <lwip_htonl>
 801b744:	4603      	mov	r3, r0
 801b746:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801b748:	2b00      	cmp	r3, #0
 801b74a:	dbe6      	blt.n	801b71a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801b74c:	68fb      	ldr	r3, [r7, #12]
 801b74e:	681a      	ldr	r2, [r3, #0]
 801b750:	68bb      	ldr	r3, [r7, #8]
 801b752:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801b754:	68fb      	ldr	r3, [r7, #12]
 801b756:	68ba      	ldr	r2, [r7, #8]
 801b758:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801b75a:	68bb      	ldr	r3, [r7, #8]
 801b75c:	681b      	ldr	r3, [r3, #0]
 801b75e:	2b00      	cmp	r3, #0
 801b760:	d103      	bne.n	801b76a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801b762:	687b      	ldr	r3, [r7, #4]
 801b764:	2200      	movs	r2, #0
 801b766:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801b76a:	687b      	ldr	r3, [r7, #4]
 801b76c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801b770:	2bff      	cmp	r3, #255	@ 0xff
 801b772:	d007      	beq.n	801b784 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801b774:	687b      	ldr	r3, [r7, #4]
 801b776:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801b77a:	3301      	adds	r3, #1
 801b77c:	b2da      	uxtb	r2, r3
 801b77e:	687b      	ldr	r3, [r7, #4]
 801b780:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801b784:	687b      	ldr	r3, [r7, #4]
 801b786:	2200      	movs	r2, #0
 801b788:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801b78a:	2300      	movs	r3, #0
}
 801b78c:	4618      	mov	r0, r3
 801b78e:	3714      	adds	r7, #20
 801b790:	46bd      	mov	sp, r7
 801b792:	bd90      	pop	{r4, r7, pc}
 801b794:	08025138 	.word	0x08025138
 801b798:	08025834 	.word	0x08025834
 801b79c:	0802518c 	.word	0x0802518c

0801b7a0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801b7a0:	b580      	push	{r7, lr}
 801b7a2:	b082      	sub	sp, #8
 801b7a4:	af00      	add	r7, sp, #0
 801b7a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801b7a8:	687b      	ldr	r3, [r7, #4]
 801b7aa:	2b00      	cmp	r3, #0
 801b7ac:	d106      	bne.n	801b7bc <tcp_rexmit_fast+0x1c>
 801b7ae:	4b2a      	ldr	r3, [pc, #168]	@ (801b858 <tcp_rexmit_fast+0xb8>)
 801b7b0:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 801b7b4:	4929      	ldr	r1, [pc, #164]	@ (801b85c <tcp_rexmit_fast+0xbc>)
 801b7b6:	482a      	ldr	r0, [pc, #168]	@ (801b860 <tcp_rexmit_fast+0xc0>)
 801b7b8:	f005 fc84 	bl	80210c4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801b7bc:	687b      	ldr	r3, [r7, #4]
 801b7be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b7c0:	2b00      	cmp	r3, #0
 801b7c2:	d045      	beq.n	801b850 <tcp_rexmit_fast+0xb0>
 801b7c4:	687b      	ldr	r3, [r7, #4]
 801b7c6:	8b5b      	ldrh	r3, [r3, #26]
 801b7c8:	f003 0304 	and.w	r3, r3, #4
 801b7cc:	2b00      	cmp	r3, #0
 801b7ce:	d13f      	bne.n	801b850 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801b7d0:	6878      	ldr	r0, [r7, #4]
 801b7d2:	f7ff ff79 	bl	801b6c8 <tcp_rexmit>
 801b7d6:	4603      	mov	r3, r0
 801b7d8:	2b00      	cmp	r3, #0
 801b7da:	d139      	bne.n	801b850 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801b7dc:	687b      	ldr	r3, [r7, #4]
 801b7de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801b7e2:	687b      	ldr	r3, [r7, #4]
 801b7e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801b7e8:	4293      	cmp	r3, r2
 801b7ea:	bf28      	it	cs
 801b7ec:	4613      	movcs	r3, r2
 801b7ee:	b29b      	uxth	r3, r3
 801b7f0:	2b00      	cmp	r3, #0
 801b7f2:	da00      	bge.n	801b7f6 <tcp_rexmit_fast+0x56>
 801b7f4:	3301      	adds	r3, #1
 801b7f6:	105b      	asrs	r3, r3, #1
 801b7f8:	b29a      	uxth	r2, r3
 801b7fa:	687b      	ldr	r3, [r7, #4]
 801b7fc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801b800:	687b      	ldr	r3, [r7, #4]
 801b802:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801b806:	461a      	mov	r2, r3
 801b808:	687b      	ldr	r3, [r7, #4]
 801b80a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801b80c:	005b      	lsls	r3, r3, #1
 801b80e:	429a      	cmp	r2, r3
 801b810:	d206      	bcs.n	801b820 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801b812:	687b      	ldr	r3, [r7, #4]
 801b814:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801b816:	005b      	lsls	r3, r3, #1
 801b818:	b29a      	uxth	r2, r3
 801b81a:	687b      	ldr	r3, [r7, #4]
 801b81c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801b820:	687b      	ldr	r3, [r7, #4]
 801b822:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801b826:	687b      	ldr	r3, [r7, #4]
 801b828:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801b82a:	4619      	mov	r1, r3
 801b82c:	0049      	lsls	r1, r1, #1
 801b82e:	440b      	add	r3, r1
 801b830:	b29b      	uxth	r3, r3
 801b832:	4413      	add	r3, r2
 801b834:	b29a      	uxth	r2, r3
 801b836:	687b      	ldr	r3, [r7, #4]
 801b838:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 801b83c:	687b      	ldr	r3, [r7, #4]
 801b83e:	8b5b      	ldrh	r3, [r3, #26]
 801b840:	f043 0304 	orr.w	r3, r3, #4
 801b844:	b29a      	uxth	r2, r3
 801b846:	687b      	ldr	r3, [r7, #4]
 801b848:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801b84a:	687b      	ldr	r3, [r7, #4]
 801b84c:	2200      	movs	r2, #0
 801b84e:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 801b850:	bf00      	nop
 801b852:	3708      	adds	r7, #8
 801b854:	46bd      	mov	sp, r7
 801b856:	bd80      	pop	{r7, pc}
 801b858:	08025138 	.word	0x08025138
 801b85c:	0802584c 	.word	0x0802584c
 801b860:	0802518c 	.word	0x0802518c

0801b864 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801b864:	b580      	push	{r7, lr}
 801b866:	b086      	sub	sp, #24
 801b868:	af00      	add	r7, sp, #0
 801b86a:	60f8      	str	r0, [r7, #12]
 801b86c:	607b      	str	r3, [r7, #4]
 801b86e:	460b      	mov	r3, r1
 801b870:	817b      	strh	r3, [r7, #10]
 801b872:	4613      	mov	r3, r2
 801b874:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801b876:	897a      	ldrh	r2, [r7, #10]
 801b878:	893b      	ldrh	r3, [r7, #8]
 801b87a:	4413      	add	r3, r2
 801b87c:	b29b      	uxth	r3, r3
 801b87e:	3314      	adds	r3, #20
 801b880:	b29b      	uxth	r3, r3
 801b882:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b886:	4619      	mov	r1, r3
 801b888:	2022      	movs	r0, #34	@ 0x22
 801b88a:	f7f9 fa49 	bl	8014d20 <pbuf_alloc>
 801b88e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801b890:	697b      	ldr	r3, [r7, #20]
 801b892:	2b00      	cmp	r3, #0
 801b894:	d04d      	beq.n	801b932 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801b896:	897b      	ldrh	r3, [r7, #10]
 801b898:	3313      	adds	r3, #19
 801b89a:	697a      	ldr	r2, [r7, #20]
 801b89c:	8952      	ldrh	r2, [r2, #10]
 801b89e:	4293      	cmp	r3, r2
 801b8a0:	db06      	blt.n	801b8b0 <tcp_output_alloc_header_common+0x4c>
 801b8a2:	4b26      	ldr	r3, [pc, #152]	@ (801b93c <tcp_output_alloc_header_common+0xd8>)
 801b8a4:	f240 7223 	movw	r2, #1827	@ 0x723
 801b8a8:	4925      	ldr	r1, [pc, #148]	@ (801b940 <tcp_output_alloc_header_common+0xdc>)
 801b8aa:	4826      	ldr	r0, [pc, #152]	@ (801b944 <tcp_output_alloc_header_common+0xe0>)
 801b8ac:	f005 fc0a 	bl	80210c4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801b8b0:	697b      	ldr	r3, [r7, #20]
 801b8b2:	685b      	ldr	r3, [r3, #4]
 801b8b4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801b8b6:	8c3b      	ldrh	r3, [r7, #32]
 801b8b8:	4618      	mov	r0, r3
 801b8ba:	f7f7 fde9 	bl	8013490 <lwip_htons>
 801b8be:	4603      	mov	r3, r0
 801b8c0:	461a      	mov	r2, r3
 801b8c2:	693b      	ldr	r3, [r7, #16]
 801b8c4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801b8c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801b8c8:	4618      	mov	r0, r3
 801b8ca:	f7f7 fde1 	bl	8013490 <lwip_htons>
 801b8ce:	4603      	mov	r3, r0
 801b8d0:	461a      	mov	r2, r3
 801b8d2:	693b      	ldr	r3, [r7, #16]
 801b8d4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801b8d6:	693b      	ldr	r3, [r7, #16]
 801b8d8:	687a      	ldr	r2, [r7, #4]
 801b8da:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801b8dc:	68f8      	ldr	r0, [r7, #12]
 801b8de:	f7f7 fded 	bl	80134bc <lwip_htonl>
 801b8e2:	4602      	mov	r2, r0
 801b8e4:	693b      	ldr	r3, [r7, #16]
 801b8e6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801b8e8:	897b      	ldrh	r3, [r7, #10]
 801b8ea:	089b      	lsrs	r3, r3, #2
 801b8ec:	b29b      	uxth	r3, r3
 801b8ee:	3305      	adds	r3, #5
 801b8f0:	b29b      	uxth	r3, r3
 801b8f2:	031b      	lsls	r3, r3, #12
 801b8f4:	b29a      	uxth	r2, r3
 801b8f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801b8fa:	b29b      	uxth	r3, r3
 801b8fc:	4313      	orrs	r3, r2
 801b8fe:	b29b      	uxth	r3, r3
 801b900:	4618      	mov	r0, r3
 801b902:	f7f7 fdc5 	bl	8013490 <lwip_htons>
 801b906:	4603      	mov	r3, r0
 801b908:	461a      	mov	r2, r3
 801b90a:	693b      	ldr	r3, [r7, #16]
 801b90c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801b90e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801b910:	4618      	mov	r0, r3
 801b912:	f7f7 fdbd 	bl	8013490 <lwip_htons>
 801b916:	4603      	mov	r3, r0
 801b918:	461a      	mov	r2, r3
 801b91a:	693b      	ldr	r3, [r7, #16]
 801b91c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801b91e:	693b      	ldr	r3, [r7, #16]
 801b920:	2200      	movs	r2, #0
 801b922:	741a      	strb	r2, [r3, #16]
 801b924:	2200      	movs	r2, #0
 801b926:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801b928:	693b      	ldr	r3, [r7, #16]
 801b92a:	2200      	movs	r2, #0
 801b92c:	749a      	strb	r2, [r3, #18]
 801b92e:	2200      	movs	r2, #0
 801b930:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801b932:	697b      	ldr	r3, [r7, #20]
}
 801b934:	4618      	mov	r0, r3
 801b936:	3718      	adds	r7, #24
 801b938:	46bd      	mov	sp, r7
 801b93a:	bd80      	pop	{r7, pc}
 801b93c:	08025138 	.word	0x08025138
 801b940:	0802586c 	.word	0x0802586c
 801b944:	0802518c 	.word	0x0802518c

0801b948 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801b948:	b5b0      	push	{r4, r5, r7, lr}
 801b94a:	b08a      	sub	sp, #40	@ 0x28
 801b94c:	af04      	add	r7, sp, #16
 801b94e:	60f8      	str	r0, [r7, #12]
 801b950:	607b      	str	r3, [r7, #4]
 801b952:	460b      	mov	r3, r1
 801b954:	817b      	strh	r3, [r7, #10]
 801b956:	4613      	mov	r3, r2
 801b958:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801b95a:	68fb      	ldr	r3, [r7, #12]
 801b95c:	2b00      	cmp	r3, #0
 801b95e:	d106      	bne.n	801b96e <tcp_output_alloc_header+0x26>
 801b960:	4b15      	ldr	r3, [pc, #84]	@ (801b9b8 <tcp_output_alloc_header+0x70>)
 801b962:	f240 7242 	movw	r2, #1858	@ 0x742
 801b966:	4915      	ldr	r1, [pc, #84]	@ (801b9bc <tcp_output_alloc_header+0x74>)
 801b968:	4815      	ldr	r0, [pc, #84]	@ (801b9c0 <tcp_output_alloc_header+0x78>)
 801b96a:	f005 fbab 	bl	80210c4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801b96e:	68fb      	ldr	r3, [r7, #12]
 801b970:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801b972:	68fb      	ldr	r3, [r7, #12]
 801b974:	8adb      	ldrh	r3, [r3, #22]
 801b976:	68fa      	ldr	r2, [r7, #12]
 801b978:	8b12      	ldrh	r2, [r2, #24]
 801b97a:	68f9      	ldr	r1, [r7, #12]
 801b97c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 801b97e:	893d      	ldrh	r5, [r7, #8]
 801b980:	897c      	ldrh	r4, [r7, #10]
 801b982:	9103      	str	r1, [sp, #12]
 801b984:	2110      	movs	r1, #16
 801b986:	9102      	str	r1, [sp, #8]
 801b988:	9201      	str	r2, [sp, #4]
 801b98a:	9300      	str	r3, [sp, #0]
 801b98c:	687b      	ldr	r3, [r7, #4]
 801b98e:	462a      	mov	r2, r5
 801b990:	4621      	mov	r1, r4
 801b992:	f7ff ff67 	bl	801b864 <tcp_output_alloc_header_common>
 801b996:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801b998:	697b      	ldr	r3, [r7, #20]
 801b99a:	2b00      	cmp	r3, #0
 801b99c:	d006      	beq.n	801b9ac <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801b99e:	68fb      	ldr	r3, [r7, #12]
 801b9a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b9a2:	68fa      	ldr	r2, [r7, #12]
 801b9a4:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801b9a6:	441a      	add	r2, r3
 801b9a8:	68fb      	ldr	r3, [r7, #12]
 801b9aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 801b9ac:	697b      	ldr	r3, [r7, #20]
}
 801b9ae:	4618      	mov	r0, r3
 801b9b0:	3718      	adds	r7, #24
 801b9b2:	46bd      	mov	sp, r7
 801b9b4:	bdb0      	pop	{r4, r5, r7, pc}
 801b9b6:	bf00      	nop
 801b9b8:	08025138 	.word	0x08025138
 801b9bc:	0802589c 	.word	0x0802589c
 801b9c0:	0802518c 	.word	0x0802518c

0801b9c4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801b9c4:	b580      	push	{r7, lr}
 801b9c6:	b088      	sub	sp, #32
 801b9c8:	af00      	add	r7, sp, #0
 801b9ca:	60f8      	str	r0, [r7, #12]
 801b9cc:	60b9      	str	r1, [r7, #8]
 801b9ce:	4611      	mov	r1, r2
 801b9d0:	461a      	mov	r2, r3
 801b9d2:	460b      	mov	r3, r1
 801b9d4:	71fb      	strb	r3, [r7, #7]
 801b9d6:	4613      	mov	r3, r2
 801b9d8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801b9da:	2300      	movs	r3, #0
 801b9dc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801b9de:	68bb      	ldr	r3, [r7, #8]
 801b9e0:	2b00      	cmp	r3, #0
 801b9e2:	d106      	bne.n	801b9f2 <tcp_output_fill_options+0x2e>
 801b9e4:	4b12      	ldr	r3, [pc, #72]	@ (801ba30 <tcp_output_fill_options+0x6c>)
 801b9e6:	f240 7256 	movw	r2, #1878	@ 0x756
 801b9ea:	4912      	ldr	r1, [pc, #72]	@ (801ba34 <tcp_output_fill_options+0x70>)
 801b9ec:	4812      	ldr	r0, [pc, #72]	@ (801ba38 <tcp_output_fill_options+0x74>)
 801b9ee:	f005 fb69 	bl	80210c4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801b9f2:	68bb      	ldr	r3, [r7, #8]
 801b9f4:	685b      	ldr	r3, [r3, #4]
 801b9f6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801b9f8:	69bb      	ldr	r3, [r7, #24]
 801b9fa:	3314      	adds	r3, #20
 801b9fc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801b9fe:	8bfb      	ldrh	r3, [r7, #30]
 801ba00:	009b      	lsls	r3, r3, #2
 801ba02:	461a      	mov	r2, r3
 801ba04:	79fb      	ldrb	r3, [r7, #7]
 801ba06:	009b      	lsls	r3, r3, #2
 801ba08:	f003 0304 	and.w	r3, r3, #4
 801ba0c:	4413      	add	r3, r2
 801ba0e:	3314      	adds	r3, #20
 801ba10:	69ba      	ldr	r2, [r7, #24]
 801ba12:	4413      	add	r3, r2
 801ba14:	697a      	ldr	r2, [r7, #20]
 801ba16:	429a      	cmp	r2, r3
 801ba18:	d006      	beq.n	801ba28 <tcp_output_fill_options+0x64>
 801ba1a:	4b05      	ldr	r3, [pc, #20]	@ (801ba30 <tcp_output_fill_options+0x6c>)
 801ba1c:	f240 7275 	movw	r2, #1909	@ 0x775
 801ba20:	4906      	ldr	r1, [pc, #24]	@ (801ba3c <tcp_output_fill_options+0x78>)
 801ba22:	4805      	ldr	r0, [pc, #20]	@ (801ba38 <tcp_output_fill_options+0x74>)
 801ba24:	f005 fb4e 	bl	80210c4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801ba28:	bf00      	nop
 801ba2a:	3720      	adds	r7, #32
 801ba2c:	46bd      	mov	sp, r7
 801ba2e:	bd80      	pop	{r7, pc}
 801ba30:	08025138 	.word	0x08025138
 801ba34:	080258c4 	.word	0x080258c4
 801ba38:	0802518c 	.word	0x0802518c
 801ba3c:	080257bc 	.word	0x080257bc

0801ba40 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801ba40:	b580      	push	{r7, lr}
 801ba42:	b08a      	sub	sp, #40	@ 0x28
 801ba44:	af04      	add	r7, sp, #16
 801ba46:	60f8      	str	r0, [r7, #12]
 801ba48:	60b9      	str	r1, [r7, #8]
 801ba4a:	607a      	str	r2, [r7, #4]
 801ba4c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801ba4e:	68bb      	ldr	r3, [r7, #8]
 801ba50:	2b00      	cmp	r3, #0
 801ba52:	d106      	bne.n	801ba62 <tcp_output_control_segment+0x22>
 801ba54:	4b20      	ldr	r3, [pc, #128]	@ (801bad8 <tcp_output_control_segment+0x98>)
 801ba56:	f240 7287 	movw	r2, #1927	@ 0x787
 801ba5a:	4920      	ldr	r1, [pc, #128]	@ (801badc <tcp_output_control_segment+0x9c>)
 801ba5c:	4820      	ldr	r0, [pc, #128]	@ (801bae0 <tcp_output_control_segment+0xa0>)
 801ba5e:	f005 fb31 	bl	80210c4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801ba62:	683a      	ldr	r2, [r7, #0]
 801ba64:	6879      	ldr	r1, [r7, #4]
 801ba66:	68f8      	ldr	r0, [r7, #12]
 801ba68:	f7fe fa36 	bl	8019ed8 <tcp_route>
 801ba6c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801ba6e:	693b      	ldr	r3, [r7, #16]
 801ba70:	2b00      	cmp	r3, #0
 801ba72:	d102      	bne.n	801ba7a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801ba74:	23fc      	movs	r3, #252	@ 0xfc
 801ba76:	75fb      	strb	r3, [r7, #23]
 801ba78:	e024      	b.n	801bac4 <tcp_output_control_segment+0x84>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801ba7a:	68fb      	ldr	r3, [r7, #12]
 801ba7c:	2b00      	cmp	r3, #0
 801ba7e:	d006      	beq.n	801ba8e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801ba80:	68fb      	ldr	r3, [r7, #12]
 801ba82:	7adb      	ldrb	r3, [r3, #11]
 801ba84:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801ba86:	68fb      	ldr	r3, [r7, #12]
 801ba88:	7a9b      	ldrb	r3, [r3, #10]
 801ba8a:	757b      	strb	r3, [r7, #21]
 801ba8c:	e003      	b.n	801ba96 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801ba8e:	23ff      	movs	r3, #255	@ 0xff
 801ba90:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801ba92:	2300      	movs	r3, #0
 801ba94:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
 801ba96:	4b13      	ldr	r3, [pc, #76]	@ (801bae4 <tcp_output_control_segment+0xa4>)
 801ba98:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 801ba9c:	3301      	adds	r3, #1
 801ba9e:	b29a      	uxth	r2, r3
 801baa0:	4b10      	ldr	r3, [pc, #64]	@ (801bae4 <tcp_output_control_segment+0xa4>)
 801baa2:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801baa6:	7dba      	ldrb	r2, [r7, #22]
 801baa8:	693b      	ldr	r3, [r7, #16]
 801baaa:	9302      	str	r3, [sp, #8]
 801baac:	2306      	movs	r3, #6
 801baae:	9301      	str	r3, [sp, #4]
 801bab0:	7d7b      	ldrb	r3, [r7, #21]
 801bab2:	9300      	str	r3, [sp, #0]
 801bab4:	4613      	mov	r3, r2
 801bab6:	683a      	ldr	r2, [r7, #0]
 801bab8:	6879      	ldr	r1, [r7, #4]
 801baba:	68b8      	ldr	r0, [r7, #8]
 801babc:	f002 fe8e 	bl	801e7dc <ip4_output_if>
 801bac0:	4603      	mov	r3, r0
 801bac2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801bac4:	68b8      	ldr	r0, [r7, #8]
 801bac6:	f7f9 fc5d 	bl	8015384 <pbuf_free>
  return err;
 801baca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801bace:	4618      	mov	r0, r3
 801bad0:	3718      	adds	r7, #24
 801bad2:	46bd      	mov	sp, r7
 801bad4:	bd80      	pop	{r7, pc}
 801bad6:	bf00      	nop
 801bad8:	08025138 	.word	0x08025138
 801badc:	080258ec 	.word	0x080258ec
 801bae0:	0802518c 	.word	0x0802518c
 801bae4:	20028318 	.word	0x20028318

0801bae8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801bae8:	b590      	push	{r4, r7, lr}
 801baea:	b08b      	sub	sp, #44	@ 0x2c
 801baec:	af04      	add	r7, sp, #16
 801baee:	60f8      	str	r0, [r7, #12]
 801baf0:	60b9      	str	r1, [r7, #8]
 801baf2:	607a      	str	r2, [r7, #4]
 801baf4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801baf6:	683b      	ldr	r3, [r7, #0]
 801baf8:	2b00      	cmp	r3, #0
 801bafa:	d106      	bne.n	801bb0a <tcp_rst+0x22>
 801bafc:	4b1f      	ldr	r3, [pc, #124]	@ (801bb7c <tcp_rst+0x94>)
 801bafe:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801bb02:	491f      	ldr	r1, [pc, #124]	@ (801bb80 <tcp_rst+0x98>)
 801bb04:	481f      	ldr	r0, [pc, #124]	@ (801bb84 <tcp_rst+0x9c>)
 801bb06:	f005 fadd 	bl	80210c4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801bb0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bb0c:	2b00      	cmp	r3, #0
 801bb0e:	d106      	bne.n	801bb1e <tcp_rst+0x36>
 801bb10:	4b1a      	ldr	r3, [pc, #104]	@ (801bb7c <tcp_rst+0x94>)
 801bb12:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801bb16:	491c      	ldr	r1, [pc, #112]	@ (801bb88 <tcp_rst+0xa0>)
 801bb18:	481a      	ldr	r0, [pc, #104]	@ (801bb84 <tcp_rst+0x9c>)
 801bb1a:	f005 fad3 	bl	80210c4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801bb1e:	2300      	movs	r3, #0
 801bb20:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801bb22:	f246 0308 	movw	r3, #24584	@ 0x6008
 801bb26:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801bb28:	7dfb      	ldrb	r3, [r7, #23]
 801bb2a:	b29c      	uxth	r4, r3
 801bb2c:	68b8      	ldr	r0, [r7, #8]
 801bb2e:	f7f7 fcc5 	bl	80134bc <lwip_htonl>
 801bb32:	4602      	mov	r2, r0
 801bb34:	8abb      	ldrh	r3, [r7, #20]
 801bb36:	9303      	str	r3, [sp, #12]
 801bb38:	2314      	movs	r3, #20
 801bb3a:	9302      	str	r3, [sp, #8]
 801bb3c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801bb3e:	9301      	str	r3, [sp, #4]
 801bb40:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801bb42:	9300      	str	r3, [sp, #0]
 801bb44:	4613      	mov	r3, r2
 801bb46:	2200      	movs	r2, #0
 801bb48:	4621      	mov	r1, r4
 801bb4a:	6878      	ldr	r0, [r7, #4]
 801bb4c:	f7ff fe8a 	bl	801b864 <tcp_output_alloc_header_common>
 801bb50:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801bb52:	693b      	ldr	r3, [r7, #16]
 801bb54:	2b00      	cmp	r3, #0
 801bb56:	d00c      	beq.n	801bb72 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801bb58:	7dfb      	ldrb	r3, [r7, #23]
 801bb5a:	2200      	movs	r2, #0
 801bb5c:	6939      	ldr	r1, [r7, #16]
 801bb5e:	68f8      	ldr	r0, [r7, #12]
 801bb60:	f7ff ff30 	bl	801b9c4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801bb64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bb66:	683a      	ldr	r2, [r7, #0]
 801bb68:	6939      	ldr	r1, [r7, #16]
 801bb6a:	68f8      	ldr	r0, [r7, #12]
 801bb6c:	f7ff ff68 	bl	801ba40 <tcp_output_control_segment>
 801bb70:	e000      	b.n	801bb74 <tcp_rst+0x8c>
    return;
 801bb72:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801bb74:	371c      	adds	r7, #28
 801bb76:	46bd      	mov	sp, r7
 801bb78:	bd90      	pop	{r4, r7, pc}
 801bb7a:	bf00      	nop
 801bb7c:	08025138 	.word	0x08025138
 801bb80:	08025918 	.word	0x08025918
 801bb84:	0802518c 	.word	0x0802518c
 801bb88:	08025934 	.word	0x08025934

0801bb8c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801bb8c:	b590      	push	{r4, r7, lr}
 801bb8e:	b087      	sub	sp, #28
 801bb90:	af00      	add	r7, sp, #0
 801bb92:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801bb94:	2300      	movs	r3, #0
 801bb96:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801bb98:	2300      	movs	r3, #0
 801bb9a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801bb9c:	687b      	ldr	r3, [r7, #4]
 801bb9e:	2b00      	cmp	r3, #0
 801bba0:	d106      	bne.n	801bbb0 <tcp_send_empty_ack+0x24>
 801bba2:	4b28      	ldr	r3, [pc, #160]	@ (801bc44 <tcp_send_empty_ack+0xb8>)
 801bba4:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 801bba8:	4927      	ldr	r1, [pc, #156]	@ (801bc48 <tcp_send_empty_ack+0xbc>)
 801bbaa:	4828      	ldr	r0, [pc, #160]	@ (801bc4c <tcp_send_empty_ack+0xc0>)
 801bbac:	f005 fa8a 	bl	80210c4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801bbb0:	7dfb      	ldrb	r3, [r7, #23]
 801bbb2:	009b      	lsls	r3, r3, #2
 801bbb4:	b2db      	uxtb	r3, r3
 801bbb6:	f003 0304 	and.w	r3, r3, #4
 801bbba:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801bbbc:	7d7b      	ldrb	r3, [r7, #21]
 801bbbe:	b29c      	uxth	r4, r3
 801bbc0:	687b      	ldr	r3, [r7, #4]
 801bbc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801bbc4:	4618      	mov	r0, r3
 801bbc6:	f7f7 fc79 	bl	80134bc <lwip_htonl>
 801bbca:	4603      	mov	r3, r0
 801bbcc:	2200      	movs	r2, #0
 801bbce:	4621      	mov	r1, r4
 801bbd0:	6878      	ldr	r0, [r7, #4]
 801bbd2:	f7ff feb9 	bl	801b948 <tcp_output_alloc_header>
 801bbd6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801bbd8:	693b      	ldr	r3, [r7, #16]
 801bbda:	2b00      	cmp	r3, #0
 801bbdc:	d109      	bne.n	801bbf2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801bbde:	687b      	ldr	r3, [r7, #4]
 801bbe0:	8b5b      	ldrh	r3, [r3, #26]
 801bbe2:	f043 0303 	orr.w	r3, r3, #3
 801bbe6:	b29a      	uxth	r2, r3
 801bbe8:	687b      	ldr	r3, [r7, #4]
 801bbea:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801bbec:	f06f 0301 	mvn.w	r3, #1
 801bbf0:	e023      	b.n	801bc3a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801bbf2:	7dbb      	ldrb	r3, [r7, #22]
 801bbf4:	7dfa      	ldrb	r2, [r7, #23]
 801bbf6:	6939      	ldr	r1, [r7, #16]
 801bbf8:	6878      	ldr	r0, [r7, #4]
 801bbfa:	f7ff fee3 	bl	801b9c4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801bbfe:	687a      	ldr	r2, [r7, #4]
 801bc00:	687b      	ldr	r3, [r7, #4]
 801bc02:	3304      	adds	r3, #4
 801bc04:	6939      	ldr	r1, [r7, #16]
 801bc06:	6878      	ldr	r0, [r7, #4]
 801bc08:	f7ff ff1a 	bl	801ba40 <tcp_output_control_segment>
 801bc0c:	4603      	mov	r3, r0
 801bc0e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801bc10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bc14:	2b00      	cmp	r3, #0
 801bc16:	d007      	beq.n	801bc28 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801bc18:	687b      	ldr	r3, [r7, #4]
 801bc1a:	8b5b      	ldrh	r3, [r3, #26]
 801bc1c:	f043 0303 	orr.w	r3, r3, #3
 801bc20:	b29a      	uxth	r2, r3
 801bc22:	687b      	ldr	r3, [r7, #4]
 801bc24:	835a      	strh	r2, [r3, #26]
 801bc26:	e006      	b.n	801bc36 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801bc28:	687b      	ldr	r3, [r7, #4]
 801bc2a:	8b5b      	ldrh	r3, [r3, #26]
 801bc2c:	f023 0303 	bic.w	r3, r3, #3
 801bc30:	b29a      	uxth	r2, r3
 801bc32:	687b      	ldr	r3, [r7, #4]
 801bc34:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801bc36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801bc3a:	4618      	mov	r0, r3
 801bc3c:	371c      	adds	r7, #28
 801bc3e:	46bd      	mov	sp, r7
 801bc40:	bd90      	pop	{r4, r7, pc}
 801bc42:	bf00      	nop
 801bc44:	08025138 	.word	0x08025138
 801bc48:	08025950 	.word	0x08025950
 801bc4c:	0802518c 	.word	0x0802518c

0801bc50 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801bc50:	b590      	push	{r4, r7, lr}
 801bc52:	b085      	sub	sp, #20
 801bc54:	af00      	add	r7, sp, #0
 801bc56:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801bc58:	2300      	movs	r3, #0
 801bc5a:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801bc5c:	687b      	ldr	r3, [r7, #4]
 801bc5e:	2b00      	cmp	r3, #0
 801bc60:	d106      	bne.n	801bc70 <tcp_keepalive+0x20>
 801bc62:	4b18      	ldr	r3, [pc, #96]	@ (801bcc4 <tcp_keepalive+0x74>)
 801bc64:	f640 0224 	movw	r2, #2084	@ 0x824
 801bc68:	4917      	ldr	r1, [pc, #92]	@ (801bcc8 <tcp_keepalive+0x78>)
 801bc6a:	4818      	ldr	r0, [pc, #96]	@ (801bccc <tcp_keepalive+0x7c>)
 801bc6c:	f005 fa2a 	bl	80210c4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801bc70:	7abb      	ldrb	r3, [r7, #10]
 801bc72:	b29c      	uxth	r4, r3
 801bc74:	687b      	ldr	r3, [r7, #4]
 801bc76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801bc78:	3b01      	subs	r3, #1
 801bc7a:	4618      	mov	r0, r3
 801bc7c:	f7f7 fc1e 	bl	80134bc <lwip_htonl>
 801bc80:	4603      	mov	r3, r0
 801bc82:	2200      	movs	r2, #0
 801bc84:	4621      	mov	r1, r4
 801bc86:	6878      	ldr	r0, [r7, #4]
 801bc88:	f7ff fe5e 	bl	801b948 <tcp_output_alloc_header>
 801bc8c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801bc8e:	68fb      	ldr	r3, [r7, #12]
 801bc90:	2b00      	cmp	r3, #0
 801bc92:	d102      	bne.n	801bc9a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801bc94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bc98:	e010      	b.n	801bcbc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801bc9a:	7abb      	ldrb	r3, [r7, #10]
 801bc9c:	2200      	movs	r2, #0
 801bc9e:	68f9      	ldr	r1, [r7, #12]
 801bca0:	6878      	ldr	r0, [r7, #4]
 801bca2:	f7ff fe8f 	bl	801b9c4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801bca6:	687a      	ldr	r2, [r7, #4]
 801bca8:	687b      	ldr	r3, [r7, #4]
 801bcaa:	3304      	adds	r3, #4
 801bcac:	68f9      	ldr	r1, [r7, #12]
 801bcae:	6878      	ldr	r0, [r7, #4]
 801bcb0:	f7ff fec6 	bl	801ba40 <tcp_output_control_segment>
 801bcb4:	4603      	mov	r3, r0
 801bcb6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801bcb8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801bcbc:	4618      	mov	r0, r3
 801bcbe:	3714      	adds	r7, #20
 801bcc0:	46bd      	mov	sp, r7
 801bcc2:	bd90      	pop	{r4, r7, pc}
 801bcc4:	08025138 	.word	0x08025138
 801bcc8:	08025970 	.word	0x08025970
 801bccc:	0802518c 	.word	0x0802518c

0801bcd0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801bcd0:	b590      	push	{r4, r7, lr}
 801bcd2:	b08b      	sub	sp, #44	@ 0x2c
 801bcd4:	af00      	add	r7, sp, #0
 801bcd6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801bcd8:	2300      	movs	r3, #0
 801bcda:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801bcdc:	687b      	ldr	r3, [r7, #4]
 801bcde:	2b00      	cmp	r3, #0
 801bce0:	d106      	bne.n	801bcf0 <tcp_zero_window_probe+0x20>
 801bce2:	4b4d      	ldr	r3, [pc, #308]	@ (801be18 <tcp_zero_window_probe+0x148>)
 801bce4:	f640 024f 	movw	r2, #2127	@ 0x84f
 801bce8:	494c      	ldr	r1, [pc, #304]	@ (801be1c <tcp_zero_window_probe+0x14c>)
 801bcea:	484d      	ldr	r0, [pc, #308]	@ (801be20 <tcp_zero_window_probe+0x150>)
 801bcec:	f005 f9ea 	bl	80210c4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801bcf0:	687b      	ldr	r3, [r7, #4]
 801bcf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801bcf4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (seg == NULL) {
 801bcf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bcf8:	2b00      	cmp	r3, #0
 801bcfa:	d101      	bne.n	801bd00 <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801bcfc:	2300      	movs	r3, #0
 801bcfe:	e087      	b.n	801be10 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801bd00:	687b      	ldr	r3, [r7, #4]
 801bd02:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801bd06:	2bff      	cmp	r3, #255	@ 0xff
 801bd08:	d007      	beq.n	801bd1a <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 801bd0a:	687b      	ldr	r3, [r7, #4]
 801bd0c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801bd10:	3301      	adds	r3, #1
 801bd12:	b2da      	uxtb	r2, r3
 801bd14:	687b      	ldr	r3, [r7, #4]
 801bd16:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801bd1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd1c:	691b      	ldr	r3, [r3, #16]
 801bd1e:	899b      	ldrh	r3, [r3, #12]
 801bd20:	b29b      	uxth	r3, r3
 801bd22:	4618      	mov	r0, r3
 801bd24:	f7f7 fbb4 	bl	8013490 <lwip_htons>
 801bd28:	4603      	mov	r3, r0
 801bd2a:	b2db      	uxtb	r3, r3
 801bd2c:	f003 0301 	and.w	r3, r3, #1
 801bd30:	2b00      	cmp	r3, #0
 801bd32:	d005      	beq.n	801bd40 <tcp_zero_window_probe+0x70>
 801bd34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd36:	891b      	ldrh	r3, [r3, #8]
 801bd38:	2b00      	cmp	r3, #0
 801bd3a:	d101      	bne.n	801bd40 <tcp_zero_window_probe+0x70>
 801bd3c:	2301      	movs	r3, #1
 801bd3e:	e000      	b.n	801bd42 <tcp_zero_window_probe+0x72>
 801bd40:	2300      	movs	r3, #0
 801bd42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801bd46:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801bd4a:	2b00      	cmp	r3, #0
 801bd4c:	bf0c      	ite	eq
 801bd4e:	2301      	moveq	r3, #1
 801bd50:	2300      	movne	r3, #0
 801bd52:	b2db      	uxtb	r3, r3
 801bd54:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801bd56:	7cfb      	ldrb	r3, [r7, #19]
 801bd58:	b299      	uxth	r1, r3
 801bd5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd5c:	691b      	ldr	r3, [r3, #16]
 801bd5e:	685b      	ldr	r3, [r3, #4]
 801bd60:	8c3a      	ldrh	r2, [r7, #32]
 801bd62:	6878      	ldr	r0, [r7, #4]
 801bd64:	f7ff fdf0 	bl	801b948 <tcp_output_alloc_header>
 801bd68:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 801bd6a:	69fb      	ldr	r3, [r7, #28]
 801bd6c:	2b00      	cmp	r3, #0
 801bd6e:	d102      	bne.n	801bd76 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801bd70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bd74:	e04c      	b.n	801be10 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801bd76:	69fb      	ldr	r3, [r7, #28]
 801bd78:	685b      	ldr	r3, [r3, #4]
 801bd7a:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 801bd7c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801bd80:	2b00      	cmp	r3, #0
 801bd82:	d011      	beq.n	801bda8 <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801bd84:	69bb      	ldr	r3, [r7, #24]
 801bd86:	899b      	ldrh	r3, [r3, #12]
 801bd88:	b29b      	uxth	r3, r3
 801bd8a:	b21b      	sxth	r3, r3
 801bd8c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801bd90:	b21c      	sxth	r4, r3
 801bd92:	2011      	movs	r0, #17
 801bd94:	f7f7 fb7c 	bl	8013490 <lwip_htons>
 801bd98:	4603      	mov	r3, r0
 801bd9a:	b21b      	sxth	r3, r3
 801bd9c:	4323      	orrs	r3, r4
 801bd9e:	b21b      	sxth	r3, r3
 801bda0:	b29a      	uxth	r2, r3
 801bda2:	69bb      	ldr	r3, [r7, #24]
 801bda4:	819a      	strh	r2, [r3, #12]
 801bda6:	e010      	b.n	801bdca <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801bda8:	69fb      	ldr	r3, [r7, #28]
 801bdaa:	685b      	ldr	r3, [r3, #4]
 801bdac:	3314      	adds	r3, #20
 801bdae:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801bdb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bdb2:	6858      	ldr	r0, [r3, #4]
 801bdb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bdb6:	685b      	ldr	r3, [r3, #4]
 801bdb8:	891a      	ldrh	r2, [r3, #8]
 801bdba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bdbc:	891b      	ldrh	r3, [r3, #8]
 801bdbe:	1ad3      	subs	r3, r2, r3
 801bdc0:	b29b      	uxth	r3, r3
 801bdc2:	2201      	movs	r2, #1
 801bdc4:	6979      	ldr	r1, [r7, #20]
 801bdc6:	f7f9 fd0f 	bl	80157e8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801bdca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bdcc:	691b      	ldr	r3, [r3, #16]
 801bdce:	685b      	ldr	r3, [r3, #4]
 801bdd0:	4618      	mov	r0, r3
 801bdd2:	f7f7 fb73 	bl	80134bc <lwip_htonl>
 801bdd6:	4603      	mov	r3, r0
 801bdd8:	3301      	adds	r3, #1
 801bdda:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801bddc:	687b      	ldr	r3, [r7, #4]
 801bdde:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801bde0:	68fb      	ldr	r3, [r7, #12]
 801bde2:	1ad3      	subs	r3, r2, r3
 801bde4:	2b00      	cmp	r3, #0
 801bde6:	da02      	bge.n	801bdee <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 801bde8:	687b      	ldr	r3, [r7, #4]
 801bdea:	68fa      	ldr	r2, [r7, #12]
 801bdec:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801bdee:	7cfb      	ldrb	r3, [r7, #19]
 801bdf0:	2200      	movs	r2, #0
 801bdf2:	69f9      	ldr	r1, [r7, #28]
 801bdf4:	6878      	ldr	r0, [r7, #4]
 801bdf6:	f7ff fde5 	bl	801b9c4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801bdfa:	687a      	ldr	r2, [r7, #4]
 801bdfc:	687b      	ldr	r3, [r7, #4]
 801bdfe:	3304      	adds	r3, #4
 801be00:	69f9      	ldr	r1, [r7, #28]
 801be02:	6878      	ldr	r0, [r7, #4]
 801be04:	f7ff fe1c 	bl	801ba40 <tcp_output_control_segment>
 801be08:	4603      	mov	r3, r0
 801be0a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801be0c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801be10:	4618      	mov	r0, r3
 801be12:	372c      	adds	r7, #44	@ 0x2c
 801be14:	46bd      	mov	sp, r7
 801be16:	bd90      	pop	{r4, r7, pc}
 801be18:	08025138 	.word	0x08025138
 801be1c:	0802598c 	.word	0x0802598c
 801be20:	0802518c 	.word	0x0802518c

0801be24 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801be24:	b580      	push	{r7, lr}
 801be26:	b082      	sub	sp, #8
 801be28:	af00      	add	r7, sp, #0
 801be2a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801be2c:	f7f9 ff48 	bl	8015cc0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801be30:	4b0a      	ldr	r3, [pc, #40]	@ (801be5c <tcpip_tcp_timer+0x38>)
 801be32:	681b      	ldr	r3, [r3, #0]
 801be34:	2b00      	cmp	r3, #0
 801be36:	d103      	bne.n	801be40 <tcpip_tcp_timer+0x1c>
 801be38:	4b09      	ldr	r3, [pc, #36]	@ (801be60 <tcpip_tcp_timer+0x3c>)
 801be3a:	681b      	ldr	r3, [r3, #0]
 801be3c:	2b00      	cmp	r3, #0
 801be3e:	d005      	beq.n	801be4c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801be40:	2200      	movs	r2, #0
 801be42:	4908      	ldr	r1, [pc, #32]	@ (801be64 <tcpip_tcp_timer+0x40>)
 801be44:	20fa      	movs	r0, #250	@ 0xfa
 801be46:	f000 f8f5 	bl	801c034 <sys_timeout>
 801be4a:	e003      	b.n	801be54 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801be4c:	4b06      	ldr	r3, [pc, #24]	@ (801be68 <tcpip_tcp_timer+0x44>)
 801be4e:	2200      	movs	r2, #0
 801be50:	601a      	str	r2, [r3, #0]
  }
}
 801be52:	bf00      	nop
 801be54:	bf00      	nop
 801be56:	3708      	adds	r7, #8
 801be58:	46bd      	mov	sp, r7
 801be5a:	bd80      	pop	{r7, pc}
 801be5c:	20028424 	.word	0x20028424
 801be60:	20028428 	.word	0x20028428
 801be64:	0801be25 	.word	0x0801be25
 801be68:	20028474 	.word	0x20028474

0801be6c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801be6c:	b580      	push	{r7, lr}
 801be6e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801be70:	4b0a      	ldr	r3, [pc, #40]	@ (801be9c <tcp_timer_needed+0x30>)
 801be72:	681b      	ldr	r3, [r3, #0]
 801be74:	2b00      	cmp	r3, #0
 801be76:	d10f      	bne.n	801be98 <tcp_timer_needed+0x2c>
 801be78:	4b09      	ldr	r3, [pc, #36]	@ (801bea0 <tcp_timer_needed+0x34>)
 801be7a:	681b      	ldr	r3, [r3, #0]
 801be7c:	2b00      	cmp	r3, #0
 801be7e:	d103      	bne.n	801be88 <tcp_timer_needed+0x1c>
 801be80:	4b08      	ldr	r3, [pc, #32]	@ (801bea4 <tcp_timer_needed+0x38>)
 801be82:	681b      	ldr	r3, [r3, #0]
 801be84:	2b00      	cmp	r3, #0
 801be86:	d007      	beq.n	801be98 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801be88:	4b04      	ldr	r3, [pc, #16]	@ (801be9c <tcp_timer_needed+0x30>)
 801be8a:	2201      	movs	r2, #1
 801be8c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801be8e:	2200      	movs	r2, #0
 801be90:	4905      	ldr	r1, [pc, #20]	@ (801bea8 <tcp_timer_needed+0x3c>)
 801be92:	20fa      	movs	r0, #250	@ 0xfa
 801be94:	f000 f8ce 	bl	801c034 <sys_timeout>
  }
}
 801be98:	bf00      	nop
 801be9a:	bd80      	pop	{r7, pc}
 801be9c:	20028474 	.word	0x20028474
 801bea0:	20028424 	.word	0x20028424
 801bea4:	20028428 	.word	0x20028428
 801bea8:	0801be25 	.word	0x0801be25

0801beac <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801beac:	b580      	push	{r7, lr}
 801beae:	b086      	sub	sp, #24
 801beb0:	af00      	add	r7, sp, #0
 801beb2:	60f8      	str	r0, [r7, #12]
 801beb4:	60b9      	str	r1, [r7, #8]
 801beb6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801beb8:	22bc      	movs	r2, #188	@ 0xbc
 801beba:	4930      	ldr	r1, [pc, #192]	@ (801bf7c <sys_timeout_abs+0xd0>)
 801bebc:	200a      	movs	r0, #10
 801bebe:	f7f8 f9e1 	bl	8014284 <memp_malloc_fn>
 801bec2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801bec4:	693b      	ldr	r3, [r7, #16]
 801bec6:	2b00      	cmp	r3, #0
 801bec8:	d109      	bne.n	801bede <sys_timeout_abs+0x32>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801beca:	693b      	ldr	r3, [r7, #16]
 801becc:	2b00      	cmp	r3, #0
 801bece:	d151      	bne.n	801bf74 <sys_timeout_abs+0xc8>
 801bed0:	4b2a      	ldr	r3, [pc, #168]	@ (801bf7c <sys_timeout_abs+0xd0>)
 801bed2:	22be      	movs	r2, #190	@ 0xbe
 801bed4:	492a      	ldr	r1, [pc, #168]	@ (801bf80 <sys_timeout_abs+0xd4>)
 801bed6:	482b      	ldr	r0, [pc, #172]	@ (801bf84 <sys_timeout_abs+0xd8>)
 801bed8:	f005 f8f4 	bl	80210c4 <iprintf>
    return;
 801bedc:	e04a      	b.n	801bf74 <sys_timeout_abs+0xc8>
  }

  timeout->next = NULL;
 801bede:	693b      	ldr	r3, [r7, #16]
 801bee0:	2200      	movs	r2, #0
 801bee2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801bee4:	693b      	ldr	r3, [r7, #16]
 801bee6:	68ba      	ldr	r2, [r7, #8]
 801bee8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801beea:	693b      	ldr	r3, [r7, #16]
 801beec:	687a      	ldr	r2, [r7, #4]
 801beee:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801bef0:	693b      	ldr	r3, [r7, #16]
 801bef2:	68fa      	ldr	r2, [r7, #12]
 801bef4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801bef6:	4b24      	ldr	r3, [pc, #144]	@ (801bf88 <sys_timeout_abs+0xdc>)
 801bef8:	681b      	ldr	r3, [r3, #0]
 801befa:	2b00      	cmp	r3, #0
 801befc:	d103      	bne.n	801bf06 <sys_timeout_abs+0x5a>
    next_timeout = timeout;
 801befe:	4a22      	ldr	r2, [pc, #136]	@ (801bf88 <sys_timeout_abs+0xdc>)
 801bf00:	693b      	ldr	r3, [r7, #16]
 801bf02:	6013      	str	r3, [r2, #0]
    return;
 801bf04:	e037      	b.n	801bf76 <sys_timeout_abs+0xca>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801bf06:	693b      	ldr	r3, [r7, #16]
 801bf08:	685a      	ldr	r2, [r3, #4]
 801bf0a:	4b1f      	ldr	r3, [pc, #124]	@ (801bf88 <sys_timeout_abs+0xdc>)
 801bf0c:	681b      	ldr	r3, [r3, #0]
 801bf0e:	685b      	ldr	r3, [r3, #4]
 801bf10:	1ad3      	subs	r3, r2, r3
 801bf12:	0fdb      	lsrs	r3, r3, #31
 801bf14:	f003 0301 	and.w	r3, r3, #1
 801bf18:	b2db      	uxtb	r3, r3
 801bf1a:	2b00      	cmp	r3, #0
 801bf1c:	d007      	beq.n	801bf2e <sys_timeout_abs+0x82>
    timeout->next = next_timeout;
 801bf1e:	4b1a      	ldr	r3, [pc, #104]	@ (801bf88 <sys_timeout_abs+0xdc>)
 801bf20:	681a      	ldr	r2, [r3, #0]
 801bf22:	693b      	ldr	r3, [r7, #16]
 801bf24:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801bf26:	4a18      	ldr	r2, [pc, #96]	@ (801bf88 <sys_timeout_abs+0xdc>)
 801bf28:	693b      	ldr	r3, [r7, #16]
 801bf2a:	6013      	str	r3, [r2, #0]
 801bf2c:	e023      	b.n	801bf76 <sys_timeout_abs+0xca>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801bf2e:	4b16      	ldr	r3, [pc, #88]	@ (801bf88 <sys_timeout_abs+0xdc>)
 801bf30:	681b      	ldr	r3, [r3, #0]
 801bf32:	617b      	str	r3, [r7, #20]
 801bf34:	e01a      	b.n	801bf6c <sys_timeout_abs+0xc0>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801bf36:	697b      	ldr	r3, [r7, #20]
 801bf38:	681b      	ldr	r3, [r3, #0]
 801bf3a:	2b00      	cmp	r3, #0
 801bf3c:	d00b      	beq.n	801bf56 <sys_timeout_abs+0xaa>
 801bf3e:	693b      	ldr	r3, [r7, #16]
 801bf40:	685a      	ldr	r2, [r3, #4]
 801bf42:	697b      	ldr	r3, [r7, #20]
 801bf44:	681b      	ldr	r3, [r3, #0]
 801bf46:	685b      	ldr	r3, [r3, #4]
 801bf48:	1ad3      	subs	r3, r2, r3
 801bf4a:	0fdb      	lsrs	r3, r3, #31
 801bf4c:	f003 0301 	and.w	r3, r3, #1
 801bf50:	b2db      	uxtb	r3, r3
 801bf52:	2b00      	cmp	r3, #0
 801bf54:	d007      	beq.n	801bf66 <sys_timeout_abs+0xba>
        timeout->next = t->next;
 801bf56:	697b      	ldr	r3, [r7, #20]
 801bf58:	681a      	ldr	r2, [r3, #0]
 801bf5a:	693b      	ldr	r3, [r7, #16]
 801bf5c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801bf5e:	697b      	ldr	r3, [r7, #20]
 801bf60:	693a      	ldr	r2, [r7, #16]
 801bf62:	601a      	str	r2, [r3, #0]
        break;
 801bf64:	e007      	b.n	801bf76 <sys_timeout_abs+0xca>
    for (t = next_timeout; t != NULL; t = t->next) {
 801bf66:	697b      	ldr	r3, [r7, #20]
 801bf68:	681b      	ldr	r3, [r3, #0]
 801bf6a:	617b      	str	r3, [r7, #20]
 801bf6c:	697b      	ldr	r3, [r7, #20]
 801bf6e:	2b00      	cmp	r3, #0
 801bf70:	d1e1      	bne.n	801bf36 <sys_timeout_abs+0x8a>
 801bf72:	e000      	b.n	801bf76 <sys_timeout_abs+0xca>
    return;
 801bf74:	bf00      	nop
      }
    }
  }
}
 801bf76:	3718      	adds	r7, #24
 801bf78:	46bd      	mov	sp, r7
 801bf7a:	bd80      	pop	{r7, pc}
 801bf7c:	080259b0 	.word	0x080259b0
 801bf80:	080259e4 	.word	0x080259e4
 801bf84:	08025a24 	.word	0x08025a24
 801bf88:	2002846c 	.word	0x2002846c

0801bf8c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801bf8c:	b580      	push	{r7, lr}
 801bf8e:	b086      	sub	sp, #24
 801bf90:	af00      	add	r7, sp, #0
 801bf92:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801bf94:	687b      	ldr	r3, [r7, #4]
 801bf96:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801bf98:	697b      	ldr	r3, [r7, #20]
 801bf9a:	685b      	ldr	r3, [r3, #4]
 801bf9c:	4798      	blx	r3

  now = sys_now();
 801bf9e:	f7f0 fb3d 	bl	800c61c <sys_now>
 801bfa2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801bfa4:	697b      	ldr	r3, [r7, #20]
 801bfa6:	681a      	ldr	r2, [r3, #0]
 801bfa8:	4b0f      	ldr	r3, [pc, #60]	@ (801bfe8 <lwip_cyclic_timer+0x5c>)
 801bfaa:	681b      	ldr	r3, [r3, #0]
 801bfac:	4413      	add	r3, r2
 801bfae:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801bfb0:	68fa      	ldr	r2, [r7, #12]
 801bfb2:	693b      	ldr	r3, [r7, #16]
 801bfb4:	1ad3      	subs	r3, r2, r3
 801bfb6:	0fdb      	lsrs	r3, r3, #31
 801bfb8:	f003 0301 	and.w	r3, r3, #1
 801bfbc:	b2db      	uxtb	r3, r3
 801bfbe:	2b00      	cmp	r3, #0
 801bfc0:	d009      	beq.n	801bfd6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801bfc2:	697b      	ldr	r3, [r7, #20]
 801bfc4:	681a      	ldr	r2, [r3, #0]
 801bfc6:	693b      	ldr	r3, [r7, #16]
 801bfc8:	4413      	add	r3, r2
 801bfca:	687a      	ldr	r2, [r7, #4]
 801bfcc:	4907      	ldr	r1, [pc, #28]	@ (801bfec <lwip_cyclic_timer+0x60>)
 801bfce:	4618      	mov	r0, r3
 801bfd0:	f7ff ff6c 	bl	801beac <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801bfd4:	e004      	b.n	801bfe0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801bfd6:	687a      	ldr	r2, [r7, #4]
 801bfd8:	4904      	ldr	r1, [pc, #16]	@ (801bfec <lwip_cyclic_timer+0x60>)
 801bfda:	68f8      	ldr	r0, [r7, #12]
 801bfdc:	f7ff ff66 	bl	801beac <sys_timeout_abs>
}
 801bfe0:	bf00      	nop
 801bfe2:	3718      	adds	r7, #24
 801bfe4:	46bd      	mov	sp, r7
 801bfe6:	bd80      	pop	{r7, pc}
 801bfe8:	20028470 	.word	0x20028470
 801bfec:	0801bf8d 	.word	0x0801bf8d

0801bff0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801bff0:	b580      	push	{r7, lr}
 801bff2:	b082      	sub	sp, #8
 801bff4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801bff6:	2301      	movs	r3, #1
 801bff8:	607b      	str	r3, [r7, #4]
 801bffa:	e00e      	b.n	801c01a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801bffc:	4a0b      	ldr	r2, [pc, #44]	@ (801c02c <sys_timeouts_init+0x3c>)
 801bffe:	687b      	ldr	r3, [r7, #4]
 801c000:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801c004:	687b      	ldr	r3, [r7, #4]
 801c006:	00db      	lsls	r3, r3, #3
 801c008:	4a08      	ldr	r2, [pc, #32]	@ (801c02c <sys_timeouts_init+0x3c>)
 801c00a:	4413      	add	r3, r2
 801c00c:	461a      	mov	r2, r3
 801c00e:	4908      	ldr	r1, [pc, #32]	@ (801c030 <sys_timeouts_init+0x40>)
 801c010:	f000 f810 	bl	801c034 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801c014:	687b      	ldr	r3, [r7, #4]
 801c016:	3301      	adds	r3, #1
 801c018:	607b      	str	r3, [r7, #4]
 801c01a:	687b      	ldr	r3, [r7, #4]
 801c01c:	2b02      	cmp	r3, #2
 801c01e:	d9ed      	bls.n	801bffc <sys_timeouts_init+0xc>
  }
}
 801c020:	bf00      	nop
 801c022:	bf00      	nop
 801c024:	3708      	adds	r7, #8
 801c026:	46bd      	mov	sp, r7
 801c028:	bd80      	pop	{r7, pc}
 801c02a:	bf00      	nop
 801c02c:	0802724c 	.word	0x0802724c
 801c030:	0801bf8d 	.word	0x0801bf8d

0801c034 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801c034:	b580      	push	{r7, lr}
 801c036:	b086      	sub	sp, #24
 801c038:	af00      	add	r7, sp, #0
 801c03a:	60f8      	str	r0, [r7, #12]
 801c03c:	60b9      	str	r1, [r7, #8]
 801c03e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801c040:	68fb      	ldr	r3, [r7, #12]
 801c042:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801c046:	d306      	bcc.n	801c056 <sys_timeout+0x22>
 801c048:	4b0a      	ldr	r3, [pc, #40]	@ (801c074 <sys_timeout+0x40>)
 801c04a:	f240 1229 	movw	r2, #297	@ 0x129
 801c04e:	490a      	ldr	r1, [pc, #40]	@ (801c078 <sys_timeout+0x44>)
 801c050:	480a      	ldr	r0, [pc, #40]	@ (801c07c <sys_timeout+0x48>)
 801c052:	f005 f837 	bl	80210c4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801c056:	f7f0 fae1 	bl	800c61c <sys_now>
 801c05a:	4602      	mov	r2, r0
 801c05c:	68fb      	ldr	r3, [r7, #12]
 801c05e:	4413      	add	r3, r2
 801c060:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801c062:	687a      	ldr	r2, [r7, #4]
 801c064:	68b9      	ldr	r1, [r7, #8]
 801c066:	6978      	ldr	r0, [r7, #20]
 801c068:	f7ff ff20 	bl	801beac <sys_timeout_abs>
#endif
}
 801c06c:	bf00      	nop
 801c06e:	3718      	adds	r7, #24
 801c070:	46bd      	mov	sp, r7
 801c072:	bd80      	pop	{r7, pc}
 801c074:	080259b0 	.word	0x080259b0
 801c078:	08025a4c 	.word	0x08025a4c
 801c07c:	08025a24 	.word	0x08025a24

0801c080 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801c080:	b580      	push	{r7, lr}
 801c082:	b084      	sub	sp, #16
 801c084:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801c086:	f7f0 fac9 	bl	800c61c <sys_now>
 801c08a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801c08c:	4b17      	ldr	r3, [pc, #92]	@ (801c0ec <sys_check_timeouts+0x6c>)
 801c08e:	681b      	ldr	r3, [r3, #0]
 801c090:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801c092:	68bb      	ldr	r3, [r7, #8]
 801c094:	2b00      	cmp	r3, #0
 801c096:	d022      	beq.n	801c0de <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801c098:	68bb      	ldr	r3, [r7, #8]
 801c09a:	685b      	ldr	r3, [r3, #4]
 801c09c:	68fa      	ldr	r2, [r7, #12]
 801c09e:	1ad3      	subs	r3, r2, r3
 801c0a0:	0fdb      	lsrs	r3, r3, #31
 801c0a2:	f003 0301 	and.w	r3, r3, #1
 801c0a6:	b2db      	uxtb	r3, r3
 801c0a8:	2b00      	cmp	r3, #0
 801c0aa:	d11a      	bne.n	801c0e2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801c0ac:	68bb      	ldr	r3, [r7, #8]
 801c0ae:	681b      	ldr	r3, [r3, #0]
 801c0b0:	4a0e      	ldr	r2, [pc, #56]	@ (801c0ec <sys_check_timeouts+0x6c>)
 801c0b2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801c0b4:	68bb      	ldr	r3, [r7, #8]
 801c0b6:	689b      	ldr	r3, [r3, #8]
 801c0b8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801c0ba:	68bb      	ldr	r3, [r7, #8]
 801c0bc:	68db      	ldr	r3, [r3, #12]
 801c0be:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801c0c0:	68bb      	ldr	r3, [r7, #8]
 801c0c2:	685b      	ldr	r3, [r3, #4]
 801c0c4:	4a0a      	ldr	r2, [pc, #40]	@ (801c0f0 <sys_check_timeouts+0x70>)
 801c0c6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801c0c8:	68b9      	ldr	r1, [r7, #8]
 801c0ca:	200a      	movs	r0, #10
 801c0cc:	f7f8 f96c 	bl	80143a8 <memp_free>
    if (handler != NULL) {
 801c0d0:	687b      	ldr	r3, [r7, #4]
 801c0d2:	2b00      	cmp	r3, #0
 801c0d4:	d0da      	beq.n	801c08c <sys_check_timeouts+0xc>
      handler(arg);
 801c0d6:	687b      	ldr	r3, [r7, #4]
 801c0d8:	6838      	ldr	r0, [r7, #0]
 801c0da:	4798      	blx	r3
  do {
 801c0dc:	e7d6      	b.n	801c08c <sys_check_timeouts+0xc>
      return;
 801c0de:	bf00      	nop
 801c0e0:	e000      	b.n	801c0e4 <sys_check_timeouts+0x64>
      return;
 801c0e2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801c0e4:	3710      	adds	r7, #16
 801c0e6:	46bd      	mov	sp, r7
 801c0e8:	bd80      	pop	{r7, pc}
 801c0ea:	bf00      	nop
 801c0ec:	2002846c 	.word	0x2002846c
 801c0f0:	20028470 	.word	0x20028470

0801c0f4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801c0f4:	b580      	push	{r7, lr}
 801c0f6:	b082      	sub	sp, #8
 801c0f8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801c0fa:	4b16      	ldr	r3, [pc, #88]	@ (801c154 <sys_timeouts_sleeptime+0x60>)
 801c0fc:	681b      	ldr	r3, [r3, #0]
 801c0fe:	2b00      	cmp	r3, #0
 801c100:	d102      	bne.n	801c108 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801c102:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c106:	e020      	b.n	801c14a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801c108:	f7f0 fa88 	bl	800c61c <sys_now>
 801c10c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801c10e:	4b11      	ldr	r3, [pc, #68]	@ (801c154 <sys_timeouts_sleeptime+0x60>)
 801c110:	681b      	ldr	r3, [r3, #0]
 801c112:	685a      	ldr	r2, [r3, #4]
 801c114:	687b      	ldr	r3, [r7, #4]
 801c116:	1ad3      	subs	r3, r2, r3
 801c118:	0fdb      	lsrs	r3, r3, #31
 801c11a:	f003 0301 	and.w	r3, r3, #1
 801c11e:	b2db      	uxtb	r3, r3
 801c120:	2b00      	cmp	r3, #0
 801c122:	d001      	beq.n	801c128 <sys_timeouts_sleeptime+0x34>
    return 0;
 801c124:	2300      	movs	r3, #0
 801c126:	e010      	b.n	801c14a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801c128:	4b0a      	ldr	r3, [pc, #40]	@ (801c154 <sys_timeouts_sleeptime+0x60>)
 801c12a:	681b      	ldr	r3, [r3, #0]
 801c12c:	685a      	ldr	r2, [r3, #4]
 801c12e:	687b      	ldr	r3, [r7, #4]
 801c130:	1ad3      	subs	r3, r2, r3
 801c132:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801c134:	683b      	ldr	r3, [r7, #0]
 801c136:	2b00      	cmp	r3, #0
 801c138:	da06      	bge.n	801c148 <sys_timeouts_sleeptime+0x54>
 801c13a:	4b07      	ldr	r3, [pc, #28]	@ (801c158 <sys_timeouts_sleeptime+0x64>)
 801c13c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 801c140:	4906      	ldr	r1, [pc, #24]	@ (801c15c <sys_timeouts_sleeptime+0x68>)
 801c142:	4807      	ldr	r0, [pc, #28]	@ (801c160 <sys_timeouts_sleeptime+0x6c>)
 801c144:	f004 ffbe 	bl	80210c4 <iprintf>
    return ret;
 801c148:	683b      	ldr	r3, [r7, #0]
  }
}
 801c14a:	4618      	mov	r0, r3
 801c14c:	3708      	adds	r7, #8
 801c14e:	46bd      	mov	sp, r7
 801c150:	bd80      	pop	{r7, pc}
 801c152:	bf00      	nop
 801c154:	2002846c 	.word	0x2002846c
 801c158:	080259b0 	.word	0x080259b0
 801c15c:	08025a84 	.word	0x08025a84
 801c160:	08025a24 	.word	0x08025a24

0801c164 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801c164:	b580      	push	{r7, lr}
 801c166:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801c168:	f004 feac 	bl	8020ec4 <rand>
 801c16c:	4603      	mov	r3, r0
 801c16e:	b29b      	uxth	r3, r3
 801c170:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801c174:	b29b      	uxth	r3, r3
 801c176:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801c17a:	b29a      	uxth	r2, r3
 801c17c:	4b01      	ldr	r3, [pc, #4]	@ (801c184 <udp_init+0x20>)
 801c17e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801c180:	bf00      	nop
 801c182:	bd80      	pop	{r7, pc}
 801c184:	20000070 	.word	0x20000070

0801c188 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801c188:	b480      	push	{r7}
 801c18a:	b083      	sub	sp, #12
 801c18c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801c18e:	2300      	movs	r3, #0
 801c190:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801c192:	4b17      	ldr	r3, [pc, #92]	@ (801c1f0 <udp_new_port+0x68>)
 801c194:	881b      	ldrh	r3, [r3, #0]
 801c196:	1c5a      	adds	r2, r3, #1
 801c198:	b291      	uxth	r1, r2
 801c19a:	4a15      	ldr	r2, [pc, #84]	@ (801c1f0 <udp_new_port+0x68>)
 801c19c:	8011      	strh	r1, [r2, #0]
 801c19e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c1a2:	4293      	cmp	r3, r2
 801c1a4:	d103      	bne.n	801c1ae <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801c1a6:	4b12      	ldr	r3, [pc, #72]	@ (801c1f0 <udp_new_port+0x68>)
 801c1a8:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801c1ac:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c1ae:	4b11      	ldr	r3, [pc, #68]	@ (801c1f4 <udp_new_port+0x6c>)
 801c1b0:	681b      	ldr	r3, [r3, #0]
 801c1b2:	603b      	str	r3, [r7, #0]
 801c1b4:	e011      	b.n	801c1da <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801c1b6:	683b      	ldr	r3, [r7, #0]
 801c1b8:	8a5a      	ldrh	r2, [r3, #18]
 801c1ba:	4b0d      	ldr	r3, [pc, #52]	@ (801c1f0 <udp_new_port+0x68>)
 801c1bc:	881b      	ldrh	r3, [r3, #0]
 801c1be:	429a      	cmp	r2, r3
 801c1c0:	d108      	bne.n	801c1d4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801c1c2:	88fb      	ldrh	r3, [r7, #6]
 801c1c4:	3301      	adds	r3, #1
 801c1c6:	80fb      	strh	r3, [r7, #6]
 801c1c8:	88fb      	ldrh	r3, [r7, #6]
 801c1ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801c1ce:	d3e0      	bcc.n	801c192 <udp_new_port+0xa>
        return 0;
 801c1d0:	2300      	movs	r3, #0
 801c1d2:	e007      	b.n	801c1e4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c1d4:	683b      	ldr	r3, [r7, #0]
 801c1d6:	68db      	ldr	r3, [r3, #12]
 801c1d8:	603b      	str	r3, [r7, #0]
 801c1da:	683b      	ldr	r3, [r7, #0]
 801c1dc:	2b00      	cmp	r3, #0
 801c1de:	d1ea      	bne.n	801c1b6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801c1e0:	4b03      	ldr	r3, [pc, #12]	@ (801c1f0 <udp_new_port+0x68>)
 801c1e2:	881b      	ldrh	r3, [r3, #0]
}
 801c1e4:	4618      	mov	r0, r3
 801c1e6:	370c      	adds	r7, #12
 801c1e8:	46bd      	mov	sp, r7
 801c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1ee:	4770      	bx	lr
 801c1f0:	20000070 	.word	0x20000070
 801c1f4:	20028478 	.word	0x20028478

0801c1f8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801c1f8:	b580      	push	{r7, lr}
 801c1fa:	b084      	sub	sp, #16
 801c1fc:	af00      	add	r7, sp, #0
 801c1fe:	60f8      	str	r0, [r7, #12]
 801c200:	60b9      	str	r1, [r7, #8]
 801c202:	4613      	mov	r3, r2
 801c204:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801c206:	68fb      	ldr	r3, [r7, #12]
 801c208:	2b00      	cmp	r3, #0
 801c20a:	d105      	bne.n	801c218 <udp_input_local_match+0x20>
 801c20c:	4b27      	ldr	r3, [pc, #156]	@ (801c2ac <udp_input_local_match+0xb4>)
 801c20e:	2287      	movs	r2, #135	@ 0x87
 801c210:	4927      	ldr	r1, [pc, #156]	@ (801c2b0 <udp_input_local_match+0xb8>)
 801c212:	4828      	ldr	r0, [pc, #160]	@ (801c2b4 <udp_input_local_match+0xbc>)
 801c214:	f004 ff56 	bl	80210c4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801c218:	68bb      	ldr	r3, [r7, #8]
 801c21a:	2b00      	cmp	r3, #0
 801c21c:	d105      	bne.n	801c22a <udp_input_local_match+0x32>
 801c21e:	4b23      	ldr	r3, [pc, #140]	@ (801c2ac <udp_input_local_match+0xb4>)
 801c220:	2288      	movs	r2, #136	@ 0x88
 801c222:	4925      	ldr	r1, [pc, #148]	@ (801c2b8 <udp_input_local_match+0xc0>)
 801c224:	4823      	ldr	r0, [pc, #140]	@ (801c2b4 <udp_input_local_match+0xbc>)
 801c226:	f004 ff4d 	bl	80210c4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c22a:	68fb      	ldr	r3, [r7, #12]
 801c22c:	7a1b      	ldrb	r3, [r3, #8]
 801c22e:	2b00      	cmp	r3, #0
 801c230:	d00b      	beq.n	801c24a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801c232:	68fb      	ldr	r3, [r7, #12]
 801c234:	7a1a      	ldrb	r2, [r3, #8]
 801c236:	4b21      	ldr	r3, [pc, #132]	@ (801c2bc <udp_input_local_match+0xc4>)
 801c238:	685b      	ldr	r3, [r3, #4]
 801c23a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801c23e:	3301      	adds	r3, #1
 801c240:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c242:	429a      	cmp	r2, r3
 801c244:	d001      	beq.n	801c24a <udp_input_local_match+0x52>
    return 0;
 801c246:	2300      	movs	r3, #0
 801c248:	e02b      	b.n	801c2a2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801c24a:	79fb      	ldrb	r3, [r7, #7]
 801c24c:	2b00      	cmp	r3, #0
 801c24e:	d018      	beq.n	801c282 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c250:	68fb      	ldr	r3, [r7, #12]
 801c252:	2b00      	cmp	r3, #0
 801c254:	d013      	beq.n	801c27e <udp_input_local_match+0x86>
 801c256:	68fb      	ldr	r3, [r7, #12]
 801c258:	681b      	ldr	r3, [r3, #0]
 801c25a:	2b00      	cmp	r3, #0
 801c25c:	d00f      	beq.n	801c27e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801c25e:	4b17      	ldr	r3, [pc, #92]	@ (801c2bc <udp_input_local_match+0xc4>)
 801c260:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c262:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c266:	d00a      	beq.n	801c27e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801c268:	68fb      	ldr	r3, [r7, #12]
 801c26a:	681a      	ldr	r2, [r3, #0]
 801c26c:	4b13      	ldr	r3, [pc, #76]	@ (801c2bc <udp_input_local_match+0xc4>)
 801c26e:	695b      	ldr	r3, [r3, #20]
 801c270:	405a      	eors	r2, r3
 801c272:	68bb      	ldr	r3, [r7, #8]
 801c274:	3308      	adds	r3, #8
 801c276:	681b      	ldr	r3, [r3, #0]
 801c278:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801c27a:	2b00      	cmp	r3, #0
 801c27c:	d110      	bne.n	801c2a0 <udp_input_local_match+0xa8>
          return 1;
 801c27e:	2301      	movs	r3, #1
 801c280:	e00f      	b.n	801c2a2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801c282:	68fb      	ldr	r3, [r7, #12]
 801c284:	2b00      	cmp	r3, #0
 801c286:	d009      	beq.n	801c29c <udp_input_local_match+0xa4>
 801c288:	68fb      	ldr	r3, [r7, #12]
 801c28a:	681b      	ldr	r3, [r3, #0]
 801c28c:	2b00      	cmp	r3, #0
 801c28e:	d005      	beq.n	801c29c <udp_input_local_match+0xa4>
 801c290:	68fb      	ldr	r3, [r7, #12]
 801c292:	681a      	ldr	r2, [r3, #0]
 801c294:	4b09      	ldr	r3, [pc, #36]	@ (801c2bc <udp_input_local_match+0xc4>)
 801c296:	695b      	ldr	r3, [r3, #20]
 801c298:	429a      	cmp	r2, r3
 801c29a:	d101      	bne.n	801c2a0 <udp_input_local_match+0xa8>
        return 1;
 801c29c:	2301      	movs	r3, #1
 801c29e:	e000      	b.n	801c2a2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801c2a0:	2300      	movs	r3, #0
}
 801c2a2:	4618      	mov	r0, r3
 801c2a4:	3710      	adds	r7, #16
 801c2a6:	46bd      	mov	sp, r7
 801c2a8:	bd80      	pop	{r7, pc}
 801c2aa:	bf00      	nop
 801c2ac:	08025a98 	.word	0x08025a98
 801c2b0:	08025ac8 	.word	0x08025ac8
 801c2b4:	08025aec 	.word	0x08025aec
 801c2b8:	08025b14 	.word	0x08025b14
 801c2bc:	2001f878 	.word	0x2001f878

0801c2c0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801c2c0:	b590      	push	{r4, r7, lr}
 801c2c2:	b08d      	sub	sp, #52	@ 0x34
 801c2c4:	af02      	add	r7, sp, #8
 801c2c6:	6078      	str	r0, [r7, #4]
 801c2c8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801c2ca:	2300      	movs	r3, #0
 801c2cc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801c2ce:	687b      	ldr	r3, [r7, #4]
 801c2d0:	2b00      	cmp	r3, #0
 801c2d2:	d105      	bne.n	801c2e0 <udp_input+0x20>
 801c2d4:	4b9c      	ldr	r3, [pc, #624]	@ (801c548 <udp_input+0x288>)
 801c2d6:	22cf      	movs	r2, #207	@ 0xcf
 801c2d8:	499c      	ldr	r1, [pc, #624]	@ (801c54c <udp_input+0x28c>)
 801c2da:	489d      	ldr	r0, [pc, #628]	@ (801c550 <udp_input+0x290>)
 801c2dc:	f004 fef2 	bl	80210c4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801c2e0:	683b      	ldr	r3, [r7, #0]
 801c2e2:	2b00      	cmp	r3, #0
 801c2e4:	d105      	bne.n	801c2f2 <udp_input+0x32>
 801c2e6:	4b98      	ldr	r3, [pc, #608]	@ (801c548 <udp_input+0x288>)
 801c2e8:	22d0      	movs	r2, #208	@ 0xd0
 801c2ea:	499a      	ldr	r1, [pc, #616]	@ (801c554 <udp_input+0x294>)
 801c2ec:	4898      	ldr	r0, [pc, #608]	@ (801c550 <udp_input+0x290>)
 801c2ee:	f004 fee9 	bl	80210c4 <iprintf>

  PERF_START;

  UDP_STATS_INC(udp.recv);
 801c2f2:	4b99      	ldr	r3, [pc, #612]	@ (801c558 <udp_input+0x298>)
 801c2f4:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
 801c2f8:	3301      	adds	r3, #1
 801c2fa:	b29a      	uxth	r2, r3
 801c2fc:	4b96      	ldr	r3, [pc, #600]	@ (801c558 <udp_input+0x298>)
 801c2fe:	f8a3 207a 	strh.w	r2, [r3, #122]	@ 0x7a

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801c302:	687b      	ldr	r3, [r7, #4]
 801c304:	895b      	ldrh	r3, [r3, #10]
 801c306:	2b07      	cmp	r3, #7
 801c308:	d819      	bhi.n	801c33e <udp_input+0x7e>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
 801c30a:	687b      	ldr	r3, [r7, #4]
 801c30c:	891b      	ldrh	r3, [r3, #8]
 801c30e:	4619      	mov	r1, r3
 801c310:	4892      	ldr	r0, [pc, #584]	@ (801c55c <udp_input+0x29c>)
 801c312:	f004 fed7 	bl	80210c4 <iprintf>
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
 801c316:	4b90      	ldr	r3, [pc, #576]	@ (801c558 <udp_input+0x298>)
 801c318:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 801c31c:	3301      	adds	r3, #1
 801c31e:	b29a      	uxth	r2, r3
 801c320:	4b8d      	ldr	r3, [pc, #564]	@ (801c558 <udp_input+0x298>)
 801c322:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
    UDP_STATS_INC(udp.drop);
 801c326:	4b8c      	ldr	r3, [pc, #560]	@ (801c558 <udp_input+0x298>)
 801c328:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 801c32c:	3301      	adds	r3, #1
 801c32e:	b29a      	uxth	r2, r3
 801c330:	4b89      	ldr	r3, [pc, #548]	@ (801c558 <udp_input+0x298>)
 801c332:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801c336:	6878      	ldr	r0, [r7, #4]
 801c338:	f7f9 f824 	bl	8015384 <pbuf_free>
    goto end;
 801c33c:	e1ae      	b.n	801c69c <udp_input+0x3dc>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801c33e:	687b      	ldr	r3, [r7, #4]
 801c340:	685b      	ldr	r3, [r3, #4]
 801c342:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801c344:	4b86      	ldr	r3, [pc, #536]	@ (801c560 <udp_input+0x2a0>)
 801c346:	695b      	ldr	r3, [r3, #20]
 801c348:	4a85      	ldr	r2, [pc, #532]	@ (801c560 <udp_input+0x2a0>)
 801c34a:	6812      	ldr	r2, [r2, #0]
 801c34c:	4611      	mov	r1, r2
 801c34e:	4618      	mov	r0, r3
 801c350:	f002 fb36 	bl	801e9c0 <ip4_addr_isbroadcast_u32>
 801c354:	4603      	mov	r3, r0
 801c356:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));
 801c358:	687b      	ldr	r3, [r7, #4]
 801c35a:	891b      	ldrh	r3, [r3, #8]
 801c35c:	4619      	mov	r1, r3
 801c35e:	4881      	ldr	r0, [pc, #516]	@ (801c564 <udp_input+0x2a4>)
 801c360:	f004 feb0 	bl	80210c4 <iprintf>

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801c364:	697b      	ldr	r3, [r7, #20]
 801c366:	881b      	ldrh	r3, [r3, #0]
 801c368:	b29b      	uxth	r3, r3
 801c36a:	4618      	mov	r0, r3
 801c36c:	f7f7 f890 	bl	8013490 <lwip_htons>
 801c370:	4603      	mov	r3, r0
 801c372:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801c374:	697b      	ldr	r3, [r7, #20]
 801c376:	885b      	ldrh	r3, [r3, #2]
 801c378:	b29b      	uxth	r3, r3
 801c37a:	4618      	mov	r0, r3
 801c37c:	f7f7 f888 	bl	8013490 <lwip_htons>
 801c380:	4603      	mov	r3, r0
 801c382:	81fb      	strh	r3, [r7, #14]

  udp_debug_print(udphdr);
 801c384:	6978      	ldr	r0, [r7, #20]
 801c386:	f000 fdb7 	bl	801cef8 <udp_debug_print>

  /* print the UDP source and destination */
  LWIP_DEBUGF(UDP_DEBUG, ("udp ("));
 801c38a:	4877      	ldr	r0, [pc, #476]	@ (801c568 <udp_input+0x2a8>)
 801c38c:	f004 fe9a 	bl	80210c4 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
 801c390:	4b73      	ldr	r3, [pc, #460]	@ (801c560 <udp_input+0x2a0>)
 801c392:	695b      	ldr	r3, [r3, #20]
 801c394:	b2db      	uxtb	r3, r3
 801c396:	4619      	mov	r1, r3
 801c398:	4b71      	ldr	r3, [pc, #452]	@ (801c560 <udp_input+0x2a0>)
 801c39a:	695b      	ldr	r3, [r3, #20]
 801c39c:	0a1b      	lsrs	r3, r3, #8
 801c39e:	b2db      	uxtb	r3, r3
 801c3a0:	461a      	mov	r2, r3
 801c3a2:	4b6f      	ldr	r3, [pc, #444]	@ (801c560 <udp_input+0x2a0>)
 801c3a4:	695b      	ldr	r3, [r3, #20]
 801c3a6:	0c1b      	lsrs	r3, r3, #16
 801c3a8:	b2db      	uxtb	r3, r3
 801c3aa:	4618      	mov	r0, r3
 801c3ac:	4b6c      	ldr	r3, [pc, #432]	@ (801c560 <udp_input+0x2a0>)
 801c3ae:	695b      	ldr	r3, [r3, #20]
 801c3b0:	0e1b      	lsrs	r3, r3, #24
 801c3b2:	b2db      	uxtb	r3, r3
 801c3b4:	9300      	str	r3, [sp, #0]
 801c3b6:	4603      	mov	r3, r0
 801c3b8:	486c      	ldr	r0, [pc, #432]	@ (801c56c <udp_input+0x2ac>)
 801c3ba:	f004 fe83 	bl	80210c4 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
 801c3be:	697b      	ldr	r3, [r7, #20]
 801c3c0:	885b      	ldrh	r3, [r3, #2]
 801c3c2:	b29b      	uxth	r3, r3
 801c3c4:	4618      	mov	r0, r3
 801c3c6:	f7f7 f863 	bl	8013490 <lwip_htons>
 801c3ca:	4603      	mov	r3, r0
 801c3cc:	4619      	mov	r1, r3
 801c3ce:	4868      	ldr	r0, [pc, #416]	@ (801c570 <udp_input+0x2b0>)
 801c3d0:	f004 fe78 	bl	80210c4 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
 801c3d4:	4b62      	ldr	r3, [pc, #392]	@ (801c560 <udp_input+0x2a0>)
 801c3d6:	691b      	ldr	r3, [r3, #16]
 801c3d8:	b2db      	uxtb	r3, r3
 801c3da:	4619      	mov	r1, r3
 801c3dc:	4b60      	ldr	r3, [pc, #384]	@ (801c560 <udp_input+0x2a0>)
 801c3de:	691b      	ldr	r3, [r3, #16]
 801c3e0:	0a1b      	lsrs	r3, r3, #8
 801c3e2:	b2db      	uxtb	r3, r3
 801c3e4:	461a      	mov	r2, r3
 801c3e6:	4b5e      	ldr	r3, [pc, #376]	@ (801c560 <udp_input+0x2a0>)
 801c3e8:	691b      	ldr	r3, [r3, #16]
 801c3ea:	0c1b      	lsrs	r3, r3, #16
 801c3ec:	b2db      	uxtb	r3, r3
 801c3ee:	4618      	mov	r0, r3
 801c3f0:	4b5b      	ldr	r3, [pc, #364]	@ (801c560 <udp_input+0x2a0>)
 801c3f2:	691b      	ldr	r3, [r3, #16]
 801c3f4:	0e1b      	lsrs	r3, r3, #24
 801c3f6:	b2db      	uxtb	r3, r3
 801c3f8:	9300      	str	r3, [sp, #0]
 801c3fa:	4603      	mov	r3, r0
 801c3fc:	485b      	ldr	r0, [pc, #364]	@ (801c56c <udp_input+0x2ac>)
 801c3fe:	f004 fe61 	bl	80210c4 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));
 801c402:	697b      	ldr	r3, [r7, #20]
 801c404:	881b      	ldrh	r3, [r3, #0]
 801c406:	b29b      	uxth	r3, r3
 801c408:	4618      	mov	r0, r3
 801c40a:	f7f7 f841 	bl	8013490 <lwip_htons>
 801c40e:	4603      	mov	r3, r0
 801c410:	4619      	mov	r1, r3
 801c412:	4858      	ldr	r0, [pc, #352]	@ (801c574 <udp_input+0x2b4>)
 801c414:	f004 fe56 	bl	80210c4 <iprintf>

  pcb = NULL;
 801c418:	2300      	movs	r3, #0
 801c41a:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 801c41c:	2300      	movs	r3, #0
 801c41e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801c420:	2300      	movs	r3, #0
 801c422:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c424:	4b54      	ldr	r3, [pc, #336]	@ (801c578 <udp_input+0x2b8>)
 801c426:	681b      	ldr	r3, [r3, #0]
 801c428:	627b      	str	r3, [r7, #36]	@ 0x24
 801c42a:	e0b7      	b.n	801c59c <udp_input+0x2dc>
    /* print the PCB local and remote address */
    LWIP_DEBUGF(UDP_DEBUG, ("pcb ("));
 801c42c:	4853      	ldr	r0, [pc, #332]	@ (801c57c <udp_input+0x2bc>)
 801c42e:	f004 fe49 	bl	80210c4 <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->local_ip);
 801c432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c434:	681b      	ldr	r3, [r3, #0]
 801c436:	b2db      	uxtb	r3, r3
 801c438:	4619      	mov	r1, r3
 801c43a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c43c:	681b      	ldr	r3, [r3, #0]
 801c43e:	0a1b      	lsrs	r3, r3, #8
 801c440:	b2db      	uxtb	r3, r3
 801c442:	461a      	mov	r2, r3
 801c444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c446:	681b      	ldr	r3, [r3, #0]
 801c448:	0c1b      	lsrs	r3, r3, #16
 801c44a:	b2db      	uxtb	r3, r3
 801c44c:	4618      	mov	r0, r3
 801c44e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c450:	681b      	ldr	r3, [r3, #0]
 801c452:	0e1b      	lsrs	r3, r3, #24
 801c454:	b2db      	uxtb	r3, r3
 801c456:	9300      	str	r3, [sp, #0]
 801c458:	4603      	mov	r3, r0
 801c45a:	4844      	ldr	r0, [pc, #272]	@ (801c56c <udp_input+0x2ac>)
 801c45c:	f004 fe32 	bl	80210c4 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
 801c460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c462:	8a5b      	ldrh	r3, [r3, #18]
 801c464:	4619      	mov	r1, r3
 801c466:	4842      	ldr	r0, [pc, #264]	@ (801c570 <udp_input+0x2b0>)
 801c468:	f004 fe2c 	bl	80210c4 <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
 801c46c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c46e:	685b      	ldr	r3, [r3, #4]
 801c470:	b2db      	uxtb	r3, r3
 801c472:	4619      	mov	r1, r3
 801c474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c476:	685b      	ldr	r3, [r3, #4]
 801c478:	0a1b      	lsrs	r3, r3, #8
 801c47a:	b2db      	uxtb	r3, r3
 801c47c:	461a      	mov	r2, r3
 801c47e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c480:	685b      	ldr	r3, [r3, #4]
 801c482:	0c1b      	lsrs	r3, r3, #16
 801c484:	b2db      	uxtb	r3, r3
 801c486:	4618      	mov	r0, r3
 801c488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c48a:	685b      	ldr	r3, [r3, #4]
 801c48c:	0e1b      	lsrs	r3, r3, #24
 801c48e:	b2db      	uxtb	r3, r3
 801c490:	9300      	str	r3, [sp, #0]
 801c492:	4603      	mov	r3, r0
 801c494:	4835      	ldr	r0, [pc, #212]	@ (801c56c <udp_input+0x2ac>)
 801c496:	f004 fe15 	bl	80210c4 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));
 801c49a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c49c:	8a9b      	ldrh	r3, [r3, #20]
 801c49e:	4619      	mov	r1, r3
 801c4a0:	4834      	ldr	r0, [pc, #208]	@ (801c574 <udp_input+0x2b4>)
 801c4a2:	f004 fe0f 	bl	80210c4 <iprintf>

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801c4a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c4a8:	8a5b      	ldrh	r3, [r3, #18]
 801c4aa:	89fa      	ldrh	r2, [r7, #14]
 801c4ac:	429a      	cmp	r2, r3
 801c4ae:	d170      	bne.n	801c592 <udp_input+0x2d2>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801c4b0:	7cfb      	ldrb	r3, [r7, #19]
 801c4b2:	461a      	mov	r2, r3
 801c4b4:	6839      	ldr	r1, [r7, #0]
 801c4b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c4b8:	f7ff fe9e 	bl	801c1f8 <udp_input_local_match>
 801c4bc:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801c4be:	2b00      	cmp	r3, #0
 801c4c0:	d067      	beq.n	801c592 <udp_input+0x2d2>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801c4c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c4c4:	7c1b      	ldrb	r3, [r3, #16]
 801c4c6:	f003 0304 	and.w	r3, r3, #4
 801c4ca:	2b00      	cmp	r3, #0
 801c4cc:	d11d      	bne.n	801c50a <udp_input+0x24a>
        if (uncon_pcb == NULL) {
 801c4ce:	69fb      	ldr	r3, [r7, #28]
 801c4d0:	2b00      	cmp	r3, #0
 801c4d2:	d102      	bne.n	801c4da <udp_input+0x21a>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801c4d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c4d6:	61fb      	str	r3, [r7, #28]
 801c4d8:	e017      	b.n	801c50a <udp_input+0x24a>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801c4da:	7cfb      	ldrb	r3, [r7, #19]
 801c4dc:	2b00      	cmp	r3, #0
 801c4de:	d014      	beq.n	801c50a <udp_input+0x24a>
 801c4e0:	4b1f      	ldr	r3, [pc, #124]	@ (801c560 <udp_input+0x2a0>)
 801c4e2:	695b      	ldr	r3, [r3, #20]
 801c4e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c4e8:	d10f      	bne.n	801c50a <udp_input+0x24a>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801c4ea:	69fb      	ldr	r3, [r7, #28]
 801c4ec:	681a      	ldr	r2, [r3, #0]
 801c4ee:	683b      	ldr	r3, [r7, #0]
 801c4f0:	3304      	adds	r3, #4
 801c4f2:	681b      	ldr	r3, [r3, #0]
 801c4f4:	429a      	cmp	r2, r3
 801c4f6:	d008      	beq.n	801c50a <udp_input+0x24a>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801c4f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c4fa:	681a      	ldr	r2, [r3, #0]
 801c4fc:	683b      	ldr	r3, [r7, #0]
 801c4fe:	3304      	adds	r3, #4
 801c500:	681b      	ldr	r3, [r3, #0]
 801c502:	429a      	cmp	r2, r3
 801c504:	d101      	bne.n	801c50a <udp_input+0x24a>
              /* better match */
              uncon_pcb = pcb;
 801c506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c508:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801c50a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c50c:	8a9b      	ldrh	r3, [r3, #20]
 801c50e:	8a3a      	ldrh	r2, [r7, #16]
 801c510:	429a      	cmp	r2, r3
 801c512:	d13e      	bne.n	801c592 <udp_input+0x2d2>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801c514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c516:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801c518:	2b00      	cmp	r3, #0
 801c51a:	d005      	beq.n	801c528 <udp_input+0x268>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801c51c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c51e:	685a      	ldr	r2, [r3, #4]
 801c520:	4b0f      	ldr	r3, [pc, #60]	@ (801c560 <udp_input+0x2a0>)
 801c522:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801c524:	429a      	cmp	r2, r3
 801c526:	d134      	bne.n	801c592 <udp_input+0x2d2>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801c528:	6a3b      	ldr	r3, [r7, #32]
 801c52a:	2b00      	cmp	r3, #0
 801c52c:	d028      	beq.n	801c580 <udp_input+0x2c0>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801c52e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c530:	68da      	ldr	r2, [r3, #12]
 801c532:	6a3b      	ldr	r3, [r7, #32]
 801c534:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801c536:	4b10      	ldr	r3, [pc, #64]	@ (801c578 <udp_input+0x2b8>)
 801c538:	681a      	ldr	r2, [r3, #0]
 801c53a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c53c:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801c53e:	4a0e      	ldr	r2, [pc, #56]	@ (801c578 <udp_input+0x2b8>)
 801c540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c542:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801c544:	e02e      	b.n	801c5a4 <udp_input+0x2e4>
 801c546:	bf00      	nop
 801c548:	08025a98 	.word	0x08025a98
 801c54c:	08025b3c 	.word	0x08025b3c
 801c550:	08025aec 	.word	0x08025aec
 801c554:	08025b54 	.word	0x08025b54
 801c558:	20028318 	.word	0x20028318
 801c55c:	08025b70 	.word	0x08025b70
 801c560:	2001f878 	.word	0x2001f878
 801c564:	08025ba8 	.word	0x08025ba8
 801c568:	08025bd4 	.word	0x08025bd4
 801c56c:	08025bdc 	.word	0x08025bdc
 801c570:	08025bec 	.word	0x08025bec
 801c574:	08025bfc 	.word	0x08025bfc
 801c578:	20028478 	.word	0x20028478
 801c57c:	08025c04 	.word	0x08025c04
          UDP_STATS_INC(udp.cachehit);
 801c580:	4b48      	ldr	r3, [pc, #288]	@ (801c6a4 <udp_input+0x3e4>)
 801c582:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 801c586:	3301      	adds	r3, #1
 801c588:	b29a      	uxth	r2, r3
 801c58a:	4b46      	ldr	r3, [pc, #280]	@ (801c6a4 <udp_input+0x3e4>)
 801c58c:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
        break;
 801c590:	e008      	b.n	801c5a4 <udp_input+0x2e4>
      }
    }

    prev = pcb;
 801c592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c594:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c598:	68db      	ldr	r3, [r3, #12]
 801c59a:	627b      	str	r3, [r7, #36]	@ 0x24
 801c59c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c59e:	2b00      	cmp	r3, #0
 801c5a0:	f47f af44 	bne.w	801c42c <udp_input+0x16c>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801c5a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c5a6:	2b00      	cmp	r3, #0
 801c5a8:	d101      	bne.n	801c5ae <udp_input+0x2ee>
    pcb = uncon_pcb;
 801c5aa:	69fb      	ldr	r3, [r7, #28]
 801c5ac:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801c5ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c5b0:	2b00      	cmp	r3, #0
 801c5b2:	d002      	beq.n	801c5ba <udp_input+0x2fa>
    for_us = 1;
 801c5b4:	2301      	movs	r3, #1
 801c5b6:	76fb      	strb	r3, [r7, #27]
 801c5b8:	e00a      	b.n	801c5d0 <udp_input+0x310>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801c5ba:	683b      	ldr	r3, [r7, #0]
 801c5bc:	3304      	adds	r3, #4
 801c5be:	681a      	ldr	r2, [r3, #0]
 801c5c0:	4b39      	ldr	r3, [pc, #228]	@ (801c6a8 <udp_input+0x3e8>)
 801c5c2:	695b      	ldr	r3, [r3, #20]
 801c5c4:	429a      	cmp	r2, r3
 801c5c6:	bf0c      	ite	eq
 801c5c8:	2301      	moveq	r3, #1
 801c5ca:	2300      	movne	r3, #0
 801c5cc:	b2db      	uxtb	r3, r3
 801c5ce:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801c5d0:	7efb      	ldrb	r3, [r7, #27]
 801c5d2:	2b00      	cmp	r3, #0
 801c5d4:	d05f      	beq.n	801c696 <udp_input+0x3d6>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: calculating checksum\n"));
 801c5d6:	4835      	ldr	r0, [pc, #212]	@ (801c6ac <udp_input+0x3ec>)
 801c5d8:	f004 fde4 	bl	80211a4 <puts>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801c5dc:	2108      	movs	r1, #8
 801c5de:	6878      	ldr	r0, [r7, #4]
 801c5e0:	f7f8 fe42 	bl	8015268 <pbuf_remove_header>
 801c5e4:	4603      	mov	r3, r0
 801c5e6:	2b00      	cmp	r3, #0
 801c5e8:	d012      	beq.n	801c610 <udp_input+0x350>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801c5ea:	4b31      	ldr	r3, [pc, #196]	@ (801c6b0 <udp_input+0x3f0>)
 801c5ec:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801c5f0:	4930      	ldr	r1, [pc, #192]	@ (801c6b4 <udp_input+0x3f4>)
 801c5f2:	4831      	ldr	r0, [pc, #196]	@ (801c6b8 <udp_input+0x3f8>)
 801c5f4:	f004 fd66 	bl	80210c4 <iprintf>
      UDP_STATS_INC(udp.drop);
 801c5f8:	4b2a      	ldr	r3, [pc, #168]	@ (801c6a4 <udp_input+0x3e4>)
 801c5fa:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 801c5fe:	3301      	adds	r3, #1
 801c600:	b29a      	uxth	r2, r3
 801c602:	4b28      	ldr	r3, [pc, #160]	@ (801c6a4 <udp_input+0x3e4>)
 801c604:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801c608:	6878      	ldr	r0, [r7, #4]
 801c60a:	f7f8 febb 	bl	8015384 <pbuf_free>
      goto end;
 801c60e:	e045      	b.n	801c69c <udp_input+0x3dc>
    }

    if (pcb != NULL) {
 801c610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c612:	2b00      	cmp	r3, #0
 801c614:	d012      	beq.n	801c63c <udp_input+0x37c>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801c616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c618:	699b      	ldr	r3, [r3, #24]
 801c61a:	2b00      	cmp	r3, #0
 801c61c:	d00a      	beq.n	801c634 <udp_input+0x374>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801c61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c620:	699c      	ldr	r4, [r3, #24]
 801c622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c624:	69d8      	ldr	r0, [r3, #28]
 801c626:	8a3b      	ldrh	r3, [r7, #16]
 801c628:	9300      	str	r3, [sp, #0]
 801c62a:	4b24      	ldr	r3, [pc, #144]	@ (801c6bc <udp_input+0x3fc>)
 801c62c:	687a      	ldr	r2, [r7, #4]
 801c62e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801c630:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801c632:	e034      	b.n	801c69e <udp_input+0x3de>
        pbuf_free(p);
 801c634:	6878      	ldr	r0, [r7, #4]
 801c636:	f7f8 fea5 	bl	8015384 <pbuf_free>
        goto end;
 801c63a:	e02f      	b.n	801c69c <udp_input+0x3dc>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));
 801c63c:	4820      	ldr	r0, [pc, #128]	@ (801c6c0 <udp_input+0x400>)
 801c63e:	f004 fdb1 	bl	80211a4 <puts>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801c642:	7cfb      	ldrb	r3, [r7, #19]
 801c644:	2b00      	cmp	r3, #0
 801c646:	d112      	bne.n	801c66e <udp_input+0x3ae>
 801c648:	4b17      	ldr	r3, [pc, #92]	@ (801c6a8 <udp_input+0x3e8>)
 801c64a:	695b      	ldr	r3, [r3, #20]
 801c64c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801c650:	2be0      	cmp	r3, #224	@ 0xe0
 801c652:	d00c      	beq.n	801c66e <udp_input+0x3ae>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801c654:	4b14      	ldr	r3, [pc, #80]	@ (801c6a8 <udp_input+0x3e8>)
 801c656:	899b      	ldrh	r3, [r3, #12]
 801c658:	3308      	adds	r3, #8
 801c65a:	b29b      	uxth	r3, r3
 801c65c:	b21b      	sxth	r3, r3
 801c65e:	4619      	mov	r1, r3
 801c660:	6878      	ldr	r0, [r7, #4]
 801c662:	f7f8 fe7c 	bl	801535e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801c666:	2103      	movs	r1, #3
 801c668:	6878      	ldr	r0, [r7, #4]
 801c66a:	f001 fdcd 	bl	801e208 <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
 801c66e:	4b0d      	ldr	r3, [pc, #52]	@ (801c6a4 <udp_input+0x3e4>)
 801c670:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 801c674:	3301      	adds	r3, #1
 801c676:	b29a      	uxth	r2, r3
 801c678:	4b0a      	ldr	r3, [pc, #40]	@ (801c6a4 <udp_input+0x3e4>)
 801c67a:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
      UDP_STATS_INC(udp.drop);
 801c67e:	4b09      	ldr	r3, [pc, #36]	@ (801c6a4 <udp_input+0x3e4>)
 801c680:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 801c684:	3301      	adds	r3, #1
 801c686:	b29a      	uxth	r2, r3
 801c688:	4b06      	ldr	r3, [pc, #24]	@ (801c6a4 <udp_input+0x3e4>)
 801c68a:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
      pbuf_free(p);
 801c68e:	6878      	ldr	r0, [r7, #4]
 801c690:	f7f8 fe78 	bl	8015384 <pbuf_free>
  return;
 801c694:	e003      	b.n	801c69e <udp_input+0x3de>
    pbuf_free(p);
 801c696:	6878      	ldr	r0, [r7, #4]
 801c698:	f7f8 fe74 	bl	8015384 <pbuf_free>
  return;
 801c69c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801c69e:	372c      	adds	r7, #44	@ 0x2c
 801c6a0:	46bd      	mov	sp, r7
 801c6a2:	bd90      	pop	{r4, r7, pc}
 801c6a4:	20028318 	.word	0x20028318
 801c6a8:	2001f878 	.word	0x2001f878
 801c6ac:	08025c0c 	.word	0x08025c0c
 801c6b0:	08025a98 	.word	0x08025a98
 801c6b4:	08025c2c 	.word	0x08025c2c
 801c6b8:	08025aec 	.word	0x08025aec
 801c6bc:	2001f888 	.word	0x2001f888
 801c6c0:	08025c48 	.word	0x08025c48

0801c6c4 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801c6c4:	b580      	push	{r7, lr}
 801c6c6:	b082      	sub	sp, #8
 801c6c8:	af00      	add	r7, sp, #0
 801c6ca:	6078      	str	r0, [r7, #4]
 801c6cc:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801c6ce:	687b      	ldr	r3, [r7, #4]
 801c6d0:	2b00      	cmp	r3, #0
 801c6d2:	d109      	bne.n	801c6e8 <udp_send+0x24>
 801c6d4:	4b11      	ldr	r3, [pc, #68]	@ (801c71c <udp_send+0x58>)
 801c6d6:	f240 12d5 	movw	r2, #469	@ 0x1d5
 801c6da:	4911      	ldr	r1, [pc, #68]	@ (801c720 <udp_send+0x5c>)
 801c6dc:	4811      	ldr	r0, [pc, #68]	@ (801c724 <udp_send+0x60>)
 801c6de:	f004 fcf1 	bl	80210c4 <iprintf>
 801c6e2:	f06f 030f 	mvn.w	r3, #15
 801c6e6:	e015      	b.n	801c714 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801c6e8:	683b      	ldr	r3, [r7, #0]
 801c6ea:	2b00      	cmp	r3, #0
 801c6ec:	d109      	bne.n	801c702 <udp_send+0x3e>
 801c6ee:	4b0b      	ldr	r3, [pc, #44]	@ (801c71c <udp_send+0x58>)
 801c6f0:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 801c6f4:	490c      	ldr	r1, [pc, #48]	@ (801c728 <udp_send+0x64>)
 801c6f6:	480b      	ldr	r0, [pc, #44]	@ (801c724 <udp_send+0x60>)
 801c6f8:	f004 fce4 	bl	80210c4 <iprintf>
 801c6fc:	f06f 030f 	mvn.w	r3, #15
 801c700:	e008      	b.n	801c714 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801c702:	687b      	ldr	r3, [r7, #4]
 801c704:	1d1a      	adds	r2, r3, #4
 801c706:	687b      	ldr	r3, [r7, #4]
 801c708:	8a9b      	ldrh	r3, [r3, #20]
 801c70a:	6839      	ldr	r1, [r7, #0]
 801c70c:	6878      	ldr	r0, [r7, #4]
 801c70e:	f000 f80d 	bl	801c72c <udp_sendto>
 801c712:	4603      	mov	r3, r0
}
 801c714:	4618      	mov	r0, r3
 801c716:	3708      	adds	r7, #8
 801c718:	46bd      	mov	sp, r7
 801c71a:	bd80      	pop	{r7, pc}
 801c71c:	08025a98 	.word	0x08025a98
 801c720:	08025c60 	.word	0x08025c60
 801c724:	08025aec 	.word	0x08025aec
 801c728:	08025c78 	.word	0x08025c78

0801c72c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801c72c:	b580      	push	{r7, lr}
 801c72e:	b088      	sub	sp, #32
 801c730:	af02      	add	r7, sp, #8
 801c732:	60f8      	str	r0, [r7, #12]
 801c734:	60b9      	str	r1, [r7, #8]
 801c736:	607a      	str	r2, [r7, #4]
 801c738:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801c73a:	68fb      	ldr	r3, [r7, #12]
 801c73c:	2b00      	cmp	r3, #0
 801c73e:	d109      	bne.n	801c754 <udp_sendto+0x28>
 801c740:	4b3f      	ldr	r3, [pc, #252]	@ (801c840 <udp_sendto+0x114>)
 801c742:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801c746:	493f      	ldr	r1, [pc, #252]	@ (801c844 <udp_sendto+0x118>)
 801c748:	483f      	ldr	r0, [pc, #252]	@ (801c848 <udp_sendto+0x11c>)
 801c74a:	f004 fcbb 	bl	80210c4 <iprintf>
 801c74e:	f06f 030f 	mvn.w	r3, #15
 801c752:	e070      	b.n	801c836 <udp_sendto+0x10a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801c754:	68bb      	ldr	r3, [r7, #8]
 801c756:	2b00      	cmp	r3, #0
 801c758:	d109      	bne.n	801c76e <udp_sendto+0x42>
 801c75a:	4b39      	ldr	r3, [pc, #228]	@ (801c840 <udp_sendto+0x114>)
 801c75c:	f240 2219 	movw	r2, #537	@ 0x219
 801c760:	493a      	ldr	r1, [pc, #232]	@ (801c84c <udp_sendto+0x120>)
 801c762:	4839      	ldr	r0, [pc, #228]	@ (801c848 <udp_sendto+0x11c>)
 801c764:	f004 fcae 	bl	80210c4 <iprintf>
 801c768:	f06f 030f 	mvn.w	r3, #15
 801c76c:	e063      	b.n	801c836 <udp_sendto+0x10a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801c76e:	687b      	ldr	r3, [r7, #4]
 801c770:	2b00      	cmp	r3, #0
 801c772:	d109      	bne.n	801c788 <udp_sendto+0x5c>
 801c774:	4b32      	ldr	r3, [pc, #200]	@ (801c840 <udp_sendto+0x114>)
 801c776:	f240 221a 	movw	r2, #538	@ 0x21a
 801c77a:	4935      	ldr	r1, [pc, #212]	@ (801c850 <udp_sendto+0x124>)
 801c77c:	4832      	ldr	r0, [pc, #200]	@ (801c848 <udp_sendto+0x11c>)
 801c77e:	f004 fca1 	bl	80210c4 <iprintf>
 801c782:	f06f 030f 	mvn.w	r3, #15
 801c786:	e056      	b.n	801c836 <udp_sendto+0x10a>

  if (!IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));
 801c788:	4832      	ldr	r0, [pc, #200]	@ (801c854 <udp_sendto+0x128>)
 801c78a:	f004 fd0b 	bl	80211a4 <puts>

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801c78e:	68fb      	ldr	r3, [r7, #12]
 801c790:	7a1b      	ldrb	r3, [r3, #8]
 801c792:	2b00      	cmp	r3, #0
 801c794:	d006      	beq.n	801c7a4 <udp_sendto+0x78>
    netif = netif_get_by_index(pcb->netif_idx);
 801c796:	68fb      	ldr	r3, [r7, #12]
 801c798:	7a1b      	ldrb	r3, [r3, #8]
 801c79a:	4618      	mov	r0, r3
 801c79c:	f7f8 fa12 	bl	8014bc4 <netif_get_by_index>
 801c7a0:	6178      	str	r0, [r7, #20]
 801c7a2:	e003      	b.n	801c7ac <udp_sendto+0x80>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801c7a4:	6878      	ldr	r0, [r7, #4]
 801c7a6:	f001 fe03 	bl	801e3b0 <ip4_route>
 801c7aa:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801c7ac:	697b      	ldr	r3, [r7, #20]
 801c7ae:	2b00      	cmp	r3, #0
 801c7b0:	d137      	bne.n	801c822 <udp_sendto+0xf6>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
 801c7b2:	4829      	ldr	r0, [pc, #164]	@ (801c858 <udp_sendto+0x12c>)
 801c7b4:	f004 fc86 	bl	80210c4 <iprintf>
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
 801c7b8:	687b      	ldr	r3, [r7, #4]
 801c7ba:	2b00      	cmp	r3, #0
 801c7bc:	d003      	beq.n	801c7c6 <udp_sendto+0x9a>
 801c7be:	687b      	ldr	r3, [r7, #4]
 801c7c0:	781b      	ldrb	r3, [r3, #0]
 801c7c2:	4619      	mov	r1, r3
 801c7c4:	e000      	b.n	801c7c8 <udp_sendto+0x9c>
 801c7c6:	2100      	movs	r1, #0
 801c7c8:	687b      	ldr	r3, [r7, #4]
 801c7ca:	2b00      	cmp	r3, #0
 801c7cc:	d004      	beq.n	801c7d8 <udp_sendto+0xac>
 801c7ce:	687b      	ldr	r3, [r7, #4]
 801c7d0:	3301      	adds	r3, #1
 801c7d2:	781b      	ldrb	r3, [r3, #0]
 801c7d4:	461a      	mov	r2, r3
 801c7d6:	e000      	b.n	801c7da <udp_sendto+0xae>
 801c7d8:	2200      	movs	r2, #0
 801c7da:	687b      	ldr	r3, [r7, #4]
 801c7dc:	2b00      	cmp	r3, #0
 801c7de:	d004      	beq.n	801c7ea <udp_sendto+0xbe>
 801c7e0:	687b      	ldr	r3, [r7, #4]
 801c7e2:	3302      	adds	r3, #2
 801c7e4:	781b      	ldrb	r3, [r3, #0]
 801c7e6:	4618      	mov	r0, r3
 801c7e8:	e000      	b.n	801c7ec <udp_sendto+0xc0>
 801c7ea:	2000      	movs	r0, #0
 801c7ec:	687b      	ldr	r3, [r7, #4]
 801c7ee:	2b00      	cmp	r3, #0
 801c7f0:	d003      	beq.n	801c7fa <udp_sendto+0xce>
 801c7f2:	687b      	ldr	r3, [r7, #4]
 801c7f4:	3303      	adds	r3, #3
 801c7f6:	781b      	ldrb	r3, [r3, #0]
 801c7f8:	e000      	b.n	801c7fc <udp_sendto+0xd0>
 801c7fa:	2300      	movs	r3, #0
 801c7fc:	9300      	str	r3, [sp, #0]
 801c7fe:	4603      	mov	r3, r0
 801c800:	4816      	ldr	r0, [pc, #88]	@ (801c85c <udp_sendto+0x130>)
 801c802:	f004 fc5f 	bl	80210c4 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
 801c806:	200a      	movs	r0, #10
 801c808:	f004 fc6e 	bl	80210e8 <putchar>
    UDP_STATS_INC(udp.rterr);
 801c80c:	4b14      	ldr	r3, [pc, #80]	@ (801c860 <udp_sendto+0x134>)
 801c80e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 801c812:	3301      	adds	r3, #1
 801c814:	b29a      	uxth	r2, r3
 801c816:	4b12      	ldr	r3, [pc, #72]	@ (801c860 <udp_sendto+0x134>)
 801c818:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
    return ERR_RTE;
 801c81c:	f06f 0303 	mvn.w	r3, #3
 801c820:	e009      	b.n	801c836 <udp_sendto+0x10a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801c822:	887a      	ldrh	r2, [r7, #2]
 801c824:	697b      	ldr	r3, [r7, #20]
 801c826:	9300      	str	r3, [sp, #0]
 801c828:	4613      	mov	r3, r2
 801c82a:	687a      	ldr	r2, [r7, #4]
 801c82c:	68b9      	ldr	r1, [r7, #8]
 801c82e:	68f8      	ldr	r0, [r7, #12]
 801c830:	f000 f818 	bl	801c864 <udp_sendto_if>
 801c834:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801c836:	4618      	mov	r0, r3
 801c838:	3718      	adds	r7, #24
 801c83a:	46bd      	mov	sp, r7
 801c83c:	bd80      	pop	{r7, pc}
 801c83e:	bf00      	nop
 801c840:	08025a98 	.word	0x08025a98
 801c844:	08025c90 	.word	0x08025c90
 801c848:	08025aec 	.word	0x08025aec
 801c84c:	08025ca8 	.word	0x08025ca8
 801c850:	08025cc4 	.word	0x08025cc4
 801c854:	08025ce0 	.word	0x08025ce0
 801c858:	08025cec 	.word	0x08025cec
 801c85c:	08025bdc 	.word	0x08025bdc
 801c860:	20028318 	.word	0x20028318

0801c864 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801c864:	b580      	push	{r7, lr}
 801c866:	b088      	sub	sp, #32
 801c868:	af02      	add	r7, sp, #8
 801c86a:	60f8      	str	r0, [r7, #12]
 801c86c:	60b9      	str	r1, [r7, #8]
 801c86e:	607a      	str	r2, [r7, #4]
 801c870:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801c872:	68fb      	ldr	r3, [r7, #12]
 801c874:	2b00      	cmp	r3, #0
 801c876:	d109      	bne.n	801c88c <udp_sendto_if+0x28>
 801c878:	4b2e      	ldr	r3, [pc, #184]	@ (801c934 <udp_sendto_if+0xd0>)
 801c87a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801c87e:	492e      	ldr	r1, [pc, #184]	@ (801c938 <udp_sendto_if+0xd4>)
 801c880:	482e      	ldr	r0, [pc, #184]	@ (801c93c <udp_sendto_if+0xd8>)
 801c882:	f004 fc1f 	bl	80210c4 <iprintf>
 801c886:	f06f 030f 	mvn.w	r3, #15
 801c88a:	e04f      	b.n	801c92c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801c88c:	68bb      	ldr	r3, [r7, #8]
 801c88e:	2b00      	cmp	r3, #0
 801c890:	d109      	bne.n	801c8a6 <udp_sendto_if+0x42>
 801c892:	4b28      	ldr	r3, [pc, #160]	@ (801c934 <udp_sendto_if+0xd0>)
 801c894:	f240 2281 	movw	r2, #641	@ 0x281
 801c898:	4929      	ldr	r1, [pc, #164]	@ (801c940 <udp_sendto_if+0xdc>)
 801c89a:	4828      	ldr	r0, [pc, #160]	@ (801c93c <udp_sendto_if+0xd8>)
 801c89c:	f004 fc12 	bl	80210c4 <iprintf>
 801c8a0:	f06f 030f 	mvn.w	r3, #15
 801c8a4:	e042      	b.n	801c92c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801c8a6:	687b      	ldr	r3, [r7, #4]
 801c8a8:	2b00      	cmp	r3, #0
 801c8aa:	d109      	bne.n	801c8c0 <udp_sendto_if+0x5c>
 801c8ac:	4b21      	ldr	r3, [pc, #132]	@ (801c934 <udp_sendto_if+0xd0>)
 801c8ae:	f240 2282 	movw	r2, #642	@ 0x282
 801c8b2:	4924      	ldr	r1, [pc, #144]	@ (801c944 <udp_sendto_if+0xe0>)
 801c8b4:	4821      	ldr	r0, [pc, #132]	@ (801c93c <udp_sendto_if+0xd8>)
 801c8b6:	f004 fc05 	bl	80210c4 <iprintf>
 801c8ba:	f06f 030f 	mvn.w	r3, #15
 801c8be:	e035      	b.n	801c92c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801c8c0:	6a3b      	ldr	r3, [r7, #32]
 801c8c2:	2b00      	cmp	r3, #0
 801c8c4:	d109      	bne.n	801c8da <udp_sendto_if+0x76>
 801c8c6:	4b1b      	ldr	r3, [pc, #108]	@ (801c934 <udp_sendto_if+0xd0>)
 801c8c8:	f240 2283 	movw	r2, #643	@ 0x283
 801c8cc:	491e      	ldr	r1, [pc, #120]	@ (801c948 <udp_sendto_if+0xe4>)
 801c8ce:	481b      	ldr	r0, [pc, #108]	@ (801c93c <udp_sendto_if+0xd8>)
 801c8d0:	f004 fbf8 	bl	80210c4 <iprintf>
 801c8d4:	f06f 030f 	mvn.w	r3, #15
 801c8d8:	e028      	b.n	801c92c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c8da:	68fb      	ldr	r3, [r7, #12]
 801c8dc:	2b00      	cmp	r3, #0
 801c8de:	d009      	beq.n	801c8f4 <udp_sendto_if+0x90>
 801c8e0:	68fb      	ldr	r3, [r7, #12]
 801c8e2:	681b      	ldr	r3, [r3, #0]
 801c8e4:	2b00      	cmp	r3, #0
 801c8e6:	d005      	beq.n	801c8f4 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801c8e8:	68fb      	ldr	r3, [r7, #12]
 801c8ea:	681b      	ldr	r3, [r3, #0]
 801c8ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c8f0:	2be0      	cmp	r3, #224	@ 0xe0
 801c8f2:	d103      	bne.n	801c8fc <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801c8f4:	6a3b      	ldr	r3, [r7, #32]
 801c8f6:	3304      	adds	r3, #4
 801c8f8:	617b      	str	r3, [r7, #20]
 801c8fa:	e00b      	b.n	801c914 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801c8fc:	68fb      	ldr	r3, [r7, #12]
 801c8fe:	681a      	ldr	r2, [r3, #0]
 801c900:	6a3b      	ldr	r3, [r7, #32]
 801c902:	3304      	adds	r3, #4
 801c904:	681b      	ldr	r3, [r3, #0]
 801c906:	429a      	cmp	r2, r3
 801c908:	d002      	beq.n	801c910 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801c90a:	f06f 0303 	mvn.w	r3, #3
 801c90e:	e00d      	b.n	801c92c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801c910:	68fb      	ldr	r3, [r7, #12]
 801c912:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801c914:	887a      	ldrh	r2, [r7, #2]
 801c916:	697b      	ldr	r3, [r7, #20]
 801c918:	9301      	str	r3, [sp, #4]
 801c91a:	6a3b      	ldr	r3, [r7, #32]
 801c91c:	9300      	str	r3, [sp, #0]
 801c91e:	4613      	mov	r3, r2
 801c920:	687a      	ldr	r2, [r7, #4]
 801c922:	68b9      	ldr	r1, [r7, #8]
 801c924:	68f8      	ldr	r0, [r7, #12]
 801c926:	f000 f811 	bl	801c94c <udp_sendto_if_src>
 801c92a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801c92c:	4618      	mov	r0, r3
 801c92e:	3718      	adds	r7, #24
 801c930:	46bd      	mov	sp, r7
 801c932:	bd80      	pop	{r7, pc}
 801c934:	08025a98 	.word	0x08025a98
 801c938:	08025d04 	.word	0x08025d04
 801c93c:	08025aec 	.word	0x08025aec
 801c940:	08025d20 	.word	0x08025d20
 801c944:	08025d3c 	.word	0x08025d3c
 801c948:	08025d5c 	.word	0x08025d5c

0801c94c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801c94c:	b580      	push	{r7, lr}
 801c94e:	b08c      	sub	sp, #48	@ 0x30
 801c950:	af04      	add	r7, sp, #16
 801c952:	60f8      	str	r0, [r7, #12]
 801c954:	60b9      	str	r1, [r7, #8]
 801c956:	607a      	str	r2, [r7, #4]
 801c958:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801c95a:	68fb      	ldr	r3, [r7, #12]
 801c95c:	2b00      	cmp	r3, #0
 801c95e:	d109      	bne.n	801c974 <udp_sendto_if_src+0x28>
 801c960:	4b7e      	ldr	r3, [pc, #504]	@ (801cb5c <udp_sendto_if_src+0x210>)
 801c962:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801c966:	497e      	ldr	r1, [pc, #504]	@ (801cb60 <udp_sendto_if_src+0x214>)
 801c968:	487e      	ldr	r0, [pc, #504]	@ (801cb64 <udp_sendto_if_src+0x218>)
 801c96a:	f004 fbab 	bl	80210c4 <iprintf>
 801c96e:	f06f 030f 	mvn.w	r3, #15
 801c972:	e0ee      	b.n	801cb52 <udp_sendto_if_src+0x206>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801c974:	68bb      	ldr	r3, [r7, #8]
 801c976:	2b00      	cmp	r3, #0
 801c978:	d109      	bne.n	801c98e <udp_sendto_if_src+0x42>
 801c97a:	4b78      	ldr	r3, [pc, #480]	@ (801cb5c <udp_sendto_if_src+0x210>)
 801c97c:	f240 22d2 	movw	r2, #722	@ 0x2d2
 801c980:	4979      	ldr	r1, [pc, #484]	@ (801cb68 <udp_sendto_if_src+0x21c>)
 801c982:	4878      	ldr	r0, [pc, #480]	@ (801cb64 <udp_sendto_if_src+0x218>)
 801c984:	f004 fb9e 	bl	80210c4 <iprintf>
 801c988:	f06f 030f 	mvn.w	r3, #15
 801c98c:	e0e1      	b.n	801cb52 <udp_sendto_if_src+0x206>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801c98e:	687b      	ldr	r3, [r7, #4]
 801c990:	2b00      	cmp	r3, #0
 801c992:	d109      	bne.n	801c9a8 <udp_sendto_if_src+0x5c>
 801c994:	4b71      	ldr	r3, [pc, #452]	@ (801cb5c <udp_sendto_if_src+0x210>)
 801c996:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801c99a:	4974      	ldr	r1, [pc, #464]	@ (801cb6c <udp_sendto_if_src+0x220>)
 801c99c:	4871      	ldr	r0, [pc, #452]	@ (801cb64 <udp_sendto_if_src+0x218>)
 801c99e:	f004 fb91 	bl	80210c4 <iprintf>
 801c9a2:	f06f 030f 	mvn.w	r3, #15
 801c9a6:	e0d4      	b.n	801cb52 <udp_sendto_if_src+0x206>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801c9a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c9aa:	2b00      	cmp	r3, #0
 801c9ac:	d109      	bne.n	801c9c2 <udp_sendto_if_src+0x76>
 801c9ae:	4b6b      	ldr	r3, [pc, #428]	@ (801cb5c <udp_sendto_if_src+0x210>)
 801c9b0:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 801c9b4:	496e      	ldr	r1, [pc, #440]	@ (801cb70 <udp_sendto_if_src+0x224>)
 801c9b6:	486b      	ldr	r0, [pc, #428]	@ (801cb64 <udp_sendto_if_src+0x218>)
 801c9b8:	f004 fb84 	bl	80210c4 <iprintf>
 801c9bc:	f06f 030f 	mvn.w	r3, #15
 801c9c0:	e0c7      	b.n	801cb52 <udp_sendto_if_src+0x206>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801c9c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c9c4:	2b00      	cmp	r3, #0
 801c9c6:	d109      	bne.n	801c9dc <udp_sendto_if_src+0x90>
 801c9c8:	4b64      	ldr	r3, [pc, #400]	@ (801cb5c <udp_sendto_if_src+0x210>)
 801c9ca:	f240 22d5 	movw	r2, #725	@ 0x2d5
 801c9ce:	4969      	ldr	r1, [pc, #420]	@ (801cb74 <udp_sendto_if_src+0x228>)
 801c9d0:	4864      	ldr	r0, [pc, #400]	@ (801cb64 <udp_sendto_if_src+0x218>)
 801c9d2:	f004 fb77 	bl	80210c4 <iprintf>
 801c9d6:	f06f 030f 	mvn.w	r3, #15
 801c9da:	e0ba      	b.n	801cb52 <udp_sendto_if_src+0x206>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801c9dc:	68fb      	ldr	r3, [r7, #12]
 801c9de:	8a5b      	ldrh	r3, [r3, #18]
 801c9e0:	2b00      	cmp	r3, #0
 801c9e2:	d115      	bne.n	801ca10 <udp_sendto_if_src+0xc4>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
 801c9e4:	4864      	ldr	r0, [pc, #400]	@ (801cb78 <udp_sendto_if_src+0x22c>)
 801c9e6:	f004 fbdd 	bl	80211a4 <puts>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801c9ea:	68f9      	ldr	r1, [r7, #12]
 801c9ec:	68fb      	ldr	r3, [r7, #12]
 801c9ee:	8a5b      	ldrh	r3, [r3, #18]
 801c9f0:	461a      	mov	r2, r3
 801c9f2:	68f8      	ldr	r0, [r7, #12]
 801c9f4:	f000 f8d6 	bl	801cba4 <udp_bind>
 801c9f8:	4603      	mov	r3, r0
 801c9fa:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801c9fc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801ca00:	2b00      	cmp	r3, #0
 801ca02:	d005      	beq.n	801ca10 <udp_sendto_if_src+0xc4>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
 801ca04:	485d      	ldr	r0, [pc, #372]	@ (801cb7c <udp_sendto_if_src+0x230>)
 801ca06:	f004 fbcd 	bl	80211a4 <puts>
      return err;
 801ca0a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801ca0e:	e0a0      	b.n	801cb52 <udp_sendto_if_src+0x206>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801ca10:	68bb      	ldr	r3, [r7, #8]
 801ca12:	891b      	ldrh	r3, [r3, #8]
 801ca14:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801ca18:	4293      	cmp	r3, r2
 801ca1a:	d902      	bls.n	801ca22 <udp_sendto_if_src+0xd6>
    return ERR_MEM;
 801ca1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ca20:	e097      	b.n	801cb52 <udp_sendto_if_src+0x206>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801ca22:	2108      	movs	r1, #8
 801ca24:	68b8      	ldr	r0, [r7, #8]
 801ca26:	f7f8 fc0f 	bl	8015248 <pbuf_add_header>
 801ca2a:	4603      	mov	r3, r0
 801ca2c:	2b00      	cmp	r3, #0
 801ca2e:	d01d      	beq.n	801ca6c <udp_sendto_if_src+0x120>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801ca30:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801ca34:	2108      	movs	r1, #8
 801ca36:	2022      	movs	r0, #34	@ 0x22
 801ca38:	f7f8 f972 	bl	8014d20 <pbuf_alloc>
 801ca3c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801ca3e:	69fb      	ldr	r3, [r7, #28]
 801ca40:	2b00      	cmp	r3, #0
 801ca42:	d105      	bne.n	801ca50 <udp_sendto_if_src+0x104>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
 801ca44:	484e      	ldr	r0, [pc, #312]	@ (801cb80 <udp_sendto_if_src+0x234>)
 801ca46:	f004 fbad 	bl	80211a4 <puts>
      return ERR_MEM;
 801ca4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ca4e:	e080      	b.n	801cb52 <udp_sendto_if_src+0x206>
    }
    if (p->tot_len != 0) {
 801ca50:	68bb      	ldr	r3, [r7, #8]
 801ca52:	891b      	ldrh	r3, [r3, #8]
 801ca54:	2b00      	cmp	r3, #0
 801ca56:	d003      	beq.n	801ca60 <udp_sendto_if_src+0x114>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801ca58:	68b9      	ldr	r1, [r7, #8]
 801ca5a:	69f8      	ldr	r0, [r7, #28]
 801ca5c:	f7f8 fdce 	bl	80155fc <pbuf_chain>
    }
    /* first pbuf q points to header pbuf */
    LWIP_DEBUGF(UDP_DEBUG,
 801ca60:	68ba      	ldr	r2, [r7, #8]
 801ca62:	69f9      	ldr	r1, [r7, #28]
 801ca64:	4847      	ldr	r0, [pc, #284]	@ (801cb84 <udp_sendto_if_src+0x238>)
 801ca66:	f004 fb2d 	bl	80210c4 <iprintf>
 801ca6a:	e005      	b.n	801ca78 <udp_sendto_if_src+0x12c>
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801ca6c:	68bb      	ldr	r3, [r7, #8]
 801ca6e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
 801ca70:	68b9      	ldr	r1, [r7, #8]
 801ca72:	4845      	ldr	r0, [pc, #276]	@ (801cb88 <udp_sendto_if_src+0x23c>)
 801ca74:	f004 fb26 	bl	80210c4 <iprintf>
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801ca78:	69fb      	ldr	r3, [r7, #28]
 801ca7a:	895b      	ldrh	r3, [r3, #10]
 801ca7c:	2b07      	cmp	r3, #7
 801ca7e:	d806      	bhi.n	801ca8e <udp_sendto_if_src+0x142>
 801ca80:	4b36      	ldr	r3, [pc, #216]	@ (801cb5c <udp_sendto_if_src+0x210>)
 801ca82:	f240 320d 	movw	r2, #781	@ 0x30d
 801ca86:	4941      	ldr	r1, [pc, #260]	@ (801cb8c <udp_sendto_if_src+0x240>)
 801ca88:	4836      	ldr	r0, [pc, #216]	@ (801cb64 <udp_sendto_if_src+0x218>)
 801ca8a:	f004 fb1b 	bl	80210c4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801ca8e:	69fb      	ldr	r3, [r7, #28]
 801ca90:	685b      	ldr	r3, [r3, #4]
 801ca92:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801ca94:	68fb      	ldr	r3, [r7, #12]
 801ca96:	8a5b      	ldrh	r3, [r3, #18]
 801ca98:	4618      	mov	r0, r3
 801ca9a:	f7f6 fcf9 	bl	8013490 <lwip_htons>
 801ca9e:	4603      	mov	r3, r0
 801caa0:	461a      	mov	r2, r3
 801caa2:	697b      	ldr	r3, [r7, #20]
 801caa4:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801caa6:	887b      	ldrh	r3, [r7, #2]
 801caa8:	4618      	mov	r0, r3
 801caaa:	f7f6 fcf1 	bl	8013490 <lwip_htons>
 801caae:	4603      	mov	r3, r0
 801cab0:	461a      	mov	r2, r3
 801cab2:	697b      	ldr	r3, [r7, #20]
 801cab4:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801cab6:	697b      	ldr	r3, [r7, #20]
 801cab8:	2200      	movs	r2, #0
 801caba:	719a      	strb	r2, [r3, #6]
 801cabc:	2200      	movs	r2, #0
 801cabe:	71da      	strb	r2, [r3, #7]
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
    q->flags |= PBUF_FLAG_MCASTLOOP;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: sending datagram of length %"U16_F"\n", q->tot_len));
 801cac0:	69fb      	ldr	r3, [r7, #28]
 801cac2:	891b      	ldrh	r3, [r3, #8]
 801cac4:	4619      	mov	r1, r3
 801cac6:	4832      	ldr	r0, [pc, #200]	@ (801cb90 <udp_sendto_if_src+0x244>)
 801cac8:	f004 fafc 	bl	80210c4 <iprintf>

    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
 801cacc:	69fb      	ldr	r3, [r7, #28]
 801cace:	891b      	ldrh	r3, [r3, #8]
 801cad0:	4619      	mov	r1, r3
 801cad2:	4830      	ldr	r0, [pc, #192]	@ (801cb94 <udp_sendto_if_src+0x248>)
 801cad4:	f004 faf6 	bl	80210c4 <iprintf>
    udphdr->len = lwip_htons(q->tot_len);
 801cad8:	69fb      	ldr	r3, [r7, #28]
 801cada:	891b      	ldrh	r3, [r3, #8]
 801cadc:	4618      	mov	r0, r3
 801cade:	f7f6 fcd7 	bl	8013490 <lwip_htons>
 801cae2:	4603      	mov	r3, r0
 801cae4:	461a      	mov	r2, r3
 801cae6:	697b      	ldr	r3, [r7, #20]
 801cae8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801caea:	2311      	movs	r3, #17
 801caec:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801caee:	68fb      	ldr	r3, [r7, #12]
 801caf0:	7adb      	ldrb	r3, [r3, #11]
 801caf2:	74bb      	strb	r3, [r7, #18]
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
 801caf4:	697b      	ldr	r3, [r7, #20]
 801caf6:	88db      	ldrh	r3, [r3, #6]
 801caf8:	b29b      	uxth	r3, r3
 801cafa:	4619      	mov	r1, r3
 801cafc:	4826      	ldr	r0, [pc, #152]	@ (801cb98 <udp_sendto_if_src+0x24c>)
 801cafe:	f004 fae1 	bl	80210c4 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
 801cb02:	7cfb      	ldrb	r3, [r7, #19]
 801cb04:	4619      	mov	r1, r3
 801cb06:	4825      	ldr	r0, [pc, #148]	@ (801cb9c <udp_sendto_if_src+0x250>)
 801cb08:	f004 fadc 	bl	80210c4 <iprintf>
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801cb0c:	68fb      	ldr	r3, [r7, #12]
 801cb0e:	7a9b      	ldrb	r3, [r3, #10]
 801cb10:	7cb9      	ldrb	r1, [r7, #18]
 801cb12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801cb14:	9202      	str	r2, [sp, #8]
 801cb16:	7cfa      	ldrb	r2, [r7, #19]
 801cb18:	9201      	str	r2, [sp, #4]
 801cb1a:	9300      	str	r3, [sp, #0]
 801cb1c:	460b      	mov	r3, r1
 801cb1e:	687a      	ldr	r2, [r7, #4]
 801cb20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801cb22:	69f8      	ldr	r0, [r7, #28]
 801cb24:	f001 fe84 	bl	801e830 <ip4_output_if_src>
 801cb28:	4603      	mov	r3, r0
 801cb2a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801cb2c:	69fa      	ldr	r2, [r7, #28]
 801cb2e:	68bb      	ldr	r3, [r7, #8]
 801cb30:	429a      	cmp	r2, r3
 801cb32:	d004      	beq.n	801cb3e <udp_sendto_if_src+0x1f2>
    /* free the header pbuf */
    pbuf_free(q);
 801cb34:	69f8      	ldr	r0, [r7, #28]
 801cb36:	f7f8 fc25 	bl	8015384 <pbuf_free>
    q = NULL;
 801cb3a:	2300      	movs	r3, #0
 801cb3c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
 801cb3e:	4b18      	ldr	r3, [pc, #96]	@ (801cba0 <udp_sendto_if_src+0x254>)
 801cb40:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 801cb44:	3301      	adds	r3, #1
 801cb46:	b29a      	uxth	r2, r3
 801cb48:	4b15      	ldr	r3, [pc, #84]	@ (801cba0 <udp_sendto_if_src+0x254>)
 801cb4a:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
  return err;
 801cb4e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801cb52:	4618      	mov	r0, r3
 801cb54:	3720      	adds	r7, #32
 801cb56:	46bd      	mov	sp, r7
 801cb58:	bd80      	pop	{r7, pc}
 801cb5a:	bf00      	nop
 801cb5c:	08025a98 	.word	0x08025a98
 801cb60:	08025d7c 	.word	0x08025d7c
 801cb64:	08025aec 	.word	0x08025aec
 801cb68:	08025d9c 	.word	0x08025d9c
 801cb6c:	08025dbc 	.word	0x08025dbc
 801cb70:	08025de0 	.word	0x08025de0
 801cb74:	08025e04 	.word	0x08025e04
 801cb78:	08025e28 	.word	0x08025e28
 801cb7c:	08025e58 	.word	0x08025e58
 801cb80:	08025e7c 	.word	0x08025e7c
 801cb84:	08025ea0 	.word	0x08025ea0
 801cb88:	08025ed8 	.word	0x08025ed8
 801cb8c:	08025f04 	.word	0x08025f04
 801cb90:	08025f34 	.word	0x08025f34
 801cb94:	08025f60 	.word	0x08025f60
 801cb98:	08025f84 	.word	0x08025f84
 801cb9c:	08025fa4 	.word	0x08025fa4
 801cba0:	20028318 	.word	0x20028318

0801cba4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801cba4:	b580      	push	{r7, lr}
 801cba6:	b088      	sub	sp, #32
 801cba8:	af02      	add	r7, sp, #8
 801cbaa:	60f8      	str	r0, [r7, #12]
 801cbac:	60b9      	str	r1, [r7, #8]
 801cbae:	4613      	mov	r3, r2
 801cbb0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801cbb2:	68bb      	ldr	r3, [r7, #8]
 801cbb4:	2b00      	cmp	r3, #0
 801cbb6:	d101      	bne.n	801cbbc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801cbb8:	4b65      	ldr	r3, [pc, #404]	@ (801cd50 <udp_bind+0x1ac>)
 801cbba:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801cbbc:	68fb      	ldr	r3, [r7, #12]
 801cbbe:	2b00      	cmp	r3, #0
 801cbc0:	d109      	bne.n	801cbd6 <udp_bind+0x32>
 801cbc2:	4b64      	ldr	r3, [pc, #400]	@ (801cd54 <udp_bind+0x1b0>)
 801cbc4:	f240 32b7 	movw	r2, #951	@ 0x3b7
 801cbc8:	4963      	ldr	r1, [pc, #396]	@ (801cd58 <udp_bind+0x1b4>)
 801cbca:	4864      	ldr	r0, [pc, #400]	@ (801cd5c <udp_bind+0x1b8>)
 801cbcc:	f004 fa7a 	bl	80210c4 <iprintf>
 801cbd0:	f06f 030f 	mvn.w	r3, #15
 801cbd4:	e0b7      	b.n	801cd46 <udp_bind+0x1a2>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
 801cbd6:	4862      	ldr	r0, [pc, #392]	@ (801cd60 <udp_bind+0x1bc>)
 801cbd8:	f004 fa74 	bl	80210c4 <iprintf>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
 801cbdc:	68bb      	ldr	r3, [r7, #8]
 801cbde:	2b00      	cmp	r3, #0
 801cbe0:	d003      	beq.n	801cbea <udp_bind+0x46>
 801cbe2:	68bb      	ldr	r3, [r7, #8]
 801cbe4:	781b      	ldrb	r3, [r3, #0]
 801cbe6:	4619      	mov	r1, r3
 801cbe8:	e000      	b.n	801cbec <udp_bind+0x48>
 801cbea:	2100      	movs	r1, #0
 801cbec:	68bb      	ldr	r3, [r7, #8]
 801cbee:	2b00      	cmp	r3, #0
 801cbf0:	d004      	beq.n	801cbfc <udp_bind+0x58>
 801cbf2:	68bb      	ldr	r3, [r7, #8]
 801cbf4:	3301      	adds	r3, #1
 801cbf6:	781b      	ldrb	r3, [r3, #0]
 801cbf8:	461a      	mov	r2, r3
 801cbfa:	e000      	b.n	801cbfe <udp_bind+0x5a>
 801cbfc:	2200      	movs	r2, #0
 801cbfe:	68bb      	ldr	r3, [r7, #8]
 801cc00:	2b00      	cmp	r3, #0
 801cc02:	d004      	beq.n	801cc0e <udp_bind+0x6a>
 801cc04:	68bb      	ldr	r3, [r7, #8]
 801cc06:	3302      	adds	r3, #2
 801cc08:	781b      	ldrb	r3, [r3, #0]
 801cc0a:	4618      	mov	r0, r3
 801cc0c:	e000      	b.n	801cc10 <udp_bind+0x6c>
 801cc0e:	2000      	movs	r0, #0
 801cc10:	68bb      	ldr	r3, [r7, #8]
 801cc12:	2b00      	cmp	r3, #0
 801cc14:	d003      	beq.n	801cc1e <udp_bind+0x7a>
 801cc16:	68bb      	ldr	r3, [r7, #8]
 801cc18:	3303      	adds	r3, #3
 801cc1a:	781b      	ldrb	r3, [r3, #0]
 801cc1c:	e000      	b.n	801cc20 <udp_bind+0x7c>
 801cc1e:	2300      	movs	r3, #0
 801cc20:	9300      	str	r3, [sp, #0]
 801cc22:	4603      	mov	r3, r0
 801cc24:	484f      	ldr	r0, [pc, #316]	@ (801cd64 <udp_bind+0x1c0>)
 801cc26:	f004 fa4d 	bl	80210c4 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));
 801cc2a:	88fb      	ldrh	r3, [r7, #6]
 801cc2c:	4619      	mov	r1, r3
 801cc2e:	484e      	ldr	r0, [pc, #312]	@ (801cd68 <udp_bind+0x1c4>)
 801cc30:	f004 fa48 	bl	80210c4 <iprintf>

  rebind = 0;
 801cc34:	2300      	movs	r3, #0
 801cc36:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801cc38:	4b4c      	ldr	r3, [pc, #304]	@ (801cd6c <udp_bind+0x1c8>)
 801cc3a:	681b      	ldr	r3, [r3, #0]
 801cc3c:	617b      	str	r3, [r7, #20]
 801cc3e:	e009      	b.n	801cc54 <udp_bind+0xb0>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801cc40:	68fa      	ldr	r2, [r7, #12]
 801cc42:	697b      	ldr	r3, [r7, #20]
 801cc44:	429a      	cmp	r2, r3
 801cc46:	d102      	bne.n	801cc4e <udp_bind+0xaa>
      rebind = 1;
 801cc48:	2301      	movs	r3, #1
 801cc4a:	74fb      	strb	r3, [r7, #19]
      break;
 801cc4c:	e005      	b.n	801cc5a <udp_bind+0xb6>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801cc4e:	697b      	ldr	r3, [r7, #20]
 801cc50:	68db      	ldr	r3, [r3, #12]
 801cc52:	617b      	str	r3, [r7, #20]
 801cc54:	697b      	ldr	r3, [r7, #20]
 801cc56:	2b00      	cmp	r3, #0
 801cc58:	d1f2      	bne.n	801cc40 <udp_bind+0x9c>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801cc5a:	88fb      	ldrh	r3, [r7, #6]
 801cc5c:	2b00      	cmp	r3, #0
 801cc5e:	d10c      	bne.n	801cc7a <udp_bind+0xd6>
    port = udp_new_port();
 801cc60:	f7ff fa92 	bl	801c188 <udp_new_port>
 801cc64:	4603      	mov	r3, r0
 801cc66:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801cc68:	88fb      	ldrh	r3, [r7, #6]
 801cc6a:	2b00      	cmp	r3, #0
 801cc6c:	d134      	bne.n	801ccd8 <udp_bind+0x134>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
 801cc6e:	4840      	ldr	r0, [pc, #256]	@ (801cd70 <udp_bind+0x1cc>)
 801cc70:	f004 fa98 	bl	80211a4 <puts>
      return ERR_USE;
 801cc74:	f06f 0307 	mvn.w	r3, #7
 801cc78:	e065      	b.n	801cd46 <udp_bind+0x1a2>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801cc7a:	4b3c      	ldr	r3, [pc, #240]	@ (801cd6c <udp_bind+0x1c8>)
 801cc7c:	681b      	ldr	r3, [r3, #0]
 801cc7e:	617b      	str	r3, [r7, #20]
 801cc80:	e027      	b.n	801ccd2 <udp_bind+0x12e>
      if (pcb != ipcb) {
 801cc82:	68fa      	ldr	r2, [r7, #12]
 801cc84:	697b      	ldr	r3, [r7, #20]
 801cc86:	429a      	cmp	r2, r3
 801cc88:	d020      	beq.n	801cccc <udp_bind+0x128>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801cc8a:	697b      	ldr	r3, [r7, #20]
 801cc8c:	8a5b      	ldrh	r3, [r3, #18]
 801cc8e:	88fa      	ldrh	r2, [r7, #6]
 801cc90:	429a      	cmp	r2, r3
 801cc92:	d11b      	bne.n	801cccc <udp_bind+0x128>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801cc94:	697b      	ldr	r3, [r7, #20]
 801cc96:	681a      	ldr	r2, [r3, #0]
 801cc98:	68bb      	ldr	r3, [r7, #8]
 801cc9a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801cc9c:	429a      	cmp	r2, r3
 801cc9e:	d00d      	beq.n	801ccbc <udp_bind+0x118>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801cca0:	68bb      	ldr	r3, [r7, #8]
 801cca2:	2b00      	cmp	r3, #0
 801cca4:	d00a      	beq.n	801ccbc <udp_bind+0x118>
 801cca6:	68bb      	ldr	r3, [r7, #8]
 801cca8:	681b      	ldr	r3, [r3, #0]
 801ccaa:	2b00      	cmp	r3, #0
 801ccac:	d006      	beq.n	801ccbc <udp_bind+0x118>
              ip_addr_isany(&ipcb->local_ip))) {
 801ccae:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ccb0:	2b00      	cmp	r3, #0
 801ccb2:	d003      	beq.n	801ccbc <udp_bind+0x118>
              ip_addr_isany(&ipcb->local_ip))) {
 801ccb4:	697b      	ldr	r3, [r7, #20]
 801ccb6:	681b      	ldr	r3, [r3, #0]
 801ccb8:	2b00      	cmp	r3, #0
 801ccba:	d107      	bne.n	801cccc <udp_bind+0x128>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
 801ccbc:	88fb      	ldrh	r3, [r7, #6]
 801ccbe:	4619      	mov	r1, r3
 801ccc0:	482c      	ldr	r0, [pc, #176]	@ (801cd74 <udp_bind+0x1d0>)
 801ccc2:	f004 f9ff 	bl	80210c4 <iprintf>
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801ccc6:	f06f 0307 	mvn.w	r3, #7
 801ccca:	e03c      	b.n	801cd46 <udp_bind+0x1a2>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801cccc:	697b      	ldr	r3, [r7, #20]
 801ccce:	68db      	ldr	r3, [r3, #12]
 801ccd0:	617b      	str	r3, [r7, #20]
 801ccd2:	697b      	ldr	r3, [r7, #20]
 801ccd4:	2b00      	cmp	r3, #0
 801ccd6:	d1d4      	bne.n	801cc82 <udp_bind+0xde>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801ccd8:	68bb      	ldr	r3, [r7, #8]
 801ccda:	2b00      	cmp	r3, #0
 801ccdc:	d002      	beq.n	801cce4 <udp_bind+0x140>
 801ccde:	68bb      	ldr	r3, [r7, #8]
 801cce0:	681b      	ldr	r3, [r3, #0]
 801cce2:	e000      	b.n	801cce6 <udp_bind+0x142>
 801cce4:	2300      	movs	r3, #0
 801cce6:	68fa      	ldr	r2, [r7, #12]
 801cce8:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801ccea:	68fb      	ldr	r3, [r7, #12]
 801ccec:	88fa      	ldrh	r2, [r7, #6]
 801ccee:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801ccf0:	7cfb      	ldrb	r3, [r7, #19]
 801ccf2:	2b00      	cmp	r3, #0
 801ccf4:	d106      	bne.n	801cd04 <udp_bind+0x160>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801ccf6:	4b1d      	ldr	r3, [pc, #116]	@ (801cd6c <udp_bind+0x1c8>)
 801ccf8:	681a      	ldr	r2, [r3, #0]
 801ccfa:	68fb      	ldr	r3, [r7, #12]
 801ccfc:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801ccfe:	4a1b      	ldr	r2, [pc, #108]	@ (801cd6c <udp_bind+0x1c8>)
 801cd00:	68fb      	ldr	r3, [r7, #12]
 801cd02:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
 801cd04:	481c      	ldr	r0, [pc, #112]	@ (801cd78 <udp_bind+0x1d4>)
 801cd06:	f004 f9dd 	bl	80210c4 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
 801cd0a:	68fb      	ldr	r3, [r7, #12]
 801cd0c:	681b      	ldr	r3, [r3, #0]
 801cd0e:	b2db      	uxtb	r3, r3
 801cd10:	4619      	mov	r1, r3
 801cd12:	68fb      	ldr	r3, [r7, #12]
 801cd14:	681b      	ldr	r3, [r3, #0]
 801cd16:	0a1b      	lsrs	r3, r3, #8
 801cd18:	b2db      	uxtb	r3, r3
 801cd1a:	461a      	mov	r2, r3
 801cd1c:	68fb      	ldr	r3, [r7, #12]
 801cd1e:	681b      	ldr	r3, [r3, #0]
 801cd20:	0c1b      	lsrs	r3, r3, #16
 801cd22:	b2db      	uxtb	r3, r3
 801cd24:	4618      	mov	r0, r3
 801cd26:	68fb      	ldr	r3, [r7, #12]
 801cd28:	681b      	ldr	r3, [r3, #0]
 801cd2a:	0e1b      	lsrs	r3, r3, #24
 801cd2c:	b2db      	uxtb	r3, r3
 801cd2e:	9300      	str	r3, [sp, #0]
 801cd30:	4603      	mov	r3, r0
 801cd32:	480c      	ldr	r0, [pc, #48]	@ (801cd64 <udp_bind+0x1c0>)
 801cd34:	f004 f9c6 	bl	80210c4 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
 801cd38:	68fb      	ldr	r3, [r7, #12]
 801cd3a:	8a5b      	ldrh	r3, [r3, #18]
 801cd3c:	4619      	mov	r1, r3
 801cd3e:	480f      	ldr	r0, [pc, #60]	@ (801cd7c <udp_bind+0x1d8>)
 801cd40:	f004 f9c0 	bl	80210c4 <iprintf>
  return ERR_OK;
 801cd44:	2300      	movs	r3, #0
}
 801cd46:	4618      	mov	r0, r3
 801cd48:	3718      	adds	r7, #24
 801cd4a:	46bd      	mov	sp, r7
 801cd4c:	bd80      	pop	{r7, pc}
 801cd4e:	bf00      	nop
 801cd50:	08027264 	.word	0x08027264
 801cd54:	08025a98 	.word	0x08025a98
 801cd58:	08025fcc 	.word	0x08025fcc
 801cd5c:	08025aec 	.word	0x08025aec
 801cd60:	08025fe4 	.word	0x08025fe4
 801cd64:	08025bdc 	.word	0x08025bdc
 801cd68:	08025ff8 	.word	0x08025ff8
 801cd6c:	20028478 	.word	0x20028478
 801cd70:	08026008 	.word	0x08026008
 801cd74:	08026028 	.word	0x08026028
 801cd78:	08026060 	.word	0x08026060
 801cd7c:	08026074 	.word	0x08026074

0801cd80 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801cd80:	b580      	push	{r7, lr}
 801cd82:	b084      	sub	sp, #16
 801cd84:	af00      	add	r7, sp, #0
 801cd86:	60f8      	str	r0, [r7, #12]
 801cd88:	60b9      	str	r1, [r7, #8]
 801cd8a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801cd8c:	68fb      	ldr	r3, [r7, #12]
 801cd8e:	2b00      	cmp	r3, #0
 801cd90:	d107      	bne.n	801cda2 <udp_recv+0x22>
 801cd92:	4b08      	ldr	r3, [pc, #32]	@ (801cdb4 <udp_recv+0x34>)
 801cd94:	f240 428a 	movw	r2, #1162	@ 0x48a
 801cd98:	4907      	ldr	r1, [pc, #28]	@ (801cdb8 <udp_recv+0x38>)
 801cd9a:	4808      	ldr	r0, [pc, #32]	@ (801cdbc <udp_recv+0x3c>)
 801cd9c:	f004 f992 	bl	80210c4 <iprintf>
 801cda0:	e005      	b.n	801cdae <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801cda2:	68fb      	ldr	r3, [r7, #12]
 801cda4:	68ba      	ldr	r2, [r7, #8]
 801cda6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801cda8:	68fb      	ldr	r3, [r7, #12]
 801cdaa:	687a      	ldr	r2, [r7, #4]
 801cdac:	61da      	str	r2, [r3, #28]
}
 801cdae:	3710      	adds	r7, #16
 801cdb0:	46bd      	mov	sp, r7
 801cdb2:	bd80      	pop	{r7, pc}
 801cdb4:	08025a98 	.word	0x08025a98
 801cdb8:	080260f4 	.word	0x080260f4
 801cdbc:	08025aec 	.word	0x08025aec

0801cdc0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801cdc0:	b580      	push	{r7, lr}
 801cdc2:	b084      	sub	sp, #16
 801cdc4:	af00      	add	r7, sp, #0
 801cdc6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801cdc8:	687b      	ldr	r3, [r7, #4]
 801cdca:	2b00      	cmp	r3, #0
 801cdcc:	d107      	bne.n	801cdde <udp_remove+0x1e>
 801cdce:	4b19      	ldr	r3, [pc, #100]	@ (801ce34 <udp_remove+0x74>)
 801cdd0:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 801cdd4:	4918      	ldr	r1, [pc, #96]	@ (801ce38 <udp_remove+0x78>)
 801cdd6:	4819      	ldr	r0, [pc, #100]	@ (801ce3c <udp_remove+0x7c>)
 801cdd8:	f004 f974 	bl	80210c4 <iprintf>
 801cddc:	e026      	b.n	801ce2c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801cdde:	4b18      	ldr	r3, [pc, #96]	@ (801ce40 <udp_remove+0x80>)
 801cde0:	681b      	ldr	r3, [r3, #0]
 801cde2:	687a      	ldr	r2, [r7, #4]
 801cde4:	429a      	cmp	r2, r3
 801cde6:	d105      	bne.n	801cdf4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801cde8:	4b15      	ldr	r3, [pc, #84]	@ (801ce40 <udp_remove+0x80>)
 801cdea:	681b      	ldr	r3, [r3, #0]
 801cdec:	68db      	ldr	r3, [r3, #12]
 801cdee:	4a14      	ldr	r2, [pc, #80]	@ (801ce40 <udp_remove+0x80>)
 801cdf0:	6013      	str	r3, [r2, #0]
 801cdf2:	e017      	b.n	801ce24 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801cdf4:	4b12      	ldr	r3, [pc, #72]	@ (801ce40 <udp_remove+0x80>)
 801cdf6:	681b      	ldr	r3, [r3, #0]
 801cdf8:	60fb      	str	r3, [r7, #12]
 801cdfa:	e010      	b.n	801ce1e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801cdfc:	68fb      	ldr	r3, [r7, #12]
 801cdfe:	68db      	ldr	r3, [r3, #12]
 801ce00:	2b00      	cmp	r3, #0
 801ce02:	d009      	beq.n	801ce18 <udp_remove+0x58>
 801ce04:	68fb      	ldr	r3, [r7, #12]
 801ce06:	68db      	ldr	r3, [r3, #12]
 801ce08:	687a      	ldr	r2, [r7, #4]
 801ce0a:	429a      	cmp	r2, r3
 801ce0c:	d104      	bne.n	801ce18 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801ce0e:	687b      	ldr	r3, [r7, #4]
 801ce10:	68da      	ldr	r2, [r3, #12]
 801ce12:	68fb      	ldr	r3, [r7, #12]
 801ce14:	60da      	str	r2, [r3, #12]
        break;
 801ce16:	e005      	b.n	801ce24 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801ce18:	68fb      	ldr	r3, [r7, #12]
 801ce1a:	68db      	ldr	r3, [r3, #12]
 801ce1c:	60fb      	str	r3, [r7, #12]
 801ce1e:	68fb      	ldr	r3, [r7, #12]
 801ce20:	2b00      	cmp	r3, #0
 801ce22:	d1eb      	bne.n	801cdfc <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801ce24:	6879      	ldr	r1, [r7, #4]
 801ce26:	2000      	movs	r0, #0
 801ce28:	f7f7 fabe 	bl	80143a8 <memp_free>
}
 801ce2c:	3710      	adds	r7, #16
 801ce2e:	46bd      	mov	sp, r7
 801ce30:	bd80      	pop	{r7, pc}
 801ce32:	bf00      	nop
 801ce34:	08025a98 	.word	0x08025a98
 801ce38:	0802610c 	.word	0x0802610c
 801ce3c:	08025aec 	.word	0x08025aec
 801ce40:	20028478 	.word	0x20028478

0801ce44 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801ce44:	b580      	push	{r7, lr}
 801ce46:	b082      	sub	sp, #8
 801ce48:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801ce4a:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 801ce4e:	490a      	ldr	r1, [pc, #40]	@ (801ce78 <udp_new+0x34>)
 801ce50:	2000      	movs	r0, #0
 801ce52:	f7f7 fa17 	bl	8014284 <memp_malloc_fn>
 801ce56:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801ce58:	687b      	ldr	r3, [r7, #4]
 801ce5a:	2b00      	cmp	r3, #0
 801ce5c:	d007      	beq.n	801ce6e <udp_new+0x2a>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801ce5e:	2220      	movs	r2, #32
 801ce60:	2100      	movs	r1, #0
 801ce62:	6878      	ldr	r0, [r7, #4]
 801ce64:	f004 fade 	bl	8021424 <memset>
    pcb->ttl = UDP_TTL;
 801ce68:	687b      	ldr	r3, [r7, #4]
 801ce6a:	22ff      	movs	r2, #255	@ 0xff
 801ce6c:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801ce6e:	687b      	ldr	r3, [r7, #4]
}
 801ce70:	4618      	mov	r0, r3
 801ce72:	3708      	adds	r7, #8
 801ce74:	46bd      	mov	sp, r7
 801ce76:	bd80      	pop	{r7, pc}
 801ce78:	08025a98 	.word	0x08025a98

0801ce7c <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801ce7c:	b580      	push	{r7, lr}
 801ce7e:	b084      	sub	sp, #16
 801ce80:	af00      	add	r7, sp, #0
 801ce82:	4603      	mov	r3, r0
 801ce84:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801ce86:	f7ff ffdd 	bl	801ce44 <udp_new>
 801ce8a:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801ce8c:	68fb      	ldr	r3, [r7, #12]
}
 801ce8e:	4618      	mov	r0, r3
 801ce90:	3710      	adds	r7, #16
 801ce92:	46bd      	mov	sp, r7
 801ce94:	bd80      	pop	{r7, pc}
	...

0801ce98 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801ce98:	b480      	push	{r7}
 801ce9a:	b085      	sub	sp, #20
 801ce9c:	af00      	add	r7, sp, #0
 801ce9e:	6078      	str	r0, [r7, #4]
 801cea0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801cea2:	687b      	ldr	r3, [r7, #4]
 801cea4:	2b00      	cmp	r3, #0
 801cea6:	d01e      	beq.n	801cee6 <udp_netif_ip_addr_changed+0x4e>
 801cea8:	687b      	ldr	r3, [r7, #4]
 801ceaa:	681b      	ldr	r3, [r3, #0]
 801ceac:	2b00      	cmp	r3, #0
 801ceae:	d01a      	beq.n	801cee6 <udp_netif_ip_addr_changed+0x4e>
 801ceb0:	683b      	ldr	r3, [r7, #0]
 801ceb2:	2b00      	cmp	r3, #0
 801ceb4:	d017      	beq.n	801cee6 <udp_netif_ip_addr_changed+0x4e>
 801ceb6:	683b      	ldr	r3, [r7, #0]
 801ceb8:	681b      	ldr	r3, [r3, #0]
 801ceba:	2b00      	cmp	r3, #0
 801cebc:	d013      	beq.n	801cee6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801cebe:	4b0d      	ldr	r3, [pc, #52]	@ (801cef4 <udp_netif_ip_addr_changed+0x5c>)
 801cec0:	681b      	ldr	r3, [r3, #0]
 801cec2:	60fb      	str	r3, [r7, #12]
 801cec4:	e00c      	b.n	801cee0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801cec6:	68fb      	ldr	r3, [r7, #12]
 801cec8:	681a      	ldr	r2, [r3, #0]
 801ceca:	687b      	ldr	r3, [r7, #4]
 801cecc:	681b      	ldr	r3, [r3, #0]
 801cece:	429a      	cmp	r2, r3
 801ced0:	d103      	bne.n	801ceda <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801ced2:	683b      	ldr	r3, [r7, #0]
 801ced4:	681a      	ldr	r2, [r3, #0]
 801ced6:	68fb      	ldr	r3, [r7, #12]
 801ced8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801ceda:	68fb      	ldr	r3, [r7, #12]
 801cedc:	68db      	ldr	r3, [r3, #12]
 801cede:	60fb      	str	r3, [r7, #12]
 801cee0:	68fb      	ldr	r3, [r7, #12]
 801cee2:	2b00      	cmp	r3, #0
 801cee4:	d1ef      	bne.n	801cec6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801cee6:	bf00      	nop
 801cee8:	3714      	adds	r7, #20
 801ceea:	46bd      	mov	sp, r7
 801ceec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cef0:	4770      	bx	lr
 801cef2:	bf00      	nop
 801cef4:	20028478 	.word	0x20028478

0801cef8 <udp_debug_print>:
 *
 * @param udphdr pointer to the udp header in memory.
 */
void
udp_debug_print(struct udp_hdr *udphdr)
{
 801cef8:	b590      	push	{r4, r7, lr}
 801cefa:	b083      	sub	sp, #12
 801cefc:	af00      	add	r7, sp, #0
 801cefe:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(UDP_DEBUG, ("UDP header:\n"));
 801cf00:	481b      	ldr	r0, [pc, #108]	@ (801cf70 <udp_debug_print+0x78>)
 801cf02:	f004 f94f 	bl	80211a4 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 801cf06:	481b      	ldr	r0, [pc, #108]	@ (801cf74 <udp_debug_print+0x7c>)
 801cf08:	f004 f94c 	bl	80211a4 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     %5"U16_F"     | (src port, dest port)\n",
 801cf0c:	687b      	ldr	r3, [r7, #4]
 801cf0e:	881b      	ldrh	r3, [r3, #0]
 801cf10:	b29b      	uxth	r3, r3
 801cf12:	4618      	mov	r0, r3
 801cf14:	f7f6 fabc 	bl	8013490 <lwip_htons>
 801cf18:	4603      	mov	r3, r0
 801cf1a:	461c      	mov	r4, r3
 801cf1c:	687b      	ldr	r3, [r7, #4]
 801cf1e:	885b      	ldrh	r3, [r3, #2]
 801cf20:	b29b      	uxth	r3, r3
 801cf22:	4618      	mov	r0, r3
 801cf24:	f7f6 fab4 	bl	8013490 <lwip_htons>
 801cf28:	4603      	mov	r3, r0
 801cf2a:	461a      	mov	r2, r3
 801cf2c:	4621      	mov	r1, r4
 801cf2e:	4812      	ldr	r0, [pc, #72]	@ (801cf78 <udp_debug_print+0x80>)
 801cf30:	f004 f8c8 	bl	80210c4 <iprintf>
                          lwip_ntohs(udphdr->src), lwip_ntohs(udphdr->dest)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 801cf34:	480f      	ldr	r0, [pc, #60]	@ (801cf74 <udp_debug_print+0x7c>)
 801cf36:	f004 f935 	bl	80211a4 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     0x%04"X16_F"    | (len, chksum)\n",
 801cf3a:	687b      	ldr	r3, [r7, #4]
 801cf3c:	889b      	ldrh	r3, [r3, #4]
 801cf3e:	b29b      	uxth	r3, r3
 801cf40:	4618      	mov	r0, r3
 801cf42:	f7f6 faa5 	bl	8013490 <lwip_htons>
 801cf46:	4603      	mov	r3, r0
 801cf48:	461c      	mov	r4, r3
 801cf4a:	687b      	ldr	r3, [r7, #4]
 801cf4c:	88db      	ldrh	r3, [r3, #6]
 801cf4e:	b29b      	uxth	r3, r3
 801cf50:	4618      	mov	r0, r3
 801cf52:	f7f6 fa9d 	bl	8013490 <lwip_htons>
 801cf56:	4603      	mov	r3, r0
 801cf58:	461a      	mov	r2, r3
 801cf5a:	4621      	mov	r1, r4
 801cf5c:	4807      	ldr	r0, [pc, #28]	@ (801cf7c <udp_debug_print+0x84>)
 801cf5e:	f004 f8b1 	bl	80210c4 <iprintf>
                          lwip_ntohs(udphdr->len), lwip_ntohs(udphdr->chksum)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 801cf62:	4804      	ldr	r0, [pc, #16]	@ (801cf74 <udp_debug_print+0x7c>)
 801cf64:	f004 f91e 	bl	80211a4 <puts>
}
 801cf68:	bf00      	nop
 801cf6a:	370c      	adds	r7, #12
 801cf6c:	46bd      	mov	sp, r7
 801cf6e:	bd90      	pop	{r4, r7, pc}
 801cf70:	08026124 	.word	0x08026124
 801cf74:	08026130 	.word	0x08026130
 801cf78:	08026154 	.word	0x08026154
 801cf7c:	0802618c 	.word	0x0802618c

0801cf80 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801cf80:	b580      	push	{r7, lr}
 801cf82:	b082      	sub	sp, #8
 801cf84:	af00      	add	r7, sp, #0
 801cf86:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801cf88:	492b      	ldr	r1, [pc, #172]	@ (801d038 <etharp_free_entry+0xb8>)
 801cf8a:	687a      	ldr	r2, [r7, #4]
 801cf8c:	4613      	mov	r3, r2
 801cf8e:	005b      	lsls	r3, r3, #1
 801cf90:	4413      	add	r3, r2
 801cf92:	00db      	lsls	r3, r3, #3
 801cf94:	440b      	add	r3, r1
 801cf96:	681b      	ldr	r3, [r3, #0]
 801cf98:	2b00      	cmp	r3, #0
 801cf9a:	d013      	beq.n	801cfc4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801cf9c:	4926      	ldr	r1, [pc, #152]	@ (801d038 <etharp_free_entry+0xb8>)
 801cf9e:	687a      	ldr	r2, [r7, #4]
 801cfa0:	4613      	mov	r3, r2
 801cfa2:	005b      	lsls	r3, r3, #1
 801cfa4:	4413      	add	r3, r2
 801cfa6:	00db      	lsls	r3, r3, #3
 801cfa8:	440b      	add	r3, r1
 801cfaa:	681b      	ldr	r3, [r3, #0]
 801cfac:	4618      	mov	r0, r3
 801cfae:	f7f8 f9e9 	bl	8015384 <pbuf_free>
    arp_table[i].q = NULL;
 801cfb2:	4921      	ldr	r1, [pc, #132]	@ (801d038 <etharp_free_entry+0xb8>)
 801cfb4:	687a      	ldr	r2, [r7, #4]
 801cfb6:	4613      	mov	r3, r2
 801cfb8:	005b      	lsls	r3, r3, #1
 801cfba:	4413      	add	r3, r2
 801cfbc:	00db      	lsls	r3, r3, #3
 801cfbe:	440b      	add	r3, r1
 801cfc0:	2200      	movs	r2, #0
 801cfc2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801cfc4:	491c      	ldr	r1, [pc, #112]	@ (801d038 <etharp_free_entry+0xb8>)
 801cfc6:	687a      	ldr	r2, [r7, #4]
 801cfc8:	4613      	mov	r3, r2
 801cfca:	005b      	lsls	r3, r3, #1
 801cfcc:	4413      	add	r3, r2
 801cfce:	00db      	lsls	r3, r3, #3
 801cfd0:	440b      	add	r3, r1
 801cfd2:	3314      	adds	r3, #20
 801cfd4:	2200      	movs	r2, #0
 801cfd6:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 801cfd8:	4917      	ldr	r1, [pc, #92]	@ (801d038 <etharp_free_entry+0xb8>)
 801cfda:	687a      	ldr	r2, [r7, #4]
 801cfdc:	4613      	mov	r3, r2
 801cfde:	005b      	lsls	r3, r3, #1
 801cfe0:	4413      	add	r3, r2
 801cfe2:	00db      	lsls	r3, r3, #3
 801cfe4:	440b      	add	r3, r1
 801cfe6:	3312      	adds	r3, #18
 801cfe8:	2200      	movs	r2, #0
 801cfea:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 801cfec:	4912      	ldr	r1, [pc, #72]	@ (801d038 <etharp_free_entry+0xb8>)
 801cfee:	687a      	ldr	r2, [r7, #4]
 801cff0:	4613      	mov	r3, r2
 801cff2:	005b      	lsls	r3, r3, #1
 801cff4:	4413      	add	r3, r2
 801cff6:	00db      	lsls	r3, r3, #3
 801cff8:	440b      	add	r3, r1
 801cffa:	3308      	adds	r3, #8
 801cffc:	2200      	movs	r2, #0
 801cffe:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 801d000:	490d      	ldr	r1, [pc, #52]	@ (801d038 <etharp_free_entry+0xb8>)
 801d002:	687a      	ldr	r2, [r7, #4]
 801d004:	4613      	mov	r3, r2
 801d006:	005b      	lsls	r3, r3, #1
 801d008:	4413      	add	r3, r2
 801d00a:	00db      	lsls	r3, r3, #3
 801d00c:	440b      	add	r3, r1
 801d00e:	3304      	adds	r3, #4
 801d010:	2200      	movs	r2, #0
 801d012:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 801d014:	4908      	ldr	r1, [pc, #32]	@ (801d038 <etharp_free_entry+0xb8>)
 801d016:	687a      	ldr	r2, [r7, #4]
 801d018:	4613      	mov	r3, r2
 801d01a:	005b      	lsls	r3, r3, #1
 801d01c:	4413      	add	r3, r2
 801d01e:	00db      	lsls	r3, r3, #3
 801d020:	440b      	add	r3, r1
 801d022:	3308      	adds	r3, #8
 801d024:	4a05      	ldr	r2, [pc, #20]	@ (801d03c <etharp_free_entry+0xbc>)
 801d026:	3304      	adds	r3, #4
 801d028:	6810      	ldr	r0, [r2, #0]
 801d02a:	6018      	str	r0, [r3, #0]
 801d02c:	8892      	ldrh	r2, [r2, #4]
 801d02e:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 801d030:	bf00      	nop
 801d032:	3708      	adds	r7, #8
 801d034:	46bd      	mov	sp, r7
 801d036:	bd80      	pop	{r7, pc}
 801d038:	2002847c 	.word	0x2002847c
 801d03c:	08027270 	.word	0x08027270

0801d040 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801d040:	b580      	push	{r7, lr}
 801d042:	b082      	sub	sp, #8
 801d044:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d046:	2300      	movs	r3, #0
 801d048:	607b      	str	r3, [r7, #4]
 801d04a:	e096      	b.n	801d17a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801d04c:	494f      	ldr	r1, [pc, #316]	@ (801d18c <etharp_tmr+0x14c>)
 801d04e:	687a      	ldr	r2, [r7, #4]
 801d050:	4613      	mov	r3, r2
 801d052:	005b      	lsls	r3, r3, #1
 801d054:	4413      	add	r3, r2
 801d056:	00db      	lsls	r3, r3, #3
 801d058:	440b      	add	r3, r1
 801d05a:	3314      	adds	r3, #20
 801d05c:	781b      	ldrb	r3, [r3, #0]
 801d05e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801d060:	78fb      	ldrb	r3, [r7, #3]
 801d062:	2b00      	cmp	r3, #0
 801d064:	f000 8086 	beq.w	801d174 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801d068:	4948      	ldr	r1, [pc, #288]	@ (801d18c <etharp_tmr+0x14c>)
 801d06a:	687a      	ldr	r2, [r7, #4]
 801d06c:	4613      	mov	r3, r2
 801d06e:	005b      	lsls	r3, r3, #1
 801d070:	4413      	add	r3, r2
 801d072:	00db      	lsls	r3, r3, #3
 801d074:	440b      	add	r3, r1
 801d076:	3312      	adds	r3, #18
 801d078:	881b      	ldrh	r3, [r3, #0]
 801d07a:	3301      	adds	r3, #1
 801d07c:	b298      	uxth	r0, r3
 801d07e:	4943      	ldr	r1, [pc, #268]	@ (801d18c <etharp_tmr+0x14c>)
 801d080:	687a      	ldr	r2, [r7, #4]
 801d082:	4613      	mov	r3, r2
 801d084:	005b      	lsls	r3, r3, #1
 801d086:	4413      	add	r3, r2
 801d088:	00db      	lsls	r3, r3, #3
 801d08a:	440b      	add	r3, r1
 801d08c:	3312      	adds	r3, #18
 801d08e:	4602      	mov	r2, r0
 801d090:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801d092:	493e      	ldr	r1, [pc, #248]	@ (801d18c <etharp_tmr+0x14c>)
 801d094:	687a      	ldr	r2, [r7, #4]
 801d096:	4613      	mov	r3, r2
 801d098:	005b      	lsls	r3, r3, #1
 801d09a:	4413      	add	r3, r2
 801d09c:	00db      	lsls	r3, r3, #3
 801d09e:	440b      	add	r3, r1
 801d0a0:	3312      	adds	r3, #18
 801d0a2:	881b      	ldrh	r3, [r3, #0]
 801d0a4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801d0a8:	d215      	bcs.n	801d0d6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801d0aa:	4938      	ldr	r1, [pc, #224]	@ (801d18c <etharp_tmr+0x14c>)
 801d0ac:	687a      	ldr	r2, [r7, #4]
 801d0ae:	4613      	mov	r3, r2
 801d0b0:	005b      	lsls	r3, r3, #1
 801d0b2:	4413      	add	r3, r2
 801d0b4:	00db      	lsls	r3, r3, #3
 801d0b6:	440b      	add	r3, r1
 801d0b8:	3314      	adds	r3, #20
 801d0ba:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801d0bc:	2b01      	cmp	r3, #1
 801d0be:	d10e      	bne.n	801d0de <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801d0c0:	4932      	ldr	r1, [pc, #200]	@ (801d18c <etharp_tmr+0x14c>)
 801d0c2:	687a      	ldr	r2, [r7, #4]
 801d0c4:	4613      	mov	r3, r2
 801d0c6:	005b      	lsls	r3, r3, #1
 801d0c8:	4413      	add	r3, r2
 801d0ca:	00db      	lsls	r3, r3, #3
 801d0cc:	440b      	add	r3, r1
 801d0ce:	3312      	adds	r3, #18
 801d0d0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801d0d2:	2b04      	cmp	r3, #4
 801d0d4:	d903      	bls.n	801d0de <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801d0d6:	6878      	ldr	r0, [r7, #4]
 801d0d8:	f7ff ff52 	bl	801cf80 <etharp_free_entry>
 801d0dc:	e04a      	b.n	801d174 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801d0de:	492b      	ldr	r1, [pc, #172]	@ (801d18c <etharp_tmr+0x14c>)
 801d0e0:	687a      	ldr	r2, [r7, #4]
 801d0e2:	4613      	mov	r3, r2
 801d0e4:	005b      	lsls	r3, r3, #1
 801d0e6:	4413      	add	r3, r2
 801d0e8:	00db      	lsls	r3, r3, #3
 801d0ea:	440b      	add	r3, r1
 801d0ec:	3314      	adds	r3, #20
 801d0ee:	781b      	ldrb	r3, [r3, #0]
 801d0f0:	2b03      	cmp	r3, #3
 801d0f2:	d10a      	bne.n	801d10a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801d0f4:	4925      	ldr	r1, [pc, #148]	@ (801d18c <etharp_tmr+0x14c>)
 801d0f6:	687a      	ldr	r2, [r7, #4]
 801d0f8:	4613      	mov	r3, r2
 801d0fa:	005b      	lsls	r3, r3, #1
 801d0fc:	4413      	add	r3, r2
 801d0fe:	00db      	lsls	r3, r3, #3
 801d100:	440b      	add	r3, r1
 801d102:	3314      	adds	r3, #20
 801d104:	2204      	movs	r2, #4
 801d106:	701a      	strb	r2, [r3, #0]
 801d108:	e034      	b.n	801d174 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801d10a:	4920      	ldr	r1, [pc, #128]	@ (801d18c <etharp_tmr+0x14c>)
 801d10c:	687a      	ldr	r2, [r7, #4]
 801d10e:	4613      	mov	r3, r2
 801d110:	005b      	lsls	r3, r3, #1
 801d112:	4413      	add	r3, r2
 801d114:	00db      	lsls	r3, r3, #3
 801d116:	440b      	add	r3, r1
 801d118:	3314      	adds	r3, #20
 801d11a:	781b      	ldrb	r3, [r3, #0]
 801d11c:	2b04      	cmp	r3, #4
 801d11e:	d10a      	bne.n	801d136 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801d120:	491a      	ldr	r1, [pc, #104]	@ (801d18c <etharp_tmr+0x14c>)
 801d122:	687a      	ldr	r2, [r7, #4]
 801d124:	4613      	mov	r3, r2
 801d126:	005b      	lsls	r3, r3, #1
 801d128:	4413      	add	r3, r2
 801d12a:	00db      	lsls	r3, r3, #3
 801d12c:	440b      	add	r3, r1
 801d12e:	3314      	adds	r3, #20
 801d130:	2202      	movs	r2, #2
 801d132:	701a      	strb	r2, [r3, #0]
 801d134:	e01e      	b.n	801d174 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801d136:	4915      	ldr	r1, [pc, #84]	@ (801d18c <etharp_tmr+0x14c>)
 801d138:	687a      	ldr	r2, [r7, #4]
 801d13a:	4613      	mov	r3, r2
 801d13c:	005b      	lsls	r3, r3, #1
 801d13e:	4413      	add	r3, r2
 801d140:	00db      	lsls	r3, r3, #3
 801d142:	440b      	add	r3, r1
 801d144:	3314      	adds	r3, #20
 801d146:	781b      	ldrb	r3, [r3, #0]
 801d148:	2b01      	cmp	r3, #1
 801d14a:	d113      	bne.n	801d174 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801d14c:	490f      	ldr	r1, [pc, #60]	@ (801d18c <etharp_tmr+0x14c>)
 801d14e:	687a      	ldr	r2, [r7, #4]
 801d150:	4613      	mov	r3, r2
 801d152:	005b      	lsls	r3, r3, #1
 801d154:	4413      	add	r3, r2
 801d156:	00db      	lsls	r3, r3, #3
 801d158:	440b      	add	r3, r1
 801d15a:	3308      	adds	r3, #8
 801d15c:	6818      	ldr	r0, [r3, #0]
 801d15e:	687a      	ldr	r2, [r7, #4]
 801d160:	4613      	mov	r3, r2
 801d162:	005b      	lsls	r3, r3, #1
 801d164:	4413      	add	r3, r2
 801d166:	00db      	lsls	r3, r3, #3
 801d168:	4a08      	ldr	r2, [pc, #32]	@ (801d18c <etharp_tmr+0x14c>)
 801d16a:	4413      	add	r3, r2
 801d16c:	3304      	adds	r3, #4
 801d16e:	4619      	mov	r1, r3
 801d170:	f000 feae 	bl	801ded0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d174:	687b      	ldr	r3, [r7, #4]
 801d176:	3301      	adds	r3, #1
 801d178:	607b      	str	r3, [r7, #4]
 801d17a:	687b      	ldr	r3, [r7, #4]
 801d17c:	2b09      	cmp	r3, #9
 801d17e:	f77f af65 	ble.w	801d04c <etharp_tmr+0xc>
      }
    }
  }
}
 801d182:	bf00      	nop
 801d184:	bf00      	nop
 801d186:	3708      	adds	r7, #8
 801d188:	46bd      	mov	sp, r7
 801d18a:	bd80      	pop	{r7, pc}
 801d18c:	2002847c 	.word	0x2002847c

0801d190 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801d190:	b580      	push	{r7, lr}
 801d192:	b08a      	sub	sp, #40	@ 0x28
 801d194:	af00      	add	r7, sp, #0
 801d196:	60f8      	str	r0, [r7, #12]
 801d198:	460b      	mov	r3, r1
 801d19a:	607a      	str	r2, [r7, #4]
 801d19c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801d19e:	230a      	movs	r3, #10
 801d1a0:	843b      	strh	r3, [r7, #32]
 801d1a2:	230a      	movs	r3, #10
 801d1a4:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t empty = ARP_TABLE_SIZE;
 801d1a6:	230a      	movs	r3, #10
 801d1a8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t i = 0;
 801d1aa:	2300      	movs	r3, #0
 801d1ac:	84fb      	strh	r3, [r7, #38]	@ 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801d1ae:	230a      	movs	r3, #10
 801d1b0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801d1b2:	2300      	movs	r3, #0
 801d1b4:	83bb      	strh	r3, [r7, #28]
 801d1b6:	2300      	movs	r3, #0
 801d1b8:	837b      	strh	r3, [r7, #26]
 801d1ba:	2300      	movs	r3, #0
 801d1bc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d1be:	2300      	movs	r3, #0
 801d1c0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801d1c2:	e0ae      	b.n	801d322 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801d1c4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d1c8:	49a6      	ldr	r1, [pc, #664]	@ (801d464 <etharp_find_entry+0x2d4>)
 801d1ca:	4613      	mov	r3, r2
 801d1cc:	005b      	lsls	r3, r3, #1
 801d1ce:	4413      	add	r3, r2
 801d1d0:	00db      	lsls	r3, r3, #3
 801d1d2:	440b      	add	r3, r1
 801d1d4:	3314      	adds	r3, #20
 801d1d6:	781b      	ldrb	r3, [r3, #0]
 801d1d8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801d1da:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801d1de:	2b0a      	cmp	r3, #10
 801d1e0:	d105      	bne.n	801d1ee <etharp_find_entry+0x5e>
 801d1e2:	7dfb      	ldrb	r3, [r7, #23]
 801d1e4:	2b00      	cmp	r3, #0
 801d1e6:	d102      	bne.n	801d1ee <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801d1e8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801d1ea:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801d1ec:	e095      	b.n	801d31a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801d1ee:	7dfb      	ldrb	r3, [r7, #23]
 801d1f0:	2b00      	cmp	r3, #0
 801d1f2:	f000 8092 	beq.w	801d31a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801d1f6:	7dfb      	ldrb	r3, [r7, #23]
 801d1f8:	2b01      	cmp	r3, #1
 801d1fa:	d009      	beq.n	801d210 <etharp_find_entry+0x80>
 801d1fc:	7dfb      	ldrb	r3, [r7, #23]
 801d1fe:	2b01      	cmp	r3, #1
 801d200:	d806      	bhi.n	801d210 <etharp_find_entry+0x80>
 801d202:	4b99      	ldr	r3, [pc, #612]	@ (801d468 <etharp_find_entry+0x2d8>)
 801d204:	f240 1223 	movw	r2, #291	@ 0x123
 801d208:	4998      	ldr	r1, [pc, #608]	@ (801d46c <etharp_find_entry+0x2dc>)
 801d20a:	4899      	ldr	r0, [pc, #612]	@ (801d470 <etharp_find_entry+0x2e0>)
 801d20c:	f003 ff5a 	bl	80210c4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801d210:	68fb      	ldr	r3, [r7, #12]
 801d212:	2b00      	cmp	r3, #0
 801d214:	d020      	beq.n	801d258 <etharp_find_entry+0xc8>
 801d216:	68fb      	ldr	r3, [r7, #12]
 801d218:	6819      	ldr	r1, [r3, #0]
 801d21a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d21e:	4891      	ldr	r0, [pc, #580]	@ (801d464 <etharp_find_entry+0x2d4>)
 801d220:	4613      	mov	r3, r2
 801d222:	005b      	lsls	r3, r3, #1
 801d224:	4413      	add	r3, r2
 801d226:	00db      	lsls	r3, r3, #3
 801d228:	4403      	add	r3, r0
 801d22a:	3304      	adds	r3, #4
 801d22c:	681b      	ldr	r3, [r3, #0]
 801d22e:	4299      	cmp	r1, r3
 801d230:	d112      	bne.n	801d258 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801d232:	687b      	ldr	r3, [r7, #4]
 801d234:	2b00      	cmp	r3, #0
 801d236:	d00c      	beq.n	801d252 <etharp_find_entry+0xc2>
 801d238:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d23c:	4989      	ldr	r1, [pc, #548]	@ (801d464 <etharp_find_entry+0x2d4>)
 801d23e:	4613      	mov	r3, r2
 801d240:	005b      	lsls	r3, r3, #1
 801d242:	4413      	add	r3, r2
 801d244:	00db      	lsls	r3, r3, #3
 801d246:	440b      	add	r3, r1
 801d248:	3308      	adds	r3, #8
 801d24a:	681b      	ldr	r3, [r3, #0]
 801d24c:	687a      	ldr	r2, [r7, #4]
 801d24e:	429a      	cmp	r2, r3
 801d250:	d102      	bne.n	801d258 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801d252:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801d256:	e100      	b.n	801d45a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801d258:	7dfb      	ldrb	r3, [r7, #23]
 801d25a:	2b01      	cmp	r3, #1
 801d25c:	d140      	bne.n	801d2e0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801d25e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d262:	4980      	ldr	r1, [pc, #512]	@ (801d464 <etharp_find_entry+0x2d4>)
 801d264:	4613      	mov	r3, r2
 801d266:	005b      	lsls	r3, r3, #1
 801d268:	4413      	add	r3, r2
 801d26a:	00db      	lsls	r3, r3, #3
 801d26c:	440b      	add	r3, r1
 801d26e:	681b      	ldr	r3, [r3, #0]
 801d270:	2b00      	cmp	r3, #0
 801d272:	d01a      	beq.n	801d2aa <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801d274:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d278:	497a      	ldr	r1, [pc, #488]	@ (801d464 <etharp_find_entry+0x2d4>)
 801d27a:	4613      	mov	r3, r2
 801d27c:	005b      	lsls	r3, r3, #1
 801d27e:	4413      	add	r3, r2
 801d280:	00db      	lsls	r3, r3, #3
 801d282:	440b      	add	r3, r1
 801d284:	3312      	adds	r3, #18
 801d286:	881b      	ldrh	r3, [r3, #0]
 801d288:	8bba      	ldrh	r2, [r7, #28]
 801d28a:	429a      	cmp	r2, r3
 801d28c:	d845      	bhi.n	801d31a <etharp_find_entry+0x18a>
            old_queue = i;
 801d28e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801d290:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801d292:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d296:	4973      	ldr	r1, [pc, #460]	@ (801d464 <etharp_find_entry+0x2d4>)
 801d298:	4613      	mov	r3, r2
 801d29a:	005b      	lsls	r3, r3, #1
 801d29c:	4413      	add	r3, r2
 801d29e:	00db      	lsls	r3, r3, #3
 801d2a0:	440b      	add	r3, r1
 801d2a2:	3312      	adds	r3, #18
 801d2a4:	881b      	ldrh	r3, [r3, #0]
 801d2a6:	83bb      	strh	r3, [r7, #28]
 801d2a8:	e037      	b.n	801d31a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801d2aa:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d2ae:	496d      	ldr	r1, [pc, #436]	@ (801d464 <etharp_find_entry+0x2d4>)
 801d2b0:	4613      	mov	r3, r2
 801d2b2:	005b      	lsls	r3, r3, #1
 801d2b4:	4413      	add	r3, r2
 801d2b6:	00db      	lsls	r3, r3, #3
 801d2b8:	440b      	add	r3, r1
 801d2ba:	3312      	adds	r3, #18
 801d2bc:	881b      	ldrh	r3, [r3, #0]
 801d2be:	8b7a      	ldrh	r2, [r7, #26]
 801d2c0:	429a      	cmp	r2, r3
 801d2c2:	d82a      	bhi.n	801d31a <etharp_find_entry+0x18a>
            old_pending = i;
 801d2c4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801d2c6:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 801d2c8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d2cc:	4965      	ldr	r1, [pc, #404]	@ (801d464 <etharp_find_entry+0x2d4>)
 801d2ce:	4613      	mov	r3, r2
 801d2d0:	005b      	lsls	r3, r3, #1
 801d2d2:	4413      	add	r3, r2
 801d2d4:	00db      	lsls	r3, r3, #3
 801d2d6:	440b      	add	r3, r1
 801d2d8:	3312      	adds	r3, #18
 801d2da:	881b      	ldrh	r3, [r3, #0]
 801d2dc:	837b      	strh	r3, [r7, #26]
 801d2de:	e01c      	b.n	801d31a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801d2e0:	7dfb      	ldrb	r3, [r7, #23]
 801d2e2:	2b01      	cmp	r3, #1
 801d2e4:	d919      	bls.n	801d31a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801d2e6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d2ea:	495e      	ldr	r1, [pc, #376]	@ (801d464 <etharp_find_entry+0x2d4>)
 801d2ec:	4613      	mov	r3, r2
 801d2ee:	005b      	lsls	r3, r3, #1
 801d2f0:	4413      	add	r3, r2
 801d2f2:	00db      	lsls	r3, r3, #3
 801d2f4:	440b      	add	r3, r1
 801d2f6:	3312      	adds	r3, #18
 801d2f8:	881b      	ldrh	r3, [r3, #0]
 801d2fa:	8b3a      	ldrh	r2, [r7, #24]
 801d2fc:	429a      	cmp	r2, r3
 801d2fe:	d80c      	bhi.n	801d31a <etharp_find_entry+0x18a>
            old_stable = i;
 801d300:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801d302:	847b      	strh	r3, [r7, #34]	@ 0x22
            age_stable = arp_table[i].ctime;
 801d304:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d308:	4956      	ldr	r1, [pc, #344]	@ (801d464 <etharp_find_entry+0x2d4>)
 801d30a:	4613      	mov	r3, r2
 801d30c:	005b      	lsls	r3, r3, #1
 801d30e:	4413      	add	r3, r2
 801d310:	00db      	lsls	r3, r3, #3
 801d312:	440b      	add	r3, r1
 801d314:	3312      	adds	r3, #18
 801d316:	881b      	ldrh	r3, [r3, #0]
 801d318:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d31a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801d31c:	3301      	adds	r3, #1
 801d31e:	b29b      	uxth	r3, r3
 801d320:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801d322:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801d326:	2b09      	cmp	r3, #9
 801d328:	f77f af4c 	ble.w	801d1c4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801d32c:	7afb      	ldrb	r3, [r7, #11]
 801d32e:	f003 0302 	and.w	r3, r3, #2
 801d332:	2b00      	cmp	r3, #0
 801d334:	d108      	bne.n	801d348 <etharp_find_entry+0x1b8>
 801d336:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801d33a:	2b0a      	cmp	r3, #10
 801d33c:	d107      	bne.n	801d34e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801d33e:	7afb      	ldrb	r3, [r7, #11]
 801d340:	f003 0301 	and.w	r3, r3, #1
 801d344:	2b00      	cmp	r3, #0
 801d346:	d102      	bne.n	801d34e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801d348:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d34c:	e085      	b.n	801d45a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801d34e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801d352:	2b09      	cmp	r3, #9
 801d354:	dc02      	bgt.n	801d35c <etharp_find_entry+0x1cc>
    i = empty;
 801d356:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801d358:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801d35a:	e039      	b.n	801d3d0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801d35c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801d360:	2b09      	cmp	r3, #9
 801d362:	dc14      	bgt.n	801d38e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801d364:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d366:	84fb      	strh	r3, [r7, #38]	@ 0x26
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801d368:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d36c:	493d      	ldr	r1, [pc, #244]	@ (801d464 <etharp_find_entry+0x2d4>)
 801d36e:	4613      	mov	r3, r2
 801d370:	005b      	lsls	r3, r3, #1
 801d372:	4413      	add	r3, r2
 801d374:	00db      	lsls	r3, r3, #3
 801d376:	440b      	add	r3, r1
 801d378:	681b      	ldr	r3, [r3, #0]
 801d37a:	2b00      	cmp	r3, #0
 801d37c:	d018      	beq.n	801d3b0 <etharp_find_entry+0x220>
 801d37e:	4b3a      	ldr	r3, [pc, #232]	@ (801d468 <etharp_find_entry+0x2d8>)
 801d380:	f240 126d 	movw	r2, #365	@ 0x16d
 801d384:	493b      	ldr	r1, [pc, #236]	@ (801d474 <etharp_find_entry+0x2e4>)
 801d386:	483a      	ldr	r0, [pc, #232]	@ (801d470 <etharp_find_entry+0x2e0>)
 801d388:	f003 fe9c 	bl	80210c4 <iprintf>
 801d38c:	e010      	b.n	801d3b0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801d38e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801d392:	2b09      	cmp	r3, #9
 801d394:	dc02      	bgt.n	801d39c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801d396:	8c3b      	ldrh	r3, [r7, #32]
 801d398:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801d39a:	e009      	b.n	801d3b0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801d39c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801d3a0:	2b09      	cmp	r3, #9
 801d3a2:	dc02      	bgt.n	801d3aa <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801d3a4:	8bfb      	ldrh	r3, [r7, #30]
 801d3a6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801d3a8:	e002      	b.n	801d3b0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801d3aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d3ae:	e054      	b.n	801d45a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801d3b0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801d3b4:	2b09      	cmp	r3, #9
 801d3b6:	dd06      	ble.n	801d3c6 <etharp_find_entry+0x236>
 801d3b8:	4b2b      	ldr	r3, [pc, #172]	@ (801d468 <etharp_find_entry+0x2d8>)
 801d3ba:	f240 127f 	movw	r2, #383	@ 0x17f
 801d3be:	492e      	ldr	r1, [pc, #184]	@ (801d478 <etharp_find_entry+0x2e8>)
 801d3c0:	482b      	ldr	r0, [pc, #172]	@ (801d470 <etharp_find_entry+0x2e0>)
 801d3c2:	f003 fe7f 	bl	80210c4 <iprintf>
    etharp_free_entry(i);
 801d3c6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801d3ca:	4618      	mov	r0, r3
 801d3cc:	f7ff fdd8 	bl	801cf80 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801d3d0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801d3d4:	2b09      	cmp	r3, #9
 801d3d6:	dd06      	ble.n	801d3e6 <etharp_find_entry+0x256>
 801d3d8:	4b23      	ldr	r3, [pc, #140]	@ (801d468 <etharp_find_entry+0x2d8>)
 801d3da:	f240 1283 	movw	r2, #387	@ 0x183
 801d3de:	4926      	ldr	r1, [pc, #152]	@ (801d478 <etharp_find_entry+0x2e8>)
 801d3e0:	4823      	ldr	r0, [pc, #140]	@ (801d470 <etharp_find_entry+0x2e0>)
 801d3e2:	f003 fe6f 	bl	80210c4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801d3e6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d3ea:	491e      	ldr	r1, [pc, #120]	@ (801d464 <etharp_find_entry+0x2d4>)
 801d3ec:	4613      	mov	r3, r2
 801d3ee:	005b      	lsls	r3, r3, #1
 801d3f0:	4413      	add	r3, r2
 801d3f2:	00db      	lsls	r3, r3, #3
 801d3f4:	440b      	add	r3, r1
 801d3f6:	3314      	adds	r3, #20
 801d3f8:	781b      	ldrb	r3, [r3, #0]
 801d3fa:	2b00      	cmp	r3, #0
 801d3fc:	d006      	beq.n	801d40c <etharp_find_entry+0x27c>
 801d3fe:	4b1a      	ldr	r3, [pc, #104]	@ (801d468 <etharp_find_entry+0x2d8>)
 801d400:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801d404:	491d      	ldr	r1, [pc, #116]	@ (801d47c <etharp_find_entry+0x2ec>)
 801d406:	481a      	ldr	r0, [pc, #104]	@ (801d470 <etharp_find_entry+0x2e0>)
 801d408:	f003 fe5c 	bl	80210c4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801d40c:	68fb      	ldr	r3, [r7, #12]
 801d40e:	2b00      	cmp	r3, #0
 801d410:	d00b      	beq.n	801d42a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801d412:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d416:	68fb      	ldr	r3, [r7, #12]
 801d418:	6819      	ldr	r1, [r3, #0]
 801d41a:	4812      	ldr	r0, [pc, #72]	@ (801d464 <etharp_find_entry+0x2d4>)
 801d41c:	4613      	mov	r3, r2
 801d41e:	005b      	lsls	r3, r3, #1
 801d420:	4413      	add	r3, r2
 801d422:	00db      	lsls	r3, r3, #3
 801d424:	4403      	add	r3, r0
 801d426:	3304      	adds	r3, #4
 801d428:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801d42a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d42e:	490d      	ldr	r1, [pc, #52]	@ (801d464 <etharp_find_entry+0x2d4>)
 801d430:	4613      	mov	r3, r2
 801d432:	005b      	lsls	r3, r3, #1
 801d434:	4413      	add	r3, r2
 801d436:	00db      	lsls	r3, r3, #3
 801d438:	440b      	add	r3, r1
 801d43a:	3312      	adds	r3, #18
 801d43c:	2200      	movs	r2, #0
 801d43e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801d440:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d444:	4907      	ldr	r1, [pc, #28]	@ (801d464 <etharp_find_entry+0x2d4>)
 801d446:	4613      	mov	r3, r2
 801d448:	005b      	lsls	r3, r3, #1
 801d44a:	4413      	add	r3, r2
 801d44c:	00db      	lsls	r3, r3, #3
 801d44e:	440b      	add	r3, r1
 801d450:	3308      	adds	r3, #8
 801d452:	687a      	ldr	r2, [r7, #4]
 801d454:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801d456:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 801d45a:	4618      	mov	r0, r3
 801d45c:	3728      	adds	r7, #40	@ 0x28
 801d45e:	46bd      	mov	sp, r7
 801d460:	bd80      	pop	{r7, pc}
 801d462:	bf00      	nop
 801d464:	2002847c 	.word	0x2002847c
 801d468:	080261c0 	.word	0x080261c0
 801d46c:	080261f8 	.word	0x080261f8
 801d470:	08026238 	.word	0x08026238
 801d474:	08026260 	.word	0x08026260
 801d478:	08026278 	.word	0x08026278
 801d47c:	0802628c 	.word	0x0802628c

0801d480 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801d480:	b580      	push	{r7, lr}
 801d482:	b088      	sub	sp, #32
 801d484:	af02      	add	r7, sp, #8
 801d486:	60f8      	str	r0, [r7, #12]
 801d488:	60b9      	str	r1, [r7, #8]
 801d48a:	607a      	str	r2, [r7, #4]
 801d48c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801d48e:	68fb      	ldr	r3, [r7, #12]
 801d490:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801d494:	2b06      	cmp	r3, #6
 801d496:	d006      	beq.n	801d4a6 <etharp_update_arp_entry+0x26>
 801d498:	4b48      	ldr	r3, [pc, #288]	@ (801d5bc <etharp_update_arp_entry+0x13c>)
 801d49a:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801d49e:	4948      	ldr	r1, [pc, #288]	@ (801d5c0 <etharp_update_arp_entry+0x140>)
 801d4a0:	4848      	ldr	r0, [pc, #288]	@ (801d5c4 <etharp_update_arp_entry+0x144>)
 801d4a2:	f003 fe0f 	bl	80210c4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801d4a6:	68bb      	ldr	r3, [r7, #8]
 801d4a8:	2b00      	cmp	r3, #0
 801d4aa:	d012      	beq.n	801d4d2 <etharp_update_arp_entry+0x52>
 801d4ac:	68bb      	ldr	r3, [r7, #8]
 801d4ae:	681b      	ldr	r3, [r3, #0]
 801d4b0:	2b00      	cmp	r3, #0
 801d4b2:	d00e      	beq.n	801d4d2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801d4b4:	68bb      	ldr	r3, [r7, #8]
 801d4b6:	681b      	ldr	r3, [r3, #0]
 801d4b8:	68f9      	ldr	r1, [r7, #12]
 801d4ba:	4618      	mov	r0, r3
 801d4bc:	f001 fa80 	bl	801e9c0 <ip4_addr_isbroadcast_u32>
 801d4c0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801d4c2:	2b00      	cmp	r3, #0
 801d4c4:	d105      	bne.n	801d4d2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801d4c6:	68bb      	ldr	r3, [r7, #8]
 801d4c8:	681b      	ldr	r3, [r3, #0]
 801d4ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801d4ce:	2be0      	cmp	r3, #224	@ 0xe0
 801d4d0:	d102      	bne.n	801d4d8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801d4d2:	f06f 030f 	mvn.w	r3, #15
 801d4d6:	e06c      	b.n	801d5b2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801d4d8:	78fb      	ldrb	r3, [r7, #3]
 801d4da:	68fa      	ldr	r2, [r7, #12]
 801d4dc:	4619      	mov	r1, r3
 801d4de:	68b8      	ldr	r0, [r7, #8]
 801d4e0:	f7ff fe56 	bl	801d190 <etharp_find_entry>
 801d4e4:	4603      	mov	r3, r0
 801d4e6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801d4e8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801d4ec:	2b00      	cmp	r3, #0
 801d4ee:	da02      	bge.n	801d4f6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801d4f0:	8afb      	ldrh	r3, [r7, #22]
 801d4f2:	b25b      	sxtb	r3, r3
 801d4f4:	e05d      	b.n	801d5b2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801d4f6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d4fa:	4933      	ldr	r1, [pc, #204]	@ (801d5c8 <etharp_update_arp_entry+0x148>)
 801d4fc:	4613      	mov	r3, r2
 801d4fe:	005b      	lsls	r3, r3, #1
 801d500:	4413      	add	r3, r2
 801d502:	00db      	lsls	r3, r3, #3
 801d504:	440b      	add	r3, r1
 801d506:	3314      	adds	r3, #20
 801d508:	2202      	movs	r2, #2
 801d50a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801d50c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d510:	492d      	ldr	r1, [pc, #180]	@ (801d5c8 <etharp_update_arp_entry+0x148>)
 801d512:	4613      	mov	r3, r2
 801d514:	005b      	lsls	r3, r3, #1
 801d516:	4413      	add	r3, r2
 801d518:	00db      	lsls	r3, r3, #3
 801d51a:	440b      	add	r3, r1
 801d51c:	3308      	adds	r3, #8
 801d51e:	68fa      	ldr	r2, [r7, #12]
 801d520:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801d522:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d526:	4613      	mov	r3, r2
 801d528:	005b      	lsls	r3, r3, #1
 801d52a:	4413      	add	r3, r2
 801d52c:	00db      	lsls	r3, r3, #3
 801d52e:	3308      	adds	r3, #8
 801d530:	4a25      	ldr	r2, [pc, #148]	@ (801d5c8 <etharp_update_arp_entry+0x148>)
 801d532:	4413      	add	r3, r2
 801d534:	3304      	adds	r3, #4
 801d536:	2206      	movs	r2, #6
 801d538:	6879      	ldr	r1, [r7, #4]
 801d53a:	4618      	mov	r0, r3
 801d53c:	f003 ffe7 	bl	802150e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801d540:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d544:	4920      	ldr	r1, [pc, #128]	@ (801d5c8 <etharp_update_arp_entry+0x148>)
 801d546:	4613      	mov	r3, r2
 801d548:	005b      	lsls	r3, r3, #1
 801d54a:	4413      	add	r3, r2
 801d54c:	00db      	lsls	r3, r3, #3
 801d54e:	440b      	add	r3, r1
 801d550:	3312      	adds	r3, #18
 801d552:	2200      	movs	r2, #0
 801d554:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801d556:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d55a:	491b      	ldr	r1, [pc, #108]	@ (801d5c8 <etharp_update_arp_entry+0x148>)
 801d55c:	4613      	mov	r3, r2
 801d55e:	005b      	lsls	r3, r3, #1
 801d560:	4413      	add	r3, r2
 801d562:	00db      	lsls	r3, r3, #3
 801d564:	440b      	add	r3, r1
 801d566:	681b      	ldr	r3, [r3, #0]
 801d568:	2b00      	cmp	r3, #0
 801d56a:	d021      	beq.n	801d5b0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801d56c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d570:	4915      	ldr	r1, [pc, #84]	@ (801d5c8 <etharp_update_arp_entry+0x148>)
 801d572:	4613      	mov	r3, r2
 801d574:	005b      	lsls	r3, r3, #1
 801d576:	4413      	add	r3, r2
 801d578:	00db      	lsls	r3, r3, #3
 801d57a:	440b      	add	r3, r1
 801d57c:	681b      	ldr	r3, [r3, #0]
 801d57e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801d580:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d584:	4910      	ldr	r1, [pc, #64]	@ (801d5c8 <etharp_update_arp_entry+0x148>)
 801d586:	4613      	mov	r3, r2
 801d588:	005b      	lsls	r3, r3, #1
 801d58a:	4413      	add	r3, r2
 801d58c:	00db      	lsls	r3, r3, #3
 801d58e:	440b      	add	r3, r1
 801d590:	2200      	movs	r2, #0
 801d592:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801d594:	68fb      	ldr	r3, [r7, #12]
 801d596:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801d59a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801d59e:	9300      	str	r3, [sp, #0]
 801d5a0:	687b      	ldr	r3, [r7, #4]
 801d5a2:	6939      	ldr	r1, [r7, #16]
 801d5a4:	68f8      	ldr	r0, [r7, #12]
 801d5a6:	f002 f979 	bl	801f89c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801d5aa:	6938      	ldr	r0, [r7, #16]
 801d5ac:	f7f7 feea 	bl	8015384 <pbuf_free>
  }
  return ERR_OK;
 801d5b0:	2300      	movs	r3, #0
}
 801d5b2:	4618      	mov	r0, r3
 801d5b4:	3718      	adds	r7, #24
 801d5b6:	46bd      	mov	sp, r7
 801d5b8:	bd80      	pop	{r7, pc}
 801d5ba:	bf00      	nop
 801d5bc:	080261c0 	.word	0x080261c0
 801d5c0:	080262b8 	.word	0x080262b8
 801d5c4:	08026238 	.word	0x08026238
 801d5c8:	2002847c 	.word	0x2002847c

0801d5cc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801d5cc:	b580      	push	{r7, lr}
 801d5ce:	b084      	sub	sp, #16
 801d5d0:	af00      	add	r7, sp, #0
 801d5d2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d5d4:	2300      	movs	r3, #0
 801d5d6:	60fb      	str	r3, [r7, #12]
 801d5d8:	e01e      	b.n	801d618 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801d5da:	4913      	ldr	r1, [pc, #76]	@ (801d628 <etharp_cleanup_netif+0x5c>)
 801d5dc:	68fa      	ldr	r2, [r7, #12]
 801d5de:	4613      	mov	r3, r2
 801d5e0:	005b      	lsls	r3, r3, #1
 801d5e2:	4413      	add	r3, r2
 801d5e4:	00db      	lsls	r3, r3, #3
 801d5e6:	440b      	add	r3, r1
 801d5e8:	3314      	adds	r3, #20
 801d5ea:	781b      	ldrb	r3, [r3, #0]
 801d5ec:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801d5ee:	7afb      	ldrb	r3, [r7, #11]
 801d5f0:	2b00      	cmp	r3, #0
 801d5f2:	d00e      	beq.n	801d612 <etharp_cleanup_netif+0x46>
 801d5f4:	490c      	ldr	r1, [pc, #48]	@ (801d628 <etharp_cleanup_netif+0x5c>)
 801d5f6:	68fa      	ldr	r2, [r7, #12]
 801d5f8:	4613      	mov	r3, r2
 801d5fa:	005b      	lsls	r3, r3, #1
 801d5fc:	4413      	add	r3, r2
 801d5fe:	00db      	lsls	r3, r3, #3
 801d600:	440b      	add	r3, r1
 801d602:	3308      	adds	r3, #8
 801d604:	681b      	ldr	r3, [r3, #0]
 801d606:	687a      	ldr	r2, [r7, #4]
 801d608:	429a      	cmp	r2, r3
 801d60a:	d102      	bne.n	801d612 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801d60c:	68f8      	ldr	r0, [r7, #12]
 801d60e:	f7ff fcb7 	bl	801cf80 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d612:	68fb      	ldr	r3, [r7, #12]
 801d614:	3301      	adds	r3, #1
 801d616:	60fb      	str	r3, [r7, #12]
 801d618:	68fb      	ldr	r3, [r7, #12]
 801d61a:	2b09      	cmp	r3, #9
 801d61c:	dddd      	ble.n	801d5da <etharp_cleanup_netif+0xe>
    }
  }
}
 801d61e:	bf00      	nop
 801d620:	bf00      	nop
 801d622:	3710      	adds	r7, #16
 801d624:	46bd      	mov	sp, r7
 801d626:	bd80      	pop	{r7, pc}
 801d628:	2002847c 	.word	0x2002847c

0801d62c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801d62c:	b5b0      	push	{r4, r5, r7, lr}
 801d62e:	b08a      	sub	sp, #40	@ 0x28
 801d630:	af04      	add	r7, sp, #16
 801d632:	6078      	str	r0, [r7, #4]
 801d634:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801d636:	683b      	ldr	r3, [r7, #0]
 801d638:	2b00      	cmp	r3, #0
 801d63a:	d107      	bne.n	801d64c <etharp_input+0x20>
 801d63c:	4b49      	ldr	r3, [pc, #292]	@ (801d764 <etharp_input+0x138>)
 801d63e:	f240 228a 	movw	r2, #650	@ 0x28a
 801d642:	4949      	ldr	r1, [pc, #292]	@ (801d768 <etharp_input+0x13c>)
 801d644:	4849      	ldr	r0, [pc, #292]	@ (801d76c <etharp_input+0x140>)
 801d646:	f003 fd3d 	bl	80210c4 <iprintf>
 801d64a:	e088      	b.n	801d75e <etharp_input+0x132>

  hdr = (struct etharp_hdr *)p->payload;
 801d64c:	687b      	ldr	r3, [r7, #4]
 801d64e:	685b      	ldr	r3, [r3, #4]
 801d650:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801d652:	697b      	ldr	r3, [r7, #20]
 801d654:	881b      	ldrh	r3, [r3, #0]
 801d656:	b29b      	uxth	r3, r3
 801d658:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d65c:	d10c      	bne.n	801d678 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801d65e:	697b      	ldr	r3, [r7, #20]
 801d660:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801d662:	2b06      	cmp	r3, #6
 801d664:	d108      	bne.n	801d678 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801d666:	697b      	ldr	r3, [r7, #20]
 801d668:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801d66a:	2b04      	cmp	r3, #4
 801d66c:	d104      	bne.n	801d678 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801d66e:	697b      	ldr	r3, [r7, #20]
 801d670:	885b      	ldrh	r3, [r3, #2]
 801d672:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801d674:	2b08      	cmp	r3, #8
 801d676:	d00f      	beq.n	801d698 <etharp_input+0x6c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
 801d678:	4b3d      	ldr	r3, [pc, #244]	@ (801d770 <etharp_input+0x144>)
 801d67a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801d67c:	3301      	adds	r3, #1
 801d67e:	b29a      	uxth	r2, r3
 801d680:	4b3b      	ldr	r3, [pc, #236]	@ (801d770 <etharp_input+0x144>)
 801d682:	851a      	strh	r2, [r3, #40]	@ 0x28
    ETHARP_STATS_INC(etharp.drop);
 801d684:	4b3a      	ldr	r3, [pc, #232]	@ (801d770 <etharp_input+0x144>)
 801d686:	8bdb      	ldrh	r3, [r3, #30]
 801d688:	3301      	adds	r3, #1
 801d68a:	b29a      	uxth	r2, r3
 801d68c:	4b38      	ldr	r3, [pc, #224]	@ (801d770 <etharp_input+0x144>)
 801d68e:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 801d690:	6878      	ldr	r0, [r7, #4]
 801d692:	f7f7 fe77 	bl	8015384 <pbuf_free>
    return;
 801d696:	e062      	b.n	801d75e <etharp_input+0x132>
  }
  ETHARP_STATS_INC(etharp.recv);
 801d698:	4b35      	ldr	r3, [pc, #212]	@ (801d770 <etharp_input+0x144>)
 801d69a:	8b5b      	ldrh	r3, [r3, #26]
 801d69c:	3301      	adds	r3, #1
 801d69e:	b29a      	uxth	r2, r3
 801d6a0:	4b33      	ldr	r3, [pc, #204]	@ (801d770 <etharp_input+0x144>)
 801d6a2:	835a      	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801d6a4:	697b      	ldr	r3, [r7, #20]
 801d6a6:	330e      	adds	r3, #14
 801d6a8:	681b      	ldr	r3, [r3, #0]
 801d6aa:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801d6ac:	697b      	ldr	r3, [r7, #20]
 801d6ae:	3318      	adds	r3, #24
 801d6b0:	681b      	ldr	r3, [r3, #0]
 801d6b2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801d6b4:	683b      	ldr	r3, [r7, #0]
 801d6b6:	3304      	adds	r3, #4
 801d6b8:	681b      	ldr	r3, [r3, #0]
 801d6ba:	2b00      	cmp	r3, #0
 801d6bc:	d102      	bne.n	801d6c4 <etharp_input+0x98>
    for_us = 0;
 801d6be:	2300      	movs	r3, #0
 801d6c0:	74fb      	strb	r3, [r7, #19]
 801d6c2:	e009      	b.n	801d6d8 <etharp_input+0xac>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801d6c4:	68ba      	ldr	r2, [r7, #8]
 801d6c6:	683b      	ldr	r3, [r7, #0]
 801d6c8:	3304      	adds	r3, #4
 801d6ca:	681b      	ldr	r3, [r3, #0]
 801d6cc:	429a      	cmp	r2, r3
 801d6ce:	bf0c      	ite	eq
 801d6d0:	2301      	moveq	r3, #1
 801d6d2:	2300      	movne	r3, #0
 801d6d4:	b2db      	uxtb	r3, r3
 801d6d6:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801d6d8:	697b      	ldr	r3, [r7, #20]
 801d6da:	f103 0208 	add.w	r2, r3, #8
 801d6de:	7cfb      	ldrb	r3, [r7, #19]
 801d6e0:	2b00      	cmp	r3, #0
 801d6e2:	d001      	beq.n	801d6e8 <etharp_input+0xbc>
 801d6e4:	2301      	movs	r3, #1
 801d6e6:	e000      	b.n	801d6ea <etharp_input+0xbe>
 801d6e8:	2302      	movs	r3, #2
 801d6ea:	f107 010c 	add.w	r1, r7, #12
 801d6ee:	6838      	ldr	r0, [r7, #0]
 801d6f0:	f7ff fec6 	bl	801d480 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801d6f4:	697b      	ldr	r3, [r7, #20]
 801d6f6:	88db      	ldrh	r3, [r3, #6]
 801d6f8:	b29b      	uxth	r3, r3
 801d6fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d6fe:	d003      	beq.n	801d708 <etharp_input+0xdc>
 801d700:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d704:	d025      	beq.n	801d752 <etharp_input+0x126>
 801d706:	e01d      	b.n	801d744 <etharp_input+0x118>
       * reply. In any case, we time-stamp any existing ARP entry,
       * and possibly send out an IP packet that was queued on it. */

      LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
      /* ARP request for our address? */
      if (for_us) {
 801d708:	7cfb      	ldrb	r3, [r7, #19]
 801d70a:	2b00      	cmp	r3, #0
 801d70c:	d023      	beq.n	801d756 <etharp_input+0x12a>
        /* send ARP response */
        etharp_raw(netif,
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801d70e:	683b      	ldr	r3, [r7, #0]
 801d710:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801d714:	697b      	ldr	r3, [r7, #20]
 801d716:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801d71a:	683b      	ldr	r3, [r7, #0]
 801d71c:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 801d720:	683b      	ldr	r3, [r7, #0]
 801d722:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801d724:	697a      	ldr	r2, [r7, #20]
 801d726:	3208      	adds	r2, #8
        etharp_raw(netif,
 801d728:	2102      	movs	r1, #2
 801d72a:	9103      	str	r1, [sp, #12]
 801d72c:	f107 010c 	add.w	r1, r7, #12
 801d730:	9102      	str	r1, [sp, #8]
 801d732:	9201      	str	r2, [sp, #4]
 801d734:	9300      	str	r3, [sp, #0]
 801d736:	462b      	mov	r3, r5
 801d738:	4622      	mov	r2, r4
 801d73a:	4601      	mov	r1, r0
 801d73c:	6838      	ldr	r0, [r7, #0]
 801d73e:	f000 fb0b 	bl	801dd58 <etharp_raw>
        /* request was not directed to us */
      } else {
        /* { for_us == 0 and netif->ip_addr.addr != 0 } */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
      }
      break;
 801d742:	e008      	b.n	801d756 <etharp_input+0x12a>
      dhcp_arp_reply(netif, &sipaddr);
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
 801d744:	4b0a      	ldr	r3, [pc, #40]	@ (801d770 <etharp_input+0x144>)
 801d746:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801d748:	3301      	adds	r3, #1
 801d74a:	b29a      	uxth	r2, r3
 801d74c:	4b08      	ldr	r3, [pc, #32]	@ (801d770 <etharp_input+0x144>)
 801d74e:	859a      	strh	r2, [r3, #44]	@ 0x2c
      break;
 801d750:	e002      	b.n	801d758 <etharp_input+0x12c>
      break;
 801d752:	bf00      	nop
 801d754:	e000      	b.n	801d758 <etharp_input+0x12c>
      break;
 801d756:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801d758:	6878      	ldr	r0, [r7, #4]
 801d75a:	f7f7 fe13 	bl	8015384 <pbuf_free>
}
 801d75e:	3718      	adds	r7, #24
 801d760:	46bd      	mov	sp, r7
 801d762:	bdb0      	pop	{r4, r5, r7, pc}
 801d764:	080261c0 	.word	0x080261c0
 801d768:	08026310 	.word	0x08026310
 801d76c:	08026238 	.word	0x08026238
 801d770:	20028318 	.word	0x20028318

0801d774 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801d774:	b580      	push	{r7, lr}
 801d776:	b086      	sub	sp, #24
 801d778:	af02      	add	r7, sp, #8
 801d77a:	60f8      	str	r0, [r7, #12]
 801d77c:	60b9      	str	r1, [r7, #8]
 801d77e:	4613      	mov	r3, r2
 801d780:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801d782:	79fa      	ldrb	r2, [r7, #7]
 801d784:	4944      	ldr	r1, [pc, #272]	@ (801d898 <etharp_output_to_arp_index+0x124>)
 801d786:	4613      	mov	r3, r2
 801d788:	005b      	lsls	r3, r3, #1
 801d78a:	4413      	add	r3, r2
 801d78c:	00db      	lsls	r3, r3, #3
 801d78e:	440b      	add	r3, r1
 801d790:	3314      	adds	r3, #20
 801d792:	781b      	ldrb	r3, [r3, #0]
 801d794:	2b01      	cmp	r3, #1
 801d796:	d806      	bhi.n	801d7a6 <etharp_output_to_arp_index+0x32>
 801d798:	4b40      	ldr	r3, [pc, #256]	@ (801d89c <etharp_output_to_arp_index+0x128>)
 801d79a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801d79e:	4940      	ldr	r1, [pc, #256]	@ (801d8a0 <etharp_output_to_arp_index+0x12c>)
 801d7a0:	4840      	ldr	r0, [pc, #256]	@ (801d8a4 <etharp_output_to_arp_index+0x130>)
 801d7a2:	f003 fc8f 	bl	80210c4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801d7a6:	79fa      	ldrb	r2, [r7, #7]
 801d7a8:	493b      	ldr	r1, [pc, #236]	@ (801d898 <etharp_output_to_arp_index+0x124>)
 801d7aa:	4613      	mov	r3, r2
 801d7ac:	005b      	lsls	r3, r3, #1
 801d7ae:	4413      	add	r3, r2
 801d7b0:	00db      	lsls	r3, r3, #3
 801d7b2:	440b      	add	r3, r1
 801d7b4:	3314      	adds	r3, #20
 801d7b6:	781b      	ldrb	r3, [r3, #0]
 801d7b8:	2b02      	cmp	r3, #2
 801d7ba:	d153      	bne.n	801d864 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801d7bc:	79fa      	ldrb	r2, [r7, #7]
 801d7be:	4936      	ldr	r1, [pc, #216]	@ (801d898 <etharp_output_to_arp_index+0x124>)
 801d7c0:	4613      	mov	r3, r2
 801d7c2:	005b      	lsls	r3, r3, #1
 801d7c4:	4413      	add	r3, r2
 801d7c6:	00db      	lsls	r3, r3, #3
 801d7c8:	440b      	add	r3, r1
 801d7ca:	3312      	adds	r3, #18
 801d7cc:	881b      	ldrh	r3, [r3, #0]
 801d7ce:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801d7d2:	d919      	bls.n	801d808 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801d7d4:	79fa      	ldrb	r2, [r7, #7]
 801d7d6:	4613      	mov	r3, r2
 801d7d8:	005b      	lsls	r3, r3, #1
 801d7da:	4413      	add	r3, r2
 801d7dc:	00db      	lsls	r3, r3, #3
 801d7de:	4a2e      	ldr	r2, [pc, #184]	@ (801d898 <etharp_output_to_arp_index+0x124>)
 801d7e0:	4413      	add	r3, r2
 801d7e2:	3304      	adds	r3, #4
 801d7e4:	4619      	mov	r1, r3
 801d7e6:	68f8      	ldr	r0, [r7, #12]
 801d7e8:	f000 fb72 	bl	801ded0 <etharp_request>
 801d7ec:	4603      	mov	r3, r0
 801d7ee:	2b00      	cmp	r3, #0
 801d7f0:	d138      	bne.n	801d864 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801d7f2:	79fa      	ldrb	r2, [r7, #7]
 801d7f4:	4928      	ldr	r1, [pc, #160]	@ (801d898 <etharp_output_to_arp_index+0x124>)
 801d7f6:	4613      	mov	r3, r2
 801d7f8:	005b      	lsls	r3, r3, #1
 801d7fa:	4413      	add	r3, r2
 801d7fc:	00db      	lsls	r3, r3, #3
 801d7fe:	440b      	add	r3, r1
 801d800:	3314      	adds	r3, #20
 801d802:	2203      	movs	r2, #3
 801d804:	701a      	strb	r2, [r3, #0]
 801d806:	e02d      	b.n	801d864 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801d808:	79fa      	ldrb	r2, [r7, #7]
 801d80a:	4923      	ldr	r1, [pc, #140]	@ (801d898 <etharp_output_to_arp_index+0x124>)
 801d80c:	4613      	mov	r3, r2
 801d80e:	005b      	lsls	r3, r3, #1
 801d810:	4413      	add	r3, r2
 801d812:	00db      	lsls	r3, r3, #3
 801d814:	440b      	add	r3, r1
 801d816:	3312      	adds	r3, #18
 801d818:	881b      	ldrh	r3, [r3, #0]
 801d81a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801d81e:	d321      	bcc.n	801d864 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801d820:	79fa      	ldrb	r2, [r7, #7]
 801d822:	4613      	mov	r3, r2
 801d824:	005b      	lsls	r3, r3, #1
 801d826:	4413      	add	r3, r2
 801d828:	00db      	lsls	r3, r3, #3
 801d82a:	4a1b      	ldr	r2, [pc, #108]	@ (801d898 <etharp_output_to_arp_index+0x124>)
 801d82c:	4413      	add	r3, r2
 801d82e:	1d19      	adds	r1, r3, #4
 801d830:	79fa      	ldrb	r2, [r7, #7]
 801d832:	4613      	mov	r3, r2
 801d834:	005b      	lsls	r3, r3, #1
 801d836:	4413      	add	r3, r2
 801d838:	00db      	lsls	r3, r3, #3
 801d83a:	3308      	adds	r3, #8
 801d83c:	4a16      	ldr	r2, [pc, #88]	@ (801d898 <etharp_output_to_arp_index+0x124>)
 801d83e:	4413      	add	r3, r2
 801d840:	3304      	adds	r3, #4
 801d842:	461a      	mov	r2, r3
 801d844:	68f8      	ldr	r0, [r7, #12]
 801d846:	f000 fb21 	bl	801de8c <etharp_request_dst>
 801d84a:	4603      	mov	r3, r0
 801d84c:	2b00      	cmp	r3, #0
 801d84e:	d109      	bne.n	801d864 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801d850:	79fa      	ldrb	r2, [r7, #7]
 801d852:	4911      	ldr	r1, [pc, #68]	@ (801d898 <etharp_output_to_arp_index+0x124>)
 801d854:	4613      	mov	r3, r2
 801d856:	005b      	lsls	r3, r3, #1
 801d858:	4413      	add	r3, r2
 801d85a:	00db      	lsls	r3, r3, #3
 801d85c:	440b      	add	r3, r1
 801d85e:	3314      	adds	r3, #20
 801d860:	2203      	movs	r2, #3
 801d862:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801d864:	68fb      	ldr	r3, [r7, #12]
 801d866:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801d86a:	79fa      	ldrb	r2, [r7, #7]
 801d86c:	4613      	mov	r3, r2
 801d86e:	005b      	lsls	r3, r3, #1
 801d870:	4413      	add	r3, r2
 801d872:	00db      	lsls	r3, r3, #3
 801d874:	3308      	adds	r3, #8
 801d876:	4a08      	ldr	r2, [pc, #32]	@ (801d898 <etharp_output_to_arp_index+0x124>)
 801d878:	4413      	add	r3, r2
 801d87a:	3304      	adds	r3, #4
 801d87c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801d880:	9200      	str	r2, [sp, #0]
 801d882:	460a      	mov	r2, r1
 801d884:	68b9      	ldr	r1, [r7, #8]
 801d886:	68f8      	ldr	r0, [r7, #12]
 801d888:	f002 f808 	bl	801f89c <ethernet_output>
 801d88c:	4603      	mov	r3, r0
}
 801d88e:	4618      	mov	r0, r3
 801d890:	3710      	adds	r7, #16
 801d892:	46bd      	mov	sp, r7
 801d894:	bd80      	pop	{r7, pc}
 801d896:	bf00      	nop
 801d898:	2002847c 	.word	0x2002847c
 801d89c:	080261c0 	.word	0x080261c0
 801d8a0:	08026330 	.word	0x08026330
 801d8a4:	08026238 	.word	0x08026238

0801d8a8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801d8a8:	b580      	push	{r7, lr}
 801d8aa:	b08a      	sub	sp, #40	@ 0x28
 801d8ac:	af02      	add	r7, sp, #8
 801d8ae:	60f8      	str	r0, [r7, #12]
 801d8b0:	60b9      	str	r1, [r7, #8]
 801d8b2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801d8b4:	687b      	ldr	r3, [r7, #4]
 801d8b6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801d8b8:	68fb      	ldr	r3, [r7, #12]
 801d8ba:	2b00      	cmp	r3, #0
 801d8bc:	d106      	bne.n	801d8cc <etharp_output+0x24>
 801d8be:	4b76      	ldr	r3, [pc, #472]	@ (801da98 <etharp_output+0x1f0>)
 801d8c0:	f240 321e 	movw	r2, #798	@ 0x31e
 801d8c4:	4975      	ldr	r1, [pc, #468]	@ (801da9c <etharp_output+0x1f4>)
 801d8c6:	4876      	ldr	r0, [pc, #472]	@ (801daa0 <etharp_output+0x1f8>)
 801d8c8:	f003 fbfc 	bl	80210c4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801d8cc:	68bb      	ldr	r3, [r7, #8]
 801d8ce:	2b00      	cmp	r3, #0
 801d8d0:	d106      	bne.n	801d8e0 <etharp_output+0x38>
 801d8d2:	4b71      	ldr	r3, [pc, #452]	@ (801da98 <etharp_output+0x1f0>)
 801d8d4:	f240 321f 	movw	r2, #799	@ 0x31f
 801d8d8:	4972      	ldr	r1, [pc, #456]	@ (801daa4 <etharp_output+0x1fc>)
 801d8da:	4871      	ldr	r0, [pc, #452]	@ (801daa0 <etharp_output+0x1f8>)
 801d8dc:	f003 fbf2 	bl	80210c4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801d8e0:	687b      	ldr	r3, [r7, #4]
 801d8e2:	2b00      	cmp	r3, #0
 801d8e4:	d106      	bne.n	801d8f4 <etharp_output+0x4c>
 801d8e6:	4b6c      	ldr	r3, [pc, #432]	@ (801da98 <etharp_output+0x1f0>)
 801d8e8:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801d8ec:	496e      	ldr	r1, [pc, #440]	@ (801daa8 <etharp_output+0x200>)
 801d8ee:	486c      	ldr	r0, [pc, #432]	@ (801daa0 <etharp_output+0x1f8>)
 801d8f0:	f003 fbe8 	bl	80210c4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801d8f4:	687b      	ldr	r3, [r7, #4]
 801d8f6:	681b      	ldr	r3, [r3, #0]
 801d8f8:	68f9      	ldr	r1, [r7, #12]
 801d8fa:	4618      	mov	r0, r3
 801d8fc:	f001 f860 	bl	801e9c0 <ip4_addr_isbroadcast_u32>
 801d900:	4603      	mov	r3, r0
 801d902:	2b00      	cmp	r3, #0
 801d904:	d002      	beq.n	801d90c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801d906:	4b69      	ldr	r3, [pc, #420]	@ (801daac <etharp_output+0x204>)
 801d908:	61fb      	str	r3, [r7, #28]
 801d90a:	e0b5      	b.n	801da78 <etharp_output+0x1d0>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801d90c:	687b      	ldr	r3, [r7, #4]
 801d90e:	681b      	ldr	r3, [r3, #0]
 801d910:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801d914:	2be0      	cmp	r3, #224	@ 0xe0
 801d916:	d118      	bne.n	801d94a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801d918:	2301      	movs	r3, #1
 801d91a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801d91c:	2300      	movs	r3, #0
 801d91e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801d920:	235e      	movs	r3, #94	@ 0x5e
 801d922:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801d924:	687b      	ldr	r3, [r7, #4]
 801d926:	3301      	adds	r3, #1
 801d928:	781b      	ldrb	r3, [r3, #0]
 801d92a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d92e:	b2db      	uxtb	r3, r3
 801d930:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801d932:	687b      	ldr	r3, [r7, #4]
 801d934:	3302      	adds	r3, #2
 801d936:	781b      	ldrb	r3, [r3, #0]
 801d938:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801d93a:	687b      	ldr	r3, [r7, #4]
 801d93c:	3303      	adds	r3, #3
 801d93e:	781b      	ldrb	r3, [r3, #0]
 801d940:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801d942:	f107 0310 	add.w	r3, r7, #16
 801d946:	61fb      	str	r3, [r7, #28]
 801d948:	e096      	b.n	801da78 <etharp_output+0x1d0>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801d94a:	687b      	ldr	r3, [r7, #4]
 801d94c:	681a      	ldr	r2, [r3, #0]
 801d94e:	68fb      	ldr	r3, [r7, #12]
 801d950:	3304      	adds	r3, #4
 801d952:	681b      	ldr	r3, [r3, #0]
 801d954:	405a      	eors	r2, r3
 801d956:	68fb      	ldr	r3, [r7, #12]
 801d958:	3308      	adds	r3, #8
 801d95a:	681b      	ldr	r3, [r3, #0]
 801d95c:	4013      	ands	r3, r2
 801d95e:	2b00      	cmp	r3, #0
 801d960:	d012      	beq.n	801d988 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801d962:	687b      	ldr	r3, [r7, #4]
 801d964:	681b      	ldr	r3, [r3, #0]
 801d966:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801d968:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801d96c:	4293      	cmp	r3, r2
 801d96e:	d00b      	beq.n	801d988 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801d970:	68fb      	ldr	r3, [r7, #12]
 801d972:	330c      	adds	r3, #12
 801d974:	681b      	ldr	r3, [r3, #0]
 801d976:	2b00      	cmp	r3, #0
 801d978:	d003      	beq.n	801d982 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801d97a:	68fb      	ldr	r3, [r7, #12]
 801d97c:	330c      	adds	r3, #12
 801d97e:	61bb      	str	r3, [r7, #24]
 801d980:	e002      	b.n	801d988 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801d982:	f06f 0303 	mvn.w	r3, #3
 801d986:	e083      	b.n	801da90 <etharp_output+0x1e8>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801d988:	4b49      	ldr	r3, [pc, #292]	@ (801dab0 <etharp_output+0x208>)
 801d98a:	781b      	ldrb	r3, [r3, #0]
 801d98c:	4619      	mov	r1, r3
 801d98e:	4a49      	ldr	r2, [pc, #292]	@ (801dab4 <etharp_output+0x20c>)
 801d990:	460b      	mov	r3, r1
 801d992:	005b      	lsls	r3, r3, #1
 801d994:	440b      	add	r3, r1
 801d996:	00db      	lsls	r3, r3, #3
 801d998:	4413      	add	r3, r2
 801d99a:	3314      	adds	r3, #20
 801d99c:	781b      	ldrb	r3, [r3, #0]
 801d99e:	2b01      	cmp	r3, #1
 801d9a0:	d92b      	bls.n	801d9fa <etharp_output+0x152>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801d9a2:	4b43      	ldr	r3, [pc, #268]	@ (801dab0 <etharp_output+0x208>)
 801d9a4:	781b      	ldrb	r3, [r3, #0]
 801d9a6:	4619      	mov	r1, r3
 801d9a8:	4a42      	ldr	r2, [pc, #264]	@ (801dab4 <etharp_output+0x20c>)
 801d9aa:	460b      	mov	r3, r1
 801d9ac:	005b      	lsls	r3, r3, #1
 801d9ae:	440b      	add	r3, r1
 801d9b0:	00db      	lsls	r3, r3, #3
 801d9b2:	4413      	add	r3, r2
 801d9b4:	3308      	adds	r3, #8
 801d9b6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801d9b8:	68fa      	ldr	r2, [r7, #12]
 801d9ba:	429a      	cmp	r2, r3
 801d9bc:	d11d      	bne.n	801d9fa <etharp_output+0x152>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801d9be:	69bb      	ldr	r3, [r7, #24]
 801d9c0:	681a      	ldr	r2, [r3, #0]
 801d9c2:	4b3b      	ldr	r3, [pc, #236]	@ (801dab0 <etharp_output+0x208>)
 801d9c4:	781b      	ldrb	r3, [r3, #0]
 801d9c6:	4618      	mov	r0, r3
 801d9c8:	493a      	ldr	r1, [pc, #232]	@ (801dab4 <etharp_output+0x20c>)
 801d9ca:	4603      	mov	r3, r0
 801d9cc:	005b      	lsls	r3, r3, #1
 801d9ce:	4403      	add	r3, r0
 801d9d0:	00db      	lsls	r3, r3, #3
 801d9d2:	440b      	add	r3, r1
 801d9d4:	3304      	adds	r3, #4
 801d9d6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801d9d8:	429a      	cmp	r2, r3
 801d9da:	d10e      	bne.n	801d9fa <etharp_output+0x152>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
 801d9dc:	4b36      	ldr	r3, [pc, #216]	@ (801dab8 <etharp_output+0x210>)
 801d9de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 801d9e0:	3301      	adds	r3, #1
 801d9e2:	b29a      	uxth	r2, r3
 801d9e4:	4b34      	ldr	r3, [pc, #208]	@ (801dab8 <etharp_output+0x210>)
 801d9e6:	85da      	strh	r2, [r3, #46]	@ 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801d9e8:	4b31      	ldr	r3, [pc, #196]	@ (801dab0 <etharp_output+0x208>)
 801d9ea:	781b      	ldrb	r3, [r3, #0]
 801d9ec:	461a      	mov	r2, r3
 801d9ee:	68b9      	ldr	r1, [r7, #8]
 801d9f0:	68f8      	ldr	r0, [r7, #12]
 801d9f2:	f7ff febf 	bl	801d774 <etharp_output_to_arp_index>
 801d9f6:	4603      	mov	r3, r0
 801d9f8:	e04a      	b.n	801da90 <etharp_output+0x1e8>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801d9fa:	2300      	movs	r3, #0
 801d9fc:	75fb      	strb	r3, [r7, #23]
 801d9fe:	e031      	b.n	801da64 <etharp_output+0x1bc>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801da00:	7dfa      	ldrb	r2, [r7, #23]
 801da02:	492c      	ldr	r1, [pc, #176]	@ (801dab4 <etharp_output+0x20c>)
 801da04:	4613      	mov	r3, r2
 801da06:	005b      	lsls	r3, r3, #1
 801da08:	4413      	add	r3, r2
 801da0a:	00db      	lsls	r3, r3, #3
 801da0c:	440b      	add	r3, r1
 801da0e:	3314      	adds	r3, #20
 801da10:	781b      	ldrb	r3, [r3, #0]
 801da12:	2b01      	cmp	r3, #1
 801da14:	d923      	bls.n	801da5e <etharp_output+0x1b6>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801da16:	7dfa      	ldrb	r2, [r7, #23]
 801da18:	4926      	ldr	r1, [pc, #152]	@ (801dab4 <etharp_output+0x20c>)
 801da1a:	4613      	mov	r3, r2
 801da1c:	005b      	lsls	r3, r3, #1
 801da1e:	4413      	add	r3, r2
 801da20:	00db      	lsls	r3, r3, #3
 801da22:	440b      	add	r3, r1
 801da24:	3308      	adds	r3, #8
 801da26:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801da28:	68fa      	ldr	r2, [r7, #12]
 801da2a:	429a      	cmp	r2, r3
 801da2c:	d117      	bne.n	801da5e <etharp_output+0x1b6>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801da2e:	69bb      	ldr	r3, [r7, #24]
 801da30:	6819      	ldr	r1, [r3, #0]
 801da32:	7dfa      	ldrb	r2, [r7, #23]
 801da34:	481f      	ldr	r0, [pc, #124]	@ (801dab4 <etharp_output+0x20c>)
 801da36:	4613      	mov	r3, r2
 801da38:	005b      	lsls	r3, r3, #1
 801da3a:	4413      	add	r3, r2
 801da3c:	00db      	lsls	r3, r3, #3
 801da3e:	4403      	add	r3, r0
 801da40:	3304      	adds	r3, #4
 801da42:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801da44:	4299      	cmp	r1, r3
 801da46:	d10a      	bne.n	801da5e <etharp_output+0x1b6>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801da48:	4a19      	ldr	r2, [pc, #100]	@ (801dab0 <etharp_output+0x208>)
 801da4a:	7dfb      	ldrb	r3, [r7, #23]
 801da4c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801da4e:	7dfb      	ldrb	r3, [r7, #23]
 801da50:	461a      	mov	r2, r3
 801da52:	68b9      	ldr	r1, [r7, #8]
 801da54:	68f8      	ldr	r0, [r7, #12]
 801da56:	f7ff fe8d 	bl	801d774 <etharp_output_to_arp_index>
 801da5a:	4603      	mov	r3, r0
 801da5c:	e018      	b.n	801da90 <etharp_output+0x1e8>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801da5e:	7dfb      	ldrb	r3, [r7, #23]
 801da60:	3301      	adds	r3, #1
 801da62:	75fb      	strb	r3, [r7, #23]
 801da64:	7dfb      	ldrb	r3, [r7, #23]
 801da66:	2b09      	cmp	r3, #9
 801da68:	d9ca      	bls.n	801da00 <etharp_output+0x158>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801da6a:	68ba      	ldr	r2, [r7, #8]
 801da6c:	69b9      	ldr	r1, [r7, #24]
 801da6e:	68f8      	ldr	r0, [r7, #12]
 801da70:	f000 f824 	bl	801dabc <etharp_query>
 801da74:	4603      	mov	r3, r0
 801da76:	e00b      	b.n	801da90 <etharp_output+0x1e8>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801da78:	68fb      	ldr	r3, [r7, #12]
 801da7a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801da7e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801da82:	9300      	str	r3, [sp, #0]
 801da84:	69fb      	ldr	r3, [r7, #28]
 801da86:	68b9      	ldr	r1, [r7, #8]
 801da88:	68f8      	ldr	r0, [r7, #12]
 801da8a:	f001 ff07 	bl	801f89c <ethernet_output>
 801da8e:	4603      	mov	r3, r0
}
 801da90:	4618      	mov	r0, r3
 801da92:	3720      	adds	r7, #32
 801da94:	46bd      	mov	sp, r7
 801da96:	bd80      	pop	{r7, pc}
 801da98:	080261c0 	.word	0x080261c0
 801da9c:	08026310 	.word	0x08026310
 801daa0:	08026238 	.word	0x08026238
 801daa4:	08026360 	.word	0x08026360
 801daa8:	08026300 	.word	0x08026300
 801daac:	08027268 	.word	0x08027268
 801dab0:	2002856c 	.word	0x2002856c
 801dab4:	2002847c 	.word	0x2002847c
 801dab8:	20028318 	.word	0x20028318

0801dabc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801dabc:	b580      	push	{r7, lr}
 801dabe:	b08c      	sub	sp, #48	@ 0x30
 801dac0:	af02      	add	r7, sp, #8
 801dac2:	60f8      	str	r0, [r7, #12]
 801dac4:	60b9      	str	r1, [r7, #8]
 801dac6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801dac8:	68fb      	ldr	r3, [r7, #12]
 801daca:	3326      	adds	r3, #38	@ 0x26
 801dacc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801dace:	23ff      	movs	r3, #255	@ 0xff
 801dad0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801dad4:	2300      	movs	r3, #0
 801dad6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801dad8:	68bb      	ldr	r3, [r7, #8]
 801dada:	681b      	ldr	r3, [r3, #0]
 801dadc:	68f9      	ldr	r1, [r7, #12]
 801dade:	4618      	mov	r0, r3
 801dae0:	f000 ff6e 	bl	801e9c0 <ip4_addr_isbroadcast_u32>
 801dae4:	4603      	mov	r3, r0
 801dae6:	2b00      	cmp	r3, #0
 801dae8:	d10c      	bne.n	801db04 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801daea:	68bb      	ldr	r3, [r7, #8]
 801daec:	681b      	ldr	r3, [r3, #0]
 801daee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801daf2:	2be0      	cmp	r3, #224	@ 0xe0
 801daf4:	d006      	beq.n	801db04 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801daf6:	68bb      	ldr	r3, [r7, #8]
 801daf8:	2b00      	cmp	r3, #0
 801dafa:	d003      	beq.n	801db04 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801dafc:	68bb      	ldr	r3, [r7, #8]
 801dafe:	681b      	ldr	r3, [r3, #0]
 801db00:	2b00      	cmp	r3, #0
 801db02:	d102      	bne.n	801db0a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801db04:	f06f 030f 	mvn.w	r3, #15
 801db08:	e110      	b.n	801dd2c <etharp_query+0x270>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801db0a:	68fa      	ldr	r2, [r7, #12]
 801db0c:	2101      	movs	r1, #1
 801db0e:	68b8      	ldr	r0, [r7, #8]
 801db10:	f7ff fb3e 	bl	801d190 <etharp_find_entry>
 801db14:	4603      	mov	r3, r0
 801db16:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801db18:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801db1c:	2b00      	cmp	r3, #0
 801db1e:	da0b      	bge.n	801db38 <etharp_query+0x7c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
 801db20:	687b      	ldr	r3, [r7, #4]
 801db22:	2b00      	cmp	r3, #0
 801db24:	d005      	beq.n	801db32 <etharp_query+0x76>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
 801db26:	4b83      	ldr	r3, [pc, #524]	@ (801dd34 <etharp_query+0x278>)
 801db28:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801db2a:	3301      	adds	r3, #1
 801db2c:	b29a      	uxth	r2, r3
 801db2e:	4b81      	ldr	r3, [pc, #516]	@ (801dd34 <etharp_query+0x278>)
 801db30:	849a      	strh	r2, [r3, #36]	@ 0x24
    }
    return (err_t)i_err;
 801db32:	8a7b      	ldrh	r3, [r7, #18]
 801db34:	b25b      	sxtb	r3, r3
 801db36:	e0f9      	b.n	801dd2c <etharp_query+0x270>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801db38:	8a7b      	ldrh	r3, [r7, #18]
 801db3a:	2b7e      	cmp	r3, #126	@ 0x7e
 801db3c:	d906      	bls.n	801db4c <etharp_query+0x90>
 801db3e:	4b7e      	ldr	r3, [pc, #504]	@ (801dd38 <etharp_query+0x27c>)
 801db40:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801db44:	497d      	ldr	r1, [pc, #500]	@ (801dd3c <etharp_query+0x280>)
 801db46:	487e      	ldr	r0, [pc, #504]	@ (801dd40 <etharp_query+0x284>)
 801db48:	f003 fabc 	bl	80210c4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801db4c:	8a7b      	ldrh	r3, [r7, #18]
 801db4e:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801db50:	7c7a      	ldrb	r2, [r7, #17]
 801db52:	497c      	ldr	r1, [pc, #496]	@ (801dd44 <etharp_query+0x288>)
 801db54:	4613      	mov	r3, r2
 801db56:	005b      	lsls	r3, r3, #1
 801db58:	4413      	add	r3, r2
 801db5a:	00db      	lsls	r3, r3, #3
 801db5c:	440b      	add	r3, r1
 801db5e:	3314      	adds	r3, #20
 801db60:	781b      	ldrb	r3, [r3, #0]
 801db62:	2b00      	cmp	r3, #0
 801db64:	d115      	bne.n	801db92 <etharp_query+0xd6>
    is_new_entry = 1;
 801db66:	2301      	movs	r3, #1
 801db68:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801db6a:	7c7a      	ldrb	r2, [r7, #17]
 801db6c:	4975      	ldr	r1, [pc, #468]	@ (801dd44 <etharp_query+0x288>)
 801db6e:	4613      	mov	r3, r2
 801db70:	005b      	lsls	r3, r3, #1
 801db72:	4413      	add	r3, r2
 801db74:	00db      	lsls	r3, r3, #3
 801db76:	440b      	add	r3, r1
 801db78:	3314      	adds	r3, #20
 801db7a:	2201      	movs	r2, #1
 801db7c:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801db7e:	7c7a      	ldrb	r2, [r7, #17]
 801db80:	4970      	ldr	r1, [pc, #448]	@ (801dd44 <etharp_query+0x288>)
 801db82:	4613      	mov	r3, r2
 801db84:	005b      	lsls	r3, r3, #1
 801db86:	4413      	add	r3, r2
 801db88:	00db      	lsls	r3, r3, #3
 801db8a:	440b      	add	r3, r1
 801db8c:	3308      	adds	r3, #8
 801db8e:	68fa      	ldr	r2, [r7, #12]
 801db90:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801db92:	7c7a      	ldrb	r2, [r7, #17]
 801db94:	496b      	ldr	r1, [pc, #428]	@ (801dd44 <etharp_query+0x288>)
 801db96:	4613      	mov	r3, r2
 801db98:	005b      	lsls	r3, r3, #1
 801db9a:	4413      	add	r3, r2
 801db9c:	00db      	lsls	r3, r3, #3
 801db9e:	440b      	add	r3, r1
 801dba0:	3314      	adds	r3, #20
 801dba2:	781b      	ldrb	r3, [r3, #0]
 801dba4:	2b01      	cmp	r3, #1
 801dba6:	d011      	beq.n	801dbcc <etharp_query+0x110>
 801dba8:	7c7a      	ldrb	r2, [r7, #17]
 801dbaa:	4966      	ldr	r1, [pc, #408]	@ (801dd44 <etharp_query+0x288>)
 801dbac:	4613      	mov	r3, r2
 801dbae:	005b      	lsls	r3, r3, #1
 801dbb0:	4413      	add	r3, r2
 801dbb2:	00db      	lsls	r3, r3, #3
 801dbb4:	440b      	add	r3, r1
 801dbb6:	3314      	adds	r3, #20
 801dbb8:	781b      	ldrb	r3, [r3, #0]
 801dbba:	2b01      	cmp	r3, #1
 801dbbc:	d806      	bhi.n	801dbcc <etharp_query+0x110>
 801dbbe:	4b5e      	ldr	r3, [pc, #376]	@ (801dd38 <etharp_query+0x27c>)
 801dbc0:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801dbc4:	4960      	ldr	r1, [pc, #384]	@ (801dd48 <etharp_query+0x28c>)
 801dbc6:	485e      	ldr	r0, [pc, #376]	@ (801dd40 <etharp_query+0x284>)
 801dbc8:	f003 fa7c 	bl	80210c4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801dbcc:	6a3b      	ldr	r3, [r7, #32]
 801dbce:	2b00      	cmp	r3, #0
 801dbd0:	d102      	bne.n	801dbd8 <etharp_query+0x11c>
 801dbd2:	687b      	ldr	r3, [r7, #4]
 801dbd4:	2b00      	cmp	r3, #0
 801dbd6:	d10c      	bne.n	801dbf2 <etharp_query+0x136>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801dbd8:	68b9      	ldr	r1, [r7, #8]
 801dbda:	68f8      	ldr	r0, [r7, #12]
 801dbdc:	f000 f978 	bl	801ded0 <etharp_request>
 801dbe0:	4603      	mov	r3, r0
 801dbe2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801dbe6:	687b      	ldr	r3, [r7, #4]
 801dbe8:	2b00      	cmp	r3, #0
 801dbea:	d102      	bne.n	801dbf2 <etharp_query+0x136>
      return result;
 801dbec:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801dbf0:	e09c      	b.n	801dd2c <etharp_query+0x270>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801dbf2:	687b      	ldr	r3, [r7, #4]
 801dbf4:	2b00      	cmp	r3, #0
 801dbf6:	d106      	bne.n	801dc06 <etharp_query+0x14a>
 801dbf8:	4b4f      	ldr	r3, [pc, #316]	@ (801dd38 <etharp_query+0x27c>)
 801dbfa:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801dbfe:	4953      	ldr	r1, [pc, #332]	@ (801dd4c <etharp_query+0x290>)
 801dc00:	484f      	ldr	r0, [pc, #316]	@ (801dd40 <etharp_query+0x284>)
 801dc02:	f003 fa5f 	bl	80210c4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801dc06:	7c7a      	ldrb	r2, [r7, #17]
 801dc08:	494e      	ldr	r1, [pc, #312]	@ (801dd44 <etharp_query+0x288>)
 801dc0a:	4613      	mov	r3, r2
 801dc0c:	005b      	lsls	r3, r3, #1
 801dc0e:	4413      	add	r3, r2
 801dc10:	00db      	lsls	r3, r3, #3
 801dc12:	440b      	add	r3, r1
 801dc14:	3314      	adds	r3, #20
 801dc16:	781b      	ldrb	r3, [r3, #0]
 801dc18:	2b01      	cmp	r3, #1
 801dc1a:	d917      	bls.n	801dc4c <etharp_query+0x190>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801dc1c:	4a4c      	ldr	r2, [pc, #304]	@ (801dd50 <etharp_query+0x294>)
 801dc1e:	7c7b      	ldrb	r3, [r7, #17]
 801dc20:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801dc22:	7c7a      	ldrb	r2, [r7, #17]
 801dc24:	4613      	mov	r3, r2
 801dc26:	005b      	lsls	r3, r3, #1
 801dc28:	4413      	add	r3, r2
 801dc2a:	00db      	lsls	r3, r3, #3
 801dc2c:	3308      	adds	r3, #8
 801dc2e:	4a45      	ldr	r2, [pc, #276]	@ (801dd44 <etharp_query+0x288>)
 801dc30:	4413      	add	r3, r2
 801dc32:	3304      	adds	r3, #4
 801dc34:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801dc38:	9200      	str	r2, [sp, #0]
 801dc3a:	697a      	ldr	r2, [r7, #20]
 801dc3c:	6879      	ldr	r1, [r7, #4]
 801dc3e:	68f8      	ldr	r0, [r7, #12]
 801dc40:	f001 fe2c 	bl	801f89c <ethernet_output>
 801dc44:	4603      	mov	r3, r0
 801dc46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801dc4a:	e06d      	b.n	801dd28 <etharp_query+0x26c>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801dc4c:	7c7a      	ldrb	r2, [r7, #17]
 801dc4e:	493d      	ldr	r1, [pc, #244]	@ (801dd44 <etharp_query+0x288>)
 801dc50:	4613      	mov	r3, r2
 801dc52:	005b      	lsls	r3, r3, #1
 801dc54:	4413      	add	r3, r2
 801dc56:	00db      	lsls	r3, r3, #3
 801dc58:	440b      	add	r3, r1
 801dc5a:	3314      	adds	r3, #20
 801dc5c:	781b      	ldrb	r3, [r3, #0]
 801dc5e:	2b01      	cmp	r3, #1
 801dc60:	d162      	bne.n	801dd28 <etharp_query+0x26c>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801dc62:	2300      	movs	r3, #0
 801dc64:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801dc66:	687b      	ldr	r3, [r7, #4]
 801dc68:	61fb      	str	r3, [r7, #28]
    while (p) {
 801dc6a:	e01c      	b.n	801dca6 <etharp_query+0x1ea>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801dc6c:	69fb      	ldr	r3, [r7, #28]
 801dc6e:	895a      	ldrh	r2, [r3, #10]
 801dc70:	69fb      	ldr	r3, [r7, #28]
 801dc72:	891b      	ldrh	r3, [r3, #8]
 801dc74:	429a      	cmp	r2, r3
 801dc76:	d10a      	bne.n	801dc8e <etharp_query+0x1d2>
 801dc78:	69fb      	ldr	r3, [r7, #28]
 801dc7a:	681b      	ldr	r3, [r3, #0]
 801dc7c:	2b00      	cmp	r3, #0
 801dc7e:	d006      	beq.n	801dc8e <etharp_query+0x1d2>
 801dc80:	4b2d      	ldr	r3, [pc, #180]	@ (801dd38 <etharp_query+0x27c>)
 801dc82:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801dc86:	4933      	ldr	r1, [pc, #204]	@ (801dd54 <etharp_query+0x298>)
 801dc88:	482d      	ldr	r0, [pc, #180]	@ (801dd40 <etharp_query+0x284>)
 801dc8a:	f003 fa1b 	bl	80210c4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801dc8e:	69fb      	ldr	r3, [r7, #28]
 801dc90:	7b1b      	ldrb	r3, [r3, #12]
 801dc92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801dc96:	2b00      	cmp	r3, #0
 801dc98:	d002      	beq.n	801dca0 <etharp_query+0x1e4>
        copy_needed = 1;
 801dc9a:	2301      	movs	r3, #1
 801dc9c:	61bb      	str	r3, [r7, #24]
        break;
 801dc9e:	e005      	b.n	801dcac <etharp_query+0x1f0>
      }
      p = p->next;
 801dca0:	69fb      	ldr	r3, [r7, #28]
 801dca2:	681b      	ldr	r3, [r3, #0]
 801dca4:	61fb      	str	r3, [r7, #28]
    while (p) {
 801dca6:	69fb      	ldr	r3, [r7, #28]
 801dca8:	2b00      	cmp	r3, #0
 801dcaa:	d1df      	bne.n	801dc6c <etharp_query+0x1b0>
    }
    if (copy_needed) {
 801dcac:	69bb      	ldr	r3, [r7, #24]
 801dcae:	2b00      	cmp	r3, #0
 801dcb0:	d007      	beq.n	801dcc2 <etharp_query+0x206>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801dcb2:	687a      	ldr	r2, [r7, #4]
 801dcb4:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801dcb8:	200e      	movs	r0, #14
 801dcba:	f7f7 fe07 	bl	80158cc <pbuf_clone>
 801dcbe:	61f8      	str	r0, [r7, #28]
 801dcc0:	e004      	b.n	801dccc <etharp_query+0x210>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801dcc2:	687b      	ldr	r3, [r7, #4]
 801dcc4:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801dcc6:	69f8      	ldr	r0, [r7, #28]
 801dcc8:	f7f7 fc1a 	bl	8015500 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801dccc:	69fb      	ldr	r3, [r7, #28]
 801dcce:	2b00      	cmp	r3, #0
 801dcd0:	d021      	beq.n	801dd16 <etharp_query+0x25a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801dcd2:	7c7a      	ldrb	r2, [r7, #17]
 801dcd4:	491b      	ldr	r1, [pc, #108]	@ (801dd44 <etharp_query+0x288>)
 801dcd6:	4613      	mov	r3, r2
 801dcd8:	005b      	lsls	r3, r3, #1
 801dcda:	4413      	add	r3, r2
 801dcdc:	00db      	lsls	r3, r3, #3
 801dcde:	440b      	add	r3, r1
 801dce0:	681b      	ldr	r3, [r3, #0]
 801dce2:	2b00      	cmp	r3, #0
 801dce4:	d00a      	beq.n	801dcfc <etharp_query+0x240>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801dce6:	7c7a      	ldrb	r2, [r7, #17]
 801dce8:	4916      	ldr	r1, [pc, #88]	@ (801dd44 <etharp_query+0x288>)
 801dcea:	4613      	mov	r3, r2
 801dcec:	005b      	lsls	r3, r3, #1
 801dcee:	4413      	add	r3, r2
 801dcf0:	00db      	lsls	r3, r3, #3
 801dcf2:	440b      	add	r3, r1
 801dcf4:	681b      	ldr	r3, [r3, #0]
 801dcf6:	4618      	mov	r0, r3
 801dcf8:	f7f7 fb44 	bl	8015384 <pbuf_free>
      }
      arp_table[i].q = p;
 801dcfc:	7c7a      	ldrb	r2, [r7, #17]
 801dcfe:	4911      	ldr	r1, [pc, #68]	@ (801dd44 <etharp_query+0x288>)
 801dd00:	4613      	mov	r3, r2
 801dd02:	005b      	lsls	r3, r3, #1
 801dd04:	4413      	add	r3, r2
 801dd06:	00db      	lsls	r3, r3, #3
 801dd08:	440b      	add	r3, r1
 801dd0a:	69fa      	ldr	r2, [r7, #28]
 801dd0c:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801dd0e:	2300      	movs	r3, #0
 801dd10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801dd14:	e008      	b.n	801dd28 <etharp_query+0x26c>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
 801dd16:	4b07      	ldr	r3, [pc, #28]	@ (801dd34 <etharp_query+0x278>)
 801dd18:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801dd1a:	3301      	adds	r3, #1
 801dd1c:	b29a      	uxth	r2, r3
 801dd1e:	4b05      	ldr	r3, [pc, #20]	@ (801dd34 <etharp_query+0x278>)
 801dd20:	849a      	strh	r2, [r3, #36]	@ 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801dd22:	23ff      	movs	r3, #255	@ 0xff
 801dd24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801dd28:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801dd2c:	4618      	mov	r0, r3
 801dd2e:	3728      	adds	r7, #40	@ 0x28
 801dd30:	46bd      	mov	sp, r7
 801dd32:	bd80      	pop	{r7, pc}
 801dd34:	20028318 	.word	0x20028318
 801dd38:	080261c0 	.word	0x080261c0
 801dd3c:	0802636c 	.word	0x0802636c
 801dd40:	08026238 	.word	0x08026238
 801dd44:	2002847c 	.word	0x2002847c
 801dd48:	0802637c 	.word	0x0802637c
 801dd4c:	08026360 	.word	0x08026360
 801dd50:	2002856c 	.word	0x2002856c
 801dd54:	080263a4 	.word	0x080263a4

0801dd58 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801dd58:	b580      	push	{r7, lr}
 801dd5a:	b08a      	sub	sp, #40	@ 0x28
 801dd5c:	af02      	add	r7, sp, #8
 801dd5e:	60f8      	str	r0, [r7, #12]
 801dd60:	60b9      	str	r1, [r7, #8]
 801dd62:	607a      	str	r2, [r7, #4]
 801dd64:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801dd66:	2300      	movs	r3, #0
 801dd68:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801dd6a:	68fb      	ldr	r3, [r7, #12]
 801dd6c:	2b00      	cmp	r3, #0
 801dd6e:	d106      	bne.n	801dd7e <etharp_raw+0x26>
 801dd70:	4b40      	ldr	r3, [pc, #256]	@ (801de74 <etharp_raw+0x11c>)
 801dd72:	f240 4257 	movw	r2, #1111	@ 0x457
 801dd76:	4940      	ldr	r1, [pc, #256]	@ (801de78 <etharp_raw+0x120>)
 801dd78:	4840      	ldr	r0, [pc, #256]	@ (801de7c <etharp_raw+0x124>)
 801dd7a:	f003 f9a3 	bl	80210c4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801dd7e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801dd82:	211c      	movs	r1, #28
 801dd84:	200e      	movs	r0, #14
 801dd86:	f7f6 ffcb 	bl	8014d20 <pbuf_alloc>
 801dd8a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801dd8c:	69bb      	ldr	r3, [r7, #24]
 801dd8e:	2b00      	cmp	r3, #0
 801dd90:	d108      	bne.n	801dda4 <etharp_raw+0x4c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
 801dd92:	4b3b      	ldr	r3, [pc, #236]	@ (801de80 <etharp_raw+0x128>)
 801dd94:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801dd96:	3301      	adds	r3, #1
 801dd98:	b29a      	uxth	r2, r3
 801dd9a:	4b39      	ldr	r3, [pc, #228]	@ (801de80 <etharp_raw+0x128>)
 801dd9c:	849a      	strh	r2, [r3, #36]	@ 0x24
    return ERR_MEM;
 801dd9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801dda2:	e063      	b.n	801de6c <etharp_raw+0x114>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801dda4:	69bb      	ldr	r3, [r7, #24]
 801dda6:	895b      	ldrh	r3, [r3, #10]
 801dda8:	2b1b      	cmp	r3, #27
 801ddaa:	d806      	bhi.n	801ddba <etharp_raw+0x62>
 801ddac:	4b31      	ldr	r3, [pc, #196]	@ (801de74 <etharp_raw+0x11c>)
 801ddae:	f240 4262 	movw	r2, #1122	@ 0x462
 801ddb2:	4934      	ldr	r1, [pc, #208]	@ (801de84 <etharp_raw+0x12c>)
 801ddb4:	4831      	ldr	r0, [pc, #196]	@ (801de7c <etharp_raw+0x124>)
 801ddb6:	f003 f985 	bl	80210c4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801ddba:	69bb      	ldr	r3, [r7, #24]
 801ddbc:	685b      	ldr	r3, [r3, #4]
 801ddbe:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801ddc0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801ddc2:	4618      	mov	r0, r3
 801ddc4:	f7f5 fb64 	bl	8013490 <lwip_htons>
 801ddc8:	4603      	mov	r3, r0
 801ddca:	461a      	mov	r2, r3
 801ddcc:	697b      	ldr	r3, [r7, #20]
 801ddce:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801ddd0:	68fb      	ldr	r3, [r7, #12]
 801ddd2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801ddd6:	2b06      	cmp	r3, #6
 801ddd8:	d006      	beq.n	801dde8 <etharp_raw+0x90>
 801ddda:	4b26      	ldr	r3, [pc, #152]	@ (801de74 <etharp_raw+0x11c>)
 801dddc:	f240 4269 	movw	r2, #1129	@ 0x469
 801dde0:	4929      	ldr	r1, [pc, #164]	@ (801de88 <etharp_raw+0x130>)
 801dde2:	4826      	ldr	r0, [pc, #152]	@ (801de7c <etharp_raw+0x124>)
 801dde4:	f003 f96e 	bl	80210c4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801dde8:	697b      	ldr	r3, [r7, #20]
 801ddea:	3308      	adds	r3, #8
 801ddec:	2206      	movs	r2, #6
 801ddee:	6839      	ldr	r1, [r7, #0]
 801ddf0:	4618      	mov	r0, r3
 801ddf2:	f003 fb8c 	bl	802150e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801ddf6:	697b      	ldr	r3, [r7, #20]
 801ddf8:	3312      	adds	r3, #18
 801ddfa:	2206      	movs	r2, #6
 801ddfc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801ddfe:	4618      	mov	r0, r3
 801de00:	f003 fb85 	bl	802150e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801de04:	697b      	ldr	r3, [r7, #20]
 801de06:	330e      	adds	r3, #14
 801de08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801de0a:	6812      	ldr	r2, [r2, #0]
 801de0c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801de0e:	697b      	ldr	r3, [r7, #20]
 801de10:	3318      	adds	r3, #24
 801de12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801de14:	6812      	ldr	r2, [r2, #0]
 801de16:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801de18:	697b      	ldr	r3, [r7, #20]
 801de1a:	2200      	movs	r2, #0
 801de1c:	701a      	strb	r2, [r3, #0]
 801de1e:	2200      	movs	r2, #0
 801de20:	f042 0201 	orr.w	r2, r2, #1
 801de24:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801de26:	697b      	ldr	r3, [r7, #20]
 801de28:	2200      	movs	r2, #0
 801de2a:	f042 0208 	orr.w	r2, r2, #8
 801de2e:	709a      	strb	r2, [r3, #2]
 801de30:	2200      	movs	r2, #0
 801de32:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801de34:	697b      	ldr	r3, [r7, #20]
 801de36:	2206      	movs	r2, #6
 801de38:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801de3a:	697b      	ldr	r3, [r7, #20]
 801de3c:	2204      	movs	r2, #4
 801de3e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801de40:	f640 0306 	movw	r3, #2054	@ 0x806
 801de44:	9300      	str	r3, [sp, #0]
 801de46:	687b      	ldr	r3, [r7, #4]
 801de48:	68ba      	ldr	r2, [r7, #8]
 801de4a:	69b9      	ldr	r1, [r7, #24]
 801de4c:	68f8      	ldr	r0, [r7, #12]
 801de4e:	f001 fd25 	bl	801f89c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 801de52:	4b0b      	ldr	r3, [pc, #44]	@ (801de80 <etharp_raw+0x128>)
 801de54:	8b1b      	ldrh	r3, [r3, #24]
 801de56:	3301      	adds	r3, #1
 801de58:	b29a      	uxth	r2, r3
 801de5a:	4b09      	ldr	r3, [pc, #36]	@ (801de80 <etharp_raw+0x128>)
 801de5c:	831a      	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
 801de5e:	69b8      	ldr	r0, [r7, #24]
 801de60:	f7f7 fa90 	bl	8015384 <pbuf_free>
  p = NULL;
 801de64:	2300      	movs	r3, #0
 801de66:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801de68:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801de6c:	4618      	mov	r0, r3
 801de6e:	3720      	adds	r7, #32
 801de70:	46bd      	mov	sp, r7
 801de72:	bd80      	pop	{r7, pc}
 801de74:	080261c0 	.word	0x080261c0
 801de78:	08026310 	.word	0x08026310
 801de7c:	08026238 	.word	0x08026238
 801de80:	20028318 	.word	0x20028318
 801de84:	080263c0 	.word	0x080263c0
 801de88:	080263f4 	.word	0x080263f4

0801de8c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801de8c:	b580      	push	{r7, lr}
 801de8e:	b088      	sub	sp, #32
 801de90:	af04      	add	r7, sp, #16
 801de92:	60f8      	str	r0, [r7, #12]
 801de94:	60b9      	str	r1, [r7, #8]
 801de96:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801de98:	68fb      	ldr	r3, [r7, #12]
 801de9a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801de9e:	68fb      	ldr	r3, [r7, #12]
 801dea0:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801dea4:	68fb      	ldr	r3, [r7, #12]
 801dea6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801dea8:	2201      	movs	r2, #1
 801deaa:	9203      	str	r2, [sp, #12]
 801deac:	68ba      	ldr	r2, [r7, #8]
 801deae:	9202      	str	r2, [sp, #8]
 801deb0:	4a06      	ldr	r2, [pc, #24]	@ (801decc <etharp_request_dst+0x40>)
 801deb2:	9201      	str	r2, [sp, #4]
 801deb4:	9300      	str	r3, [sp, #0]
 801deb6:	4603      	mov	r3, r0
 801deb8:	687a      	ldr	r2, [r7, #4]
 801deba:	68f8      	ldr	r0, [r7, #12]
 801debc:	f7ff ff4c 	bl	801dd58 <etharp_raw>
 801dec0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801dec2:	4618      	mov	r0, r3
 801dec4:	3710      	adds	r7, #16
 801dec6:	46bd      	mov	sp, r7
 801dec8:	bd80      	pop	{r7, pc}
 801deca:	bf00      	nop
 801decc:	08027270 	.word	0x08027270

0801ded0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801ded0:	b580      	push	{r7, lr}
 801ded2:	b082      	sub	sp, #8
 801ded4:	af00      	add	r7, sp, #0
 801ded6:	6078      	str	r0, [r7, #4]
 801ded8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801deda:	4a05      	ldr	r2, [pc, #20]	@ (801def0 <etharp_request+0x20>)
 801dedc:	6839      	ldr	r1, [r7, #0]
 801dede:	6878      	ldr	r0, [r7, #4]
 801dee0:	f7ff ffd4 	bl	801de8c <etharp_request_dst>
 801dee4:	4603      	mov	r3, r0
}
 801dee6:	4618      	mov	r0, r3
 801dee8:	3708      	adds	r7, #8
 801deea:	46bd      	mov	sp, r7
 801deec:	bd80      	pop	{r7, pc}
 801deee:	bf00      	nop
 801def0:	08027268 	.word	0x08027268

0801def4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801def4:	b580      	push	{r7, lr}
 801def6:	b08e      	sub	sp, #56	@ 0x38
 801def8:	af04      	add	r7, sp, #16
 801defa:	6078      	str	r0, [r7, #4]
 801defc:	6039      	str	r1, [r7, #0]
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
 801defe:	4ba5      	ldr	r3, [pc, #660]	@ (801e194 <icmp_input+0x2a0>)
 801df00:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801df04:	3301      	adds	r3, #1
 801df06:	b29a      	uxth	r2, r3
 801df08:	4ba2      	ldr	r3, [pc, #648]	@ (801e194 <icmp_input+0x2a0>)
 801df0a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801df0e:	4ba2      	ldr	r3, [pc, #648]	@ (801e198 <icmp_input+0x2a4>)
 801df10:	689b      	ldr	r3, [r3, #8]
 801df12:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801df14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801df16:	781b      	ldrb	r3, [r3, #0]
 801df18:	f003 030f 	and.w	r3, r3, #15
 801df1c:	b2db      	uxtb	r3, r3
 801df1e:	009b      	lsls	r3, r3, #2
 801df20:	b2db      	uxtb	r3, r3
 801df22:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801df24:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801df26:	2b13      	cmp	r3, #19
 801df28:	d805      	bhi.n	801df36 <icmp_input+0x42>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
 801df2a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801df2c:	4619      	mov	r1, r3
 801df2e:	489b      	ldr	r0, [pc, #620]	@ (801e19c <icmp_input+0x2a8>)
 801df30:	f003 f8c8 	bl	80210c4 <iprintf>
    goto lenerr;
 801df34:	e122      	b.n	801e17c <icmp_input+0x288>
  }
  if (p->len < sizeof(u16_t) * 2) {
 801df36:	687b      	ldr	r3, [r7, #4]
 801df38:	895b      	ldrh	r3, [r3, #10]
 801df3a:	2b03      	cmp	r3, #3
 801df3c:	d806      	bhi.n	801df4c <icmp_input+0x58>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
 801df3e:	687b      	ldr	r3, [r7, #4]
 801df40:	891b      	ldrh	r3, [r3, #8]
 801df42:	4619      	mov	r1, r3
 801df44:	4896      	ldr	r0, [pc, #600]	@ (801e1a0 <icmp_input+0x2ac>)
 801df46:	f003 f8bd 	bl	80210c4 <iprintf>
    goto lenerr;
 801df4a:	e117      	b.n	801e17c <icmp_input+0x288>
  }

  type = *((u8_t *)p->payload);
 801df4c:	687b      	ldr	r3, [r7, #4]
 801df4e:	685b      	ldr	r3, [r3, #4]
 801df50:	781b      	ldrb	r3, [r3, #0]
 801df52:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 801df56:	687b      	ldr	r3, [r7, #4]
 801df58:	685b      	ldr	r3, [r3, #4]
 801df5a:	785b      	ldrb	r3, [r3, #1]
 801df5c:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801df60:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801df64:	2b00      	cmp	r3, #0
 801df66:	f000 8102 	beq.w	801e16e <icmp_input+0x27a>
 801df6a:	2b08      	cmp	r3, #8
 801df6c:	f040 80e6 	bne.w	801e13c <icmp_input+0x248>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801df70:	4b8c      	ldr	r3, [pc, #560]	@ (801e1a4 <icmp_input+0x2b0>)
 801df72:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801df74:	4b88      	ldr	r3, [pc, #544]	@ (801e198 <icmp_input+0x2a4>)
 801df76:	695b      	ldr	r3, [r3, #20]
 801df78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801df7c:	2be0      	cmp	r3, #224	@ 0xe0
 801df7e:	d103      	bne.n	801df88 <icmp_input+0x94>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_MULTICAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
 801df80:	4889      	ldr	r0, [pc, #548]	@ (801e1a8 <icmp_input+0x2b4>)
 801df82:	f003 f90f 	bl	80211a4 <puts>
        goto icmperr;
 801df86:	e12d      	b.n	801e1e4 <icmp_input+0x2f0>
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801df88:	4b83      	ldr	r3, [pc, #524]	@ (801e198 <icmp_input+0x2a4>)
 801df8a:	695b      	ldr	r3, [r3, #20]
 801df8c:	4a82      	ldr	r2, [pc, #520]	@ (801e198 <icmp_input+0x2a4>)
 801df8e:	6812      	ldr	r2, [r2, #0]
 801df90:	4611      	mov	r1, r2
 801df92:	4618      	mov	r0, r3
 801df94:	f000 fd14 	bl	801e9c0 <ip4_addr_isbroadcast_u32>
 801df98:	4603      	mov	r3, r0
 801df9a:	2b00      	cmp	r3, #0
 801df9c:	d003      	beq.n	801dfa6 <icmp_input+0xb2>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_BROADCAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
 801df9e:	4883      	ldr	r0, [pc, #524]	@ (801e1ac <icmp_input+0x2b8>)
 801dfa0:	f003 f900 	bl	80211a4 <puts>
        goto icmperr;
 801dfa4:	e11e      	b.n	801e1e4 <icmp_input+0x2f0>
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
 801dfa6:	4882      	ldr	r0, [pc, #520]	@ (801e1b0 <icmp_input+0x2bc>)
 801dfa8:	f003 f8fc 	bl	80211a4 <puts>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801dfac:	687b      	ldr	r3, [r7, #4]
 801dfae:	891b      	ldrh	r3, [r3, #8]
 801dfb0:	2b07      	cmp	r3, #7
 801dfb2:	d803      	bhi.n	801dfbc <icmp_input+0xc8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
 801dfb4:	487f      	ldr	r0, [pc, #508]	@ (801e1b4 <icmp_input+0x2c0>)
 801dfb6:	f003 f8f5 	bl	80211a4 <puts>
        goto lenerr;
 801dfba:	e0df      	b.n	801e17c <icmp_input+0x288>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801dfbc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801dfbe:	330e      	adds	r3, #14
 801dfc0:	4619      	mov	r1, r3
 801dfc2:	6878      	ldr	r0, [r7, #4]
 801dfc4:	f7f7 f940 	bl	8015248 <pbuf_add_header>
 801dfc8:	4603      	mov	r3, r0
 801dfca:	2b00      	cmp	r3, #0
 801dfcc:	d057      	beq.n	801e07e <icmp_input+0x18a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801dfce:	687b      	ldr	r3, [r7, #4]
 801dfd0:	891a      	ldrh	r2, [r3, #8]
 801dfd2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801dfd4:	4413      	add	r3, r2
 801dfd6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801dfd8:	687b      	ldr	r3, [r7, #4]
 801dfda:	891b      	ldrh	r3, [r3, #8]
 801dfdc:	8b7a      	ldrh	r2, [r7, #26]
 801dfde:	429a      	cmp	r2, r3
 801dfe0:	d203      	bcs.n	801dfea <icmp_input+0xf6>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
 801dfe2:	4875      	ldr	r0, [pc, #468]	@ (801e1b8 <icmp_input+0x2c4>)
 801dfe4:	f003 f8de 	bl	80211a4 <puts>
          goto icmperr;
 801dfe8:	e0fc      	b.n	801e1e4 <icmp_input+0x2f0>
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801dfea:	8b7b      	ldrh	r3, [r7, #26]
 801dfec:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801dff0:	4619      	mov	r1, r3
 801dff2:	200e      	movs	r0, #14
 801dff4:	f7f6 fe94 	bl	8014d20 <pbuf_alloc>
 801dff8:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801dffa:	697b      	ldr	r3, [r7, #20]
 801dffc:	2b00      	cmp	r3, #0
 801dffe:	d103      	bne.n	801e008 <icmp_input+0x114>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
 801e000:	486e      	ldr	r0, [pc, #440]	@ (801e1bc <icmp_input+0x2c8>)
 801e002:	f003 f8cf 	bl	80211a4 <puts>
          goto icmperr;
 801e006:	e0ed      	b.n	801e1e4 <icmp_input+0x2f0>
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801e008:	697b      	ldr	r3, [r7, #20]
 801e00a:	895b      	ldrh	r3, [r3, #10]
 801e00c:	461a      	mov	r2, r3
 801e00e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801e010:	3308      	adds	r3, #8
 801e012:	429a      	cmp	r2, r3
 801e014:	d206      	bcs.n	801e024 <icmp_input+0x130>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
 801e016:	486a      	ldr	r0, [pc, #424]	@ (801e1c0 <icmp_input+0x2cc>)
 801e018:	f003 f854 	bl	80210c4 <iprintf>
          pbuf_free(r);
 801e01c:	6978      	ldr	r0, [r7, #20]
 801e01e:	f7f7 f9b1 	bl	8015384 <pbuf_free>
          goto icmperr;
 801e022:	e0df      	b.n	801e1e4 <icmp_input+0x2f0>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801e024:	697b      	ldr	r3, [r7, #20]
 801e026:	685b      	ldr	r3, [r3, #4]
 801e028:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801e02a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801e02c:	4618      	mov	r0, r3
 801e02e:	f003 fa6e 	bl	802150e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801e032:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801e034:	4619      	mov	r1, r3
 801e036:	6978      	ldr	r0, [r7, #20]
 801e038:	f7f7 f916 	bl	8015268 <pbuf_remove_header>
 801e03c:	4603      	mov	r3, r0
 801e03e:	2b00      	cmp	r3, #0
 801e040:	d009      	beq.n	801e056 <icmp_input+0x162>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801e042:	4b60      	ldr	r3, [pc, #384]	@ (801e1c4 <icmp_input+0x2d0>)
 801e044:	22b6      	movs	r2, #182	@ 0xb6
 801e046:	4960      	ldr	r1, [pc, #384]	@ (801e1c8 <icmp_input+0x2d4>)
 801e048:	4860      	ldr	r0, [pc, #384]	@ (801e1cc <icmp_input+0x2d8>)
 801e04a:	f003 f83b 	bl	80210c4 <iprintf>
          pbuf_free(r);
 801e04e:	6978      	ldr	r0, [r7, #20]
 801e050:	f7f7 f998 	bl	8015384 <pbuf_free>
          goto icmperr;
 801e054:	e0c6      	b.n	801e1e4 <icmp_input+0x2f0>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801e056:	6879      	ldr	r1, [r7, #4]
 801e058:	6978      	ldr	r0, [r7, #20]
 801e05a:	f7f7 fae7 	bl	801562c <pbuf_copy>
 801e05e:	4603      	mov	r3, r0
 801e060:	2b00      	cmp	r3, #0
 801e062:	d006      	beq.n	801e072 <icmp_input+0x17e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
 801e064:	485a      	ldr	r0, [pc, #360]	@ (801e1d0 <icmp_input+0x2dc>)
 801e066:	f003 f82d 	bl	80210c4 <iprintf>
          pbuf_free(r);
 801e06a:	6978      	ldr	r0, [r7, #20]
 801e06c:	f7f7 f98a 	bl	8015384 <pbuf_free>
          goto icmperr;
 801e070:	e0b8      	b.n	801e1e4 <icmp_input+0x2f0>
        }
        /* free the original p */
        pbuf_free(p);
 801e072:	6878      	ldr	r0, [r7, #4]
 801e074:	f7f7 f986 	bl	8015384 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801e078:	697b      	ldr	r3, [r7, #20]
 801e07a:	607b      	str	r3, [r7, #4]
 801e07c:	e00f      	b.n	801e09e <icmp_input+0x1aa>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801e07e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801e080:	330e      	adds	r3, #14
 801e082:	4619      	mov	r1, r3
 801e084:	6878      	ldr	r0, [r7, #4]
 801e086:	f7f7 f8ef 	bl	8015268 <pbuf_remove_header>
 801e08a:	4603      	mov	r3, r0
 801e08c:	2b00      	cmp	r3, #0
 801e08e:	d006      	beq.n	801e09e <icmp_input+0x1aa>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801e090:	4b4c      	ldr	r3, [pc, #304]	@ (801e1c4 <icmp_input+0x2d0>)
 801e092:	22c7      	movs	r2, #199	@ 0xc7
 801e094:	494f      	ldr	r1, [pc, #316]	@ (801e1d4 <icmp_input+0x2e0>)
 801e096:	484d      	ldr	r0, [pc, #308]	@ (801e1cc <icmp_input+0x2d8>)
 801e098:	f003 f814 	bl	80210c4 <iprintf>
          goto icmperr;
 801e09c:	e0a2      	b.n	801e1e4 <icmp_input+0x2f0>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801e09e:	687b      	ldr	r3, [r7, #4]
 801e0a0:	685b      	ldr	r3, [r3, #4]
 801e0a2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801e0a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801e0a6:	4619      	mov	r1, r3
 801e0a8:	6878      	ldr	r0, [r7, #4]
 801e0aa:	f7f7 f8cd 	bl	8015248 <pbuf_add_header>
 801e0ae:	4603      	mov	r3, r0
 801e0b0:	2b00      	cmp	r3, #0
 801e0b2:	d003      	beq.n	801e0bc <icmp_input+0x1c8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
 801e0b4:	4848      	ldr	r0, [pc, #288]	@ (801e1d8 <icmp_input+0x2e4>)
 801e0b6:	f003 f805 	bl	80210c4 <iprintf>
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801e0ba:	e05a      	b.n	801e172 <icmp_input+0x27e>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801e0bc:	687b      	ldr	r3, [r7, #4]
 801e0be:	685b      	ldr	r3, [r3, #4]
 801e0c0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801e0c2:	69fb      	ldr	r3, [r7, #28]
 801e0c4:	681a      	ldr	r2, [r3, #0]
 801e0c6:	68fb      	ldr	r3, [r7, #12]
 801e0c8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801e0ca:	4b33      	ldr	r3, [pc, #204]	@ (801e198 <icmp_input+0x2a4>)
 801e0cc:	691a      	ldr	r2, [r3, #16]
 801e0ce:	68fb      	ldr	r3, [r7, #12]
 801e0d0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801e0d2:	693b      	ldr	r3, [r7, #16]
 801e0d4:	2200      	movs	r2, #0
 801e0d6:	701a      	strb	r2, [r3, #0]
        iecho->chksum = 0;
 801e0d8:	693b      	ldr	r3, [r7, #16]
 801e0da:	2200      	movs	r2, #0
 801e0dc:	709a      	strb	r2, [r3, #2]
 801e0de:	2200      	movs	r2, #0
 801e0e0:	70da      	strb	r2, [r3, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801e0e2:	68fb      	ldr	r3, [r7, #12]
 801e0e4:	22ff      	movs	r2, #255	@ 0xff
 801e0e6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801e0e8:	68fb      	ldr	r3, [r7, #12]
 801e0ea:	2200      	movs	r2, #0
 801e0ec:	729a      	strb	r2, [r3, #10]
 801e0ee:	2200      	movs	r2, #0
 801e0f0:	72da      	strb	r2, [r3, #11]
        ICMP_STATS_INC(icmp.xmit);
 801e0f2:	4b28      	ldr	r3, [pc, #160]	@ (801e194 <icmp_input+0x2a0>)
 801e0f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801e0f8:	3301      	adds	r3, #1
 801e0fa:	b29a      	uxth	r2, r3
 801e0fc:	4b25      	ldr	r3, [pc, #148]	@ (801e194 <icmp_input+0x2a0>)
 801e0fe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801e102:	683b      	ldr	r3, [r7, #0]
 801e104:	9302      	str	r3, [sp, #8]
 801e106:	2301      	movs	r3, #1
 801e108:	9301      	str	r3, [sp, #4]
 801e10a:	2300      	movs	r3, #0
 801e10c:	9300      	str	r3, [sp, #0]
 801e10e:	23ff      	movs	r3, #255	@ 0xff
 801e110:	2200      	movs	r2, #0
 801e112:	69f9      	ldr	r1, [r7, #28]
 801e114:	6878      	ldr	r0, [r7, #4]
 801e116:	f000 fb61 	bl	801e7dc <ip4_output_if>
 801e11a:	4603      	mov	r3, r0
 801e11c:	72fb      	strb	r3, [r7, #11]
        if (ret != ERR_OK) {
 801e11e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801e122:	2b00      	cmp	r3, #0
 801e124:	d025      	beq.n	801e172 <icmp_input+0x27e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
 801e126:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801e12a:	4618      	mov	r0, r3
 801e12c:	f7f4 ff06 	bl	8012f3c <lwip_strerr>
 801e130:	4603      	mov	r3, r0
 801e132:	4619      	mov	r1, r3
 801e134:	4829      	ldr	r0, [pc, #164]	@ (801e1dc <icmp_input+0x2e8>)
 801e136:	f002 ffc5 	bl	80210c4 <iprintf>
      break;
 801e13a:	e01a      	b.n	801e172 <icmp_input+0x27e>
      } else if (type == ICMP_AM) {
        MIB2_STATS_INC(mib2.icmpinaddrmasks);
      } else if (type == ICMP_AMR) {
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
 801e13c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801e140:	f897 2020 	ldrb.w	r2, [r7, #32]
 801e144:	4619      	mov	r1, r3
 801e146:	4826      	ldr	r0, [pc, #152]	@ (801e1e0 <icmp_input+0x2ec>)
 801e148:	f002 ffbc 	bl	80210c4 <iprintf>
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
 801e14c:	4b11      	ldr	r3, [pc, #68]	@ (801e194 <icmp_input+0x2a0>)
 801e14e:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 801e152:	3301      	adds	r3, #1
 801e154:	b29a      	uxth	r2, r3
 801e156:	4b0f      	ldr	r3, [pc, #60]	@ (801e194 <icmp_input+0x2a0>)
 801e158:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
      ICMP_STATS_INC(icmp.drop);
 801e15c:	4b0d      	ldr	r3, [pc, #52]	@ (801e194 <icmp_input+0x2a0>)
 801e15e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801e162:	3301      	adds	r3, #1
 801e164:	b29a      	uxth	r2, r3
 801e166:	4b0b      	ldr	r3, [pc, #44]	@ (801e194 <icmp_input+0x2a0>)
 801e168:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
 801e16c:	e002      	b.n	801e174 <icmp_input+0x280>
      break;
 801e16e:	bf00      	nop
 801e170:	e000      	b.n	801e174 <icmp_input+0x280>
      break;
 801e172:	bf00      	nop
  }
  pbuf_free(p);
 801e174:	6878      	ldr	r0, [r7, #4]
 801e176:	f7f7 f905 	bl	8015384 <pbuf_free>
  return;
 801e17a:	e03f      	b.n	801e1fc <icmp_input+0x308>
lenerr:
  pbuf_free(p);
 801e17c:	6878      	ldr	r0, [r7, #4]
 801e17e:	f7f7 f901 	bl	8015384 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 801e182:	4b04      	ldr	r3, [pc, #16]	@ (801e194 <icmp_input+0x2a0>)
 801e184:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801e188:	3301      	adds	r3, #1
 801e18a:	b29a      	uxth	r2, r3
 801e18c:	4b01      	ldr	r3, [pc, #4]	@ (801e194 <icmp_input+0x2a0>)
 801e18e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801e192:	e033      	b.n	801e1fc <icmp_input+0x308>
 801e194:	20028318 	.word	0x20028318
 801e198:	2001f878 	.word	0x2001f878
 801e19c:	08026438 	.word	0x08026438
 801e1a0:	0802646c 	.word	0x0802646c
 801e1a4:	2001f88c 	.word	0x2001f88c
 801e1a8:	0802649c 	.word	0x0802649c
 801e1ac:	080264c8 	.word	0x080264c8
 801e1b0:	080264f4 	.word	0x080264f4
 801e1b4:	08026508 	.word	0x08026508
 801e1b8:	0802652c 	.word	0x0802652c
 801e1bc:	08026568 	.word	0x08026568
 801e1c0:	08026590 	.word	0x08026590
 801e1c4:	080265b8 	.word	0x080265b8
 801e1c8:	080265f0 	.word	0x080265f0
 801e1cc:	08026628 	.word	0x08026628
 801e1d0:	08026650 	.word	0x08026650
 801e1d4:	08026678 	.word	0x08026678
 801e1d8:	080266ac 	.word	0x080266ac
 801e1dc:	080266d0 	.word	0x080266d0
 801e1e0:	08026700 	.word	0x08026700
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801e1e4:	6878      	ldr	r0, [r7, #4]
 801e1e6:	f7f7 f8cd 	bl	8015384 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 801e1ea:	4b06      	ldr	r3, [pc, #24]	@ (801e204 <icmp_input+0x310>)
 801e1ec:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 801e1f0:	3301      	adds	r3, #1
 801e1f2:	b29a      	uxth	r2, r3
 801e1f4:	4b03      	ldr	r3, [pc, #12]	@ (801e204 <icmp_input+0x310>)
 801e1f6:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801e1fa:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801e1fc:	3728      	adds	r7, #40	@ 0x28
 801e1fe:	46bd      	mov	sp, r7
 801e200:	bd80      	pop	{r7, pc}
 801e202:	bf00      	nop
 801e204:	20028318 	.word	0x20028318

0801e208 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801e208:	b580      	push	{r7, lr}
 801e20a:	b082      	sub	sp, #8
 801e20c:	af00      	add	r7, sp, #0
 801e20e:	6078      	str	r0, [r7, #4]
 801e210:	460b      	mov	r3, r1
 801e212:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801e214:	78fb      	ldrb	r3, [r7, #3]
 801e216:	461a      	mov	r2, r3
 801e218:	2103      	movs	r1, #3
 801e21a:	6878      	ldr	r0, [r7, #4]
 801e21c:	f000 f814 	bl	801e248 <icmp_send_response>
}
 801e220:	bf00      	nop
 801e222:	3708      	adds	r7, #8
 801e224:	46bd      	mov	sp, r7
 801e226:	bd80      	pop	{r7, pc}

0801e228 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801e228:	b580      	push	{r7, lr}
 801e22a:	b082      	sub	sp, #8
 801e22c:	af00      	add	r7, sp, #0
 801e22e:	6078      	str	r0, [r7, #4]
 801e230:	460b      	mov	r3, r1
 801e232:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801e234:	78fb      	ldrb	r3, [r7, #3]
 801e236:	461a      	mov	r2, r3
 801e238:	210b      	movs	r1, #11
 801e23a:	6878      	ldr	r0, [r7, #4]
 801e23c:	f000 f804 	bl	801e248 <icmp_send_response>
}
 801e240:	bf00      	nop
 801e242:	3708      	adds	r7, #8
 801e244:	46bd      	mov	sp, r7
 801e246:	bd80      	pop	{r7, pc}

0801e248 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801e248:	b580      	push	{r7, lr}
 801e24a:	b08c      	sub	sp, #48	@ 0x30
 801e24c:	af04      	add	r7, sp, #16
 801e24e:	6078      	str	r0, [r7, #4]
 801e250:	460b      	mov	r3, r1
 801e252:	70fb      	strb	r3, [r7, #3]
 801e254:	4613      	mov	r3, r2
 801e256:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801e258:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801e25c:	2124      	movs	r1, #36	@ 0x24
 801e25e:	2022      	movs	r0, #34	@ 0x22
 801e260:	f7f6 fd5e 	bl	8014d20 <pbuf_alloc>
 801e264:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801e266:	69fb      	ldr	r3, [r7, #28]
 801e268:	2b00      	cmp	r3, #0
 801e26a:	d103      	bne.n	801e274 <icmp_send_response+0x2c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
 801e26c:	4848      	ldr	r0, [pc, #288]	@ (801e390 <icmp_send_response+0x148>)
 801e26e:	f002 ff99 	bl	80211a4 <puts>
 801e272:	e08a      	b.n	801e38a <icmp_send_response+0x142>
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801e274:	69fb      	ldr	r3, [r7, #28]
 801e276:	895b      	ldrh	r3, [r3, #10]
 801e278:	2b23      	cmp	r3, #35	@ 0x23
 801e27a:	d806      	bhi.n	801e28a <icmp_send_response+0x42>
 801e27c:	4b45      	ldr	r3, [pc, #276]	@ (801e394 <icmp_send_response+0x14c>)
 801e27e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801e282:	4945      	ldr	r1, [pc, #276]	@ (801e398 <icmp_send_response+0x150>)
 801e284:	4845      	ldr	r0, [pc, #276]	@ (801e39c <icmp_send_response+0x154>)
 801e286:	f002 ff1d 	bl	80210c4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801e28a:	687b      	ldr	r3, [r7, #4]
 801e28c:	685b      	ldr	r3, [r3, #4]
 801e28e:	61bb      	str	r3, [r7, #24]
  LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded from "));
 801e290:	4843      	ldr	r0, [pc, #268]	@ (801e3a0 <icmp_send_response+0x158>)
 801e292:	f002 ff17 	bl	80210c4 <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
 801e296:	69bb      	ldr	r3, [r7, #24]
 801e298:	68db      	ldr	r3, [r3, #12]
 801e29a:	b2db      	uxtb	r3, r3
 801e29c:	4619      	mov	r1, r3
 801e29e:	69bb      	ldr	r3, [r7, #24]
 801e2a0:	68db      	ldr	r3, [r3, #12]
 801e2a2:	0a1b      	lsrs	r3, r3, #8
 801e2a4:	b2db      	uxtb	r3, r3
 801e2a6:	461a      	mov	r2, r3
 801e2a8:	69bb      	ldr	r3, [r7, #24]
 801e2aa:	68db      	ldr	r3, [r3, #12]
 801e2ac:	0c1b      	lsrs	r3, r3, #16
 801e2ae:	b2db      	uxtb	r3, r3
 801e2b0:	4618      	mov	r0, r3
 801e2b2:	69bb      	ldr	r3, [r7, #24]
 801e2b4:	68db      	ldr	r3, [r3, #12]
 801e2b6:	0e1b      	lsrs	r3, r3, #24
 801e2b8:	b2db      	uxtb	r3, r3
 801e2ba:	9300      	str	r3, [sp, #0]
 801e2bc:	4603      	mov	r3, r0
 801e2be:	4839      	ldr	r0, [pc, #228]	@ (801e3a4 <icmp_send_response+0x15c>)
 801e2c0:	f002 ff00 	bl	80210c4 <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
 801e2c4:	4838      	ldr	r0, [pc, #224]	@ (801e3a8 <icmp_send_response+0x160>)
 801e2c6:	f002 fefd 	bl	80210c4 <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
 801e2ca:	69bb      	ldr	r3, [r7, #24]
 801e2cc:	691b      	ldr	r3, [r3, #16]
 801e2ce:	b2db      	uxtb	r3, r3
 801e2d0:	4619      	mov	r1, r3
 801e2d2:	69bb      	ldr	r3, [r7, #24]
 801e2d4:	691b      	ldr	r3, [r3, #16]
 801e2d6:	0a1b      	lsrs	r3, r3, #8
 801e2d8:	b2db      	uxtb	r3, r3
 801e2da:	461a      	mov	r2, r3
 801e2dc:	69bb      	ldr	r3, [r7, #24]
 801e2de:	691b      	ldr	r3, [r3, #16]
 801e2e0:	0c1b      	lsrs	r3, r3, #16
 801e2e2:	b2db      	uxtb	r3, r3
 801e2e4:	4618      	mov	r0, r3
 801e2e6:	69bb      	ldr	r3, [r7, #24]
 801e2e8:	691b      	ldr	r3, [r3, #16]
 801e2ea:	0e1b      	lsrs	r3, r3, #24
 801e2ec:	b2db      	uxtb	r3, r3
 801e2ee:	9300      	str	r3, [sp, #0]
 801e2f0:	4603      	mov	r3, r0
 801e2f2:	482c      	ldr	r0, [pc, #176]	@ (801e3a4 <icmp_send_response+0x15c>)
 801e2f4:	f002 fee6 	bl	80210c4 <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));
 801e2f8:	200a      	movs	r0, #10
 801e2fa:	f002 fef5 	bl	80210e8 <putchar>

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801e2fe:	69fb      	ldr	r3, [r7, #28]
 801e300:	685b      	ldr	r3, [r3, #4]
 801e302:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801e304:	697b      	ldr	r3, [r7, #20]
 801e306:	78fa      	ldrb	r2, [r7, #3]
 801e308:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801e30a:	697b      	ldr	r3, [r7, #20]
 801e30c:	78ba      	ldrb	r2, [r7, #2]
 801e30e:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801e310:	697b      	ldr	r3, [r7, #20]
 801e312:	2200      	movs	r2, #0
 801e314:	711a      	strb	r2, [r3, #4]
 801e316:	2200      	movs	r2, #0
 801e318:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801e31a:	697b      	ldr	r3, [r7, #20]
 801e31c:	2200      	movs	r2, #0
 801e31e:	719a      	strb	r2, [r3, #6]
 801e320:	2200      	movs	r2, #0
 801e322:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801e324:	69fb      	ldr	r3, [r7, #28]
 801e326:	685b      	ldr	r3, [r3, #4]
 801e328:	f103 0008 	add.w	r0, r3, #8
 801e32c:	687b      	ldr	r3, [r7, #4]
 801e32e:	685b      	ldr	r3, [r3, #4]
 801e330:	221c      	movs	r2, #28
 801e332:	4619      	mov	r1, r3
 801e334:	f003 f8eb 	bl	802150e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801e338:	69bb      	ldr	r3, [r7, #24]
 801e33a:	68db      	ldr	r3, [r3, #12]
 801e33c:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801e33e:	f107 030c 	add.w	r3, r7, #12
 801e342:	4618      	mov	r0, r3
 801e344:	f000 f834 	bl	801e3b0 <ip4_route>
 801e348:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801e34a:	693b      	ldr	r3, [r7, #16]
 801e34c:	2b00      	cmp	r3, #0
 801e34e:	d019      	beq.n	801e384 <icmp_send_response+0x13c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801e350:	697b      	ldr	r3, [r7, #20]
 801e352:	2200      	movs	r2, #0
 801e354:	709a      	strb	r2, [r3, #2]
 801e356:	2200      	movs	r2, #0
 801e358:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 801e35a:	4b14      	ldr	r3, [pc, #80]	@ (801e3ac <icmp_send_response+0x164>)
 801e35c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801e360:	3301      	adds	r3, #1
 801e362:	b29a      	uxth	r2, r3
 801e364:	4b11      	ldr	r3, [pc, #68]	@ (801e3ac <icmp_send_response+0x164>)
 801e366:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801e36a:	f107 020c 	add.w	r2, r7, #12
 801e36e:	693b      	ldr	r3, [r7, #16]
 801e370:	9302      	str	r3, [sp, #8]
 801e372:	2301      	movs	r3, #1
 801e374:	9301      	str	r3, [sp, #4]
 801e376:	2300      	movs	r3, #0
 801e378:	9300      	str	r3, [sp, #0]
 801e37a:	23ff      	movs	r3, #255	@ 0xff
 801e37c:	2100      	movs	r1, #0
 801e37e:	69f8      	ldr	r0, [r7, #28]
 801e380:	f000 fa2c 	bl	801e7dc <ip4_output_if>
  }
  pbuf_free(q);
 801e384:	69f8      	ldr	r0, [r7, #28]
 801e386:	f7f6 fffd 	bl	8015384 <pbuf_free>
}
 801e38a:	3720      	adds	r7, #32
 801e38c:	46bd      	mov	sp, r7
 801e38e:	bd80      	pop	{r7, pc}
 801e390:	08026734 	.word	0x08026734
 801e394:	080265b8 	.word	0x080265b8
 801e398:	08026774 	.word	0x08026774
 801e39c:	08026628 	.word	0x08026628
 801e3a0:	080267a0 	.word	0x080267a0
 801e3a4:	080267bc 	.word	0x080267bc
 801e3a8:	080267cc 	.word	0x080267cc
 801e3ac:	20028318 	.word	0x20028318

0801e3b0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801e3b0:	b480      	push	{r7}
 801e3b2:	b085      	sub	sp, #20
 801e3b4:	af00      	add	r7, sp, #0
 801e3b6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801e3b8:	4b37      	ldr	r3, [pc, #220]	@ (801e498 <ip4_route+0xe8>)
 801e3ba:	681b      	ldr	r3, [r3, #0]
 801e3bc:	60fb      	str	r3, [r7, #12]
 801e3be:	e036      	b.n	801e42e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801e3c0:	68fb      	ldr	r3, [r7, #12]
 801e3c2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801e3c6:	f003 0301 	and.w	r3, r3, #1
 801e3ca:	b2db      	uxtb	r3, r3
 801e3cc:	2b00      	cmp	r3, #0
 801e3ce:	d02b      	beq.n	801e428 <ip4_route+0x78>
 801e3d0:	68fb      	ldr	r3, [r7, #12]
 801e3d2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801e3d6:	089b      	lsrs	r3, r3, #2
 801e3d8:	f003 0301 	and.w	r3, r3, #1
 801e3dc:	b2db      	uxtb	r3, r3
 801e3de:	2b00      	cmp	r3, #0
 801e3e0:	d022      	beq.n	801e428 <ip4_route+0x78>
 801e3e2:	68fb      	ldr	r3, [r7, #12]
 801e3e4:	3304      	adds	r3, #4
 801e3e6:	681b      	ldr	r3, [r3, #0]
 801e3e8:	2b00      	cmp	r3, #0
 801e3ea:	d01d      	beq.n	801e428 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801e3ec:	687b      	ldr	r3, [r7, #4]
 801e3ee:	681a      	ldr	r2, [r3, #0]
 801e3f0:	68fb      	ldr	r3, [r7, #12]
 801e3f2:	3304      	adds	r3, #4
 801e3f4:	681b      	ldr	r3, [r3, #0]
 801e3f6:	405a      	eors	r2, r3
 801e3f8:	68fb      	ldr	r3, [r7, #12]
 801e3fa:	3308      	adds	r3, #8
 801e3fc:	681b      	ldr	r3, [r3, #0]
 801e3fe:	4013      	ands	r3, r2
 801e400:	2b00      	cmp	r3, #0
 801e402:	d101      	bne.n	801e408 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801e404:	68fb      	ldr	r3, [r7, #12]
 801e406:	e040      	b.n	801e48a <ip4_route+0xda>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801e408:	68fb      	ldr	r3, [r7, #12]
 801e40a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801e40e:	f003 0302 	and.w	r3, r3, #2
 801e412:	2b00      	cmp	r3, #0
 801e414:	d108      	bne.n	801e428 <ip4_route+0x78>
 801e416:	687b      	ldr	r3, [r7, #4]
 801e418:	681a      	ldr	r2, [r3, #0]
 801e41a:	68fb      	ldr	r3, [r7, #12]
 801e41c:	330c      	adds	r3, #12
 801e41e:	681b      	ldr	r3, [r3, #0]
 801e420:	429a      	cmp	r2, r3
 801e422:	d101      	bne.n	801e428 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801e424:	68fb      	ldr	r3, [r7, #12]
 801e426:	e030      	b.n	801e48a <ip4_route+0xda>
  NETIF_FOREACH(netif) {
 801e428:	68fb      	ldr	r3, [r7, #12]
 801e42a:	681b      	ldr	r3, [r3, #0]
 801e42c:	60fb      	str	r3, [r7, #12]
 801e42e:	68fb      	ldr	r3, [r7, #12]
 801e430:	2b00      	cmp	r3, #0
 801e432:	d1c5      	bne.n	801e3c0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801e434:	4b19      	ldr	r3, [pc, #100]	@ (801e49c <ip4_route+0xec>)
 801e436:	681b      	ldr	r3, [r3, #0]
 801e438:	2b00      	cmp	r3, #0
 801e43a:	d01a      	beq.n	801e472 <ip4_route+0xc2>
 801e43c:	4b17      	ldr	r3, [pc, #92]	@ (801e49c <ip4_route+0xec>)
 801e43e:	681b      	ldr	r3, [r3, #0]
 801e440:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801e444:	f003 0301 	and.w	r3, r3, #1
 801e448:	2b00      	cmp	r3, #0
 801e44a:	d012      	beq.n	801e472 <ip4_route+0xc2>
 801e44c:	4b13      	ldr	r3, [pc, #76]	@ (801e49c <ip4_route+0xec>)
 801e44e:	681b      	ldr	r3, [r3, #0]
 801e450:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801e454:	f003 0304 	and.w	r3, r3, #4
 801e458:	2b00      	cmp	r3, #0
 801e45a:	d00a      	beq.n	801e472 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801e45c:	4b0f      	ldr	r3, [pc, #60]	@ (801e49c <ip4_route+0xec>)
 801e45e:	681b      	ldr	r3, [r3, #0]
 801e460:	3304      	adds	r3, #4
 801e462:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801e464:	2b00      	cmp	r3, #0
 801e466:	d004      	beq.n	801e472 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801e468:	687b      	ldr	r3, [r7, #4]
 801e46a:	681b      	ldr	r3, [r3, #0]
 801e46c:	b2db      	uxtb	r3, r3
 801e46e:	2b7f      	cmp	r3, #127	@ 0x7f
 801e470:	d109      	bne.n	801e486 <ip4_route+0xd6>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 801e472:	4b0b      	ldr	r3, [pc, #44]	@ (801e4a0 <ip4_route+0xf0>)
 801e474:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801e478:	3301      	adds	r3, #1
 801e47a:	b29a      	uxth	r2, r3
 801e47c:	4b08      	ldr	r3, [pc, #32]	@ (801e4a0 <ip4_route+0xf0>)
 801e47e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801e482:	2300      	movs	r3, #0
 801e484:	e001      	b.n	801e48a <ip4_route+0xda>
  }

  return netif_default;
 801e486:	4b05      	ldr	r3, [pc, #20]	@ (801e49c <ip4_route+0xec>)
 801e488:	681b      	ldr	r3, [r3, #0]
}
 801e48a:	4618      	mov	r0, r3
 801e48c:	3714      	adds	r7, #20
 801e48e:	46bd      	mov	sp, r7
 801e490:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e494:	4770      	bx	lr
 801e496:	bf00      	nop
 801e498:	2002830c 	.word	0x2002830c
 801e49c:	20028310 	.word	0x20028310
 801e4a0:	20028318 	.word	0x20028318

0801e4a4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801e4a4:	b580      	push	{r7, lr}
 801e4a6:	b082      	sub	sp, #8
 801e4a8:	af00      	add	r7, sp, #0
 801e4aa:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801e4ac:	687b      	ldr	r3, [r7, #4]
 801e4ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801e4b2:	f003 0301 	and.w	r3, r3, #1
 801e4b6:	b2db      	uxtb	r3, r3
 801e4b8:	2b00      	cmp	r3, #0
 801e4ba:	d016      	beq.n	801e4ea <ip4_input_accept+0x46>
 801e4bc:	687b      	ldr	r3, [r7, #4]
 801e4be:	3304      	adds	r3, #4
 801e4c0:	681b      	ldr	r3, [r3, #0]
 801e4c2:	2b00      	cmp	r3, #0
 801e4c4:	d011      	beq.n	801e4ea <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801e4c6:	4b0b      	ldr	r3, [pc, #44]	@ (801e4f4 <ip4_input_accept+0x50>)
 801e4c8:	695a      	ldr	r2, [r3, #20]
 801e4ca:	687b      	ldr	r3, [r7, #4]
 801e4cc:	3304      	adds	r3, #4
 801e4ce:	681b      	ldr	r3, [r3, #0]
 801e4d0:	429a      	cmp	r2, r3
 801e4d2:	d008      	beq.n	801e4e6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801e4d4:	4b07      	ldr	r3, [pc, #28]	@ (801e4f4 <ip4_input_accept+0x50>)
 801e4d6:	695b      	ldr	r3, [r3, #20]
 801e4d8:	6879      	ldr	r1, [r7, #4]
 801e4da:	4618      	mov	r0, r3
 801e4dc:	f000 fa70 	bl	801e9c0 <ip4_addr_isbroadcast_u32>
 801e4e0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801e4e2:	2b00      	cmp	r3, #0
 801e4e4:	d001      	beq.n	801e4ea <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801e4e6:	2301      	movs	r3, #1
 801e4e8:	e000      	b.n	801e4ec <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801e4ea:	2300      	movs	r3, #0
}
 801e4ec:	4618      	mov	r0, r3
 801e4ee:	3708      	adds	r7, #8
 801e4f0:	46bd      	mov	sp, r7
 801e4f2:	bd80      	pop	{r7, pc}
 801e4f4:	2001f878 	.word	0x2001f878

0801e4f8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801e4f8:	b580      	push	{r7, lr}
 801e4fa:	b086      	sub	sp, #24
 801e4fc:	af00      	add	r7, sp, #0
 801e4fe:	6078      	str	r0, [r7, #4]
 801e500:	6039      	str	r1, [r7, #0]
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();

  IP_STATS_INC(ip.recv);
 801e502:	4b8f      	ldr	r3, [pc, #572]	@ (801e740 <ip4_input+0x248>)
 801e504:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801e508:	3301      	adds	r3, #1
 801e50a:	b29a      	uxth	r2, r3
 801e50c:	4b8c      	ldr	r3, [pc, #560]	@ (801e740 <ip4_input+0x248>)
 801e50e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801e512:	687b      	ldr	r3, [r7, #4]
 801e514:	685b      	ldr	r3, [r3, #4]
 801e516:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 801e518:	693b      	ldr	r3, [r7, #16]
 801e51a:	781b      	ldrb	r3, [r3, #0]
 801e51c:	091b      	lsrs	r3, r3, #4
 801e51e:	b2db      	uxtb	r3, r3
 801e520:	2b04      	cmp	r3, #4
 801e522:	d014      	beq.n	801e54e <ip4_input+0x56>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801e524:	6878      	ldr	r0, [r7, #4]
 801e526:	f7f6 ff2d 	bl	8015384 <pbuf_free>
    IP_STATS_INC(ip.err);
 801e52a:	4b85      	ldr	r3, [pc, #532]	@ (801e740 <ip4_input+0x248>)
 801e52c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801e530:	3301      	adds	r3, #1
 801e532:	b29a      	uxth	r2, r3
 801e534:	4b82      	ldr	r3, [pc, #520]	@ (801e740 <ip4_input+0x248>)
 801e536:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    IP_STATS_INC(ip.drop);
 801e53a:	4b81      	ldr	r3, [pc, #516]	@ (801e740 <ip4_input+0x248>)
 801e53c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801e540:	3301      	adds	r3, #1
 801e542:	b29a      	uxth	r2, r3
 801e544:	4b7e      	ldr	r3, [pc, #504]	@ (801e740 <ip4_input+0x248>)
 801e546:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801e54a:	2300      	movs	r3, #0
 801e54c:	e13e      	b.n	801e7cc <ip4_input+0x2d4>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801e54e:	693b      	ldr	r3, [r7, #16]
 801e550:	781b      	ldrb	r3, [r3, #0]
 801e552:	f003 030f 	and.w	r3, r3, #15
 801e556:	b2db      	uxtb	r3, r3
 801e558:	009b      	lsls	r3, r3, #2
 801e55a:	b2db      	uxtb	r3, r3
 801e55c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801e55e:	693b      	ldr	r3, [r7, #16]
 801e560:	885b      	ldrh	r3, [r3, #2]
 801e562:	b29b      	uxth	r3, r3
 801e564:	4618      	mov	r0, r3
 801e566:	f7f4 ff93 	bl	8013490 <lwip_htons>
 801e56a:	4603      	mov	r3, r0
 801e56c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801e56e:	687b      	ldr	r3, [r7, #4]
 801e570:	891b      	ldrh	r3, [r3, #8]
 801e572:	89ba      	ldrh	r2, [r7, #12]
 801e574:	429a      	cmp	r2, r3
 801e576:	d204      	bcs.n	801e582 <ip4_input+0x8a>
    pbuf_realloc(p, iphdr_len);
 801e578:	89bb      	ldrh	r3, [r7, #12]
 801e57a:	4619      	mov	r1, r3
 801e57c:	6878      	ldr	r0, [r7, #4]
 801e57e:	f7f6 fd61 	bl	8015044 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801e582:	687b      	ldr	r3, [r7, #4]
 801e584:	895b      	ldrh	r3, [r3, #10]
 801e586:	89fa      	ldrh	r2, [r7, #14]
 801e588:	429a      	cmp	r2, r3
 801e58a:	d807      	bhi.n	801e59c <ip4_input+0xa4>
 801e58c:	687b      	ldr	r3, [r7, #4]
 801e58e:	891b      	ldrh	r3, [r3, #8]
 801e590:	89ba      	ldrh	r2, [r7, #12]
 801e592:	429a      	cmp	r2, r3
 801e594:	d802      	bhi.n	801e59c <ip4_input+0xa4>
 801e596:	89fb      	ldrh	r3, [r7, #14]
 801e598:	2b13      	cmp	r3, #19
 801e59a:	d814      	bhi.n	801e5c6 <ip4_input+0xce>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801e59c:	6878      	ldr	r0, [r7, #4]
 801e59e:	f7f6 fef1 	bl	8015384 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 801e5a2:	4b67      	ldr	r3, [pc, #412]	@ (801e740 <ip4_input+0x248>)
 801e5a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 801e5a8:	3301      	adds	r3, #1
 801e5aa:	b29a      	uxth	r2, r3
 801e5ac:	4b64      	ldr	r3, [pc, #400]	@ (801e740 <ip4_input+0x248>)
 801e5ae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    IP_STATS_INC(ip.drop);
 801e5b2:	4b63      	ldr	r3, [pc, #396]	@ (801e740 <ip4_input+0x248>)
 801e5b4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801e5b8:	3301      	adds	r3, #1
 801e5ba:	b29a      	uxth	r2, r3
 801e5bc:	4b60      	ldr	r3, [pc, #384]	@ (801e740 <ip4_input+0x248>)
 801e5be:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801e5c2:	2300      	movs	r3, #0
 801e5c4:	e102      	b.n	801e7cc <ip4_input+0x2d4>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801e5c6:	693b      	ldr	r3, [r7, #16]
 801e5c8:	691b      	ldr	r3, [r3, #16]
 801e5ca:	4a5e      	ldr	r2, [pc, #376]	@ (801e744 <ip4_input+0x24c>)
 801e5cc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801e5ce:	693b      	ldr	r3, [r7, #16]
 801e5d0:	68db      	ldr	r3, [r3, #12]
 801e5d2:	4a5c      	ldr	r2, [pc, #368]	@ (801e744 <ip4_input+0x24c>)
 801e5d4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801e5d6:	4b5b      	ldr	r3, [pc, #364]	@ (801e744 <ip4_input+0x24c>)
 801e5d8:	695b      	ldr	r3, [r3, #20]
 801e5da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801e5de:	2be0      	cmp	r3, #224	@ 0xe0
 801e5e0:	d112      	bne.n	801e608 <ip4_input+0x110>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801e5e2:	683b      	ldr	r3, [r7, #0]
 801e5e4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801e5e8:	f003 0301 	and.w	r3, r3, #1
 801e5ec:	b2db      	uxtb	r3, r3
 801e5ee:	2b00      	cmp	r3, #0
 801e5f0:	d007      	beq.n	801e602 <ip4_input+0x10a>
 801e5f2:	683b      	ldr	r3, [r7, #0]
 801e5f4:	3304      	adds	r3, #4
 801e5f6:	681b      	ldr	r3, [r3, #0]
 801e5f8:	2b00      	cmp	r3, #0
 801e5fa:	d002      	beq.n	801e602 <ip4_input+0x10a>
      netif = inp;
 801e5fc:	683b      	ldr	r3, [r7, #0]
 801e5fe:	617b      	str	r3, [r7, #20]
 801e600:	e02a      	b.n	801e658 <ip4_input+0x160>
    } else {
      netif = NULL;
 801e602:	2300      	movs	r3, #0
 801e604:	617b      	str	r3, [r7, #20]
 801e606:	e027      	b.n	801e658 <ip4_input+0x160>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801e608:	6838      	ldr	r0, [r7, #0]
 801e60a:	f7ff ff4b 	bl	801e4a4 <ip4_input_accept>
 801e60e:	4603      	mov	r3, r0
 801e610:	2b00      	cmp	r3, #0
 801e612:	d002      	beq.n	801e61a <ip4_input+0x122>
      netif = inp;
 801e614:	683b      	ldr	r3, [r7, #0]
 801e616:	617b      	str	r3, [r7, #20]
 801e618:	e01e      	b.n	801e658 <ip4_input+0x160>
    } else {
      netif = NULL;
 801e61a:	2300      	movs	r3, #0
 801e61c:	617b      	str	r3, [r7, #20]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801e61e:	4b49      	ldr	r3, [pc, #292]	@ (801e744 <ip4_input+0x24c>)
 801e620:	695b      	ldr	r3, [r3, #20]
 801e622:	b2db      	uxtb	r3, r3
 801e624:	2b7f      	cmp	r3, #127	@ 0x7f
 801e626:	d017      	beq.n	801e658 <ip4_input+0x160>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801e628:	4b47      	ldr	r3, [pc, #284]	@ (801e748 <ip4_input+0x250>)
 801e62a:	681b      	ldr	r3, [r3, #0]
 801e62c:	617b      	str	r3, [r7, #20]
 801e62e:	e00e      	b.n	801e64e <ip4_input+0x156>
          if (netif == inp) {
 801e630:	697a      	ldr	r2, [r7, #20]
 801e632:	683b      	ldr	r3, [r7, #0]
 801e634:	429a      	cmp	r2, r3
 801e636:	d006      	beq.n	801e646 <ip4_input+0x14e>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801e638:	6978      	ldr	r0, [r7, #20]
 801e63a:	f7ff ff33 	bl	801e4a4 <ip4_input_accept>
 801e63e:	4603      	mov	r3, r0
 801e640:	2b00      	cmp	r3, #0
 801e642:	d108      	bne.n	801e656 <ip4_input+0x15e>
 801e644:	e000      	b.n	801e648 <ip4_input+0x150>
            continue;
 801e646:	bf00      	nop
        NETIF_FOREACH(netif) {
 801e648:	697b      	ldr	r3, [r7, #20]
 801e64a:	681b      	ldr	r3, [r3, #0]
 801e64c:	617b      	str	r3, [r7, #20]
 801e64e:	697b      	ldr	r3, [r7, #20]
 801e650:	2b00      	cmp	r3, #0
 801e652:	d1ed      	bne.n	801e630 <ip4_input+0x138>
 801e654:	e000      	b.n	801e658 <ip4_input+0x160>
            break;
 801e656:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801e658:	4b3a      	ldr	r3, [pc, #232]	@ (801e744 <ip4_input+0x24c>)
 801e65a:	691b      	ldr	r3, [r3, #16]
 801e65c:	6839      	ldr	r1, [r7, #0]
 801e65e:	4618      	mov	r0, r3
 801e660:	f000 f9ae 	bl	801e9c0 <ip4_addr_isbroadcast_u32>
 801e664:	4603      	mov	r3, r0
 801e666:	2b00      	cmp	r3, #0
 801e668:	d105      	bne.n	801e676 <ip4_input+0x17e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801e66a:	4b36      	ldr	r3, [pc, #216]	@ (801e744 <ip4_input+0x24c>)
 801e66c:	691b      	ldr	r3, [r3, #16]
 801e66e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801e672:	2be0      	cmp	r3, #224	@ 0xe0
 801e674:	d10c      	bne.n	801e690 <ip4_input+0x198>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801e676:	6878      	ldr	r0, [r7, #4]
 801e678:	f7f6 fe84 	bl	8015384 <pbuf_free>
      IP_STATS_INC(ip.drop);
 801e67c:	4b30      	ldr	r3, [pc, #192]	@ (801e740 <ip4_input+0x248>)
 801e67e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801e682:	3301      	adds	r3, #1
 801e684:	b29a      	uxth	r2, r3
 801e686:	4b2e      	ldr	r3, [pc, #184]	@ (801e740 <ip4_input+0x248>)
 801e688:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801e68c:	2300      	movs	r3, #0
 801e68e:	e09d      	b.n	801e7cc <ip4_input+0x2d4>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801e690:	697b      	ldr	r3, [r7, #20]
 801e692:	2b00      	cmp	r3, #0
 801e694:	d10c      	bne.n	801e6b0 <ip4_input+0x1b8>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, (struct ip_hdr *)p->payload, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
 801e696:	4b2a      	ldr	r3, [pc, #168]	@ (801e740 <ip4_input+0x248>)
 801e698:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801e69c:	3301      	adds	r3, #1
 801e69e:	b29a      	uxth	r2, r3
 801e6a0:	4b27      	ldr	r3, [pc, #156]	@ (801e740 <ip4_input+0x248>)
 801e6a2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801e6a6:	6878      	ldr	r0, [r7, #4]
 801e6a8:	f7f6 fe6c 	bl	8015384 <pbuf_free>
    return ERR_OK;
 801e6ac:	2300      	movs	r3, #0
 801e6ae:	e08d      	b.n	801e7cc <ip4_input+0x2d4>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801e6b0:	693b      	ldr	r3, [r7, #16]
 801e6b2:	88db      	ldrh	r3, [r3, #6]
 801e6b4:	b29b      	uxth	r3, r3
 801e6b6:	461a      	mov	r2, r3
 801e6b8:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801e6bc:	4013      	ands	r3, r2
 801e6be:	2b00      	cmp	r3, #0
 801e6c0:	d00b      	beq.n	801e6da <ip4_input+0x1e2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801e6c2:	6878      	ldr	r0, [r7, #4]
 801e6c4:	f000 fcd2 	bl	801f06c <ip4_reass>
 801e6c8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801e6ca:	687b      	ldr	r3, [r7, #4]
 801e6cc:	2b00      	cmp	r3, #0
 801e6ce:	d101      	bne.n	801e6d4 <ip4_input+0x1dc>
      return ERR_OK;
 801e6d0:	2300      	movs	r3, #0
 801e6d2:	e07b      	b.n	801e7cc <ip4_input+0x2d4>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801e6d4:	687b      	ldr	r3, [r7, #4]
 801e6d6:	685b      	ldr	r3, [r3, #4]
 801e6d8:	613b      	str	r3, [r7, #16]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801e6da:	4a1a      	ldr	r2, [pc, #104]	@ (801e744 <ip4_input+0x24c>)
 801e6dc:	697b      	ldr	r3, [r7, #20]
 801e6de:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801e6e0:	4a18      	ldr	r2, [pc, #96]	@ (801e744 <ip4_input+0x24c>)
 801e6e2:	683b      	ldr	r3, [r7, #0]
 801e6e4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801e6e6:	4a17      	ldr	r2, [pc, #92]	@ (801e744 <ip4_input+0x24c>)
 801e6e8:	693b      	ldr	r3, [r7, #16]
 801e6ea:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801e6ec:	693b      	ldr	r3, [r7, #16]
 801e6ee:	781b      	ldrb	r3, [r3, #0]
 801e6f0:	f003 030f 	and.w	r3, r3, #15
 801e6f4:	b2db      	uxtb	r3, r3
 801e6f6:	009b      	lsls	r3, r3, #2
 801e6f8:	b2db      	uxtb	r3, r3
 801e6fa:	461a      	mov	r2, r3
 801e6fc:	4b11      	ldr	r3, [pc, #68]	@ (801e744 <ip4_input+0x24c>)
 801e6fe:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801e700:	89fb      	ldrh	r3, [r7, #14]
 801e702:	4619      	mov	r1, r3
 801e704:	6878      	ldr	r0, [r7, #4]
 801e706:	f7f6 fdaf 	bl	8015268 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801e70a:	693b      	ldr	r3, [r7, #16]
 801e70c:	7a5b      	ldrb	r3, [r3, #9]
 801e70e:	2b11      	cmp	r3, #17
 801e710:	d006      	beq.n	801e720 <ip4_input+0x228>
 801e712:	2b11      	cmp	r3, #17
 801e714:	dc1a      	bgt.n	801e74c <ip4_input+0x254>
 801e716:	2b01      	cmp	r3, #1
 801e718:	d00c      	beq.n	801e734 <ip4_input+0x23c>
 801e71a:	2b06      	cmp	r3, #6
 801e71c:	d005      	beq.n	801e72a <ip4_input+0x232>
 801e71e:	e015      	b.n	801e74c <ip4_input+0x254>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801e720:	6839      	ldr	r1, [r7, #0]
 801e722:	6878      	ldr	r0, [r7, #4]
 801e724:	f7fd fdcc 	bl	801c2c0 <udp_input>
        break;
 801e728:	e03d      	b.n	801e7a6 <ip4_input+0x2ae>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801e72a:	6839      	ldr	r1, [r7, #0]
 801e72c:	6878      	ldr	r0, [r7, #4]
 801e72e:	f7f9 f865 	bl	80177fc <tcp_input>
        break;
 801e732:	e038      	b.n	801e7a6 <ip4_input+0x2ae>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801e734:	6839      	ldr	r1, [r7, #0]
 801e736:	6878      	ldr	r0, [r7, #4]
 801e738:	f7ff fbdc 	bl	801def4 <icmp_input>
        break;
 801e73c:	e033      	b.n	801e7a6 <ip4_input+0x2ae>
 801e73e:	bf00      	nop
 801e740:	20028318 	.word	0x20028318
 801e744:	2001f878 	.word	0x2001f878
 801e748:	2002830c 	.word	0x2002830c
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801e74c:	4b21      	ldr	r3, [pc, #132]	@ (801e7d4 <ip4_input+0x2dc>)
 801e74e:	695b      	ldr	r3, [r3, #20]
 801e750:	6979      	ldr	r1, [r7, #20]
 801e752:	4618      	mov	r0, r3
 801e754:	f000 f934 	bl	801e9c0 <ip4_addr_isbroadcast_u32>
 801e758:	4603      	mov	r3, r0
 801e75a:	2b00      	cmp	r3, #0
 801e75c:	d10f      	bne.n	801e77e <ip4_input+0x286>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801e75e:	4b1d      	ldr	r3, [pc, #116]	@ (801e7d4 <ip4_input+0x2dc>)
 801e760:	695b      	ldr	r3, [r3, #20]
 801e762:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801e766:	2be0      	cmp	r3, #224	@ 0xe0
 801e768:	d009      	beq.n	801e77e <ip4_input+0x286>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801e76a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801e76e:	4619      	mov	r1, r3
 801e770:	6878      	ldr	r0, [r7, #4]
 801e772:	f7f6 fdf4 	bl	801535e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801e776:	2102      	movs	r1, #2
 801e778:	6878      	ldr	r0, [r7, #4]
 801e77a:	f7ff fd45 	bl	801e208 <icmp_dest_unreach>
          }
#endif /* LWIP_ICMP */

          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

          IP_STATS_INC(ip.proterr);
 801e77e:	4b16      	ldr	r3, [pc, #88]	@ (801e7d8 <ip4_input+0x2e0>)
 801e780:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801e784:	3301      	adds	r3, #1
 801e786:	b29a      	uxth	r2, r3
 801e788:	4b13      	ldr	r3, [pc, #76]	@ (801e7d8 <ip4_input+0x2e0>)
 801e78a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
          IP_STATS_INC(ip.drop);
 801e78e:	4b12      	ldr	r3, [pc, #72]	@ (801e7d8 <ip4_input+0x2e0>)
 801e790:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801e794:	3301      	adds	r3, #1
 801e796:	b29a      	uxth	r2, r3
 801e798:	4b0f      	ldr	r3, [pc, #60]	@ (801e7d8 <ip4_input+0x2e0>)
 801e79a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801e79e:	6878      	ldr	r0, [r7, #4]
 801e7a0:	f7f6 fdf0 	bl	8015384 <pbuf_free>
        break;
 801e7a4:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801e7a6:	4b0b      	ldr	r3, [pc, #44]	@ (801e7d4 <ip4_input+0x2dc>)
 801e7a8:	2200      	movs	r2, #0
 801e7aa:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801e7ac:	4b09      	ldr	r3, [pc, #36]	@ (801e7d4 <ip4_input+0x2dc>)
 801e7ae:	2200      	movs	r2, #0
 801e7b0:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801e7b2:	4b08      	ldr	r3, [pc, #32]	@ (801e7d4 <ip4_input+0x2dc>)
 801e7b4:	2200      	movs	r2, #0
 801e7b6:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801e7b8:	4b06      	ldr	r3, [pc, #24]	@ (801e7d4 <ip4_input+0x2dc>)
 801e7ba:	2200      	movs	r2, #0
 801e7bc:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801e7be:	4b05      	ldr	r3, [pc, #20]	@ (801e7d4 <ip4_input+0x2dc>)
 801e7c0:	2200      	movs	r2, #0
 801e7c2:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801e7c4:	4b03      	ldr	r3, [pc, #12]	@ (801e7d4 <ip4_input+0x2dc>)
 801e7c6:	2200      	movs	r2, #0
 801e7c8:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801e7ca:	2300      	movs	r3, #0
}
 801e7cc:	4618      	mov	r0, r3
 801e7ce:	3718      	adds	r7, #24
 801e7d0:	46bd      	mov	sp, r7
 801e7d2:	bd80      	pop	{r7, pc}
 801e7d4:	2001f878 	.word	0x2001f878
 801e7d8:	20028318 	.word	0x20028318

0801e7dc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801e7dc:	b580      	push	{r7, lr}
 801e7de:	b08a      	sub	sp, #40	@ 0x28
 801e7e0:	af04      	add	r7, sp, #16
 801e7e2:	60f8      	str	r0, [r7, #12]
 801e7e4:	60b9      	str	r1, [r7, #8]
 801e7e6:	607a      	str	r2, [r7, #4]
 801e7e8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801e7ea:	68bb      	ldr	r3, [r7, #8]
 801e7ec:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801e7ee:	687b      	ldr	r3, [r7, #4]
 801e7f0:	2b00      	cmp	r3, #0
 801e7f2:	d009      	beq.n	801e808 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801e7f4:	68bb      	ldr	r3, [r7, #8]
 801e7f6:	2b00      	cmp	r3, #0
 801e7f8:	d003      	beq.n	801e802 <ip4_output_if+0x26>
 801e7fa:	68bb      	ldr	r3, [r7, #8]
 801e7fc:	681b      	ldr	r3, [r3, #0]
 801e7fe:	2b00      	cmp	r3, #0
 801e800:	d102      	bne.n	801e808 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801e802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e804:	3304      	adds	r3, #4
 801e806:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801e808:	78fa      	ldrb	r2, [r7, #3]
 801e80a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e80c:	9302      	str	r3, [sp, #8]
 801e80e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801e812:	9301      	str	r3, [sp, #4]
 801e814:	f897 3020 	ldrb.w	r3, [r7, #32]
 801e818:	9300      	str	r3, [sp, #0]
 801e81a:	4613      	mov	r3, r2
 801e81c:	687a      	ldr	r2, [r7, #4]
 801e81e:	6979      	ldr	r1, [r7, #20]
 801e820:	68f8      	ldr	r0, [r7, #12]
 801e822:	f000 f805 	bl	801e830 <ip4_output_if_src>
 801e826:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801e828:	4618      	mov	r0, r3
 801e82a:	3718      	adds	r7, #24
 801e82c:	46bd      	mov	sp, r7
 801e82e:	bd80      	pop	{r7, pc}

0801e830 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801e830:	b580      	push	{r7, lr}
 801e832:	b088      	sub	sp, #32
 801e834:	af00      	add	r7, sp, #0
 801e836:	60f8      	str	r0, [r7, #12]
 801e838:	60b9      	str	r1, [r7, #8]
 801e83a:	607a      	str	r2, [r7, #4]
 801e83c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801e83e:	68fb      	ldr	r3, [r7, #12]
 801e840:	7b9b      	ldrb	r3, [r3, #14]
 801e842:	2b01      	cmp	r3, #1
 801e844:	d006      	beq.n	801e854 <ip4_output_if_src+0x24>
 801e846:	4b57      	ldr	r3, [pc, #348]	@ (801e9a4 <ip4_output_if_src+0x174>)
 801e848:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801e84c:	4956      	ldr	r1, [pc, #344]	@ (801e9a8 <ip4_output_if_src+0x178>)
 801e84e:	4857      	ldr	r0, [pc, #348]	@ (801e9ac <ip4_output_if_src+0x17c>)
 801e850:	f002 fc38 	bl	80210c4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801e854:	687b      	ldr	r3, [r7, #4]
 801e856:	2b00      	cmp	r3, #0
 801e858:	d068      	beq.n	801e92c <ip4_output_if_src+0xfc>
    u16_t ip_hlen = IP_HLEN;
 801e85a:	2314      	movs	r3, #20
 801e85c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801e85e:	2114      	movs	r1, #20
 801e860:	68f8      	ldr	r0, [r7, #12]
 801e862:	f7f6 fcf1 	bl	8015248 <pbuf_add_header>
 801e866:	4603      	mov	r3, r0
 801e868:	2b00      	cmp	r3, #0
 801e86a:	d00a      	beq.n	801e882 <ip4_output_if_src+0x52>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 801e86c:	4b50      	ldr	r3, [pc, #320]	@ (801e9b0 <ip4_output_if_src+0x180>)
 801e86e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801e872:	3301      	adds	r3, #1
 801e874:	b29a      	uxth	r2, r3
 801e876:	4b4e      	ldr	r3, [pc, #312]	@ (801e9b0 <ip4_output_if_src+0x180>)
 801e878:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801e87c:	f06f 0301 	mvn.w	r3, #1
 801e880:	e08c      	b.n	801e99c <ip4_output_if_src+0x16c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801e882:	68fb      	ldr	r3, [r7, #12]
 801e884:	685b      	ldr	r3, [r3, #4]
 801e886:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801e888:	68fb      	ldr	r3, [r7, #12]
 801e88a:	895b      	ldrh	r3, [r3, #10]
 801e88c:	2b13      	cmp	r3, #19
 801e88e:	d806      	bhi.n	801e89e <ip4_output_if_src+0x6e>
 801e890:	4b44      	ldr	r3, [pc, #272]	@ (801e9a4 <ip4_output_if_src+0x174>)
 801e892:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801e896:	4947      	ldr	r1, [pc, #284]	@ (801e9b4 <ip4_output_if_src+0x184>)
 801e898:	4844      	ldr	r0, [pc, #272]	@ (801e9ac <ip4_output_if_src+0x17c>)
 801e89a:	f002 fc13 	bl	80210c4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801e89e:	69fb      	ldr	r3, [r7, #28]
 801e8a0:	78fa      	ldrb	r2, [r7, #3]
 801e8a2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801e8a4:	69fb      	ldr	r3, [r7, #28]
 801e8a6:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801e8aa:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801e8ac:	687b      	ldr	r3, [r7, #4]
 801e8ae:	681a      	ldr	r2, [r3, #0]
 801e8b0:	69fb      	ldr	r3, [r7, #28]
 801e8b2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801e8b4:	8b7b      	ldrh	r3, [r7, #26]
 801e8b6:	089b      	lsrs	r3, r3, #2
 801e8b8:	b29b      	uxth	r3, r3
 801e8ba:	b2db      	uxtb	r3, r3
 801e8bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e8c0:	b2da      	uxtb	r2, r3
 801e8c2:	69fb      	ldr	r3, [r7, #28]
 801e8c4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801e8c6:	69fb      	ldr	r3, [r7, #28]
 801e8c8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801e8cc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801e8ce:	68fb      	ldr	r3, [r7, #12]
 801e8d0:	891b      	ldrh	r3, [r3, #8]
 801e8d2:	4618      	mov	r0, r3
 801e8d4:	f7f4 fddc 	bl	8013490 <lwip_htons>
 801e8d8:	4603      	mov	r3, r0
 801e8da:	461a      	mov	r2, r3
 801e8dc:	69fb      	ldr	r3, [r7, #28]
 801e8de:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801e8e0:	69fb      	ldr	r3, [r7, #28]
 801e8e2:	2200      	movs	r2, #0
 801e8e4:	719a      	strb	r2, [r3, #6]
 801e8e6:	2200      	movs	r2, #0
 801e8e8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801e8ea:	4b33      	ldr	r3, [pc, #204]	@ (801e9b8 <ip4_output_if_src+0x188>)
 801e8ec:	881b      	ldrh	r3, [r3, #0]
 801e8ee:	4618      	mov	r0, r3
 801e8f0:	f7f4 fdce 	bl	8013490 <lwip_htons>
 801e8f4:	4603      	mov	r3, r0
 801e8f6:	461a      	mov	r2, r3
 801e8f8:	69fb      	ldr	r3, [r7, #28]
 801e8fa:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801e8fc:	4b2e      	ldr	r3, [pc, #184]	@ (801e9b8 <ip4_output_if_src+0x188>)
 801e8fe:	881b      	ldrh	r3, [r3, #0]
 801e900:	3301      	adds	r3, #1
 801e902:	b29a      	uxth	r2, r3
 801e904:	4b2c      	ldr	r3, [pc, #176]	@ (801e9b8 <ip4_output_if_src+0x188>)
 801e906:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801e908:	68bb      	ldr	r3, [r7, #8]
 801e90a:	2b00      	cmp	r3, #0
 801e90c:	d104      	bne.n	801e918 <ip4_output_if_src+0xe8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801e90e:	4b2b      	ldr	r3, [pc, #172]	@ (801e9bc <ip4_output_if_src+0x18c>)
 801e910:	681a      	ldr	r2, [r3, #0]
 801e912:	69fb      	ldr	r3, [r7, #28]
 801e914:	60da      	str	r2, [r3, #12]
 801e916:	e003      	b.n	801e920 <ip4_output_if_src+0xf0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801e918:	68bb      	ldr	r3, [r7, #8]
 801e91a:	681a      	ldr	r2, [r3, #0]
 801e91c:	69fb      	ldr	r3, [r7, #28]
 801e91e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801e920:	69fb      	ldr	r3, [r7, #28]
 801e922:	2200      	movs	r2, #0
 801e924:	729a      	strb	r2, [r3, #10]
 801e926:	2200      	movs	r2, #0
 801e928:	72da      	strb	r2, [r3, #11]
 801e92a:	e017      	b.n	801e95c <ip4_output_if_src+0x12c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801e92c:	68fb      	ldr	r3, [r7, #12]
 801e92e:	895b      	ldrh	r3, [r3, #10]
 801e930:	2b13      	cmp	r3, #19
 801e932:	d80a      	bhi.n	801e94a <ip4_output_if_src+0x11a>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
 801e934:	4b1e      	ldr	r3, [pc, #120]	@ (801e9b0 <ip4_output_if_src+0x180>)
 801e936:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801e93a:	3301      	adds	r3, #1
 801e93c:	b29a      	uxth	r2, r3
 801e93e:	4b1c      	ldr	r3, [pc, #112]	@ (801e9b0 <ip4_output_if_src+0x180>)
 801e940:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801e944:	f06f 0301 	mvn.w	r3, #1
 801e948:	e028      	b.n	801e99c <ip4_output_if_src+0x16c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801e94a:	68fb      	ldr	r3, [r7, #12]
 801e94c:	685b      	ldr	r3, [r3, #4]
 801e94e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801e950:	69fb      	ldr	r3, [r7, #28]
 801e952:	691b      	ldr	r3, [r3, #16]
 801e954:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801e956:	f107 0314 	add.w	r3, r7, #20
 801e95a:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);
 801e95c:	4b14      	ldr	r3, [pc, #80]	@ (801e9b0 <ip4_output_if_src+0x180>)
 801e95e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801e962:	3301      	adds	r3, #1
 801e964:	b29a      	uxth	r2, r3
 801e966:	4b12      	ldr	r3, [pc, #72]	@ (801e9b0 <ip4_output_if_src+0x180>)
 801e968:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801e96c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e96e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801e970:	2b00      	cmp	r3, #0
 801e972:	d00c      	beq.n	801e98e <ip4_output_if_src+0x15e>
 801e974:	68fb      	ldr	r3, [r7, #12]
 801e976:	891a      	ldrh	r2, [r3, #8]
 801e978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e97a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801e97c:	429a      	cmp	r2, r3
 801e97e:	d906      	bls.n	801e98e <ip4_output_if_src+0x15e>
    return ip4_frag(p, netif, dest);
 801e980:	687a      	ldr	r2, [r7, #4]
 801e982:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801e984:	68f8      	ldr	r0, [r7, #12]
 801e986:	f000 fd89 	bl	801f49c <ip4_frag>
 801e98a:	4603      	mov	r3, r0
 801e98c:	e006      	b.n	801e99c <ip4_output_if_src+0x16c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801e98e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e990:	695b      	ldr	r3, [r3, #20]
 801e992:	687a      	ldr	r2, [r7, #4]
 801e994:	68f9      	ldr	r1, [r7, #12]
 801e996:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801e998:	4798      	blx	r3
 801e99a:	4603      	mov	r3, r0
}
 801e99c:	4618      	mov	r0, r3
 801e99e:	3720      	adds	r7, #32
 801e9a0:	46bd      	mov	sp, r7
 801e9a2:	bd80      	pop	{r7, pc}
 801e9a4:	080267d4 	.word	0x080267d4
 801e9a8:	08026808 	.word	0x08026808
 801e9ac:	08026814 	.word	0x08026814
 801e9b0:	20028318 	.word	0x20028318
 801e9b4:	0802683c 	.word	0x0802683c
 801e9b8:	2002856e 	.word	0x2002856e
 801e9bc:	08027264 	.word	0x08027264

0801e9c0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801e9c0:	b480      	push	{r7}
 801e9c2:	b085      	sub	sp, #20
 801e9c4:	af00      	add	r7, sp, #0
 801e9c6:	6078      	str	r0, [r7, #4]
 801e9c8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801e9ca:	687b      	ldr	r3, [r7, #4]
 801e9cc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801e9ce:	687b      	ldr	r3, [r7, #4]
 801e9d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e9d4:	d002      	beq.n	801e9dc <ip4_addr_isbroadcast_u32+0x1c>
 801e9d6:	687b      	ldr	r3, [r7, #4]
 801e9d8:	2b00      	cmp	r3, #0
 801e9da:	d101      	bne.n	801e9e0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801e9dc:	2301      	movs	r3, #1
 801e9de:	e02a      	b.n	801ea36 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801e9e0:	683b      	ldr	r3, [r7, #0]
 801e9e2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801e9e6:	f003 0302 	and.w	r3, r3, #2
 801e9ea:	2b00      	cmp	r3, #0
 801e9ec:	d101      	bne.n	801e9f2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801e9ee:	2300      	movs	r3, #0
 801e9f0:	e021      	b.n	801ea36 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801e9f2:	683b      	ldr	r3, [r7, #0]
 801e9f4:	3304      	adds	r3, #4
 801e9f6:	681b      	ldr	r3, [r3, #0]
 801e9f8:	687a      	ldr	r2, [r7, #4]
 801e9fa:	429a      	cmp	r2, r3
 801e9fc:	d101      	bne.n	801ea02 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801e9fe:	2300      	movs	r3, #0
 801ea00:	e019      	b.n	801ea36 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801ea02:	68fa      	ldr	r2, [r7, #12]
 801ea04:	683b      	ldr	r3, [r7, #0]
 801ea06:	3304      	adds	r3, #4
 801ea08:	681b      	ldr	r3, [r3, #0]
 801ea0a:	405a      	eors	r2, r3
 801ea0c:	683b      	ldr	r3, [r7, #0]
 801ea0e:	3308      	adds	r3, #8
 801ea10:	681b      	ldr	r3, [r3, #0]
 801ea12:	4013      	ands	r3, r2
 801ea14:	2b00      	cmp	r3, #0
 801ea16:	d10d      	bne.n	801ea34 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801ea18:	683b      	ldr	r3, [r7, #0]
 801ea1a:	3308      	adds	r3, #8
 801ea1c:	681b      	ldr	r3, [r3, #0]
 801ea1e:	43da      	mvns	r2, r3
 801ea20:	687b      	ldr	r3, [r7, #4]
 801ea22:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801ea24:	683b      	ldr	r3, [r7, #0]
 801ea26:	3308      	adds	r3, #8
 801ea28:	681b      	ldr	r3, [r3, #0]
 801ea2a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801ea2c:	429a      	cmp	r2, r3
 801ea2e:	d101      	bne.n	801ea34 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801ea30:	2301      	movs	r3, #1
 801ea32:	e000      	b.n	801ea36 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801ea34:	2300      	movs	r3, #0
  }
}
 801ea36:	4618      	mov	r0, r3
 801ea38:	3714      	adds	r7, #20
 801ea3a:	46bd      	mov	sp, r7
 801ea3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea40:	4770      	bx	lr
	...

0801ea44 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801ea44:	b580      	push	{r7, lr}
 801ea46:	b084      	sub	sp, #16
 801ea48:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801ea4a:	2300      	movs	r3, #0
 801ea4c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801ea4e:	4b12      	ldr	r3, [pc, #72]	@ (801ea98 <ip_reass_tmr+0x54>)
 801ea50:	681b      	ldr	r3, [r3, #0]
 801ea52:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801ea54:	e018      	b.n	801ea88 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801ea56:	68fb      	ldr	r3, [r7, #12]
 801ea58:	7fdb      	ldrb	r3, [r3, #31]
 801ea5a:	2b00      	cmp	r3, #0
 801ea5c:	d00b      	beq.n	801ea76 <ip_reass_tmr+0x32>
      r->timer--;
 801ea5e:	68fb      	ldr	r3, [r7, #12]
 801ea60:	7fdb      	ldrb	r3, [r3, #31]
 801ea62:	3b01      	subs	r3, #1
 801ea64:	b2da      	uxtb	r2, r3
 801ea66:	68fb      	ldr	r3, [r7, #12]
 801ea68:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801ea6a:	68fb      	ldr	r3, [r7, #12]
 801ea6c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801ea6e:	68fb      	ldr	r3, [r7, #12]
 801ea70:	681b      	ldr	r3, [r3, #0]
 801ea72:	60fb      	str	r3, [r7, #12]
 801ea74:	e008      	b.n	801ea88 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801ea76:	68fb      	ldr	r3, [r7, #12]
 801ea78:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801ea7a:	68fb      	ldr	r3, [r7, #12]
 801ea7c:	681b      	ldr	r3, [r3, #0]
 801ea7e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801ea80:	68b9      	ldr	r1, [r7, #8]
 801ea82:	6878      	ldr	r0, [r7, #4]
 801ea84:	f000 f80a 	bl	801ea9c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801ea88:	68fb      	ldr	r3, [r7, #12]
 801ea8a:	2b00      	cmp	r3, #0
 801ea8c:	d1e3      	bne.n	801ea56 <ip_reass_tmr+0x12>
    }
  }
}
 801ea8e:	bf00      	nop
 801ea90:	bf00      	nop
 801ea92:	3710      	adds	r7, #16
 801ea94:	46bd      	mov	sp, r7
 801ea96:	bd80      	pop	{r7, pc}
 801ea98:	20028570 	.word	0x20028570

0801ea9c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801ea9c:	b580      	push	{r7, lr}
 801ea9e:	b088      	sub	sp, #32
 801eaa0:	af00      	add	r7, sp, #0
 801eaa2:	6078      	str	r0, [r7, #4]
 801eaa4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801eaa6:	2300      	movs	r3, #0
 801eaa8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801eaaa:	683a      	ldr	r2, [r7, #0]
 801eaac:	687b      	ldr	r3, [r7, #4]
 801eaae:	429a      	cmp	r2, r3
 801eab0:	d105      	bne.n	801eabe <ip_reass_free_complete_datagram+0x22>
 801eab2:	4b45      	ldr	r3, [pc, #276]	@ (801ebc8 <ip_reass_free_complete_datagram+0x12c>)
 801eab4:	22ab      	movs	r2, #171	@ 0xab
 801eab6:	4945      	ldr	r1, [pc, #276]	@ (801ebcc <ip_reass_free_complete_datagram+0x130>)
 801eab8:	4845      	ldr	r0, [pc, #276]	@ (801ebd0 <ip_reass_free_complete_datagram+0x134>)
 801eaba:	f002 fb03 	bl	80210c4 <iprintf>
  if (prev != NULL) {
 801eabe:	683b      	ldr	r3, [r7, #0]
 801eac0:	2b00      	cmp	r3, #0
 801eac2:	d00a      	beq.n	801eada <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801eac4:	683b      	ldr	r3, [r7, #0]
 801eac6:	681b      	ldr	r3, [r3, #0]
 801eac8:	687a      	ldr	r2, [r7, #4]
 801eaca:	429a      	cmp	r2, r3
 801eacc:	d005      	beq.n	801eada <ip_reass_free_complete_datagram+0x3e>
 801eace:	4b3e      	ldr	r3, [pc, #248]	@ (801ebc8 <ip_reass_free_complete_datagram+0x12c>)
 801ead0:	22ad      	movs	r2, #173	@ 0xad
 801ead2:	4940      	ldr	r1, [pc, #256]	@ (801ebd4 <ip_reass_free_complete_datagram+0x138>)
 801ead4:	483e      	ldr	r0, [pc, #248]	@ (801ebd0 <ip_reass_free_complete_datagram+0x134>)
 801ead6:	f002 faf5 	bl	80210c4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801eada:	687b      	ldr	r3, [r7, #4]
 801eadc:	685b      	ldr	r3, [r3, #4]
 801eade:	685b      	ldr	r3, [r3, #4]
 801eae0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801eae2:	697b      	ldr	r3, [r7, #20]
 801eae4:	889b      	ldrh	r3, [r3, #4]
 801eae6:	b29b      	uxth	r3, r3
 801eae8:	2b00      	cmp	r3, #0
 801eaea:	d12a      	bne.n	801eb42 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801eaec:	687b      	ldr	r3, [r7, #4]
 801eaee:	685b      	ldr	r3, [r3, #4]
 801eaf0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801eaf2:	697b      	ldr	r3, [r7, #20]
 801eaf4:	681a      	ldr	r2, [r3, #0]
 801eaf6:	687b      	ldr	r3, [r7, #4]
 801eaf8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801eafa:	69bb      	ldr	r3, [r7, #24]
 801eafc:	6858      	ldr	r0, [r3, #4]
 801eafe:	687b      	ldr	r3, [r7, #4]
 801eb00:	3308      	adds	r3, #8
 801eb02:	2214      	movs	r2, #20
 801eb04:	4619      	mov	r1, r3
 801eb06:	f002 fd02 	bl	802150e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801eb0a:	2101      	movs	r1, #1
 801eb0c:	69b8      	ldr	r0, [r7, #24]
 801eb0e:	f7ff fb8b 	bl	801e228 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801eb12:	69b8      	ldr	r0, [r7, #24]
 801eb14:	f7f6 fcdc 	bl	80154d0 <pbuf_clen>
 801eb18:	4603      	mov	r3, r0
 801eb1a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801eb1c:	8bfa      	ldrh	r2, [r7, #30]
 801eb1e:	8a7b      	ldrh	r3, [r7, #18]
 801eb20:	4413      	add	r3, r2
 801eb22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801eb26:	db05      	blt.n	801eb34 <ip_reass_free_complete_datagram+0x98>
 801eb28:	4b27      	ldr	r3, [pc, #156]	@ (801ebc8 <ip_reass_free_complete_datagram+0x12c>)
 801eb2a:	22bc      	movs	r2, #188	@ 0xbc
 801eb2c:	492a      	ldr	r1, [pc, #168]	@ (801ebd8 <ip_reass_free_complete_datagram+0x13c>)
 801eb2e:	4828      	ldr	r0, [pc, #160]	@ (801ebd0 <ip_reass_free_complete_datagram+0x134>)
 801eb30:	f002 fac8 	bl	80210c4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801eb34:	8bfa      	ldrh	r2, [r7, #30]
 801eb36:	8a7b      	ldrh	r3, [r7, #18]
 801eb38:	4413      	add	r3, r2
 801eb3a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801eb3c:	69b8      	ldr	r0, [r7, #24]
 801eb3e:	f7f6 fc21 	bl	8015384 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801eb42:	687b      	ldr	r3, [r7, #4]
 801eb44:	685b      	ldr	r3, [r3, #4]
 801eb46:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801eb48:	e01f      	b.n	801eb8a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801eb4a:	69bb      	ldr	r3, [r7, #24]
 801eb4c:	685b      	ldr	r3, [r3, #4]
 801eb4e:	617b      	str	r3, [r7, #20]
    pcur = p;
 801eb50:	69bb      	ldr	r3, [r7, #24]
 801eb52:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801eb54:	697b      	ldr	r3, [r7, #20]
 801eb56:	681b      	ldr	r3, [r3, #0]
 801eb58:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801eb5a:	68f8      	ldr	r0, [r7, #12]
 801eb5c:	f7f6 fcb8 	bl	80154d0 <pbuf_clen>
 801eb60:	4603      	mov	r3, r0
 801eb62:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801eb64:	8bfa      	ldrh	r2, [r7, #30]
 801eb66:	8a7b      	ldrh	r3, [r7, #18]
 801eb68:	4413      	add	r3, r2
 801eb6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801eb6e:	db05      	blt.n	801eb7c <ip_reass_free_complete_datagram+0xe0>
 801eb70:	4b15      	ldr	r3, [pc, #84]	@ (801ebc8 <ip_reass_free_complete_datagram+0x12c>)
 801eb72:	22cc      	movs	r2, #204	@ 0xcc
 801eb74:	4918      	ldr	r1, [pc, #96]	@ (801ebd8 <ip_reass_free_complete_datagram+0x13c>)
 801eb76:	4816      	ldr	r0, [pc, #88]	@ (801ebd0 <ip_reass_free_complete_datagram+0x134>)
 801eb78:	f002 faa4 	bl	80210c4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801eb7c:	8bfa      	ldrh	r2, [r7, #30]
 801eb7e:	8a7b      	ldrh	r3, [r7, #18]
 801eb80:	4413      	add	r3, r2
 801eb82:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801eb84:	68f8      	ldr	r0, [r7, #12]
 801eb86:	f7f6 fbfd 	bl	8015384 <pbuf_free>
  while (p != NULL) {
 801eb8a:	69bb      	ldr	r3, [r7, #24]
 801eb8c:	2b00      	cmp	r3, #0
 801eb8e:	d1dc      	bne.n	801eb4a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801eb90:	6839      	ldr	r1, [r7, #0]
 801eb92:	6878      	ldr	r0, [r7, #4]
 801eb94:	f000 f8d2 	bl	801ed3c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801eb98:	4b10      	ldr	r3, [pc, #64]	@ (801ebdc <ip_reass_free_complete_datagram+0x140>)
 801eb9a:	881b      	ldrh	r3, [r3, #0]
 801eb9c:	8bfa      	ldrh	r2, [r7, #30]
 801eb9e:	429a      	cmp	r2, r3
 801eba0:	d905      	bls.n	801ebae <ip_reass_free_complete_datagram+0x112>
 801eba2:	4b09      	ldr	r3, [pc, #36]	@ (801ebc8 <ip_reass_free_complete_datagram+0x12c>)
 801eba4:	22d2      	movs	r2, #210	@ 0xd2
 801eba6:	490e      	ldr	r1, [pc, #56]	@ (801ebe0 <ip_reass_free_complete_datagram+0x144>)
 801eba8:	4809      	ldr	r0, [pc, #36]	@ (801ebd0 <ip_reass_free_complete_datagram+0x134>)
 801ebaa:	f002 fa8b 	bl	80210c4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801ebae:	4b0b      	ldr	r3, [pc, #44]	@ (801ebdc <ip_reass_free_complete_datagram+0x140>)
 801ebb0:	881a      	ldrh	r2, [r3, #0]
 801ebb2:	8bfb      	ldrh	r3, [r7, #30]
 801ebb4:	1ad3      	subs	r3, r2, r3
 801ebb6:	b29a      	uxth	r2, r3
 801ebb8:	4b08      	ldr	r3, [pc, #32]	@ (801ebdc <ip_reass_free_complete_datagram+0x140>)
 801ebba:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801ebbc:	8bfb      	ldrh	r3, [r7, #30]
}
 801ebbe:	4618      	mov	r0, r3
 801ebc0:	3720      	adds	r7, #32
 801ebc2:	46bd      	mov	sp, r7
 801ebc4:	bd80      	pop	{r7, pc}
 801ebc6:	bf00      	nop
 801ebc8:	0802686c 	.word	0x0802686c
 801ebcc:	080268a8 	.word	0x080268a8
 801ebd0:	080268b4 	.word	0x080268b4
 801ebd4:	080268dc 	.word	0x080268dc
 801ebd8:	080268f0 	.word	0x080268f0
 801ebdc:	20028574 	.word	0x20028574
 801ebe0:	08026910 	.word	0x08026910

0801ebe4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801ebe4:	b580      	push	{r7, lr}
 801ebe6:	b08a      	sub	sp, #40	@ 0x28
 801ebe8:	af00      	add	r7, sp, #0
 801ebea:	6078      	str	r0, [r7, #4]
 801ebec:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801ebee:	2300      	movs	r3, #0
 801ebf0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801ebf2:	2300      	movs	r3, #0
 801ebf4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801ebf6:	2300      	movs	r3, #0
 801ebf8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801ebfa:	2300      	movs	r3, #0
 801ebfc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801ebfe:	2300      	movs	r3, #0
 801ec00:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801ec02:	4b28      	ldr	r3, [pc, #160]	@ (801eca4 <ip_reass_remove_oldest_datagram+0xc0>)
 801ec04:	681b      	ldr	r3, [r3, #0]
 801ec06:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801ec08:	e030      	b.n	801ec6c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801ec0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec0c:	695a      	ldr	r2, [r3, #20]
 801ec0e:	687b      	ldr	r3, [r7, #4]
 801ec10:	68db      	ldr	r3, [r3, #12]
 801ec12:	429a      	cmp	r2, r3
 801ec14:	d10c      	bne.n	801ec30 <ip_reass_remove_oldest_datagram+0x4c>
 801ec16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec18:	699a      	ldr	r2, [r3, #24]
 801ec1a:	687b      	ldr	r3, [r7, #4]
 801ec1c:	691b      	ldr	r3, [r3, #16]
 801ec1e:	429a      	cmp	r2, r3
 801ec20:	d106      	bne.n	801ec30 <ip_reass_remove_oldest_datagram+0x4c>
 801ec22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec24:	899a      	ldrh	r2, [r3, #12]
 801ec26:	687b      	ldr	r3, [r7, #4]
 801ec28:	889b      	ldrh	r3, [r3, #4]
 801ec2a:	b29b      	uxth	r3, r3
 801ec2c:	429a      	cmp	r2, r3
 801ec2e:	d014      	beq.n	801ec5a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801ec30:	693b      	ldr	r3, [r7, #16]
 801ec32:	3301      	adds	r3, #1
 801ec34:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801ec36:	6a3b      	ldr	r3, [r7, #32]
 801ec38:	2b00      	cmp	r3, #0
 801ec3a:	d104      	bne.n	801ec46 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801ec3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec3e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801ec40:	69fb      	ldr	r3, [r7, #28]
 801ec42:	61bb      	str	r3, [r7, #24]
 801ec44:	e009      	b.n	801ec5a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801ec46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec48:	7fda      	ldrb	r2, [r3, #31]
 801ec4a:	6a3b      	ldr	r3, [r7, #32]
 801ec4c:	7fdb      	ldrb	r3, [r3, #31]
 801ec4e:	429a      	cmp	r2, r3
 801ec50:	d803      	bhi.n	801ec5a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801ec52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec54:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801ec56:	69fb      	ldr	r3, [r7, #28]
 801ec58:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801ec5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec5c:	681b      	ldr	r3, [r3, #0]
 801ec5e:	2b00      	cmp	r3, #0
 801ec60:	d001      	beq.n	801ec66 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801ec62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec64:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801ec66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec68:	681b      	ldr	r3, [r3, #0]
 801ec6a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801ec6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec6e:	2b00      	cmp	r3, #0
 801ec70:	d1cb      	bne.n	801ec0a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801ec72:	6a3b      	ldr	r3, [r7, #32]
 801ec74:	2b00      	cmp	r3, #0
 801ec76:	d008      	beq.n	801ec8a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801ec78:	69b9      	ldr	r1, [r7, #24]
 801ec7a:	6a38      	ldr	r0, [r7, #32]
 801ec7c:	f7ff ff0e 	bl	801ea9c <ip_reass_free_complete_datagram>
 801ec80:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801ec82:	697a      	ldr	r2, [r7, #20]
 801ec84:	68fb      	ldr	r3, [r7, #12]
 801ec86:	4413      	add	r3, r2
 801ec88:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801ec8a:	697a      	ldr	r2, [r7, #20]
 801ec8c:	683b      	ldr	r3, [r7, #0]
 801ec8e:	429a      	cmp	r2, r3
 801ec90:	da02      	bge.n	801ec98 <ip_reass_remove_oldest_datagram+0xb4>
 801ec92:	693b      	ldr	r3, [r7, #16]
 801ec94:	2b01      	cmp	r3, #1
 801ec96:	dcac      	bgt.n	801ebf2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801ec98:	697b      	ldr	r3, [r7, #20]
}
 801ec9a:	4618      	mov	r0, r3
 801ec9c:	3728      	adds	r7, #40	@ 0x28
 801ec9e:	46bd      	mov	sp, r7
 801eca0:	bd80      	pop	{r7, pc}
 801eca2:	bf00      	nop
 801eca4:	20028570 	.word	0x20028570

0801eca8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801eca8:	b580      	push	{r7, lr}
 801ecaa:	b084      	sub	sp, #16
 801ecac:	af00      	add	r7, sp, #0
 801ecae:	6078      	str	r0, [r7, #4]
 801ecb0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801ecb2:	f44f 728f 	mov.w	r2, #286	@ 0x11e
 801ecb6:	491e      	ldr	r1, [pc, #120]	@ (801ed30 <ip_reass_enqueue_new_datagram+0x88>)
 801ecb8:	2004      	movs	r0, #4
 801ecba:	f7f5 fae3 	bl	8014284 <memp_malloc_fn>
 801ecbe:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801ecc0:	68fb      	ldr	r3, [r7, #12]
 801ecc2:	2b00      	cmp	r3, #0
 801ecc4:	d119      	bne.n	801ecfa <ip_reass_enqueue_new_datagram+0x52>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801ecc6:	6839      	ldr	r1, [r7, #0]
 801ecc8:	6878      	ldr	r0, [r7, #4]
 801ecca:	f7ff ff8b 	bl	801ebe4 <ip_reass_remove_oldest_datagram>
 801ecce:	4602      	mov	r2, r0
 801ecd0:	683b      	ldr	r3, [r7, #0]
 801ecd2:	4293      	cmp	r3, r2
 801ecd4:	dc06      	bgt.n	801ece4 <ip_reass_enqueue_new_datagram+0x3c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801ecd6:	f44f 7291 	mov.w	r2, #290	@ 0x122
 801ecda:	4915      	ldr	r1, [pc, #84]	@ (801ed30 <ip_reass_enqueue_new_datagram+0x88>)
 801ecdc:	2004      	movs	r0, #4
 801ecde:	f7f5 fad1 	bl	8014284 <memp_malloc_fn>
 801ece2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801ece4:	68fb      	ldr	r3, [r7, #12]
 801ece6:	2b00      	cmp	r3, #0
 801ece8:	d107      	bne.n	801ecfa <ip_reass_enqueue_new_datagram+0x52>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
 801ecea:	4b12      	ldr	r3, [pc, #72]	@ (801ed34 <ip_reass_enqueue_new_datagram+0x8c>)
 801ecec:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801ecee:	3301      	adds	r3, #1
 801ecf0:	b29a      	uxth	r2, r3
 801ecf2:	4b10      	ldr	r3, [pc, #64]	@ (801ed34 <ip_reass_enqueue_new_datagram+0x8c>)
 801ecf4:	879a      	strh	r2, [r3, #60]	@ 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801ecf6:	2300      	movs	r3, #0
 801ecf8:	e016      	b.n	801ed28 <ip_reass_enqueue_new_datagram+0x80>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801ecfa:	2220      	movs	r2, #32
 801ecfc:	2100      	movs	r1, #0
 801ecfe:	68f8      	ldr	r0, [r7, #12]
 801ed00:	f002 fb90 	bl	8021424 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801ed04:	68fb      	ldr	r3, [r7, #12]
 801ed06:	220f      	movs	r2, #15
 801ed08:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801ed0a:	4b0b      	ldr	r3, [pc, #44]	@ (801ed38 <ip_reass_enqueue_new_datagram+0x90>)
 801ed0c:	681a      	ldr	r2, [r3, #0]
 801ed0e:	68fb      	ldr	r3, [r7, #12]
 801ed10:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801ed12:	4a09      	ldr	r2, [pc, #36]	@ (801ed38 <ip_reass_enqueue_new_datagram+0x90>)
 801ed14:	68fb      	ldr	r3, [r7, #12]
 801ed16:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801ed18:	68fb      	ldr	r3, [r7, #12]
 801ed1a:	3308      	adds	r3, #8
 801ed1c:	2214      	movs	r2, #20
 801ed1e:	6879      	ldr	r1, [r7, #4]
 801ed20:	4618      	mov	r0, r3
 801ed22:	f002 fbf4 	bl	802150e <memcpy>
  return ipr;
 801ed26:	68fb      	ldr	r3, [r7, #12]
}
 801ed28:	4618      	mov	r0, r3
 801ed2a:	3710      	adds	r7, #16
 801ed2c:	46bd      	mov	sp, r7
 801ed2e:	bd80      	pop	{r7, pc}
 801ed30:	0802686c 	.word	0x0802686c
 801ed34:	20028318 	.word	0x20028318
 801ed38:	20028570 	.word	0x20028570

0801ed3c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801ed3c:	b580      	push	{r7, lr}
 801ed3e:	b082      	sub	sp, #8
 801ed40:	af00      	add	r7, sp, #0
 801ed42:	6078      	str	r0, [r7, #4]
 801ed44:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801ed46:	4b10      	ldr	r3, [pc, #64]	@ (801ed88 <ip_reass_dequeue_datagram+0x4c>)
 801ed48:	681b      	ldr	r3, [r3, #0]
 801ed4a:	687a      	ldr	r2, [r7, #4]
 801ed4c:	429a      	cmp	r2, r3
 801ed4e:	d104      	bne.n	801ed5a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801ed50:	687b      	ldr	r3, [r7, #4]
 801ed52:	681b      	ldr	r3, [r3, #0]
 801ed54:	4a0c      	ldr	r2, [pc, #48]	@ (801ed88 <ip_reass_dequeue_datagram+0x4c>)
 801ed56:	6013      	str	r3, [r2, #0]
 801ed58:	e00d      	b.n	801ed76 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801ed5a:	683b      	ldr	r3, [r7, #0]
 801ed5c:	2b00      	cmp	r3, #0
 801ed5e:	d106      	bne.n	801ed6e <ip_reass_dequeue_datagram+0x32>
 801ed60:	4b0a      	ldr	r3, [pc, #40]	@ (801ed8c <ip_reass_dequeue_datagram+0x50>)
 801ed62:	f240 1245 	movw	r2, #325	@ 0x145
 801ed66:	490a      	ldr	r1, [pc, #40]	@ (801ed90 <ip_reass_dequeue_datagram+0x54>)
 801ed68:	480a      	ldr	r0, [pc, #40]	@ (801ed94 <ip_reass_dequeue_datagram+0x58>)
 801ed6a:	f002 f9ab 	bl	80210c4 <iprintf>
    prev->next = ipr->next;
 801ed6e:	687b      	ldr	r3, [r7, #4]
 801ed70:	681a      	ldr	r2, [r3, #0]
 801ed72:	683b      	ldr	r3, [r7, #0]
 801ed74:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801ed76:	6879      	ldr	r1, [r7, #4]
 801ed78:	2004      	movs	r0, #4
 801ed7a:	f7f5 fb15 	bl	80143a8 <memp_free>
}
 801ed7e:	bf00      	nop
 801ed80:	3708      	adds	r7, #8
 801ed82:	46bd      	mov	sp, r7
 801ed84:	bd80      	pop	{r7, pc}
 801ed86:	bf00      	nop
 801ed88:	20028570 	.word	0x20028570
 801ed8c:	0802686c 	.word	0x0802686c
 801ed90:	08026934 	.word	0x08026934
 801ed94:	080268b4 	.word	0x080268b4

0801ed98 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801ed98:	b580      	push	{r7, lr}
 801ed9a:	b08c      	sub	sp, #48	@ 0x30
 801ed9c:	af00      	add	r7, sp, #0
 801ed9e:	60f8      	str	r0, [r7, #12]
 801eda0:	60b9      	str	r1, [r7, #8]
 801eda2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801eda4:	2300      	movs	r3, #0
 801eda6:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801eda8:	2301      	movs	r3, #1
 801edaa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801edac:	68bb      	ldr	r3, [r7, #8]
 801edae:	685b      	ldr	r3, [r3, #4]
 801edb0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801edb2:	69fb      	ldr	r3, [r7, #28]
 801edb4:	885b      	ldrh	r3, [r3, #2]
 801edb6:	b29b      	uxth	r3, r3
 801edb8:	4618      	mov	r0, r3
 801edba:	f7f4 fb69 	bl	8013490 <lwip_htons>
 801edbe:	4603      	mov	r3, r0
 801edc0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801edc2:	69fb      	ldr	r3, [r7, #28]
 801edc4:	781b      	ldrb	r3, [r3, #0]
 801edc6:	f003 030f 	and.w	r3, r3, #15
 801edca:	b2db      	uxtb	r3, r3
 801edcc:	009b      	lsls	r3, r3, #2
 801edce:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801edd0:	7e7b      	ldrb	r3, [r7, #25]
 801edd2:	b29b      	uxth	r3, r3
 801edd4:	8b7a      	ldrh	r2, [r7, #26]
 801edd6:	429a      	cmp	r2, r3
 801edd8:	d202      	bcs.n	801ede0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801edda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801edde:	e135      	b.n	801f04c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801ede0:	7e7b      	ldrb	r3, [r7, #25]
 801ede2:	b29b      	uxth	r3, r3
 801ede4:	8b7a      	ldrh	r2, [r7, #26]
 801ede6:	1ad3      	subs	r3, r2, r3
 801ede8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801edea:	69fb      	ldr	r3, [r7, #28]
 801edec:	88db      	ldrh	r3, [r3, #6]
 801edee:	b29b      	uxth	r3, r3
 801edf0:	4618      	mov	r0, r3
 801edf2:	f7f4 fb4d 	bl	8013490 <lwip_htons>
 801edf6:	4603      	mov	r3, r0
 801edf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801edfc:	b29b      	uxth	r3, r3
 801edfe:	00db      	lsls	r3, r3, #3
 801ee00:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801ee02:	68bb      	ldr	r3, [r7, #8]
 801ee04:	685b      	ldr	r3, [r3, #4]
 801ee06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801ee08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ee0a:	2200      	movs	r2, #0
 801ee0c:	701a      	strb	r2, [r3, #0]
 801ee0e:	2200      	movs	r2, #0
 801ee10:	705a      	strb	r2, [r3, #1]
 801ee12:	2200      	movs	r2, #0
 801ee14:	709a      	strb	r2, [r3, #2]
 801ee16:	2200      	movs	r2, #0
 801ee18:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801ee1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ee1c:	8afa      	ldrh	r2, [r7, #22]
 801ee1e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801ee20:	8afa      	ldrh	r2, [r7, #22]
 801ee22:	8b7b      	ldrh	r3, [r7, #26]
 801ee24:	4413      	add	r3, r2
 801ee26:	b29a      	uxth	r2, r3
 801ee28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ee2a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801ee2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ee2e:	88db      	ldrh	r3, [r3, #6]
 801ee30:	b29b      	uxth	r3, r3
 801ee32:	8afa      	ldrh	r2, [r7, #22]
 801ee34:	429a      	cmp	r2, r3
 801ee36:	d902      	bls.n	801ee3e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ee38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ee3c:	e106      	b.n	801f04c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801ee3e:	68fb      	ldr	r3, [r7, #12]
 801ee40:	685b      	ldr	r3, [r3, #4]
 801ee42:	627b      	str	r3, [r7, #36]	@ 0x24
 801ee44:	e068      	b.n	801ef18 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801ee46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ee48:	685b      	ldr	r3, [r3, #4]
 801ee4a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801ee4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ee4e:	889b      	ldrh	r3, [r3, #4]
 801ee50:	b29a      	uxth	r2, r3
 801ee52:	693b      	ldr	r3, [r7, #16]
 801ee54:	889b      	ldrh	r3, [r3, #4]
 801ee56:	b29b      	uxth	r3, r3
 801ee58:	429a      	cmp	r2, r3
 801ee5a:	d235      	bcs.n	801eec8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801ee5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ee5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ee60:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801ee62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ee64:	2b00      	cmp	r3, #0
 801ee66:	d020      	beq.n	801eeaa <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801ee68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ee6a:	889b      	ldrh	r3, [r3, #4]
 801ee6c:	b29a      	uxth	r2, r3
 801ee6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ee70:	88db      	ldrh	r3, [r3, #6]
 801ee72:	b29b      	uxth	r3, r3
 801ee74:	429a      	cmp	r2, r3
 801ee76:	d307      	bcc.n	801ee88 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801ee78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ee7a:	88db      	ldrh	r3, [r3, #6]
 801ee7c:	b29a      	uxth	r2, r3
 801ee7e:	693b      	ldr	r3, [r7, #16]
 801ee80:	889b      	ldrh	r3, [r3, #4]
 801ee82:	b29b      	uxth	r3, r3
 801ee84:	429a      	cmp	r2, r3
 801ee86:	d902      	bls.n	801ee8e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ee88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ee8c:	e0de      	b.n	801f04c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801ee8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ee90:	68ba      	ldr	r2, [r7, #8]
 801ee92:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801ee94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ee96:	88db      	ldrh	r3, [r3, #6]
 801ee98:	b29a      	uxth	r2, r3
 801ee9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ee9c:	889b      	ldrh	r3, [r3, #4]
 801ee9e:	b29b      	uxth	r3, r3
 801eea0:	429a      	cmp	r2, r3
 801eea2:	d03d      	beq.n	801ef20 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801eea4:	2300      	movs	r3, #0
 801eea6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801eea8:	e03a      	b.n	801ef20 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801eeaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eeac:	88db      	ldrh	r3, [r3, #6]
 801eeae:	b29a      	uxth	r2, r3
 801eeb0:	693b      	ldr	r3, [r7, #16]
 801eeb2:	889b      	ldrh	r3, [r3, #4]
 801eeb4:	b29b      	uxth	r3, r3
 801eeb6:	429a      	cmp	r2, r3
 801eeb8:	d902      	bls.n	801eec0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801eeba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801eebe:	e0c5      	b.n	801f04c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801eec0:	68fb      	ldr	r3, [r7, #12]
 801eec2:	68ba      	ldr	r2, [r7, #8]
 801eec4:	605a      	str	r2, [r3, #4]
      break;
 801eec6:	e02b      	b.n	801ef20 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801eec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eeca:	889b      	ldrh	r3, [r3, #4]
 801eecc:	b29a      	uxth	r2, r3
 801eece:	693b      	ldr	r3, [r7, #16]
 801eed0:	889b      	ldrh	r3, [r3, #4]
 801eed2:	b29b      	uxth	r3, r3
 801eed4:	429a      	cmp	r2, r3
 801eed6:	d102      	bne.n	801eede <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801eed8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801eedc:	e0b6      	b.n	801f04c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801eede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eee0:	889b      	ldrh	r3, [r3, #4]
 801eee2:	b29a      	uxth	r2, r3
 801eee4:	693b      	ldr	r3, [r7, #16]
 801eee6:	88db      	ldrh	r3, [r3, #6]
 801eee8:	b29b      	uxth	r3, r3
 801eeea:	429a      	cmp	r2, r3
 801eeec:	d202      	bcs.n	801eef4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801eeee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801eef2:	e0ab      	b.n	801f04c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801eef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801eef6:	2b00      	cmp	r3, #0
 801eef8:	d009      	beq.n	801ef0e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801eefa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801eefc:	88db      	ldrh	r3, [r3, #6]
 801eefe:	b29a      	uxth	r2, r3
 801ef00:	693b      	ldr	r3, [r7, #16]
 801ef02:	889b      	ldrh	r3, [r3, #4]
 801ef04:	b29b      	uxth	r3, r3
 801ef06:	429a      	cmp	r2, r3
 801ef08:	d001      	beq.n	801ef0e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801ef0a:	2300      	movs	r3, #0
 801ef0c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801ef0e:	693b      	ldr	r3, [r7, #16]
 801ef10:	681b      	ldr	r3, [r3, #0]
 801ef12:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801ef14:	693b      	ldr	r3, [r7, #16]
 801ef16:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801ef18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ef1a:	2b00      	cmp	r3, #0
 801ef1c:	d193      	bne.n	801ee46 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801ef1e:	e000      	b.n	801ef22 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801ef20:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801ef22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ef24:	2b00      	cmp	r3, #0
 801ef26:	d12d      	bne.n	801ef84 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801ef28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ef2a:	2b00      	cmp	r3, #0
 801ef2c:	d01c      	beq.n	801ef68 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801ef2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ef30:	88db      	ldrh	r3, [r3, #6]
 801ef32:	b29a      	uxth	r2, r3
 801ef34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ef36:	889b      	ldrh	r3, [r3, #4]
 801ef38:	b29b      	uxth	r3, r3
 801ef3a:	429a      	cmp	r2, r3
 801ef3c:	d906      	bls.n	801ef4c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801ef3e:	4b45      	ldr	r3, [pc, #276]	@ (801f054 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ef40:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801ef44:	4944      	ldr	r1, [pc, #272]	@ (801f058 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801ef46:	4845      	ldr	r0, [pc, #276]	@ (801f05c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ef48:	f002 f8bc 	bl	80210c4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801ef4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ef4e:	68ba      	ldr	r2, [r7, #8]
 801ef50:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801ef52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ef54:	88db      	ldrh	r3, [r3, #6]
 801ef56:	b29a      	uxth	r2, r3
 801ef58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ef5a:	889b      	ldrh	r3, [r3, #4]
 801ef5c:	b29b      	uxth	r3, r3
 801ef5e:	429a      	cmp	r2, r3
 801ef60:	d010      	beq.n	801ef84 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801ef62:	2300      	movs	r3, #0
 801ef64:	623b      	str	r3, [r7, #32]
 801ef66:	e00d      	b.n	801ef84 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801ef68:	68fb      	ldr	r3, [r7, #12]
 801ef6a:	685b      	ldr	r3, [r3, #4]
 801ef6c:	2b00      	cmp	r3, #0
 801ef6e:	d006      	beq.n	801ef7e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801ef70:	4b38      	ldr	r3, [pc, #224]	@ (801f054 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ef72:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801ef76:	493a      	ldr	r1, [pc, #232]	@ (801f060 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801ef78:	4838      	ldr	r0, [pc, #224]	@ (801f05c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ef7a:	f002 f8a3 	bl	80210c4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801ef7e:	68fb      	ldr	r3, [r7, #12]
 801ef80:	68ba      	ldr	r2, [r7, #8]
 801ef82:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801ef84:	687b      	ldr	r3, [r7, #4]
 801ef86:	2b00      	cmp	r3, #0
 801ef88:	d105      	bne.n	801ef96 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801ef8a:	68fb      	ldr	r3, [r7, #12]
 801ef8c:	7f9b      	ldrb	r3, [r3, #30]
 801ef8e:	f003 0301 	and.w	r3, r3, #1
 801ef92:	2b00      	cmp	r3, #0
 801ef94:	d059      	beq.n	801f04a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801ef96:	6a3b      	ldr	r3, [r7, #32]
 801ef98:	2b00      	cmp	r3, #0
 801ef9a:	d04f      	beq.n	801f03c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801ef9c:	68fb      	ldr	r3, [r7, #12]
 801ef9e:	685b      	ldr	r3, [r3, #4]
 801efa0:	2b00      	cmp	r3, #0
 801efa2:	d006      	beq.n	801efb2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801efa4:	68fb      	ldr	r3, [r7, #12]
 801efa6:	685b      	ldr	r3, [r3, #4]
 801efa8:	685b      	ldr	r3, [r3, #4]
 801efaa:	889b      	ldrh	r3, [r3, #4]
 801efac:	b29b      	uxth	r3, r3
 801efae:	2b00      	cmp	r3, #0
 801efb0:	d002      	beq.n	801efb8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801efb2:	2300      	movs	r3, #0
 801efb4:	623b      	str	r3, [r7, #32]
 801efb6:	e041      	b.n	801f03c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801efb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801efba:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801efbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801efbe:	681b      	ldr	r3, [r3, #0]
 801efc0:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801efc2:	e012      	b.n	801efea <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801efc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801efc6:	685b      	ldr	r3, [r3, #4]
 801efc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801efca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801efcc:	88db      	ldrh	r3, [r3, #6]
 801efce:	b29a      	uxth	r2, r3
 801efd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801efd2:	889b      	ldrh	r3, [r3, #4]
 801efd4:	b29b      	uxth	r3, r3
 801efd6:	429a      	cmp	r2, r3
 801efd8:	d002      	beq.n	801efe0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801efda:	2300      	movs	r3, #0
 801efdc:	623b      	str	r3, [r7, #32]
            break;
 801efde:	e007      	b.n	801eff0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801efe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801efe2:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801efe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801efe6:	681b      	ldr	r3, [r3, #0]
 801efe8:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801efea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801efec:	2b00      	cmp	r3, #0
 801efee:	d1e9      	bne.n	801efc4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801eff0:	6a3b      	ldr	r3, [r7, #32]
 801eff2:	2b00      	cmp	r3, #0
 801eff4:	d022      	beq.n	801f03c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801eff6:	68fb      	ldr	r3, [r7, #12]
 801eff8:	685b      	ldr	r3, [r3, #4]
 801effa:	2b00      	cmp	r3, #0
 801effc:	d106      	bne.n	801f00c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801effe:	4b15      	ldr	r3, [pc, #84]	@ (801f054 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801f000:	f240 12df 	movw	r2, #479	@ 0x1df
 801f004:	4917      	ldr	r1, [pc, #92]	@ (801f064 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801f006:	4815      	ldr	r0, [pc, #84]	@ (801f05c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801f008:	f002 f85c 	bl	80210c4 <iprintf>
          LWIP_ASSERT("sanity check",
 801f00c:	68fb      	ldr	r3, [r7, #12]
 801f00e:	685b      	ldr	r3, [r3, #4]
 801f010:	685b      	ldr	r3, [r3, #4]
 801f012:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801f014:	429a      	cmp	r2, r3
 801f016:	d106      	bne.n	801f026 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801f018:	4b0e      	ldr	r3, [pc, #56]	@ (801f054 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801f01a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801f01e:	4911      	ldr	r1, [pc, #68]	@ (801f064 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801f020:	480e      	ldr	r0, [pc, #56]	@ (801f05c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801f022:	f002 f84f 	bl	80210c4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801f026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f028:	681b      	ldr	r3, [r3, #0]
 801f02a:	2b00      	cmp	r3, #0
 801f02c:	d006      	beq.n	801f03c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801f02e:	4b09      	ldr	r3, [pc, #36]	@ (801f054 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801f030:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801f034:	490c      	ldr	r1, [pc, #48]	@ (801f068 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801f036:	4809      	ldr	r0, [pc, #36]	@ (801f05c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801f038:	f002 f844 	bl	80210c4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801f03c:	6a3b      	ldr	r3, [r7, #32]
 801f03e:	2b00      	cmp	r3, #0
 801f040:	bf14      	ite	ne
 801f042:	2301      	movne	r3, #1
 801f044:	2300      	moveq	r3, #0
 801f046:	b2db      	uxtb	r3, r3
 801f048:	e000      	b.n	801f04c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801f04a:	2300      	movs	r3, #0
}
 801f04c:	4618      	mov	r0, r3
 801f04e:	3730      	adds	r7, #48	@ 0x30
 801f050:	46bd      	mov	sp, r7
 801f052:	bd80      	pop	{r7, pc}
 801f054:	0802686c 	.word	0x0802686c
 801f058:	08026950 	.word	0x08026950
 801f05c:	080268b4 	.word	0x080268b4
 801f060:	08026970 	.word	0x08026970
 801f064:	080269a8 	.word	0x080269a8
 801f068:	080269b8 	.word	0x080269b8

0801f06c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801f06c:	b580      	push	{r7, lr}
 801f06e:	b08e      	sub	sp, #56	@ 0x38
 801f070:	af00      	add	r7, sp, #0
 801f072:	6078      	str	r0, [r7, #4]
  u16_t offset, len, clen;
  u8_t hlen;
  int valid;
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
 801f074:	4b9d      	ldr	r3, [pc, #628]	@ (801f2ec <ip4_reass+0x280>)
 801f076:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801f078:	3301      	adds	r3, #1
 801f07a:	b29a      	uxth	r2, r3
 801f07c:	4b9b      	ldr	r3, [pc, #620]	@ (801f2ec <ip4_reass+0x280>)
 801f07e:	865a      	strh	r2, [r3, #50]	@ 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801f080:	687b      	ldr	r3, [r7, #4]
 801f082:	685b      	ldr	r3, [r3, #4]
 801f084:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801f086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f088:	781b      	ldrb	r3, [r3, #0]
 801f08a:	f003 030f 	and.w	r3, r3, #15
 801f08e:	b2db      	uxtb	r3, r3
 801f090:	009b      	lsls	r3, r3, #2
 801f092:	b2db      	uxtb	r3, r3
 801f094:	2b14      	cmp	r3, #20
 801f096:	d008      	beq.n	801f0aa <ip4_reass+0x3e>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
 801f098:	4b94      	ldr	r3, [pc, #592]	@ (801f2ec <ip4_reass+0x280>)
 801f09a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 801f09e:	3301      	adds	r3, #1
 801f0a0:	b29a      	uxth	r2, r3
 801f0a2:	4b92      	ldr	r3, [pc, #584]	@ (801f2ec <ip4_reass+0x280>)
 801f0a4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    goto nullreturn;
 801f0a8:	e17c      	b.n	801f3a4 <ip4_reass+0x338>
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801f0aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f0ac:	88db      	ldrh	r3, [r3, #6]
 801f0ae:	b29b      	uxth	r3, r3
 801f0b0:	4618      	mov	r0, r3
 801f0b2:	f7f4 f9ed 	bl	8013490 <lwip_htons>
 801f0b6:	4603      	mov	r3, r0
 801f0b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f0bc:	b29b      	uxth	r3, r3
 801f0be:	00db      	lsls	r3, r3, #3
 801f0c0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801f0c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f0c4:	885b      	ldrh	r3, [r3, #2]
 801f0c6:	b29b      	uxth	r3, r3
 801f0c8:	4618      	mov	r0, r3
 801f0ca:	f7f4 f9e1 	bl	8013490 <lwip_htons>
 801f0ce:	4603      	mov	r3, r0
 801f0d0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801f0d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f0d4:	781b      	ldrb	r3, [r3, #0]
 801f0d6:	f003 030f 	and.w	r3, r3, #15
 801f0da:	b2db      	uxtb	r3, r3
 801f0dc:	009b      	lsls	r3, r3, #2
 801f0de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801f0e2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801f0e6:	b29b      	uxth	r3, r3
 801f0e8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801f0ea:	429a      	cmp	r2, r3
 801f0ec:	f0c0 8157 	bcc.w	801f39e <ip4_reass+0x332>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801f0f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801f0f4:	b29b      	uxth	r3, r3
 801f0f6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801f0f8:	1ad3      	subs	r3, r2, r3
 801f0fa:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801f0fc:	6878      	ldr	r0, [r7, #4]
 801f0fe:	f7f6 f9e7 	bl	80154d0 <pbuf_clen>
 801f102:	4603      	mov	r3, r0
 801f104:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801f106:	4b7a      	ldr	r3, [pc, #488]	@ (801f2f0 <ip4_reass+0x284>)
 801f108:	881b      	ldrh	r3, [r3, #0]
 801f10a:	461a      	mov	r2, r3
 801f10c:	8c3b      	ldrh	r3, [r7, #32]
 801f10e:	4413      	add	r3, r2
 801f110:	2b0a      	cmp	r3, #10
 801f112:	dd15      	ble.n	801f140 <ip4_reass+0xd4>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801f114:	8c3b      	ldrh	r3, [r7, #32]
 801f116:	4619      	mov	r1, r3
 801f118:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801f11a:	f7ff fd63 	bl	801ebe4 <ip_reass_remove_oldest_datagram>
 801f11e:	4603      	mov	r3, r0
 801f120:	2b00      	cmp	r3, #0
 801f122:	d006      	beq.n	801f132 <ip4_reass+0xc6>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801f124:	4b72      	ldr	r3, [pc, #456]	@ (801f2f0 <ip4_reass+0x284>)
 801f126:	881b      	ldrh	r3, [r3, #0]
 801f128:	461a      	mov	r2, r3
 801f12a:	8c3b      	ldrh	r3, [r7, #32]
 801f12c:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801f12e:	2b0a      	cmp	r3, #10
 801f130:	dd06      	ble.n	801f140 <ip4_reass+0xd4>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
                                   ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
 801f132:	4b6e      	ldr	r3, [pc, #440]	@ (801f2ec <ip4_reass+0x280>)
 801f134:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801f136:	3301      	adds	r3, #1
 801f138:	b29a      	uxth	r2, r3
 801f13a:	4b6c      	ldr	r3, [pc, #432]	@ (801f2ec <ip4_reass+0x280>)
 801f13c:	879a      	strh	r2, [r3, #60]	@ 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
 801f13e:	e131      	b.n	801f3a4 <ip4_reass+0x338>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801f140:	4b6c      	ldr	r3, [pc, #432]	@ (801f2f4 <ip4_reass+0x288>)
 801f142:	681b      	ldr	r3, [r3, #0]
 801f144:	633b      	str	r3, [r7, #48]	@ 0x30
 801f146:	e01e      	b.n	801f186 <ip4_reass+0x11a>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801f148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f14a:	695a      	ldr	r2, [r3, #20]
 801f14c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f14e:	68db      	ldr	r3, [r3, #12]
 801f150:	429a      	cmp	r2, r3
 801f152:	d115      	bne.n	801f180 <ip4_reass+0x114>
 801f154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f156:	699a      	ldr	r2, [r3, #24]
 801f158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f15a:	691b      	ldr	r3, [r3, #16]
 801f15c:	429a      	cmp	r2, r3
 801f15e:	d10f      	bne.n	801f180 <ip4_reass+0x114>
 801f160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f162:	899a      	ldrh	r2, [r3, #12]
 801f164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f166:	889b      	ldrh	r3, [r3, #4]
 801f168:	b29b      	uxth	r3, r3
 801f16a:	429a      	cmp	r2, r3
 801f16c:	d108      	bne.n	801f180 <ip4_reass+0x114>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
 801f16e:	4b5f      	ldr	r3, [pc, #380]	@ (801f2ec <ip4_reass+0x280>)
 801f170:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801f174:	3301      	adds	r3, #1
 801f176:	b29a      	uxth	r2, r3
 801f178:	4b5c      	ldr	r3, [pc, #368]	@ (801f2ec <ip4_reass+0x280>)
 801f17a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      break;
 801f17e:	e005      	b.n	801f18c <ip4_reass+0x120>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801f180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f182:	681b      	ldr	r3, [r3, #0]
 801f184:	633b      	str	r3, [r7, #48]	@ 0x30
 801f186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f188:	2b00      	cmp	r3, #0
 801f18a:	d1dd      	bne.n	801f148 <ip4_reass+0xdc>
    }
  }

  if (ipr == NULL) {
 801f18c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f18e:	2b00      	cmp	r3, #0
 801f190:	d109      	bne.n	801f1a6 <ip4_reass+0x13a>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801f192:	8c3b      	ldrh	r3, [r7, #32]
 801f194:	4619      	mov	r1, r3
 801f196:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801f198:	f7ff fd86 	bl	801eca8 <ip_reass_enqueue_new_datagram>
 801f19c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801f19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f1a0:	2b00      	cmp	r3, #0
 801f1a2:	d11c      	bne.n	801f1de <ip4_reass+0x172>
      goto nullreturn;
 801f1a4:	e0fe      	b.n	801f3a4 <ip4_reass+0x338>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801f1a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f1a8:	88db      	ldrh	r3, [r3, #6]
 801f1aa:	b29b      	uxth	r3, r3
 801f1ac:	4618      	mov	r0, r3
 801f1ae:	f7f4 f96f 	bl	8013490 <lwip_htons>
 801f1b2:	4603      	mov	r3, r0
 801f1b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f1b8:	2b00      	cmp	r3, #0
 801f1ba:	d110      	bne.n	801f1de <ip4_reass+0x172>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801f1bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f1be:	89db      	ldrh	r3, [r3, #14]
 801f1c0:	4618      	mov	r0, r3
 801f1c2:	f7f4 f965 	bl	8013490 <lwip_htons>
 801f1c6:	4603      	mov	r3, r0
 801f1c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801f1cc:	2b00      	cmp	r3, #0
 801f1ce:	d006      	beq.n	801f1de <ip4_reass+0x172>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801f1d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f1d2:	3308      	adds	r3, #8
 801f1d4:	2214      	movs	r2, #20
 801f1d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801f1d8:	4618      	mov	r0, r3
 801f1da:	f002 f998 	bl	802150e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801f1de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f1e0:	88db      	ldrh	r3, [r3, #6]
 801f1e2:	b29b      	uxth	r3, r3
 801f1e4:	f003 0320 	and.w	r3, r3, #32
 801f1e8:	2b00      	cmp	r3, #0
 801f1ea:	bf0c      	ite	eq
 801f1ec:	2301      	moveq	r3, #1
 801f1ee:	2300      	movne	r3, #0
 801f1f0:	b2db      	uxtb	r3, r3
 801f1f2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801f1f4:	69fb      	ldr	r3, [r7, #28]
 801f1f6:	2b00      	cmp	r3, #0
 801f1f8:	d00e      	beq.n	801f218 <ip4_reass+0x1ac>
    u16_t datagram_len = (u16_t)(offset + len);
 801f1fa:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801f1fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801f1fe:	4413      	add	r3, r2
 801f200:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801f202:	8b7a      	ldrh	r2, [r7, #26]
 801f204:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801f206:	429a      	cmp	r2, r3
 801f208:	f0c0 80a7 	bcc.w	801f35a <ip4_reass+0x2ee>
 801f20c:	8b7b      	ldrh	r3, [r7, #26]
 801f20e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801f212:	4293      	cmp	r3, r2
 801f214:	f200 80a1 	bhi.w	801f35a <ip4_reass+0x2ee>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801f218:	69fa      	ldr	r2, [r7, #28]
 801f21a:	6879      	ldr	r1, [r7, #4]
 801f21c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801f21e:	f7ff fdbb 	bl	801ed98 <ip_reass_chain_frag_into_datagram_and_validate>
 801f222:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801f224:	697b      	ldr	r3, [r7, #20]
 801f226:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801f22a:	f000 8098 	beq.w	801f35e <ip4_reass+0x2f2>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801f22e:	4b30      	ldr	r3, [pc, #192]	@ (801f2f0 <ip4_reass+0x284>)
 801f230:	881a      	ldrh	r2, [r3, #0]
 801f232:	8c3b      	ldrh	r3, [r7, #32]
 801f234:	4413      	add	r3, r2
 801f236:	b29a      	uxth	r2, r3
 801f238:	4b2d      	ldr	r3, [pc, #180]	@ (801f2f0 <ip4_reass+0x284>)
 801f23a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801f23c:	69fb      	ldr	r3, [r7, #28]
 801f23e:	2b00      	cmp	r3, #0
 801f240:	d00d      	beq.n	801f25e <ip4_reass+0x1f2>
    u16_t datagram_len = (u16_t)(offset + len);
 801f242:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801f244:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801f246:	4413      	add	r3, r2
 801f248:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801f24a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f24c:	8a7a      	ldrh	r2, [r7, #18]
 801f24e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801f250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f252:	7f9b      	ldrb	r3, [r3, #30]
 801f254:	f043 0301 	orr.w	r3, r3, #1
 801f258:	b2da      	uxtb	r2, r3
 801f25a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f25c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801f25e:	697b      	ldr	r3, [r7, #20]
 801f260:	2b01      	cmp	r3, #1
 801f262:	d178      	bne.n	801f356 <ip4_reass+0x2ea>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801f264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f266:	8b9b      	ldrh	r3, [r3, #28]
 801f268:	3314      	adds	r3, #20
 801f26a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801f26c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f26e:	685b      	ldr	r3, [r3, #4]
 801f270:	685b      	ldr	r3, [r3, #4]
 801f272:	681b      	ldr	r3, [r3, #0]
 801f274:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801f276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f278:	685b      	ldr	r3, [r3, #4]
 801f27a:	685b      	ldr	r3, [r3, #4]
 801f27c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801f27e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f280:	3308      	adds	r3, #8
 801f282:	2214      	movs	r2, #20
 801f284:	4619      	mov	r1, r3
 801f286:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801f288:	f002 f941 	bl	802150e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801f28c:	8a3b      	ldrh	r3, [r7, #16]
 801f28e:	4618      	mov	r0, r3
 801f290:	f7f4 f8fe 	bl	8013490 <lwip_htons>
 801f294:	4603      	mov	r3, r0
 801f296:	461a      	mov	r2, r3
 801f298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f29a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801f29c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f29e:	2200      	movs	r2, #0
 801f2a0:	719a      	strb	r2, [r3, #6]
 801f2a2:	2200      	movs	r2, #0
 801f2a4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801f2a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f2a8:	2200      	movs	r2, #0
 801f2aa:	729a      	strb	r2, [r3, #10]
 801f2ac:	2200      	movs	r2, #0
 801f2ae:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801f2b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f2b2:	685b      	ldr	r3, [r3, #4]
 801f2b4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801f2b6:	e00d      	b.n	801f2d4 <ip4_reass+0x268>
      iprh = (struct ip_reass_helper *)r->payload;
 801f2b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f2ba:	685b      	ldr	r3, [r3, #4]
 801f2bc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801f2be:	2114      	movs	r1, #20
 801f2c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801f2c2:	f7f5 ffd1 	bl	8015268 <pbuf_remove_header>
      pbuf_cat(p, r);
 801f2c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801f2c8:	6878      	ldr	r0, [r7, #4]
 801f2ca:	f7f6 f941 	bl	8015550 <pbuf_cat>
      r = iprh->next_pbuf;
 801f2ce:	68fb      	ldr	r3, [r7, #12]
 801f2d0:	681b      	ldr	r3, [r3, #0]
 801f2d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (r != NULL) {
 801f2d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f2d6:	2b00      	cmp	r3, #0
 801f2d8:	d1ee      	bne.n	801f2b8 <ip4_reass+0x24c>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801f2da:	4b06      	ldr	r3, [pc, #24]	@ (801f2f4 <ip4_reass+0x288>)
 801f2dc:	681b      	ldr	r3, [r3, #0]
 801f2de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801f2e0:	429a      	cmp	r2, r3
 801f2e2:	d109      	bne.n	801f2f8 <ip4_reass+0x28c>
      ipr_prev = NULL;
 801f2e4:	2300      	movs	r3, #0
 801f2e6:	637b      	str	r3, [r7, #52]	@ 0x34
 801f2e8:	e017      	b.n	801f31a <ip4_reass+0x2ae>
 801f2ea:	bf00      	nop
 801f2ec:	20028318 	.word	0x20028318
 801f2f0:	20028574 	.word	0x20028574
 801f2f4:	20028570 	.word	0x20028570
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801f2f8:	4b31      	ldr	r3, [pc, #196]	@ (801f3c0 <ip4_reass+0x354>)
 801f2fa:	681b      	ldr	r3, [r3, #0]
 801f2fc:	637b      	str	r3, [r7, #52]	@ 0x34
 801f2fe:	e007      	b.n	801f310 <ip4_reass+0x2a4>
        if (ipr_prev->next == ipr) {
 801f300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f302:	681b      	ldr	r3, [r3, #0]
 801f304:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801f306:	429a      	cmp	r2, r3
 801f308:	d006      	beq.n	801f318 <ip4_reass+0x2ac>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801f30a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f30c:	681b      	ldr	r3, [r3, #0]
 801f30e:	637b      	str	r3, [r7, #52]	@ 0x34
 801f310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f312:	2b00      	cmp	r3, #0
 801f314:	d1f4      	bne.n	801f300 <ip4_reass+0x294>
 801f316:	e000      	b.n	801f31a <ip4_reass+0x2ae>
          break;
 801f318:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801f31a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801f31c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801f31e:	f7ff fd0d 	bl	801ed3c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801f322:	6878      	ldr	r0, [r7, #4]
 801f324:	f7f6 f8d4 	bl	80154d0 <pbuf_clen>
 801f328:	4603      	mov	r3, r0
 801f32a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801f32c:	4b25      	ldr	r3, [pc, #148]	@ (801f3c4 <ip4_reass+0x358>)
 801f32e:	881b      	ldrh	r3, [r3, #0]
 801f330:	8c3a      	ldrh	r2, [r7, #32]
 801f332:	429a      	cmp	r2, r3
 801f334:	d906      	bls.n	801f344 <ip4_reass+0x2d8>
 801f336:	4b24      	ldr	r3, [pc, #144]	@ (801f3c8 <ip4_reass+0x35c>)
 801f338:	f240 229b 	movw	r2, #667	@ 0x29b
 801f33c:	4923      	ldr	r1, [pc, #140]	@ (801f3cc <ip4_reass+0x360>)
 801f33e:	4824      	ldr	r0, [pc, #144]	@ (801f3d0 <ip4_reass+0x364>)
 801f340:	f001 fec0 	bl	80210c4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801f344:	4b1f      	ldr	r3, [pc, #124]	@ (801f3c4 <ip4_reass+0x358>)
 801f346:	881a      	ldrh	r2, [r3, #0]
 801f348:	8c3b      	ldrh	r3, [r7, #32]
 801f34a:	1ad3      	subs	r3, r2, r3
 801f34c:	b29a      	uxth	r2, r3
 801f34e:	4b1d      	ldr	r3, [pc, #116]	@ (801f3c4 <ip4_reass+0x358>)
 801f350:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801f352:	687b      	ldr	r3, [r7, #4]
 801f354:	e030      	b.n	801f3b8 <ip4_reass+0x34c>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801f356:	2300      	movs	r3, #0
 801f358:	e02e      	b.n	801f3b8 <ip4_reass+0x34c>
      goto nullreturn_ipr;
 801f35a:	bf00      	nop
 801f35c:	e000      	b.n	801f360 <ip4_reass+0x2f4>
    goto nullreturn_ipr;
 801f35e:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801f360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f362:	2b00      	cmp	r3, #0
 801f364:	d106      	bne.n	801f374 <ip4_reass+0x308>
 801f366:	4b18      	ldr	r3, [pc, #96]	@ (801f3c8 <ip4_reass+0x35c>)
 801f368:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801f36c:	4919      	ldr	r1, [pc, #100]	@ (801f3d4 <ip4_reass+0x368>)
 801f36e:	4818      	ldr	r0, [pc, #96]	@ (801f3d0 <ip4_reass+0x364>)
 801f370:	f001 fea8 	bl	80210c4 <iprintf>
  if (ipr->p == NULL) {
 801f374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f376:	685b      	ldr	r3, [r3, #4]
 801f378:	2b00      	cmp	r3, #0
 801f37a:	d112      	bne.n	801f3a2 <ip4_reass+0x336>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801f37c:	4b10      	ldr	r3, [pc, #64]	@ (801f3c0 <ip4_reass+0x354>)
 801f37e:	681b      	ldr	r3, [r3, #0]
 801f380:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801f382:	429a      	cmp	r2, r3
 801f384:	d006      	beq.n	801f394 <ip4_reass+0x328>
 801f386:	4b10      	ldr	r3, [pc, #64]	@ (801f3c8 <ip4_reass+0x35c>)
 801f388:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801f38c:	4912      	ldr	r1, [pc, #72]	@ (801f3d8 <ip4_reass+0x36c>)
 801f38e:	4810      	ldr	r0, [pc, #64]	@ (801f3d0 <ip4_reass+0x364>)
 801f390:	f001 fe98 	bl	80210c4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801f394:	2100      	movs	r1, #0
 801f396:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801f398:	f7ff fcd0 	bl	801ed3c <ip_reass_dequeue_datagram>
 801f39c:	e002      	b.n	801f3a4 <ip4_reass+0x338>
    goto nullreturn;
 801f39e:	bf00      	nop
 801f3a0:	e000      	b.n	801f3a4 <ip4_reass+0x338>
  }

nullreturn:
 801f3a2:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
 801f3a4:	4b0d      	ldr	r3, [pc, #52]	@ (801f3dc <ip4_reass+0x370>)
 801f3a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801f3a8:	3301      	adds	r3, #1
 801f3aa:	b29a      	uxth	r2, r3
 801f3ac:	4b0b      	ldr	r3, [pc, #44]	@ (801f3dc <ip4_reass+0x370>)
 801f3ae:	86da      	strh	r2, [r3, #54]	@ 0x36
  pbuf_free(p);
 801f3b0:	6878      	ldr	r0, [r7, #4]
 801f3b2:	f7f5 ffe7 	bl	8015384 <pbuf_free>
  return NULL;
 801f3b6:	2300      	movs	r3, #0
}
 801f3b8:	4618      	mov	r0, r3
 801f3ba:	3738      	adds	r7, #56	@ 0x38
 801f3bc:	46bd      	mov	sp, r7
 801f3be:	bd80      	pop	{r7, pc}
 801f3c0:	20028570 	.word	0x20028570
 801f3c4:	20028574 	.word	0x20028574
 801f3c8:	0802686c 	.word	0x0802686c
 801f3cc:	080269dc 	.word	0x080269dc
 801f3d0:	080268b4 	.word	0x080268b4
 801f3d4:	080269f8 	.word	0x080269f8
 801f3d8:	08026a04 	.word	0x08026a04
 801f3dc:	20028318 	.word	0x20028318

0801f3e0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801f3e0:	b580      	push	{r7, lr}
 801f3e2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801f3e4:	f240 22bd 	movw	r2, #701	@ 0x2bd
 801f3e8:	4903      	ldr	r1, [pc, #12]	@ (801f3f8 <ip_frag_alloc_pbuf_custom_ref+0x18>)
 801f3ea:	2005      	movs	r0, #5
 801f3ec:	f7f4 ff4a 	bl	8014284 <memp_malloc_fn>
 801f3f0:	4603      	mov	r3, r0
}
 801f3f2:	4618      	mov	r0, r3
 801f3f4:	bd80      	pop	{r7, pc}
 801f3f6:	bf00      	nop
 801f3f8:	0802686c 	.word	0x0802686c

0801f3fc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801f3fc:	b580      	push	{r7, lr}
 801f3fe:	b082      	sub	sp, #8
 801f400:	af00      	add	r7, sp, #0
 801f402:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801f404:	687b      	ldr	r3, [r7, #4]
 801f406:	2b00      	cmp	r3, #0
 801f408:	d106      	bne.n	801f418 <ip_frag_free_pbuf_custom_ref+0x1c>
 801f40a:	4b07      	ldr	r3, [pc, #28]	@ (801f428 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801f40c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801f410:	4906      	ldr	r1, [pc, #24]	@ (801f42c <ip_frag_free_pbuf_custom_ref+0x30>)
 801f412:	4807      	ldr	r0, [pc, #28]	@ (801f430 <ip_frag_free_pbuf_custom_ref+0x34>)
 801f414:	f001 fe56 	bl	80210c4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801f418:	6879      	ldr	r1, [r7, #4]
 801f41a:	2005      	movs	r0, #5
 801f41c:	f7f4 ffc4 	bl	80143a8 <memp_free>
}
 801f420:	bf00      	nop
 801f422:	3708      	adds	r7, #8
 801f424:	46bd      	mov	sp, r7
 801f426:	bd80      	pop	{r7, pc}
 801f428:	0802686c 	.word	0x0802686c
 801f42c:	08026a24 	.word	0x08026a24
 801f430:	080268b4 	.word	0x080268b4

0801f434 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801f434:	b580      	push	{r7, lr}
 801f436:	b084      	sub	sp, #16
 801f438:	af00      	add	r7, sp, #0
 801f43a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801f43c:	687b      	ldr	r3, [r7, #4]
 801f43e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801f440:	68fb      	ldr	r3, [r7, #12]
 801f442:	2b00      	cmp	r3, #0
 801f444:	d106      	bne.n	801f454 <ipfrag_free_pbuf_custom+0x20>
 801f446:	4b11      	ldr	r3, [pc, #68]	@ (801f48c <ipfrag_free_pbuf_custom+0x58>)
 801f448:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801f44c:	4910      	ldr	r1, [pc, #64]	@ (801f490 <ipfrag_free_pbuf_custom+0x5c>)
 801f44e:	4811      	ldr	r0, [pc, #68]	@ (801f494 <ipfrag_free_pbuf_custom+0x60>)
 801f450:	f001 fe38 	bl	80210c4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801f454:	68fa      	ldr	r2, [r7, #12]
 801f456:	687b      	ldr	r3, [r7, #4]
 801f458:	429a      	cmp	r2, r3
 801f45a:	d006      	beq.n	801f46a <ipfrag_free_pbuf_custom+0x36>
 801f45c:	4b0b      	ldr	r3, [pc, #44]	@ (801f48c <ipfrag_free_pbuf_custom+0x58>)
 801f45e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801f462:	490d      	ldr	r1, [pc, #52]	@ (801f498 <ipfrag_free_pbuf_custom+0x64>)
 801f464:	480b      	ldr	r0, [pc, #44]	@ (801f494 <ipfrag_free_pbuf_custom+0x60>)
 801f466:	f001 fe2d 	bl	80210c4 <iprintf>
  if (pcr->original != NULL) {
 801f46a:	68fb      	ldr	r3, [r7, #12]
 801f46c:	695b      	ldr	r3, [r3, #20]
 801f46e:	2b00      	cmp	r3, #0
 801f470:	d004      	beq.n	801f47c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801f472:	68fb      	ldr	r3, [r7, #12]
 801f474:	695b      	ldr	r3, [r3, #20]
 801f476:	4618      	mov	r0, r3
 801f478:	f7f5 ff84 	bl	8015384 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801f47c:	68f8      	ldr	r0, [r7, #12]
 801f47e:	f7ff ffbd 	bl	801f3fc <ip_frag_free_pbuf_custom_ref>
}
 801f482:	bf00      	nop
 801f484:	3710      	adds	r7, #16
 801f486:	46bd      	mov	sp, r7
 801f488:	bd80      	pop	{r7, pc}
 801f48a:	bf00      	nop
 801f48c:	0802686c 	.word	0x0802686c
 801f490:	08026a30 	.word	0x08026a30
 801f494:	080268b4 	.word	0x080268b4
 801f498:	08026a3c 	.word	0x08026a3c

0801f49c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801f49c:	b580      	push	{r7, lr}
 801f49e:	b094      	sub	sp, #80	@ 0x50
 801f4a0:	af02      	add	r7, sp, #8
 801f4a2:	60f8      	str	r0, [r7, #12]
 801f4a4:	60b9      	str	r1, [r7, #8]
 801f4a6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801f4a8:	2300      	movs	r3, #0
 801f4aa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801f4ae:	68bb      	ldr	r3, [r7, #8]
 801f4b0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801f4b2:	3b14      	subs	r3, #20
 801f4b4:	2b00      	cmp	r3, #0
 801f4b6:	da00      	bge.n	801f4ba <ip4_frag+0x1e>
 801f4b8:	3307      	adds	r3, #7
 801f4ba:	10db      	asrs	r3, r3, #3
 801f4bc:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801f4be:	2314      	movs	r3, #20
 801f4c0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801f4c2:	68fb      	ldr	r3, [r7, #12]
 801f4c4:	685b      	ldr	r3, [r3, #4]
 801f4c6:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801f4c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f4ca:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801f4cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f4ce:	781b      	ldrb	r3, [r3, #0]
 801f4d0:	f003 030f 	and.w	r3, r3, #15
 801f4d4:	b2db      	uxtb	r3, r3
 801f4d6:	009b      	lsls	r3, r3, #2
 801f4d8:	b2db      	uxtb	r3, r3
 801f4da:	2b14      	cmp	r3, #20
 801f4dc:	d002      	beq.n	801f4e4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801f4de:	f06f 0305 	mvn.w	r3, #5
 801f4e2:	e116      	b.n	801f712 <ip4_frag+0x276>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801f4e4:	68fb      	ldr	r3, [r7, #12]
 801f4e6:	895b      	ldrh	r3, [r3, #10]
 801f4e8:	2b13      	cmp	r3, #19
 801f4ea:	d809      	bhi.n	801f500 <ip4_frag+0x64>
 801f4ec:	4b8b      	ldr	r3, [pc, #556]	@ (801f71c <ip4_frag+0x280>)
 801f4ee:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801f4f2:	498b      	ldr	r1, [pc, #556]	@ (801f720 <ip4_frag+0x284>)
 801f4f4:	488b      	ldr	r0, [pc, #556]	@ (801f724 <ip4_frag+0x288>)
 801f4f6:	f001 fde5 	bl	80210c4 <iprintf>
 801f4fa:	f06f 0305 	mvn.w	r3, #5
 801f4fe:	e108      	b.n	801f712 <ip4_frag+0x276>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801f500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f502:	88db      	ldrh	r3, [r3, #6]
 801f504:	b29b      	uxth	r3, r3
 801f506:	4618      	mov	r0, r3
 801f508:	f7f3 ffc2 	bl	8013490 <lwip_htons>
 801f50c:	4603      	mov	r3, r0
 801f50e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801f510:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801f512:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f516:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801f51a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801f51c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801f520:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801f522:	68fb      	ldr	r3, [r7, #12]
 801f524:	891b      	ldrh	r3, [r3, #8]
 801f526:	3b14      	subs	r3, #20
 801f528:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801f52c:	e0e7      	b.n	801f6fe <ip4_frag+0x262>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801f52e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801f530:	00db      	lsls	r3, r3, #3
 801f532:	b29b      	uxth	r3, r3
 801f534:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801f538:	4293      	cmp	r3, r2
 801f53a:	bf28      	it	cs
 801f53c:	4613      	movcs	r3, r2
 801f53e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801f540:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801f544:	2114      	movs	r1, #20
 801f546:	200e      	movs	r0, #14
 801f548:	f7f5 fbea 	bl	8014d20 <pbuf_alloc>
 801f54c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801f54e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f550:	2b00      	cmp	r3, #0
 801f552:	f000 80db 	beq.w	801f70c <ip4_frag+0x270>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801f556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f558:	895b      	ldrh	r3, [r3, #10]
 801f55a:	2b13      	cmp	r3, #19
 801f55c:	d806      	bhi.n	801f56c <ip4_frag+0xd0>
 801f55e:	4b6f      	ldr	r3, [pc, #444]	@ (801f71c <ip4_frag+0x280>)
 801f560:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801f564:	4970      	ldr	r1, [pc, #448]	@ (801f728 <ip4_frag+0x28c>)
 801f566:	486f      	ldr	r0, [pc, #444]	@ (801f724 <ip4_frag+0x288>)
 801f568:	f001 fdac 	bl	80210c4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801f56c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f56e:	685b      	ldr	r3, [r3, #4]
 801f570:	2214      	movs	r2, #20
 801f572:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801f574:	4618      	mov	r0, r3
 801f576:	f001 ffca 	bl	802150e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801f57a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f57c:	685b      	ldr	r3, [r3, #4]
 801f57e:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801f580:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801f582:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801f586:	e064      	b.n	801f652 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801f588:	68fb      	ldr	r3, [r7, #12]
 801f58a:	895a      	ldrh	r2, [r3, #10]
 801f58c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801f58e:	1ad3      	subs	r3, r2, r3
 801f590:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801f592:	68fb      	ldr	r3, [r7, #12]
 801f594:	895b      	ldrh	r3, [r3, #10]
 801f596:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801f598:	429a      	cmp	r2, r3
 801f59a:	d906      	bls.n	801f5aa <ip4_frag+0x10e>
 801f59c:	4b5f      	ldr	r3, [pc, #380]	@ (801f71c <ip4_frag+0x280>)
 801f59e:	f240 322d 	movw	r2, #813	@ 0x32d
 801f5a2:	4962      	ldr	r1, [pc, #392]	@ (801f72c <ip4_frag+0x290>)
 801f5a4:	485f      	ldr	r0, [pc, #380]	@ (801f724 <ip4_frag+0x288>)
 801f5a6:	f001 fd8d 	bl	80210c4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801f5aa:	8bfa      	ldrh	r2, [r7, #30]
 801f5ac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801f5b0:	4293      	cmp	r3, r2
 801f5b2:	bf28      	it	cs
 801f5b4:	4613      	movcs	r3, r2
 801f5b6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801f5ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801f5be:	2b00      	cmp	r3, #0
 801f5c0:	d105      	bne.n	801f5ce <ip4_frag+0x132>
        poff = 0;
 801f5c2:	2300      	movs	r3, #0
 801f5c4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801f5c6:	68fb      	ldr	r3, [r7, #12]
 801f5c8:	681b      	ldr	r3, [r3, #0]
 801f5ca:	60fb      	str	r3, [r7, #12]
        continue;
 801f5cc:	e041      	b.n	801f652 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801f5ce:	f7ff ff07 	bl	801f3e0 <ip_frag_alloc_pbuf_custom_ref>
 801f5d2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801f5d4:	69bb      	ldr	r3, [r7, #24]
 801f5d6:	2b00      	cmp	r3, #0
 801f5d8:	d103      	bne.n	801f5e2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801f5da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801f5dc:	f7f5 fed2 	bl	8015384 <pbuf_free>
        goto memerr;
 801f5e0:	e095      	b.n	801f70e <ip4_frag+0x272>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801f5e2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801f5e4:	68fb      	ldr	r3, [r7, #12]
 801f5e6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801f5e8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801f5ea:	4413      	add	r3, r2
 801f5ec:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801f5f0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801f5f4:	9201      	str	r2, [sp, #4]
 801f5f6:	9300      	str	r3, [sp, #0]
 801f5f8:	4603      	mov	r3, r0
 801f5fa:	2241      	movs	r2, #65	@ 0x41
 801f5fc:	2000      	movs	r0, #0
 801f5fe:	f7f5 fcdf 	bl	8014fc0 <pbuf_alloced_custom>
 801f602:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801f604:	697b      	ldr	r3, [r7, #20]
 801f606:	2b00      	cmp	r3, #0
 801f608:	d106      	bne.n	801f618 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801f60a:	69b8      	ldr	r0, [r7, #24]
 801f60c:	f7ff fef6 	bl	801f3fc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801f610:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801f612:	f7f5 feb7 	bl	8015384 <pbuf_free>
        goto memerr;
 801f616:	e07a      	b.n	801f70e <ip4_frag+0x272>
      }
      pbuf_ref(p);
 801f618:	68f8      	ldr	r0, [r7, #12]
 801f61a:	f7f5 ff71 	bl	8015500 <pbuf_ref>
      pcr->original = p;
 801f61e:	69bb      	ldr	r3, [r7, #24]
 801f620:	68fa      	ldr	r2, [r7, #12]
 801f622:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801f624:	69bb      	ldr	r3, [r7, #24]
 801f626:	4a42      	ldr	r2, [pc, #264]	@ (801f730 <ip4_frag+0x294>)
 801f628:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801f62a:	6979      	ldr	r1, [r7, #20]
 801f62c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801f62e:	f7f5 ff8f 	bl	8015550 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801f632:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801f636:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801f63a:	1ad3      	subs	r3, r2, r3
 801f63c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801f640:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801f644:	2b00      	cmp	r3, #0
 801f646:	d004      	beq.n	801f652 <ip4_frag+0x1b6>
        poff = 0;
 801f648:	2300      	movs	r3, #0
 801f64a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801f64c:	68fb      	ldr	r3, [r7, #12]
 801f64e:	681b      	ldr	r3, [r3, #0]
 801f650:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801f652:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801f656:	2b00      	cmp	r3, #0
 801f658:	d196      	bne.n	801f588 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801f65a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801f65c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801f660:	4413      	add	r3, r2
 801f662:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801f664:	68bb      	ldr	r3, [r7, #8]
 801f666:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801f668:	f1a3 0213 	sub.w	r2, r3, #19
 801f66c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801f670:	429a      	cmp	r2, r3
 801f672:	bfcc      	ite	gt
 801f674:	2301      	movgt	r3, #1
 801f676:	2300      	movle	r3, #0
 801f678:	b2db      	uxtb	r3, r3
 801f67a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801f67c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801f680:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f684:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801f686:	6a3b      	ldr	r3, [r7, #32]
 801f688:	2b00      	cmp	r3, #0
 801f68a:	d002      	beq.n	801f692 <ip4_frag+0x1f6>
 801f68c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f68e:	2b00      	cmp	r3, #0
 801f690:	d003      	beq.n	801f69a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801f692:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801f694:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801f698:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801f69a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801f69c:	4618      	mov	r0, r3
 801f69e:	f7f3 fef7 	bl	8013490 <lwip_htons>
 801f6a2:	4603      	mov	r3, r0
 801f6a4:	461a      	mov	r2, r3
 801f6a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f6a8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801f6aa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801f6ac:	3314      	adds	r3, #20
 801f6ae:	b29b      	uxth	r3, r3
 801f6b0:	4618      	mov	r0, r3
 801f6b2:	f7f3 feed 	bl	8013490 <lwip_htons>
 801f6b6:	4603      	mov	r3, r0
 801f6b8:	461a      	mov	r2, r3
 801f6ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f6bc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801f6be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f6c0:	2200      	movs	r2, #0
 801f6c2:	729a      	strb	r2, [r3, #10]
 801f6c4:	2200      	movs	r2, #0
 801f6c6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801f6c8:	68bb      	ldr	r3, [r7, #8]
 801f6ca:	695b      	ldr	r3, [r3, #20]
 801f6cc:	687a      	ldr	r2, [r7, #4]
 801f6ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801f6d0:	68b8      	ldr	r0, [r7, #8]
 801f6d2:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 801f6d4:	4b17      	ldr	r3, [pc, #92]	@ (801f734 <ip4_frag+0x298>)
 801f6d6:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 801f6d8:	3301      	adds	r3, #1
 801f6da:	b29a      	uxth	r2, r3
 801f6dc:	4b15      	ldr	r3, [pc, #84]	@ (801f734 <ip4_frag+0x298>)
 801f6de:	861a      	strh	r2, [r3, #48]	@ 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801f6e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801f6e2:	f7f5 fe4f 	bl	8015384 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801f6e6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801f6ea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801f6ec:	1ad3      	subs	r3, r2, r3
 801f6ee:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801f6f2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801f6f6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801f6f8:	4413      	add	r3, r2
 801f6fa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801f6fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801f702:	2b00      	cmp	r3, #0
 801f704:	f47f af13 	bne.w	801f52e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801f708:	2300      	movs	r3, #0
 801f70a:	e002      	b.n	801f712 <ip4_frag+0x276>
      goto memerr;
 801f70c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801f70e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801f712:	4618      	mov	r0, r3
 801f714:	3748      	adds	r7, #72	@ 0x48
 801f716:	46bd      	mov	sp, r7
 801f718:	bd80      	pop	{r7, pc}
 801f71a:	bf00      	nop
 801f71c:	0802686c 	.word	0x0802686c
 801f720:	08026a48 	.word	0x08026a48
 801f724:	080268b4 	.word	0x080268b4
 801f728:	08026a64 	.word	0x08026a64
 801f72c:	08026a84 	.word	0x08026a84
 801f730:	0801f435 	.word	0x0801f435
 801f734:	20028318 	.word	0x20028318

0801f738 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801f738:	b580      	push	{r7, lr}
 801f73a:	b086      	sub	sp, #24
 801f73c:	af00      	add	r7, sp, #0
 801f73e:	6078      	str	r0, [r7, #4]
 801f740:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801f742:	230e      	movs	r3, #14
 801f744:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801f746:	687b      	ldr	r3, [r7, #4]
 801f748:	895b      	ldrh	r3, [r3, #10]
 801f74a:	2b0e      	cmp	r3, #14
 801f74c:	d80c      	bhi.n	801f768 <ethernet_input+0x30>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
 801f74e:	4b51      	ldr	r3, [pc, #324]	@ (801f894 <ethernet_input+0x15c>)
 801f750:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801f752:	3301      	adds	r3, #1
 801f754:	b29a      	uxth	r2, r3
 801f756:	4b4f      	ldr	r3, [pc, #316]	@ (801f894 <ethernet_input+0x15c>)
 801f758:	851a      	strh	r2, [r3, #40]	@ 0x28
    ETHARP_STATS_INC(etharp.drop);
 801f75a:	4b4e      	ldr	r3, [pc, #312]	@ (801f894 <ethernet_input+0x15c>)
 801f75c:	8bdb      	ldrh	r3, [r3, #30]
 801f75e:	3301      	adds	r3, #1
 801f760:	b29a      	uxth	r2, r3
 801f762:	4b4c      	ldr	r3, [pc, #304]	@ (801f894 <ethernet_input+0x15c>)
 801f764:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
 801f766:	e08d      	b.n	801f884 <ethernet_input+0x14c>
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801f768:	687b      	ldr	r3, [r7, #4]
 801f76a:	7bdb      	ldrb	r3, [r3, #15]
 801f76c:	2b00      	cmp	r3, #0
 801f76e:	d106      	bne.n	801f77e <ethernet_input+0x46>
    p->if_idx = netif_get_index(netif);
 801f770:	683b      	ldr	r3, [r7, #0]
 801f772:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801f776:	3301      	adds	r3, #1
 801f778:	b2da      	uxtb	r2, r3
 801f77a:	687b      	ldr	r3, [r7, #4]
 801f77c:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801f77e:	687b      	ldr	r3, [r7, #4]
 801f780:	685b      	ldr	r3, [r3, #4]
 801f782:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801f784:	693b      	ldr	r3, [r7, #16]
 801f786:	7b1a      	ldrb	r2, [r3, #12]
 801f788:	7b5b      	ldrb	r3, [r3, #13]
 801f78a:	021b      	lsls	r3, r3, #8
 801f78c:	4313      	orrs	r3, r2
 801f78e:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801f790:	693b      	ldr	r3, [r7, #16]
 801f792:	781b      	ldrb	r3, [r3, #0]
 801f794:	f003 0301 	and.w	r3, r3, #1
 801f798:	2b00      	cmp	r3, #0
 801f79a:	d023      	beq.n	801f7e4 <ethernet_input+0xac>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801f79c:	693b      	ldr	r3, [r7, #16]
 801f79e:	781b      	ldrb	r3, [r3, #0]
 801f7a0:	2b01      	cmp	r3, #1
 801f7a2:	d10f      	bne.n	801f7c4 <ethernet_input+0x8c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801f7a4:	693b      	ldr	r3, [r7, #16]
 801f7a6:	785b      	ldrb	r3, [r3, #1]
 801f7a8:	2b00      	cmp	r3, #0
 801f7aa:	d11b      	bne.n	801f7e4 <ethernet_input+0xac>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801f7ac:	693b      	ldr	r3, [r7, #16]
 801f7ae:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801f7b0:	2b5e      	cmp	r3, #94	@ 0x5e
 801f7b2:	d117      	bne.n	801f7e4 <ethernet_input+0xac>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801f7b4:	687b      	ldr	r3, [r7, #4]
 801f7b6:	7b5b      	ldrb	r3, [r3, #13]
 801f7b8:	f043 0310 	orr.w	r3, r3, #16
 801f7bc:	b2da      	uxtb	r2, r3
 801f7be:	687b      	ldr	r3, [r7, #4]
 801f7c0:	735a      	strb	r2, [r3, #13]
 801f7c2:	e00f      	b.n	801f7e4 <ethernet_input+0xac>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801f7c4:	693b      	ldr	r3, [r7, #16]
 801f7c6:	2206      	movs	r2, #6
 801f7c8:	4933      	ldr	r1, [pc, #204]	@ (801f898 <ethernet_input+0x160>)
 801f7ca:	4618      	mov	r0, r3
 801f7cc:	f001 fe00 	bl	80213d0 <memcmp>
 801f7d0:	4603      	mov	r3, r0
 801f7d2:	2b00      	cmp	r3, #0
 801f7d4:	d106      	bne.n	801f7e4 <ethernet_input+0xac>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801f7d6:	687b      	ldr	r3, [r7, #4]
 801f7d8:	7b5b      	ldrb	r3, [r3, #13]
 801f7da:	f043 0308 	orr.w	r3, r3, #8
 801f7de:	b2da      	uxtb	r2, r3
 801f7e0:	687b      	ldr	r3, [r7, #4]
 801f7e2:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801f7e4:	89fb      	ldrh	r3, [r7, #14]
 801f7e6:	2b08      	cmp	r3, #8
 801f7e8:	d003      	beq.n	801f7f2 <ethernet_input+0xba>
 801f7ea:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801f7ee:	d014      	beq.n	801f81a <ethernet_input+0xe2>
 801f7f0:	e034      	b.n	801f85c <ethernet_input+0x124>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801f7f2:	683b      	ldr	r3, [r7, #0]
 801f7f4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801f7f8:	f003 0308 	and.w	r3, r3, #8
 801f7fc:	2b00      	cmp	r3, #0
 801f7fe:	d03c      	beq.n	801f87a <ethernet_input+0x142>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801f800:	8afb      	ldrh	r3, [r7, #22]
 801f802:	4619      	mov	r1, r3
 801f804:	6878      	ldr	r0, [r7, #4]
 801f806:	f7f5 fd2f 	bl	8015268 <pbuf_remove_header>
 801f80a:	4603      	mov	r3, r0
 801f80c:	2b00      	cmp	r3, #0
 801f80e:	d136      	bne.n	801f87e <ethernet_input+0x146>
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
 801f810:	6839      	ldr	r1, [r7, #0]
 801f812:	6878      	ldr	r0, [r7, #4]
 801f814:	f7fe fe70 	bl	801e4f8 <ip4_input>
      }
      break;
 801f818:	e02d      	b.n	801f876 <ethernet_input+0x13e>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801f81a:	683b      	ldr	r3, [r7, #0]
 801f81c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801f820:	f003 0308 	and.w	r3, r3, #8
 801f824:	2b00      	cmp	r3, #0
 801f826:	d02c      	beq.n	801f882 <ethernet_input+0x14a>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801f828:	8afb      	ldrh	r3, [r7, #22]
 801f82a:	4619      	mov	r1, r3
 801f82c:	6878      	ldr	r0, [r7, #4]
 801f82e:	f7f5 fd1b 	bl	8015268 <pbuf_remove_header>
 801f832:	4603      	mov	r3, r0
 801f834:	2b00      	cmp	r3, #0
 801f836:	d00c      	beq.n	801f852 <ethernet_input+0x11a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                    ("ethernet_input: ARP response packet dropped, too short (%"U16_F"/%"U16_F")\n",
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
 801f838:	4b16      	ldr	r3, [pc, #88]	@ (801f894 <ethernet_input+0x15c>)
 801f83a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801f83c:	3301      	adds	r3, #1
 801f83e:	b29a      	uxth	r2, r3
 801f840:	4b14      	ldr	r3, [pc, #80]	@ (801f894 <ethernet_input+0x15c>)
 801f842:	845a      	strh	r2, [r3, #34]	@ 0x22
        ETHARP_STATS_INC(etharp.drop);
 801f844:	4b13      	ldr	r3, [pc, #76]	@ (801f894 <ethernet_input+0x15c>)
 801f846:	8bdb      	ldrh	r3, [r3, #30]
 801f848:	3301      	adds	r3, #1
 801f84a:	b29a      	uxth	r2, r3
 801f84c:	4b11      	ldr	r3, [pc, #68]	@ (801f894 <ethernet_input+0x15c>)
 801f84e:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 801f850:	e018      	b.n	801f884 <ethernet_input+0x14c>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
 801f852:	6839      	ldr	r1, [r7, #0]
 801f854:	6878      	ldr	r0, [r7, #4]
 801f856:	f7fd fee9 	bl	801d62c <etharp_input>
      }
      break;
 801f85a:	e00c      	b.n	801f876 <ethernet_input+0x13e>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if (LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 801f85c:	4b0d      	ldr	r3, [pc, #52]	@ (801f894 <ethernet_input+0x15c>)
 801f85e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801f860:	3301      	adds	r3, #1
 801f862:	b29a      	uxth	r2, r3
 801f864:	4b0b      	ldr	r3, [pc, #44]	@ (801f894 <ethernet_input+0x15c>)
 801f866:	851a      	strh	r2, [r3, #40]	@ 0x28
      ETHARP_STATS_INC(etharp.drop);
 801f868:	4b0a      	ldr	r3, [pc, #40]	@ (801f894 <ethernet_input+0x15c>)
 801f86a:	8bdb      	ldrh	r3, [r3, #30]
 801f86c:	3301      	adds	r3, #1
 801f86e:	b29a      	uxth	r2, r3
 801f870:	4b08      	ldr	r3, [pc, #32]	@ (801f894 <ethernet_input+0x15c>)
 801f872:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801f874:	e006      	b.n	801f884 <ethernet_input+0x14c>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801f876:	2300      	movs	r3, #0
 801f878:	e008      	b.n	801f88c <ethernet_input+0x154>
        goto free_and_return;
 801f87a:	bf00      	nop
 801f87c:	e002      	b.n	801f884 <ethernet_input+0x14c>
        goto free_and_return;
 801f87e:	bf00      	nop
 801f880:	e000      	b.n	801f884 <ethernet_input+0x14c>
        goto free_and_return;
 801f882:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801f884:	6878      	ldr	r0, [r7, #4]
 801f886:	f7f5 fd7d 	bl	8015384 <pbuf_free>
  return ERR_OK;
 801f88a:	2300      	movs	r3, #0
}
 801f88c:	4618      	mov	r0, r3
 801f88e:	3718      	adds	r7, #24
 801f890:	46bd      	mov	sp, r7
 801f892:	bd80      	pop	{r7, pc}
 801f894:	20028318 	.word	0x20028318
 801f898:	08027268 	.word	0x08027268

0801f89c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801f89c:	b580      	push	{r7, lr}
 801f89e:	b086      	sub	sp, #24
 801f8a0:	af00      	add	r7, sp, #0
 801f8a2:	60f8      	str	r0, [r7, #12]
 801f8a4:	60b9      	str	r1, [r7, #8]
 801f8a6:	607a      	str	r2, [r7, #4]
 801f8a8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801f8aa:	8c3b      	ldrh	r3, [r7, #32]
 801f8ac:	4618      	mov	r0, r3
 801f8ae:	f7f3 fdef 	bl	8013490 <lwip_htons>
 801f8b2:	4603      	mov	r3, r0
 801f8b4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801f8b6:	210e      	movs	r1, #14
 801f8b8:	68b8      	ldr	r0, [r7, #8]
 801f8ba:	f7f5 fcc5 	bl	8015248 <pbuf_add_header>
 801f8be:	4603      	mov	r3, r0
 801f8c0:	2b00      	cmp	r3, #0
 801f8c2:	d125      	bne.n	801f910 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801f8c4:	68bb      	ldr	r3, [r7, #8]
 801f8c6:	685b      	ldr	r3, [r3, #4]
 801f8c8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801f8ca:	693b      	ldr	r3, [r7, #16]
 801f8cc:	8afa      	ldrh	r2, [r7, #22]
 801f8ce:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801f8d0:	693b      	ldr	r3, [r7, #16]
 801f8d2:	2206      	movs	r2, #6
 801f8d4:	6839      	ldr	r1, [r7, #0]
 801f8d6:	4618      	mov	r0, r3
 801f8d8:	f001 fe19 	bl	802150e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801f8dc:	693b      	ldr	r3, [r7, #16]
 801f8de:	3306      	adds	r3, #6
 801f8e0:	2206      	movs	r2, #6
 801f8e2:	6879      	ldr	r1, [r7, #4]
 801f8e4:	4618      	mov	r0, r3
 801f8e6:	f001 fe12 	bl	802150e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801f8ea:	68fb      	ldr	r3, [r7, #12]
 801f8ec:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801f8f0:	2b06      	cmp	r3, #6
 801f8f2:	d006      	beq.n	801f902 <ethernet_output+0x66>
 801f8f4:	4b0d      	ldr	r3, [pc, #52]	@ (801f92c <ethernet_output+0x90>)
 801f8f6:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801f8fa:	490d      	ldr	r1, [pc, #52]	@ (801f930 <ethernet_output+0x94>)
 801f8fc:	480d      	ldr	r0, [pc, #52]	@ (801f934 <ethernet_output+0x98>)
 801f8fe:	f001 fbe1 	bl	80210c4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801f902:	68fb      	ldr	r3, [r7, #12]
 801f904:	699b      	ldr	r3, [r3, #24]
 801f906:	68b9      	ldr	r1, [r7, #8]
 801f908:	68f8      	ldr	r0, [r7, #12]
 801f90a:	4798      	blx	r3
 801f90c:	4603      	mov	r3, r0
 801f90e:	e008      	b.n	801f922 <ethernet_output+0x86>
      goto pbuf_header_failed;
 801f910:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
 801f912:	4b09      	ldr	r3, [pc, #36]	@ (801f938 <ethernet_output+0x9c>)
 801f914:	895b      	ldrh	r3, [r3, #10]
 801f916:	3301      	adds	r3, #1
 801f918:	b29a      	uxth	r2, r3
 801f91a:	4b07      	ldr	r3, [pc, #28]	@ (801f938 <ethernet_output+0x9c>)
 801f91c:	815a      	strh	r2, [r3, #10]
  return ERR_BUF;
 801f91e:	f06f 0301 	mvn.w	r3, #1
}
 801f922:	4618      	mov	r0, r3
 801f924:	3718      	adds	r7, #24
 801f926:	46bd      	mov	sp, r7
 801f928:	bd80      	pop	{r7, pc}
 801f92a:	bf00      	nop
 801f92c:	08026a94 	.word	0x08026a94
 801f930:	08026acc 	.word	0x08026acc
 801f934:	08026b00 	.word	0x08026b00
 801f938:	20028318 	.word	0x20028318

0801f93c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801f93c:	b580      	push	{r7, lr}
 801f93e:	b082      	sub	sp, #8
 801f940:	af00      	add	r7, sp, #0
 801f942:	6078      	str	r0, [r7, #4]
 801f944:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801f946:	683b      	ldr	r3, [r7, #0]
 801f948:	2200      	movs	r2, #0
 801f94a:	2104      	movs	r1, #4
 801f94c:	4618      	mov	r0, r3
 801f94e:	f7ed fdf7 	bl	800d540 <osMessageQueueNew>
 801f952:	4602      	mov	r2, r0
 801f954:	687b      	ldr	r3, [r7, #4]
 801f956:	601a      	str	r2, [r3, #0]
#endif
#if SYS_STATS
  ++lwip_stats.sys.mbox.used;
 801f958:	4b10      	ldr	r3, [pc, #64]	@ (801f99c <sys_mbox_new+0x60>)
 801f95a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 801f95e:	3301      	adds	r3, #1
 801f960:	b29a      	uxth	r2, r3
 801f962:	4b0e      	ldr	r3, [pc, #56]	@ (801f99c <sys_mbox_new+0x60>)
 801f964:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
 801f968:	4b0c      	ldr	r3, [pc, #48]	@ (801f99c <sys_mbox_new+0x60>)
 801f96a:	f8b3 20fa 	ldrh.w	r2, [r3, #250]	@ 0xfa
 801f96e:	4b0b      	ldr	r3, [pc, #44]	@ (801f99c <sys_mbox_new+0x60>)
 801f970:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 801f974:	429a      	cmp	r2, r3
 801f976:	d205      	bcs.n	801f984 <sys_mbox_new+0x48>
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
 801f978:	4b08      	ldr	r3, [pc, #32]	@ (801f99c <sys_mbox_new+0x60>)
 801f97a:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	@ 0xf8
 801f97e:	4b07      	ldr	r3, [pc, #28]	@ (801f99c <sys_mbox_new+0x60>)
 801f980:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801f984:	687b      	ldr	r3, [r7, #4]
 801f986:	681b      	ldr	r3, [r3, #0]
 801f988:	2b00      	cmp	r3, #0
 801f98a:	d102      	bne.n	801f992 <sys_mbox_new+0x56>
    return ERR_MEM;
 801f98c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f990:	e000      	b.n	801f994 <sys_mbox_new+0x58>

  return ERR_OK;
 801f992:	2300      	movs	r3, #0
}
 801f994:	4618      	mov	r0, r3
 801f996:	3708      	adds	r7, #8
 801f998:	46bd      	mov	sp, r7
 801f99a:	bd80      	pop	{r7, pc}
 801f99c:	20028318 	.word	0x20028318

0801f9a0 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801f9a0:	b580      	push	{r7, lr}
 801f9a2:	b082      	sub	sp, #8
 801f9a4:	af00      	add	r7, sp, #0
 801f9a6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801f9a8:	687b      	ldr	r3, [r7, #4]
 801f9aa:	681b      	ldr	r3, [r3, #0]
 801f9ac:	4618      	mov	r0, r3
 801f9ae:	f7ed ff33 	bl	800d818 <osMessageQueueGetCount>
 801f9b2:	4603      	mov	r3, r0
 801f9b4:	2b00      	cmp	r3, #0
 801f9b6:	d007      	beq.n	801f9c8 <sys_mbox_free+0x28>
#endif
  {
    /* Line for breakpoint.  Should never break here! */
    portNOP();
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
 801f9b8:	4b0c      	ldr	r3, [pc, #48]	@ (801f9ec <sys_mbox_free+0x4c>)
 801f9ba:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 801f9be:	3301      	adds	r3, #1
 801f9c0:	b29a      	uxth	r2, r3
 801f9c2:	4b0a      	ldr	r3, [pc, #40]	@ (801f9ec <sys_mbox_free+0x4c>)
 801f9c4:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801f9c8:	687b      	ldr	r3, [r7, #4]
 801f9ca:	681b      	ldr	r3, [r3, #0]
 801f9cc:	4618      	mov	r0, r3
 801f9ce:	f7ed ff55 	bl	800d87c <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
 801f9d2:	4b06      	ldr	r3, [pc, #24]	@ (801f9ec <sys_mbox_free+0x4c>)
 801f9d4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 801f9d8:	3b01      	subs	r3, #1
 801f9da:	b29a      	uxth	r2, r3
 801f9dc:	4b03      	ldr	r3, [pc, #12]	@ (801f9ec <sys_mbox_free+0x4c>)
 801f9de:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
#endif /* SYS_STATS */
}
 801f9e2:	bf00      	nop
 801f9e4:	3708      	adds	r7, #8
 801f9e6:	46bd      	mov	sp, r7
 801f9e8:	bd80      	pop	{r7, pc}
 801f9ea:	bf00      	nop
 801f9ec:	20028318 	.word	0x20028318

0801f9f0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801f9f0:	b580      	push	{r7, lr}
 801f9f2:	b084      	sub	sp, #16
 801f9f4:	af00      	add	r7, sp, #0
 801f9f6:	6078      	str	r0, [r7, #4]
 801f9f8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801f9fa:	687b      	ldr	r3, [r7, #4]
 801f9fc:	6818      	ldr	r0, [r3, #0]
 801f9fe:	4639      	mov	r1, r7
 801fa00:	2300      	movs	r3, #0
 801fa02:	2200      	movs	r2, #0
 801fa04:	f7ed fe22 	bl	800d64c <osMessageQueuePut>
 801fa08:	4603      	mov	r3, r0
 801fa0a:	2b00      	cmp	r3, #0
 801fa0c:	d102      	bne.n	801fa14 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801fa0e:	2300      	movs	r3, #0
 801fa10:	73fb      	strb	r3, [r7, #15]
 801fa12:	e009      	b.n	801fa28 <sys_mbox_trypost+0x38>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801fa14:	23ff      	movs	r3, #255	@ 0xff
 801fa16:	73fb      	strb	r3, [r7, #15]

#if SYS_STATS
    lwip_stats.sys.mbox.err++;
 801fa18:	4b06      	ldr	r3, [pc, #24]	@ (801fa34 <sys_mbox_trypost+0x44>)
 801fa1a:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 801fa1e:	3301      	adds	r3, #1
 801fa20:	b29a      	uxth	r2, r3
 801fa22:	4b04      	ldr	r3, [pc, #16]	@ (801fa34 <sys_mbox_trypost+0x44>)
 801fa24:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc
#endif /* SYS_STATS */
  }

  return result;
 801fa28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801fa2c:	4618      	mov	r0, r3
 801fa2e:	3710      	adds	r7, #16
 801fa30:	46bd      	mov	sp, r7
 801fa32:	bd80      	pop	{r7, pc}
 801fa34:	20028318 	.word	0x20028318

0801fa38 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801fa38:	b580      	push	{r7, lr}
 801fa3a:	b086      	sub	sp, #24
 801fa3c:	af00      	add	r7, sp, #0
 801fa3e:	60f8      	str	r0, [r7, #12]
 801fa40:	60b9      	str	r1, [r7, #8]
 801fa42:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801fa44:	f7ed f88a 	bl	800cb5c <osKernelGetTickCount>
 801fa48:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801fa4a:	687b      	ldr	r3, [r7, #4]
 801fa4c:	2b00      	cmp	r3, #0
 801fa4e:	d013      	beq.n	801fa78 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801fa50:	68fb      	ldr	r3, [r7, #12]
 801fa52:	6818      	ldr	r0, [r3, #0]
 801fa54:	687b      	ldr	r3, [r7, #4]
 801fa56:	2200      	movs	r2, #0
 801fa58:	68b9      	ldr	r1, [r7, #8]
 801fa5a:	f7ed fe6b 	bl	800d734 <osMessageQueueGet>
 801fa5e:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801fa60:	693b      	ldr	r3, [r7, #16]
 801fa62:	2b00      	cmp	r3, #0
 801fa64:	d105      	bne.n	801fa72 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801fa66:	f7ed f879 	bl	800cb5c <osKernelGetTickCount>
 801fa6a:	4602      	mov	r2, r0
 801fa6c:	697b      	ldr	r3, [r7, #20]
 801fa6e:	1ad3      	subs	r3, r2, r3
 801fa70:	e00f      	b.n	801fa92 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801fa72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801fa76:	e00c      	b.n	801fa92 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801fa78:	68fb      	ldr	r3, [r7, #12]
 801fa7a:	6818      	ldr	r0, [r3, #0]
 801fa7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801fa80:	2200      	movs	r2, #0
 801fa82:	68b9      	ldr	r1, [r7, #8]
 801fa84:	f7ed fe56 	bl	800d734 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801fa88:	f7ed f868 	bl	800cb5c <osKernelGetTickCount>
 801fa8c:	4602      	mov	r2, r0
 801fa8e:	697b      	ldr	r3, [r7, #20]
 801fa90:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801fa92:	4618      	mov	r0, r3
 801fa94:	3718      	adds	r7, #24
 801fa96:	46bd      	mov	sp, r7
 801fa98:	bd80      	pop	{r7, pc}

0801fa9a <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801fa9a:	b580      	push	{r7, lr}
 801fa9c:	b082      	sub	sp, #8
 801fa9e:	af00      	add	r7, sp, #0
 801faa0:	6078      	str	r0, [r7, #4]
 801faa2:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801faa4:	687b      	ldr	r3, [r7, #4]
 801faa6:	6818      	ldr	r0, [r3, #0]
 801faa8:	2300      	movs	r3, #0
 801faaa:	2200      	movs	r2, #0
 801faac:	6839      	ldr	r1, [r7, #0]
 801faae:	f7ed fe41 	bl	800d734 <osMessageQueueGet>
 801fab2:	4603      	mov	r3, r0
 801fab4:	2b00      	cmp	r3, #0
 801fab6:	d101      	bne.n	801fabc <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801fab8:	2300      	movs	r3, #0
 801faba:	e001      	b.n	801fac0 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801fabc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  }
}
 801fac0:	4618      	mov	r0, r3
 801fac2:	3708      	adds	r7, #8
 801fac4:	46bd      	mov	sp, r7
 801fac6:	bd80      	pop	{r7, pc}

0801fac8 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801fac8:	b480      	push	{r7}
 801faca:	b083      	sub	sp, #12
 801facc:	af00      	add	r7, sp, #0
 801face:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801fad0:	687b      	ldr	r3, [r7, #4]
 801fad2:	681b      	ldr	r3, [r3, #0]
 801fad4:	2b00      	cmp	r3, #0
 801fad6:	d101      	bne.n	801fadc <sys_mbox_valid+0x14>
    return 0;
 801fad8:	2300      	movs	r3, #0
 801fada:	e000      	b.n	801fade <sys_mbox_valid+0x16>
  else
    return 1;
 801fadc:	2301      	movs	r3, #1
}
 801fade:	4618      	mov	r0, r3
 801fae0:	370c      	adds	r7, #12
 801fae2:	46bd      	mov	sp, r7
 801fae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fae8:	4770      	bx	lr

0801faea <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801faea:	b480      	push	{r7}
 801faec:	b083      	sub	sp, #12
 801faee:	af00      	add	r7, sp, #0
 801faf0:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801faf2:	687b      	ldr	r3, [r7, #4]
 801faf4:	2200      	movs	r2, #0
 801faf6:	601a      	str	r2, [r3, #0]
}
 801faf8:	bf00      	nop
 801fafa:	370c      	adds	r7, #12
 801fafc:	46bd      	mov	sp, r7
 801fafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb02:	4770      	bx	lr

0801fb04 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801fb04:	b580      	push	{r7, lr}
 801fb06:	b082      	sub	sp, #8
 801fb08:	af00      	add	r7, sp, #0
 801fb0a:	6078      	str	r0, [r7, #4]
 801fb0c:	460b      	mov	r3, r1
 801fb0e:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801fb10:	78fb      	ldrb	r3, [r7, #3]
 801fb12:	2200      	movs	r2, #0
 801fb14:	4619      	mov	r1, r3
 801fb16:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801fb1a:	f7ed fb81 	bl	800d220 <osSemaphoreNew>
 801fb1e:	4602      	mov	r2, r0
 801fb20:	687b      	ldr	r3, [r7, #4]
 801fb22:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801fb24:	687b      	ldr	r3, [r7, #4]
 801fb26:	681b      	ldr	r3, [r3, #0]
 801fb28:	2b00      	cmp	r3, #0
 801fb2a:	d10a      	bne.n	801fb42 <sys_sem_new+0x3e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
 801fb2c:	4b17      	ldr	r3, [pc, #92]	@ (801fb8c <sys_sem_new+0x88>)
 801fb2e:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	@ 0xf0
 801fb32:	3301      	adds	r3, #1
 801fb34:	b29a      	uxth	r2, r3
 801fb36:	4b15      	ldr	r3, [pc, #84]	@ (801fb8c <sys_sem_new+0x88>)
 801fb38:	f8a3 20f0 	strh.w	r2, [r3, #240]	@ 0xf0
#endif /* SYS_STATS */
    return ERR_MEM;
 801fb3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801fb40:	e01f      	b.n	801fb82 <sys_sem_new+0x7e>
  }

  if(count == 0)	// Means it can't be taken
 801fb42:	78fb      	ldrb	r3, [r7, #3]
 801fb44:	2b00      	cmp	r3, #0
 801fb46:	d105      	bne.n	801fb54 <sys_sem_new+0x50>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 801fb48:	687b      	ldr	r3, [r7, #4]
 801fb4a:	681b      	ldr	r3, [r3, #0]
 801fb4c:	2100      	movs	r1, #0
 801fb4e:	4618      	mov	r0, r3
 801fb50:	f7ed fc02 	bl	800d358 <osSemaphoreAcquire>
#endif
  }

#if SYS_STATS
  ++lwip_stats.sys.sem.used;
 801fb54:	4b0d      	ldr	r3, [pc, #52]	@ (801fb8c <sys_sem_new+0x88>)
 801fb56:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	@ 0xec
 801fb5a:	3301      	adds	r3, #1
 801fb5c:	b29a      	uxth	r2, r3
 801fb5e:	4b0b      	ldr	r3, [pc, #44]	@ (801fb8c <sys_sem_new+0x88>)
 801fb60:	f8a3 20ec 	strh.w	r2, [r3, #236]	@ 0xec
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
 801fb64:	4b09      	ldr	r3, [pc, #36]	@ (801fb8c <sys_sem_new+0x88>)
 801fb66:	f8b3 20ee 	ldrh.w	r2, [r3, #238]	@ 0xee
 801fb6a:	4b08      	ldr	r3, [pc, #32]	@ (801fb8c <sys_sem_new+0x88>)
 801fb6c:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	@ 0xec
 801fb70:	429a      	cmp	r2, r3
 801fb72:	d205      	bcs.n	801fb80 <sys_sem_new+0x7c>
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
 801fb74:	4b05      	ldr	r3, [pc, #20]	@ (801fb8c <sys_sem_new+0x88>)
 801fb76:	f8b3 20ec 	ldrh.w	r2, [r3, #236]	@ 0xec
 801fb7a:	4b04      	ldr	r3, [pc, #16]	@ (801fb8c <sys_sem_new+0x88>)
 801fb7c:	f8a3 20ee 	strh.w	r2, [r3, #238]	@ 0xee
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801fb80:	2300      	movs	r3, #0
}
 801fb82:	4618      	mov	r0, r3
 801fb84:	3708      	adds	r7, #8
 801fb86:	46bd      	mov	sp, r7
 801fb88:	bd80      	pop	{r7, pc}
 801fb8a:	bf00      	nop
 801fb8c:	20028318 	.word	0x20028318

0801fb90 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801fb90:	b580      	push	{r7, lr}
 801fb92:	b084      	sub	sp, #16
 801fb94:	af00      	add	r7, sp, #0
 801fb96:	6078      	str	r0, [r7, #4]
 801fb98:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801fb9a:	f7ec ffdf 	bl	800cb5c <osKernelGetTickCount>
 801fb9e:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801fba0:	683b      	ldr	r3, [r7, #0]
 801fba2:	2b00      	cmp	r3, #0
 801fba4:	d011      	beq.n	801fbca <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 801fba6:	687b      	ldr	r3, [r7, #4]
 801fba8:	681b      	ldr	r3, [r3, #0]
 801fbaa:	6839      	ldr	r1, [r7, #0]
 801fbac:	4618      	mov	r0, r3
 801fbae:	f7ed fbd3 	bl	800d358 <osSemaphoreAcquire>
 801fbb2:	4603      	mov	r3, r0
 801fbb4:	2b00      	cmp	r3, #0
 801fbb6:	d105      	bne.n	801fbc4 <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801fbb8:	f7ec ffd0 	bl	800cb5c <osKernelGetTickCount>
 801fbbc:	4602      	mov	r2, r0
 801fbbe:	68fb      	ldr	r3, [r7, #12]
 801fbc0:	1ad3      	subs	r3, r2, r3
 801fbc2:	e012      	b.n	801fbea <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801fbc4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801fbc8:	e00f      	b.n	801fbea <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801fbca:	bf00      	nop
 801fbcc:	687b      	ldr	r3, [r7, #4]
 801fbce:	681b      	ldr	r3, [r3, #0]
 801fbd0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801fbd4:	4618      	mov	r0, r3
 801fbd6:	f7ed fbbf 	bl	800d358 <osSemaphoreAcquire>
 801fbda:	4603      	mov	r3, r0
 801fbdc:	2b00      	cmp	r3, #0
 801fbde:	d1f5      	bne.n	801fbcc <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801fbe0:	f7ec ffbc 	bl	800cb5c <osKernelGetTickCount>
 801fbe4:	4602      	mov	r2, r0
 801fbe6:	68fb      	ldr	r3, [r7, #12]
 801fbe8:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801fbea:	4618      	mov	r0, r3
 801fbec:	3710      	adds	r7, #16
 801fbee:	46bd      	mov	sp, r7
 801fbf0:	bd80      	pop	{r7, pc}

0801fbf2 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801fbf2:	b580      	push	{r7, lr}
 801fbf4:	b082      	sub	sp, #8
 801fbf6:	af00      	add	r7, sp, #0
 801fbf8:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801fbfa:	687b      	ldr	r3, [r7, #4]
 801fbfc:	681b      	ldr	r3, [r3, #0]
 801fbfe:	4618      	mov	r0, r3
 801fc00:	f7ed fc10 	bl	800d424 <osSemaphoreRelease>
}
 801fc04:	bf00      	nop
 801fc06:	3708      	adds	r7, #8
 801fc08:	46bd      	mov	sp, r7
 801fc0a:	bd80      	pop	{r7, pc}

0801fc0c <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801fc0c:	b580      	push	{r7, lr}
 801fc0e:	b082      	sub	sp, #8
 801fc10:	af00      	add	r7, sp, #0
 801fc12:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
 801fc14:	4b08      	ldr	r3, [pc, #32]	@ (801fc38 <sys_sem_free+0x2c>)
 801fc16:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	@ 0xec
 801fc1a:	3b01      	subs	r3, #1
 801fc1c:	b29a      	uxth	r2, r3
 801fc1e:	4b06      	ldr	r3, [pc, #24]	@ (801fc38 <sys_sem_free+0x2c>)
 801fc20:	f8a3 20ec 	strh.w	r2, [r3, #236]	@ 0xec
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801fc24:	687b      	ldr	r3, [r7, #4]
 801fc26:	681b      	ldr	r3, [r3, #0]
 801fc28:	4618      	mov	r0, r3
 801fc2a:	f7ed fc53 	bl	800d4d4 <osSemaphoreDelete>
}
 801fc2e:	bf00      	nop
 801fc30:	3708      	adds	r7, #8
 801fc32:	46bd      	mov	sp, r7
 801fc34:	bd80      	pop	{r7, pc}
 801fc36:	bf00      	nop
 801fc38:	20028318 	.word	0x20028318

0801fc3c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801fc3c:	b480      	push	{r7}
 801fc3e:	b083      	sub	sp, #12
 801fc40:	af00      	add	r7, sp, #0
 801fc42:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801fc44:	687b      	ldr	r3, [r7, #4]
 801fc46:	681b      	ldr	r3, [r3, #0]
 801fc48:	2b00      	cmp	r3, #0
 801fc4a:	d101      	bne.n	801fc50 <sys_sem_valid+0x14>
    return 0;
 801fc4c:	2300      	movs	r3, #0
 801fc4e:	e000      	b.n	801fc52 <sys_sem_valid+0x16>
  else
    return 1;
 801fc50:	2301      	movs	r3, #1
}
 801fc52:	4618      	mov	r0, r3
 801fc54:	370c      	adds	r7, #12
 801fc56:	46bd      	mov	sp, r7
 801fc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc5c:	4770      	bx	lr

0801fc5e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801fc5e:	b480      	push	{r7}
 801fc60:	b083      	sub	sp, #12
 801fc62:	af00      	add	r7, sp, #0
 801fc64:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801fc66:	687b      	ldr	r3, [r7, #4]
 801fc68:	2200      	movs	r2, #0
 801fc6a:	601a      	str	r2, [r3, #0]
}
 801fc6c:	bf00      	nop
 801fc6e:	370c      	adds	r7, #12
 801fc70:	46bd      	mov	sp, r7
 801fc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc76:	4770      	bx	lr

0801fc78 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801fc78:	b580      	push	{r7, lr}
 801fc7a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801fc7c:	2000      	movs	r0, #0
 801fc7e:	f7ed f987 	bl	800cf90 <osMutexNew>
 801fc82:	4603      	mov	r3, r0
 801fc84:	4a01      	ldr	r2, [pc, #4]	@ (801fc8c <sys_init+0x14>)
 801fc86:	6013      	str	r3, [r2, #0]
#endif
}
 801fc88:	bf00      	nop
 801fc8a:	bd80      	pop	{r7, pc}
 801fc8c:	20028578 	.word	0x20028578

0801fc90 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801fc90:	b580      	push	{r7, lr}
 801fc92:	b082      	sub	sp, #8
 801fc94:	af00      	add	r7, sp, #0
 801fc96:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801fc98:	2000      	movs	r0, #0
 801fc9a:	f7ed f979 	bl	800cf90 <osMutexNew>
 801fc9e:	4602      	mov	r2, r0
 801fca0:	687b      	ldr	r3, [r7, #4]
 801fca2:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801fca4:	687b      	ldr	r3, [r7, #4]
 801fca6:	681b      	ldr	r3, [r3, #0]
 801fca8:	2b00      	cmp	r3, #0
 801fcaa:	d10a      	bne.n	801fcc2 <sys_mutex_new+0x32>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
 801fcac:	4b12      	ldr	r3, [pc, #72]	@ (801fcf8 <sys_mutex_new+0x68>)
 801fcae:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	@ 0xf6
 801fcb2:	3301      	adds	r3, #1
 801fcb4:	b29a      	uxth	r2, r3
 801fcb6:	4b10      	ldr	r3, [pc, #64]	@ (801fcf8 <sys_mutex_new+0x68>)
 801fcb8:	f8a3 20f6 	strh.w	r2, [r3, #246]	@ 0xf6
#endif /* SYS_STATS */
    return ERR_MEM;
 801fcbc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801fcc0:	e016      	b.n	801fcf0 <sys_mutex_new+0x60>
  }

#if SYS_STATS
  ++lwip_stats.sys.mutex.used;
 801fcc2:	4b0d      	ldr	r3, [pc, #52]	@ (801fcf8 <sys_mutex_new+0x68>)
 801fcc4:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 801fcc8:	3301      	adds	r3, #1
 801fcca:	b29a      	uxth	r2, r3
 801fccc:	4b0a      	ldr	r3, [pc, #40]	@ (801fcf8 <sys_mutex_new+0x68>)
 801fcce:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
 801fcd2:	4b09      	ldr	r3, [pc, #36]	@ (801fcf8 <sys_mutex_new+0x68>)
 801fcd4:	f8b3 20f4 	ldrh.w	r2, [r3, #244]	@ 0xf4
 801fcd8:	4b07      	ldr	r3, [pc, #28]	@ (801fcf8 <sys_mutex_new+0x68>)
 801fcda:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 801fcde:	429a      	cmp	r2, r3
 801fce0:	d205      	bcs.n	801fcee <sys_mutex_new+0x5e>
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
 801fce2:	4b05      	ldr	r3, [pc, #20]	@ (801fcf8 <sys_mutex_new+0x68>)
 801fce4:	f8b3 20f2 	ldrh.w	r2, [r3, #242]	@ 0xf2
 801fce8:	4b03      	ldr	r3, [pc, #12]	@ (801fcf8 <sys_mutex_new+0x68>)
 801fcea:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801fcee:	2300      	movs	r3, #0
}
 801fcf0:	4618      	mov	r0, r3
 801fcf2:	3708      	adds	r7, #8
 801fcf4:	46bd      	mov	sp, r7
 801fcf6:	bd80      	pop	{r7, pc}
 801fcf8:	20028318 	.word	0x20028318

0801fcfc <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801fcfc:	b580      	push	{r7, lr}
 801fcfe:	b082      	sub	sp, #8
 801fd00:	af00      	add	r7, sp, #0
 801fd02:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801fd04:	687b      	ldr	r3, [r7, #4]
 801fd06:	681b      	ldr	r3, [r3, #0]
 801fd08:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801fd0c:	4618      	mov	r0, r3
 801fd0e:	f7ed f9d9 	bl	800d0c4 <osMutexAcquire>
#endif
}
 801fd12:	bf00      	nop
 801fd14:	3708      	adds	r7, #8
 801fd16:	46bd      	mov	sp, r7
 801fd18:	bd80      	pop	{r7, pc}

0801fd1a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801fd1a:	b580      	push	{r7, lr}
 801fd1c:	b082      	sub	sp, #8
 801fd1e:	af00      	add	r7, sp, #0
 801fd20:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801fd22:	687b      	ldr	r3, [r7, #4]
 801fd24:	681b      	ldr	r3, [r3, #0]
 801fd26:	4618      	mov	r0, r3
 801fd28:	f7ed fa2a 	bl	800d180 <osMutexRelease>
}
 801fd2c:	bf00      	nop
 801fd2e:	3708      	adds	r7, #8
 801fd30:	46bd      	mov	sp, r7
 801fd32:	bd80      	pop	{r7, pc}

0801fd34 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801fd34:	b580      	push	{r7, lr}
 801fd36:	b08e      	sub	sp, #56	@ 0x38
 801fd38:	af00      	add	r7, sp, #0
 801fd3a:	60f8      	str	r0, [r7, #12]
 801fd3c:	60b9      	str	r1, [r7, #8]
 801fd3e:	607a      	str	r2, [r7, #4]
 801fd40:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801fd42:	f107 0314 	add.w	r3, r7, #20
 801fd46:	2224      	movs	r2, #36	@ 0x24
 801fd48:	2100      	movs	r1, #0
 801fd4a:	4618      	mov	r0, r3
 801fd4c:	f001 fb6a 	bl	8021424 <memset>
 801fd50:	68fb      	ldr	r3, [r7, #12]
 801fd52:	617b      	str	r3, [r7, #20]
 801fd54:	683b      	ldr	r3, [r7, #0]
 801fd56:	62bb      	str	r3, [r7, #40]	@ 0x28
 801fd58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801fd5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801fd5c:	f107 0314 	add.w	r3, r7, #20
 801fd60:	461a      	mov	r2, r3
 801fd62:	6879      	ldr	r1, [r7, #4]
 801fd64:	68b8      	ldr	r0, [r7, #8]
 801fd66:	f7ec ff21 	bl	800cbac <osThreadNew>
 801fd6a:	4603      	mov	r3, r0
#endif
}
 801fd6c:	4618      	mov	r0, r3
 801fd6e:	3738      	adds	r7, #56	@ 0x38
 801fd70:	46bd      	mov	sp, r7
 801fd72:	bd80      	pop	{r7, pc}

0801fd74 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801fd74:	b580      	push	{r7, lr}
 801fd76:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801fd78:	4b04      	ldr	r3, [pc, #16]	@ (801fd8c <sys_arch_protect+0x18>)
 801fd7a:	681b      	ldr	r3, [r3, #0]
 801fd7c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801fd80:	4618      	mov	r0, r3
 801fd82:	f7ed f99f 	bl	800d0c4 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801fd86:	2301      	movs	r3, #1
}
 801fd88:	4618      	mov	r0, r3
 801fd8a:	bd80      	pop	{r7, pc}
 801fd8c:	20028578 	.word	0x20028578

0801fd90 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801fd90:	b580      	push	{r7, lr}
 801fd92:	b082      	sub	sp, #8
 801fd94:	af00      	add	r7, sp, #0
 801fd96:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801fd98:	4b04      	ldr	r3, [pc, #16]	@ (801fdac <sys_arch_unprotect+0x1c>)
 801fd9a:	681b      	ldr	r3, [r3, #0]
 801fd9c:	4618      	mov	r0, r3
 801fd9e:	f7ed f9ef 	bl	800d180 <osMutexRelease>
}
 801fda2:	bf00      	nop
 801fda4:	3708      	adds	r7, #8
 801fda6:	46bd      	mov	sp, r7
 801fda8:	bd80      	pop	{r7, pc}
 801fdaa:	bf00      	nop
 801fdac:	20028578 	.word	0x20028578

0801fdb0 <AdcTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void AdcTestTask(void)
{
 801fdb0:	b580      	push	{r7, lr}
 801fdb2:	b0ca      	sub	sp, #296	@ 0x128
 801fdb4:	af00      	add	r7, sp, #0
	osStatus_t status;

	while (1)
	{
		//printf("adc waiting for messages\n");
		status = osMessageQueueGet(adcQueueHandle, &test_data, 0, 10);
 801fdb6:	4b3a      	ldr	r3, [pc, #232]	@ (801fea0 <AdcTestTask+0xf0>)
 801fdb8:	6818      	ldr	r0, [r3, #0]
 801fdba:	f107 0110 	add.w	r1, r7, #16
 801fdbe:	230a      	movs	r3, #10
 801fdc0:	2200      	movs	r2, #0
 801fdc2:	f7ed fcb7 	bl	800d734 <osMessageQueueGet>
 801fdc6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
		if(status == osOK)
 801fdca:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801fdce:	2b00      	cmp	r3, #0
 801fdd0:	d153      	bne.n	801fe7a <AdcTestTask+0xca>
		{
			printf("adc received test ID: %lu\n", test_data.test_id);
 801fdd2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fdd6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801fdda:	689b      	ldr	r3, [r3, #8]
 801fddc:	4619      	mov	r1, r3
 801fdde:	4831      	ldr	r0, [pc, #196]	@ (801fea4 <AdcTestTask+0xf4>)
 801fde0:	f001 f970 	bl	80210c4 <iprintf>

			for (uint8_t i=0; i<test_data.n_iter; i++)
 801fde4:	2300      	movs	r3, #0
 801fde6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801fdea:	e00d      	b.n	801fe08 <AdcTestTask+0x58>
			{
				result = ADC_Test_Perform();
 801fdec:	f000 f860 	bl	801feb0 <ADC_Test_Perform>
 801fdf0:	4603      	mov	r3, r0
 801fdf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 801fdf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fdfa:	2bff      	cmp	r3, #255	@ 0xff
 801fdfc:	d00e      	beq.n	801fe1c <AdcTestTask+0x6c>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801fdfe:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801fe02:	3301      	adds	r3, #1
 801fe04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801fe08:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fe0c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801fe10:	7b1b      	ldrb	r3, [r3, #12]
 801fe12:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 801fe16:	429a      	cmp	r2, r3
 801fe18:	d3e8      	bcc.n	801fdec <AdcTestTask+0x3c>
 801fe1a:	e000      	b.n	801fe1e <AdcTestTask+0x6e>
					break;
 801fe1c:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 801fe1e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fe22:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801fe26:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 801fe2a:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 801fe2e:	6812      	ldr	r2, [r2, #0]
 801fe30:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 801fe32:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fe36:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801fe3a:	889a      	ldrh	r2, [r3, #4]
 801fe3c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fe40:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801fe44:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 801fe46:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fe4a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801fe4e:	689a      	ldr	r2, [r3, #8]
 801fe50:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fe54:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801fe58:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 801fe5a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fe5e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801fe62:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 801fe66:	731a      	strb	r2, [r3, #12]

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 801fe68:	4b0f      	ldr	r3, [pc, #60]	@ (801fea8 <AdcTestTask+0xf8>)
 801fe6a:	6818      	ldr	r0, [r3, #0]
 801fe6c:	4639      	mov	r1, r7
 801fe6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801fe72:	2200      	movs	r2, #0
 801fe74:	f7ed fbea 	bl	800d64c <osMessageQueuePut>
 801fe78:	e79d      	b.n	801fdb6 <AdcTestTask+0x6>
		}
		else if (status == osErrorTimeout)
 801fe7a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801fe7e:	f113 0f02 	cmn.w	r3, #2
 801fe82:	d103      	bne.n	801fe8c <AdcTestTask+0xdc>
		{
			osDelay(1);
 801fe84:	2001      	movs	r0, #1
 801fe86:	f7ec ff37 	bl	800ccf8 <osDelay>
 801fe8a:	e794      	b.n	801fdb6 <AdcTestTask+0x6>
		}
		else
		{
			printf("adc msg read error: %d\n", status);
 801fe8c:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 801fe90:	4806      	ldr	r0, [pc, #24]	@ (801feac <AdcTestTask+0xfc>)
 801fe92:	f001 f917 	bl	80210c4 <iprintf>
			osDelay(1);
 801fe96:	2001      	movs	r0, #1
 801fe98:	f7ec ff2e 	bl	800ccf8 <osDelay>
		status = osMessageQueueGet(adcQueueHandle, &test_data, 0, 10);
 801fe9c:	e78b      	b.n	801fdb6 <AdcTestTask+0x6>
 801fe9e:	bf00      	nop
 801fea0:	20000334 	.word	0x20000334
 801fea4:	08026b28 	.word	0x08026b28
 801fea8:	20000324 	.word	0x20000324
 801feac:	08026b44 	.word	0x08026b44

0801feb0 <ADC_Test_Perform>:
		}
	}
}

uint8_t ADC_Test_Perform(void)
{
 801feb0:	b580      	push	{r7, lr}
 801feb2:	b082      	sub	sp, #8
 801feb4:	af00      	add	r7, sp, #0
	printf("Performing adc test\n");
#endif

	HAL_StatusTypeDef status;

	status = HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adc_buf,1);
 801feb6:	2201      	movs	r2, #1
 801feb8:	490f      	ldr	r1, [pc, #60]	@ (801fef8 <ADC_Test_Perform+0x48>)
 801feba:	4810      	ldr	r0, [pc, #64]	@ (801fefc <ADC_Test_Perform+0x4c>)
 801febc:	f7e2 fb12 	bl	80024e4 <HAL_ADC_Start_DMA>
 801fec0:	4603      	mov	r3, r0
 801fec2:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 801fec4:	79fb      	ldrb	r3, [r7, #7]
 801fec6:	2b00      	cmp	r3, #0
 801fec8:	d001      	beq.n	801fece <ADC_Test_Perform+0x1e>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("ADC_Start_DMA failed\n");
#endif
		return TEST_FAILED;
 801feca:	23ff      	movs	r3, #255	@ 0xff
 801fecc:	e00f      	b.n	801feee <ADC_Test_Perform+0x3e>
	}

	while (!adc_ready);
 801fece:	bf00      	nop
 801fed0:	4b0b      	ldr	r3, [pc, #44]	@ (801ff00 <ADC_Test_Perform+0x50>)
 801fed2:	681b      	ldr	r3, [r3, #0]
 801fed4:	2b00      	cmp	r3, #0
 801fed6:	d0fb      	beq.n	801fed0 <ADC_Test_Perform+0x20>
	adc_ready=0;
 801fed8:	4b09      	ldr	r3, [pc, #36]	@ (801ff00 <ADC_Test_Perform+0x50>)
 801feda:	2200      	movs	r2, #0
 801fedc:	601a      	str	r2, [r3, #0]

#ifdef PRINT_TESTS_DEBUG
	printf("adc value = %d\n",adc_buf[0]);
#endif

	if(adc_buf[0] >= EXPECTED_3V3 - ERR_TOLERANCE_3V3) return TEST_SUCCESS;
 801fede:	4b06      	ldr	r3, [pc, #24]	@ (801fef8 <ADC_Test_Perform+0x48>)
 801fee0:	881b      	ldrh	r3, [r3, #0]
 801fee2:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 801fee6:	d301      	bcc.n	801feec <ADC_Test_Perform+0x3c>
 801fee8:	2301      	movs	r3, #1
 801feea:	e000      	b.n	801feee <ADC_Test_Perform+0x3e>

	return TEST_FAILED;
 801feec:	23ff      	movs	r3, #255	@ 0xff
}
 801feee:	4618      	mov	r0, r3
 801fef0:	3708      	adds	r7, #8
 801fef2:	46bd      	mov	sp, r7
 801fef4:	bd80      	pop	{r7, pc}
 801fef6:	bf00      	nop
 801fef8:	2002857c 	.word	0x2002857c
 801fefc:	2000022c 	.word	0x2000022c
 801ff00:	2002877c 	.word	0x2002877c

0801ff04 <HAL_ADC_ConvCpltCallback>:
/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 801ff04:	b580      	push	{r7, lr}
 801ff06:	b082      	sub	sp, #8
 801ff08:	af00      	add	r7, sp, #0
 801ff0a:	6078      	str	r0, [r7, #4]
	adc_ready=1;
 801ff0c:	4b07      	ldr	r3, [pc, #28]	@ (801ff2c <HAL_ADC_ConvCpltCallback+0x28>)
 801ff0e:	2201      	movs	r2, #1
 801ff10:	601a      	str	r2, [r3, #0]
	if(HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 801ff12:	4807      	ldr	r0, [pc, #28]	@ (801ff30 <HAL_ADC_ConvCpltCallback+0x2c>)
 801ff14:	f7e2 fbe4 	bl	80026e0 <HAL_ADC_Stop_DMA>
 801ff18:	4603      	mov	r3, r0
 801ff1a:	2b00      	cmp	r3, #0
 801ff1c:	d001      	beq.n	801ff22 <HAL_ADC_ConvCpltCallback+0x1e>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("ADC_Stop_DMA failed\n");
#endif
		Error_Handler();
 801ff1e:	f7e1 f9b1 	bl	8001284 <Error_Handler>
	}
}
 801ff22:	bf00      	nop
 801ff24:	3708      	adds	r7, #8
 801ff26:	46bd      	mov	sp, r7
 801ff28:	bd80      	pop	{r7, pc}
 801ff2a:	bf00      	nop
 801ff2c:	2002877c 	.word	0x2002877c
 801ff30:	2000022c 	.word	0x2000022c

0801ff34 <TestDispatcher>:
extern osMessageQueueId_t spiQueueHandle;
extern osMessageQueueId_t adcQueueHandle;
extern osMessageQueueId_t timQueueHandle;

void TestDispatcher(void)
{
 801ff34:	b580      	push	{r7, lr}
 801ff36:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 801ff3a:	af00      	add	r7, sp, #0
	{
		//printf("IN dispatcher\n");
		InMsg_t in_msg;
		TestData_t test_data;

		if(osMessageQueueGet(inMsgQueueHandle, &in_msg, 0, 10) == osOK)
 801ff3c:	4b76      	ldr	r3, [pc, #472]	@ (8020118 <TestDispatcher+0x1e4>)
 801ff3e:	6818      	ldr	r0, [r3, #0]
 801ff40:	4639      	mov	r1, r7
 801ff42:	230a      	movs	r3, #10
 801ff44:	2200      	movs	r2, #0
 801ff46:	f7ed fbf5 	bl	800d734 <osMessageQueueGet>
 801ff4a:	4603      	mov	r3, r0
 801ff4c:	2b00      	cmp	r3, #0
 801ff4e:	f040 80de 	bne.w	802010e <TestDispatcher+0x1da>
		{
			printf("Dispatcher got msg to periph %d!\n", in_msg.peripheral);
 801ff52:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ff56:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801ff5a:	7b1b      	ldrb	r3, [r3, #12]
 801ff5c:	4619      	mov	r1, r3
 801ff5e:	486f      	ldr	r0, [pc, #444]	@ (802011c <TestDispatcher+0x1e8>)
 801ff60:	f001 f8b0 	bl	80210c4 <iprintf>

			// load test_data
			test_data.addr = in_msg.addr;
 801ff64:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ff68:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801ff6c:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 801ff70:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 801ff74:	6812      	ldr	r2, [r2, #0]
 801ff76:	601a      	str	r2, [r3, #0]
			test_data.port = in_msg.port;
 801ff78:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ff7c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801ff80:	889a      	ldrh	r2, [r3, #4]
 801ff82:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ff86:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801ff8a:	809a      	strh	r2, [r3, #4]
			test_data.test_id = in_msg.test_id;
 801ff8c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ff90:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801ff94:	689a      	ldr	r2, [r3, #8]
 801ff96:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ff9a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801ff9e:	609a      	str	r2, [r3, #8]
			test_data.n_iter = in_msg.n_iter;
 801ffa0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ffa4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801ffa8:	7b5a      	ldrb	r2, [r3, #13]
 801ffaa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ffae:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801ffb2:	731a      	strb	r2, [r3, #12]
			test_data.p_len = in_msg.p_len;
 801ffb4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ffb8:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801ffbc:	7b9a      	ldrb	r2, [r3, #14]
 801ffbe:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ffc2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801ffc6:	735a      	strb	r2, [r3, #13]
			memcpy(test_data.payload, in_msg.payload, in_msg.p_len);
 801ffc8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ffcc:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801ffd0:	7b9b      	ldrb	r3, [r3, #14]
 801ffd2:	461a      	mov	r2, r3
 801ffd4:	463b      	mov	r3, r7
 801ffd6:	f103 010f 	add.w	r1, r3, #15
 801ffda:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801ffde:	330e      	adds	r3, #14
 801ffe0:	4618      	mov	r0, r3
 801ffe2:	f001 fa94 	bl	802150e <memcpy>

			// send to relevant test queue
			if(in_msg.peripheral & TEST_UART)
 801ffe6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ffea:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801ffee:	7b1b      	ldrb	r3, [r3, #12]
 801fff0:	f003 0302 	and.w	r3, r3, #2
 801fff4:	2b00      	cmp	r3, #0
 801fff6:	d013      	beq.n	8020020 <TestDispatcher+0xec>
			{
				printf("dispatcher sent to UART\n");
 801fff8:	4849      	ldr	r0, [pc, #292]	@ (8020120 <TestDispatcher+0x1ec>)
 801fffa:	f001 f8d3 	bl	80211a4 <puts>
				if (osMessageQueuePut(uartQueueHandle, &test_data, 0, 10) != osOK)
 801fffe:	4b49      	ldr	r3, [pc, #292]	@ (8020124 <TestDispatcher+0x1f0>)
 8020000:	6818      	ldr	r0, [r3, #0]
 8020002:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8020006:	230a      	movs	r3, #10
 8020008:	2200      	movs	r2, #0
 802000a:	f7ed fb1f 	bl	800d64c <osMessageQueuePut>
 802000e:	4603      	mov	r3, r0
 8020010:	2b00      	cmp	r3, #0
 8020012:	d005      	beq.n	8020020 <TestDispatcher+0xec>
				{
					printf("uart q full!\n");
 8020014:	4844      	ldr	r0, [pc, #272]	@ (8020128 <TestDispatcher+0x1f4>)
 8020016:	f001 f8c5 	bl	80211a4 <puts>
					osDelay(1);
 802001a:	2001      	movs	r0, #1
 802001c:	f7ec fe6c 	bl	800ccf8 <osDelay>
				}
			}
			if(in_msg.peripheral & TEST_I2C)
 8020020:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8020024:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8020028:	7b1b      	ldrb	r3, [r3, #12]
 802002a:	f003 0308 	and.w	r3, r3, #8
 802002e:	2b00      	cmp	r3, #0
 8020030:	d013      	beq.n	802005a <TestDispatcher+0x126>
			{
				printf("dispatcher sent to I2C\n");
 8020032:	483e      	ldr	r0, [pc, #248]	@ (802012c <TestDispatcher+0x1f8>)
 8020034:	f001 f8b6 	bl	80211a4 <puts>
				if (osMessageQueuePut(i2cQueueHandle, &test_data, 0, 10) != osOK)
 8020038:	4b3d      	ldr	r3, [pc, #244]	@ (8020130 <TestDispatcher+0x1fc>)
 802003a:	6818      	ldr	r0, [r3, #0]
 802003c:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8020040:	230a      	movs	r3, #10
 8020042:	2200      	movs	r2, #0
 8020044:	f7ed fb02 	bl	800d64c <osMessageQueuePut>
 8020048:	4603      	mov	r3, r0
 802004a:	2b00      	cmp	r3, #0
 802004c:	d005      	beq.n	802005a <TestDispatcher+0x126>
				{
					printf("i2c q full!\n");
 802004e:	4839      	ldr	r0, [pc, #228]	@ (8020134 <TestDispatcher+0x200>)
 8020050:	f001 f8a8 	bl	80211a4 <puts>
					osDelay(1);
 8020054:	2001      	movs	r0, #1
 8020056:	f7ec fe4f 	bl	800ccf8 <osDelay>
    			}
			}
			if(in_msg.peripheral & TEST_SPI)
 802005a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 802005e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8020062:	7b1b      	ldrb	r3, [r3, #12]
 8020064:	f003 0304 	and.w	r3, r3, #4
 8020068:	2b00      	cmp	r3, #0
 802006a:	d013      	beq.n	8020094 <TestDispatcher+0x160>
			{
				printf("dispatcher sent to SPI\n");
 802006c:	4832      	ldr	r0, [pc, #200]	@ (8020138 <TestDispatcher+0x204>)
 802006e:	f001 f899 	bl	80211a4 <puts>
				if (osMessageQueuePut(spiQueueHandle, &test_data, 0, 10) != osOK)
 8020072:	4b32      	ldr	r3, [pc, #200]	@ (802013c <TestDispatcher+0x208>)
 8020074:	6818      	ldr	r0, [r3, #0]
 8020076:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 802007a:	230a      	movs	r3, #10
 802007c:	2200      	movs	r2, #0
 802007e:	f7ed fae5 	bl	800d64c <osMessageQueuePut>
 8020082:	4603      	mov	r3, r0
 8020084:	2b00      	cmp	r3, #0
 8020086:	d005      	beq.n	8020094 <TestDispatcher+0x160>
				{
					printf("spi q full!\n");
 8020088:	482d      	ldr	r0, [pc, #180]	@ (8020140 <TestDispatcher+0x20c>)
 802008a:	f001 f88b 	bl	80211a4 <puts>
					osDelay(1);
 802008e:	2001      	movs	r0, #1
 8020090:	f7ec fe32 	bl	800ccf8 <osDelay>
				}
			}
			if(in_msg.peripheral & TEST_ADC)
 8020094:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8020098:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 802009c:	7b1b      	ldrb	r3, [r3, #12]
 802009e:	f003 0310 	and.w	r3, r3, #16
 80200a2:	2b00      	cmp	r3, #0
 80200a4:	d013      	beq.n	80200ce <TestDispatcher+0x19a>
			{
				printf("dispatcher sent to ADC\n");
 80200a6:	4827      	ldr	r0, [pc, #156]	@ (8020144 <TestDispatcher+0x210>)
 80200a8:	f001 f87c 	bl	80211a4 <puts>
				if (osMessageQueuePut(adcQueueHandle, &test_data, 0, 10) != osOK)
 80200ac:	4b26      	ldr	r3, [pc, #152]	@ (8020148 <TestDispatcher+0x214>)
 80200ae:	6818      	ldr	r0, [r3, #0]
 80200b0:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80200b4:	230a      	movs	r3, #10
 80200b6:	2200      	movs	r2, #0
 80200b8:	f7ed fac8 	bl	800d64c <osMessageQueuePut>
 80200bc:	4603      	mov	r3, r0
 80200be:	2b00      	cmp	r3, #0
 80200c0:	d005      	beq.n	80200ce <TestDispatcher+0x19a>
				{
					printf("adc q full!\n");
 80200c2:	4822      	ldr	r0, [pc, #136]	@ (802014c <TestDispatcher+0x218>)
 80200c4:	f001 f86e 	bl	80211a4 <puts>
					osDelay(1);
 80200c8:	2001      	movs	r0, #1
 80200ca:	f7ec fe15 	bl	800ccf8 <osDelay>
				}
			}
			if(in_msg.peripheral & TEST_TIM)
 80200ce:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80200d2:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80200d6:	7b1b      	ldrb	r3, [r3, #12]
 80200d8:	f003 0301 	and.w	r3, r3, #1
 80200dc:	2b00      	cmp	r3, #0
 80200de:	f43f af2d 	beq.w	801ff3c <TestDispatcher+0x8>
			{
				printf("dispatcher sent to TIM\n");
 80200e2:	481b      	ldr	r0, [pc, #108]	@ (8020150 <TestDispatcher+0x21c>)
 80200e4:	f001 f85e 	bl	80211a4 <puts>
				if (osMessageQueuePut(timQueueHandle, &test_data, 0, 10) != osOK)
 80200e8:	4b1a      	ldr	r3, [pc, #104]	@ (8020154 <TestDispatcher+0x220>)
 80200ea:	6818      	ldr	r0, [r3, #0]
 80200ec:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80200f0:	230a      	movs	r3, #10
 80200f2:	2200      	movs	r2, #0
 80200f4:	f7ed faaa 	bl	800d64c <osMessageQueuePut>
 80200f8:	4603      	mov	r3, r0
 80200fa:	2b00      	cmp	r3, #0
 80200fc:	f43f af1e 	beq.w	801ff3c <TestDispatcher+0x8>
				{
					printf("tim q full!\n");
 8020100:	4815      	ldr	r0, [pc, #84]	@ (8020158 <TestDispatcher+0x224>)
 8020102:	f001 f84f 	bl	80211a4 <puts>
					osDelay(1);
 8020106:	2001      	movs	r0, #1
 8020108:	f7ec fdf6 	bl	800ccf8 <osDelay>
 802010c:	e716      	b.n	801ff3c <TestDispatcher+0x8>
				}
			}
		}
		else osDelay(1);
 802010e:	2001      	movs	r0, #1
 8020110:	f7ec fdf2 	bl	800ccf8 <osDelay>
	{
 8020114:	e712      	b.n	801ff3c <TestDispatcher+0x8>
 8020116:	bf00      	nop
 8020118:	20000320 	.word	0x20000320
 802011c:	08026b5c 	.word	0x08026b5c
 8020120:	08026b80 	.word	0x08026b80
 8020124:	20000328 	.word	0x20000328
 8020128:	08026b98 	.word	0x08026b98
 802012c:	08026ba8 	.word	0x08026ba8
 8020130:	2000032c 	.word	0x2000032c
 8020134:	08026bc0 	.word	0x08026bc0
 8020138:	08026bcc 	.word	0x08026bcc
 802013c:	20000330 	.word	0x20000330
 8020140:	08026be4 	.word	0x08026be4
 8020144:	08026bf0 	.word	0x08026bf0
 8020148:	20000334 	.word	0x20000334
 802014c:	08026c08 	.word	0x08026c08
 8020150:	08026c14 	.word	0x08026c14
 8020154:	20000338 	.word	0x20000338
 8020158:	08026c2c 	.word	0x08026c2c

0802015c <Match_CRC>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

int Match_CRC(uint8_t *buf1, uint8_t buf1_len, uint8_t *buf2, uint8_t buf2_len)
{
 802015c:	b580      	push	{r7, lr}
 802015e:	b086      	sub	sp, #24
 8020160:	af00      	add	r7, sp, #0
 8020162:	60f8      	str	r0, [r7, #12]
 8020164:	607a      	str	r2, [r7, #4]
 8020166:	461a      	mov	r2, r3
 8020168:	460b      	mov	r3, r1
 802016a:	72fb      	strb	r3, [r7, #11]
 802016c:	4613      	mov	r3, r2
 802016e:	72bb      	strb	r3, [r7, #10]
	uint32_t buf1_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)buf1, (uint32_t) buf1_len);
 8020170:	7afb      	ldrb	r3, [r7, #11]
 8020172:	461a      	mov	r2, r3
 8020174:	68f9      	ldr	r1, [r7, #12]
 8020176:	480b      	ldr	r0, [pc, #44]	@ (80201a4 <Match_CRC+0x48>)
 8020178:	f7e2 ff3c 	bl	8002ff4 <HAL_CRC_Calculate>
 802017c:	6178      	str	r0, [r7, #20]
	uint32_t buf2_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)buf2, (uint32_t) buf2_len);
 802017e:	7abb      	ldrb	r3, [r7, #10]
 8020180:	461a      	mov	r2, r3
 8020182:	6879      	ldr	r1, [r7, #4]
 8020184:	4807      	ldr	r0, [pc, #28]	@ (80201a4 <Match_CRC+0x48>)
 8020186:	f7e2 ff35 	bl	8002ff4 <HAL_CRC_Calculate>
 802018a:	6138      	str	r0, [r7, #16]

	if(buf1_crc == buf2_crc)
 802018c:	697a      	ldr	r2, [r7, #20]
 802018e:	693b      	ldr	r3, [r7, #16]
 8020190:	429a      	cmp	r2, r3
 8020192:	d101      	bne.n	8020198 <Match_CRC+0x3c>
		return CRC_MATCH_OK;
 8020194:	2301      	movs	r3, #1
 8020196:	e000      	b.n	802019a <Match_CRC+0x3e>

	return CRC_MATCH_FAIL;
 8020198:	2300      	movs	r3, #0
}
 802019a:	4618      	mov	r0, r3
 802019c:	3718      	adds	r7, #24
 802019e:	46bd      	mov	sp, r7
 80201a0:	bd80      	pop	{r7, pc}
 80201a2:	bf00      	nop
 80201a4:	200002d4 	.word	0x200002d4

080201a8 <UDP_Server_Init>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void UDP_Server_Init(void)
{
 80201a8:	b580      	push	{r7, lr}
 80201aa:	af00      	add	r7, sp, #0
    conn_recv = netconn_new(NETCONN_UDP);
 80201ac:	2200      	movs	r2, #0
 80201ae:	2100      	movs	r1, #0
 80201b0:	2020      	movs	r0, #32
 80201b2:	f7f1 f8cf 	bl	8011354 <netconn_new_with_proto_and_callback>
 80201b6:	4603      	mov	r3, r0
 80201b8:	4a1e      	ldr	r2, [pc, #120]	@ (8020234 <UDP_Server_Init+0x8c>)
 80201ba:	6013      	str	r3, [r2, #0]
	if (conn_recv == NULL)
 80201bc:	4b1d      	ldr	r3, [pc, #116]	@ (8020234 <UDP_Server_Init+0x8c>)
 80201be:	681b      	ldr	r3, [r3, #0]
 80201c0:	2b00      	cmp	r3, #0
 80201c2:	d104      	bne.n	80201ce <UDP_Server_Init+0x26>
	{
		printf("error initializing UDP receive netconn\n");
 80201c4:	481c      	ldr	r0, [pc, #112]	@ (8020238 <UDP_Server_Init+0x90>)
 80201c6:	f000 ffed 	bl	80211a4 <puts>
		while(1);
 80201ca:	bf00      	nop
 80201cc:	e7fd      	b.n	80201ca <UDP_Server_Init+0x22>
	}

	if (netconn_bind(conn_recv, IP_ADDR_ANY, SERVER_PORT) != ERR_OK)
 80201ce:	4b19      	ldr	r3, [pc, #100]	@ (8020234 <UDP_Server_Init+0x8c>)
 80201d0:	681b      	ldr	r3, [r3, #0]
 80201d2:	f24d 4231 	movw	r2, #54321	@ 0xd431
 80201d6:	4919      	ldr	r1, [pc, #100]	@ (802023c <UDP_Server_Init+0x94>)
 80201d8:	4618      	mov	r0, r3
 80201da:	f7f1 f975 	bl	80114c8 <netconn_bind>
 80201de:	4603      	mov	r3, r0
 80201e0:	2b00      	cmp	r3, #0
 80201e2:	d00c      	beq.n	80201fe <UDP_Server_Init+0x56>
	{
		printf("error binding UDP port\n");
 80201e4:	4816      	ldr	r0, [pc, #88]	@ (8020240 <UDP_Server_Init+0x98>)
 80201e6:	f000 ffdd 	bl	80211a4 <puts>
		netconn_delete(conn_recv);
 80201ea:	4b12      	ldr	r3, [pc, #72]	@ (8020234 <UDP_Server_Init+0x8c>)
 80201ec:	681b      	ldr	r3, [r3, #0]
 80201ee:	4618      	mov	r0, r3
 80201f0:	f7f1 f94e 	bl	8011490 <netconn_delete>
		conn_recv = NULL;
 80201f4:	4b0f      	ldr	r3, [pc, #60]	@ (8020234 <UDP_Server_Init+0x8c>)
 80201f6:	2200      	movs	r2, #0
 80201f8:	601a      	str	r2, [r3, #0]
		while(1);
 80201fa:	bf00      	nop
 80201fc:	e7fd      	b.n	80201fa <UDP_Server_Init+0x52>
	}

	netconn_set_recvtimeout(conn_recv, 100);
 80201fe:	4b0d      	ldr	r3, [pc, #52]	@ (8020234 <UDP_Server_Init+0x8c>)
 8020200:	681b      	ldr	r3, [r3, #0]
 8020202:	2264      	movs	r2, #100	@ 0x64
 8020204:	61da      	str	r2, [r3, #28]

	conn_send = netconn_new(NETCONN_UDP);
 8020206:	2200      	movs	r2, #0
 8020208:	2100      	movs	r1, #0
 802020a:	2020      	movs	r0, #32
 802020c:	f7f1 f8a2 	bl	8011354 <netconn_new_with_proto_and_callback>
 8020210:	4603      	mov	r3, r0
 8020212:	4a0c      	ldr	r2, [pc, #48]	@ (8020244 <UDP_Server_Init+0x9c>)
 8020214:	6013      	str	r3, [r2, #0]
	if (conn_send == NULL)
 8020216:	4b0b      	ldr	r3, [pc, #44]	@ (8020244 <UDP_Server_Init+0x9c>)
 8020218:	681b      	ldr	r3, [r3, #0]
 802021a:	2b00      	cmp	r3, #0
 802021c:	d104      	bne.n	8020228 <UDP_Server_Init+0x80>
	{
		printf("error initializing UDP send netconn\n");
 802021e:	480a      	ldr	r0, [pc, #40]	@ (8020248 <UDP_Server_Init+0xa0>)
 8020220:	f000 ffc0 	bl	80211a4 <puts>
		while(1);
 8020224:	bf00      	nop
 8020226:	e7fd      	b.n	8020224 <UDP_Server_Init+0x7c>
	}

	printf("UDP init success\n");
 8020228:	4808      	ldr	r0, [pc, #32]	@ (802024c <UDP_Server_Init+0xa4>)
 802022a:	f000 ffbb 	bl	80211a4 <puts>
}
 802022e:	bf00      	nop
 8020230:	bd80      	pop	{r7, pc}
 8020232:	bf00      	nop
 8020234:	20028780 	.word	0x20028780
 8020238:	08026c38 	.word	0x08026c38
 802023c:	08027264 	.word	0x08027264
 8020240:	08026c60 	.word	0x08026c60
 8020244:	20028784 	.word	0x20028784
 8020248:	08026c78 	.word	0x08026c78
 802024c:	08026c9c 	.word	0x08026c9c

08020250 <UDP_Listen>:

void UDP_Listen(void)
{
 8020250:	b580      	push	{r7, lr}
 8020252:	b0ca      	sub	sp, #296	@ 0x128
 8020254:	af00      	add	r7, sp, #0
	printf("Listening started\n");
 8020256:	4863      	ldr	r0, [pc, #396]	@ (80203e4 <UDP_Listen+0x194>)
 8020258:	f000 ffa4 	bl	80211a4 <puts>


	while(1)
	{
		//printf("listener alive\n");
		err = netconn_recv(conn_recv, &buf);
 802025c:	4b62      	ldr	r3, [pc, #392]	@ (80203e8 <UDP_Listen+0x198>)
 802025e:	681b      	ldr	r3, [r3, #0]
 8020260:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 8020264:	4611      	mov	r1, r2
 8020266:	4618      	mov	r0, r3
 8020268:	f7f1 faf4 	bl	8011854 <netconn_recv>
 802026c:	4603      	mov	r3, r0
 802026e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
	    if(err == ERR_OK)
 8020272:	f997 3127 	ldrsb.w	r3, [r7, #295]	@ 0x127
 8020276:	2b00      	cmp	r3, #0
 8020278:	f040 80a0 	bne.w	80203bc <UDP_Listen+0x16c>
		{
			printf("listener got a message\n");
 802027c:	485b      	ldr	r0, [pc, #364]	@ (80203ec <UDP_Listen+0x19c>)
 802027e:	f000 ff91 	bl	80211a4 <puts>
			// Load in_msg
			ip_addr_copy(in_msg.addr, *netbuf_fromaddr(buf));
 8020282:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8020286:	689a      	ldr	r2, [r3, #8]
 8020288:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802028c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020290:	601a      	str	r2, [r3, #0]
			in_msg.port = netbuf_fromport(buf);
 8020292:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8020296:	899a      	ldrh	r2, [r3, #12]
 8020298:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802029c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80202a0:	809a      	strh	r2, [r3, #4]

			netbuf_data(buf, &raw_data, &len);
 80202a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80202a6:	f507 728b 	add.w	r2, r7, #278	@ 0x116
 80202aa:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 80202ae:	4618      	mov	r0, r3
 80202b0:	f7f2 fee6 	bl	8013080 <netbuf_data>
			netbuf_delete(buf); // finished with buf
 80202b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80202b8:	4618      	mov	r0, r3
 80202ba:	f7f2 fe77 	bl	8012fac <netbuf_delete>

			n_read = 0;
 80202be:	2300      	movs	r3, #0
 80202c0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
			memcpy(&in_msg.test_id, raw_data, sizeof(in_msg.test_id));
 80202c4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80202c8:	681b      	ldr	r3, [r3, #0]
 80202ca:	461a      	mov	r2, r3
 80202cc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80202d0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80202d4:	609a      	str	r2, [r3, #8]
			n_read += sizeof(in_msg.test_id);
 80202d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80202da:	3304      	adds	r3, #4
 80202dc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120

			memcpy(&in_msg.peripheral, &raw_data[n_read++], 1);
 80202e0:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80202e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80202e8:	1c59      	adds	r1, r3, #1
 80202ea:	f8c7 1120 	str.w	r1, [r7, #288]	@ 0x120
 80202ee:	4413      	add	r3, r2
 80202f0:	781a      	ldrb	r2, [r3, #0]
 80202f2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80202f6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80202fa:	731a      	strb	r2, [r3, #12]
			memcpy(&in_msg.n_iter, &raw_data[n_read++], 1);
 80202fc:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8020300:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8020304:	1c59      	adds	r1, r3, #1
 8020306:	f8c7 1120 	str.w	r1, [r7, #288]	@ 0x120
 802030a:	4413      	add	r3, r2
 802030c:	781a      	ldrb	r2, [r3, #0]
 802030e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020312:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020316:	735a      	strb	r2, [r3, #13]
			memcpy(&in_msg.p_len, &raw_data[n_read++], 1);
 8020318:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 802031c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8020320:	1c59      	adds	r1, r3, #1
 8020322:	f8c7 1120 	str.w	r1, [r7, #288]	@ 0x120
 8020326:	4413      	add	r3, r2
 8020328:	781a      	ldrb	r2, [r3, #0]
 802032a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802032e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020332:	739a      	strb	r2, [r3, #14]
			memcpy(&in_msg.payload, &raw_data[n_read], in_msg.p_len);
 8020334:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8020338:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 802033c:	18d1      	adds	r1, r2, r3
 802033e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020342:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020346:	7b9b      	ldrb	r3, [r3, #14]
 8020348:	461a      	mov	r2, r3
 802034a:	1d3b      	adds	r3, r7, #4
 802034c:	330f      	adds	r3, #15
 802034e:	4618      	mov	r0, r3
 8020350:	f001 f8dd 	bl	802150e <memcpy>
			netbuf_delete(buf); // finished with buf
            */


			if (in_msg.p_len < sizeof(in_msg.payload))
				in_msg.payload[in_msg.p_len] = '\0';
 8020354:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020358:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802035c:	7b9b      	ldrb	r3, [r3, #14]
 802035e:	461a      	mov	r2, r3
 8020360:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020364:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020368:	4413      	add	r3, r2
 802036a:	2200      	movs	r2, #0
 802036c:	73da      	strb	r2, [r3, #15]
			printf("Peripheral is: %d\n", in_msg.peripheral);
 802036e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020372:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020376:	7b1b      	ldrb	r3, [r3, #12]
 8020378:	4619      	mov	r1, r3
 802037a:	481d      	ldr	r0, [pc, #116]	@ (80203f0 <UDP_Listen+0x1a0>)
 802037c:	f000 fea2 	bl	80210c4 <iprintf>
			printf("n iterations is: %d\n", in_msg.n_iter);
 8020380:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020384:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020388:	7b5b      	ldrb	r3, [r3, #13]
 802038a:	4619      	mov	r1, r3
 802038c:	4819      	ldr	r0, [pc, #100]	@ (80203f4 <UDP_Listen+0x1a4>)
 802038e:	f000 fe99 	bl	80210c4 <iprintf>
			printf("Message is: %s\n", in_msg.payload);
 8020392:	1d3b      	adds	r3, r7, #4
 8020394:	330f      	adds	r3, #15
 8020396:	4619      	mov	r1, r3
 8020398:	4817      	ldr	r0, [pc, #92]	@ (80203f8 <UDP_Listen+0x1a8>)
 802039a:	f000 fe93 	bl	80210c4 <iprintf>

			// send in_msg to InMsgQueue
			if (osMessageQueuePut(inMsgQueueHandle, &in_msg, 0, 10) != osOK)
 802039e:	4b17      	ldr	r3, [pc, #92]	@ (80203fc <UDP_Listen+0x1ac>)
 80203a0:	6818      	ldr	r0, [r3, #0]
 80203a2:	1d39      	adds	r1, r7, #4
 80203a4:	230a      	movs	r3, #10
 80203a6:	2200      	movs	r2, #0
 80203a8:	f7ed f950 	bl	800d64c <osMessageQueuePut>
 80203ac:	4603      	mov	r3, r0
 80203ae:	2b00      	cmp	r3, #0
 80203b0:	f43f af54 	beq.w	802025c <UDP_Listen+0xc>
			{
				printf("inMsg full, dropped msg\n");
 80203b4:	4812      	ldr	r0, [pc, #72]	@ (8020400 <UDP_Listen+0x1b0>)
 80203b6:	f000 fef5 	bl	80211a4 <puts>
 80203ba:	e74f      	b.n	802025c <UDP_Listen+0xc>
			}
		}
	    else if (err == ERR_TIMEOUT)
 80203bc:	f997 3127 	ldrsb.w	r3, [r7, #295]	@ 0x127
 80203c0:	f113 0f03 	cmn.w	r3, #3
 80203c4:	d103      	bne.n	80203ce <UDP_Listen+0x17e>
	    {
	    	osDelay(0);
 80203c6:	2000      	movs	r0, #0
 80203c8:	f7ec fc96 	bl	800ccf8 <osDelay>
 80203cc:	e746      	b.n	802025c <UDP_Listen+0xc>
	    }
	    else
	    {
	    	printf("UDP receive error: %d\n", err);
 80203ce:	f997 3127 	ldrsb.w	r3, [r7, #295]	@ 0x127
 80203d2:	4619      	mov	r1, r3
 80203d4:	480b      	ldr	r0, [pc, #44]	@ (8020404 <UDP_Listen+0x1b4>)
 80203d6:	f000 fe75 	bl	80210c4 <iprintf>
	    	osDelay(1);
 80203da:	2001      	movs	r0, #1
 80203dc:	f7ec fc8c 	bl	800ccf8 <osDelay>
		err = netconn_recv(conn_recv, &buf);
 80203e0:	e73c      	b.n	802025c <UDP_Listen+0xc>
 80203e2:	bf00      	nop
 80203e4:	08026cb0 	.word	0x08026cb0
 80203e8:	20028780 	.word	0x20028780
 80203ec:	08026cc4 	.word	0x08026cc4
 80203f0:	08026cdc 	.word	0x08026cdc
 80203f4:	08026cf0 	.word	0x08026cf0
 80203f8:	08026d08 	.word	0x08026d08
 80203fc:	20000320 	.word	0x20000320
 8020400:	08026d18 	.word	0x08026d18
 8020404:	08026d30 	.word	0x08026d30

08020408 <UDP_Response>:
	    }
	}
}

void UDP_Response(void)
{
 8020408:	b580      	push	{r7, lr}
 802040a:	b086      	sub	sp, #24
 802040c:	af00      	add	r7, sp, #0
	OutMsg_t out_msg;

	while(1)
	{
		//printf("IN responder\n");
		if(osMessageQueueGet(outMsgQueueHandle, &out_msg, 0, 10) == osOK)
 802040e:	4b20      	ldr	r3, [pc, #128]	@ (8020490 <UDP_Response+0x88>)
 8020410:	6818      	ldr	r0, [r3, #0]
 8020412:	4639      	mov	r1, r7
 8020414:	230a      	movs	r3, #10
 8020416:	2200      	movs	r2, #0
 8020418:	f7ed f98c 	bl	800d734 <osMessageQueueGet>
 802041c:	4603      	mov	r3, r0
 802041e:	2b00      	cmp	r3, #0
 8020420:	d130      	bne.n	8020484 <UDP_Response+0x7c>
		{
			printf("responder got a response to send\n");
 8020422:	481c      	ldr	r0, [pc, #112]	@ (8020494 <UDP_Response+0x8c>)
 8020424:	f000 febe 	bl	80211a4 <puts>
			//Load response buffer
			buf = netbuf_new();
 8020428:	f7f2 fda8 	bl	8012f7c <netbuf_new>
 802042c:	6178      	str	r0, [r7, #20]
			if (!buf)
 802042e:	697b      	ldr	r3, [r7, #20]
 8020430:	2b00      	cmp	r3, #0
 8020432:	d02b      	beq.n	802048c <UDP_Response+0x84>
			{
				continue;
			}

			void *data = netbuf_alloc(buf, RESPONSE_SIZE);
 8020434:	2105      	movs	r1, #5
 8020436:	6978      	ldr	r0, [r7, #20]
 8020438:	f7f2 fdd8 	bl	8012fec <netbuf_alloc>
 802043c:	6138      	str	r0, [r7, #16]
			if (!data)
 802043e:	693b      	ldr	r3, [r7, #16]
 8020440:	2b00      	cmp	r3, #0
 8020442:	d103      	bne.n	802044c <UDP_Response+0x44>
			{
			    netbuf_delete(buf);
 8020444:	6978      	ldr	r0, [r7, #20]
 8020446:	f7f2 fdb1 	bl	8012fac <netbuf_delete>
			    continue;
 802044a:	e020      	b.n	802048e <UDP_Response+0x86>
			}
			memcpy(data, &out_msg.test_id, sizeof(out_msg.test_id));
 802044c:	68ba      	ldr	r2, [r7, #8]
 802044e:	693b      	ldr	r3, [r7, #16]
 8020450:	601a      	str	r2, [r3, #0]
			((uint8_t *)data)[sizeof(out_msg.test_id)] = out_msg.test_result;
 8020452:	693b      	ldr	r3, [r7, #16]
 8020454:	3304      	adds	r3, #4
 8020456:	7b3a      	ldrb	r2, [r7, #12]
 8020458:	701a      	strb	r2, [r3, #0]

			// Send response
			if (netconn_sendto(conn_send, buf, &out_msg.addr, out_msg.port) != ERR_OK)
 802045a:	4b0f      	ldr	r3, [pc, #60]	@ (8020498 <UDP_Response+0x90>)
 802045c:	6818      	ldr	r0, [r3, #0]
 802045e:	88bb      	ldrh	r3, [r7, #4]
 8020460:	463a      	mov	r2, r7
 8020462:	6979      	ldr	r1, [r7, #20]
 8020464:	f7f1 fa72 	bl	801194c <netconn_sendto>
 8020468:	4603      	mov	r3, r0
 802046a:	2b00      	cmp	r3, #0
 802046c:	d003      	beq.n	8020476 <UDP_Response+0x6e>
			{
				printf("Error sending response\n");
 802046e:	480b      	ldr	r0, [pc, #44]	@ (802049c <UDP_Response+0x94>)
 8020470:	f000 fe98 	bl	80211a4 <puts>
 8020474:	e002      	b.n	802047c <UDP_Response+0x74>
			}
			else
			{
				printf("Error connecting to client\n");
 8020476:	480a      	ldr	r0, [pc, #40]	@ (80204a0 <UDP_Response+0x98>)
 8020478:	f000 fe94 	bl	80211a4 <puts>
			}
			netbuf_delete(buf);
 802047c:	6978      	ldr	r0, [r7, #20]
 802047e:	f7f2 fd95 	bl	8012fac <netbuf_delete>
 8020482:	e7c4      	b.n	802040e <UDP_Response+0x6>
		}
		else
		{
			osDelay(1);
 8020484:	2001      	movs	r0, #1
 8020486:	f7ec fc37 	bl	800ccf8 <osDelay>
 802048a:	e7c0      	b.n	802040e <UDP_Response+0x6>
				continue;
 802048c:	bf00      	nop
		if(osMessageQueueGet(outMsgQueueHandle, &out_msg, 0, 10) == osOK)
 802048e:	e7be      	b.n	802040e <UDP_Response+0x6>
 8020490:	20000324 	.word	0x20000324
 8020494:	08026d48 	.word	0x08026d48
 8020498:	20028784 	.word	0x20028784
 802049c:	08026d6c 	.word	0x08026d6c
 80204a0:	08026d84 	.word	0x08026d84

080204a4 <I2cTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void I2cTestTask(void)
{
 80204a4:	b580      	push	{r7, lr}
 80204a6:	b0ca      	sub	sp, #296	@ 0x128
 80204a8:	af00      	add	r7, sp, #0
	OutMsg_t out_msg;
	uint8_t result;

	while (1)
	{
		printf("i2c waiting for messages\n");
 80204aa:	4838      	ldr	r0, [pc, #224]	@ (802058c <I2cTestTask+0xe8>)
 80204ac:	f000 fe7a 	bl	80211a4 <puts>
		if(osMessageQueueGet(i2cQueueHandle, &test_data, 0, osWaitForever) == osOK)
 80204b0:	4b37      	ldr	r3, [pc, #220]	@ (8020590 <I2cTestTask+0xec>)
 80204b2:	6818      	ldr	r0, [r3, #0]
 80204b4:	f107 0114 	add.w	r1, r7, #20
 80204b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80204bc:	2200      	movs	r2, #0
 80204be:	f7ed f939 	bl	800d734 <osMessageQueueGet>
 80204c2:	4603      	mov	r3, r0
 80204c4:	2b00      	cmp	r3, #0
 80204c6:	d15d      	bne.n	8020584 <I2cTestTask+0xe0>
		{
			printf("i2c received test ID: %lu\n", test_data.test_id);
 80204c8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80204cc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80204d0:	689b      	ldr	r3, [r3, #8]
 80204d2:	4619      	mov	r1, r3
 80204d4:	482f      	ldr	r0, [pc, #188]	@ (8020594 <I2cTestTask+0xf0>)
 80204d6:	f000 fdf5 	bl	80210c4 <iprintf>

			for (uint8_t i=0; i<test_data.n_iter; i++)
 80204da:	2300      	movs	r3, #0
 80204dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80204e0:	e017      	b.n	8020512 <I2cTestTask+0x6e>
			{
				result = I2C_Test_Perform((uint8_t *)test_data.payload, test_data.p_len);
 80204e2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80204e6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80204ea:	7b5a      	ldrb	r2, [r3, #13]
 80204ec:	f107 0314 	add.w	r3, r7, #20
 80204f0:	330e      	adds	r3, #14
 80204f2:	4611      	mov	r1, r2
 80204f4:	4618      	mov	r0, r3
 80204f6:	f000 f851 	bl	802059c <I2C_Test_Perform>
 80204fa:	4603      	mov	r3, r0
 80204fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 8020500:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020504:	2bff      	cmp	r3, #255	@ 0xff
 8020506:	d00e      	beq.n	8020526 <I2cTestTask+0x82>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 8020508:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 802050c:	3301      	adds	r3, #1
 802050e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8020512:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020516:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 802051a:	7b1b      	ldrb	r3, [r3, #12]
 802051c:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 8020520:	429a      	cmp	r2, r3
 8020522:	d3de      	bcc.n	80204e2 <I2cTestTask+0x3e>
 8020524:	e000      	b.n	8020528 <I2cTestTask+0x84>
					break;
 8020526:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 8020528:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802052c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020530:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8020534:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8020538:	6812      	ldr	r2, [r2, #0]
 802053a:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 802053c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020540:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020544:	889a      	ldrh	r2, [r3, #4]
 8020546:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802054a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802054e:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 8020550:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020554:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020558:	689a      	ldr	r2, [r3, #8]
 802055a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802055e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020562:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 8020564:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020568:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802056c:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 8020570:	731a      	strb	r2, [r3, #12]

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 8020572:	4b09      	ldr	r3, [pc, #36]	@ (8020598 <I2cTestTask+0xf4>)
 8020574:	6818      	ldr	r0, [r3, #0]
 8020576:	1d39      	adds	r1, r7, #4
 8020578:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802057c:	2200      	movs	r2, #0
 802057e:	f7ed f865 	bl	800d64c <osMessageQueuePut>
 8020582:	e792      	b.n	80204aa <I2cTestTask+0x6>
		}
		else osDelay(1);
 8020584:	2001      	movs	r0, #1
 8020586:	f7ec fbb7 	bl	800ccf8 <osDelay>
		printf("i2c waiting for messages\n");
 802058a:	e78e      	b.n	80204aa <I2cTestTask+0x6>
 802058c:	08026da0 	.word	0x08026da0
 8020590:	2000032c 	.word	0x2000032c
 8020594:	08026dbc 	.word	0x08026dbc
 8020598:	20000324 	.word	0x20000324

0802059c <I2C_Test_Perform>:
	}
}

uint8_t I2C_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 802059c:	b590      	push	{r4, r7, lr}
 802059e:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 80205a2:	af00      	add	r7, sp, #0
 80205a4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80205a8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80205ac:	6018      	str	r0, [r3, #0]
 80205ae:	460a      	mov	r2, r1
 80205b0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80205b4:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80205b8:	701a      	strb	r2, [r3, #0]
	printf("Performing i2c test\n");
#endif

	HAL_StatusTypeDef status;

	i2c1_tx_done = 0;
 80205ba:	4b4d      	ldr	r3, [pc, #308]	@ (80206f0 <I2C_Test_Perform+0x154>)
 80205bc:	2200      	movs	r2, #0
 80205be:	701a      	strb	r2, [r3, #0]
	i2c1_rx_done = 0;
 80205c0:	4b4c      	ldr	r3, [pc, #304]	@ (80206f4 <I2C_Test_Perform+0x158>)
 80205c2:	2200      	movs	r2, #0
 80205c4:	701a      	strb	r2, [r3, #0]
	i2c2_tx_done = 0;
 80205c6:	4b4c      	ldr	r3, [pc, #304]	@ (80206f8 <I2C_Test_Perform+0x15c>)
 80205c8:	2200      	movs	r2, #0
 80205ca:	701a      	strb	r2, [r3, #0]
	i2c2_rx_done = 0;
 80205cc:	4b4b      	ldr	r3, [pc, #300]	@ (80206fc <I2C_Test_Perform+0x160>)
 80205ce:	2200      	movs	r2, #0
 80205d0:	701a      	strb	r2, [r3, #0]

	uint8_t i2c1_rx[MAX_BUF];
	uint8_t i2c2_rx[MAX_BUF];

	// Send msg i2c1 -> i2c2
	status = HAL_I2C_Slave_Receive_DMA(&hi2c2, i2c2_rx, msg_len);
 80205d2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80205d6:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80205da:	781b      	ldrb	r3, [r3, #0]
 80205dc:	b29a      	uxth	r2, r3
 80205de:	f107 0308 	add.w	r3, r7, #8
 80205e2:	4619      	mov	r1, r3
 80205e4:	4846      	ldr	r0, [pc, #280]	@ (8020700 <I2C_Test_Perform+0x164>)
 80205e6:	f7e5 fa7d 	bl	8005ae4 <HAL_I2C_Slave_Receive_DMA>
 80205ea:	4603      	mov	r3, r0
 80205ec:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 80205f0:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 80205f4:	2b00      	cmp	r3, #0
 80205f6:	d001      	beq.n	80205fc <I2C_Test_Perform+0x60>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c1 -> i2c2 RX failed\n");
#endif
		return TEST_FAILED;
 80205f8:	23ff      	movs	r3, #255	@ 0xff
 80205fa:	e074      	b.n	80206e6 <I2C_Test_Perform+0x14a>
	}

	status = HAL_I2C_Master_Transmit_DMA(&hi2c1, 10<<1, msg, msg_len);
 80205fc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020600:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020604:	781b      	ldrb	r3, [r3, #0]
 8020606:	b29b      	uxth	r3, r3
 8020608:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 802060c:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 8020610:	6812      	ldr	r2, [r2, #0]
 8020612:	2114      	movs	r1, #20
 8020614:	483b      	ldr	r0, [pc, #236]	@ (8020704 <I2C_Test_Perform+0x168>)
 8020616:	f7e4 ff75 	bl	8005504 <HAL_I2C_Master_Transmit_DMA>
 802061a:	4603      	mov	r3, r0
 802061c:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 8020620:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8020624:	2b00      	cmp	r3, #0
 8020626:	d001      	beq.n	802062c <I2C_Test_Perform+0x90>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c1 -> i2c2 TX failed\n");
#endif
		return TEST_FAILED;
 8020628:	23ff      	movs	r3, #255	@ 0xff
 802062a:	e05c      	b.n	80206e6 <I2C_Test_Perform+0x14a>
	}
	while (!i2c2_rx_done || !i2c1_tx_done);
 802062c:	bf00      	nop
 802062e:	4b33      	ldr	r3, [pc, #204]	@ (80206fc <I2C_Test_Perform+0x160>)
 8020630:	781b      	ldrb	r3, [r3, #0]
 8020632:	b2db      	uxtb	r3, r3
 8020634:	2b00      	cmp	r3, #0
 8020636:	d0fa      	beq.n	802062e <I2C_Test_Perform+0x92>
 8020638:	4b2d      	ldr	r3, [pc, #180]	@ (80206f0 <I2C_Test_Perform+0x154>)
 802063a:	781b      	ldrb	r3, [r3, #0]
 802063c:	b2db      	uxtb	r3, r3
 802063e:	2b00      	cmp	r3, #0
 8020640:	d0f5      	beq.n	802062e <I2C_Test_Perform+0x92>

	// Send msg i2c2 -> i2c1
	status = HAL_I2C_Master_Receive_DMA(&hi2c1, 10<<1, i2c1_rx, msg_len);
 8020642:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020646:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 802064a:	781b      	ldrb	r3, [r3, #0]
 802064c:	b29b      	uxth	r3, r3
 802064e:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8020652:	2114      	movs	r1, #20
 8020654:	482b      	ldr	r0, [pc, #172]	@ (8020704 <I2C_Test_Perform+0x168>)
 8020656:	f7e5 f869 	bl	800572c <HAL_I2C_Master_Receive_DMA>
 802065a:	4603      	mov	r3, r0
 802065c:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 8020660:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8020664:	2b00      	cmp	r3, #0
 8020666:	d001      	beq.n	802066c <I2C_Test_Perform+0xd0>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c2 -> i2c1 RX failed\n");
#endif
		return TEST_FAILED;
 8020668:	23ff      	movs	r3, #255	@ 0xff
 802066a:	e03c      	b.n	80206e6 <I2C_Test_Perform+0x14a>
	}

	status = HAL_I2C_Slave_Transmit_DMA(&hi2c2, i2c2_rx, msg_len);
 802066c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020670:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020674:	781b      	ldrb	r3, [r3, #0]
 8020676:	b29a      	uxth	r2, r3
 8020678:	f107 0308 	add.w	r3, r7, #8
 802067c:	4619      	mov	r1, r3
 802067e:	4820      	ldr	r0, [pc, #128]	@ (8020700 <I2C_Test_Perform+0x164>)
 8020680:	f7e5 f944 	bl	800590c <HAL_I2C_Slave_Transmit_DMA>
 8020684:	4603      	mov	r3, r0
 8020686:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 802068a:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 802068e:	2b00      	cmp	r3, #0
 8020690:	d001      	beq.n	8020696 <I2C_Test_Perform+0xfa>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c2 -> i2c1 TX failed\n");
#endif
		return TEST_FAILED;
 8020692:	23ff      	movs	r3, #255	@ 0xff
 8020694:	e027      	b.n	80206e6 <I2C_Test_Perform+0x14a>
	}
	while (!i2c1_rx_done || !i2c2_tx_done);
 8020696:	bf00      	nop
 8020698:	4b16      	ldr	r3, [pc, #88]	@ (80206f4 <I2C_Test_Perform+0x158>)
 802069a:	781b      	ldrb	r3, [r3, #0]
 802069c:	b2db      	uxtb	r3, r3
 802069e:	2b00      	cmp	r3, #0
 80206a0:	d0fa      	beq.n	8020698 <I2C_Test_Perform+0xfc>
 80206a2:	4b15      	ldr	r3, [pc, #84]	@ (80206f8 <I2C_Test_Perform+0x15c>)
 80206a4:	781b      	ldrb	r3, [r3, #0]
 80206a6:	b2db      	uxtb	r3, r3
 80206a8:	2b00      	cmp	r3, #0
 80206aa:	d0f5      	beq.n	8020698 <I2C_Test_Perform+0xfc>

	// compare crc
	int crc_result = Match_CRC(msg, msg_len, i2c1_rx, msg_len);
 80206ac:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80206b0:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80206b4:	781c      	ldrb	r4, [r3, #0]
 80206b6:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80206ba:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80206be:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80206c2:	7819      	ldrb	r1, [r3, #0]
 80206c4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80206c8:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 80206cc:	4623      	mov	r3, r4
 80206ce:	6800      	ldr	r0, [r0, #0]
 80206d0:	f7ff fd44 	bl	802015c <Match_CRC>
 80206d4:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 80206d8:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80206dc:	2b01      	cmp	r3, #1
 80206de:	d101      	bne.n	80206e4 <I2C_Test_Perform+0x148>
 80206e0:	2301      	movs	r3, #1
 80206e2:	e000      	b.n	80206e6 <I2C_Test_Perform+0x14a>

	return TEST_FAILED;
 80206e4:	23ff      	movs	r3, #255	@ 0xff
}
 80206e6:	4618      	mov	r0, r3
 80206e8:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 80206ec:	46bd      	mov	sp, r7
 80206ee:	bd90      	pop	{r4, r7, pc}
 80206f0:	20028788 	.word	0x20028788
 80206f4:	20028789 	.word	0x20028789
 80206f8:	2002878a 	.word	0x2002878a
 80206fc:	2002878b 	.word	0x2002878b
 8020700:	20000394 	.word	0x20000394
 8020704:	20000340 	.word	0x20000340

08020708 <HAL_I2C_MasterTxCpltCallback>:
/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8020708:	b480      	push	{r7}
 802070a:	b083      	sub	sp, #12
 802070c:	af00      	add	r7, sp, #0
 802070e:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c1) i2c1_tx_done = 1;
 8020710:	687b      	ldr	r3, [r7, #4]
 8020712:	4a06      	ldr	r2, [pc, #24]	@ (802072c <HAL_I2C_MasterTxCpltCallback+0x24>)
 8020714:	4293      	cmp	r3, r2
 8020716:	d102      	bne.n	802071e <HAL_I2C_MasterTxCpltCallback+0x16>
 8020718:	4b05      	ldr	r3, [pc, #20]	@ (8020730 <HAL_I2C_MasterTxCpltCallback+0x28>)
 802071a:	2201      	movs	r2, #1
 802071c:	701a      	strb	r2, [r3, #0]
}
 802071e:	bf00      	nop
 8020720:	370c      	adds	r7, #12
 8020722:	46bd      	mov	sp, r7
 8020724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020728:	4770      	bx	lr
 802072a:	bf00      	nop
 802072c:	20000340 	.word	0x20000340
 8020730:	20028788 	.word	0x20028788

08020734 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8020734:	b480      	push	{r7}
 8020736:	b083      	sub	sp, #12
 8020738:	af00      	add	r7, sp, #0
 802073a:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c1) i2c1_rx_done = 1;
 802073c:	687b      	ldr	r3, [r7, #4]
 802073e:	4a06      	ldr	r2, [pc, #24]	@ (8020758 <HAL_I2C_MasterRxCpltCallback+0x24>)
 8020740:	4293      	cmp	r3, r2
 8020742:	d102      	bne.n	802074a <HAL_I2C_MasterRxCpltCallback+0x16>
 8020744:	4b05      	ldr	r3, [pc, #20]	@ (802075c <HAL_I2C_MasterRxCpltCallback+0x28>)
 8020746:	2201      	movs	r2, #1
 8020748:	701a      	strb	r2, [r3, #0]
}
 802074a:	bf00      	nop
 802074c:	370c      	adds	r7, #12
 802074e:	46bd      	mov	sp, r7
 8020750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020754:	4770      	bx	lr
 8020756:	bf00      	nop
 8020758:	20000340 	.word	0x20000340
 802075c:	20028789 	.word	0x20028789

08020760 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8020760:	b480      	push	{r7}
 8020762:	b083      	sub	sp, #12
 8020764:	af00      	add	r7, sp, #0
 8020766:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c2) i2c2_tx_done = 1;
 8020768:	687b      	ldr	r3, [r7, #4]
 802076a:	4a06      	ldr	r2, [pc, #24]	@ (8020784 <HAL_I2C_SlaveTxCpltCallback+0x24>)
 802076c:	4293      	cmp	r3, r2
 802076e:	d102      	bne.n	8020776 <HAL_I2C_SlaveTxCpltCallback+0x16>
 8020770:	4b05      	ldr	r3, [pc, #20]	@ (8020788 <HAL_I2C_SlaveTxCpltCallback+0x28>)
 8020772:	2201      	movs	r2, #1
 8020774:	701a      	strb	r2, [r3, #0]
}
 8020776:	bf00      	nop
 8020778:	370c      	adds	r7, #12
 802077a:	46bd      	mov	sp, r7
 802077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020780:	4770      	bx	lr
 8020782:	bf00      	nop
 8020784:	20000394 	.word	0x20000394
 8020788:	2002878a 	.word	0x2002878a

0802078c <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 802078c:	b480      	push	{r7}
 802078e:	b083      	sub	sp, #12
 8020790:	af00      	add	r7, sp, #0
 8020792:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c2) i2c2_rx_done = 1;
 8020794:	687b      	ldr	r3, [r7, #4]
 8020796:	4a06      	ldr	r2, [pc, #24]	@ (80207b0 <HAL_I2C_SlaveRxCpltCallback+0x24>)
 8020798:	4293      	cmp	r3, r2
 802079a:	d102      	bne.n	80207a2 <HAL_I2C_SlaveRxCpltCallback+0x16>
 802079c:	4b05      	ldr	r3, [pc, #20]	@ (80207b4 <HAL_I2C_SlaveRxCpltCallback+0x28>)
 802079e:	2201      	movs	r2, #1
 80207a0:	701a      	strb	r2, [r3, #0]
}
 80207a2:	bf00      	nop
 80207a4:	370c      	adds	r7, #12
 80207a6:	46bd      	mov	sp, r7
 80207a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207ac:	4770      	bx	lr
 80207ae:	bf00      	nop
 80207b0:	20000394 	.word	0x20000394
 80207b4:	2002878b 	.word	0x2002878b

080207b8 <SpiTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void SpiTestTask(void)
{
 80207b8:	b580      	push	{r7, lr}
 80207ba:	b0ca      	sub	sp, #296	@ 0x128
 80207bc:	af00      	add	r7, sp, #0
	OutMsg_t out_msg;
	uint8_t result;

	while (1)
	{
		printf("spi waiting for messages\n");
 80207be:	4838      	ldr	r0, [pc, #224]	@ (80208a0 <SpiTestTask+0xe8>)
 80207c0:	f000 fcf0 	bl	80211a4 <puts>
		if(osMessageQueueGet(spiQueueHandle, &test_data, 0, osWaitForever) == osOK)
 80207c4:	4b37      	ldr	r3, [pc, #220]	@ (80208a4 <SpiTestTask+0xec>)
 80207c6:	6818      	ldr	r0, [r3, #0]
 80207c8:	f107 0114 	add.w	r1, r7, #20
 80207cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80207d0:	2200      	movs	r2, #0
 80207d2:	f7ec ffaf 	bl	800d734 <osMessageQueueGet>
 80207d6:	4603      	mov	r3, r0
 80207d8:	2b00      	cmp	r3, #0
 80207da:	d15d      	bne.n	8020898 <SpiTestTask+0xe0>
		{
			printf("spi received test ID: %lu\n", test_data.test_id);
 80207dc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80207e0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80207e4:	689b      	ldr	r3, [r3, #8]
 80207e6:	4619      	mov	r1, r3
 80207e8:	482f      	ldr	r0, [pc, #188]	@ (80208a8 <SpiTestTask+0xf0>)
 80207ea:	f000 fc6b 	bl	80210c4 <iprintf>

			for (uint8_t i=0; i<test_data.n_iter; i++)
 80207ee:	2300      	movs	r3, #0
 80207f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80207f4:	e017      	b.n	8020826 <SpiTestTask+0x6e>
			{
				result = SPI_Test_Perform((uint8_t *)test_data.payload, test_data.p_len);
 80207f6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80207fa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80207fe:	7b5a      	ldrb	r2, [r3, #13]
 8020800:	f107 0314 	add.w	r3, r7, #20
 8020804:	330e      	adds	r3, #14
 8020806:	4611      	mov	r1, r2
 8020808:	4618      	mov	r0, r3
 802080a:	f000 f851 	bl	80208b0 <SPI_Test_Perform>
 802080e:	4603      	mov	r3, r0
 8020810:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 8020814:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020818:	2bff      	cmp	r3, #255	@ 0xff
 802081a:	d00e      	beq.n	802083a <SpiTestTask+0x82>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 802081c:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8020820:	3301      	adds	r3, #1
 8020822:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8020826:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802082a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 802082e:	7b1b      	ldrb	r3, [r3, #12]
 8020830:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 8020834:	429a      	cmp	r2, r3
 8020836:	d3de      	bcc.n	80207f6 <SpiTestTask+0x3e>
 8020838:	e000      	b.n	802083c <SpiTestTask+0x84>
					break;
 802083a:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 802083c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020840:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020844:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8020848:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 802084c:	6812      	ldr	r2, [r2, #0]
 802084e:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 8020850:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020854:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020858:	889a      	ldrh	r2, [r3, #4]
 802085a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802085e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020862:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 8020864:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020868:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 802086c:	689a      	ldr	r2, [r3, #8]
 802086e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020872:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020876:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 8020878:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802087c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020880:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 8020884:	731a      	strb	r2, [r3, #12]

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 8020886:	4b09      	ldr	r3, [pc, #36]	@ (80208ac <SpiTestTask+0xf4>)
 8020888:	6818      	ldr	r0, [r3, #0]
 802088a:	1d39      	adds	r1, r7, #4
 802088c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020890:	2200      	movs	r2, #0
 8020892:	f7ec fedb 	bl	800d64c <osMessageQueuePut>
 8020896:	e792      	b.n	80207be <SpiTestTask+0x6>
		}
		else osDelay(1);
 8020898:	2001      	movs	r0, #1
 802089a:	f7ec fa2d 	bl	800ccf8 <osDelay>
		printf("spi waiting for messages\n");
 802089e:	e78e      	b.n	80207be <SpiTestTask+0x6>
 80208a0:	08026dd8 	.word	0x08026dd8
 80208a4:	20000330 	.word	0x20000330
 80208a8:	08026df4 	.word	0x08026df4
 80208ac:	20000324 	.word	0x20000324

080208b0 <SPI_Test_Perform>:
	}
}

uint8_t SPI_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 80208b0:	b590      	push	{r4, r7, lr}
 80208b2:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 80208b6:	af00      	add	r7, sp, #0
 80208b8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80208bc:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80208c0:	6018      	str	r0, [r3, #0]
 80208c2:	460a      	mov	r2, r1
 80208c4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80208c8:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80208cc:	701a      	strb	r2, [r3, #0]
	printf("Performing SPI test\n");
#endif

	HAL_StatusTypeDef status;

	spi1_tx_done = 0;
 80208ce:	4b4d      	ldr	r3, [pc, #308]	@ (8020a04 <SPI_Test_Perform+0x154>)
 80208d0:	2200      	movs	r2, #0
 80208d2:	701a      	strb	r2, [r3, #0]
	spi1_rx_done = 0;
 80208d4:	4b4c      	ldr	r3, [pc, #304]	@ (8020a08 <SPI_Test_Perform+0x158>)
 80208d6:	2200      	movs	r2, #0
 80208d8:	701a      	strb	r2, [r3, #0]
	spi4_tx_done = 0;
 80208da:	4b4c      	ldr	r3, [pc, #304]	@ (8020a0c <SPI_Test_Perform+0x15c>)
 80208dc:	2200      	movs	r2, #0
 80208de:	701a      	strb	r2, [r3, #0]
	spi4_rx_done = 0;
 80208e0:	4b4b      	ldr	r3, [pc, #300]	@ (8020a10 <SPI_Test_Perform+0x160>)
 80208e2:	2200      	movs	r2, #0
 80208e4:	701a      	strb	r2, [r3, #0]

	uint8_t spi1_rx[MAX_BUF];
	uint8_t spi4_rx_tx[MAX_BUF];

	// send msg spi1 -> spi4
	status = HAL_SPI_Receive_DMA(&hspi4, spi4_rx_tx, msg_len);
 80208e6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80208ea:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80208ee:	781b      	ldrb	r3, [r3, #0]
 80208f0:	b29a      	uxth	r2, r3
 80208f2:	f107 0308 	add.w	r3, r7, #8
 80208f6:	4619      	mov	r1, r3
 80208f8:	4846      	ldr	r0, [pc, #280]	@ (8020a14 <SPI_Test_Perform+0x164>)
 80208fa:	f7e8 fa41 	bl	8008d80 <HAL_SPI_Receive_DMA>
 80208fe:	4603      	mov	r3, r0
 8020900:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 8020904:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8020908:	2b00      	cmp	r3, #0
 802090a:	d001      	beq.n	8020910 <SPI_Test_Perform+0x60>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi1 -> spi4 RX failed\n");
#endif
		return TEST_FAILED;
 802090c:	23ff      	movs	r3, #255	@ 0xff
 802090e:	e073      	b.n	80209f8 <SPI_Test_Perform+0x148>
	}
	status = HAL_SPI_Transmit_DMA(&hspi1, msg, msg_len);
 8020910:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020914:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020918:	781b      	ldrb	r3, [r3, #0]
 802091a:	b29a      	uxth	r2, r3
 802091c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020920:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8020924:	6819      	ldr	r1, [r3, #0]
 8020926:	483c      	ldr	r0, [pc, #240]	@ (8020a18 <SPI_Test_Perform+0x168>)
 8020928:	f7e8 f93c 	bl	8008ba4 <HAL_SPI_Transmit_DMA>
 802092c:	4603      	mov	r3, r0
 802092e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 8020932:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8020936:	2b00      	cmp	r3, #0
 8020938:	d001      	beq.n	802093e <SPI_Test_Perform+0x8e>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi1 -> spi4 TX failed\n");
#endif
		return TEST_FAILED;
 802093a:	23ff      	movs	r3, #255	@ 0xff
 802093c:	e05c      	b.n	80209f8 <SPI_Test_Perform+0x148>
	}
	while(!spi4_rx_done || !spi1_tx_done);
 802093e:	bf00      	nop
 8020940:	4b33      	ldr	r3, [pc, #204]	@ (8020a10 <SPI_Test_Perform+0x160>)
 8020942:	781b      	ldrb	r3, [r3, #0]
 8020944:	b2db      	uxtb	r3, r3
 8020946:	2b00      	cmp	r3, #0
 8020948:	d0fa      	beq.n	8020940 <SPI_Test_Perform+0x90>
 802094a:	4b2e      	ldr	r3, [pc, #184]	@ (8020a04 <SPI_Test_Perform+0x154>)
 802094c:	781b      	ldrb	r3, [r3, #0]
 802094e:	b2db      	uxtb	r3, r3
 8020950:	2b00      	cmp	r3, #0
 8020952:	d0f5      	beq.n	8020940 <SPI_Test_Perform+0x90>

	// send msg spi4 -> spi1
	status = HAL_SPI_Transmit_DMA(&hspi4, spi4_rx_tx, msg_len);
 8020954:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020958:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 802095c:	781b      	ldrb	r3, [r3, #0]
 802095e:	b29a      	uxth	r2, r3
 8020960:	f107 0308 	add.w	r3, r7, #8
 8020964:	4619      	mov	r1, r3
 8020966:	482b      	ldr	r0, [pc, #172]	@ (8020a14 <SPI_Test_Perform+0x164>)
 8020968:	f7e8 f91c 	bl	8008ba4 <HAL_SPI_Transmit_DMA>
 802096c:	4603      	mov	r3, r0
 802096e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 8020972:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8020976:	2b00      	cmp	r3, #0
 8020978:	d001      	beq.n	802097e <SPI_Test_Perform+0xce>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi4 -> spi1 TX failed\n");
#endif
		return TEST_FAILED;
 802097a:	23ff      	movs	r3, #255	@ 0xff
 802097c:	e03c      	b.n	80209f8 <SPI_Test_Perform+0x148>
	}
	status = HAL_SPI_Receive_DMA(&hspi1, spi1_rx, msg_len);
 802097e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020982:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020986:	781b      	ldrb	r3, [r3, #0]
 8020988:	b29a      	uxth	r2, r3
 802098a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 802098e:	4619      	mov	r1, r3
 8020990:	4821      	ldr	r0, [pc, #132]	@ (8020a18 <SPI_Test_Perform+0x168>)
 8020992:	f7e8 f9f5 	bl	8008d80 <HAL_SPI_Receive_DMA>
 8020996:	4603      	mov	r3, r0
 8020998:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 802099c:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 80209a0:	2b00      	cmp	r3, #0
 80209a2:	d001      	beq.n	80209a8 <SPI_Test_Perform+0xf8>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi4 -> spi1 RX failed\n");
#endif
		return TEST_FAILED;
 80209a4:	23ff      	movs	r3, #255	@ 0xff
 80209a6:	e027      	b.n	80209f8 <SPI_Test_Perform+0x148>
	}
	while(!spi1_rx_done || !spi4_tx_done);
 80209a8:	bf00      	nop
 80209aa:	4b17      	ldr	r3, [pc, #92]	@ (8020a08 <SPI_Test_Perform+0x158>)
 80209ac:	781b      	ldrb	r3, [r3, #0]
 80209ae:	b2db      	uxtb	r3, r3
 80209b0:	2b00      	cmp	r3, #0
 80209b2:	d0fa      	beq.n	80209aa <SPI_Test_Perform+0xfa>
 80209b4:	4b15      	ldr	r3, [pc, #84]	@ (8020a0c <SPI_Test_Perform+0x15c>)
 80209b6:	781b      	ldrb	r3, [r3, #0]
 80209b8:	b2db      	uxtb	r3, r3
 80209ba:	2b00      	cmp	r3, #0
 80209bc:	d0f5      	beq.n	80209aa <SPI_Test_Perform+0xfa>

	// Compare CRC
	int crc_result = Match_CRC(msg, msg_len, spi1_rx, msg_len);
 80209be:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80209c2:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80209c6:	781c      	ldrb	r4, [r3, #0]
 80209c8:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80209cc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80209d0:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80209d4:	7819      	ldrb	r1, [r3, #0]
 80209d6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80209da:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 80209de:	4623      	mov	r3, r4
 80209e0:	6800      	ldr	r0, [r0, #0]
 80209e2:	f7ff fbbb 	bl	802015c <Match_CRC>
 80209e6:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 80209ea:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80209ee:	2b01      	cmp	r3, #1
 80209f0:	d101      	bne.n	80209f6 <SPI_Test_Perform+0x146>
 80209f2:	2301      	movs	r3, #1
 80209f4:	e000      	b.n	80209f8 <SPI_Test_Perform+0x148>

	return TEST_FAILED;
 80209f6:	23ff      	movs	r3, #255	@ 0xff
}
 80209f8:	4618      	mov	r0, r3
 80209fa:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 80209fe:	46bd      	mov	sp, r7
 8020a00:	bd90      	pop	{r4, r7, pc}
 8020a02:	bf00      	nop
 8020a04:	2002878c 	.word	0x2002878c
 8020a08:	2002878d 	.word	0x2002878d
 8020a0c:	2002878e 	.word	0x2002878e
 8020a10:	2002878f 	.word	0x2002878f
 8020a14:	200005cc 	.word	0x200005cc
 8020a18:	20000568 	.word	0x20000568

08020a1c <HAL_SPI_TxCpltCallback>:
/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8020a1c:	b480      	push	{r7}
 8020a1e:	b083      	sub	sp, #12
 8020a20:	af00      	add	r7, sp, #0
 8020a22:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) spi1_tx_done = 1;
 8020a24:	687b      	ldr	r3, [r7, #4]
 8020a26:	4a09      	ldr	r2, [pc, #36]	@ (8020a4c <HAL_SPI_TxCpltCallback+0x30>)
 8020a28:	4293      	cmp	r3, r2
 8020a2a:	d102      	bne.n	8020a32 <HAL_SPI_TxCpltCallback+0x16>
 8020a2c:	4b08      	ldr	r3, [pc, #32]	@ (8020a50 <HAL_SPI_TxCpltCallback+0x34>)
 8020a2e:	2201      	movs	r2, #1
 8020a30:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi4) spi4_tx_done = 1;
 8020a32:	687b      	ldr	r3, [r7, #4]
 8020a34:	4a07      	ldr	r2, [pc, #28]	@ (8020a54 <HAL_SPI_TxCpltCallback+0x38>)
 8020a36:	4293      	cmp	r3, r2
 8020a38:	d102      	bne.n	8020a40 <HAL_SPI_TxCpltCallback+0x24>
 8020a3a:	4b07      	ldr	r3, [pc, #28]	@ (8020a58 <HAL_SPI_TxCpltCallback+0x3c>)
 8020a3c:	2201      	movs	r2, #1
 8020a3e:	701a      	strb	r2, [r3, #0]
}
 8020a40:	bf00      	nop
 8020a42:	370c      	adds	r7, #12
 8020a44:	46bd      	mov	sp, r7
 8020a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a4a:	4770      	bx	lr
 8020a4c:	20000568 	.word	0x20000568
 8020a50:	2002878c 	.word	0x2002878c
 8020a54:	200005cc 	.word	0x200005cc
 8020a58:	2002878e 	.word	0x2002878e

08020a5c <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8020a5c:	b480      	push	{r7}
 8020a5e:	b083      	sub	sp, #12
 8020a60:	af00      	add	r7, sp, #0
 8020a62:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) spi1_rx_done = 1;
 8020a64:	687b      	ldr	r3, [r7, #4]
 8020a66:	4a09      	ldr	r2, [pc, #36]	@ (8020a8c <HAL_SPI_RxCpltCallback+0x30>)
 8020a68:	4293      	cmp	r3, r2
 8020a6a:	d102      	bne.n	8020a72 <HAL_SPI_RxCpltCallback+0x16>
 8020a6c:	4b08      	ldr	r3, [pc, #32]	@ (8020a90 <HAL_SPI_RxCpltCallback+0x34>)
 8020a6e:	2201      	movs	r2, #1
 8020a70:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi4) spi4_rx_done = 1;
 8020a72:	687b      	ldr	r3, [r7, #4]
 8020a74:	4a07      	ldr	r2, [pc, #28]	@ (8020a94 <HAL_SPI_RxCpltCallback+0x38>)
 8020a76:	4293      	cmp	r3, r2
 8020a78:	d102      	bne.n	8020a80 <HAL_SPI_RxCpltCallback+0x24>
 8020a7a:	4b07      	ldr	r3, [pc, #28]	@ (8020a98 <HAL_SPI_RxCpltCallback+0x3c>)
 8020a7c:	2201      	movs	r2, #1
 8020a7e:	701a      	strb	r2, [r3, #0]
}
 8020a80:	bf00      	nop
 8020a82:	370c      	adds	r7, #12
 8020a84:	46bd      	mov	sp, r7
 8020a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a8a:	4770      	bx	lr
 8020a8c:	20000568 	.word	0x20000568
 8020a90:	2002878d 	.word	0x2002878d
 8020a94:	200005cc 	.word	0x200005cc
 8020a98:	2002878f 	.word	0x2002878f

08020a9c <TimTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void TimTestTask(void)
{
 8020a9c:	b580      	push	{r7, lr}
 8020a9e:	b0ca      	sub	sp, #296	@ 0x128
 8020aa0:	af00      	add	r7, sp, #0
	OutMsg_t out_msg;
	uint8_t result;

	while (1)
	{
		printf("timer waiting for messages\n");
 8020aa2:	4833      	ldr	r0, [pc, #204]	@ (8020b70 <TimTestTask+0xd4>)
 8020aa4:	f000 fb7e 	bl	80211a4 <puts>
		if(osMessageQueueGet(timQueueHandle, &test_data, 0, osWaitForever) == osOK)
 8020aa8:	4b32      	ldr	r3, [pc, #200]	@ (8020b74 <TimTestTask+0xd8>)
 8020aaa:	6818      	ldr	r0, [r3, #0]
 8020aac:	f107 0114 	add.w	r1, r7, #20
 8020ab0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020ab4:	2200      	movs	r2, #0
 8020ab6:	f7ec fe3d 	bl	800d734 <osMessageQueueGet>
 8020aba:	4603      	mov	r3, r0
 8020abc:	2b00      	cmp	r3, #0
 8020abe:	d153      	bne.n	8020b68 <TimTestTask+0xcc>
		{
			printf("timer received test ID: %lu\n", test_data.test_id);
 8020ac0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020ac4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020ac8:	689b      	ldr	r3, [r3, #8]
 8020aca:	4619      	mov	r1, r3
 8020acc:	482a      	ldr	r0, [pc, #168]	@ (8020b78 <TimTestTask+0xdc>)
 8020ace:	f000 faf9 	bl	80210c4 <iprintf>

			for (uint8_t i=0; i<test_data.n_iter; i++)
 8020ad2:	2300      	movs	r3, #0
 8020ad4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8020ad8:	e00d      	b.n	8020af6 <TimTestTask+0x5a>
			{
				result = TIM_Test_Perform();
 8020ada:	f000 f851 	bl	8020b80 <TIM_Test_Perform>
 8020ade:	4603      	mov	r3, r0
 8020ae0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 8020ae4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020ae8:	2bff      	cmp	r3, #255	@ 0xff
 8020aea:	d00e      	beq.n	8020b0a <TimTestTask+0x6e>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 8020aec:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8020af0:	3301      	adds	r3, #1
 8020af2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8020af6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020afa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020afe:	7b1b      	ldrb	r3, [r3, #12]
 8020b00:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 8020b04:	429a      	cmp	r2, r3
 8020b06:	d3e8      	bcc.n	8020ada <TimTestTask+0x3e>
 8020b08:	e000      	b.n	8020b0c <TimTestTask+0x70>
					break;
 8020b0a:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 8020b0c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020b10:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020b14:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8020b18:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8020b1c:	6812      	ldr	r2, [r2, #0]
 8020b1e:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 8020b20:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020b24:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020b28:	889a      	ldrh	r2, [r3, #4]
 8020b2a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020b2e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020b32:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 8020b34:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020b38:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020b3c:	689a      	ldr	r2, [r3, #8]
 8020b3e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020b42:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020b46:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 8020b48:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020b4c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020b50:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 8020b54:	731a      	strb	r2, [r3, #12]

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 8020b56:	4b09      	ldr	r3, [pc, #36]	@ (8020b7c <TimTestTask+0xe0>)
 8020b58:	6818      	ldr	r0, [r3, #0]
 8020b5a:	1d39      	adds	r1, r7, #4
 8020b5c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020b60:	2200      	movs	r2, #0
 8020b62:	f7ec fd73 	bl	800d64c <osMessageQueuePut>
 8020b66:	e79c      	b.n	8020aa2 <TimTestTask+0x6>
		}
		else osDelay(1);
 8020b68:	2001      	movs	r0, #1
 8020b6a:	f7ec f8c5 	bl	800ccf8 <osDelay>
		printf("timer waiting for messages\n");
 8020b6e:	e798      	b.n	8020aa2 <TimTestTask+0x6>
 8020b70:	08026e10 	.word	0x08026e10
 8020b74:	20000338 	.word	0x20000338
 8020b78:	08026e2c 	.word	0x08026e2c
 8020b7c:	20000324 	.word	0x20000324

08020b80 <TIM_Test_Perform>:
	}
}

uint8_t TIM_Test_Perform(void)
{
 8020b80:	b580      	push	{r7, lr}
 8020b82:	b082      	sub	sp, #8
 8020b84:	af00      	add	r7, sp, #0
#ifdef PRINT_TESTS_DEBUG
	printf("Performing timer test\n");
#endif

	tim6_count = 0;
 8020b86:	4b27      	ldr	r3, [pc, #156]	@ (8020c24 <TIM_Test_Perform+0xa4>)
 8020b88:	2200      	movs	r2, #0
 8020b8a:	601a      	str	r2, [r3, #0]
	test_running = 1;
 8020b8c:	4b26      	ldr	r3, [pc, #152]	@ (8020c28 <TIM_Test_Perform+0xa8>)
 8020b8e:	2201      	movs	r2, #1
 8020b90:	601a      	str	r2, [r3, #0]

	HAL_TIM_Base_Start(&htim2);
 8020b92:	4826      	ldr	r0, [pc, #152]	@ (8020c2c <TIM_Test_Perform+0xac>)
 8020b94:	f7e9 f87a 	bl	8009c8c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim6);
 8020b98:	4825      	ldr	r0, [pc, #148]	@ (8020c30 <TIM_Test_Perform+0xb0>)
 8020b9a:	f7e9 f877 	bl	8009c8c <HAL_TIM_Base_Start>

	if(HAL_DMA_Start_IT(&hdma_tim6_up, (uint32_t)&htim2.Instance->CNT,
 8020b9e:	4b23      	ldr	r3, [pc, #140]	@ (8020c2c <TIM_Test_Perform+0xac>)
 8020ba0:	681b      	ldr	r3, [r3, #0]
 8020ba2:	3324      	adds	r3, #36	@ 0x24
 8020ba4:	4619      	mov	r1, r3
 8020ba6:	4a23      	ldr	r2, [pc, #140]	@ (8020c34 <TIM_Test_Perform+0xb4>)
 8020ba8:	230a      	movs	r3, #10
 8020baa:	4823      	ldr	r0, [pc, #140]	@ (8020c38 <TIM_Test_Perform+0xb8>)
 8020bac:	f7e2 fc76 	bl	800349c <HAL_DMA_Start_IT>
 8020bb0:	4603      	mov	r3, r0
 8020bb2:	2b00      	cmp	r3, #0
 8020bb4:	d001      	beq.n	8020bba <TIM_Test_Perform+0x3a>
			            (uint32_t)tim2_samples, N_SAMPLES) != HAL_OK)
	{
#ifdef PRINT_TESTS_DEBUG
	printf("Timer test: DMA init error\n");
#endif
		return TEST_FAILED;
 8020bb6:	23ff      	movs	r3, #255	@ 0xff
 8020bb8:	e02f      	b.n	8020c1a <TIM_Test_Perform+0x9a>
	}
    __HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 8020bba:	4b1d      	ldr	r3, [pc, #116]	@ (8020c30 <TIM_Test_Perform+0xb0>)
 8020bbc:	681b      	ldr	r3, [r3, #0]
 8020bbe:	68da      	ldr	r2, [r3, #12]
 8020bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8020c30 <TIM_Test_Perform+0xb0>)
 8020bc2:	681b      	ldr	r3, [r3, #0]
 8020bc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8020bc8:	60da      	str	r2, [r3, #12]

	while (test_running) osDelay(1);
 8020bca:	e002      	b.n	8020bd2 <TIM_Test_Perform+0x52>
 8020bcc:	2001      	movs	r0, #1
 8020bce:	f7ec f893 	bl	800ccf8 <osDelay>
 8020bd2:	4b15      	ldr	r3, [pc, #84]	@ (8020c28 <TIM_Test_Perform+0xa8>)
 8020bd4:	681b      	ldr	r3, [r3, #0]
 8020bd6:	2b00      	cmp	r3, #0
 8020bd8:	d1f8      	bne.n	8020bcc <TIM_Test_Perform+0x4c>

	HAL_TIM_Base_Stop(&htim6);
 8020bda:	4815      	ldr	r0, [pc, #84]	@ (8020c30 <TIM_Test_Perform+0xb0>)
 8020bdc:	f7e9 f8c6 	bl	8009d6c <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim2);
 8020be0:	4812      	ldr	r0, [pc, #72]	@ (8020c2c <TIM_Test_Perform+0xac>)
 8020be2:	f7e9 f8c3 	bl	8009d6c <HAL_TIM_Base_Stop>

#ifdef PRINT_TESTS_DEBUG
	printf("Sampling complete\n");
#endif
	for (int i = 1; i < N_SAMPLES; i++)
 8020be6:	2301      	movs	r3, #1
 8020be8:	607b      	str	r3, [r7, #4]
 8020bea:	e012      	b.n	8020c12 <TIM_Test_Perform+0x92>
#ifdef PRINT_TESTS_DEBUG
		printf("Sample[%d] - sample[%d] = %lu\n", i, i-1,
			   tim2_samples[i] - tim2_samples[i-1]);
#endif

		if (tim2_samples[i] - tim2_samples[i-1] != EXPECTED_INTERVAL)
 8020bec:	4a11      	ldr	r2, [pc, #68]	@ (8020c34 <TIM_Test_Perform+0xb4>)
 8020bee:	687b      	ldr	r3, [r7, #4]
 8020bf0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8020bf4:	687b      	ldr	r3, [r7, #4]
 8020bf6:	3b01      	subs	r3, #1
 8020bf8:	490e      	ldr	r1, [pc, #56]	@ (8020c34 <TIM_Test_Perform+0xb4>)
 8020bfa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8020bfe:	1ad3      	subs	r3, r2, r3
 8020c00:	f24d 22f0 	movw	r2, #54000	@ 0xd2f0
 8020c04:	4293      	cmp	r3, r2
 8020c06:	d001      	beq.n	8020c0c <TIM_Test_Perform+0x8c>
			return TEST_FAILED;
 8020c08:	23ff      	movs	r3, #255	@ 0xff
 8020c0a:	e006      	b.n	8020c1a <TIM_Test_Perform+0x9a>
	for (int i = 1; i < N_SAMPLES; i++)
 8020c0c:	687b      	ldr	r3, [r7, #4]
 8020c0e:	3301      	adds	r3, #1
 8020c10:	607b      	str	r3, [r7, #4]
 8020c12:	687b      	ldr	r3, [r7, #4]
 8020c14:	2b09      	cmp	r3, #9
 8020c16:	dde9      	ble.n	8020bec <TIM_Test_Perform+0x6c>
	}

	return TEST_SUCCESS;
 8020c18:	2301      	movs	r3, #1
}
 8020c1a:	4618      	mov	r0, r3
 8020c1c:	3708      	adds	r7, #8
 8020c1e:	46bd      	mov	sp, r7
 8020c20:	bd80      	pop	{r7, pc}
 8020c22:	bf00      	nop
 8020c24:	20028794 	.word	0x20028794
 8020c28:	20028790 	.word	0x20028790
 8020c2c:	20000800 	.word	0x20000800
 8020c30:	2000084c 	.word	0x2000084c
 8020c34:	20028798 	.word	0x20028798
 8020c38:	20000898 	.word	0x20000898

08020c3c <UartTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void UartTestTask(void)
{
 8020c3c:	b580      	push	{r7, lr}
 8020c3e:	b0ca      	sub	sp, #296	@ 0x128
 8020c40:	af00      	add	r7, sp, #0
	osStatus_t status;

	while (1)
	{
		//printf("uart waiting for messages\n");
		status = osMessageQueueGet(uartQueueHandle, &test_data, 0, 10);
 8020c42:	4b42      	ldr	r3, [pc, #264]	@ (8020d4c <UartTestTask+0x110>)
 8020c44:	6818      	ldr	r0, [r3, #0]
 8020c46:	f107 0110 	add.w	r1, r7, #16
 8020c4a:	230a      	movs	r3, #10
 8020c4c:	2200      	movs	r2, #0
 8020c4e:	f7ec fd71 	bl	800d734 <osMessageQueueGet>
 8020c52:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
		if(status == osOK)
 8020c56:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8020c5a:	2b00      	cmp	r3, #0
 8020c5c:	d163      	bne.n	8020d26 <UartTestTask+0xea>
		{
			printf("uart received test ID: %lu\n", test_data.test_id);
 8020c5e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020c62:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8020c66:	689b      	ldr	r3, [r3, #8]
 8020c68:	4619      	mov	r1, r3
 8020c6a:	4839      	ldr	r0, [pc, #228]	@ (8020d50 <UartTestTask+0x114>)
 8020c6c:	f000 fa2a 	bl	80210c4 <iprintf>

			for (uint8_t i=0; i<test_data.n_iter; i++)
 8020c70:	2300      	movs	r3, #0
 8020c72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8020c76:	e017      	b.n	8020ca8 <UartTestTask+0x6c>
			{
				result = UART_Test_Perform((uint8_t *)test_data.payload, test_data.p_len);
 8020c78:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020c7c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8020c80:	7b5a      	ldrb	r2, [r3, #13]
 8020c82:	f107 0310 	add.w	r3, r7, #16
 8020c86:	330e      	adds	r3, #14
 8020c88:	4611      	mov	r1, r2
 8020c8a:	4618      	mov	r0, r3
 8020c8c:	f000 f868 	bl	8020d60 <UART_Test_Perform>
 8020c90:	4603      	mov	r3, r0
 8020c92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 8020c96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020c9a:	2bff      	cmp	r3, #255	@ 0xff
 8020c9c:	d00e      	beq.n	8020cbc <UartTestTask+0x80>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 8020c9e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8020ca2:	3301      	adds	r3, #1
 8020ca4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8020ca8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020cac:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8020cb0:	7b1b      	ldrb	r3, [r3, #12]
 8020cb2:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 8020cb6:	429a      	cmp	r2, r3
 8020cb8:	d3de      	bcc.n	8020c78 <UartTestTask+0x3c>
 8020cba:	e000      	b.n	8020cbe <UartTestTask+0x82>
					break;
 8020cbc:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 8020cbe:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020cc2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8020cc6:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8020cca:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8020cce:	6812      	ldr	r2, [r2, #0]
 8020cd0:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 8020cd2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020cd6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8020cda:	889a      	ldrh	r2, [r3, #4]
 8020cdc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020ce0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8020ce4:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 8020ce6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020cea:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8020cee:	689a      	ldr	r2, [r3, #8]
 8020cf0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020cf4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8020cf8:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 8020cfa:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020cfe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8020d02:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 8020d06:	731a      	strb	r2, [r3, #12]

			// send result to queue
			if (osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever) != osOK)
 8020d08:	4b12      	ldr	r3, [pc, #72]	@ (8020d54 <UartTestTask+0x118>)
 8020d0a:	6818      	ldr	r0, [r3, #0]
 8020d0c:	4639      	mov	r1, r7
 8020d0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020d12:	2200      	movs	r2, #0
 8020d14:	f7ec fc9a 	bl	800d64c <osMessageQueuePut>
 8020d18:	4603      	mov	r3, r0
 8020d1a:	2b00      	cmp	r3, #0
 8020d1c:	d091      	beq.n	8020c42 <UartTestTask+0x6>
			{
				printf("outMsg q full!\n");
 8020d1e:	480e      	ldr	r0, [pc, #56]	@ (8020d58 <UartTestTask+0x11c>)
 8020d20:	f000 fa40 	bl	80211a4 <puts>
 8020d24:	e78d      	b.n	8020c42 <UartTestTask+0x6>
			}
		}
		else if (status == osErrorTimeout)
 8020d26:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8020d2a:	f113 0f02 	cmn.w	r3, #2
 8020d2e:	d103      	bne.n	8020d38 <UartTestTask+0xfc>
		{
			osDelay(1);
 8020d30:	2001      	movs	r0, #1
 8020d32:	f7eb ffe1 	bl	800ccf8 <osDelay>
 8020d36:	e784      	b.n	8020c42 <UartTestTask+0x6>
		}
		else
		{
			printf("uart msg read error: %d\n", status);
 8020d38:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 8020d3c:	4807      	ldr	r0, [pc, #28]	@ (8020d5c <UartTestTask+0x120>)
 8020d3e:	f000 f9c1 	bl	80210c4 <iprintf>
			osDelay(1);
 8020d42:	2001      	movs	r0, #1
 8020d44:	f7eb ffd8 	bl	800ccf8 <osDelay>
		status = osMessageQueueGet(uartQueueHandle, &test_data, 0, 10);
 8020d48:	e77b      	b.n	8020c42 <UartTestTask+0x6>
 8020d4a:	bf00      	nop
 8020d4c:	20000328 	.word	0x20000328
 8020d50:	08026e4c 	.word	0x08026e4c
 8020d54:	20000324 	.word	0x20000324
 8020d58:	08026e68 	.word	0x08026e68
 8020d5c:	08026e78 	.word	0x08026e78

08020d60 <UART_Test_Perform>:


}

uint8_t UART_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 8020d60:	b590      	push	{r4, r7, lr}
 8020d62:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 8020d66:	af00      	add	r7, sp, #0
 8020d68:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020d6c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8020d70:	6018      	str	r0, [r3, #0]
 8020d72:	460a      	mov	r2, r1
 8020d74:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020d78:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020d7c:	701a      	strb	r2, [r3, #0]
#ifdef PRINT_TESTS_DEBUG
	printf("Performing uart test\n");
#endif

	uart4_rx_done = 0;
 8020d7e:	4b3d      	ldr	r3, [pc, #244]	@ (8020e74 <UART_Test_Perform+0x114>)
 8020d80:	2200      	movs	r2, #0
 8020d82:	701a      	strb	r2, [r3, #0]
	uart5_rx_done = 0;
 8020d84:	4b3c      	ldr	r3, [pc, #240]	@ (8020e78 <UART_Test_Perform+0x118>)
 8020d86:	2200      	movs	r2, #0
 8020d88:	701a      	strb	r2, [r3, #0]

	uint8_t uart4_rx[MAX_BUF];
	uint8_t uart5_rx[MAX_BUF];

	// Send msg uart4 -> uart5
	if (HAL_UART_Receive_DMA(&huart5, uart5_rx, msg_len) != HAL_OK)
 8020d8a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020d8e:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020d92:	781b      	ldrb	r3, [r3, #0]
 8020d94:	b29a      	uxth	r2, r3
 8020d96:	f107 030c 	add.w	r3, r7, #12
 8020d9a:	4619      	mov	r1, r3
 8020d9c:	4837      	ldr	r0, [pc, #220]	@ (8020e7c <UART_Test_Perform+0x11c>)
 8020d9e:	f7e9 fda1 	bl	800a8e4 <HAL_UART_Receive_DMA>
 8020da2:	4603      	mov	r3, r0
 8020da4:	2b00      	cmp	r3, #0
 8020da6:	d001      	beq.n	8020dac <UART_Test_Perform+0x4c>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart4 -> uart5 RX1 failed\n");
#endif
		return TEST_FAILED;
 8020da8:	23ff      	movs	r3, #255	@ 0xff
 8020daa:	e05d      	b.n	8020e68 <UART_Test_Perform+0x108>
	}
	if (HAL_UART_Transmit_IT(&huart4, msg, msg_len) != HAL_OK)
 8020dac:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020db0:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020db4:	781b      	ldrb	r3, [r3, #0]
 8020db6:	b29a      	uxth	r2, r3
 8020db8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020dbc:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8020dc0:	6819      	ldr	r1, [r3, #0]
 8020dc2:	482f      	ldr	r0, [pc, #188]	@ (8020e80 <UART_Test_Perform+0x120>)
 8020dc4:	f7e9 fd30 	bl	800a828 <HAL_UART_Transmit_IT>
 8020dc8:	4603      	mov	r3, r0
 8020dca:	2b00      	cmp	r3, #0
 8020dcc:	d001      	beq.n	8020dd2 <UART_Test_Perform+0x72>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart4 -> uart5 TX failed\n");
#endif
		return TEST_FAILED;
 8020dce:	23ff      	movs	r3, #255	@ 0xff
 8020dd0:	e04a      	b.n	8020e68 <UART_Test_Perform+0x108>
	}
	while (!uart5_rx_done);
 8020dd2:	bf00      	nop
 8020dd4:	4b28      	ldr	r3, [pc, #160]	@ (8020e78 <UART_Test_Perform+0x118>)
 8020dd6:	781b      	ldrb	r3, [r3, #0]
 8020dd8:	b2db      	uxtb	r3, r3
 8020dda:	2b00      	cmp	r3, #0
 8020ddc:	d0fa      	beq.n	8020dd4 <UART_Test_Perform+0x74>

	// Send msg uart5 -> uart4
	if (HAL_UART_Receive_DMA(&huart4, uart4_rx, msg_len) != HAL_OK)
 8020dde:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020de2:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020de6:	781b      	ldrb	r3, [r3, #0]
 8020de8:	b29a      	uxth	r2, r3
 8020dea:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8020dee:	4619      	mov	r1, r3
 8020df0:	4823      	ldr	r0, [pc, #140]	@ (8020e80 <UART_Test_Perform+0x120>)
 8020df2:	f7e9 fd77 	bl	800a8e4 <HAL_UART_Receive_DMA>
 8020df6:	4603      	mov	r3, r0
 8020df8:	2b00      	cmp	r3, #0
 8020dfa:	d001      	beq.n	8020e00 <UART_Test_Perform+0xa0>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart5 -> uart4 RX failed\n");
#endif
		return TEST_FAILED;
 8020dfc:	23ff      	movs	r3, #255	@ 0xff
 8020dfe:	e033      	b.n	8020e68 <UART_Test_Perform+0x108>
	}
	if (HAL_UART_Transmit_IT(&huart5, uart5_rx, msg_len) != HAL_OK)
 8020e00:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020e04:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020e08:	781b      	ldrb	r3, [r3, #0]
 8020e0a:	b29a      	uxth	r2, r3
 8020e0c:	f107 030c 	add.w	r3, r7, #12
 8020e10:	4619      	mov	r1, r3
 8020e12:	481a      	ldr	r0, [pc, #104]	@ (8020e7c <UART_Test_Perform+0x11c>)
 8020e14:	f7e9 fd08 	bl	800a828 <HAL_UART_Transmit_IT>
 8020e18:	4603      	mov	r3, r0
 8020e1a:	2b00      	cmp	r3, #0
 8020e1c:	d001      	beq.n	8020e22 <UART_Test_Perform+0xc2>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart5 -> uart4 TX failed\n");
#endif
		return TEST_FAILED;
 8020e1e:	23ff      	movs	r3, #255	@ 0xff
 8020e20:	e022      	b.n	8020e68 <UART_Test_Perform+0x108>
	}
	while (!uart4_rx_done);
 8020e22:	bf00      	nop
 8020e24:	4b13      	ldr	r3, [pc, #76]	@ (8020e74 <UART_Test_Perform+0x114>)
 8020e26:	781b      	ldrb	r3, [r3, #0]
 8020e28:	b2db      	uxtb	r3, r3
 8020e2a:	2b00      	cmp	r3, #0
 8020e2c:	d0fa      	beq.n	8020e24 <UART_Test_Perform+0xc4>

	// compare crc
	int crc_result = Match_CRC(msg, msg_len, uart4_rx, msg_len);
 8020e2e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020e32:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020e36:	781c      	ldrb	r4, [r3, #0]
 8020e38:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 8020e3c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020e40:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020e44:	7819      	ldrb	r1, [r3, #0]
 8020e46:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020e4a:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 8020e4e:	4623      	mov	r3, r4
 8020e50:	6800      	ldr	r0, [r0, #0]
 8020e52:	f7ff f983 	bl	802015c <Match_CRC>
 8020e56:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 8020e5a:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8020e5e:	2b01      	cmp	r3, #1
 8020e60:	d101      	bne.n	8020e66 <UART_Test_Perform+0x106>
 8020e62:	2301      	movs	r3, #1
 8020e64:	e000      	b.n	8020e68 <UART_Test_Perform+0x108>

	return TEST_FAILED;
 8020e66:	23ff      	movs	r3, #255	@ 0xff
}
 8020e68:	4618      	mov	r0, r3
 8020e6a:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 8020e6e:	46bd      	mov	sp, r7
 8020e70:	bd90      	pop	{r4, r7, pc}
 8020e72:	bf00      	nop
 8020e74:	200287c0 	.word	0x200287c0
 8020e78:	200287c1 	.word	0x200287c1
 8020e7c:	20000980 	.word	0x20000980
 8020e80:	200008f8 	.word	0x200008f8

08020e84 <HAL_UART_RxCpltCallback>:

/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8020e84:	b480      	push	{r7}
 8020e86:	b083      	sub	sp, #12
 8020e88:	af00      	add	r7, sp, #0
 8020e8a:	6078      	str	r0, [r7, #4]
    if (huart == &huart4) uart4_rx_done = 1;
 8020e8c:	687b      	ldr	r3, [r7, #4]
 8020e8e:	4a09      	ldr	r2, [pc, #36]	@ (8020eb4 <HAL_UART_RxCpltCallback+0x30>)
 8020e90:	4293      	cmp	r3, r2
 8020e92:	d102      	bne.n	8020e9a <HAL_UART_RxCpltCallback+0x16>
 8020e94:	4b08      	ldr	r3, [pc, #32]	@ (8020eb8 <HAL_UART_RxCpltCallback+0x34>)
 8020e96:	2201      	movs	r2, #1
 8020e98:	701a      	strb	r2, [r3, #0]
    if (huart == &huart5) uart5_rx_done = 1;
 8020e9a:	687b      	ldr	r3, [r7, #4]
 8020e9c:	4a07      	ldr	r2, [pc, #28]	@ (8020ebc <HAL_UART_RxCpltCallback+0x38>)
 8020e9e:	4293      	cmp	r3, r2
 8020ea0:	d102      	bne.n	8020ea8 <HAL_UART_RxCpltCallback+0x24>
 8020ea2:	4b07      	ldr	r3, [pc, #28]	@ (8020ec0 <HAL_UART_RxCpltCallback+0x3c>)
 8020ea4:	2201      	movs	r2, #1
 8020ea6:	701a      	strb	r2, [r3, #0]
}
 8020ea8:	bf00      	nop
 8020eaa:	370c      	adds	r7, #12
 8020eac:	46bd      	mov	sp, r7
 8020eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020eb2:	4770      	bx	lr
 8020eb4:	200008f8 	.word	0x200008f8
 8020eb8:	200287c0 	.word	0x200287c0
 8020ebc:	20000980 	.word	0x20000980
 8020ec0:	200287c1 	.word	0x200287c1

08020ec4 <rand>:
 8020ec4:	4b16      	ldr	r3, [pc, #88]	@ (8020f20 <rand+0x5c>)
 8020ec6:	b510      	push	{r4, lr}
 8020ec8:	681c      	ldr	r4, [r3, #0]
 8020eca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8020ecc:	b9b3      	cbnz	r3, 8020efc <rand+0x38>
 8020ece:	2018      	movs	r0, #24
 8020ed0:	f000 fb94 	bl	80215fc <malloc>
 8020ed4:	4602      	mov	r2, r0
 8020ed6:	6320      	str	r0, [r4, #48]	@ 0x30
 8020ed8:	b920      	cbnz	r0, 8020ee4 <rand+0x20>
 8020eda:	4b12      	ldr	r3, [pc, #72]	@ (8020f24 <rand+0x60>)
 8020edc:	4812      	ldr	r0, [pc, #72]	@ (8020f28 <rand+0x64>)
 8020ede:	2152      	movs	r1, #82	@ 0x52
 8020ee0:	f000 fb24 	bl	802152c <__assert_func>
 8020ee4:	4911      	ldr	r1, [pc, #68]	@ (8020f2c <rand+0x68>)
 8020ee6:	4b12      	ldr	r3, [pc, #72]	@ (8020f30 <rand+0x6c>)
 8020ee8:	e9c0 1300 	strd	r1, r3, [r0]
 8020eec:	4b11      	ldr	r3, [pc, #68]	@ (8020f34 <rand+0x70>)
 8020eee:	6083      	str	r3, [r0, #8]
 8020ef0:	230b      	movs	r3, #11
 8020ef2:	8183      	strh	r3, [r0, #12]
 8020ef4:	2100      	movs	r1, #0
 8020ef6:	2001      	movs	r0, #1
 8020ef8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8020efc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8020efe:	480e      	ldr	r0, [pc, #56]	@ (8020f38 <rand+0x74>)
 8020f00:	690b      	ldr	r3, [r1, #16]
 8020f02:	694c      	ldr	r4, [r1, #20]
 8020f04:	4a0d      	ldr	r2, [pc, #52]	@ (8020f3c <rand+0x78>)
 8020f06:	4358      	muls	r0, r3
 8020f08:	fb02 0004 	mla	r0, r2, r4, r0
 8020f0c:	fba3 3202 	umull	r3, r2, r3, r2
 8020f10:	3301      	adds	r3, #1
 8020f12:	eb40 0002 	adc.w	r0, r0, r2
 8020f16:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8020f1a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8020f1e:	bd10      	pop	{r4, pc}
 8020f20:	20000080 	.word	0x20000080
 8020f24:	08027276 	.word	0x08027276
 8020f28:	0802728d 	.word	0x0802728d
 8020f2c:	abcd330e 	.word	0xabcd330e
 8020f30:	e66d1234 	.word	0xe66d1234
 8020f34:	0005deec 	.word	0x0005deec
 8020f38:	5851f42d 	.word	0x5851f42d
 8020f3c:	4c957f2d 	.word	0x4c957f2d

08020f40 <std>:
 8020f40:	2300      	movs	r3, #0
 8020f42:	b510      	push	{r4, lr}
 8020f44:	4604      	mov	r4, r0
 8020f46:	e9c0 3300 	strd	r3, r3, [r0]
 8020f4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8020f4e:	6083      	str	r3, [r0, #8]
 8020f50:	8181      	strh	r1, [r0, #12]
 8020f52:	6643      	str	r3, [r0, #100]	@ 0x64
 8020f54:	81c2      	strh	r2, [r0, #14]
 8020f56:	6183      	str	r3, [r0, #24]
 8020f58:	4619      	mov	r1, r3
 8020f5a:	2208      	movs	r2, #8
 8020f5c:	305c      	adds	r0, #92	@ 0x5c
 8020f5e:	f000 fa61 	bl	8021424 <memset>
 8020f62:	4b0d      	ldr	r3, [pc, #52]	@ (8020f98 <std+0x58>)
 8020f64:	6263      	str	r3, [r4, #36]	@ 0x24
 8020f66:	4b0d      	ldr	r3, [pc, #52]	@ (8020f9c <std+0x5c>)
 8020f68:	62a3      	str	r3, [r4, #40]	@ 0x28
 8020f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8020fa0 <std+0x60>)
 8020f6c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8020f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8020fa4 <std+0x64>)
 8020f70:	6323      	str	r3, [r4, #48]	@ 0x30
 8020f72:	4b0d      	ldr	r3, [pc, #52]	@ (8020fa8 <std+0x68>)
 8020f74:	6224      	str	r4, [r4, #32]
 8020f76:	429c      	cmp	r4, r3
 8020f78:	d006      	beq.n	8020f88 <std+0x48>
 8020f7a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8020f7e:	4294      	cmp	r4, r2
 8020f80:	d002      	beq.n	8020f88 <std+0x48>
 8020f82:	33d0      	adds	r3, #208	@ 0xd0
 8020f84:	429c      	cmp	r4, r3
 8020f86:	d105      	bne.n	8020f94 <std+0x54>
 8020f88:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8020f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020f90:	f000 baba 	b.w	8021508 <__retarget_lock_init_recursive>
 8020f94:	bd10      	pop	{r4, pc}
 8020f96:	bf00      	nop
 8020f98:	08021221 	.word	0x08021221
 8020f9c:	08021243 	.word	0x08021243
 8020fa0:	0802127b 	.word	0x0802127b
 8020fa4:	0802129f 	.word	0x0802129f
 8020fa8:	200287c4 	.word	0x200287c4

08020fac <stdio_exit_handler>:
 8020fac:	4a02      	ldr	r2, [pc, #8]	@ (8020fb8 <stdio_exit_handler+0xc>)
 8020fae:	4903      	ldr	r1, [pc, #12]	@ (8020fbc <stdio_exit_handler+0x10>)
 8020fb0:	4803      	ldr	r0, [pc, #12]	@ (8020fc0 <stdio_exit_handler+0x14>)
 8020fb2:	f000 b869 	b.w	8021088 <_fwalk_sglue>
 8020fb6:	bf00      	nop
 8020fb8:	20000074 	.word	0x20000074
 8020fbc:	080220bd 	.word	0x080220bd
 8020fc0:	20000084 	.word	0x20000084

08020fc4 <cleanup_stdio>:
 8020fc4:	6841      	ldr	r1, [r0, #4]
 8020fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8020ff8 <cleanup_stdio+0x34>)
 8020fc8:	4299      	cmp	r1, r3
 8020fca:	b510      	push	{r4, lr}
 8020fcc:	4604      	mov	r4, r0
 8020fce:	d001      	beq.n	8020fd4 <cleanup_stdio+0x10>
 8020fd0:	f001 f874 	bl	80220bc <_fflush_r>
 8020fd4:	68a1      	ldr	r1, [r4, #8]
 8020fd6:	4b09      	ldr	r3, [pc, #36]	@ (8020ffc <cleanup_stdio+0x38>)
 8020fd8:	4299      	cmp	r1, r3
 8020fda:	d002      	beq.n	8020fe2 <cleanup_stdio+0x1e>
 8020fdc:	4620      	mov	r0, r4
 8020fde:	f001 f86d 	bl	80220bc <_fflush_r>
 8020fe2:	68e1      	ldr	r1, [r4, #12]
 8020fe4:	4b06      	ldr	r3, [pc, #24]	@ (8021000 <cleanup_stdio+0x3c>)
 8020fe6:	4299      	cmp	r1, r3
 8020fe8:	d004      	beq.n	8020ff4 <cleanup_stdio+0x30>
 8020fea:	4620      	mov	r0, r4
 8020fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020ff0:	f001 b864 	b.w	80220bc <_fflush_r>
 8020ff4:	bd10      	pop	{r4, pc}
 8020ff6:	bf00      	nop
 8020ff8:	200287c4 	.word	0x200287c4
 8020ffc:	2002882c 	.word	0x2002882c
 8021000:	20028894 	.word	0x20028894

08021004 <global_stdio_init.part.0>:
 8021004:	b510      	push	{r4, lr}
 8021006:	4b0b      	ldr	r3, [pc, #44]	@ (8021034 <global_stdio_init.part.0+0x30>)
 8021008:	4c0b      	ldr	r4, [pc, #44]	@ (8021038 <global_stdio_init.part.0+0x34>)
 802100a:	4a0c      	ldr	r2, [pc, #48]	@ (802103c <global_stdio_init.part.0+0x38>)
 802100c:	601a      	str	r2, [r3, #0]
 802100e:	4620      	mov	r0, r4
 8021010:	2200      	movs	r2, #0
 8021012:	2104      	movs	r1, #4
 8021014:	f7ff ff94 	bl	8020f40 <std>
 8021018:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802101c:	2201      	movs	r2, #1
 802101e:	2109      	movs	r1, #9
 8021020:	f7ff ff8e 	bl	8020f40 <std>
 8021024:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8021028:	2202      	movs	r2, #2
 802102a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802102e:	2112      	movs	r1, #18
 8021030:	f7ff bf86 	b.w	8020f40 <std>
 8021034:	200288fc 	.word	0x200288fc
 8021038:	200287c4 	.word	0x200287c4
 802103c:	08020fad 	.word	0x08020fad

08021040 <__sfp_lock_acquire>:
 8021040:	4801      	ldr	r0, [pc, #4]	@ (8021048 <__sfp_lock_acquire+0x8>)
 8021042:	f000 ba62 	b.w	802150a <__retarget_lock_acquire_recursive>
 8021046:	bf00      	nop
 8021048:	20028905 	.word	0x20028905

0802104c <__sfp_lock_release>:
 802104c:	4801      	ldr	r0, [pc, #4]	@ (8021054 <__sfp_lock_release+0x8>)
 802104e:	f000 ba5d 	b.w	802150c <__retarget_lock_release_recursive>
 8021052:	bf00      	nop
 8021054:	20028905 	.word	0x20028905

08021058 <__sinit>:
 8021058:	b510      	push	{r4, lr}
 802105a:	4604      	mov	r4, r0
 802105c:	f7ff fff0 	bl	8021040 <__sfp_lock_acquire>
 8021060:	6a23      	ldr	r3, [r4, #32]
 8021062:	b11b      	cbz	r3, 802106c <__sinit+0x14>
 8021064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021068:	f7ff bff0 	b.w	802104c <__sfp_lock_release>
 802106c:	4b04      	ldr	r3, [pc, #16]	@ (8021080 <__sinit+0x28>)
 802106e:	6223      	str	r3, [r4, #32]
 8021070:	4b04      	ldr	r3, [pc, #16]	@ (8021084 <__sinit+0x2c>)
 8021072:	681b      	ldr	r3, [r3, #0]
 8021074:	2b00      	cmp	r3, #0
 8021076:	d1f5      	bne.n	8021064 <__sinit+0xc>
 8021078:	f7ff ffc4 	bl	8021004 <global_stdio_init.part.0>
 802107c:	e7f2      	b.n	8021064 <__sinit+0xc>
 802107e:	bf00      	nop
 8021080:	08020fc5 	.word	0x08020fc5
 8021084:	200288fc 	.word	0x200288fc

08021088 <_fwalk_sglue>:
 8021088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802108c:	4607      	mov	r7, r0
 802108e:	4688      	mov	r8, r1
 8021090:	4614      	mov	r4, r2
 8021092:	2600      	movs	r6, #0
 8021094:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021098:	f1b9 0901 	subs.w	r9, r9, #1
 802109c:	d505      	bpl.n	80210aa <_fwalk_sglue+0x22>
 802109e:	6824      	ldr	r4, [r4, #0]
 80210a0:	2c00      	cmp	r4, #0
 80210a2:	d1f7      	bne.n	8021094 <_fwalk_sglue+0xc>
 80210a4:	4630      	mov	r0, r6
 80210a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80210aa:	89ab      	ldrh	r3, [r5, #12]
 80210ac:	2b01      	cmp	r3, #1
 80210ae:	d907      	bls.n	80210c0 <_fwalk_sglue+0x38>
 80210b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80210b4:	3301      	adds	r3, #1
 80210b6:	d003      	beq.n	80210c0 <_fwalk_sglue+0x38>
 80210b8:	4629      	mov	r1, r5
 80210ba:	4638      	mov	r0, r7
 80210bc:	47c0      	blx	r8
 80210be:	4306      	orrs	r6, r0
 80210c0:	3568      	adds	r5, #104	@ 0x68
 80210c2:	e7e9      	b.n	8021098 <_fwalk_sglue+0x10>

080210c4 <iprintf>:
 80210c4:	b40f      	push	{r0, r1, r2, r3}
 80210c6:	b507      	push	{r0, r1, r2, lr}
 80210c8:	4906      	ldr	r1, [pc, #24]	@ (80210e4 <iprintf+0x20>)
 80210ca:	ab04      	add	r3, sp, #16
 80210cc:	6808      	ldr	r0, [r1, #0]
 80210ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80210d2:	6881      	ldr	r1, [r0, #8]
 80210d4:	9301      	str	r3, [sp, #4]
 80210d6:	f000 fcc9 	bl	8021a6c <_vfiprintf_r>
 80210da:	b003      	add	sp, #12
 80210dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80210e0:	b004      	add	sp, #16
 80210e2:	4770      	bx	lr
 80210e4:	20000080 	.word	0x20000080

080210e8 <putchar>:
 80210e8:	4b02      	ldr	r3, [pc, #8]	@ (80210f4 <putchar+0xc>)
 80210ea:	4601      	mov	r1, r0
 80210ec:	6818      	ldr	r0, [r3, #0]
 80210ee:	6882      	ldr	r2, [r0, #8]
 80210f0:	f001 b880 	b.w	80221f4 <_putc_r>
 80210f4:	20000080 	.word	0x20000080

080210f8 <_puts_r>:
 80210f8:	6a03      	ldr	r3, [r0, #32]
 80210fa:	b570      	push	{r4, r5, r6, lr}
 80210fc:	6884      	ldr	r4, [r0, #8]
 80210fe:	4605      	mov	r5, r0
 8021100:	460e      	mov	r6, r1
 8021102:	b90b      	cbnz	r3, 8021108 <_puts_r+0x10>
 8021104:	f7ff ffa8 	bl	8021058 <__sinit>
 8021108:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802110a:	07db      	lsls	r3, r3, #31
 802110c:	d405      	bmi.n	802111a <_puts_r+0x22>
 802110e:	89a3      	ldrh	r3, [r4, #12]
 8021110:	0598      	lsls	r0, r3, #22
 8021112:	d402      	bmi.n	802111a <_puts_r+0x22>
 8021114:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021116:	f000 f9f8 	bl	802150a <__retarget_lock_acquire_recursive>
 802111a:	89a3      	ldrh	r3, [r4, #12]
 802111c:	0719      	lsls	r1, r3, #28
 802111e:	d502      	bpl.n	8021126 <_puts_r+0x2e>
 8021120:	6923      	ldr	r3, [r4, #16]
 8021122:	2b00      	cmp	r3, #0
 8021124:	d135      	bne.n	8021192 <_puts_r+0x9a>
 8021126:	4621      	mov	r1, r4
 8021128:	4628      	mov	r0, r5
 802112a:	f000 f8fb 	bl	8021324 <__swsetup_r>
 802112e:	b380      	cbz	r0, 8021192 <_puts_r+0x9a>
 8021130:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8021134:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021136:	07da      	lsls	r2, r3, #31
 8021138:	d405      	bmi.n	8021146 <_puts_r+0x4e>
 802113a:	89a3      	ldrh	r3, [r4, #12]
 802113c:	059b      	lsls	r3, r3, #22
 802113e:	d402      	bmi.n	8021146 <_puts_r+0x4e>
 8021140:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021142:	f000 f9e3 	bl	802150c <__retarget_lock_release_recursive>
 8021146:	4628      	mov	r0, r5
 8021148:	bd70      	pop	{r4, r5, r6, pc}
 802114a:	2b00      	cmp	r3, #0
 802114c:	da04      	bge.n	8021158 <_puts_r+0x60>
 802114e:	69a2      	ldr	r2, [r4, #24]
 8021150:	429a      	cmp	r2, r3
 8021152:	dc17      	bgt.n	8021184 <_puts_r+0x8c>
 8021154:	290a      	cmp	r1, #10
 8021156:	d015      	beq.n	8021184 <_puts_r+0x8c>
 8021158:	6823      	ldr	r3, [r4, #0]
 802115a:	1c5a      	adds	r2, r3, #1
 802115c:	6022      	str	r2, [r4, #0]
 802115e:	7019      	strb	r1, [r3, #0]
 8021160:	68a3      	ldr	r3, [r4, #8]
 8021162:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8021166:	3b01      	subs	r3, #1
 8021168:	60a3      	str	r3, [r4, #8]
 802116a:	2900      	cmp	r1, #0
 802116c:	d1ed      	bne.n	802114a <_puts_r+0x52>
 802116e:	2b00      	cmp	r3, #0
 8021170:	da11      	bge.n	8021196 <_puts_r+0x9e>
 8021172:	4622      	mov	r2, r4
 8021174:	210a      	movs	r1, #10
 8021176:	4628      	mov	r0, r5
 8021178:	f000 f895 	bl	80212a6 <__swbuf_r>
 802117c:	3001      	adds	r0, #1
 802117e:	d0d7      	beq.n	8021130 <_puts_r+0x38>
 8021180:	250a      	movs	r5, #10
 8021182:	e7d7      	b.n	8021134 <_puts_r+0x3c>
 8021184:	4622      	mov	r2, r4
 8021186:	4628      	mov	r0, r5
 8021188:	f000 f88d 	bl	80212a6 <__swbuf_r>
 802118c:	3001      	adds	r0, #1
 802118e:	d1e7      	bne.n	8021160 <_puts_r+0x68>
 8021190:	e7ce      	b.n	8021130 <_puts_r+0x38>
 8021192:	3e01      	subs	r6, #1
 8021194:	e7e4      	b.n	8021160 <_puts_r+0x68>
 8021196:	6823      	ldr	r3, [r4, #0]
 8021198:	1c5a      	adds	r2, r3, #1
 802119a:	6022      	str	r2, [r4, #0]
 802119c:	220a      	movs	r2, #10
 802119e:	701a      	strb	r2, [r3, #0]
 80211a0:	e7ee      	b.n	8021180 <_puts_r+0x88>
	...

080211a4 <puts>:
 80211a4:	4b02      	ldr	r3, [pc, #8]	@ (80211b0 <puts+0xc>)
 80211a6:	4601      	mov	r1, r0
 80211a8:	6818      	ldr	r0, [r3, #0]
 80211aa:	f7ff bfa5 	b.w	80210f8 <_puts_r>
 80211ae:	bf00      	nop
 80211b0:	20000080 	.word	0x20000080

080211b4 <sniprintf>:
 80211b4:	b40c      	push	{r2, r3}
 80211b6:	b530      	push	{r4, r5, lr}
 80211b8:	4b18      	ldr	r3, [pc, #96]	@ (802121c <sniprintf+0x68>)
 80211ba:	1e0c      	subs	r4, r1, #0
 80211bc:	681d      	ldr	r5, [r3, #0]
 80211be:	b09d      	sub	sp, #116	@ 0x74
 80211c0:	da08      	bge.n	80211d4 <sniprintf+0x20>
 80211c2:	238b      	movs	r3, #139	@ 0x8b
 80211c4:	602b      	str	r3, [r5, #0]
 80211c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80211ca:	b01d      	add	sp, #116	@ 0x74
 80211cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80211d0:	b002      	add	sp, #8
 80211d2:	4770      	bx	lr
 80211d4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80211d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80211dc:	f04f 0300 	mov.w	r3, #0
 80211e0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80211e2:	bf14      	ite	ne
 80211e4:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80211e8:	4623      	moveq	r3, r4
 80211ea:	9304      	str	r3, [sp, #16]
 80211ec:	9307      	str	r3, [sp, #28]
 80211ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80211f2:	9002      	str	r0, [sp, #8]
 80211f4:	9006      	str	r0, [sp, #24]
 80211f6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80211fa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80211fc:	ab21      	add	r3, sp, #132	@ 0x84
 80211fe:	a902      	add	r1, sp, #8
 8021200:	4628      	mov	r0, r5
 8021202:	9301      	str	r3, [sp, #4]
 8021204:	f000 fb0c 	bl	8021820 <_svfiprintf_r>
 8021208:	1c43      	adds	r3, r0, #1
 802120a:	bfbc      	itt	lt
 802120c:	238b      	movlt	r3, #139	@ 0x8b
 802120e:	602b      	strlt	r3, [r5, #0]
 8021210:	2c00      	cmp	r4, #0
 8021212:	d0da      	beq.n	80211ca <sniprintf+0x16>
 8021214:	9b02      	ldr	r3, [sp, #8]
 8021216:	2200      	movs	r2, #0
 8021218:	701a      	strb	r2, [r3, #0]
 802121a:	e7d6      	b.n	80211ca <sniprintf+0x16>
 802121c:	20000080 	.word	0x20000080

08021220 <__sread>:
 8021220:	b510      	push	{r4, lr}
 8021222:	460c      	mov	r4, r1
 8021224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021228:	f000 f926 	bl	8021478 <_read_r>
 802122c:	2800      	cmp	r0, #0
 802122e:	bfab      	itete	ge
 8021230:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8021232:	89a3      	ldrhlt	r3, [r4, #12]
 8021234:	181b      	addge	r3, r3, r0
 8021236:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802123a:	bfac      	ite	ge
 802123c:	6563      	strge	r3, [r4, #84]	@ 0x54
 802123e:	81a3      	strhlt	r3, [r4, #12]
 8021240:	bd10      	pop	{r4, pc}

08021242 <__swrite>:
 8021242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021246:	461f      	mov	r7, r3
 8021248:	898b      	ldrh	r3, [r1, #12]
 802124a:	05db      	lsls	r3, r3, #23
 802124c:	4605      	mov	r5, r0
 802124e:	460c      	mov	r4, r1
 8021250:	4616      	mov	r6, r2
 8021252:	d505      	bpl.n	8021260 <__swrite+0x1e>
 8021254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021258:	2302      	movs	r3, #2
 802125a:	2200      	movs	r2, #0
 802125c:	f000 f8fa 	bl	8021454 <_lseek_r>
 8021260:	89a3      	ldrh	r3, [r4, #12]
 8021262:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021266:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802126a:	81a3      	strh	r3, [r4, #12]
 802126c:	4632      	mov	r2, r6
 802126e:	463b      	mov	r3, r7
 8021270:	4628      	mov	r0, r5
 8021272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021276:	f000 b911 	b.w	802149c <_write_r>

0802127a <__sseek>:
 802127a:	b510      	push	{r4, lr}
 802127c:	460c      	mov	r4, r1
 802127e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021282:	f000 f8e7 	bl	8021454 <_lseek_r>
 8021286:	1c43      	adds	r3, r0, #1
 8021288:	89a3      	ldrh	r3, [r4, #12]
 802128a:	bf15      	itete	ne
 802128c:	6560      	strne	r0, [r4, #84]	@ 0x54
 802128e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8021292:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8021296:	81a3      	strheq	r3, [r4, #12]
 8021298:	bf18      	it	ne
 802129a:	81a3      	strhne	r3, [r4, #12]
 802129c:	bd10      	pop	{r4, pc}

0802129e <__sclose>:
 802129e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80212a2:	f000 b8c7 	b.w	8021434 <_close_r>

080212a6 <__swbuf_r>:
 80212a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80212a8:	460e      	mov	r6, r1
 80212aa:	4614      	mov	r4, r2
 80212ac:	4605      	mov	r5, r0
 80212ae:	b118      	cbz	r0, 80212b8 <__swbuf_r+0x12>
 80212b0:	6a03      	ldr	r3, [r0, #32]
 80212b2:	b90b      	cbnz	r3, 80212b8 <__swbuf_r+0x12>
 80212b4:	f7ff fed0 	bl	8021058 <__sinit>
 80212b8:	69a3      	ldr	r3, [r4, #24]
 80212ba:	60a3      	str	r3, [r4, #8]
 80212bc:	89a3      	ldrh	r3, [r4, #12]
 80212be:	071a      	lsls	r2, r3, #28
 80212c0:	d501      	bpl.n	80212c6 <__swbuf_r+0x20>
 80212c2:	6923      	ldr	r3, [r4, #16]
 80212c4:	b943      	cbnz	r3, 80212d8 <__swbuf_r+0x32>
 80212c6:	4621      	mov	r1, r4
 80212c8:	4628      	mov	r0, r5
 80212ca:	f000 f82b 	bl	8021324 <__swsetup_r>
 80212ce:	b118      	cbz	r0, 80212d8 <__swbuf_r+0x32>
 80212d0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80212d4:	4638      	mov	r0, r7
 80212d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80212d8:	6823      	ldr	r3, [r4, #0]
 80212da:	6922      	ldr	r2, [r4, #16]
 80212dc:	1a98      	subs	r0, r3, r2
 80212de:	6963      	ldr	r3, [r4, #20]
 80212e0:	b2f6      	uxtb	r6, r6
 80212e2:	4283      	cmp	r3, r0
 80212e4:	4637      	mov	r7, r6
 80212e6:	dc05      	bgt.n	80212f4 <__swbuf_r+0x4e>
 80212e8:	4621      	mov	r1, r4
 80212ea:	4628      	mov	r0, r5
 80212ec:	f000 fee6 	bl	80220bc <_fflush_r>
 80212f0:	2800      	cmp	r0, #0
 80212f2:	d1ed      	bne.n	80212d0 <__swbuf_r+0x2a>
 80212f4:	68a3      	ldr	r3, [r4, #8]
 80212f6:	3b01      	subs	r3, #1
 80212f8:	60a3      	str	r3, [r4, #8]
 80212fa:	6823      	ldr	r3, [r4, #0]
 80212fc:	1c5a      	adds	r2, r3, #1
 80212fe:	6022      	str	r2, [r4, #0]
 8021300:	701e      	strb	r6, [r3, #0]
 8021302:	6962      	ldr	r2, [r4, #20]
 8021304:	1c43      	adds	r3, r0, #1
 8021306:	429a      	cmp	r2, r3
 8021308:	d004      	beq.n	8021314 <__swbuf_r+0x6e>
 802130a:	89a3      	ldrh	r3, [r4, #12]
 802130c:	07db      	lsls	r3, r3, #31
 802130e:	d5e1      	bpl.n	80212d4 <__swbuf_r+0x2e>
 8021310:	2e0a      	cmp	r6, #10
 8021312:	d1df      	bne.n	80212d4 <__swbuf_r+0x2e>
 8021314:	4621      	mov	r1, r4
 8021316:	4628      	mov	r0, r5
 8021318:	f000 fed0 	bl	80220bc <_fflush_r>
 802131c:	2800      	cmp	r0, #0
 802131e:	d0d9      	beq.n	80212d4 <__swbuf_r+0x2e>
 8021320:	e7d6      	b.n	80212d0 <__swbuf_r+0x2a>
	...

08021324 <__swsetup_r>:
 8021324:	b538      	push	{r3, r4, r5, lr}
 8021326:	4b29      	ldr	r3, [pc, #164]	@ (80213cc <__swsetup_r+0xa8>)
 8021328:	4605      	mov	r5, r0
 802132a:	6818      	ldr	r0, [r3, #0]
 802132c:	460c      	mov	r4, r1
 802132e:	b118      	cbz	r0, 8021338 <__swsetup_r+0x14>
 8021330:	6a03      	ldr	r3, [r0, #32]
 8021332:	b90b      	cbnz	r3, 8021338 <__swsetup_r+0x14>
 8021334:	f7ff fe90 	bl	8021058 <__sinit>
 8021338:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802133c:	0719      	lsls	r1, r3, #28
 802133e:	d422      	bmi.n	8021386 <__swsetup_r+0x62>
 8021340:	06da      	lsls	r2, r3, #27
 8021342:	d407      	bmi.n	8021354 <__swsetup_r+0x30>
 8021344:	2209      	movs	r2, #9
 8021346:	602a      	str	r2, [r5, #0]
 8021348:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802134c:	81a3      	strh	r3, [r4, #12]
 802134e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021352:	e033      	b.n	80213bc <__swsetup_r+0x98>
 8021354:	0758      	lsls	r0, r3, #29
 8021356:	d512      	bpl.n	802137e <__swsetup_r+0x5a>
 8021358:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802135a:	b141      	cbz	r1, 802136e <__swsetup_r+0x4a>
 802135c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8021360:	4299      	cmp	r1, r3
 8021362:	d002      	beq.n	802136a <__swsetup_r+0x46>
 8021364:	4628      	mov	r0, r5
 8021366:	f000 f8ff 	bl	8021568 <_free_r>
 802136a:	2300      	movs	r3, #0
 802136c:	6363      	str	r3, [r4, #52]	@ 0x34
 802136e:	89a3      	ldrh	r3, [r4, #12]
 8021370:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8021374:	81a3      	strh	r3, [r4, #12]
 8021376:	2300      	movs	r3, #0
 8021378:	6063      	str	r3, [r4, #4]
 802137a:	6923      	ldr	r3, [r4, #16]
 802137c:	6023      	str	r3, [r4, #0]
 802137e:	89a3      	ldrh	r3, [r4, #12]
 8021380:	f043 0308 	orr.w	r3, r3, #8
 8021384:	81a3      	strh	r3, [r4, #12]
 8021386:	6923      	ldr	r3, [r4, #16]
 8021388:	b94b      	cbnz	r3, 802139e <__swsetup_r+0x7a>
 802138a:	89a3      	ldrh	r3, [r4, #12]
 802138c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8021390:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8021394:	d003      	beq.n	802139e <__swsetup_r+0x7a>
 8021396:	4621      	mov	r1, r4
 8021398:	4628      	mov	r0, r5
 802139a:	f000 feef 	bl	802217c <__smakebuf_r>
 802139e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80213a2:	f013 0201 	ands.w	r2, r3, #1
 80213a6:	d00a      	beq.n	80213be <__swsetup_r+0x9a>
 80213a8:	2200      	movs	r2, #0
 80213aa:	60a2      	str	r2, [r4, #8]
 80213ac:	6962      	ldr	r2, [r4, #20]
 80213ae:	4252      	negs	r2, r2
 80213b0:	61a2      	str	r2, [r4, #24]
 80213b2:	6922      	ldr	r2, [r4, #16]
 80213b4:	b942      	cbnz	r2, 80213c8 <__swsetup_r+0xa4>
 80213b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80213ba:	d1c5      	bne.n	8021348 <__swsetup_r+0x24>
 80213bc:	bd38      	pop	{r3, r4, r5, pc}
 80213be:	0799      	lsls	r1, r3, #30
 80213c0:	bf58      	it	pl
 80213c2:	6962      	ldrpl	r2, [r4, #20]
 80213c4:	60a2      	str	r2, [r4, #8]
 80213c6:	e7f4      	b.n	80213b2 <__swsetup_r+0x8e>
 80213c8:	2000      	movs	r0, #0
 80213ca:	e7f7      	b.n	80213bc <__swsetup_r+0x98>
 80213cc:	20000080 	.word	0x20000080

080213d0 <memcmp>:
 80213d0:	b510      	push	{r4, lr}
 80213d2:	3901      	subs	r1, #1
 80213d4:	4402      	add	r2, r0
 80213d6:	4290      	cmp	r0, r2
 80213d8:	d101      	bne.n	80213de <memcmp+0xe>
 80213da:	2000      	movs	r0, #0
 80213dc:	e005      	b.n	80213ea <memcmp+0x1a>
 80213de:	7803      	ldrb	r3, [r0, #0]
 80213e0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80213e4:	42a3      	cmp	r3, r4
 80213e6:	d001      	beq.n	80213ec <memcmp+0x1c>
 80213e8:	1b18      	subs	r0, r3, r4
 80213ea:	bd10      	pop	{r4, pc}
 80213ec:	3001      	adds	r0, #1
 80213ee:	e7f2      	b.n	80213d6 <memcmp+0x6>

080213f0 <memmove>:
 80213f0:	4288      	cmp	r0, r1
 80213f2:	b510      	push	{r4, lr}
 80213f4:	eb01 0402 	add.w	r4, r1, r2
 80213f8:	d902      	bls.n	8021400 <memmove+0x10>
 80213fa:	4284      	cmp	r4, r0
 80213fc:	4623      	mov	r3, r4
 80213fe:	d807      	bhi.n	8021410 <memmove+0x20>
 8021400:	1e43      	subs	r3, r0, #1
 8021402:	42a1      	cmp	r1, r4
 8021404:	d008      	beq.n	8021418 <memmove+0x28>
 8021406:	f811 2b01 	ldrb.w	r2, [r1], #1
 802140a:	f803 2f01 	strb.w	r2, [r3, #1]!
 802140e:	e7f8      	b.n	8021402 <memmove+0x12>
 8021410:	4402      	add	r2, r0
 8021412:	4601      	mov	r1, r0
 8021414:	428a      	cmp	r2, r1
 8021416:	d100      	bne.n	802141a <memmove+0x2a>
 8021418:	bd10      	pop	{r4, pc}
 802141a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802141e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8021422:	e7f7      	b.n	8021414 <memmove+0x24>

08021424 <memset>:
 8021424:	4402      	add	r2, r0
 8021426:	4603      	mov	r3, r0
 8021428:	4293      	cmp	r3, r2
 802142a:	d100      	bne.n	802142e <memset+0xa>
 802142c:	4770      	bx	lr
 802142e:	f803 1b01 	strb.w	r1, [r3], #1
 8021432:	e7f9      	b.n	8021428 <memset+0x4>

08021434 <_close_r>:
 8021434:	b538      	push	{r3, r4, r5, lr}
 8021436:	4d06      	ldr	r5, [pc, #24]	@ (8021450 <_close_r+0x1c>)
 8021438:	2300      	movs	r3, #0
 802143a:	4604      	mov	r4, r0
 802143c:	4608      	mov	r0, r1
 802143e:	602b      	str	r3, [r5, #0]
 8021440:	f7e0 fb04 	bl	8001a4c <_close>
 8021444:	1c43      	adds	r3, r0, #1
 8021446:	d102      	bne.n	802144e <_close_r+0x1a>
 8021448:	682b      	ldr	r3, [r5, #0]
 802144a:	b103      	cbz	r3, 802144e <_close_r+0x1a>
 802144c:	6023      	str	r3, [r4, #0]
 802144e:	bd38      	pop	{r3, r4, r5, pc}
 8021450:	20028900 	.word	0x20028900

08021454 <_lseek_r>:
 8021454:	b538      	push	{r3, r4, r5, lr}
 8021456:	4d07      	ldr	r5, [pc, #28]	@ (8021474 <_lseek_r+0x20>)
 8021458:	4604      	mov	r4, r0
 802145a:	4608      	mov	r0, r1
 802145c:	4611      	mov	r1, r2
 802145e:	2200      	movs	r2, #0
 8021460:	602a      	str	r2, [r5, #0]
 8021462:	461a      	mov	r2, r3
 8021464:	f7e0 fb19 	bl	8001a9a <_lseek>
 8021468:	1c43      	adds	r3, r0, #1
 802146a:	d102      	bne.n	8021472 <_lseek_r+0x1e>
 802146c:	682b      	ldr	r3, [r5, #0]
 802146e:	b103      	cbz	r3, 8021472 <_lseek_r+0x1e>
 8021470:	6023      	str	r3, [r4, #0]
 8021472:	bd38      	pop	{r3, r4, r5, pc}
 8021474:	20028900 	.word	0x20028900

08021478 <_read_r>:
 8021478:	b538      	push	{r3, r4, r5, lr}
 802147a:	4d07      	ldr	r5, [pc, #28]	@ (8021498 <_read_r+0x20>)
 802147c:	4604      	mov	r4, r0
 802147e:	4608      	mov	r0, r1
 8021480:	4611      	mov	r1, r2
 8021482:	2200      	movs	r2, #0
 8021484:	602a      	str	r2, [r5, #0]
 8021486:	461a      	mov	r2, r3
 8021488:	f7e0 fac3 	bl	8001a12 <_read>
 802148c:	1c43      	adds	r3, r0, #1
 802148e:	d102      	bne.n	8021496 <_read_r+0x1e>
 8021490:	682b      	ldr	r3, [r5, #0]
 8021492:	b103      	cbz	r3, 8021496 <_read_r+0x1e>
 8021494:	6023      	str	r3, [r4, #0]
 8021496:	bd38      	pop	{r3, r4, r5, pc}
 8021498:	20028900 	.word	0x20028900

0802149c <_write_r>:
 802149c:	b538      	push	{r3, r4, r5, lr}
 802149e:	4d07      	ldr	r5, [pc, #28]	@ (80214bc <_write_r+0x20>)
 80214a0:	4604      	mov	r4, r0
 80214a2:	4608      	mov	r0, r1
 80214a4:	4611      	mov	r1, r2
 80214a6:	2200      	movs	r2, #0
 80214a8:	602a      	str	r2, [r5, #0]
 80214aa:	461a      	mov	r2, r3
 80214ac:	f7df fe22 	bl	80010f4 <_write>
 80214b0:	1c43      	adds	r3, r0, #1
 80214b2:	d102      	bne.n	80214ba <_write_r+0x1e>
 80214b4:	682b      	ldr	r3, [r5, #0]
 80214b6:	b103      	cbz	r3, 80214ba <_write_r+0x1e>
 80214b8:	6023      	str	r3, [r4, #0]
 80214ba:	bd38      	pop	{r3, r4, r5, pc}
 80214bc:	20028900 	.word	0x20028900

080214c0 <__libc_init_array>:
 80214c0:	b570      	push	{r4, r5, r6, lr}
 80214c2:	4d0d      	ldr	r5, [pc, #52]	@ (80214f8 <__libc_init_array+0x38>)
 80214c4:	4c0d      	ldr	r4, [pc, #52]	@ (80214fc <__libc_init_array+0x3c>)
 80214c6:	1b64      	subs	r4, r4, r5
 80214c8:	10a4      	asrs	r4, r4, #2
 80214ca:	2600      	movs	r6, #0
 80214cc:	42a6      	cmp	r6, r4
 80214ce:	d109      	bne.n	80214e4 <__libc_init_array+0x24>
 80214d0:	4d0b      	ldr	r5, [pc, #44]	@ (8021500 <__libc_init_array+0x40>)
 80214d2:	4c0c      	ldr	r4, [pc, #48]	@ (8021504 <__libc_init_array+0x44>)
 80214d4:	f000 ff76 	bl	80223c4 <_init>
 80214d8:	1b64      	subs	r4, r4, r5
 80214da:	10a4      	asrs	r4, r4, #2
 80214dc:	2600      	movs	r6, #0
 80214de:	42a6      	cmp	r6, r4
 80214e0:	d105      	bne.n	80214ee <__libc_init_array+0x2e>
 80214e2:	bd70      	pop	{r4, r5, r6, pc}
 80214e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80214e8:	4798      	blx	r3
 80214ea:	3601      	adds	r6, #1
 80214ec:	e7ee      	b.n	80214cc <__libc_init_array+0xc>
 80214ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80214f2:	4798      	blx	r3
 80214f4:	3601      	adds	r6, #1
 80214f6:	e7f2      	b.n	80214de <__libc_init_array+0x1e>
 80214f8:	0802735c 	.word	0x0802735c
 80214fc:	0802735c 	.word	0x0802735c
 8021500:	0802735c 	.word	0x0802735c
 8021504:	08027360 	.word	0x08027360

08021508 <__retarget_lock_init_recursive>:
 8021508:	4770      	bx	lr

0802150a <__retarget_lock_acquire_recursive>:
 802150a:	4770      	bx	lr

0802150c <__retarget_lock_release_recursive>:
 802150c:	4770      	bx	lr

0802150e <memcpy>:
 802150e:	440a      	add	r2, r1
 8021510:	4291      	cmp	r1, r2
 8021512:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8021516:	d100      	bne.n	802151a <memcpy+0xc>
 8021518:	4770      	bx	lr
 802151a:	b510      	push	{r4, lr}
 802151c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021520:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021524:	4291      	cmp	r1, r2
 8021526:	d1f9      	bne.n	802151c <memcpy+0xe>
 8021528:	bd10      	pop	{r4, pc}
	...

0802152c <__assert_func>:
 802152c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802152e:	4614      	mov	r4, r2
 8021530:	461a      	mov	r2, r3
 8021532:	4b09      	ldr	r3, [pc, #36]	@ (8021558 <__assert_func+0x2c>)
 8021534:	681b      	ldr	r3, [r3, #0]
 8021536:	4605      	mov	r5, r0
 8021538:	68d8      	ldr	r0, [r3, #12]
 802153a:	b14c      	cbz	r4, 8021550 <__assert_func+0x24>
 802153c:	4b07      	ldr	r3, [pc, #28]	@ (802155c <__assert_func+0x30>)
 802153e:	9100      	str	r1, [sp, #0]
 8021540:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021544:	4906      	ldr	r1, [pc, #24]	@ (8021560 <__assert_func+0x34>)
 8021546:	462b      	mov	r3, r5
 8021548:	f000 fde0 	bl	802210c <fiprintf>
 802154c:	f000 feb8 	bl	80222c0 <abort>
 8021550:	4b04      	ldr	r3, [pc, #16]	@ (8021564 <__assert_func+0x38>)
 8021552:	461c      	mov	r4, r3
 8021554:	e7f3      	b.n	802153e <__assert_func+0x12>
 8021556:	bf00      	nop
 8021558:	20000080 	.word	0x20000080
 802155c:	080272e5 	.word	0x080272e5
 8021560:	080272f2 	.word	0x080272f2
 8021564:	08027320 	.word	0x08027320

08021568 <_free_r>:
 8021568:	b538      	push	{r3, r4, r5, lr}
 802156a:	4605      	mov	r5, r0
 802156c:	2900      	cmp	r1, #0
 802156e:	d041      	beq.n	80215f4 <_free_r+0x8c>
 8021570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021574:	1f0c      	subs	r4, r1, #4
 8021576:	2b00      	cmp	r3, #0
 8021578:	bfb8      	it	lt
 802157a:	18e4      	addlt	r4, r4, r3
 802157c:	f000 f8e8 	bl	8021750 <__malloc_lock>
 8021580:	4a1d      	ldr	r2, [pc, #116]	@ (80215f8 <_free_r+0x90>)
 8021582:	6813      	ldr	r3, [r2, #0]
 8021584:	b933      	cbnz	r3, 8021594 <_free_r+0x2c>
 8021586:	6063      	str	r3, [r4, #4]
 8021588:	6014      	str	r4, [r2, #0]
 802158a:	4628      	mov	r0, r5
 802158c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021590:	f000 b8e4 	b.w	802175c <__malloc_unlock>
 8021594:	42a3      	cmp	r3, r4
 8021596:	d908      	bls.n	80215aa <_free_r+0x42>
 8021598:	6820      	ldr	r0, [r4, #0]
 802159a:	1821      	adds	r1, r4, r0
 802159c:	428b      	cmp	r3, r1
 802159e:	bf01      	itttt	eq
 80215a0:	6819      	ldreq	r1, [r3, #0]
 80215a2:	685b      	ldreq	r3, [r3, #4]
 80215a4:	1809      	addeq	r1, r1, r0
 80215a6:	6021      	streq	r1, [r4, #0]
 80215a8:	e7ed      	b.n	8021586 <_free_r+0x1e>
 80215aa:	461a      	mov	r2, r3
 80215ac:	685b      	ldr	r3, [r3, #4]
 80215ae:	b10b      	cbz	r3, 80215b4 <_free_r+0x4c>
 80215b0:	42a3      	cmp	r3, r4
 80215b2:	d9fa      	bls.n	80215aa <_free_r+0x42>
 80215b4:	6811      	ldr	r1, [r2, #0]
 80215b6:	1850      	adds	r0, r2, r1
 80215b8:	42a0      	cmp	r0, r4
 80215ba:	d10b      	bne.n	80215d4 <_free_r+0x6c>
 80215bc:	6820      	ldr	r0, [r4, #0]
 80215be:	4401      	add	r1, r0
 80215c0:	1850      	adds	r0, r2, r1
 80215c2:	4283      	cmp	r3, r0
 80215c4:	6011      	str	r1, [r2, #0]
 80215c6:	d1e0      	bne.n	802158a <_free_r+0x22>
 80215c8:	6818      	ldr	r0, [r3, #0]
 80215ca:	685b      	ldr	r3, [r3, #4]
 80215cc:	6053      	str	r3, [r2, #4]
 80215ce:	4408      	add	r0, r1
 80215d0:	6010      	str	r0, [r2, #0]
 80215d2:	e7da      	b.n	802158a <_free_r+0x22>
 80215d4:	d902      	bls.n	80215dc <_free_r+0x74>
 80215d6:	230c      	movs	r3, #12
 80215d8:	602b      	str	r3, [r5, #0]
 80215da:	e7d6      	b.n	802158a <_free_r+0x22>
 80215dc:	6820      	ldr	r0, [r4, #0]
 80215de:	1821      	adds	r1, r4, r0
 80215e0:	428b      	cmp	r3, r1
 80215e2:	bf04      	itt	eq
 80215e4:	6819      	ldreq	r1, [r3, #0]
 80215e6:	685b      	ldreq	r3, [r3, #4]
 80215e8:	6063      	str	r3, [r4, #4]
 80215ea:	bf04      	itt	eq
 80215ec:	1809      	addeq	r1, r1, r0
 80215ee:	6021      	streq	r1, [r4, #0]
 80215f0:	6054      	str	r4, [r2, #4]
 80215f2:	e7ca      	b.n	802158a <_free_r+0x22>
 80215f4:	bd38      	pop	{r3, r4, r5, pc}
 80215f6:	bf00      	nop
 80215f8:	2002890c 	.word	0x2002890c

080215fc <malloc>:
 80215fc:	4b02      	ldr	r3, [pc, #8]	@ (8021608 <malloc+0xc>)
 80215fe:	4601      	mov	r1, r0
 8021600:	6818      	ldr	r0, [r3, #0]
 8021602:	f000 b825 	b.w	8021650 <_malloc_r>
 8021606:	bf00      	nop
 8021608:	20000080 	.word	0x20000080

0802160c <sbrk_aligned>:
 802160c:	b570      	push	{r4, r5, r6, lr}
 802160e:	4e0f      	ldr	r6, [pc, #60]	@ (802164c <sbrk_aligned+0x40>)
 8021610:	460c      	mov	r4, r1
 8021612:	6831      	ldr	r1, [r6, #0]
 8021614:	4605      	mov	r5, r0
 8021616:	b911      	cbnz	r1, 802161e <sbrk_aligned+0x12>
 8021618:	f000 fe42 	bl	80222a0 <_sbrk_r>
 802161c:	6030      	str	r0, [r6, #0]
 802161e:	4621      	mov	r1, r4
 8021620:	4628      	mov	r0, r5
 8021622:	f000 fe3d 	bl	80222a0 <_sbrk_r>
 8021626:	1c43      	adds	r3, r0, #1
 8021628:	d103      	bne.n	8021632 <sbrk_aligned+0x26>
 802162a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 802162e:	4620      	mov	r0, r4
 8021630:	bd70      	pop	{r4, r5, r6, pc}
 8021632:	1cc4      	adds	r4, r0, #3
 8021634:	f024 0403 	bic.w	r4, r4, #3
 8021638:	42a0      	cmp	r0, r4
 802163a:	d0f8      	beq.n	802162e <sbrk_aligned+0x22>
 802163c:	1a21      	subs	r1, r4, r0
 802163e:	4628      	mov	r0, r5
 8021640:	f000 fe2e 	bl	80222a0 <_sbrk_r>
 8021644:	3001      	adds	r0, #1
 8021646:	d1f2      	bne.n	802162e <sbrk_aligned+0x22>
 8021648:	e7ef      	b.n	802162a <sbrk_aligned+0x1e>
 802164a:	bf00      	nop
 802164c:	20028908 	.word	0x20028908

08021650 <_malloc_r>:
 8021650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021654:	1ccd      	adds	r5, r1, #3
 8021656:	f025 0503 	bic.w	r5, r5, #3
 802165a:	3508      	adds	r5, #8
 802165c:	2d0c      	cmp	r5, #12
 802165e:	bf38      	it	cc
 8021660:	250c      	movcc	r5, #12
 8021662:	2d00      	cmp	r5, #0
 8021664:	4606      	mov	r6, r0
 8021666:	db01      	blt.n	802166c <_malloc_r+0x1c>
 8021668:	42a9      	cmp	r1, r5
 802166a:	d904      	bls.n	8021676 <_malloc_r+0x26>
 802166c:	230c      	movs	r3, #12
 802166e:	6033      	str	r3, [r6, #0]
 8021670:	2000      	movs	r0, #0
 8021672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021676:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802174c <_malloc_r+0xfc>
 802167a:	f000 f869 	bl	8021750 <__malloc_lock>
 802167e:	f8d8 3000 	ldr.w	r3, [r8]
 8021682:	461c      	mov	r4, r3
 8021684:	bb44      	cbnz	r4, 80216d8 <_malloc_r+0x88>
 8021686:	4629      	mov	r1, r5
 8021688:	4630      	mov	r0, r6
 802168a:	f7ff ffbf 	bl	802160c <sbrk_aligned>
 802168e:	1c43      	adds	r3, r0, #1
 8021690:	4604      	mov	r4, r0
 8021692:	d158      	bne.n	8021746 <_malloc_r+0xf6>
 8021694:	f8d8 4000 	ldr.w	r4, [r8]
 8021698:	4627      	mov	r7, r4
 802169a:	2f00      	cmp	r7, #0
 802169c:	d143      	bne.n	8021726 <_malloc_r+0xd6>
 802169e:	2c00      	cmp	r4, #0
 80216a0:	d04b      	beq.n	802173a <_malloc_r+0xea>
 80216a2:	6823      	ldr	r3, [r4, #0]
 80216a4:	4639      	mov	r1, r7
 80216a6:	4630      	mov	r0, r6
 80216a8:	eb04 0903 	add.w	r9, r4, r3
 80216ac:	f000 fdf8 	bl	80222a0 <_sbrk_r>
 80216b0:	4581      	cmp	r9, r0
 80216b2:	d142      	bne.n	802173a <_malloc_r+0xea>
 80216b4:	6821      	ldr	r1, [r4, #0]
 80216b6:	1a6d      	subs	r5, r5, r1
 80216b8:	4629      	mov	r1, r5
 80216ba:	4630      	mov	r0, r6
 80216bc:	f7ff ffa6 	bl	802160c <sbrk_aligned>
 80216c0:	3001      	adds	r0, #1
 80216c2:	d03a      	beq.n	802173a <_malloc_r+0xea>
 80216c4:	6823      	ldr	r3, [r4, #0]
 80216c6:	442b      	add	r3, r5
 80216c8:	6023      	str	r3, [r4, #0]
 80216ca:	f8d8 3000 	ldr.w	r3, [r8]
 80216ce:	685a      	ldr	r2, [r3, #4]
 80216d0:	bb62      	cbnz	r2, 802172c <_malloc_r+0xdc>
 80216d2:	f8c8 7000 	str.w	r7, [r8]
 80216d6:	e00f      	b.n	80216f8 <_malloc_r+0xa8>
 80216d8:	6822      	ldr	r2, [r4, #0]
 80216da:	1b52      	subs	r2, r2, r5
 80216dc:	d420      	bmi.n	8021720 <_malloc_r+0xd0>
 80216de:	2a0b      	cmp	r2, #11
 80216e0:	d917      	bls.n	8021712 <_malloc_r+0xc2>
 80216e2:	1961      	adds	r1, r4, r5
 80216e4:	42a3      	cmp	r3, r4
 80216e6:	6025      	str	r5, [r4, #0]
 80216e8:	bf18      	it	ne
 80216ea:	6059      	strne	r1, [r3, #4]
 80216ec:	6863      	ldr	r3, [r4, #4]
 80216ee:	bf08      	it	eq
 80216f0:	f8c8 1000 	streq.w	r1, [r8]
 80216f4:	5162      	str	r2, [r4, r5]
 80216f6:	604b      	str	r3, [r1, #4]
 80216f8:	4630      	mov	r0, r6
 80216fa:	f000 f82f 	bl	802175c <__malloc_unlock>
 80216fe:	f104 000b 	add.w	r0, r4, #11
 8021702:	1d23      	adds	r3, r4, #4
 8021704:	f020 0007 	bic.w	r0, r0, #7
 8021708:	1ac2      	subs	r2, r0, r3
 802170a:	bf1c      	itt	ne
 802170c:	1a1b      	subne	r3, r3, r0
 802170e:	50a3      	strne	r3, [r4, r2]
 8021710:	e7af      	b.n	8021672 <_malloc_r+0x22>
 8021712:	6862      	ldr	r2, [r4, #4]
 8021714:	42a3      	cmp	r3, r4
 8021716:	bf0c      	ite	eq
 8021718:	f8c8 2000 	streq.w	r2, [r8]
 802171c:	605a      	strne	r2, [r3, #4]
 802171e:	e7eb      	b.n	80216f8 <_malloc_r+0xa8>
 8021720:	4623      	mov	r3, r4
 8021722:	6864      	ldr	r4, [r4, #4]
 8021724:	e7ae      	b.n	8021684 <_malloc_r+0x34>
 8021726:	463c      	mov	r4, r7
 8021728:	687f      	ldr	r7, [r7, #4]
 802172a:	e7b6      	b.n	802169a <_malloc_r+0x4a>
 802172c:	461a      	mov	r2, r3
 802172e:	685b      	ldr	r3, [r3, #4]
 8021730:	42a3      	cmp	r3, r4
 8021732:	d1fb      	bne.n	802172c <_malloc_r+0xdc>
 8021734:	2300      	movs	r3, #0
 8021736:	6053      	str	r3, [r2, #4]
 8021738:	e7de      	b.n	80216f8 <_malloc_r+0xa8>
 802173a:	230c      	movs	r3, #12
 802173c:	6033      	str	r3, [r6, #0]
 802173e:	4630      	mov	r0, r6
 8021740:	f000 f80c 	bl	802175c <__malloc_unlock>
 8021744:	e794      	b.n	8021670 <_malloc_r+0x20>
 8021746:	6005      	str	r5, [r0, #0]
 8021748:	e7d6      	b.n	80216f8 <_malloc_r+0xa8>
 802174a:	bf00      	nop
 802174c:	2002890c 	.word	0x2002890c

08021750 <__malloc_lock>:
 8021750:	4801      	ldr	r0, [pc, #4]	@ (8021758 <__malloc_lock+0x8>)
 8021752:	f7ff beda 	b.w	802150a <__retarget_lock_acquire_recursive>
 8021756:	bf00      	nop
 8021758:	20028904 	.word	0x20028904

0802175c <__malloc_unlock>:
 802175c:	4801      	ldr	r0, [pc, #4]	@ (8021764 <__malloc_unlock+0x8>)
 802175e:	f7ff bed5 	b.w	802150c <__retarget_lock_release_recursive>
 8021762:	bf00      	nop
 8021764:	20028904 	.word	0x20028904

08021768 <__ssputs_r>:
 8021768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802176c:	688e      	ldr	r6, [r1, #8]
 802176e:	461f      	mov	r7, r3
 8021770:	42be      	cmp	r6, r7
 8021772:	680b      	ldr	r3, [r1, #0]
 8021774:	4682      	mov	sl, r0
 8021776:	460c      	mov	r4, r1
 8021778:	4690      	mov	r8, r2
 802177a:	d82d      	bhi.n	80217d8 <__ssputs_r+0x70>
 802177c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8021780:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8021784:	d026      	beq.n	80217d4 <__ssputs_r+0x6c>
 8021786:	6965      	ldr	r5, [r4, #20]
 8021788:	6909      	ldr	r1, [r1, #16]
 802178a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802178e:	eba3 0901 	sub.w	r9, r3, r1
 8021792:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8021796:	1c7b      	adds	r3, r7, #1
 8021798:	444b      	add	r3, r9
 802179a:	106d      	asrs	r5, r5, #1
 802179c:	429d      	cmp	r5, r3
 802179e:	bf38      	it	cc
 80217a0:	461d      	movcc	r5, r3
 80217a2:	0553      	lsls	r3, r2, #21
 80217a4:	d527      	bpl.n	80217f6 <__ssputs_r+0x8e>
 80217a6:	4629      	mov	r1, r5
 80217a8:	f7ff ff52 	bl	8021650 <_malloc_r>
 80217ac:	4606      	mov	r6, r0
 80217ae:	b360      	cbz	r0, 802180a <__ssputs_r+0xa2>
 80217b0:	6921      	ldr	r1, [r4, #16]
 80217b2:	464a      	mov	r2, r9
 80217b4:	f7ff feab 	bl	802150e <memcpy>
 80217b8:	89a3      	ldrh	r3, [r4, #12]
 80217ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80217be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80217c2:	81a3      	strh	r3, [r4, #12]
 80217c4:	6126      	str	r6, [r4, #16]
 80217c6:	6165      	str	r5, [r4, #20]
 80217c8:	444e      	add	r6, r9
 80217ca:	eba5 0509 	sub.w	r5, r5, r9
 80217ce:	6026      	str	r6, [r4, #0]
 80217d0:	60a5      	str	r5, [r4, #8]
 80217d2:	463e      	mov	r6, r7
 80217d4:	42be      	cmp	r6, r7
 80217d6:	d900      	bls.n	80217da <__ssputs_r+0x72>
 80217d8:	463e      	mov	r6, r7
 80217da:	6820      	ldr	r0, [r4, #0]
 80217dc:	4632      	mov	r2, r6
 80217de:	4641      	mov	r1, r8
 80217e0:	f7ff fe06 	bl	80213f0 <memmove>
 80217e4:	68a3      	ldr	r3, [r4, #8]
 80217e6:	1b9b      	subs	r3, r3, r6
 80217e8:	60a3      	str	r3, [r4, #8]
 80217ea:	6823      	ldr	r3, [r4, #0]
 80217ec:	4433      	add	r3, r6
 80217ee:	6023      	str	r3, [r4, #0]
 80217f0:	2000      	movs	r0, #0
 80217f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80217f6:	462a      	mov	r2, r5
 80217f8:	f000 fd69 	bl	80222ce <_realloc_r>
 80217fc:	4606      	mov	r6, r0
 80217fe:	2800      	cmp	r0, #0
 8021800:	d1e0      	bne.n	80217c4 <__ssputs_r+0x5c>
 8021802:	6921      	ldr	r1, [r4, #16]
 8021804:	4650      	mov	r0, sl
 8021806:	f7ff feaf 	bl	8021568 <_free_r>
 802180a:	230c      	movs	r3, #12
 802180c:	f8ca 3000 	str.w	r3, [sl]
 8021810:	89a3      	ldrh	r3, [r4, #12]
 8021812:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021816:	81a3      	strh	r3, [r4, #12]
 8021818:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802181c:	e7e9      	b.n	80217f2 <__ssputs_r+0x8a>
	...

08021820 <_svfiprintf_r>:
 8021820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021824:	4698      	mov	r8, r3
 8021826:	898b      	ldrh	r3, [r1, #12]
 8021828:	061b      	lsls	r3, r3, #24
 802182a:	b09d      	sub	sp, #116	@ 0x74
 802182c:	4607      	mov	r7, r0
 802182e:	460d      	mov	r5, r1
 8021830:	4614      	mov	r4, r2
 8021832:	d510      	bpl.n	8021856 <_svfiprintf_r+0x36>
 8021834:	690b      	ldr	r3, [r1, #16]
 8021836:	b973      	cbnz	r3, 8021856 <_svfiprintf_r+0x36>
 8021838:	2140      	movs	r1, #64	@ 0x40
 802183a:	f7ff ff09 	bl	8021650 <_malloc_r>
 802183e:	6028      	str	r0, [r5, #0]
 8021840:	6128      	str	r0, [r5, #16]
 8021842:	b930      	cbnz	r0, 8021852 <_svfiprintf_r+0x32>
 8021844:	230c      	movs	r3, #12
 8021846:	603b      	str	r3, [r7, #0]
 8021848:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802184c:	b01d      	add	sp, #116	@ 0x74
 802184e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021852:	2340      	movs	r3, #64	@ 0x40
 8021854:	616b      	str	r3, [r5, #20]
 8021856:	2300      	movs	r3, #0
 8021858:	9309      	str	r3, [sp, #36]	@ 0x24
 802185a:	2320      	movs	r3, #32
 802185c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8021860:	f8cd 800c 	str.w	r8, [sp, #12]
 8021864:	2330      	movs	r3, #48	@ 0x30
 8021866:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8021a04 <_svfiprintf_r+0x1e4>
 802186a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802186e:	f04f 0901 	mov.w	r9, #1
 8021872:	4623      	mov	r3, r4
 8021874:	469a      	mov	sl, r3
 8021876:	f813 2b01 	ldrb.w	r2, [r3], #1
 802187a:	b10a      	cbz	r2, 8021880 <_svfiprintf_r+0x60>
 802187c:	2a25      	cmp	r2, #37	@ 0x25
 802187e:	d1f9      	bne.n	8021874 <_svfiprintf_r+0x54>
 8021880:	ebba 0b04 	subs.w	fp, sl, r4
 8021884:	d00b      	beq.n	802189e <_svfiprintf_r+0x7e>
 8021886:	465b      	mov	r3, fp
 8021888:	4622      	mov	r2, r4
 802188a:	4629      	mov	r1, r5
 802188c:	4638      	mov	r0, r7
 802188e:	f7ff ff6b 	bl	8021768 <__ssputs_r>
 8021892:	3001      	adds	r0, #1
 8021894:	f000 80a7 	beq.w	80219e6 <_svfiprintf_r+0x1c6>
 8021898:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802189a:	445a      	add	r2, fp
 802189c:	9209      	str	r2, [sp, #36]	@ 0x24
 802189e:	f89a 3000 	ldrb.w	r3, [sl]
 80218a2:	2b00      	cmp	r3, #0
 80218a4:	f000 809f 	beq.w	80219e6 <_svfiprintf_r+0x1c6>
 80218a8:	2300      	movs	r3, #0
 80218aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80218ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80218b2:	f10a 0a01 	add.w	sl, sl, #1
 80218b6:	9304      	str	r3, [sp, #16]
 80218b8:	9307      	str	r3, [sp, #28]
 80218ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80218be:	931a      	str	r3, [sp, #104]	@ 0x68
 80218c0:	4654      	mov	r4, sl
 80218c2:	2205      	movs	r2, #5
 80218c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80218c8:	484e      	ldr	r0, [pc, #312]	@ (8021a04 <_svfiprintf_r+0x1e4>)
 80218ca:	f7de fca1 	bl	8000210 <memchr>
 80218ce:	9a04      	ldr	r2, [sp, #16]
 80218d0:	b9d8      	cbnz	r0, 802190a <_svfiprintf_r+0xea>
 80218d2:	06d0      	lsls	r0, r2, #27
 80218d4:	bf44      	itt	mi
 80218d6:	2320      	movmi	r3, #32
 80218d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80218dc:	0711      	lsls	r1, r2, #28
 80218de:	bf44      	itt	mi
 80218e0:	232b      	movmi	r3, #43	@ 0x2b
 80218e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80218e6:	f89a 3000 	ldrb.w	r3, [sl]
 80218ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80218ec:	d015      	beq.n	802191a <_svfiprintf_r+0xfa>
 80218ee:	9a07      	ldr	r2, [sp, #28]
 80218f0:	4654      	mov	r4, sl
 80218f2:	2000      	movs	r0, #0
 80218f4:	f04f 0c0a 	mov.w	ip, #10
 80218f8:	4621      	mov	r1, r4
 80218fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80218fe:	3b30      	subs	r3, #48	@ 0x30
 8021900:	2b09      	cmp	r3, #9
 8021902:	d94b      	bls.n	802199c <_svfiprintf_r+0x17c>
 8021904:	b1b0      	cbz	r0, 8021934 <_svfiprintf_r+0x114>
 8021906:	9207      	str	r2, [sp, #28]
 8021908:	e014      	b.n	8021934 <_svfiprintf_r+0x114>
 802190a:	eba0 0308 	sub.w	r3, r0, r8
 802190e:	fa09 f303 	lsl.w	r3, r9, r3
 8021912:	4313      	orrs	r3, r2
 8021914:	9304      	str	r3, [sp, #16]
 8021916:	46a2      	mov	sl, r4
 8021918:	e7d2      	b.n	80218c0 <_svfiprintf_r+0xa0>
 802191a:	9b03      	ldr	r3, [sp, #12]
 802191c:	1d19      	adds	r1, r3, #4
 802191e:	681b      	ldr	r3, [r3, #0]
 8021920:	9103      	str	r1, [sp, #12]
 8021922:	2b00      	cmp	r3, #0
 8021924:	bfbb      	ittet	lt
 8021926:	425b      	neglt	r3, r3
 8021928:	f042 0202 	orrlt.w	r2, r2, #2
 802192c:	9307      	strge	r3, [sp, #28]
 802192e:	9307      	strlt	r3, [sp, #28]
 8021930:	bfb8      	it	lt
 8021932:	9204      	strlt	r2, [sp, #16]
 8021934:	7823      	ldrb	r3, [r4, #0]
 8021936:	2b2e      	cmp	r3, #46	@ 0x2e
 8021938:	d10a      	bne.n	8021950 <_svfiprintf_r+0x130>
 802193a:	7863      	ldrb	r3, [r4, #1]
 802193c:	2b2a      	cmp	r3, #42	@ 0x2a
 802193e:	d132      	bne.n	80219a6 <_svfiprintf_r+0x186>
 8021940:	9b03      	ldr	r3, [sp, #12]
 8021942:	1d1a      	adds	r2, r3, #4
 8021944:	681b      	ldr	r3, [r3, #0]
 8021946:	9203      	str	r2, [sp, #12]
 8021948:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802194c:	3402      	adds	r4, #2
 802194e:	9305      	str	r3, [sp, #20]
 8021950:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8021a14 <_svfiprintf_r+0x1f4>
 8021954:	7821      	ldrb	r1, [r4, #0]
 8021956:	2203      	movs	r2, #3
 8021958:	4650      	mov	r0, sl
 802195a:	f7de fc59 	bl	8000210 <memchr>
 802195e:	b138      	cbz	r0, 8021970 <_svfiprintf_r+0x150>
 8021960:	9b04      	ldr	r3, [sp, #16]
 8021962:	eba0 000a 	sub.w	r0, r0, sl
 8021966:	2240      	movs	r2, #64	@ 0x40
 8021968:	4082      	lsls	r2, r0
 802196a:	4313      	orrs	r3, r2
 802196c:	3401      	adds	r4, #1
 802196e:	9304      	str	r3, [sp, #16]
 8021970:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021974:	4824      	ldr	r0, [pc, #144]	@ (8021a08 <_svfiprintf_r+0x1e8>)
 8021976:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802197a:	2206      	movs	r2, #6
 802197c:	f7de fc48 	bl	8000210 <memchr>
 8021980:	2800      	cmp	r0, #0
 8021982:	d036      	beq.n	80219f2 <_svfiprintf_r+0x1d2>
 8021984:	4b21      	ldr	r3, [pc, #132]	@ (8021a0c <_svfiprintf_r+0x1ec>)
 8021986:	bb1b      	cbnz	r3, 80219d0 <_svfiprintf_r+0x1b0>
 8021988:	9b03      	ldr	r3, [sp, #12]
 802198a:	3307      	adds	r3, #7
 802198c:	f023 0307 	bic.w	r3, r3, #7
 8021990:	3308      	adds	r3, #8
 8021992:	9303      	str	r3, [sp, #12]
 8021994:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021996:	4433      	add	r3, r6
 8021998:	9309      	str	r3, [sp, #36]	@ 0x24
 802199a:	e76a      	b.n	8021872 <_svfiprintf_r+0x52>
 802199c:	fb0c 3202 	mla	r2, ip, r2, r3
 80219a0:	460c      	mov	r4, r1
 80219a2:	2001      	movs	r0, #1
 80219a4:	e7a8      	b.n	80218f8 <_svfiprintf_r+0xd8>
 80219a6:	2300      	movs	r3, #0
 80219a8:	3401      	adds	r4, #1
 80219aa:	9305      	str	r3, [sp, #20]
 80219ac:	4619      	mov	r1, r3
 80219ae:	f04f 0c0a 	mov.w	ip, #10
 80219b2:	4620      	mov	r0, r4
 80219b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80219b8:	3a30      	subs	r2, #48	@ 0x30
 80219ba:	2a09      	cmp	r2, #9
 80219bc:	d903      	bls.n	80219c6 <_svfiprintf_r+0x1a6>
 80219be:	2b00      	cmp	r3, #0
 80219c0:	d0c6      	beq.n	8021950 <_svfiprintf_r+0x130>
 80219c2:	9105      	str	r1, [sp, #20]
 80219c4:	e7c4      	b.n	8021950 <_svfiprintf_r+0x130>
 80219c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80219ca:	4604      	mov	r4, r0
 80219cc:	2301      	movs	r3, #1
 80219ce:	e7f0      	b.n	80219b2 <_svfiprintf_r+0x192>
 80219d0:	ab03      	add	r3, sp, #12
 80219d2:	9300      	str	r3, [sp, #0]
 80219d4:	462a      	mov	r2, r5
 80219d6:	4b0e      	ldr	r3, [pc, #56]	@ (8021a10 <_svfiprintf_r+0x1f0>)
 80219d8:	a904      	add	r1, sp, #16
 80219da:	4638      	mov	r0, r7
 80219dc:	f3af 8000 	nop.w
 80219e0:	1c42      	adds	r2, r0, #1
 80219e2:	4606      	mov	r6, r0
 80219e4:	d1d6      	bne.n	8021994 <_svfiprintf_r+0x174>
 80219e6:	89ab      	ldrh	r3, [r5, #12]
 80219e8:	065b      	lsls	r3, r3, #25
 80219ea:	f53f af2d 	bmi.w	8021848 <_svfiprintf_r+0x28>
 80219ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80219f0:	e72c      	b.n	802184c <_svfiprintf_r+0x2c>
 80219f2:	ab03      	add	r3, sp, #12
 80219f4:	9300      	str	r3, [sp, #0]
 80219f6:	462a      	mov	r2, r5
 80219f8:	4b05      	ldr	r3, [pc, #20]	@ (8021a10 <_svfiprintf_r+0x1f0>)
 80219fa:	a904      	add	r1, sp, #16
 80219fc:	4638      	mov	r0, r7
 80219fe:	f000 f9bb 	bl	8021d78 <_printf_i>
 8021a02:	e7ed      	b.n	80219e0 <_svfiprintf_r+0x1c0>
 8021a04:	08027321 	.word	0x08027321
 8021a08:	0802732b 	.word	0x0802732b
 8021a0c:	00000000 	.word	0x00000000
 8021a10:	08021769 	.word	0x08021769
 8021a14:	08027327 	.word	0x08027327

08021a18 <__sfputc_r>:
 8021a18:	6893      	ldr	r3, [r2, #8]
 8021a1a:	3b01      	subs	r3, #1
 8021a1c:	2b00      	cmp	r3, #0
 8021a1e:	b410      	push	{r4}
 8021a20:	6093      	str	r3, [r2, #8]
 8021a22:	da08      	bge.n	8021a36 <__sfputc_r+0x1e>
 8021a24:	6994      	ldr	r4, [r2, #24]
 8021a26:	42a3      	cmp	r3, r4
 8021a28:	db01      	blt.n	8021a2e <__sfputc_r+0x16>
 8021a2a:	290a      	cmp	r1, #10
 8021a2c:	d103      	bne.n	8021a36 <__sfputc_r+0x1e>
 8021a2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021a32:	f7ff bc38 	b.w	80212a6 <__swbuf_r>
 8021a36:	6813      	ldr	r3, [r2, #0]
 8021a38:	1c58      	adds	r0, r3, #1
 8021a3a:	6010      	str	r0, [r2, #0]
 8021a3c:	7019      	strb	r1, [r3, #0]
 8021a3e:	4608      	mov	r0, r1
 8021a40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021a44:	4770      	bx	lr

08021a46 <__sfputs_r>:
 8021a46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021a48:	4606      	mov	r6, r0
 8021a4a:	460f      	mov	r7, r1
 8021a4c:	4614      	mov	r4, r2
 8021a4e:	18d5      	adds	r5, r2, r3
 8021a50:	42ac      	cmp	r4, r5
 8021a52:	d101      	bne.n	8021a58 <__sfputs_r+0x12>
 8021a54:	2000      	movs	r0, #0
 8021a56:	e007      	b.n	8021a68 <__sfputs_r+0x22>
 8021a58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021a5c:	463a      	mov	r2, r7
 8021a5e:	4630      	mov	r0, r6
 8021a60:	f7ff ffda 	bl	8021a18 <__sfputc_r>
 8021a64:	1c43      	adds	r3, r0, #1
 8021a66:	d1f3      	bne.n	8021a50 <__sfputs_r+0xa>
 8021a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021a6c <_vfiprintf_r>:
 8021a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a70:	460d      	mov	r5, r1
 8021a72:	b09d      	sub	sp, #116	@ 0x74
 8021a74:	4614      	mov	r4, r2
 8021a76:	4698      	mov	r8, r3
 8021a78:	4606      	mov	r6, r0
 8021a7a:	b118      	cbz	r0, 8021a84 <_vfiprintf_r+0x18>
 8021a7c:	6a03      	ldr	r3, [r0, #32]
 8021a7e:	b90b      	cbnz	r3, 8021a84 <_vfiprintf_r+0x18>
 8021a80:	f7ff faea 	bl	8021058 <__sinit>
 8021a84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021a86:	07d9      	lsls	r1, r3, #31
 8021a88:	d405      	bmi.n	8021a96 <_vfiprintf_r+0x2a>
 8021a8a:	89ab      	ldrh	r3, [r5, #12]
 8021a8c:	059a      	lsls	r2, r3, #22
 8021a8e:	d402      	bmi.n	8021a96 <_vfiprintf_r+0x2a>
 8021a90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021a92:	f7ff fd3a 	bl	802150a <__retarget_lock_acquire_recursive>
 8021a96:	89ab      	ldrh	r3, [r5, #12]
 8021a98:	071b      	lsls	r3, r3, #28
 8021a9a:	d501      	bpl.n	8021aa0 <_vfiprintf_r+0x34>
 8021a9c:	692b      	ldr	r3, [r5, #16]
 8021a9e:	b99b      	cbnz	r3, 8021ac8 <_vfiprintf_r+0x5c>
 8021aa0:	4629      	mov	r1, r5
 8021aa2:	4630      	mov	r0, r6
 8021aa4:	f7ff fc3e 	bl	8021324 <__swsetup_r>
 8021aa8:	b170      	cbz	r0, 8021ac8 <_vfiprintf_r+0x5c>
 8021aaa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021aac:	07dc      	lsls	r4, r3, #31
 8021aae:	d504      	bpl.n	8021aba <_vfiprintf_r+0x4e>
 8021ab0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021ab4:	b01d      	add	sp, #116	@ 0x74
 8021ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021aba:	89ab      	ldrh	r3, [r5, #12]
 8021abc:	0598      	lsls	r0, r3, #22
 8021abe:	d4f7      	bmi.n	8021ab0 <_vfiprintf_r+0x44>
 8021ac0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021ac2:	f7ff fd23 	bl	802150c <__retarget_lock_release_recursive>
 8021ac6:	e7f3      	b.n	8021ab0 <_vfiprintf_r+0x44>
 8021ac8:	2300      	movs	r3, #0
 8021aca:	9309      	str	r3, [sp, #36]	@ 0x24
 8021acc:	2320      	movs	r3, #32
 8021ace:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8021ad2:	f8cd 800c 	str.w	r8, [sp, #12]
 8021ad6:	2330      	movs	r3, #48	@ 0x30
 8021ad8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8021c88 <_vfiprintf_r+0x21c>
 8021adc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8021ae0:	f04f 0901 	mov.w	r9, #1
 8021ae4:	4623      	mov	r3, r4
 8021ae6:	469a      	mov	sl, r3
 8021ae8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021aec:	b10a      	cbz	r2, 8021af2 <_vfiprintf_r+0x86>
 8021aee:	2a25      	cmp	r2, #37	@ 0x25
 8021af0:	d1f9      	bne.n	8021ae6 <_vfiprintf_r+0x7a>
 8021af2:	ebba 0b04 	subs.w	fp, sl, r4
 8021af6:	d00b      	beq.n	8021b10 <_vfiprintf_r+0xa4>
 8021af8:	465b      	mov	r3, fp
 8021afa:	4622      	mov	r2, r4
 8021afc:	4629      	mov	r1, r5
 8021afe:	4630      	mov	r0, r6
 8021b00:	f7ff ffa1 	bl	8021a46 <__sfputs_r>
 8021b04:	3001      	adds	r0, #1
 8021b06:	f000 80a7 	beq.w	8021c58 <_vfiprintf_r+0x1ec>
 8021b0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021b0c:	445a      	add	r2, fp
 8021b0e:	9209      	str	r2, [sp, #36]	@ 0x24
 8021b10:	f89a 3000 	ldrb.w	r3, [sl]
 8021b14:	2b00      	cmp	r3, #0
 8021b16:	f000 809f 	beq.w	8021c58 <_vfiprintf_r+0x1ec>
 8021b1a:	2300      	movs	r3, #0
 8021b1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8021b20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021b24:	f10a 0a01 	add.w	sl, sl, #1
 8021b28:	9304      	str	r3, [sp, #16]
 8021b2a:	9307      	str	r3, [sp, #28]
 8021b2c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8021b30:	931a      	str	r3, [sp, #104]	@ 0x68
 8021b32:	4654      	mov	r4, sl
 8021b34:	2205      	movs	r2, #5
 8021b36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021b3a:	4853      	ldr	r0, [pc, #332]	@ (8021c88 <_vfiprintf_r+0x21c>)
 8021b3c:	f7de fb68 	bl	8000210 <memchr>
 8021b40:	9a04      	ldr	r2, [sp, #16]
 8021b42:	b9d8      	cbnz	r0, 8021b7c <_vfiprintf_r+0x110>
 8021b44:	06d1      	lsls	r1, r2, #27
 8021b46:	bf44      	itt	mi
 8021b48:	2320      	movmi	r3, #32
 8021b4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021b4e:	0713      	lsls	r3, r2, #28
 8021b50:	bf44      	itt	mi
 8021b52:	232b      	movmi	r3, #43	@ 0x2b
 8021b54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021b58:	f89a 3000 	ldrb.w	r3, [sl]
 8021b5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8021b5e:	d015      	beq.n	8021b8c <_vfiprintf_r+0x120>
 8021b60:	9a07      	ldr	r2, [sp, #28]
 8021b62:	4654      	mov	r4, sl
 8021b64:	2000      	movs	r0, #0
 8021b66:	f04f 0c0a 	mov.w	ip, #10
 8021b6a:	4621      	mov	r1, r4
 8021b6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021b70:	3b30      	subs	r3, #48	@ 0x30
 8021b72:	2b09      	cmp	r3, #9
 8021b74:	d94b      	bls.n	8021c0e <_vfiprintf_r+0x1a2>
 8021b76:	b1b0      	cbz	r0, 8021ba6 <_vfiprintf_r+0x13a>
 8021b78:	9207      	str	r2, [sp, #28]
 8021b7a:	e014      	b.n	8021ba6 <_vfiprintf_r+0x13a>
 8021b7c:	eba0 0308 	sub.w	r3, r0, r8
 8021b80:	fa09 f303 	lsl.w	r3, r9, r3
 8021b84:	4313      	orrs	r3, r2
 8021b86:	9304      	str	r3, [sp, #16]
 8021b88:	46a2      	mov	sl, r4
 8021b8a:	e7d2      	b.n	8021b32 <_vfiprintf_r+0xc6>
 8021b8c:	9b03      	ldr	r3, [sp, #12]
 8021b8e:	1d19      	adds	r1, r3, #4
 8021b90:	681b      	ldr	r3, [r3, #0]
 8021b92:	9103      	str	r1, [sp, #12]
 8021b94:	2b00      	cmp	r3, #0
 8021b96:	bfbb      	ittet	lt
 8021b98:	425b      	neglt	r3, r3
 8021b9a:	f042 0202 	orrlt.w	r2, r2, #2
 8021b9e:	9307      	strge	r3, [sp, #28]
 8021ba0:	9307      	strlt	r3, [sp, #28]
 8021ba2:	bfb8      	it	lt
 8021ba4:	9204      	strlt	r2, [sp, #16]
 8021ba6:	7823      	ldrb	r3, [r4, #0]
 8021ba8:	2b2e      	cmp	r3, #46	@ 0x2e
 8021baa:	d10a      	bne.n	8021bc2 <_vfiprintf_r+0x156>
 8021bac:	7863      	ldrb	r3, [r4, #1]
 8021bae:	2b2a      	cmp	r3, #42	@ 0x2a
 8021bb0:	d132      	bne.n	8021c18 <_vfiprintf_r+0x1ac>
 8021bb2:	9b03      	ldr	r3, [sp, #12]
 8021bb4:	1d1a      	adds	r2, r3, #4
 8021bb6:	681b      	ldr	r3, [r3, #0]
 8021bb8:	9203      	str	r2, [sp, #12]
 8021bba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8021bbe:	3402      	adds	r4, #2
 8021bc0:	9305      	str	r3, [sp, #20]
 8021bc2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8021c98 <_vfiprintf_r+0x22c>
 8021bc6:	7821      	ldrb	r1, [r4, #0]
 8021bc8:	2203      	movs	r2, #3
 8021bca:	4650      	mov	r0, sl
 8021bcc:	f7de fb20 	bl	8000210 <memchr>
 8021bd0:	b138      	cbz	r0, 8021be2 <_vfiprintf_r+0x176>
 8021bd2:	9b04      	ldr	r3, [sp, #16]
 8021bd4:	eba0 000a 	sub.w	r0, r0, sl
 8021bd8:	2240      	movs	r2, #64	@ 0x40
 8021bda:	4082      	lsls	r2, r0
 8021bdc:	4313      	orrs	r3, r2
 8021bde:	3401      	adds	r4, #1
 8021be0:	9304      	str	r3, [sp, #16]
 8021be2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021be6:	4829      	ldr	r0, [pc, #164]	@ (8021c8c <_vfiprintf_r+0x220>)
 8021be8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8021bec:	2206      	movs	r2, #6
 8021bee:	f7de fb0f 	bl	8000210 <memchr>
 8021bf2:	2800      	cmp	r0, #0
 8021bf4:	d03f      	beq.n	8021c76 <_vfiprintf_r+0x20a>
 8021bf6:	4b26      	ldr	r3, [pc, #152]	@ (8021c90 <_vfiprintf_r+0x224>)
 8021bf8:	bb1b      	cbnz	r3, 8021c42 <_vfiprintf_r+0x1d6>
 8021bfa:	9b03      	ldr	r3, [sp, #12]
 8021bfc:	3307      	adds	r3, #7
 8021bfe:	f023 0307 	bic.w	r3, r3, #7
 8021c02:	3308      	adds	r3, #8
 8021c04:	9303      	str	r3, [sp, #12]
 8021c06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021c08:	443b      	add	r3, r7
 8021c0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8021c0c:	e76a      	b.n	8021ae4 <_vfiprintf_r+0x78>
 8021c0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8021c12:	460c      	mov	r4, r1
 8021c14:	2001      	movs	r0, #1
 8021c16:	e7a8      	b.n	8021b6a <_vfiprintf_r+0xfe>
 8021c18:	2300      	movs	r3, #0
 8021c1a:	3401      	adds	r4, #1
 8021c1c:	9305      	str	r3, [sp, #20]
 8021c1e:	4619      	mov	r1, r3
 8021c20:	f04f 0c0a 	mov.w	ip, #10
 8021c24:	4620      	mov	r0, r4
 8021c26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021c2a:	3a30      	subs	r2, #48	@ 0x30
 8021c2c:	2a09      	cmp	r2, #9
 8021c2e:	d903      	bls.n	8021c38 <_vfiprintf_r+0x1cc>
 8021c30:	2b00      	cmp	r3, #0
 8021c32:	d0c6      	beq.n	8021bc2 <_vfiprintf_r+0x156>
 8021c34:	9105      	str	r1, [sp, #20]
 8021c36:	e7c4      	b.n	8021bc2 <_vfiprintf_r+0x156>
 8021c38:	fb0c 2101 	mla	r1, ip, r1, r2
 8021c3c:	4604      	mov	r4, r0
 8021c3e:	2301      	movs	r3, #1
 8021c40:	e7f0      	b.n	8021c24 <_vfiprintf_r+0x1b8>
 8021c42:	ab03      	add	r3, sp, #12
 8021c44:	9300      	str	r3, [sp, #0]
 8021c46:	462a      	mov	r2, r5
 8021c48:	4b12      	ldr	r3, [pc, #72]	@ (8021c94 <_vfiprintf_r+0x228>)
 8021c4a:	a904      	add	r1, sp, #16
 8021c4c:	4630      	mov	r0, r6
 8021c4e:	f3af 8000 	nop.w
 8021c52:	4607      	mov	r7, r0
 8021c54:	1c78      	adds	r0, r7, #1
 8021c56:	d1d6      	bne.n	8021c06 <_vfiprintf_r+0x19a>
 8021c58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021c5a:	07d9      	lsls	r1, r3, #31
 8021c5c:	d405      	bmi.n	8021c6a <_vfiprintf_r+0x1fe>
 8021c5e:	89ab      	ldrh	r3, [r5, #12]
 8021c60:	059a      	lsls	r2, r3, #22
 8021c62:	d402      	bmi.n	8021c6a <_vfiprintf_r+0x1fe>
 8021c64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021c66:	f7ff fc51 	bl	802150c <__retarget_lock_release_recursive>
 8021c6a:	89ab      	ldrh	r3, [r5, #12]
 8021c6c:	065b      	lsls	r3, r3, #25
 8021c6e:	f53f af1f 	bmi.w	8021ab0 <_vfiprintf_r+0x44>
 8021c72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021c74:	e71e      	b.n	8021ab4 <_vfiprintf_r+0x48>
 8021c76:	ab03      	add	r3, sp, #12
 8021c78:	9300      	str	r3, [sp, #0]
 8021c7a:	462a      	mov	r2, r5
 8021c7c:	4b05      	ldr	r3, [pc, #20]	@ (8021c94 <_vfiprintf_r+0x228>)
 8021c7e:	a904      	add	r1, sp, #16
 8021c80:	4630      	mov	r0, r6
 8021c82:	f000 f879 	bl	8021d78 <_printf_i>
 8021c86:	e7e4      	b.n	8021c52 <_vfiprintf_r+0x1e6>
 8021c88:	08027321 	.word	0x08027321
 8021c8c:	0802732b 	.word	0x0802732b
 8021c90:	00000000 	.word	0x00000000
 8021c94:	08021a47 	.word	0x08021a47
 8021c98:	08027327 	.word	0x08027327

08021c9c <_printf_common>:
 8021c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021ca0:	4616      	mov	r6, r2
 8021ca2:	4698      	mov	r8, r3
 8021ca4:	688a      	ldr	r2, [r1, #8]
 8021ca6:	690b      	ldr	r3, [r1, #16]
 8021ca8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8021cac:	4293      	cmp	r3, r2
 8021cae:	bfb8      	it	lt
 8021cb0:	4613      	movlt	r3, r2
 8021cb2:	6033      	str	r3, [r6, #0]
 8021cb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8021cb8:	4607      	mov	r7, r0
 8021cba:	460c      	mov	r4, r1
 8021cbc:	b10a      	cbz	r2, 8021cc2 <_printf_common+0x26>
 8021cbe:	3301      	adds	r3, #1
 8021cc0:	6033      	str	r3, [r6, #0]
 8021cc2:	6823      	ldr	r3, [r4, #0]
 8021cc4:	0699      	lsls	r1, r3, #26
 8021cc6:	bf42      	ittt	mi
 8021cc8:	6833      	ldrmi	r3, [r6, #0]
 8021cca:	3302      	addmi	r3, #2
 8021ccc:	6033      	strmi	r3, [r6, #0]
 8021cce:	6825      	ldr	r5, [r4, #0]
 8021cd0:	f015 0506 	ands.w	r5, r5, #6
 8021cd4:	d106      	bne.n	8021ce4 <_printf_common+0x48>
 8021cd6:	f104 0a19 	add.w	sl, r4, #25
 8021cda:	68e3      	ldr	r3, [r4, #12]
 8021cdc:	6832      	ldr	r2, [r6, #0]
 8021cde:	1a9b      	subs	r3, r3, r2
 8021ce0:	42ab      	cmp	r3, r5
 8021ce2:	dc26      	bgt.n	8021d32 <_printf_common+0x96>
 8021ce4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8021ce8:	6822      	ldr	r2, [r4, #0]
 8021cea:	3b00      	subs	r3, #0
 8021cec:	bf18      	it	ne
 8021cee:	2301      	movne	r3, #1
 8021cf0:	0692      	lsls	r2, r2, #26
 8021cf2:	d42b      	bmi.n	8021d4c <_printf_common+0xb0>
 8021cf4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8021cf8:	4641      	mov	r1, r8
 8021cfa:	4638      	mov	r0, r7
 8021cfc:	47c8      	blx	r9
 8021cfe:	3001      	adds	r0, #1
 8021d00:	d01e      	beq.n	8021d40 <_printf_common+0xa4>
 8021d02:	6823      	ldr	r3, [r4, #0]
 8021d04:	6922      	ldr	r2, [r4, #16]
 8021d06:	f003 0306 	and.w	r3, r3, #6
 8021d0a:	2b04      	cmp	r3, #4
 8021d0c:	bf02      	ittt	eq
 8021d0e:	68e5      	ldreq	r5, [r4, #12]
 8021d10:	6833      	ldreq	r3, [r6, #0]
 8021d12:	1aed      	subeq	r5, r5, r3
 8021d14:	68a3      	ldr	r3, [r4, #8]
 8021d16:	bf0c      	ite	eq
 8021d18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8021d1c:	2500      	movne	r5, #0
 8021d1e:	4293      	cmp	r3, r2
 8021d20:	bfc4      	itt	gt
 8021d22:	1a9b      	subgt	r3, r3, r2
 8021d24:	18ed      	addgt	r5, r5, r3
 8021d26:	2600      	movs	r6, #0
 8021d28:	341a      	adds	r4, #26
 8021d2a:	42b5      	cmp	r5, r6
 8021d2c:	d11a      	bne.n	8021d64 <_printf_common+0xc8>
 8021d2e:	2000      	movs	r0, #0
 8021d30:	e008      	b.n	8021d44 <_printf_common+0xa8>
 8021d32:	2301      	movs	r3, #1
 8021d34:	4652      	mov	r2, sl
 8021d36:	4641      	mov	r1, r8
 8021d38:	4638      	mov	r0, r7
 8021d3a:	47c8      	blx	r9
 8021d3c:	3001      	adds	r0, #1
 8021d3e:	d103      	bne.n	8021d48 <_printf_common+0xac>
 8021d40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021d48:	3501      	adds	r5, #1
 8021d4a:	e7c6      	b.n	8021cda <_printf_common+0x3e>
 8021d4c:	18e1      	adds	r1, r4, r3
 8021d4e:	1c5a      	adds	r2, r3, #1
 8021d50:	2030      	movs	r0, #48	@ 0x30
 8021d52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8021d56:	4422      	add	r2, r4
 8021d58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8021d5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8021d60:	3302      	adds	r3, #2
 8021d62:	e7c7      	b.n	8021cf4 <_printf_common+0x58>
 8021d64:	2301      	movs	r3, #1
 8021d66:	4622      	mov	r2, r4
 8021d68:	4641      	mov	r1, r8
 8021d6a:	4638      	mov	r0, r7
 8021d6c:	47c8      	blx	r9
 8021d6e:	3001      	adds	r0, #1
 8021d70:	d0e6      	beq.n	8021d40 <_printf_common+0xa4>
 8021d72:	3601      	adds	r6, #1
 8021d74:	e7d9      	b.n	8021d2a <_printf_common+0x8e>
	...

08021d78 <_printf_i>:
 8021d78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8021d7c:	7e0f      	ldrb	r7, [r1, #24]
 8021d7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8021d80:	2f78      	cmp	r7, #120	@ 0x78
 8021d82:	4691      	mov	r9, r2
 8021d84:	4680      	mov	r8, r0
 8021d86:	460c      	mov	r4, r1
 8021d88:	469a      	mov	sl, r3
 8021d8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8021d8e:	d807      	bhi.n	8021da0 <_printf_i+0x28>
 8021d90:	2f62      	cmp	r7, #98	@ 0x62
 8021d92:	d80a      	bhi.n	8021daa <_printf_i+0x32>
 8021d94:	2f00      	cmp	r7, #0
 8021d96:	f000 80d1 	beq.w	8021f3c <_printf_i+0x1c4>
 8021d9a:	2f58      	cmp	r7, #88	@ 0x58
 8021d9c:	f000 80b8 	beq.w	8021f10 <_printf_i+0x198>
 8021da0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8021da4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8021da8:	e03a      	b.n	8021e20 <_printf_i+0xa8>
 8021daa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8021dae:	2b15      	cmp	r3, #21
 8021db0:	d8f6      	bhi.n	8021da0 <_printf_i+0x28>
 8021db2:	a101      	add	r1, pc, #4	@ (adr r1, 8021db8 <_printf_i+0x40>)
 8021db4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8021db8:	08021e11 	.word	0x08021e11
 8021dbc:	08021e25 	.word	0x08021e25
 8021dc0:	08021da1 	.word	0x08021da1
 8021dc4:	08021da1 	.word	0x08021da1
 8021dc8:	08021da1 	.word	0x08021da1
 8021dcc:	08021da1 	.word	0x08021da1
 8021dd0:	08021e25 	.word	0x08021e25
 8021dd4:	08021da1 	.word	0x08021da1
 8021dd8:	08021da1 	.word	0x08021da1
 8021ddc:	08021da1 	.word	0x08021da1
 8021de0:	08021da1 	.word	0x08021da1
 8021de4:	08021f23 	.word	0x08021f23
 8021de8:	08021e4f 	.word	0x08021e4f
 8021dec:	08021edd 	.word	0x08021edd
 8021df0:	08021da1 	.word	0x08021da1
 8021df4:	08021da1 	.word	0x08021da1
 8021df8:	08021f45 	.word	0x08021f45
 8021dfc:	08021da1 	.word	0x08021da1
 8021e00:	08021e4f 	.word	0x08021e4f
 8021e04:	08021da1 	.word	0x08021da1
 8021e08:	08021da1 	.word	0x08021da1
 8021e0c:	08021ee5 	.word	0x08021ee5
 8021e10:	6833      	ldr	r3, [r6, #0]
 8021e12:	1d1a      	adds	r2, r3, #4
 8021e14:	681b      	ldr	r3, [r3, #0]
 8021e16:	6032      	str	r2, [r6, #0]
 8021e18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8021e1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8021e20:	2301      	movs	r3, #1
 8021e22:	e09c      	b.n	8021f5e <_printf_i+0x1e6>
 8021e24:	6833      	ldr	r3, [r6, #0]
 8021e26:	6820      	ldr	r0, [r4, #0]
 8021e28:	1d19      	adds	r1, r3, #4
 8021e2a:	6031      	str	r1, [r6, #0]
 8021e2c:	0606      	lsls	r6, r0, #24
 8021e2e:	d501      	bpl.n	8021e34 <_printf_i+0xbc>
 8021e30:	681d      	ldr	r5, [r3, #0]
 8021e32:	e003      	b.n	8021e3c <_printf_i+0xc4>
 8021e34:	0645      	lsls	r5, r0, #25
 8021e36:	d5fb      	bpl.n	8021e30 <_printf_i+0xb8>
 8021e38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8021e3c:	2d00      	cmp	r5, #0
 8021e3e:	da03      	bge.n	8021e48 <_printf_i+0xd0>
 8021e40:	232d      	movs	r3, #45	@ 0x2d
 8021e42:	426d      	negs	r5, r5
 8021e44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8021e48:	4858      	ldr	r0, [pc, #352]	@ (8021fac <_printf_i+0x234>)
 8021e4a:	230a      	movs	r3, #10
 8021e4c:	e011      	b.n	8021e72 <_printf_i+0xfa>
 8021e4e:	6821      	ldr	r1, [r4, #0]
 8021e50:	6833      	ldr	r3, [r6, #0]
 8021e52:	0608      	lsls	r0, r1, #24
 8021e54:	f853 5b04 	ldr.w	r5, [r3], #4
 8021e58:	d402      	bmi.n	8021e60 <_printf_i+0xe8>
 8021e5a:	0649      	lsls	r1, r1, #25
 8021e5c:	bf48      	it	mi
 8021e5e:	b2ad      	uxthmi	r5, r5
 8021e60:	2f6f      	cmp	r7, #111	@ 0x6f
 8021e62:	4852      	ldr	r0, [pc, #328]	@ (8021fac <_printf_i+0x234>)
 8021e64:	6033      	str	r3, [r6, #0]
 8021e66:	bf14      	ite	ne
 8021e68:	230a      	movne	r3, #10
 8021e6a:	2308      	moveq	r3, #8
 8021e6c:	2100      	movs	r1, #0
 8021e6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8021e72:	6866      	ldr	r6, [r4, #4]
 8021e74:	60a6      	str	r6, [r4, #8]
 8021e76:	2e00      	cmp	r6, #0
 8021e78:	db05      	blt.n	8021e86 <_printf_i+0x10e>
 8021e7a:	6821      	ldr	r1, [r4, #0]
 8021e7c:	432e      	orrs	r6, r5
 8021e7e:	f021 0104 	bic.w	r1, r1, #4
 8021e82:	6021      	str	r1, [r4, #0]
 8021e84:	d04b      	beq.n	8021f1e <_printf_i+0x1a6>
 8021e86:	4616      	mov	r6, r2
 8021e88:	fbb5 f1f3 	udiv	r1, r5, r3
 8021e8c:	fb03 5711 	mls	r7, r3, r1, r5
 8021e90:	5dc7      	ldrb	r7, [r0, r7]
 8021e92:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8021e96:	462f      	mov	r7, r5
 8021e98:	42bb      	cmp	r3, r7
 8021e9a:	460d      	mov	r5, r1
 8021e9c:	d9f4      	bls.n	8021e88 <_printf_i+0x110>
 8021e9e:	2b08      	cmp	r3, #8
 8021ea0:	d10b      	bne.n	8021eba <_printf_i+0x142>
 8021ea2:	6823      	ldr	r3, [r4, #0]
 8021ea4:	07df      	lsls	r7, r3, #31
 8021ea6:	d508      	bpl.n	8021eba <_printf_i+0x142>
 8021ea8:	6923      	ldr	r3, [r4, #16]
 8021eaa:	6861      	ldr	r1, [r4, #4]
 8021eac:	4299      	cmp	r1, r3
 8021eae:	bfde      	ittt	le
 8021eb0:	2330      	movle	r3, #48	@ 0x30
 8021eb2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8021eb6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8021eba:	1b92      	subs	r2, r2, r6
 8021ebc:	6122      	str	r2, [r4, #16]
 8021ebe:	f8cd a000 	str.w	sl, [sp]
 8021ec2:	464b      	mov	r3, r9
 8021ec4:	aa03      	add	r2, sp, #12
 8021ec6:	4621      	mov	r1, r4
 8021ec8:	4640      	mov	r0, r8
 8021eca:	f7ff fee7 	bl	8021c9c <_printf_common>
 8021ece:	3001      	adds	r0, #1
 8021ed0:	d14a      	bne.n	8021f68 <_printf_i+0x1f0>
 8021ed2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021ed6:	b004      	add	sp, #16
 8021ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021edc:	6823      	ldr	r3, [r4, #0]
 8021ede:	f043 0320 	orr.w	r3, r3, #32
 8021ee2:	6023      	str	r3, [r4, #0]
 8021ee4:	4832      	ldr	r0, [pc, #200]	@ (8021fb0 <_printf_i+0x238>)
 8021ee6:	2778      	movs	r7, #120	@ 0x78
 8021ee8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8021eec:	6823      	ldr	r3, [r4, #0]
 8021eee:	6831      	ldr	r1, [r6, #0]
 8021ef0:	061f      	lsls	r7, r3, #24
 8021ef2:	f851 5b04 	ldr.w	r5, [r1], #4
 8021ef6:	d402      	bmi.n	8021efe <_printf_i+0x186>
 8021ef8:	065f      	lsls	r7, r3, #25
 8021efa:	bf48      	it	mi
 8021efc:	b2ad      	uxthmi	r5, r5
 8021efe:	6031      	str	r1, [r6, #0]
 8021f00:	07d9      	lsls	r1, r3, #31
 8021f02:	bf44      	itt	mi
 8021f04:	f043 0320 	orrmi.w	r3, r3, #32
 8021f08:	6023      	strmi	r3, [r4, #0]
 8021f0a:	b11d      	cbz	r5, 8021f14 <_printf_i+0x19c>
 8021f0c:	2310      	movs	r3, #16
 8021f0e:	e7ad      	b.n	8021e6c <_printf_i+0xf4>
 8021f10:	4826      	ldr	r0, [pc, #152]	@ (8021fac <_printf_i+0x234>)
 8021f12:	e7e9      	b.n	8021ee8 <_printf_i+0x170>
 8021f14:	6823      	ldr	r3, [r4, #0]
 8021f16:	f023 0320 	bic.w	r3, r3, #32
 8021f1a:	6023      	str	r3, [r4, #0]
 8021f1c:	e7f6      	b.n	8021f0c <_printf_i+0x194>
 8021f1e:	4616      	mov	r6, r2
 8021f20:	e7bd      	b.n	8021e9e <_printf_i+0x126>
 8021f22:	6833      	ldr	r3, [r6, #0]
 8021f24:	6825      	ldr	r5, [r4, #0]
 8021f26:	6961      	ldr	r1, [r4, #20]
 8021f28:	1d18      	adds	r0, r3, #4
 8021f2a:	6030      	str	r0, [r6, #0]
 8021f2c:	062e      	lsls	r6, r5, #24
 8021f2e:	681b      	ldr	r3, [r3, #0]
 8021f30:	d501      	bpl.n	8021f36 <_printf_i+0x1be>
 8021f32:	6019      	str	r1, [r3, #0]
 8021f34:	e002      	b.n	8021f3c <_printf_i+0x1c4>
 8021f36:	0668      	lsls	r0, r5, #25
 8021f38:	d5fb      	bpl.n	8021f32 <_printf_i+0x1ba>
 8021f3a:	8019      	strh	r1, [r3, #0]
 8021f3c:	2300      	movs	r3, #0
 8021f3e:	6123      	str	r3, [r4, #16]
 8021f40:	4616      	mov	r6, r2
 8021f42:	e7bc      	b.n	8021ebe <_printf_i+0x146>
 8021f44:	6833      	ldr	r3, [r6, #0]
 8021f46:	1d1a      	adds	r2, r3, #4
 8021f48:	6032      	str	r2, [r6, #0]
 8021f4a:	681e      	ldr	r6, [r3, #0]
 8021f4c:	6862      	ldr	r2, [r4, #4]
 8021f4e:	2100      	movs	r1, #0
 8021f50:	4630      	mov	r0, r6
 8021f52:	f7de f95d 	bl	8000210 <memchr>
 8021f56:	b108      	cbz	r0, 8021f5c <_printf_i+0x1e4>
 8021f58:	1b80      	subs	r0, r0, r6
 8021f5a:	6060      	str	r0, [r4, #4]
 8021f5c:	6863      	ldr	r3, [r4, #4]
 8021f5e:	6123      	str	r3, [r4, #16]
 8021f60:	2300      	movs	r3, #0
 8021f62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8021f66:	e7aa      	b.n	8021ebe <_printf_i+0x146>
 8021f68:	6923      	ldr	r3, [r4, #16]
 8021f6a:	4632      	mov	r2, r6
 8021f6c:	4649      	mov	r1, r9
 8021f6e:	4640      	mov	r0, r8
 8021f70:	47d0      	blx	sl
 8021f72:	3001      	adds	r0, #1
 8021f74:	d0ad      	beq.n	8021ed2 <_printf_i+0x15a>
 8021f76:	6823      	ldr	r3, [r4, #0]
 8021f78:	079b      	lsls	r3, r3, #30
 8021f7a:	d413      	bmi.n	8021fa4 <_printf_i+0x22c>
 8021f7c:	68e0      	ldr	r0, [r4, #12]
 8021f7e:	9b03      	ldr	r3, [sp, #12]
 8021f80:	4298      	cmp	r0, r3
 8021f82:	bfb8      	it	lt
 8021f84:	4618      	movlt	r0, r3
 8021f86:	e7a6      	b.n	8021ed6 <_printf_i+0x15e>
 8021f88:	2301      	movs	r3, #1
 8021f8a:	4632      	mov	r2, r6
 8021f8c:	4649      	mov	r1, r9
 8021f8e:	4640      	mov	r0, r8
 8021f90:	47d0      	blx	sl
 8021f92:	3001      	adds	r0, #1
 8021f94:	d09d      	beq.n	8021ed2 <_printf_i+0x15a>
 8021f96:	3501      	adds	r5, #1
 8021f98:	68e3      	ldr	r3, [r4, #12]
 8021f9a:	9903      	ldr	r1, [sp, #12]
 8021f9c:	1a5b      	subs	r3, r3, r1
 8021f9e:	42ab      	cmp	r3, r5
 8021fa0:	dcf2      	bgt.n	8021f88 <_printf_i+0x210>
 8021fa2:	e7eb      	b.n	8021f7c <_printf_i+0x204>
 8021fa4:	2500      	movs	r5, #0
 8021fa6:	f104 0619 	add.w	r6, r4, #25
 8021faa:	e7f5      	b.n	8021f98 <_printf_i+0x220>
 8021fac:	08027332 	.word	0x08027332
 8021fb0:	08027343 	.word	0x08027343

08021fb4 <__sflush_r>:
 8021fb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8021fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021fbc:	0716      	lsls	r6, r2, #28
 8021fbe:	4605      	mov	r5, r0
 8021fc0:	460c      	mov	r4, r1
 8021fc2:	d454      	bmi.n	802206e <__sflush_r+0xba>
 8021fc4:	684b      	ldr	r3, [r1, #4]
 8021fc6:	2b00      	cmp	r3, #0
 8021fc8:	dc02      	bgt.n	8021fd0 <__sflush_r+0x1c>
 8021fca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8021fcc:	2b00      	cmp	r3, #0
 8021fce:	dd48      	ble.n	8022062 <__sflush_r+0xae>
 8021fd0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8021fd2:	2e00      	cmp	r6, #0
 8021fd4:	d045      	beq.n	8022062 <__sflush_r+0xae>
 8021fd6:	2300      	movs	r3, #0
 8021fd8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8021fdc:	682f      	ldr	r7, [r5, #0]
 8021fde:	6a21      	ldr	r1, [r4, #32]
 8021fe0:	602b      	str	r3, [r5, #0]
 8021fe2:	d030      	beq.n	8022046 <__sflush_r+0x92>
 8021fe4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8021fe6:	89a3      	ldrh	r3, [r4, #12]
 8021fe8:	0759      	lsls	r1, r3, #29
 8021fea:	d505      	bpl.n	8021ff8 <__sflush_r+0x44>
 8021fec:	6863      	ldr	r3, [r4, #4]
 8021fee:	1ad2      	subs	r2, r2, r3
 8021ff0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8021ff2:	b10b      	cbz	r3, 8021ff8 <__sflush_r+0x44>
 8021ff4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8021ff6:	1ad2      	subs	r2, r2, r3
 8021ff8:	2300      	movs	r3, #0
 8021ffa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8021ffc:	6a21      	ldr	r1, [r4, #32]
 8021ffe:	4628      	mov	r0, r5
 8022000:	47b0      	blx	r6
 8022002:	1c43      	adds	r3, r0, #1
 8022004:	89a3      	ldrh	r3, [r4, #12]
 8022006:	d106      	bne.n	8022016 <__sflush_r+0x62>
 8022008:	6829      	ldr	r1, [r5, #0]
 802200a:	291d      	cmp	r1, #29
 802200c:	d82b      	bhi.n	8022066 <__sflush_r+0xb2>
 802200e:	4a2a      	ldr	r2, [pc, #168]	@ (80220b8 <__sflush_r+0x104>)
 8022010:	40ca      	lsrs	r2, r1
 8022012:	07d6      	lsls	r6, r2, #31
 8022014:	d527      	bpl.n	8022066 <__sflush_r+0xb2>
 8022016:	2200      	movs	r2, #0
 8022018:	6062      	str	r2, [r4, #4]
 802201a:	04d9      	lsls	r1, r3, #19
 802201c:	6922      	ldr	r2, [r4, #16]
 802201e:	6022      	str	r2, [r4, #0]
 8022020:	d504      	bpl.n	802202c <__sflush_r+0x78>
 8022022:	1c42      	adds	r2, r0, #1
 8022024:	d101      	bne.n	802202a <__sflush_r+0x76>
 8022026:	682b      	ldr	r3, [r5, #0]
 8022028:	b903      	cbnz	r3, 802202c <__sflush_r+0x78>
 802202a:	6560      	str	r0, [r4, #84]	@ 0x54
 802202c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802202e:	602f      	str	r7, [r5, #0]
 8022030:	b1b9      	cbz	r1, 8022062 <__sflush_r+0xae>
 8022032:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8022036:	4299      	cmp	r1, r3
 8022038:	d002      	beq.n	8022040 <__sflush_r+0x8c>
 802203a:	4628      	mov	r0, r5
 802203c:	f7ff fa94 	bl	8021568 <_free_r>
 8022040:	2300      	movs	r3, #0
 8022042:	6363      	str	r3, [r4, #52]	@ 0x34
 8022044:	e00d      	b.n	8022062 <__sflush_r+0xae>
 8022046:	2301      	movs	r3, #1
 8022048:	4628      	mov	r0, r5
 802204a:	47b0      	blx	r6
 802204c:	4602      	mov	r2, r0
 802204e:	1c50      	adds	r0, r2, #1
 8022050:	d1c9      	bne.n	8021fe6 <__sflush_r+0x32>
 8022052:	682b      	ldr	r3, [r5, #0]
 8022054:	2b00      	cmp	r3, #0
 8022056:	d0c6      	beq.n	8021fe6 <__sflush_r+0x32>
 8022058:	2b1d      	cmp	r3, #29
 802205a:	d001      	beq.n	8022060 <__sflush_r+0xac>
 802205c:	2b16      	cmp	r3, #22
 802205e:	d11e      	bne.n	802209e <__sflush_r+0xea>
 8022060:	602f      	str	r7, [r5, #0]
 8022062:	2000      	movs	r0, #0
 8022064:	e022      	b.n	80220ac <__sflush_r+0xf8>
 8022066:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802206a:	b21b      	sxth	r3, r3
 802206c:	e01b      	b.n	80220a6 <__sflush_r+0xf2>
 802206e:	690f      	ldr	r7, [r1, #16]
 8022070:	2f00      	cmp	r7, #0
 8022072:	d0f6      	beq.n	8022062 <__sflush_r+0xae>
 8022074:	0793      	lsls	r3, r2, #30
 8022076:	680e      	ldr	r6, [r1, #0]
 8022078:	bf08      	it	eq
 802207a:	694b      	ldreq	r3, [r1, #20]
 802207c:	600f      	str	r7, [r1, #0]
 802207e:	bf18      	it	ne
 8022080:	2300      	movne	r3, #0
 8022082:	eba6 0807 	sub.w	r8, r6, r7
 8022086:	608b      	str	r3, [r1, #8]
 8022088:	f1b8 0f00 	cmp.w	r8, #0
 802208c:	dde9      	ble.n	8022062 <__sflush_r+0xae>
 802208e:	6a21      	ldr	r1, [r4, #32]
 8022090:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8022092:	4643      	mov	r3, r8
 8022094:	463a      	mov	r2, r7
 8022096:	4628      	mov	r0, r5
 8022098:	47b0      	blx	r6
 802209a:	2800      	cmp	r0, #0
 802209c:	dc08      	bgt.n	80220b0 <__sflush_r+0xfc>
 802209e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80220a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80220a6:	81a3      	strh	r3, [r4, #12]
 80220a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80220ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80220b0:	4407      	add	r7, r0
 80220b2:	eba8 0800 	sub.w	r8, r8, r0
 80220b6:	e7e7      	b.n	8022088 <__sflush_r+0xd4>
 80220b8:	20400001 	.word	0x20400001

080220bc <_fflush_r>:
 80220bc:	b538      	push	{r3, r4, r5, lr}
 80220be:	690b      	ldr	r3, [r1, #16]
 80220c0:	4605      	mov	r5, r0
 80220c2:	460c      	mov	r4, r1
 80220c4:	b913      	cbnz	r3, 80220cc <_fflush_r+0x10>
 80220c6:	2500      	movs	r5, #0
 80220c8:	4628      	mov	r0, r5
 80220ca:	bd38      	pop	{r3, r4, r5, pc}
 80220cc:	b118      	cbz	r0, 80220d6 <_fflush_r+0x1a>
 80220ce:	6a03      	ldr	r3, [r0, #32]
 80220d0:	b90b      	cbnz	r3, 80220d6 <_fflush_r+0x1a>
 80220d2:	f7fe ffc1 	bl	8021058 <__sinit>
 80220d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80220da:	2b00      	cmp	r3, #0
 80220dc:	d0f3      	beq.n	80220c6 <_fflush_r+0xa>
 80220de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80220e0:	07d0      	lsls	r0, r2, #31
 80220e2:	d404      	bmi.n	80220ee <_fflush_r+0x32>
 80220e4:	0599      	lsls	r1, r3, #22
 80220e6:	d402      	bmi.n	80220ee <_fflush_r+0x32>
 80220e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80220ea:	f7ff fa0e 	bl	802150a <__retarget_lock_acquire_recursive>
 80220ee:	4628      	mov	r0, r5
 80220f0:	4621      	mov	r1, r4
 80220f2:	f7ff ff5f 	bl	8021fb4 <__sflush_r>
 80220f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80220f8:	07da      	lsls	r2, r3, #31
 80220fa:	4605      	mov	r5, r0
 80220fc:	d4e4      	bmi.n	80220c8 <_fflush_r+0xc>
 80220fe:	89a3      	ldrh	r3, [r4, #12]
 8022100:	059b      	lsls	r3, r3, #22
 8022102:	d4e1      	bmi.n	80220c8 <_fflush_r+0xc>
 8022104:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022106:	f7ff fa01 	bl	802150c <__retarget_lock_release_recursive>
 802210a:	e7dd      	b.n	80220c8 <_fflush_r+0xc>

0802210c <fiprintf>:
 802210c:	b40e      	push	{r1, r2, r3}
 802210e:	b503      	push	{r0, r1, lr}
 8022110:	4601      	mov	r1, r0
 8022112:	ab03      	add	r3, sp, #12
 8022114:	4805      	ldr	r0, [pc, #20]	@ (802212c <fiprintf+0x20>)
 8022116:	f853 2b04 	ldr.w	r2, [r3], #4
 802211a:	6800      	ldr	r0, [r0, #0]
 802211c:	9301      	str	r3, [sp, #4]
 802211e:	f7ff fca5 	bl	8021a6c <_vfiprintf_r>
 8022122:	b002      	add	sp, #8
 8022124:	f85d eb04 	ldr.w	lr, [sp], #4
 8022128:	b003      	add	sp, #12
 802212a:	4770      	bx	lr
 802212c:	20000080 	.word	0x20000080

08022130 <__swhatbuf_r>:
 8022130:	b570      	push	{r4, r5, r6, lr}
 8022132:	460c      	mov	r4, r1
 8022134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022138:	2900      	cmp	r1, #0
 802213a:	b096      	sub	sp, #88	@ 0x58
 802213c:	4615      	mov	r5, r2
 802213e:	461e      	mov	r6, r3
 8022140:	da0d      	bge.n	802215e <__swhatbuf_r+0x2e>
 8022142:	89a3      	ldrh	r3, [r4, #12]
 8022144:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8022148:	f04f 0100 	mov.w	r1, #0
 802214c:	bf14      	ite	ne
 802214e:	2340      	movne	r3, #64	@ 0x40
 8022150:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8022154:	2000      	movs	r0, #0
 8022156:	6031      	str	r1, [r6, #0]
 8022158:	602b      	str	r3, [r5, #0]
 802215a:	b016      	add	sp, #88	@ 0x58
 802215c:	bd70      	pop	{r4, r5, r6, pc}
 802215e:	466a      	mov	r2, sp
 8022160:	f000 f87c 	bl	802225c <_fstat_r>
 8022164:	2800      	cmp	r0, #0
 8022166:	dbec      	blt.n	8022142 <__swhatbuf_r+0x12>
 8022168:	9901      	ldr	r1, [sp, #4]
 802216a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802216e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8022172:	4259      	negs	r1, r3
 8022174:	4159      	adcs	r1, r3
 8022176:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802217a:	e7eb      	b.n	8022154 <__swhatbuf_r+0x24>

0802217c <__smakebuf_r>:
 802217c:	898b      	ldrh	r3, [r1, #12]
 802217e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022180:	079d      	lsls	r5, r3, #30
 8022182:	4606      	mov	r6, r0
 8022184:	460c      	mov	r4, r1
 8022186:	d507      	bpl.n	8022198 <__smakebuf_r+0x1c>
 8022188:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802218c:	6023      	str	r3, [r4, #0]
 802218e:	6123      	str	r3, [r4, #16]
 8022190:	2301      	movs	r3, #1
 8022192:	6163      	str	r3, [r4, #20]
 8022194:	b003      	add	sp, #12
 8022196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022198:	ab01      	add	r3, sp, #4
 802219a:	466a      	mov	r2, sp
 802219c:	f7ff ffc8 	bl	8022130 <__swhatbuf_r>
 80221a0:	9f00      	ldr	r7, [sp, #0]
 80221a2:	4605      	mov	r5, r0
 80221a4:	4639      	mov	r1, r7
 80221a6:	4630      	mov	r0, r6
 80221a8:	f7ff fa52 	bl	8021650 <_malloc_r>
 80221ac:	b948      	cbnz	r0, 80221c2 <__smakebuf_r+0x46>
 80221ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80221b2:	059a      	lsls	r2, r3, #22
 80221b4:	d4ee      	bmi.n	8022194 <__smakebuf_r+0x18>
 80221b6:	f023 0303 	bic.w	r3, r3, #3
 80221ba:	f043 0302 	orr.w	r3, r3, #2
 80221be:	81a3      	strh	r3, [r4, #12]
 80221c0:	e7e2      	b.n	8022188 <__smakebuf_r+0xc>
 80221c2:	89a3      	ldrh	r3, [r4, #12]
 80221c4:	6020      	str	r0, [r4, #0]
 80221c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80221ca:	81a3      	strh	r3, [r4, #12]
 80221cc:	9b01      	ldr	r3, [sp, #4]
 80221ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80221d2:	b15b      	cbz	r3, 80221ec <__smakebuf_r+0x70>
 80221d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80221d8:	4630      	mov	r0, r6
 80221da:	f000 f851 	bl	8022280 <_isatty_r>
 80221de:	b128      	cbz	r0, 80221ec <__smakebuf_r+0x70>
 80221e0:	89a3      	ldrh	r3, [r4, #12]
 80221e2:	f023 0303 	bic.w	r3, r3, #3
 80221e6:	f043 0301 	orr.w	r3, r3, #1
 80221ea:	81a3      	strh	r3, [r4, #12]
 80221ec:	89a3      	ldrh	r3, [r4, #12]
 80221ee:	431d      	orrs	r5, r3
 80221f0:	81a5      	strh	r5, [r4, #12]
 80221f2:	e7cf      	b.n	8022194 <__smakebuf_r+0x18>

080221f4 <_putc_r>:
 80221f4:	b570      	push	{r4, r5, r6, lr}
 80221f6:	460d      	mov	r5, r1
 80221f8:	4614      	mov	r4, r2
 80221fa:	4606      	mov	r6, r0
 80221fc:	b118      	cbz	r0, 8022206 <_putc_r+0x12>
 80221fe:	6a03      	ldr	r3, [r0, #32]
 8022200:	b90b      	cbnz	r3, 8022206 <_putc_r+0x12>
 8022202:	f7fe ff29 	bl	8021058 <__sinit>
 8022206:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022208:	07d8      	lsls	r0, r3, #31
 802220a:	d405      	bmi.n	8022218 <_putc_r+0x24>
 802220c:	89a3      	ldrh	r3, [r4, #12]
 802220e:	0599      	lsls	r1, r3, #22
 8022210:	d402      	bmi.n	8022218 <_putc_r+0x24>
 8022212:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022214:	f7ff f979 	bl	802150a <__retarget_lock_acquire_recursive>
 8022218:	68a3      	ldr	r3, [r4, #8]
 802221a:	3b01      	subs	r3, #1
 802221c:	2b00      	cmp	r3, #0
 802221e:	60a3      	str	r3, [r4, #8]
 8022220:	da05      	bge.n	802222e <_putc_r+0x3a>
 8022222:	69a2      	ldr	r2, [r4, #24]
 8022224:	4293      	cmp	r3, r2
 8022226:	db12      	blt.n	802224e <_putc_r+0x5a>
 8022228:	b2eb      	uxtb	r3, r5
 802222a:	2b0a      	cmp	r3, #10
 802222c:	d00f      	beq.n	802224e <_putc_r+0x5a>
 802222e:	6823      	ldr	r3, [r4, #0]
 8022230:	1c5a      	adds	r2, r3, #1
 8022232:	6022      	str	r2, [r4, #0]
 8022234:	701d      	strb	r5, [r3, #0]
 8022236:	b2ed      	uxtb	r5, r5
 8022238:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802223a:	07da      	lsls	r2, r3, #31
 802223c:	d405      	bmi.n	802224a <_putc_r+0x56>
 802223e:	89a3      	ldrh	r3, [r4, #12]
 8022240:	059b      	lsls	r3, r3, #22
 8022242:	d402      	bmi.n	802224a <_putc_r+0x56>
 8022244:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022246:	f7ff f961 	bl	802150c <__retarget_lock_release_recursive>
 802224a:	4628      	mov	r0, r5
 802224c:	bd70      	pop	{r4, r5, r6, pc}
 802224e:	4629      	mov	r1, r5
 8022250:	4622      	mov	r2, r4
 8022252:	4630      	mov	r0, r6
 8022254:	f7ff f827 	bl	80212a6 <__swbuf_r>
 8022258:	4605      	mov	r5, r0
 802225a:	e7ed      	b.n	8022238 <_putc_r+0x44>

0802225c <_fstat_r>:
 802225c:	b538      	push	{r3, r4, r5, lr}
 802225e:	4d07      	ldr	r5, [pc, #28]	@ (802227c <_fstat_r+0x20>)
 8022260:	2300      	movs	r3, #0
 8022262:	4604      	mov	r4, r0
 8022264:	4608      	mov	r0, r1
 8022266:	4611      	mov	r1, r2
 8022268:	602b      	str	r3, [r5, #0]
 802226a:	f7df fbfb 	bl	8001a64 <_fstat>
 802226e:	1c43      	adds	r3, r0, #1
 8022270:	d102      	bne.n	8022278 <_fstat_r+0x1c>
 8022272:	682b      	ldr	r3, [r5, #0]
 8022274:	b103      	cbz	r3, 8022278 <_fstat_r+0x1c>
 8022276:	6023      	str	r3, [r4, #0]
 8022278:	bd38      	pop	{r3, r4, r5, pc}
 802227a:	bf00      	nop
 802227c:	20028900 	.word	0x20028900

08022280 <_isatty_r>:
 8022280:	b538      	push	{r3, r4, r5, lr}
 8022282:	4d06      	ldr	r5, [pc, #24]	@ (802229c <_isatty_r+0x1c>)
 8022284:	2300      	movs	r3, #0
 8022286:	4604      	mov	r4, r0
 8022288:	4608      	mov	r0, r1
 802228a:	602b      	str	r3, [r5, #0]
 802228c:	f7df fbfa 	bl	8001a84 <_isatty>
 8022290:	1c43      	adds	r3, r0, #1
 8022292:	d102      	bne.n	802229a <_isatty_r+0x1a>
 8022294:	682b      	ldr	r3, [r5, #0]
 8022296:	b103      	cbz	r3, 802229a <_isatty_r+0x1a>
 8022298:	6023      	str	r3, [r4, #0]
 802229a:	bd38      	pop	{r3, r4, r5, pc}
 802229c:	20028900 	.word	0x20028900

080222a0 <_sbrk_r>:
 80222a0:	b538      	push	{r3, r4, r5, lr}
 80222a2:	4d06      	ldr	r5, [pc, #24]	@ (80222bc <_sbrk_r+0x1c>)
 80222a4:	2300      	movs	r3, #0
 80222a6:	4604      	mov	r4, r0
 80222a8:	4608      	mov	r0, r1
 80222aa:	602b      	str	r3, [r5, #0]
 80222ac:	f7df fc02 	bl	8001ab4 <_sbrk>
 80222b0:	1c43      	adds	r3, r0, #1
 80222b2:	d102      	bne.n	80222ba <_sbrk_r+0x1a>
 80222b4:	682b      	ldr	r3, [r5, #0]
 80222b6:	b103      	cbz	r3, 80222ba <_sbrk_r+0x1a>
 80222b8:	6023      	str	r3, [r4, #0]
 80222ba:	bd38      	pop	{r3, r4, r5, pc}
 80222bc:	20028900 	.word	0x20028900

080222c0 <abort>:
 80222c0:	b508      	push	{r3, lr}
 80222c2:	2006      	movs	r0, #6
 80222c4:	f000 f85a 	bl	802237c <raise>
 80222c8:	2001      	movs	r0, #1
 80222ca:	f7df fb97 	bl	80019fc <_exit>

080222ce <_realloc_r>:
 80222ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80222d2:	4607      	mov	r7, r0
 80222d4:	4614      	mov	r4, r2
 80222d6:	460d      	mov	r5, r1
 80222d8:	b921      	cbnz	r1, 80222e4 <_realloc_r+0x16>
 80222da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80222de:	4611      	mov	r1, r2
 80222e0:	f7ff b9b6 	b.w	8021650 <_malloc_r>
 80222e4:	b92a      	cbnz	r2, 80222f2 <_realloc_r+0x24>
 80222e6:	f7ff f93f 	bl	8021568 <_free_r>
 80222ea:	4625      	mov	r5, r4
 80222ec:	4628      	mov	r0, r5
 80222ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80222f2:	f000 f85f 	bl	80223b4 <_malloc_usable_size_r>
 80222f6:	4284      	cmp	r4, r0
 80222f8:	4606      	mov	r6, r0
 80222fa:	d802      	bhi.n	8022302 <_realloc_r+0x34>
 80222fc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8022300:	d8f4      	bhi.n	80222ec <_realloc_r+0x1e>
 8022302:	4621      	mov	r1, r4
 8022304:	4638      	mov	r0, r7
 8022306:	f7ff f9a3 	bl	8021650 <_malloc_r>
 802230a:	4680      	mov	r8, r0
 802230c:	b908      	cbnz	r0, 8022312 <_realloc_r+0x44>
 802230e:	4645      	mov	r5, r8
 8022310:	e7ec      	b.n	80222ec <_realloc_r+0x1e>
 8022312:	42b4      	cmp	r4, r6
 8022314:	4622      	mov	r2, r4
 8022316:	4629      	mov	r1, r5
 8022318:	bf28      	it	cs
 802231a:	4632      	movcs	r2, r6
 802231c:	f7ff f8f7 	bl	802150e <memcpy>
 8022320:	4629      	mov	r1, r5
 8022322:	4638      	mov	r0, r7
 8022324:	f7ff f920 	bl	8021568 <_free_r>
 8022328:	e7f1      	b.n	802230e <_realloc_r+0x40>

0802232a <_raise_r>:
 802232a:	291f      	cmp	r1, #31
 802232c:	b538      	push	{r3, r4, r5, lr}
 802232e:	4605      	mov	r5, r0
 8022330:	460c      	mov	r4, r1
 8022332:	d904      	bls.n	802233e <_raise_r+0x14>
 8022334:	2316      	movs	r3, #22
 8022336:	6003      	str	r3, [r0, #0]
 8022338:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802233c:	bd38      	pop	{r3, r4, r5, pc}
 802233e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8022340:	b112      	cbz	r2, 8022348 <_raise_r+0x1e>
 8022342:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8022346:	b94b      	cbnz	r3, 802235c <_raise_r+0x32>
 8022348:	4628      	mov	r0, r5
 802234a:	f000 f831 	bl	80223b0 <_getpid_r>
 802234e:	4622      	mov	r2, r4
 8022350:	4601      	mov	r1, r0
 8022352:	4628      	mov	r0, r5
 8022354:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022358:	f000 b818 	b.w	802238c <_kill_r>
 802235c:	2b01      	cmp	r3, #1
 802235e:	d00a      	beq.n	8022376 <_raise_r+0x4c>
 8022360:	1c59      	adds	r1, r3, #1
 8022362:	d103      	bne.n	802236c <_raise_r+0x42>
 8022364:	2316      	movs	r3, #22
 8022366:	6003      	str	r3, [r0, #0]
 8022368:	2001      	movs	r0, #1
 802236a:	e7e7      	b.n	802233c <_raise_r+0x12>
 802236c:	2100      	movs	r1, #0
 802236e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8022372:	4620      	mov	r0, r4
 8022374:	4798      	blx	r3
 8022376:	2000      	movs	r0, #0
 8022378:	e7e0      	b.n	802233c <_raise_r+0x12>
	...

0802237c <raise>:
 802237c:	4b02      	ldr	r3, [pc, #8]	@ (8022388 <raise+0xc>)
 802237e:	4601      	mov	r1, r0
 8022380:	6818      	ldr	r0, [r3, #0]
 8022382:	f7ff bfd2 	b.w	802232a <_raise_r>
 8022386:	bf00      	nop
 8022388:	20000080 	.word	0x20000080

0802238c <_kill_r>:
 802238c:	b538      	push	{r3, r4, r5, lr}
 802238e:	4d07      	ldr	r5, [pc, #28]	@ (80223ac <_kill_r+0x20>)
 8022390:	2300      	movs	r3, #0
 8022392:	4604      	mov	r4, r0
 8022394:	4608      	mov	r0, r1
 8022396:	4611      	mov	r1, r2
 8022398:	602b      	str	r3, [r5, #0]
 802239a:	f7df fb1d 	bl	80019d8 <_kill>
 802239e:	1c43      	adds	r3, r0, #1
 80223a0:	d102      	bne.n	80223a8 <_kill_r+0x1c>
 80223a2:	682b      	ldr	r3, [r5, #0]
 80223a4:	b103      	cbz	r3, 80223a8 <_kill_r+0x1c>
 80223a6:	6023      	str	r3, [r4, #0]
 80223a8:	bd38      	pop	{r3, r4, r5, pc}
 80223aa:	bf00      	nop
 80223ac:	20028900 	.word	0x20028900

080223b0 <_getpid_r>:
 80223b0:	f7df bb0a 	b.w	80019c8 <_getpid>

080223b4 <_malloc_usable_size_r>:
 80223b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80223b8:	1f18      	subs	r0, r3, #4
 80223ba:	2b00      	cmp	r3, #0
 80223bc:	bfbc      	itt	lt
 80223be:	580b      	ldrlt	r3, [r1, r0]
 80223c0:	18c0      	addlt	r0, r0, r3
 80223c2:	4770      	bx	lr

080223c4 <_init>:
 80223c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80223c6:	bf00      	nop
 80223c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80223ca:	bc08      	pop	{r3}
 80223cc:	469e      	mov	lr, r3
 80223ce:	4770      	bx	lr

080223d0 <_fini>:
 80223d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80223d2:	bf00      	nop
 80223d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80223d6:	bc08      	pop	{r3}
 80223d8:	469e      	mov	lr, r3
 80223da:	4770      	bx	lr
