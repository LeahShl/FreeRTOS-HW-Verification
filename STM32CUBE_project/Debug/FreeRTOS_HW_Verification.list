
FreeRTOS_HW_Verification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000215e0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000051c4  080217b0  080217b0  000227b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026974  08026974  00028210  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08026974  08026974  00027974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802697c  0802697c  00028210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802697c  0802697c  0002797c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08026980  08026980  00027980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d0  20000000  08026984  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000d0  08026a54  000280d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000170  08026af4  00028170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0002d780  20000210  08026b94  00028210  2**2
                  ALLOC
 12 ._user_heap_stack 00005000  2002d990  08026b94  00028990  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00028210  2**0
                  CONTENTS, READONLY
 14 .debug_info   00045f0c  00000000  00000000  00028240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000af87  00000000  00000000  0006e14c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000030b0  00000000  00000000  000790d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000262f  00000000  00000000  0007c188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003f73c  00000000  00000000  0007e7b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004ffc6  00000000  00000000  000bdef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00123990  00000000  00000000  0010deb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00231849  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000ce84  00000000  00000000  0023188c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000081  00000000  00000000  0023e710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000210 	.word	0x20000210
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08021798 	.word	0x08021798

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000214 	.word	0x20000214
 800020c:	08021798 	.word	0x08021798

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	463b      	mov	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ee:	4b21      	ldr	r3, [pc, #132]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005f0:	4a21      	ldr	r2, [pc, #132]	@ (8000678 <MX_ADC1_Init+0x9c>)
 80005f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000602:	4b1c      	ldr	r3, [pc, #112]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000608:	4b1a      	ldr	r3, [pc, #104]	@ (8000674 <MX_ADC1_Init+0x98>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800060e:	4b19      	ldr	r3, [pc, #100]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000610:	2200      	movs	r2, #0
 8000612:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000616:	4b17      	ldr	r3, [pc, #92]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000618:	2200      	movs	r2, #0
 800061a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800061c:	4b15      	ldr	r3, [pc, #84]	@ (8000674 <MX_ADC1_Init+0x98>)
 800061e:	4a17      	ldr	r2, [pc, #92]	@ (800067c <MX_ADC1_Init+0xa0>)
 8000620:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000622:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000628:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <MX_ADC1_Init+0x98>)
 800062a:	2201      	movs	r2, #1
 800062c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800062e:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000636:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000638:	2201      	movs	r2, #1
 800063a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800063c:	480d      	ldr	r0, [pc, #52]	@ (8000674 <MX_ADC1_Init+0x98>)
 800063e:	f001 fee1 	bl	8002404 <HAL_ADC_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000648:	f000 fdf0 	bl	800122c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800064c:	2300      	movs	r3, #0
 800064e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000650:	2301      	movs	r3, #1
 8000652:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	@ (8000674 <MX_ADC1_Init+0x98>)
 800065e:	f002 f881 	bl	8002764 <HAL_ADC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000668:	f000 fde0 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	2000022c 	.word	0x2000022c
 8000678:	40012000 	.word	0x40012000
 800067c:	0f000001 	.word	0x0f000001

08000680 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	@ 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a2c      	ldr	r2, [pc, #176]	@ (8000750 <HAL_ADC_MspInit+0xd0>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d152      	bne.n	8000748 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006a6:	4a2b      	ldr	r2, [pc, #172]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80006ae:	4b29      	ldr	r3, [pc, #164]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b26      	ldr	r3, [pc, #152]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a25      	ldr	r2, [pc, #148]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b23      	ldr	r3, [pc, #140]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006d2:	2301      	movs	r3, #1
 80006d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d6:	2303      	movs	r3, #3
 80006d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	481c      	ldr	r0, [pc, #112]	@ (8000758 <HAL_ADC_MspInit+0xd8>)
 80006e6:	f004 fced 	bl	80050c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80006ea:	4b1c      	ldr	r3, [pc, #112]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006ec:	4a1c      	ldr	r2, [pc, #112]	@ (8000760 <HAL_ADC_MspInit+0xe0>)
 80006ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006f0:	4b1a      	ldr	r3, [pc, #104]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006f6:	4b19      	ldr	r3, [pc, #100]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006fc:	4b17      	ldr	r3, [pc, #92]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000702:	4b16      	ldr	r3, [pc, #88]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000704:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000708:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800070a:	4b14      	ldr	r3, [pc, #80]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800070c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000710:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000712:	4b12      	ldr	r3, [pc, #72]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000714:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000718:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800071a:	4b10      	ldr	r3, [pc, #64]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800071c:	2200      	movs	r2, #0
 800071e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000720:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000722:	2200      	movs	r2, #0
 8000724:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000726:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000728:	2200      	movs	r2, #0
 800072a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800072c:	480b      	ldr	r0, [pc, #44]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800072e:	f002 fddb 	bl	80032e8 <HAL_DMA_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8000738:	f000 fd78 	bl	800122c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4a07      	ldr	r2, [pc, #28]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000740:	639a      	str	r2, [r3, #56]	@ 0x38
 8000742:	4a06      	ldr	r2, [pc, #24]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000748:	bf00      	nop
 800074a:	3728      	adds	r7, #40	@ 0x28
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40012000 	.word	0x40012000
 8000754:	40023800 	.word	0x40023800
 8000758:	40020000 	.word	0x40020000
 800075c:	20000274 	.word	0x20000274
 8000760:	40026470 	.word	0x40026470

08000764 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000768:	4b0d      	ldr	r3, [pc, #52]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800076a:	4a0e      	ldr	r2, [pc, #56]	@ (80007a4 <MX_CRC_Init+0x40>)
 800076c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800076e:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000770:	2200      	movs	r2, #0
 8000772:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000774:	4b0a      	ldr	r3, [pc, #40]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000776:	2200      	movs	r2, #0
 8000778:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800077c:	2200      	movs	r2, #0
 800077e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000780:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000788:	2201      	movs	r2, #1
 800078a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800078e:	f002 fba1 	bl	8002ed4 <HAL_CRC_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000798:	f000 fd48 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	200002d4 	.word	0x200002d4
 80007a4:	40023000 	.word	0x40023000

080007a8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a0a      	ldr	r2, [pc, #40]	@ (80007e0 <HAL_CRC_MspInit+0x38>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d10b      	bne.n	80007d2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80007ba:	4b0a      	ldr	r3, [pc, #40]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a09      	ldr	r2, [pc, #36]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80007d2:	bf00      	nop
 80007d4:	3714      	adds	r7, #20
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40023000 	.word	0x40023000
 80007e4:	40023800 	.word	0x40023800

080007e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ee:	4b3e      	ldr	r3, [pc, #248]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a3d      	ldr	r2, [pc, #244]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b3b      	ldr	r3, [pc, #236]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000806:	4b38      	ldr	r3, [pc, #224]	@ (80008e8 <MX_DMA_Init+0x100>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a37      	ldr	r2, [pc, #220]	@ (80008e8 <MX_DMA_Init+0x100>)
 800080c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b35      	ldr	r3, [pc, #212]	@ (80008e8 <MX_DMA_Init+0x100>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2105      	movs	r1, #5
 8000822:	200b      	movs	r0, #11
 8000824:	f002 fb2c 	bl	8002e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000828:	200b      	movs	r0, #11
 800082a:	f002 fb45 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2105      	movs	r1, #5
 8000832:	200c      	movs	r0, #12
 8000834:	f002 fb24 	bl	8002e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000838:	200c      	movs	r0, #12
 800083a:	f002 fb3d 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2105      	movs	r1, #5
 8000842:	200d      	movs	r0, #13
 8000844:	f002 fb1c 	bl	8002e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000848:	200d      	movs	r0, #13
 800084a:	f002 fb35 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2105      	movs	r1, #5
 8000852:	200e      	movs	r0, #14
 8000854:	f002 fb14 	bl	8002e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000858:	200e      	movs	r0, #14
 800085a:	f002 fb2d 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	2105      	movs	r1, #5
 8000862:	2010      	movs	r0, #16
 8000864:	f002 fb0c 	bl	8002e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000868:	2010      	movs	r0, #16
 800086a:	f002 fb25 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2105      	movs	r1, #5
 8000872:	2011      	movs	r0, #17
 8000874:	f002 fb04 	bl	8002e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000878:	2011      	movs	r0, #17
 800087a:	f002 fb1d 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2105      	movs	r1, #5
 8000882:	202f      	movs	r0, #47	@ 0x2f
 8000884:	f002 fafc 	bl	8002e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000888:	202f      	movs	r0, #47	@ 0x2f
 800088a:	f002 fb15 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2105      	movs	r1, #5
 8000892:	2038      	movs	r0, #56	@ 0x38
 8000894:	f002 faf4 	bl	8002e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000898:	2038      	movs	r0, #56	@ 0x38
 800089a:	f002 fb0d 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2105      	movs	r1, #5
 80008a2:	2039      	movs	r0, #57	@ 0x39
 80008a4:	f002 faec 	bl	8002e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80008a8:	2039      	movs	r0, #57	@ 0x39
 80008aa:	f002 fb05 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2105      	movs	r1, #5
 80008b2:	203a      	movs	r0, #58	@ 0x3a
 80008b4:	f002 fae4 	bl	8002e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80008b8:	203a      	movs	r0, #58	@ 0x3a
 80008ba:	f002 fafd 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2105      	movs	r1, #5
 80008c2:	203b      	movs	r0, #59	@ 0x3b
 80008c4:	f002 fadc 	bl	8002e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80008c8:	203b      	movs	r0, #59	@ 0x3b
 80008ca:	f002 faf5 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2105      	movs	r1, #5
 80008d2:	203c      	movs	r0, #60	@ 0x3c
 80008d4:	f002 fad4 	bl	8002e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80008d8:	203c      	movs	r0, #60	@ 0x3c
 80008da:	f002 faed 	bl	8002eb8 <HAL_NVIC_EnableIRQ>

}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800

080008ec <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	printf("stack overflow from task '%s'\n", pcTaskName);
 80008f6:	6839      	ldr	r1, [r7, #0]
 80008f8:	4803      	ldr	r0, [pc, #12]	@ (8000908 <vApplicationStackOverflowHook+0x1c>)
 80008fa:	f01f ff4d 	bl	8020798 <iprintf>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	0802188c 	.word	0x0802188c

0800090c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
	...

0800091c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  printf("Starting FreeRTOS...\n");
 8000920:	4849      	ldr	r0, [pc, #292]	@ (8000a48 <MX_FREERTOS_Init+0x12c>)
 8000922:	f01f ffa9 	bl	8020878 <puts>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of inMsgQueue */
  inMsgQueueHandle = osMessageQueueNew (16, sizeof(InMsg_t), &inMsgQueue_attributes);
 8000926:	4a49      	ldr	r2, [pc, #292]	@ (8000a4c <MX_FREERTOS_Init+0x130>)
 8000928:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800092c:	2010      	movs	r0, #16
 800092e:	f00c fd13 	bl	800d358 <osMessageQueueNew>
 8000932:	4603      	mov	r3, r0
 8000934:	4a46      	ldr	r2, [pc, #280]	@ (8000a50 <MX_FREERTOS_Init+0x134>)
 8000936:	6013      	str	r3, [r2, #0]

  /* creation of outMsgQueue */
  outMsgQueueHandle = osMessageQueueNew (16, sizeof(OutMsg_t), &outMsgQueue_attributes);
 8000938:	4a46      	ldr	r2, [pc, #280]	@ (8000a54 <MX_FREERTOS_Init+0x138>)
 800093a:	2110      	movs	r1, #16
 800093c:	2010      	movs	r0, #16
 800093e:	f00c fd0b 	bl	800d358 <osMessageQueueNew>
 8000942:	4603      	mov	r3, r0
 8000944:	4a44      	ldr	r2, [pc, #272]	@ (8000a58 <MX_FREERTOS_Init+0x13c>)
 8000946:	6013      	str	r3, [r2, #0]

  /* creation of uartQueue */
  uartQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &uartQueue_attributes);
 8000948:	4a44      	ldr	r2, [pc, #272]	@ (8000a5c <MX_FREERTOS_Init+0x140>)
 800094a:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800094e:	2008      	movs	r0, #8
 8000950:	f00c fd02 	bl	800d358 <osMessageQueueNew>
 8000954:	4603      	mov	r3, r0
 8000956:	4a42      	ldr	r2, [pc, #264]	@ (8000a60 <MX_FREERTOS_Init+0x144>)
 8000958:	6013      	str	r3, [r2, #0]

  /* creation of i2cQueue */
  i2cQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &i2cQueue_attributes);
 800095a:	4a42      	ldr	r2, [pc, #264]	@ (8000a64 <MX_FREERTOS_Init+0x148>)
 800095c:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000960:	2008      	movs	r0, #8
 8000962:	f00c fcf9 	bl	800d358 <osMessageQueueNew>
 8000966:	4603      	mov	r3, r0
 8000968:	4a3f      	ldr	r2, [pc, #252]	@ (8000a68 <MX_FREERTOS_Init+0x14c>)
 800096a:	6013      	str	r3, [r2, #0]

  /* creation of spiQueue */
  spiQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &spiQueue_attributes);
 800096c:	4a3f      	ldr	r2, [pc, #252]	@ (8000a6c <MX_FREERTOS_Init+0x150>)
 800096e:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000972:	2008      	movs	r0, #8
 8000974:	f00c fcf0 	bl	800d358 <osMessageQueueNew>
 8000978:	4603      	mov	r3, r0
 800097a:	4a3d      	ldr	r2, [pc, #244]	@ (8000a70 <MX_FREERTOS_Init+0x154>)
 800097c:	6013      	str	r3, [r2, #0]

  /* creation of adcQueue */
  adcQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &adcQueue_attributes);
 800097e:	4a3d      	ldr	r2, [pc, #244]	@ (8000a74 <MX_FREERTOS_Init+0x158>)
 8000980:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000984:	2008      	movs	r0, #8
 8000986:	f00c fce7 	bl	800d358 <osMessageQueueNew>
 800098a:	4603      	mov	r3, r0
 800098c:	4a3a      	ldr	r2, [pc, #232]	@ (8000a78 <MX_FREERTOS_Init+0x15c>)
 800098e:	6013      	str	r3, [r2, #0]

  /* creation of timQueue */
  timQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &timQueue_attributes);
 8000990:	4a3a      	ldr	r2, [pc, #232]	@ (8000a7c <MX_FREERTOS_Init+0x160>)
 8000992:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000996:	2008      	movs	r0, #8
 8000998:	f00c fcde 	bl	800d358 <osMessageQueueNew>
 800099c:	4603      	mov	r3, r0
 800099e:	4a38      	ldr	r2, [pc, #224]	@ (8000a80 <MX_FREERTOS_Init+0x164>)
 80009a0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80009a2:	4a38      	ldr	r2, [pc, #224]	@ (8000a84 <MX_FREERTOS_Init+0x168>)
 80009a4:	2100      	movs	r1, #0
 80009a6:	4838      	ldr	r0, [pc, #224]	@ (8000a88 <MX_FREERTOS_Init+0x16c>)
 80009a8:	f00c f922 	bl	800cbf0 <osThreadNew>
 80009ac:	4603      	mov	r3, r0
 80009ae:	4a37      	ldr	r2, [pc, #220]	@ (8000a8c <MX_FREERTOS_Init+0x170>)
 80009b0:	6013      	str	r3, [r2, #0]

  /* creation of UDPListenerTask */
  UDPListenerTaskHandle = osThreadNew(StartTaskUdpListener, NULL, &UDPListenerTask_attributes);
 80009b2:	4a37      	ldr	r2, [pc, #220]	@ (8000a90 <MX_FREERTOS_Init+0x174>)
 80009b4:	2100      	movs	r1, #0
 80009b6:	4837      	ldr	r0, [pc, #220]	@ (8000a94 <MX_FREERTOS_Init+0x178>)
 80009b8:	f00c f91a 	bl	800cbf0 <osThreadNew>
 80009bc:	4603      	mov	r3, r0
 80009be:	4a36      	ldr	r2, [pc, #216]	@ (8000a98 <MX_FREERTOS_Init+0x17c>)
 80009c0:	6013      	str	r3, [r2, #0]

  /* creation of DispatcherTask */
  DispatcherTaskHandle = osThreadNew(StartTaskDispatcher, NULL, &DispatcherTask_attributes);
 80009c2:	4a36      	ldr	r2, [pc, #216]	@ (8000a9c <MX_FREERTOS_Init+0x180>)
 80009c4:	2100      	movs	r1, #0
 80009c6:	4836      	ldr	r0, [pc, #216]	@ (8000aa0 <MX_FREERTOS_Init+0x184>)
 80009c8:	f00c f912 	bl	800cbf0 <osThreadNew>
 80009cc:	4603      	mov	r3, r0
 80009ce:	4a35      	ldr	r2, [pc, #212]	@ (8000aa4 <MX_FREERTOS_Init+0x188>)
 80009d0:	6013      	str	r3, [r2, #0]

  /* creation of uartTestTask */
  uartTestTaskHandle = osThreadNew(StartTaskUartTest, NULL, &uartTestTask_attributes);
 80009d2:	4a35      	ldr	r2, [pc, #212]	@ (8000aa8 <MX_FREERTOS_Init+0x18c>)
 80009d4:	2100      	movs	r1, #0
 80009d6:	4835      	ldr	r0, [pc, #212]	@ (8000aac <MX_FREERTOS_Init+0x190>)
 80009d8:	f00c f90a 	bl	800cbf0 <osThreadNew>
 80009dc:	4603      	mov	r3, r0
 80009de:	4a34      	ldr	r2, [pc, #208]	@ (8000ab0 <MX_FREERTOS_Init+0x194>)
 80009e0:	6013      	str	r3, [r2, #0]

  /* creation of i2cTestTask */
  i2cTestTaskHandle = osThreadNew(StartTaskI2cTest, NULL, &i2cTestTask_attributes);
 80009e2:	4a34      	ldr	r2, [pc, #208]	@ (8000ab4 <MX_FREERTOS_Init+0x198>)
 80009e4:	2100      	movs	r1, #0
 80009e6:	4834      	ldr	r0, [pc, #208]	@ (8000ab8 <MX_FREERTOS_Init+0x19c>)
 80009e8:	f00c f902 	bl	800cbf0 <osThreadNew>
 80009ec:	4603      	mov	r3, r0
 80009ee:	4a33      	ldr	r2, [pc, #204]	@ (8000abc <MX_FREERTOS_Init+0x1a0>)
 80009f0:	6013      	str	r3, [r2, #0]

  /* creation of spiTestTask */
  spiTestTaskHandle = osThreadNew(StartTaskSpiTest, NULL, &spiTestTask_attributes);
 80009f2:	4a33      	ldr	r2, [pc, #204]	@ (8000ac0 <MX_FREERTOS_Init+0x1a4>)
 80009f4:	2100      	movs	r1, #0
 80009f6:	4833      	ldr	r0, [pc, #204]	@ (8000ac4 <MX_FREERTOS_Init+0x1a8>)
 80009f8:	f00c f8fa 	bl	800cbf0 <osThreadNew>
 80009fc:	4603      	mov	r3, r0
 80009fe:	4a32      	ldr	r2, [pc, #200]	@ (8000ac8 <MX_FREERTOS_Init+0x1ac>)
 8000a00:	6013      	str	r3, [r2, #0]

  /* creation of adcTestTask */
  adcTestTaskHandle = osThreadNew(StartTaskAdcTest, NULL, &adcTestTask_attributes);
 8000a02:	4a32      	ldr	r2, [pc, #200]	@ (8000acc <MX_FREERTOS_Init+0x1b0>)
 8000a04:	2100      	movs	r1, #0
 8000a06:	4832      	ldr	r0, [pc, #200]	@ (8000ad0 <MX_FREERTOS_Init+0x1b4>)
 8000a08:	f00c f8f2 	bl	800cbf0 <osThreadNew>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	4a31      	ldr	r2, [pc, #196]	@ (8000ad4 <MX_FREERTOS_Init+0x1b8>)
 8000a10:	6013      	str	r3, [r2, #0]

  /* creation of timTestTask */
  timTestTaskHandle = osThreadNew(StartTaskTimTest, NULL, &timTestTask_attributes);
 8000a12:	4a31      	ldr	r2, [pc, #196]	@ (8000ad8 <MX_FREERTOS_Init+0x1bc>)
 8000a14:	2100      	movs	r1, #0
 8000a16:	4831      	ldr	r0, [pc, #196]	@ (8000adc <MX_FREERTOS_Init+0x1c0>)
 8000a18:	f00c f8ea 	bl	800cbf0 <osThreadNew>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	4a30      	ldr	r2, [pc, #192]	@ (8000ae0 <MX_FREERTOS_Init+0x1c4>)
 8000a20:	6013      	str	r3, [r2, #0]

  /* creation of UDPResponderTas */
  UDPResponderTasHandle = osThreadNew(StartResponseTask, NULL, &UDPResponderTas_attributes);
 8000a22:	4a30      	ldr	r2, [pc, #192]	@ (8000ae4 <MX_FREERTOS_Init+0x1c8>)
 8000a24:	2100      	movs	r1, #0
 8000a26:	4830      	ldr	r0, [pc, #192]	@ (8000ae8 <MX_FREERTOS_Init+0x1cc>)
 8000a28:	f00c f8e2 	bl	800cbf0 <osThreadNew>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	4a2f      	ldr	r2, [pc, #188]	@ (8000aec <MX_FREERTOS_Init+0x1d0>)
 8000a30:	6013      	str	r3, [r2, #0]

  /* creation of loggerTask */
  loggerTaskHandle = osThreadNew(StartLoggerTask, NULL, &loggerTask_attributes);
 8000a32:	4a2f      	ldr	r2, [pc, #188]	@ (8000af0 <MX_FREERTOS_Init+0x1d4>)
 8000a34:	2100      	movs	r1, #0
 8000a36:	482f      	ldr	r0, [pc, #188]	@ (8000af4 <MX_FREERTOS_Init+0x1d8>)
 8000a38:	f00c f8da 	bl	800cbf0 <osThreadNew>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	4a2e      	ldr	r2, [pc, #184]	@ (8000af8 <MX_FREERTOS_Init+0x1dc>)
 8000a40:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	080218ac 	.word	0x080218ac
 8000a4c:	0802662c 	.word	0x0802662c
 8000a50:	20000320 	.word	0x20000320
 8000a54:	08026644 	.word	0x08026644
 8000a58:	20000324 	.word	0x20000324
 8000a5c:	0802665c 	.word	0x0802665c
 8000a60:	20000328 	.word	0x20000328
 8000a64:	08026674 	.word	0x08026674
 8000a68:	2000032c 	.word	0x2000032c
 8000a6c:	0802668c 	.word	0x0802668c
 8000a70:	20000330 	.word	0x20000330
 8000a74:	080266a4 	.word	0x080266a4
 8000a78:	20000334 	.word	0x20000334
 8000a7c:	080266bc 	.word	0x080266bc
 8000a80:	20000338 	.word	0x20000338
 8000a84:	080264c4 	.word	0x080264c4
 8000a88:	08000afd 	.word	0x08000afd
 8000a8c:	200002f8 	.word	0x200002f8
 8000a90:	080264e8 	.word	0x080264e8
 8000a94:	08000b11 	.word	0x08000b11
 8000a98:	200002fc 	.word	0x200002fc
 8000a9c:	0802650c 	.word	0x0802650c
 8000aa0:	08000b31 	.word	0x08000b31
 8000aa4:	20000300 	.word	0x20000300
 8000aa8:	08026530 	.word	0x08026530
 8000aac:	08000b45 	.word	0x08000b45
 8000ab0:	20000304 	.word	0x20000304
 8000ab4:	08026554 	.word	0x08026554
 8000ab8:	08000b59 	.word	0x08000b59
 8000abc:	20000308 	.word	0x20000308
 8000ac0:	08026578 	.word	0x08026578
 8000ac4:	08000b6d 	.word	0x08000b6d
 8000ac8:	2000030c 	.word	0x2000030c
 8000acc:	0802659c 	.word	0x0802659c
 8000ad0:	08000b81 	.word	0x08000b81
 8000ad4:	20000310 	.word	0x20000310
 8000ad8:	080265c0 	.word	0x080265c0
 8000adc:	08000b95 	.word	0x08000b95
 8000ae0:	20000314 	.word	0x20000314
 8000ae4:	080265e4 	.word	0x080265e4
 8000ae8:	08000ba9 	.word	0x08000ba9
 8000aec:	20000318 	.word	0x20000318
 8000af0:	08026608 	.word	0x08026608
 8000af4:	08000bbd 	.word	0x08000bbd
 8000af8:	2000031c 	.word	0x2000031c

08000afc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000b04:	f00b f982 	bl	800be0c <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f00c f91f 	bl	800cd4c <osDelay>
 8000b0e:	e7fb      	b.n	8000b08 <StartDefaultTask+0xc>

08000b10 <StartTaskUdpListener>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskUdpListener */
void StartTaskUdpListener(void *argument)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskUdpListener */
  printf("Starting UDP Listener...\n");
 8000b18:	4804      	ldr	r0, [pc, #16]	@ (8000b2c <StartTaskUdpListener+0x1c>)
 8000b1a:	f01f fead 	bl	8020878 <puts>
  UDP_Listen(); // loops here
 8000b1e:	f01e fdad 	bl	801f67c <UDP_Listen>
  /* USER CODE END StartTaskUdpListener */
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	080218c4 	.word	0x080218c4

08000b30 <StartTaskDispatcher>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskDispatcher */
void StartTaskDispatcher(void *argument)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskDispatcher */
  TestDispatcher(); // loops here
 8000b38:	f01e fc98 	bl	801f46c <TestDispatcher>
  /* USER CODE END StartTaskDispatcher */
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <StartTaskUartTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskUartTest */
void StartTaskUartTest(void *argument)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskUartTest */
  UartTestTask(); // loops here
 8000b4c:	f01f fbbe 	bl	80202cc <UartTestTask>
  /* USER CODE END StartTaskUartTest */
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <StartTaskI2cTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskI2cTest */
void StartTaskI2cTest(void *argument)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskI2cTest */
	I2cTestTask(); // loops here
 8000b60:	f01e fef8 	bl	801f954 <I2cTestTask>
  /* USER CODE END StartTaskI2cTest */
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <StartTaskSpiTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSpiTest */
void StartTaskSpiTest(void *argument)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSpiTest */
  SpiTestTask(); // loops here
 8000b74:	f01f f8c4 	bl	801fd00 <SpiTestTask>
  /* USER CODE END StartTaskSpiTest */
}
 8000b78:	bf00      	nop
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <StartTaskAdcTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskAdcTest */
void StartTaskAdcTest(void *argument)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskAdcTest */
  AdcTestTask(); // loops here
 8000b88:	f01e fb84 	bl	801f294 <AdcTestTask>
  /* USER CODE END StartTaskAdcTest */
}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <StartTaskTimTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskTimTest */
void StartTaskTimTest(void *argument)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskTimTest */
  TimTestTask(); // loops here
 8000b9c:	f01f fa72 	bl	8020084 <TimTestTask>
  /* USER CODE END StartTaskTimTest */
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <StartResponseTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartResponseTask */
void StartResponseTask(void *argument)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartResponseTask */
  UDP_Response(); // Loops here
 8000bb0:	f01e fe66 	bl	801f880 <UDP_Response>
  /* USER CODE END StartResponseTask */
}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <StartLoggerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLoggerTask */
void StartLoggerTask(void *argument)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	printf("--------------------------------------\n");

	stats_display();
	osDelay(30000);
	*/
	  osDelay(1);
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	f00c f8c1 	bl	800cd4c <osDelay>
 8000bca:	e7fb      	b.n	8000bc4 <StartLoggerTask+0x8>

08000bcc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b087      	sub	sp, #28
 8000bd0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bd2:	4b27      	ldr	r3, [pc, #156]	@ (8000c70 <MX_GPIO_Init+0xa4>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	4a26      	ldr	r2, [pc, #152]	@ (8000c70 <MX_GPIO_Init+0xa4>)
 8000bd8:	f043 0310 	orr.w	r3, r3, #16
 8000bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bde:	4b24      	ldr	r3, [pc, #144]	@ (8000c70 <MX_GPIO_Init+0xa4>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	f003 0310 	and.w	r3, r3, #16
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bea:	4b21      	ldr	r3, [pc, #132]	@ (8000c70 <MX_GPIO_Init+0xa4>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	4a20      	ldr	r2, [pc, #128]	@ (8000c70 <MX_GPIO_Init+0xa4>)
 8000bf0:	f043 0304 	orr.w	r3, r3, #4
 8000bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c70 <MX_GPIO_Init+0xa4>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	f003 0304 	and.w	r3, r3, #4
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	4b1b      	ldr	r3, [pc, #108]	@ (8000c70 <MX_GPIO_Init+0xa4>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	4a1a      	ldr	r2, [pc, #104]	@ (8000c70 <MX_GPIO_Init+0xa4>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0e:	4b18      	ldr	r3, [pc, #96]	@ (8000c70 <MX_GPIO_Init+0xa4>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1a:	4b15      	ldr	r3, [pc, #84]	@ (8000c70 <MX_GPIO_Init+0xa4>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	4a14      	ldr	r2, [pc, #80]	@ (8000c70 <MX_GPIO_Init+0xa4>)
 8000c20:	f043 0302 	orr.w	r3, r3, #2
 8000c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c26:	4b12      	ldr	r3, [pc, #72]	@ (8000c70 <MX_GPIO_Init+0xa4>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c32:	4b0f      	ldr	r3, [pc, #60]	@ (8000c70 <MX_GPIO_Init+0xa4>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	4a0e      	ldr	r2, [pc, #56]	@ (8000c70 <MX_GPIO_Init+0xa4>)
 8000c38:	f043 0308 	orr.w	r3, r3, #8
 8000c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c70 <MX_GPIO_Init+0xa4>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	f003 0308 	and.w	r3, r3, #8
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c4a:	4b09      	ldr	r3, [pc, #36]	@ (8000c70 <MX_GPIO_Init+0xa4>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	4a08      	ldr	r2, [pc, #32]	@ (8000c70 <MX_GPIO_Init+0xa4>)
 8000c50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c56:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <MX_GPIO_Init+0xa4>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]

}
 8000c62:	bf00      	nop
 8000c64:	371c      	adds	r7, #28
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	40023800 	.word	0x40023800

08000c74 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c78:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000c7a:	4a1c      	ldr	r2, [pc, #112]	@ (8000cec <MX_I2C1_Init+0x78>)
 8000c7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000c80:	4a1b      	ldr	r2, [pc, #108]	@ (8000cf0 <MX_I2C1_Init+0x7c>)
 8000c82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c84:	4b18      	ldr	r3, [pc, #96]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c8a:	4b17      	ldr	r3, [pc, #92]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c90:	4b15      	ldr	r3, [pc, #84]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c96:	4b14      	ldr	r3, [pc, #80]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ca2:	4b11      	ldr	r3, [pc, #68]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cae:	480e      	ldr	r0, [pc, #56]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000cb0:	f004 fbb4 	bl	800541c <HAL_I2C_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cba:	f000 fab7 	bl	800122c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4809      	ldr	r0, [pc, #36]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000cc2:	f006 fd57 	bl	8007774 <HAL_I2CEx_ConfigAnalogFilter>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ccc:	f000 faae 	bl	800122c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4805      	ldr	r0, [pc, #20]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000cd4:	f006 fd99 	bl	800780a <HAL_I2CEx_ConfigDigitalFilter>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000cde:	f000 faa5 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	2000033c 	.word	0x2000033c
 8000cec:	40005400 	.word	0x40005400
 8000cf0:	20404768 	.word	0x20404768

08000cf4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d68 <MX_I2C2_Init+0x74>)
 8000cfa:	4a1c      	ldr	r2, [pc, #112]	@ (8000d6c <MX_I2C2_Init+0x78>)
 8000cfc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8000cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8000d68 <MX_I2C2_Init+0x74>)
 8000d00:	4a1b      	ldr	r2, [pc, #108]	@ (8000d70 <MX_I2C2_Init+0x7c>)
 8000d02:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 20;
 8000d04:	4b18      	ldr	r3, [pc, #96]	@ (8000d68 <MX_I2C2_Init+0x74>)
 8000d06:	2214      	movs	r2, #20
 8000d08:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d0a:	4b17      	ldr	r3, [pc, #92]	@ (8000d68 <MX_I2C2_Init+0x74>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d10:	4b15      	ldr	r3, [pc, #84]	@ (8000d68 <MX_I2C2_Init+0x74>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d16:	4b14      	ldr	r3, [pc, #80]	@ (8000d68 <MX_I2C2_Init+0x74>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d1c:	4b12      	ldr	r3, [pc, #72]	@ (8000d68 <MX_I2C2_Init+0x74>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d22:	4b11      	ldr	r3, [pc, #68]	@ (8000d68 <MX_I2C2_Init+0x74>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d28:	4b0f      	ldr	r3, [pc, #60]	@ (8000d68 <MX_I2C2_Init+0x74>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d2e:	480e      	ldr	r0, [pc, #56]	@ (8000d68 <MX_I2C2_Init+0x74>)
 8000d30:	f004 fb74 	bl	800541c <HAL_I2C_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d3a:	f000 fa77 	bl	800122c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4809      	ldr	r0, [pc, #36]	@ (8000d68 <MX_I2C2_Init+0x74>)
 8000d42:	f006 fd17 	bl	8007774 <HAL_I2CEx_ConfigAnalogFilter>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000d4c:	f000 fa6e 	bl	800122c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d50:	2100      	movs	r1, #0
 8000d52:	4805      	ldr	r0, [pc, #20]	@ (8000d68 <MX_I2C2_Init+0x74>)
 8000d54:	f006 fd59 	bl	800780a <HAL_I2CEx_ConfigDigitalFilter>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000d5e:	f000 fa65 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000390 	.word	0x20000390
 8000d6c:	40005800 	.word	0x40005800
 8000d70:	20404768 	.word	0x20404768

08000d74 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b0ac      	sub	sp, #176	@ 0xb0
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d8c:	f107 0318 	add.w	r3, r7, #24
 8000d90:	2284      	movs	r2, #132	@ 0x84
 8000d92:	2100      	movs	r1, #0
 8000d94:	4618      	mov	r0, r3
 8000d96:	f01f fe5f 	bl	8020a58 <memset>
  if(i2cHandle->Instance==I2C1)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a57      	ldr	r2, [pc, #348]	@ (8000efc <HAL_I2C_MspInit+0x188>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	f040 80b9 	bne.w	8000f18 <HAL_I2C_MspInit+0x1a4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000da6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000daa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000dac:	2300      	movs	r3, #0
 8000dae:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000db0:	f107 0318 	add.w	r3, r7, #24
 8000db4:	4618      	mov	r0, r3
 8000db6:	f007 fa81 	bl	80082bc <HAL_RCCEx_PeriphCLKConfig>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000dc0:	f000 fa34 	bl	800122c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc4:	4b4e      	ldr	r3, [pc, #312]	@ (8000f00 <HAL_I2C_MspInit+0x18c>)
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc8:	4a4d      	ldr	r2, [pc, #308]	@ (8000f00 <HAL_I2C_MspInit+0x18c>)
 8000dca:	f043 0302 	orr.w	r3, r3, #2
 8000dce:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd0:	4b4b      	ldr	r3, [pc, #300]	@ (8000f00 <HAL_I2C_MspInit+0x18c>)
 8000dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd4:	f003 0302 	and.w	r3, r3, #2
 8000dd8:	617b      	str	r3, [r7, #20]
 8000dda:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ddc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000de0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000de4:	2312      	movs	r3, #18
 8000de6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dea:	2301      	movs	r3, #1
 8000dec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df0:	2303      	movs	r3, #3
 8000df2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000df6:	2304      	movs	r3, #4
 8000df8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e00:	4619      	mov	r1, r3
 8000e02:	4840      	ldr	r0, [pc, #256]	@ (8000f04 <HAL_I2C_MspInit+0x190>)
 8000e04:	f004 f95e 	bl	80050c4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e08:	4b3d      	ldr	r3, [pc, #244]	@ (8000f00 <HAL_I2C_MspInit+0x18c>)
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0c:	4a3c      	ldr	r2, [pc, #240]	@ (8000f00 <HAL_I2C_MspInit+0x18c>)
 8000e0e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e12:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e14:	4b3a      	ldr	r3, [pc, #232]	@ (8000f00 <HAL_I2C_MspInit+0x18c>)
 8000e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 8000e20:	4b39      	ldr	r3, [pc, #228]	@ (8000f08 <HAL_I2C_MspInit+0x194>)
 8000e22:	4a3a      	ldr	r2, [pc, #232]	@ (8000f0c <HAL_I2C_MspInit+0x198>)
 8000e24:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000e26:	4b38      	ldr	r3, [pc, #224]	@ (8000f08 <HAL_I2C_MspInit+0x194>)
 8000e28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e2c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e2e:	4b36      	ldr	r3, [pc, #216]	@ (8000f08 <HAL_I2C_MspInit+0x194>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e34:	4b34      	ldr	r3, [pc, #208]	@ (8000f08 <HAL_I2C_MspInit+0x194>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e3a:	4b33      	ldr	r3, [pc, #204]	@ (8000f08 <HAL_I2C_MspInit+0x194>)
 8000e3c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e40:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e42:	4b31      	ldr	r3, [pc, #196]	@ (8000f08 <HAL_I2C_MspInit+0x194>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e48:	4b2f      	ldr	r3, [pc, #188]	@ (8000f08 <HAL_I2C_MspInit+0x194>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000e4e:	4b2e      	ldr	r3, [pc, #184]	@ (8000f08 <HAL_I2C_MspInit+0x194>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e54:	4b2c      	ldr	r3, [pc, #176]	@ (8000f08 <HAL_I2C_MspInit+0x194>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e5a:	4b2b      	ldr	r3, [pc, #172]	@ (8000f08 <HAL_I2C_MspInit+0x194>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000e60:	4829      	ldr	r0, [pc, #164]	@ (8000f08 <HAL_I2C_MspInit+0x194>)
 8000e62:	f002 fa41 	bl	80032e8 <HAL_DMA_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 8000e6c:	f000 f9de 	bl	800122c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a25      	ldr	r2, [pc, #148]	@ (8000f08 <HAL_I2C_MspInit+0x194>)
 8000e74:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e76:	4a24      	ldr	r2, [pc, #144]	@ (8000f08 <HAL_I2C_MspInit+0x194>)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000e7c:	4b24      	ldr	r3, [pc, #144]	@ (8000f10 <HAL_I2C_MspInit+0x19c>)
 8000e7e:	4a25      	ldr	r2, [pc, #148]	@ (8000f14 <HAL_I2C_MspInit+0x1a0>)
 8000e80:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000e82:	4b23      	ldr	r3, [pc, #140]	@ (8000f10 <HAL_I2C_MspInit+0x19c>)
 8000e84:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e88:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e8a:	4b21      	ldr	r3, [pc, #132]	@ (8000f10 <HAL_I2C_MspInit+0x19c>)
 8000e8c:	2240      	movs	r2, #64	@ 0x40
 8000e8e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e90:	4b1f      	ldr	r3, [pc, #124]	@ (8000f10 <HAL_I2C_MspInit+0x19c>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e96:	4b1e      	ldr	r3, [pc, #120]	@ (8000f10 <HAL_I2C_MspInit+0x19c>)
 8000e98:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e9c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f10 <HAL_I2C_MspInit+0x19c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f10 <HAL_I2C_MspInit+0x19c>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000eaa:	4b19      	ldr	r3, [pc, #100]	@ (8000f10 <HAL_I2C_MspInit+0x19c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000eb0:	4b17      	ldr	r3, [pc, #92]	@ (8000f10 <HAL_I2C_MspInit+0x19c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000eb6:	4b16      	ldr	r3, [pc, #88]	@ (8000f10 <HAL_I2C_MspInit+0x19c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000ebc:	4814      	ldr	r0, [pc, #80]	@ (8000f10 <HAL_I2C_MspInit+0x19c>)
 8000ebe:	f002 fa13 	bl	80032e8 <HAL_DMA_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <HAL_I2C_MspInit+0x158>
    {
      Error_Handler();
 8000ec8:	f000 f9b0 	bl	800122c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a10      	ldr	r2, [pc, #64]	@ (8000f10 <HAL_I2C_MspInit+0x19c>)
 8000ed0:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ed2:	4a0f      	ldr	r2, [pc, #60]	@ (8000f10 <HAL_I2C_MspInit+0x19c>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2105      	movs	r1, #5
 8000edc:	201f      	movs	r0, #31
 8000ede:	f001 ffcf 	bl	8002e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000ee2:	201f      	movs	r0, #31
 8000ee4:	f001 ffe8 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2105      	movs	r1, #5
 8000eec:	2020      	movs	r0, #32
 8000eee:	f001 ffc7 	bl	8002e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000ef2:	2020      	movs	r0, #32
 8000ef4:	f001 ffe0 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000ef8:	e0be      	b.n	8001078 <HAL_I2C_MspInit+0x304>
 8000efa:	bf00      	nop
 8000efc:	40005400 	.word	0x40005400
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40020400 	.word	0x40020400
 8000f08:	200003e4 	.word	0x200003e4
 8000f0c:	40026088 	.word	0x40026088
 8000f10:	20000444 	.word	0x20000444
 8000f14:	400260a0 	.word	0x400260a0
  else if(i2cHandle->Instance==I2C2)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a58      	ldr	r2, [pc, #352]	@ (8001080 <HAL_I2C_MspInit+0x30c>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	f040 80aa 	bne.w	8001078 <HAL_I2C_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000f24:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f28:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f30:	f107 0318 	add.w	r3, r7, #24
 8000f34:	4618      	mov	r0, r3
 8000f36:	f007 f9c1 	bl	80082bc <HAL_RCCEx_PeriphCLKConfig>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <HAL_I2C_MspInit+0x1d0>
      Error_Handler();
 8000f40:	f000 f974 	bl	800122c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f44:	4b4f      	ldr	r3, [pc, #316]	@ (8001084 <HAL_I2C_MspInit+0x310>)
 8000f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f48:	4a4e      	ldr	r2, [pc, #312]	@ (8001084 <HAL_I2C_MspInit+0x310>)
 8000f4a:	f043 0302 	orr.w	r3, r3, #2
 8000f4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f50:	4b4c      	ldr	r3, [pc, #304]	@ (8001084 <HAL_I2C_MspInit+0x310>)
 8000f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f54:	f003 0302 	and.w	r3, r3, #2
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f5c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000f60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f64:	2312      	movs	r3, #18
 8000f66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f70:	2303      	movs	r3, #3
 8000f72:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f76:	2304      	movs	r3, #4
 8000f78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f80:	4619      	mov	r1, r3
 8000f82:	4841      	ldr	r0, [pc, #260]	@ (8001088 <HAL_I2C_MspInit+0x314>)
 8000f84:	f004 f89e 	bl	80050c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f88:	4b3e      	ldr	r3, [pc, #248]	@ (8001084 <HAL_I2C_MspInit+0x310>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8c:	4a3d      	ldr	r2, [pc, #244]	@ (8001084 <HAL_I2C_MspInit+0x310>)
 8000f8e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f92:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f94:	4b3b      	ldr	r3, [pc, #236]	@ (8001084 <HAL_I2C_MspInit+0x310>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 8000fa0:	4b3a      	ldr	r3, [pc, #232]	@ (800108c <HAL_I2C_MspInit+0x318>)
 8000fa2:	4a3b      	ldr	r2, [pc, #236]	@ (8001090 <HAL_I2C_MspInit+0x31c>)
 8000fa4:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8000fa6:	4b39      	ldr	r3, [pc, #228]	@ (800108c <HAL_I2C_MspInit+0x318>)
 8000fa8:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000fac:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fae:	4b37      	ldr	r3, [pc, #220]	@ (800108c <HAL_I2C_MspInit+0x318>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fb4:	4b35      	ldr	r3, [pc, #212]	@ (800108c <HAL_I2C_MspInit+0x318>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fba:	4b34      	ldr	r3, [pc, #208]	@ (800108c <HAL_I2C_MspInit+0x318>)
 8000fbc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fc0:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fc2:	4b32      	ldr	r3, [pc, #200]	@ (800108c <HAL_I2C_MspInit+0x318>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fc8:	4b30      	ldr	r3, [pc, #192]	@ (800108c <HAL_I2C_MspInit+0x318>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8000fce:	4b2f      	ldr	r3, [pc, #188]	@ (800108c <HAL_I2C_MspInit+0x318>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fd4:	4b2d      	ldr	r3, [pc, #180]	@ (800108c <HAL_I2C_MspInit+0x318>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fda:	4b2c      	ldr	r3, [pc, #176]	@ (800108c <HAL_I2C_MspInit+0x318>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8000fe0:	482a      	ldr	r0, [pc, #168]	@ (800108c <HAL_I2C_MspInit+0x318>)
 8000fe2:	f002 f981 	bl	80032e8 <HAL_DMA_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <HAL_I2C_MspInit+0x27c>
      Error_Handler();
 8000fec:	f000 f91e 	bl	800122c <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a26      	ldr	r2, [pc, #152]	@ (800108c <HAL_I2C_MspInit+0x318>)
 8000ff4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ff6:	4a25      	ldr	r2, [pc, #148]	@ (800108c <HAL_I2C_MspInit+0x318>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8000ffc:	4b25      	ldr	r3, [pc, #148]	@ (8001094 <HAL_I2C_MspInit+0x320>)
 8000ffe:	4a26      	ldr	r2, [pc, #152]	@ (8001098 <HAL_I2C_MspInit+0x324>)
 8001000:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8001002:	4b24      	ldr	r3, [pc, #144]	@ (8001094 <HAL_I2C_MspInit+0x320>)
 8001004:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001008:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800100a:	4b22      	ldr	r3, [pc, #136]	@ (8001094 <HAL_I2C_MspInit+0x320>)
 800100c:	2240      	movs	r2, #64	@ 0x40
 800100e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001010:	4b20      	ldr	r3, [pc, #128]	@ (8001094 <HAL_I2C_MspInit+0x320>)
 8001012:	2200      	movs	r2, #0
 8001014:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001016:	4b1f      	ldr	r3, [pc, #124]	@ (8001094 <HAL_I2C_MspInit+0x320>)
 8001018:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800101c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800101e:	4b1d      	ldr	r3, [pc, #116]	@ (8001094 <HAL_I2C_MspInit+0x320>)
 8001020:	2200      	movs	r2, #0
 8001022:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001024:	4b1b      	ldr	r3, [pc, #108]	@ (8001094 <HAL_I2C_MspInit+0x320>)
 8001026:	2200      	movs	r2, #0
 8001028:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800102a:	4b1a      	ldr	r3, [pc, #104]	@ (8001094 <HAL_I2C_MspInit+0x320>)
 800102c:	2200      	movs	r2, #0
 800102e:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001030:	4b18      	ldr	r3, [pc, #96]	@ (8001094 <HAL_I2C_MspInit+0x320>)
 8001032:	2200      	movs	r2, #0
 8001034:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001036:	4b17      	ldr	r3, [pc, #92]	@ (8001094 <HAL_I2C_MspInit+0x320>)
 8001038:	2200      	movs	r2, #0
 800103a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800103c:	4815      	ldr	r0, [pc, #84]	@ (8001094 <HAL_I2C_MspInit+0x320>)
 800103e:	f002 f953 	bl	80032e8 <HAL_DMA_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <HAL_I2C_MspInit+0x2d8>
      Error_Handler();
 8001048:	f000 f8f0 	bl	800122c <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a11      	ldr	r2, [pc, #68]	@ (8001094 <HAL_I2C_MspInit+0x320>)
 8001050:	639a      	str	r2, [r3, #56]	@ 0x38
 8001052:	4a10      	ldr	r2, [pc, #64]	@ (8001094 <HAL_I2C_MspInit+0x320>)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001058:	2200      	movs	r2, #0
 800105a:	2105      	movs	r1, #5
 800105c:	2021      	movs	r0, #33	@ 0x21
 800105e:	f001 ff0f 	bl	8002e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001062:	2021      	movs	r0, #33	@ 0x21
 8001064:	f001 ff28 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8001068:	2200      	movs	r2, #0
 800106a:	2105      	movs	r1, #5
 800106c:	2022      	movs	r0, #34	@ 0x22
 800106e:	f001 ff07 	bl	8002e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001072:	2022      	movs	r0, #34	@ 0x22
 8001074:	f001 ff20 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
}
 8001078:	bf00      	nop
 800107a:	37b0      	adds	r7, #176	@ 0xb0
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40005800 	.word	0x40005800
 8001084:	40023800 	.word	0x40023800
 8001088:	40020400 	.word	0x40020400
 800108c:	200004a4 	.word	0x200004a4
 8001090:	40026058 	.word	0x40026058
 8001094:	20000504 	.word	0x20000504
 8001098:	400260b8 	.word	0x400260b8

0800109c <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
	char *cr = "\r";
 80010a8:	4b0b      	ldr	r3, [pc, #44]	@ (80010d8 <_write+0x3c>)
 80010aa:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) ptr, len, 0xFFFF);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010b4:	68b9      	ldr	r1, [r7, #8]
 80010b6:	4809      	ldr	r0, [pc, #36]	@ (80010dc <_write+0x40>)
 80010b8:	f009 fb54 	bl	800a764 <HAL_UART_Transmit>
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) cr, 1, 0xFFFF);
 80010bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010c0:	2201      	movs	r2, #1
 80010c2:	6979      	ldr	r1, [r7, #20]
 80010c4:	4805      	ldr	r0, [pc, #20]	@ (80010dc <_write+0x40>)
 80010c6:	f009 fb4d 	bl	800a764 <HAL_UART_Transmit>
	return len + 1;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3301      	adds	r3, #1
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3718      	adds	r7, #24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	080218e0 	.word	0x080218e0
 80010dc:	20000a04 	.word	0x20000a04

080010e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e4:	f001 f93d 	bl	8002362 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e8:	f000 f822 	bl	8001130 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ec:	f7ff fd6e 	bl	8000bcc <MX_GPIO_Init>
  MX_DMA_Init();
 80010f0:	f7ff fb7a 	bl	80007e8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80010f4:	f000 fe4c 	bl	8001d90 <MX_USART3_UART_Init>
  MX_CRC_Init();
 80010f8:	f7ff fb34 	bl	8000764 <MX_CRC_Init>
  MX_UART4_Init();
 80010fc:	f000 fde8 	bl	8001cd0 <MX_UART4_Init>
  MX_UART5_Init();
 8001100:	f000 fe16 	bl	8001d30 <MX_UART5_Init>
  MX_I2C1_Init();
 8001104:	f7ff fdb6 	bl	8000c74 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001108:	f7ff fdf4 	bl	8000cf4 <MX_I2C2_Init>
  MX_SPI1_Init();
 800110c:	f000 f894 	bl	8001238 <MX_SPI1_Init>
  MX_SPI4_Init();
 8001110:	f000 f8d0 	bl	80012b4 <MX_SPI4_Init>
  MX_ADC1_Init();
 8001114:	f7ff fa62 	bl	80005dc <MX_ADC1_Init>
  MX_TIM6_Init();
 8001118:	f000 fd38 	bl	8001b8c <MX_TIM6_Init>
  MX_TIM2_Init();
 800111c:	f000 fce8 	bl	8001af0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001120:	f00b fcd4 	bl	800cacc <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001124:	f7ff fbfa 	bl	800091c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001128:	f00b fd04 	bl	800cb34 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <main+0x4c>

08001130 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b094      	sub	sp, #80	@ 0x50
 8001134:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001136:	f107 0320 	add.w	r3, r7, #32
 800113a:	2230      	movs	r2, #48	@ 0x30
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f01f fc8a 	bl	8020a58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001154:	4b2a      	ldr	r3, [pc, #168]	@ (8001200 <SystemClock_Config+0xd0>)
 8001156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001158:	4a29      	ldr	r2, [pc, #164]	@ (8001200 <SystemClock_Config+0xd0>)
 800115a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800115e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001160:	4b27      	ldr	r3, [pc, #156]	@ (8001200 <SystemClock_Config+0xd0>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001164:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800116c:	4b25      	ldr	r3, [pc, #148]	@ (8001204 <SystemClock_Config+0xd4>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a24      	ldr	r2, [pc, #144]	@ (8001204 <SystemClock_Config+0xd4>)
 8001172:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	4b22      	ldr	r3, [pc, #136]	@ (8001204 <SystemClock_Config+0xd4>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001184:	2302      	movs	r3, #2
 8001186:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001188:	2301      	movs	r3, #1
 800118a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800118c:	2310      	movs	r3, #16
 800118e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001190:	2302      	movs	r3, #2
 8001192:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001194:	2300      	movs	r3, #0
 8001196:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001198:	2308      	movs	r3, #8
 800119a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800119c:	23d8      	movs	r3, #216	@ 0xd8
 800119e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011a0:	2302      	movs	r3, #2
 80011a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011a4:	2302      	movs	r3, #2
 80011a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a8:	f107 0320 	add.w	r3, r7, #32
 80011ac:	4618      	mov	r0, r3
 80011ae:	f006 fbc9 	bl	8007944 <HAL_RCC_OscConfig>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80011b8:	f000 f838 	bl	800122c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011bc:	f006 fb72 	bl	80078a4 <HAL_PWREx_EnableOverDrive>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011c6:	f000 f831 	bl	800122c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ca:	230f      	movs	r3, #15
 80011cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ce:	2302      	movs	r3, #2
 80011d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011d6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80011da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80011e2:	f107 030c 	add.w	r3, r7, #12
 80011e6:	2107      	movs	r1, #7
 80011e8:	4618      	mov	r0, r3
 80011ea:	f006 fe4f 	bl	8007e8c <HAL_RCC_ClockConfig>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80011f4:	f000 f81a 	bl	800122c <Error_Handler>
  }
}
 80011f8:	bf00      	nop
 80011fa:	3750      	adds	r7, #80	@ 0x50
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40023800 	.word	0x40023800
 8001204:	40007000 	.word	0x40007000

08001208 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a04      	ldr	r2, [pc, #16]	@ (8001228 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d101      	bne.n	800121e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800121a:	f001 f8af 	bl	800237c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40001400 	.word	0x40001400

0800122c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001230:	b672      	cpsid	i
}
 8001232:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <Error_Handler+0x8>

08001238 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800123c:	4b1b      	ldr	r3, [pc, #108]	@ (80012ac <MX_SPI1_Init+0x74>)
 800123e:	4a1c      	ldr	r2, [pc, #112]	@ (80012b0 <MX_SPI1_Init+0x78>)
 8001240:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001242:	4b1a      	ldr	r3, [pc, #104]	@ (80012ac <MX_SPI1_Init+0x74>)
 8001244:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001248:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800124a:	4b18      	ldr	r3, [pc, #96]	@ (80012ac <MX_SPI1_Init+0x74>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001250:	4b16      	ldr	r3, [pc, #88]	@ (80012ac <MX_SPI1_Init+0x74>)
 8001252:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001256:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001258:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <MX_SPI1_Init+0x74>)
 800125a:	2200      	movs	r2, #0
 800125c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800125e:	4b13      	ldr	r3, [pc, #76]	@ (80012ac <MX_SPI1_Init+0x74>)
 8001260:	2200      	movs	r2, #0
 8001262:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001264:	4b11      	ldr	r3, [pc, #68]	@ (80012ac <MX_SPI1_Init+0x74>)
 8001266:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800126a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800126c:	4b0f      	ldr	r3, [pc, #60]	@ (80012ac <MX_SPI1_Init+0x74>)
 800126e:	2218      	movs	r2, #24
 8001270:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001272:	4b0e      	ldr	r3, [pc, #56]	@ (80012ac <MX_SPI1_Init+0x74>)
 8001274:	2200      	movs	r2, #0
 8001276:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001278:	4b0c      	ldr	r3, [pc, #48]	@ (80012ac <MX_SPI1_Init+0x74>)
 800127a:	2200      	movs	r2, #0
 800127c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800127e:	4b0b      	ldr	r3, [pc, #44]	@ (80012ac <MX_SPI1_Init+0x74>)
 8001280:	2200      	movs	r2, #0
 8001282:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001284:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <MX_SPI1_Init+0x74>)
 8001286:	2207      	movs	r2, #7
 8001288:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800128a:	4b08      	ldr	r3, [pc, #32]	@ (80012ac <MX_SPI1_Init+0x74>)
 800128c:	2200      	movs	r2, #0
 800128e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001290:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <MX_SPI1_Init+0x74>)
 8001292:	2208      	movs	r2, #8
 8001294:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001296:	4805      	ldr	r0, [pc, #20]	@ (80012ac <MX_SPI1_Init+0x74>)
 8001298:	f007 fc00 	bl	8008a9c <HAL_SPI_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80012a2:	f7ff ffc3 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000564 	.word	0x20000564
 80012b0:	40013000 	.word	0x40013000

080012b4 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80012b8:	4b18      	ldr	r3, [pc, #96]	@ (800131c <MX_SPI4_Init+0x68>)
 80012ba:	4a19      	ldr	r2, [pc, #100]	@ (8001320 <MX_SPI4_Init+0x6c>)
 80012bc:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 80012be:	4b17      	ldr	r3, [pc, #92]	@ (800131c <MX_SPI4_Init+0x68>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80012c4:	4b15      	ldr	r3, [pc, #84]	@ (800131c <MX_SPI4_Init+0x68>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80012ca:	4b14      	ldr	r3, [pc, #80]	@ (800131c <MX_SPI4_Init+0x68>)
 80012cc:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80012d0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012d2:	4b12      	ldr	r3, [pc, #72]	@ (800131c <MX_SPI4_Init+0x68>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012d8:	4b10      	ldr	r3, [pc, #64]	@ (800131c <MX_SPI4_Init+0x68>)
 80012da:	2200      	movs	r2, #0
 80012dc:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_INPUT;
 80012de:	4b0f      	ldr	r3, [pc, #60]	@ (800131c <MX_SPI4_Init+0x68>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012e4:	4b0d      	ldr	r3, [pc, #52]	@ (800131c <MX_SPI4_Init+0x68>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80012ea:	4b0c      	ldr	r3, [pc, #48]	@ (800131c <MX_SPI4_Init+0x68>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012f0:	4b0a      	ldr	r3, [pc, #40]	@ (800131c <MX_SPI4_Init+0x68>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 80012f6:	4b09      	ldr	r3, [pc, #36]	@ (800131c <MX_SPI4_Init+0x68>)
 80012f8:	2207      	movs	r2, #7
 80012fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012fc:	4b07      	ldr	r3, [pc, #28]	@ (800131c <MX_SPI4_Init+0x68>)
 80012fe:	2200      	movs	r2, #0
 8001300:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001302:	4b06      	ldr	r3, [pc, #24]	@ (800131c <MX_SPI4_Init+0x68>)
 8001304:	2200      	movs	r2, #0
 8001306:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001308:	4804      	ldr	r0, [pc, #16]	@ (800131c <MX_SPI4_Init+0x68>)
 800130a:	f007 fbc7 	bl	8008a9c <HAL_SPI_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_SPI4_Init+0x64>
  {
    Error_Handler();
 8001314:	f7ff ff8a 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}
 800131c:	200005c8 	.word	0x200005c8
 8001320:	40013400 	.word	0x40013400

08001324 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08c      	sub	sp, #48	@ 0x30
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 031c 	add.w	r3, r7, #28
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4aa1      	ldr	r2, [pc, #644]	@ (80015c8 <HAL_SPI_MspInit+0x2a4>)
 8001342:	4293      	cmp	r3, r2
 8001344:	f040 80a9 	bne.w	800149a <HAL_SPI_MspInit+0x176>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001348:	4ba0      	ldr	r3, [pc, #640]	@ (80015cc <HAL_SPI_MspInit+0x2a8>)
 800134a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800134c:	4a9f      	ldr	r2, [pc, #636]	@ (80015cc <HAL_SPI_MspInit+0x2a8>)
 800134e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001352:	6453      	str	r3, [r2, #68]	@ 0x44
 8001354:	4b9d      	ldr	r3, [pc, #628]	@ (80015cc <HAL_SPI_MspInit+0x2a8>)
 8001356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001358:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800135c:	61bb      	str	r3, [r7, #24]
 800135e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001360:	4b9a      	ldr	r3, [pc, #616]	@ (80015cc <HAL_SPI_MspInit+0x2a8>)
 8001362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001364:	4a99      	ldr	r2, [pc, #612]	@ (80015cc <HAL_SPI_MspInit+0x2a8>)
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	6313      	str	r3, [r2, #48]	@ 0x30
 800136c:	4b97      	ldr	r3, [pc, #604]	@ (80015cc <HAL_SPI_MspInit+0x2a8>)
 800136e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	617b      	str	r3, [r7, #20]
 8001376:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001378:	4b94      	ldr	r3, [pc, #592]	@ (80015cc <HAL_SPI_MspInit+0x2a8>)
 800137a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137c:	4a93      	ldr	r2, [pc, #588]	@ (80015cc <HAL_SPI_MspInit+0x2a8>)
 800137e:	f043 0302 	orr.w	r3, r3, #2
 8001382:	6313      	str	r3, [r2, #48]	@ 0x30
 8001384:	4b91      	ldr	r3, [pc, #580]	@ (80015cc <HAL_SPI_MspInit+0x2a8>)
 8001386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	613b      	str	r3, [r7, #16]
 800138e:	693b      	ldr	r3, [r7, #16]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001390:	2370      	movs	r3, #112	@ 0x70
 8001392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001394:	2302      	movs	r3, #2
 8001396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139c:	2303      	movs	r3, #3
 800139e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013a0:	2305      	movs	r3, #5
 80013a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a4:	f107 031c 	add.w	r3, r7, #28
 80013a8:	4619      	mov	r1, r3
 80013aa:	4889      	ldr	r0, [pc, #548]	@ (80015d0 <HAL_SPI_MspInit+0x2ac>)
 80013ac:	f003 fe8a 	bl	80050c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013b0:	2320      	movs	r3, #32
 80013b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	2302      	movs	r3, #2
 80013b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013bc:	2303      	movs	r3, #3
 80013be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013c0:	2305      	movs	r3, #5
 80013c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c4:	f107 031c 	add.w	r3, r7, #28
 80013c8:	4619      	mov	r1, r3
 80013ca:	4882      	ldr	r0, [pc, #520]	@ (80015d4 <HAL_SPI_MspInit+0x2b0>)
 80013cc:	f003 fe7a 	bl	80050c4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 80013d0:	4b81      	ldr	r3, [pc, #516]	@ (80015d8 <HAL_SPI_MspInit+0x2b4>)
 80013d2:	4a82      	ldr	r2, [pc, #520]	@ (80015dc <HAL_SPI_MspInit+0x2b8>)
 80013d4:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80013d6:	4b80      	ldr	r3, [pc, #512]	@ (80015d8 <HAL_SPI_MspInit+0x2b4>)
 80013d8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80013dc:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013de:	4b7e      	ldr	r3, [pc, #504]	@ (80015d8 <HAL_SPI_MspInit+0x2b4>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013e4:	4b7c      	ldr	r3, [pc, #496]	@ (80015d8 <HAL_SPI_MspInit+0x2b4>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013ea:	4b7b      	ldr	r3, [pc, #492]	@ (80015d8 <HAL_SPI_MspInit+0x2b4>)
 80013ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013f0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013f2:	4b79      	ldr	r3, [pc, #484]	@ (80015d8 <HAL_SPI_MspInit+0x2b4>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013f8:	4b77      	ldr	r3, [pc, #476]	@ (80015d8 <HAL_SPI_MspInit+0x2b4>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80013fe:	4b76      	ldr	r3, [pc, #472]	@ (80015d8 <HAL_SPI_MspInit+0x2b4>)
 8001400:	2200      	movs	r2, #0
 8001402:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001404:	4b74      	ldr	r3, [pc, #464]	@ (80015d8 <HAL_SPI_MspInit+0x2b4>)
 8001406:	2200      	movs	r2, #0
 8001408:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800140a:	4b73      	ldr	r3, [pc, #460]	@ (80015d8 <HAL_SPI_MspInit+0x2b4>)
 800140c:	2200      	movs	r2, #0
 800140e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001410:	4871      	ldr	r0, [pc, #452]	@ (80015d8 <HAL_SPI_MspInit+0x2b4>)
 8001412:	f001 ff69 	bl	80032e8 <HAL_DMA_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <HAL_SPI_MspInit+0xfc>
    {
      Error_Handler();
 800141c:	f7ff ff06 	bl	800122c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a6d      	ldr	r2, [pc, #436]	@ (80015d8 <HAL_SPI_MspInit+0x2b4>)
 8001424:	659a      	str	r2, [r3, #88]	@ 0x58
 8001426:	4a6c      	ldr	r2, [pc, #432]	@ (80015d8 <HAL_SPI_MspInit+0x2b4>)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800142c:	4b6c      	ldr	r3, [pc, #432]	@ (80015e0 <HAL_SPI_MspInit+0x2bc>)
 800142e:	4a6d      	ldr	r2, [pc, #436]	@ (80015e4 <HAL_SPI_MspInit+0x2c0>)
 8001430:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001432:	4b6b      	ldr	r3, [pc, #428]	@ (80015e0 <HAL_SPI_MspInit+0x2bc>)
 8001434:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001438:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800143a:	4b69      	ldr	r3, [pc, #420]	@ (80015e0 <HAL_SPI_MspInit+0x2bc>)
 800143c:	2240      	movs	r2, #64	@ 0x40
 800143e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001440:	4b67      	ldr	r3, [pc, #412]	@ (80015e0 <HAL_SPI_MspInit+0x2bc>)
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001446:	4b66      	ldr	r3, [pc, #408]	@ (80015e0 <HAL_SPI_MspInit+0x2bc>)
 8001448:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800144c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800144e:	4b64      	ldr	r3, [pc, #400]	@ (80015e0 <HAL_SPI_MspInit+0x2bc>)
 8001450:	2200      	movs	r2, #0
 8001452:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001454:	4b62      	ldr	r3, [pc, #392]	@ (80015e0 <HAL_SPI_MspInit+0x2bc>)
 8001456:	2200      	movs	r2, #0
 8001458:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800145a:	4b61      	ldr	r3, [pc, #388]	@ (80015e0 <HAL_SPI_MspInit+0x2bc>)
 800145c:	2200      	movs	r2, #0
 800145e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001460:	4b5f      	ldr	r3, [pc, #380]	@ (80015e0 <HAL_SPI_MspInit+0x2bc>)
 8001462:	2200      	movs	r2, #0
 8001464:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001466:	4b5e      	ldr	r3, [pc, #376]	@ (80015e0 <HAL_SPI_MspInit+0x2bc>)
 8001468:	2200      	movs	r2, #0
 800146a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800146c:	485c      	ldr	r0, [pc, #368]	@ (80015e0 <HAL_SPI_MspInit+0x2bc>)
 800146e:	f001 ff3b 	bl	80032e8 <HAL_DMA_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 8001478:	f7ff fed8 	bl	800122c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a58      	ldr	r2, [pc, #352]	@ (80015e0 <HAL_SPI_MspInit+0x2bc>)
 8001480:	655a      	str	r2, [r3, #84]	@ 0x54
 8001482:	4a57      	ldr	r2, [pc, #348]	@ (80015e0 <HAL_SPI_MspInit+0x2bc>)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001488:	2200      	movs	r2, #0
 800148a:	2105      	movs	r1, #5
 800148c:	2023      	movs	r0, #35	@ 0x23
 800148e:	f001 fcf7 	bl	8002e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001492:	2023      	movs	r0, #35	@ 0x23
 8001494:	f001 fd10 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001498:	e091      	b.n	80015be <HAL_SPI_MspInit+0x29a>
  else if(spiHandle->Instance==SPI4)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a52      	ldr	r2, [pc, #328]	@ (80015e8 <HAL_SPI_MspInit+0x2c4>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	f040 808c 	bne.w	80015be <HAL_SPI_MspInit+0x29a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80014a6:	4b49      	ldr	r3, [pc, #292]	@ (80015cc <HAL_SPI_MspInit+0x2a8>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014aa:	4a48      	ldr	r2, [pc, #288]	@ (80015cc <HAL_SPI_MspInit+0x2a8>)
 80014ac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80014b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014b2:	4b46      	ldr	r3, [pc, #280]	@ (80015cc <HAL_SPI_MspInit+0x2a8>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014be:	4b43      	ldr	r3, [pc, #268]	@ (80015cc <HAL_SPI_MspInit+0x2a8>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	4a42      	ldr	r2, [pc, #264]	@ (80015cc <HAL_SPI_MspInit+0x2a8>)
 80014c4:	f043 0310 	orr.w	r3, r3, #16
 80014c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ca:	4b40      	ldr	r3, [pc, #256]	@ (80015cc <HAL_SPI_MspInit+0x2a8>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	f003 0310 	and.w	r3, r3, #16
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80014d6:	2374      	movs	r3, #116	@ 0x74
 80014d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014da:	2302      	movs	r3, #2
 80014dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e2:	2303      	movs	r3, #3
 80014e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80014e6:	2305      	movs	r3, #5
 80014e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ea:	f107 031c 	add.w	r3, r7, #28
 80014ee:	4619      	mov	r1, r3
 80014f0:	483e      	ldr	r0, [pc, #248]	@ (80015ec <HAL_SPI_MspInit+0x2c8>)
 80014f2:	f003 fde7 	bl	80050c4 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 80014f6:	4b3e      	ldr	r3, [pc, #248]	@ (80015f0 <HAL_SPI_MspInit+0x2cc>)
 80014f8:	4a3e      	ldr	r2, [pc, #248]	@ (80015f4 <HAL_SPI_MspInit+0x2d0>)
 80014fa:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 80014fc:	4b3c      	ldr	r3, [pc, #240]	@ (80015f0 <HAL_SPI_MspInit+0x2cc>)
 80014fe:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001502:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001504:	4b3a      	ldr	r3, [pc, #232]	@ (80015f0 <HAL_SPI_MspInit+0x2cc>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800150a:	4b39      	ldr	r3, [pc, #228]	@ (80015f0 <HAL_SPI_MspInit+0x2cc>)
 800150c:	2200      	movs	r2, #0
 800150e:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001510:	4b37      	ldr	r3, [pc, #220]	@ (80015f0 <HAL_SPI_MspInit+0x2cc>)
 8001512:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001516:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001518:	4b35      	ldr	r3, [pc, #212]	@ (80015f0 <HAL_SPI_MspInit+0x2cc>)
 800151a:	2200      	movs	r2, #0
 800151c:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800151e:	4b34      	ldr	r3, [pc, #208]	@ (80015f0 <HAL_SPI_MspInit+0x2cc>)
 8001520:	2200      	movs	r2, #0
 8001522:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8001524:	4b32      	ldr	r3, [pc, #200]	@ (80015f0 <HAL_SPI_MspInit+0x2cc>)
 8001526:	2200      	movs	r2, #0
 8001528:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800152a:	4b31      	ldr	r3, [pc, #196]	@ (80015f0 <HAL_SPI_MspInit+0x2cc>)
 800152c:	2200      	movs	r2, #0
 800152e:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001530:	4b2f      	ldr	r3, [pc, #188]	@ (80015f0 <HAL_SPI_MspInit+0x2cc>)
 8001532:	2200      	movs	r2, #0
 8001534:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8001536:	482e      	ldr	r0, [pc, #184]	@ (80015f0 <HAL_SPI_MspInit+0x2cc>)
 8001538:	f001 fed6 	bl	80032e8 <HAL_DMA_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_SPI_MspInit+0x222>
      Error_Handler();
 8001542:	f7ff fe73 	bl	800122c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a29      	ldr	r2, [pc, #164]	@ (80015f0 <HAL_SPI_MspInit+0x2cc>)
 800154a:	659a      	str	r2, [r3, #88]	@ 0x58
 800154c:	4a28      	ldr	r2, [pc, #160]	@ (80015f0 <HAL_SPI_MspInit+0x2cc>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 8001552:	4b29      	ldr	r3, [pc, #164]	@ (80015f8 <HAL_SPI_MspInit+0x2d4>)
 8001554:	4a29      	ldr	r2, [pc, #164]	@ (80015fc <HAL_SPI_MspInit+0x2d8>)
 8001556:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 8001558:	4b27      	ldr	r3, [pc, #156]	@ (80015f8 <HAL_SPI_MspInit+0x2d4>)
 800155a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800155e:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001560:	4b25      	ldr	r3, [pc, #148]	@ (80015f8 <HAL_SPI_MspInit+0x2d4>)
 8001562:	2240      	movs	r2, #64	@ 0x40
 8001564:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001566:	4b24      	ldr	r3, [pc, #144]	@ (80015f8 <HAL_SPI_MspInit+0x2d4>)
 8001568:	2200      	movs	r2, #0
 800156a:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800156c:	4b22      	ldr	r3, [pc, #136]	@ (80015f8 <HAL_SPI_MspInit+0x2d4>)
 800156e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001572:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001574:	4b20      	ldr	r3, [pc, #128]	@ (80015f8 <HAL_SPI_MspInit+0x2d4>)
 8001576:	2200      	movs	r2, #0
 8001578:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800157a:	4b1f      	ldr	r3, [pc, #124]	@ (80015f8 <HAL_SPI_MspInit+0x2d4>)
 800157c:	2200      	movs	r2, #0
 800157e:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001580:	4b1d      	ldr	r3, [pc, #116]	@ (80015f8 <HAL_SPI_MspInit+0x2d4>)
 8001582:	2200      	movs	r2, #0
 8001584:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001586:	4b1c      	ldr	r3, [pc, #112]	@ (80015f8 <HAL_SPI_MspInit+0x2d4>)
 8001588:	2200      	movs	r2, #0
 800158a:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800158c:	4b1a      	ldr	r3, [pc, #104]	@ (80015f8 <HAL_SPI_MspInit+0x2d4>)
 800158e:	2200      	movs	r2, #0
 8001590:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8001592:	4819      	ldr	r0, [pc, #100]	@ (80015f8 <HAL_SPI_MspInit+0x2d4>)
 8001594:	f001 fea8 	bl	80032e8 <HAL_DMA_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_SPI_MspInit+0x27e>
      Error_Handler();
 800159e:	f7ff fe45 	bl	800122c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a14      	ldr	r2, [pc, #80]	@ (80015f8 <HAL_SPI_MspInit+0x2d4>)
 80015a6:	655a      	str	r2, [r3, #84]	@ 0x54
 80015a8:	4a13      	ldr	r2, [pc, #76]	@ (80015f8 <HAL_SPI_MspInit+0x2d4>)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2105      	movs	r1, #5
 80015b2:	2054      	movs	r0, #84	@ 0x54
 80015b4:	f001 fc64 	bl	8002e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80015b8:	2054      	movs	r0, #84	@ 0x54
 80015ba:	f001 fc7d 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
}
 80015be:	bf00      	nop
 80015c0:	3730      	adds	r7, #48	@ 0x30
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40013000 	.word	0x40013000
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020000 	.word	0x40020000
 80015d4:	40020400 	.word	0x40020400
 80015d8:	2000062c 	.word	0x2000062c
 80015dc:	40026440 	.word	0x40026440
 80015e0:	2000068c 	.word	0x2000068c
 80015e4:	40026458 	.word	0x40026458
 80015e8:	40013400 	.word	0x40013400
 80015ec:	40021000 	.word	0x40021000
 80015f0:	200006ec 	.word	0x200006ec
 80015f4:	40026410 	.word	0x40026410
 80015f8:	2000074c 	.word	0x2000074c
 80015fc:	40026428 	.word	0x40026428

08001600 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001606:	4b11      	ldr	r3, [pc, #68]	@ (800164c <HAL_MspInit+0x4c>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160a:	4a10      	ldr	r2, [pc, #64]	@ (800164c <HAL_MspInit+0x4c>)
 800160c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001610:	6413      	str	r3, [r2, #64]	@ 0x40
 8001612:	4b0e      	ldr	r3, [pc, #56]	@ (800164c <HAL_MspInit+0x4c>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161e:	4b0b      	ldr	r3, [pc, #44]	@ (800164c <HAL_MspInit+0x4c>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001622:	4a0a      	ldr	r2, [pc, #40]	@ (800164c <HAL_MspInit+0x4c>)
 8001624:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001628:	6453      	str	r3, [r2, #68]	@ 0x44
 800162a:	4b08      	ldr	r3, [pc, #32]	@ (800164c <HAL_MspInit+0x4c>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001632:	603b      	str	r3, [r7, #0]
 8001634:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	210f      	movs	r1, #15
 800163a:	f06f 0001 	mvn.w	r0, #1
 800163e:	f001 fc1f 	bl	8002e80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800

08001650 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08e      	sub	sp, #56	@ 0x38
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001658:	2300      	movs	r3, #0
 800165a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800165c:	2300      	movs	r3, #0
 800165e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001660:	4b33      	ldr	r3, [pc, #204]	@ (8001730 <HAL_InitTick+0xe0>)
 8001662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001664:	4a32      	ldr	r2, [pc, #200]	@ (8001730 <HAL_InitTick+0xe0>)
 8001666:	f043 0320 	orr.w	r3, r3, #32
 800166a:	6413      	str	r3, [r2, #64]	@ 0x40
 800166c:	4b30      	ldr	r3, [pc, #192]	@ (8001730 <HAL_InitTick+0xe0>)
 800166e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001670:	f003 0320 	and.w	r3, r3, #32
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001678:	f107 0210 	add.w	r2, r7, #16
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	4611      	mov	r1, r2
 8001682:	4618      	mov	r0, r3
 8001684:	f006 fde8 	bl	8008258 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001688:	6a3b      	ldr	r3, [r7, #32]
 800168a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800168c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800168e:	2b00      	cmp	r3, #0
 8001690:	d103      	bne.n	800169a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001692:	f006 fdb9 	bl	8008208 <HAL_RCC_GetPCLK1Freq>
 8001696:	6378      	str	r0, [r7, #52]	@ 0x34
 8001698:	e004      	b.n	80016a4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800169a:	f006 fdb5 	bl	8008208 <HAL_RCC_GetPCLK1Freq>
 800169e:	4603      	mov	r3, r0
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016a6:	4a23      	ldr	r2, [pc, #140]	@ (8001734 <HAL_InitTick+0xe4>)
 80016a8:	fba2 2303 	umull	r2, r3, r2, r3
 80016ac:	0c9b      	lsrs	r3, r3, #18
 80016ae:	3b01      	subs	r3, #1
 80016b0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80016b2:	4b21      	ldr	r3, [pc, #132]	@ (8001738 <HAL_InitTick+0xe8>)
 80016b4:	4a21      	ldr	r2, [pc, #132]	@ (800173c <HAL_InitTick+0xec>)
 80016b6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80016b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001738 <HAL_InitTick+0xe8>)
 80016ba:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016be:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80016c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001738 <HAL_InitTick+0xe8>)
 80016c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016c4:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80016c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001738 <HAL_InitTick+0xe8>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001738 <HAL_InitTick+0xe8>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d2:	4b19      	ldr	r3, [pc, #100]	@ (8001738 <HAL_InitTick+0xe8>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 80016d8:	4817      	ldr	r0, [pc, #92]	@ (8001738 <HAL_InitTick+0xe8>)
 80016da:	f008 faa7 	bl	8009c2c <HAL_TIM_Base_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80016e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d11b      	bne.n	8001724 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80016ec:	4812      	ldr	r0, [pc, #72]	@ (8001738 <HAL_InitTick+0xe8>)
 80016ee:	f008 fb8d 	bl	8009e0c <HAL_TIM_Base_Start_IT>
 80016f2:	4603      	mov	r3, r0
 80016f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80016f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d111      	bne.n	8001724 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001700:	2037      	movs	r0, #55	@ 0x37
 8001702:	f001 fbd9 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2b0f      	cmp	r3, #15
 800170a:	d808      	bhi.n	800171e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 800170c:	2200      	movs	r2, #0
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	2037      	movs	r0, #55	@ 0x37
 8001712:	f001 fbb5 	bl	8002e80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001716:	4a0a      	ldr	r2, [pc, #40]	@ (8001740 <HAL_InitTick+0xf0>)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	e002      	b.n	8001724 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001724:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001728:	4618      	mov	r0, r3
 800172a:	3738      	adds	r7, #56	@ 0x38
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40023800 	.word	0x40023800
 8001734:	431bde83 	.word	0x431bde83
 8001738:	200007ac 	.word	0x200007ac
 800173c:	40001400 	.word	0x40001400
 8001740:	20000004 	.word	0x20000004

08001744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <NMI_Handler+0x4>

0800174c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001750:	bf00      	nop
 8001752:	e7fd      	b.n	8001750 <HardFault_Handler+0x4>

08001754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001758:	bf00      	nop
 800175a:	e7fd      	b.n	8001758 <MemManage_Handler+0x4>

0800175c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <BusFault_Handler+0x4>

08001764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <UsageFault_Handler+0x4>

0800176c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001780:	4802      	ldr	r0, [pc, #8]	@ (800178c <DMA1_Stream0_IRQHandler+0x10>)
 8001782:	f001 ff51 	bl	8003628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000aec 	.word	0x20000aec

08001790 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim6_up);
 8001794:	4802      	ldr	r0, [pc, #8]	@ (80017a0 <DMA1_Stream1_IRQHandler+0x10>)
 8001796:	f001 ff47 	bl	8003628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000894 	.word	0x20000894

080017a4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80017a8:	4802      	ldr	r0, [pc, #8]	@ (80017b4 <DMA1_Stream2_IRQHandler+0x10>)
 80017aa:	f001 ff3d 	bl	8003628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000a8c 	.word	0x20000a8c

080017b8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80017bc:	4802      	ldr	r0, [pc, #8]	@ (80017c8 <DMA1_Stream3_IRQHandler+0x10>)
 80017be:	f001 ff33 	bl	8003628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	200004a4 	.word	0x200004a4

080017cc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80017d0:	4802      	ldr	r0, [pc, #8]	@ (80017dc <DMA1_Stream5_IRQHandler+0x10>)
 80017d2:	f001 ff29 	bl	8003628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	200003e4 	.word	0x200003e4

080017e0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80017e4:	4802      	ldr	r0, [pc, #8]	@ (80017f0 <DMA1_Stream6_IRQHandler+0x10>)
 80017e6:	f001 ff1f 	bl	8003628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000444 	.word	0x20000444

080017f4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80017f8:	4802      	ldr	r0, [pc, #8]	@ (8001804 <I2C1_EV_IRQHandler+0x10>)
 80017fa:	f004 fa51 	bl	8005ca0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	2000033c 	.word	0x2000033c

08001808 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800180c:	4802      	ldr	r0, [pc, #8]	@ (8001818 <I2C1_ER_IRQHandler+0x10>)
 800180e:	f004 fa61 	bl	8005cd4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	2000033c 	.word	0x2000033c

0800181c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001820:	4802      	ldr	r0, [pc, #8]	@ (800182c <I2C2_EV_IRQHandler+0x10>)
 8001822:	f004 fa3d 	bl	8005ca0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000390 	.word	0x20000390

08001830 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001834:	4802      	ldr	r0, [pc, #8]	@ (8001840 <I2C2_ER_IRQHandler+0x10>)
 8001836:	f004 fa4d 	bl	8005cd4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000390 	.word	0x20000390

08001844 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001848:	4802      	ldr	r0, [pc, #8]	@ (8001854 <SPI1_IRQHandler+0x10>)
 800184a:	f007 fd67 	bl	800931c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000564 	.word	0x20000564

08001858 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800185c:	4802      	ldr	r0, [pc, #8]	@ (8001868 <USART3_IRQHandler+0x10>)
 800185e:	f009 f8ad 	bl	800a9bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20000a04 	.word	0x20000a04

0800186c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001870:	4802      	ldr	r0, [pc, #8]	@ (800187c <DMA1_Stream7_IRQHandler+0x10>)
 8001872:	f001 fed9 	bl	8003628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000504 	.word	0x20000504

08001880 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001884:	4802      	ldr	r0, [pc, #8]	@ (8001890 <UART4_IRQHandler+0x10>)
 8001886:	f009 f899 	bl	800a9bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200008f4 	.word	0x200008f4

08001894 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001898:	4802      	ldr	r0, [pc, #8]	@ (80018a4 <UART5_IRQHandler+0x10>)
 800189a:	f009 f88f 	bl	800a9bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	2000097c 	.word	0x2000097c

080018a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018ac:	4802      	ldr	r0, [pc, #8]	@ (80018b8 <TIM6_DAC_IRQHandler+0x10>)
 80018ae:	f008 fb25 	bl	8009efc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000848 	.word	0x20000848

080018bc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80018c0:	4802      	ldr	r0, [pc, #8]	@ (80018cc <TIM7_IRQHandler+0x10>)
 80018c2:	f008 fb1b 	bl	8009efc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	200007ac 	.word	0x200007ac

080018d0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 80018d4:	4802      	ldr	r0, [pc, #8]	@ (80018e0 <DMA2_Stream0_IRQHandler+0x10>)
 80018d6:	f001 fea7 	bl	8003628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	200006ec 	.word	0x200006ec

080018e4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 80018e8:	4802      	ldr	r0, [pc, #8]	@ (80018f4 <DMA2_Stream1_IRQHandler+0x10>)
 80018ea:	f001 fe9d 	bl	8003628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	2000074c 	.word	0x2000074c

080018f8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80018fc:	4802      	ldr	r0, [pc, #8]	@ (8001908 <DMA2_Stream2_IRQHandler+0x10>)
 80018fe:	f001 fe93 	bl	8003628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	2000062c 	.word	0x2000062c

0800190c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001910:	4802      	ldr	r0, [pc, #8]	@ (800191c <DMA2_Stream3_IRQHandler+0x10>)
 8001912:	f001 fe89 	bl	8003628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	2000068c 	.word	0x2000068c

08001920 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001924:	4802      	ldr	r0, [pc, #8]	@ (8001930 <DMA2_Stream4_IRQHandler+0x10>)
 8001926:	f001 fe7f 	bl	8003628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000274 	.word	0x20000274

08001934 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001938:	4802      	ldr	r0, [pc, #8]	@ (8001944 <ETH_IRQHandler+0x10>)
 800193a:	f002 fcdb 	bl	80042f4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	2000cfe4 	.word	0x2000cfe4

08001948 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800194c:	4802      	ldr	r0, [pc, #8]	@ (8001958 <ETH_WKUP_IRQHandler+0x10>)
 800194e:	f002 fcd1 	bl	80042f4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	2000cfe4 	.word	0x2000cfe4

0800195c <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001960:	4802      	ldr	r0, [pc, #8]	@ (800196c <SPI4_IRQHandler+0x10>)
 8001962:	f007 fcdb 	bl	800931c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	200005c8 	.word	0x200005c8

08001970 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return 1;
 8001974:	2301      	movs	r3, #1
}
 8001976:	4618      	mov	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <_kill>:

int _kill(int pid, int sig)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800198a:	4b05      	ldr	r3, [pc, #20]	@ (80019a0 <_kill+0x20>)
 800198c:	2216      	movs	r2, #22
 800198e:	601a      	str	r2, [r3, #0]
  return -1;
 8001990:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001994:	4618      	mov	r0, r3
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	2002d980 	.word	0x2002d980

080019a4 <_exit>:

void _exit (int status)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019ac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff ffe5 	bl	8001980 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019b6:	bf00      	nop
 80019b8:	e7fd      	b.n	80019b6 <_exit+0x12>

080019ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b086      	sub	sp, #24
 80019be:	af00      	add	r7, sp, #0
 80019c0:	60f8      	str	r0, [r7, #12]
 80019c2:	60b9      	str	r1, [r7, #8]
 80019c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
 80019ca:	e00a      	b.n	80019e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019cc:	f3af 8000 	nop.w
 80019d0:	4601      	mov	r1, r0
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	1c5a      	adds	r2, r3, #1
 80019d6:	60ba      	str	r2, [r7, #8]
 80019d8:	b2ca      	uxtb	r2, r1
 80019da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	3301      	adds	r3, #1
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	dbf0      	blt.n	80019cc <_read+0x12>
  }

  return len;
 80019ea:	687b      	ldr	r3, [r7, #4]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a1c:	605a      	str	r2, [r3, #4]
  return 0;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <_isatty>:

int _isatty(int file)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a34:	2301      	movs	r3, #1
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b085      	sub	sp, #20
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	60f8      	str	r0, [r7, #12]
 8001a4a:	60b9      	str	r1, [r7, #8]
 8001a4c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b087      	sub	sp, #28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a64:	4a14      	ldr	r2, [pc, #80]	@ (8001ab8 <_sbrk+0x5c>)
 8001a66:	4b15      	ldr	r3, [pc, #84]	@ (8001abc <_sbrk+0x60>)
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a70:	4b13      	ldr	r3, [pc, #76]	@ (8001ac0 <_sbrk+0x64>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d102      	bne.n	8001a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a78:	4b11      	ldr	r3, [pc, #68]	@ (8001ac0 <_sbrk+0x64>)
 8001a7a:	4a12      	ldr	r2, [pc, #72]	@ (8001ac4 <_sbrk+0x68>)
 8001a7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a7e:	4b10      	ldr	r3, [pc, #64]	@ (8001ac0 <_sbrk+0x64>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4413      	add	r3, r2
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d205      	bcs.n	8001a98 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac8 <_sbrk+0x6c>)
 8001a8e:	220c      	movs	r2, #12
 8001a90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a96:	e009      	b.n	8001aac <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a98:	4b09      	ldr	r3, [pc, #36]	@ (8001ac0 <_sbrk+0x64>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a9e:	4b08      	ldr	r3, [pc, #32]	@ (8001ac0 <_sbrk+0x64>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	4a06      	ldr	r2, [pc, #24]	@ (8001ac0 <_sbrk+0x64>)
 8001aa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	371c      	adds	r7, #28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	20050000 	.word	0x20050000
 8001abc:	00002000 	.word	0x00002000
 8001ac0:	200007f8 	.word	0x200007f8
 8001ac4:	2002d990 	.word	0x2002d990
 8001ac8:	2002d980 	.word	0x2002d980

08001acc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ad0:	4b06      	ldr	r3, [pc, #24]	@ (8001aec <SystemInit+0x20>)
 8001ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ad6:	4a05      	ldr	r2, [pc, #20]	@ (8001aec <SystemInit+0x20>)
 8001ad8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001adc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
DMA_HandleTypeDef hdma_tim6_up;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b088      	sub	sp, #32
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001af6:	f107 0310 	add.w	r3, r7, #16
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	605a      	str	r2, [r3, #4]
 8001b00:	609a      	str	r2, [r3, #8]
 8001b02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b04:	1d3b      	adds	r3, r7, #4
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b0e:	4b1e      	ldr	r3, [pc, #120]	@ (8001b88 <MX_TIM2_Init+0x98>)
 8001b10:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b16:	4b1c      	ldr	r3, [pc, #112]	@ (8001b88 <MX_TIM2_Init+0x98>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001b88 <MX_TIM2_Init+0x98>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001b22:	4b19      	ldr	r3, [pc, #100]	@ (8001b88 <MX_TIM2_Init+0x98>)
 8001b24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b2a:	4b17      	ldr	r3, [pc, #92]	@ (8001b88 <MX_TIM2_Init+0x98>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b30:	4b15      	ldr	r3, [pc, #84]	@ (8001b88 <MX_TIM2_Init+0x98>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b36:	4814      	ldr	r0, [pc, #80]	@ (8001b88 <MX_TIM2_Init+0x98>)
 8001b38:	f008 f878 	bl	8009c2c <HAL_TIM_Base_Init>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b42:	f7ff fb73 	bl	800122c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b4c:	f107 0310 	add.w	r3, r7, #16
 8001b50:	4619      	mov	r1, r3
 8001b52:	480d      	ldr	r0, [pc, #52]	@ (8001b88 <MX_TIM2_Init+0x98>)
 8001b54:	f008 fada 	bl	800a10c <HAL_TIM_ConfigClockSource>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001b5e:	f7ff fb65 	bl	800122c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b62:	2300      	movs	r3, #0
 8001b64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4806      	ldr	r0, [pc, #24]	@ (8001b88 <MX_TIM2_Init+0x98>)
 8001b70:	f008 fcfe 	bl	800a570 <HAL_TIMEx_MasterConfigSynchronization>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b7a:	f7ff fb57 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b7e:	bf00      	nop
 8001b80:	3720      	adds	r7, #32
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	200007fc 	.word	0x200007fc

08001b8c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b92:	1d3b      	adds	r3, r7, #4
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b9c:	4b14      	ldr	r3, [pc, #80]	@ (8001bf0 <MX_TIM6_Init+0x64>)
 8001b9e:	4a15      	ldr	r2, [pc, #84]	@ (8001bf4 <MX_TIM6_Init+0x68>)
 8001ba0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 540-1;
 8001ba2:	4b13      	ldr	r3, [pc, #76]	@ (8001bf0 <MX_TIM6_Init+0x64>)
 8001ba4:	f240 221b 	movw	r2, #539	@ 0x21b
 8001ba8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001baa:	4b11      	ldr	r3, [pc, #68]	@ (8001bf0 <MX_TIM6_Init+0x64>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8001bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf0 <MX_TIM6_Init+0x64>)
 8001bb2:	2263      	movs	r2, #99	@ 0x63
 8001bb4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf0 <MX_TIM6_Init+0x64>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001bbc:	480c      	ldr	r0, [pc, #48]	@ (8001bf0 <MX_TIM6_Init+0x64>)
 8001bbe:	f008 f835 	bl	8009c2c <HAL_TIM_Base_Init>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001bc8:	f7ff fb30 	bl	800122c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001bcc:	2320      	movs	r3, #32
 8001bce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4805      	ldr	r0, [pc, #20]	@ (8001bf0 <MX_TIM6_Init+0x64>)
 8001bda:	f008 fcc9 	bl	800a570 <HAL_TIMEx_MasterConfigSynchronization>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001be4:	f7ff fb22 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001be8:	bf00      	nop
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20000848 	.word	0x20000848
 8001bf4:	40001000 	.word	0x40001000

08001bf8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c08:	d10c      	bne.n	8001c24 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c0a:	4b2d      	ldr	r3, [pc, #180]	@ (8001cc0 <HAL_TIM_Base_MspInit+0xc8>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0e:	4a2c      	ldr	r2, [pc, #176]	@ (8001cc0 <HAL_TIM_Base_MspInit+0xc8>)
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c16:	4b2a      	ldr	r3, [pc, #168]	@ (8001cc0 <HAL_TIM_Base_MspInit+0xc8>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001c22:	e049      	b.n	8001cb8 <HAL_TIM_Base_MspInit+0xc0>
  else if(tim_baseHandle->Instance==TIM6)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a26      	ldr	r2, [pc, #152]	@ (8001cc4 <HAL_TIM_Base_MspInit+0xcc>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d144      	bne.n	8001cb8 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c2e:	4b24      	ldr	r3, [pc, #144]	@ (8001cc0 <HAL_TIM_Base_MspInit+0xc8>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c32:	4a23      	ldr	r2, [pc, #140]	@ (8001cc0 <HAL_TIM_Base_MspInit+0xc8>)
 8001c34:	f043 0310 	orr.w	r3, r3, #16
 8001c38:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c3a:	4b21      	ldr	r3, [pc, #132]	@ (8001cc0 <HAL_TIM_Base_MspInit+0xc8>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3e:	f003 0310 	and.w	r3, r3, #16
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	68bb      	ldr	r3, [r7, #8]
    hdma_tim6_up.Instance = DMA1_Stream1;
 8001c46:	4b20      	ldr	r3, [pc, #128]	@ (8001cc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001c48:	4a20      	ldr	r2, [pc, #128]	@ (8001ccc <HAL_TIM_Base_MspInit+0xd4>)
 8001c4a:	601a      	str	r2, [r3, #0]
    hdma_tim6_up.Init.Channel = DMA_CHANNEL_7;
 8001c4c:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001c4e:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001c52:	605a      	str	r2, [r3, #4]
    hdma_tim6_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c54:	4b1c      	ldr	r3, [pc, #112]	@ (8001cc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
    hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	60da      	str	r2, [r3, #12]
    hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 8001c60:	4b19      	ldr	r3, [pc, #100]	@ (8001cc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001c62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c66:	611a      	str	r2, [r3, #16]
    hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c68:	4b17      	ldr	r3, [pc, #92]	@ (8001cc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001c6a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c6e:	615a      	str	r2, [r3, #20]
    hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c70:	4b15      	ldr	r3, [pc, #84]	@ (8001cc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001c72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c76:	619a      	str	r2, [r3, #24]
    hdma_tim6_up.Init.Mode = DMA_NORMAL;
 8001c78:	4b13      	ldr	r3, [pc, #76]	@ (8001cc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	61da      	str	r2, [r3, #28]
    hdma_tim6_up.Init.Priority = DMA_PRIORITY_HIGH;
 8001c7e:	4b12      	ldr	r3, [pc, #72]	@ (8001cc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001c80:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c84:	621a      	str	r2, [r3, #32]
    hdma_tim6_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c86:	4b10      	ldr	r3, [pc, #64]	@ (8001cc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim6_up) != HAL_OK)
 8001c8c:	480e      	ldr	r0, [pc, #56]	@ (8001cc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001c8e:	f001 fb2b 	bl	80032e8 <HAL_DMA_Init>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <HAL_TIM_Base_MspInit+0xa4>
      Error_Handler();
 8001c98:	f7ff fac8 	bl	800122c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001ca0:	621a      	str	r2, [r3, #32]
 8001ca2:	4a09      	ldr	r2, [pc, #36]	@ (8001cc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2105      	movs	r1, #5
 8001cac:	2036      	movs	r0, #54	@ 0x36
 8001cae:	f001 f8e7 	bl	8002e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001cb2:	2036      	movs	r0, #54	@ 0x36
 8001cb4:	f001 f900 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
}
 8001cb8:	bf00      	nop
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40001000 	.word	0x40001000
 8001cc8:	20000894 	.word	0x20000894
 8001ccc:	40026028 	.word	0x40026028

08001cd0 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_uart5_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001cd4:	4b14      	ldr	r3, [pc, #80]	@ (8001d28 <MX_UART4_Init+0x58>)
 8001cd6:	4a15      	ldr	r2, [pc, #84]	@ (8001d2c <MX_UART4_Init+0x5c>)
 8001cd8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001cda:	4b13      	ldr	r3, [pc, #76]	@ (8001d28 <MX_UART4_Init+0x58>)
 8001cdc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ce0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001ce2:	4b11      	ldr	r3, [pc, #68]	@ (8001d28 <MX_UART4_Init+0x58>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d28 <MX_UART4_Init+0x58>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001cee:	4b0e      	ldr	r3, [pc, #56]	@ (8001d28 <MX_UART4_Init+0x58>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d28 <MX_UART4_Init+0x58>)
 8001cf6:	220c      	movs	r2, #12
 8001cf8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8001d28 <MX_UART4_Init+0x58>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d00:	4b09      	ldr	r3, [pc, #36]	@ (8001d28 <MX_UART4_Init+0x58>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d06:	4b08      	ldr	r3, [pc, #32]	@ (8001d28 <MX_UART4_Init+0x58>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d0c:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <MX_UART4_Init+0x58>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001d12:	4805      	ldr	r0, [pc, #20]	@ (8001d28 <MX_UART4_Init+0x58>)
 8001d14:	f008 fcd8 	bl	800a6c8 <HAL_UART_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001d1e:	f7ff fa85 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	200008f4 	.word	0x200008f4
 8001d2c:	40004c00 	.word	0x40004c00

08001d30 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001d34:	4b14      	ldr	r3, [pc, #80]	@ (8001d88 <MX_UART5_Init+0x58>)
 8001d36:	4a15      	ldr	r2, [pc, #84]	@ (8001d8c <MX_UART5_Init+0x5c>)
 8001d38:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001d3a:	4b13      	ldr	r3, [pc, #76]	@ (8001d88 <MX_UART5_Init+0x58>)
 8001d3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d40:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001d42:	4b11      	ldr	r3, [pc, #68]	@ (8001d88 <MX_UART5_Init+0x58>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001d48:	4b0f      	ldr	r3, [pc, #60]	@ (8001d88 <MX_UART5_Init+0x58>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d88 <MX_UART5_Init+0x58>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001d54:	4b0c      	ldr	r3, [pc, #48]	@ (8001d88 <MX_UART5_Init+0x58>)
 8001d56:	220c      	movs	r2, #12
 8001d58:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d88 <MX_UART5_Init+0x58>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d60:	4b09      	ldr	r3, [pc, #36]	@ (8001d88 <MX_UART5_Init+0x58>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d66:	4b08      	ldr	r3, [pc, #32]	@ (8001d88 <MX_UART5_Init+0x58>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d6c:	4b06      	ldr	r3, [pc, #24]	@ (8001d88 <MX_UART5_Init+0x58>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001d72:	4805      	ldr	r0, [pc, #20]	@ (8001d88 <MX_UART5_Init+0x58>)
 8001d74:	f008 fca8 	bl	800a6c8 <HAL_UART_Init>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001d7e:	f7ff fa55 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	2000097c 	.word	0x2000097c
 8001d8c:	40005000 	.word	0x40005000

08001d90 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d94:	4b14      	ldr	r3, [pc, #80]	@ (8001de8 <MX_USART3_UART_Init+0x58>)
 8001d96:	4a15      	ldr	r2, [pc, #84]	@ (8001dec <MX_USART3_UART_Init+0x5c>)
 8001d98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d9a:	4b13      	ldr	r3, [pc, #76]	@ (8001de8 <MX_USART3_UART_Init+0x58>)
 8001d9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001da0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001da2:	4b11      	ldr	r3, [pc, #68]	@ (8001de8 <MX_USART3_UART_Init+0x58>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001da8:	4b0f      	ldr	r3, [pc, #60]	@ (8001de8 <MX_USART3_UART_Init+0x58>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001dae:	4b0e      	ldr	r3, [pc, #56]	@ (8001de8 <MX_USART3_UART_Init+0x58>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001db4:	4b0c      	ldr	r3, [pc, #48]	@ (8001de8 <MX_USART3_UART_Init+0x58>)
 8001db6:	220c      	movs	r2, #12
 8001db8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dba:	4b0b      	ldr	r3, [pc, #44]	@ (8001de8 <MX_USART3_UART_Init+0x58>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dc0:	4b09      	ldr	r3, [pc, #36]	@ (8001de8 <MX_USART3_UART_Init+0x58>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dc6:	4b08      	ldr	r3, [pc, #32]	@ (8001de8 <MX_USART3_UART_Init+0x58>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dcc:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <MX_USART3_UART_Init+0x58>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001dd2:	4805      	ldr	r0, [pc, #20]	@ (8001de8 <MX_USART3_UART_Init+0x58>)
 8001dd4:	f008 fc78 	bl	800a6c8 <HAL_UART_Init>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001dde:	f7ff fa25 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000a04 	.word	0x20000a04
 8001dec:	40004800 	.word	0x40004800

08001df0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b0b0      	sub	sp, #192	@ 0xc0
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e08:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e0c:	2284      	movs	r2, #132	@ 0x84
 8001e0e:	2100      	movs	r1, #0
 8001e10:	4618      	mov	r0, r3
 8001e12:	f01e fe21 	bl	8020a58 <memset>
  if(uartHandle->Instance==UART4)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4ab0      	ldr	r2, [pc, #704]	@ (80020dc <HAL_UART_MspInit+0x2ec>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d173      	bne.n	8001f08 <HAL_UART_MspInit+0x118>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001e20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e24:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001e26:	2300      	movs	r3, #0
 8001e28:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e2a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f006 fa44 	bl	80082bc <HAL_RCCEx_PeriphCLKConfig>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001e3a:	f7ff f9f7 	bl	800122c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001e3e:	4ba8      	ldr	r3, [pc, #672]	@ (80020e0 <HAL_UART_MspInit+0x2f0>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e42:	4aa7      	ldr	r2, [pc, #668]	@ (80020e0 <HAL_UART_MspInit+0x2f0>)
 8001e44:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001e48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e4a:	4ba5      	ldr	r3, [pc, #660]	@ (80020e0 <HAL_UART_MspInit+0x2f0>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e52:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e56:	4ba2      	ldr	r3, [pc, #648]	@ (80020e0 <HAL_UART_MspInit+0x2f0>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5a:	4aa1      	ldr	r2, [pc, #644]	@ (80020e0 <HAL_UART_MspInit+0x2f0>)
 8001e5c:	f043 0304 	orr.w	r3, r3, #4
 8001e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e62:	4b9f      	ldr	r3, [pc, #636]	@ (80020e0 <HAL_UART_MspInit+0x2f0>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e66:	f003 0304 	and.w	r3, r3, #4
 8001e6a:	623b      	str	r3, [r7, #32]
 8001e6c:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e6e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001e72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e76:	2302      	movs	r3, #2
 8001e78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e82:	2303      	movs	r3, #3
 8001e84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001e88:	2308      	movs	r3, #8
 8001e8a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e8e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001e92:	4619      	mov	r1, r3
 8001e94:	4893      	ldr	r0, [pc, #588]	@ (80020e4 <HAL_UART_MspInit+0x2f4>)
 8001e96:	f003 f915 	bl	80050c4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001e9a:	4b93      	ldr	r3, [pc, #588]	@ (80020e8 <HAL_UART_MspInit+0x2f8>)
 8001e9c:	4a93      	ldr	r2, [pc, #588]	@ (80020ec <HAL_UART_MspInit+0x2fc>)
 8001e9e:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001ea0:	4b91      	ldr	r3, [pc, #580]	@ (80020e8 <HAL_UART_MspInit+0x2f8>)
 8001ea2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001ea6:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ea8:	4b8f      	ldr	r3, [pc, #572]	@ (80020e8 <HAL_UART_MspInit+0x2f8>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eae:	4b8e      	ldr	r3, [pc, #568]	@ (80020e8 <HAL_UART_MspInit+0x2f8>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001eb4:	4b8c      	ldr	r3, [pc, #560]	@ (80020e8 <HAL_UART_MspInit+0x2f8>)
 8001eb6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001eba:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ebc:	4b8a      	ldr	r3, [pc, #552]	@ (80020e8 <HAL_UART_MspInit+0x2f8>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ec2:	4b89      	ldr	r3, [pc, #548]	@ (80020e8 <HAL_UART_MspInit+0x2f8>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001ec8:	4b87      	ldr	r3, [pc, #540]	@ (80020e8 <HAL_UART_MspInit+0x2f8>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ece:	4b86      	ldr	r3, [pc, #536]	@ (80020e8 <HAL_UART_MspInit+0x2f8>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ed4:	4b84      	ldr	r3, [pc, #528]	@ (80020e8 <HAL_UART_MspInit+0x2f8>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001eda:	4883      	ldr	r0, [pc, #524]	@ (80020e8 <HAL_UART_MspInit+0x2f8>)
 8001edc:	f001 fa04 	bl	80032e8 <HAL_DMA_Init>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001ee6:	f7ff f9a1 	bl	800122c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a7e      	ldr	r2, [pc, #504]	@ (80020e8 <HAL_UART_MspInit+0x2f8>)
 8001eee:	675a      	str	r2, [r3, #116]	@ 0x74
 8001ef0:	4a7d      	ldr	r2, [pc, #500]	@ (80020e8 <HAL_UART_MspInit+0x2f8>)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2105      	movs	r1, #5
 8001efa:	2034      	movs	r0, #52	@ 0x34
 8001efc:	f000 ffc0 	bl	8002e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001f00:	2034      	movs	r0, #52	@ 0x34
 8001f02:	f000 ffd9 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001f06:	e0e4      	b.n	80020d2 <HAL_UART_MspInit+0x2e2>
  else if(uartHandle->Instance==UART5)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a78      	ldr	r2, [pc, #480]	@ (80020f0 <HAL_UART_MspInit+0x300>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	f040 8095 	bne.w	800203e <HAL_UART_MspInit+0x24e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001f14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f18:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f1e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f22:	4618      	mov	r0, r3
 8001f24:	f006 f9ca 	bl	80082bc <HAL_RCCEx_PeriphCLKConfig>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_UART_MspInit+0x142>
      Error_Handler();
 8001f2e:	f7ff f97d 	bl	800122c <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001f32:	4b6b      	ldr	r3, [pc, #428]	@ (80020e0 <HAL_UART_MspInit+0x2f0>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f36:	4a6a      	ldr	r2, [pc, #424]	@ (80020e0 <HAL_UART_MspInit+0x2f0>)
 8001f38:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f3e:	4b68      	ldr	r3, [pc, #416]	@ (80020e0 <HAL_UART_MspInit+0x2f0>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f46:	61fb      	str	r3, [r7, #28]
 8001f48:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f4a:	4b65      	ldr	r3, [pc, #404]	@ (80020e0 <HAL_UART_MspInit+0x2f0>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4e:	4a64      	ldr	r2, [pc, #400]	@ (80020e0 <HAL_UART_MspInit+0x2f0>)
 8001f50:	f043 0304 	orr.w	r3, r3, #4
 8001f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f56:	4b62      	ldr	r3, [pc, #392]	@ (80020e0 <HAL_UART_MspInit+0x2f0>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5a:	f003 0304 	and.w	r3, r3, #4
 8001f5e:	61bb      	str	r3, [r7, #24]
 8001f60:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f62:	4b5f      	ldr	r3, [pc, #380]	@ (80020e0 <HAL_UART_MspInit+0x2f0>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f66:	4a5e      	ldr	r2, [pc, #376]	@ (80020e0 <HAL_UART_MspInit+0x2f0>)
 8001f68:	f043 0308 	orr.w	r3, r3, #8
 8001f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f6e:	4b5c      	ldr	r3, [pc, #368]	@ (80020e0 <HAL_UART_MspInit+0x2f0>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	617b      	str	r3, [r7, #20]
 8001f78:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f82:	2302      	movs	r3, #2
 8001f84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001f94:	2308      	movs	r3, #8
 8001f96:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f9a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4850      	ldr	r0, [pc, #320]	@ (80020e4 <HAL_UART_MspInit+0x2f4>)
 8001fa2:	f003 f88f 	bl	80050c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fa6:	2304      	movs	r3, #4
 8001fa8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fac:	2302      	movs	r3, #2
 8001fae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001fbe:	2308      	movs	r3, #8
 8001fc0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fc4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001fc8:	4619      	mov	r1, r3
 8001fca:	484a      	ldr	r0, [pc, #296]	@ (80020f4 <HAL_UART_MspInit+0x304>)
 8001fcc:	f003 f87a 	bl	80050c4 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8001fd0:	4b49      	ldr	r3, [pc, #292]	@ (80020f8 <HAL_UART_MspInit+0x308>)
 8001fd2:	4a4a      	ldr	r2, [pc, #296]	@ (80020fc <HAL_UART_MspInit+0x30c>)
 8001fd4:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8001fd6:	4b48      	ldr	r3, [pc, #288]	@ (80020f8 <HAL_UART_MspInit+0x308>)
 8001fd8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001fdc:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fde:	4b46      	ldr	r3, [pc, #280]	@ (80020f8 <HAL_UART_MspInit+0x308>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fe4:	4b44      	ldr	r3, [pc, #272]	@ (80020f8 <HAL_UART_MspInit+0x308>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fea:	4b43      	ldr	r3, [pc, #268]	@ (80020f8 <HAL_UART_MspInit+0x308>)
 8001fec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ff0:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ff2:	4b41      	ldr	r3, [pc, #260]	@ (80020f8 <HAL_UART_MspInit+0x308>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ff8:	4b3f      	ldr	r3, [pc, #252]	@ (80020f8 <HAL_UART_MspInit+0x308>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8001ffe:	4b3e      	ldr	r3, [pc, #248]	@ (80020f8 <HAL_UART_MspInit+0x308>)
 8002000:	2200      	movs	r2, #0
 8002002:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002004:	4b3c      	ldr	r3, [pc, #240]	@ (80020f8 <HAL_UART_MspInit+0x308>)
 8002006:	2200      	movs	r2, #0
 8002008:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800200a:	4b3b      	ldr	r3, [pc, #236]	@ (80020f8 <HAL_UART_MspInit+0x308>)
 800200c:	2200      	movs	r2, #0
 800200e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002010:	4839      	ldr	r0, [pc, #228]	@ (80020f8 <HAL_UART_MspInit+0x308>)
 8002012:	f001 f969 	bl	80032e8 <HAL_DMA_Init>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <HAL_UART_MspInit+0x230>
      Error_Handler();
 800201c:	f7ff f906 	bl	800122c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a35      	ldr	r2, [pc, #212]	@ (80020f8 <HAL_UART_MspInit+0x308>)
 8002024:	675a      	str	r2, [r3, #116]	@ 0x74
 8002026:	4a34      	ldr	r2, [pc, #208]	@ (80020f8 <HAL_UART_MspInit+0x308>)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800202c:	2200      	movs	r2, #0
 800202e:	2105      	movs	r1, #5
 8002030:	2035      	movs	r0, #53	@ 0x35
 8002032:	f000 ff25 	bl	8002e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002036:	2035      	movs	r0, #53	@ 0x35
 8002038:	f000 ff3e 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
}
 800203c:	e049      	b.n	80020d2 <HAL_UART_MspInit+0x2e2>
  else if(uartHandle->Instance==USART3)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a2f      	ldr	r2, [pc, #188]	@ (8002100 <HAL_UART_MspInit+0x310>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d144      	bne.n	80020d2 <HAL_UART_MspInit+0x2e2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002048:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800204c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800204e:	2300      	movs	r3, #0
 8002050:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002052:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002056:	4618      	mov	r0, r3
 8002058:	f006 f930 	bl	80082bc <HAL_RCCEx_PeriphCLKConfig>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <HAL_UART_MspInit+0x276>
      Error_Handler();
 8002062:	f7ff f8e3 	bl	800122c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002066:	4b1e      	ldr	r3, [pc, #120]	@ (80020e0 <HAL_UART_MspInit+0x2f0>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206a:	4a1d      	ldr	r2, [pc, #116]	@ (80020e0 <HAL_UART_MspInit+0x2f0>)
 800206c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002070:	6413      	str	r3, [r2, #64]	@ 0x40
 8002072:	4b1b      	ldr	r3, [pc, #108]	@ (80020e0 <HAL_UART_MspInit+0x2f0>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002076:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800207a:	613b      	str	r3, [r7, #16]
 800207c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800207e:	4b18      	ldr	r3, [pc, #96]	@ (80020e0 <HAL_UART_MspInit+0x2f0>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002082:	4a17      	ldr	r2, [pc, #92]	@ (80020e0 <HAL_UART_MspInit+0x2f0>)
 8002084:	f043 0308 	orr.w	r3, r3, #8
 8002088:	6313      	str	r3, [r2, #48]	@ 0x30
 800208a:	4b15      	ldr	r3, [pc, #84]	@ (80020e0 <HAL_UART_MspInit+0x2f0>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208e:	f003 0308 	and.w	r3, r3, #8
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002096:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800209a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209e:	2302      	movs	r3, #2
 80020a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020aa:	2303      	movs	r3, #3
 80020ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020b0:	2307      	movs	r3, #7
 80020b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020b6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80020ba:	4619      	mov	r1, r3
 80020bc:	480d      	ldr	r0, [pc, #52]	@ (80020f4 <HAL_UART_MspInit+0x304>)
 80020be:	f003 f801 	bl	80050c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80020c2:	2200      	movs	r2, #0
 80020c4:	2105      	movs	r1, #5
 80020c6:	2027      	movs	r0, #39	@ 0x27
 80020c8:	f000 feda 	bl	8002e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80020cc:	2027      	movs	r0, #39	@ 0x27
 80020ce:	f000 fef3 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
}
 80020d2:	bf00      	nop
 80020d4:	37c0      	adds	r7, #192	@ 0xc0
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40004c00 	.word	0x40004c00
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40020800 	.word	0x40020800
 80020e8:	20000a8c 	.word	0x20000a8c
 80020ec:	40026040 	.word	0x40026040
 80020f0:	40005000 	.word	0x40005000
 80020f4:	40020c00 	.word	0x40020c00
 80020f8:	20000aec 	.word	0x20000aec
 80020fc:	40026010 	.word	0x40026010
 8002100:	40004800 	.word	0x40004800

08002104 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002104:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800213c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002108:	f7ff fce0 	bl	8001acc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800210c:	480c      	ldr	r0, [pc, #48]	@ (8002140 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800210e:	490d      	ldr	r1, [pc, #52]	@ (8002144 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002110:	4a0d      	ldr	r2, [pc, #52]	@ (8002148 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002114:	e002      	b.n	800211c <LoopCopyDataInit>

08002116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800211a:	3304      	adds	r3, #4

0800211c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800211c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800211e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002120:	d3f9      	bcc.n	8002116 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002122:	4a0a      	ldr	r2, [pc, #40]	@ (800214c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002124:	4c0a      	ldr	r4, [pc, #40]	@ (8002150 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002128:	e001      	b.n	800212e <LoopFillZerobss>

0800212a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800212a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800212c:	3204      	adds	r2, #4

0800212e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800212e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002130:	d3fb      	bcc.n	800212a <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8002132:	f01e fd3d 	bl	8020bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002136:	f7fe ffd3 	bl	80010e0 <main>
  bx  lr    
 800213a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800213c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002144:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8002148:	08026984 	.word	0x08026984
  ldr r2, =_sbss
 800214c:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8002150:	2002d990 	.word	0x2002d990

08002154 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002154:	e7fe      	b.n	8002154 <ADC_IRQHandler>

08002156 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8002156:	b480      	push	{r7}
 8002158:	b083      	sub	sp, #12
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
 800215e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00b      	beq.n	800217e <LAN8742_RegisterBusIO+0x28>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d007      	beq.n	800217e <LAN8742_RegisterBusIO+0x28>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <LAN8742_RegisterBusIO+0x28>
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d102      	bne.n	8002184 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800217e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002182:	e014      	b.n	80021ae <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	691a      	ldr	r2, [r3, #16]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b086      	sub	sp, #24
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	2300      	movs	r3, #0
 80021c8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80021ca:	2300      	movs	r3, #0
 80021cc:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d139      	bne.n	800224a <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d002      	beq.n	80021e4 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2220      	movs	r2, #32
 80021e8:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	e01c      	b.n	800222a <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	f107 020c 	add.w	r2, r7, #12
 80021f8:	2112      	movs	r1, #18
 80021fa:	6978      	ldr	r0, [r7, #20]
 80021fc:	4798      	blx	r3
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	da03      	bge.n	800220c <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8002204:	f06f 0304 	mvn.w	r3, #4
 8002208:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800220a:	e00b      	b.n	8002224 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f003 031f 	and.w	r3, r3, #31
 8002212:	697a      	ldr	r2, [r7, #20]
 8002214:	429a      	cmp	r2, r3
 8002216:	d105      	bne.n	8002224 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
         break;
 8002222:	e005      	b.n	8002230 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	3301      	adds	r3, #1
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	2b1f      	cmp	r3, #31
 800222e:	d9df      	bls.n	80021f0 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b1f      	cmp	r3, #31
 8002236:	d902      	bls.n	800223e <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002238:	f06f 0302 	mvn.w	r3, #2
 800223c:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d102      	bne.n	800224a <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 800224a:	693b      	ldr	r3, [r7, #16]
 }
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6810      	ldr	r0, [r2, #0]
 8002268:	f107 020c 	add.w	r2, r7, #12
 800226c:	2101      	movs	r1, #1
 800226e:	4798      	blx	r3
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	da02      	bge.n	800227c <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002276:	f06f 0304 	mvn.w	r3, #4
 800227a:	e06e      	b.n	800235a <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6810      	ldr	r0, [r2, #0]
 8002284:	f107 020c 	add.w	r2, r7, #12
 8002288:	2101      	movs	r1, #1
 800228a:	4798      	blx	r3
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	da02      	bge.n	8002298 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002292:	f06f 0304 	mvn.w	r3, #4
 8002296:	e060      	b.n	800235a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e059      	b.n	800235a <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6810      	ldr	r0, [r2, #0]
 80022ae:	f107 020c 	add.w	r2, r7, #12
 80022b2:	2100      	movs	r1, #0
 80022b4:	4798      	blx	r3
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	da02      	bge.n	80022c2 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80022bc:	f06f 0304 	mvn.w	r3, #4
 80022c0:	e04b      	b.n	800235a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d11b      	bne.n	8002304 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d006      	beq.n	80022e4 <LAN8742_GetLinkState+0x90>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80022e0:	2302      	movs	r3, #2
 80022e2:	e03a      	b.n	800235a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e033      	b.n	800235a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80022fc:	2304      	movs	r3, #4
 80022fe:	e02c      	b.n	800235a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002300:	2305      	movs	r3, #5
 8002302:	e02a      	b.n	800235a <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6810      	ldr	r0, [r2, #0]
 800230c:	f107 020c 	add.w	r2, r7, #12
 8002310:	211f      	movs	r1, #31
 8002312:	4798      	blx	r3
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	da02      	bge.n	8002320 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800231a:	f06f 0304 	mvn.w	r3, #4
 800231e:	e01c      	b.n	800235a <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800232a:	2306      	movs	r3, #6
 800232c:	e015      	b.n	800235a <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f003 031c 	and.w	r3, r3, #28
 8002334:	2b18      	cmp	r3, #24
 8002336:	d101      	bne.n	800233c <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002338:	2302      	movs	r3, #2
 800233a:	e00e      	b.n	800235a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f003 031c 	and.w	r3, r3, #28
 8002342:	2b08      	cmp	r3, #8
 8002344:	d101      	bne.n	800234a <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002346:	2303      	movs	r3, #3
 8002348:	e007      	b.n	800235a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f003 031c 	and.w	r3, r3, #28
 8002350:	2b14      	cmp	r3, #20
 8002352:	d101      	bne.n	8002358 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002354:	2304      	movs	r3, #4
 8002356:	e000      	b.n	800235a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002358:	2305      	movs	r3, #5
    }
  }
}
 800235a:	4618      	mov	r0, r3
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002366:	2003      	movs	r0, #3
 8002368:	f000 fd7f 	bl	8002e6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800236c:	200f      	movs	r0, #15
 800236e:	f7ff f96f 	bl	8001650 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002372:	f7ff f945 	bl	8001600 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002380:	4b06      	ldr	r3, [pc, #24]	@ (800239c <HAL_IncTick+0x20>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	461a      	mov	r2, r3
 8002386:	4b06      	ldr	r3, [pc, #24]	@ (80023a0 <HAL_IncTick+0x24>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4413      	add	r3, r2
 800238c:	4a04      	ldr	r2, [pc, #16]	@ (80023a0 <HAL_IncTick+0x24>)
 800238e:	6013      	str	r3, [r2, #0]
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	20000008 	.word	0x20000008
 80023a0:	20000b4c 	.word	0x20000b4c

080023a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  return uwTick;
 80023a8:	4b03      	ldr	r3, [pc, #12]	@ (80023b8 <HAL_GetTick+0x14>)
 80023aa:	681b      	ldr	r3, [r3, #0]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	20000b4c 	.word	0x20000b4c

080023bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023c4:	f7ff ffee 	bl	80023a4 <HAL_GetTick>
 80023c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023d4:	d005      	beq.n	80023e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002400 <HAL_Delay+0x44>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4413      	add	r3, r2
 80023e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023e2:	bf00      	nop
 80023e4:	f7ff ffde 	bl	80023a4 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d8f7      	bhi.n	80023e4 <HAL_Delay+0x28>
  {
  }
}
 80023f4:	bf00      	nop
 80023f6:	bf00      	nop
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20000008 	.word	0x20000008

08002404 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800240c:	2300      	movs	r3, #0
 800240e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e031      	b.n	800247e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241e:	2b00      	cmp	r3, #0
 8002420:	d109      	bne.n	8002436 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7fe f92c 	bl	8000680 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243a:	f003 0310 	and.w	r3, r3, #16
 800243e:	2b00      	cmp	r3, #0
 8002440:	d116      	bne.n	8002470 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002446:	4b10      	ldr	r3, [pc, #64]	@ (8002488 <HAL_ADC_Init+0x84>)
 8002448:	4013      	ands	r3, r2
 800244a:	f043 0202 	orr.w	r2, r3, #2
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 fae0 	bl	8002a18 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002462:	f023 0303 	bic.w	r3, r3, #3
 8002466:	f043 0201 	orr.w	r2, r3, #1
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	641a      	str	r2, [r3, #64]	@ 0x40
 800246e:	e001      	b.n	8002474 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800247c:	7bfb      	ldrb	r3, [r7, #15]
}
 800247e:	4618      	mov	r0, r3
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	ffffeefd 	.word	0xffffeefd

0800248c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t counter = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d101      	bne.n	80024ae <HAL_ADC_Start_DMA+0x22>
 80024aa:	2302      	movs	r3, #2
 80024ac:	e0d6      	b.n	800265c <HAL_ADC_Start_DMA+0x1d0>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d018      	beq.n	80024f6 <HAL_ADC_Start_DMA+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 0201 	orr.w	r2, r2, #1
 80024d2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80024d4:	4b63      	ldr	r3, [pc, #396]	@ (8002664 <HAL_ADC_Start_DMA+0x1d8>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a63      	ldr	r2, [pc, #396]	@ (8002668 <HAL_ADC_Start_DMA+0x1dc>)
 80024da:	fba2 2303 	umull	r2, r3, r2, r3
 80024de:	0c9a      	lsrs	r2, r3, #18
 80024e0:	4613      	mov	r3, r2
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	4413      	add	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 80024e8:	e002      	b.n	80024f0 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	3b01      	subs	r3, #1
 80024ee:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f9      	bne.n	80024ea <HAL_ADC_Start_DMA+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b01      	cmp	r3, #1
 8002502:	f040 809e 	bne.w	8002642 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800250a:	4b58      	ldr	r3, [pc, #352]	@ (800266c <HAL_ADC_Start_DMA+0x1e0>)
 800250c:	4013      	ands	r3, r2
 800250e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002520:	2b00      	cmp	r3, #0
 8002522:	d007      	beq.n	8002534 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002528:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800252c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002538:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800253c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002540:	d106      	bne.n	8002550 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002546:	f023 0206 	bic.w	r2, r3, #6
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	645a      	str	r2, [r3, #68]	@ 0x44
 800254e:	e002      	b.n	8002556 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002562:	4a43      	ldr	r2, [pc, #268]	@ (8002670 <HAL_ADC_Start_DMA+0x1e4>)
 8002564:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800256a:	4a42      	ldr	r2, [pc, #264]	@ (8002674 <HAL_ADC_Start_DMA+0x1e8>)
 800256c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002572:	4a41      	ldr	r2, [pc, #260]	@ (8002678 <HAL_ADC_Start_DMA+0x1ec>)
 8002574:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800257e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800258e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689a      	ldr	r2, [r3, #8]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800259e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	334c      	adds	r3, #76	@ 0x4c
 80025aa:	4619      	mov	r1, r3
 80025ac:	68ba      	ldr	r2, [r7, #8]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f000 ff48 	bl	8003444 <HAL_DMA_Start_IT>
 80025b4:	4603      	mov	r3, r0
 80025b6:	75fb      	strb	r3, [r7, #23]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80025b8:	4b30      	ldr	r3, [pc, #192]	@ (800267c <HAL_ADC_Start_DMA+0x1f0>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 031f 	and.w	r3, r3, #31
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10f      	bne.n	80025e4 <HAL_ADC_Start_DMA+0x158>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d143      	bne.n	800265a <HAL_ADC_Start_DMA+0x1ce>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80025e0:	609a      	str	r2, [r3, #8]
 80025e2:	e03a      	b.n	800265a <HAL_ADC_Start_DMA+0x1ce>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a25      	ldr	r2, [pc, #148]	@ (8002680 <HAL_ADC_Start_DMA+0x1f4>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d10e      	bne.n	800260c <HAL_ADC_Start_DMA+0x180>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d107      	bne.n	800260c <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800260a:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800260c:	4b1b      	ldr	r3, [pc, #108]	@ (800267c <HAL_ADC_Start_DMA+0x1f0>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 0310 	and.w	r3, r3, #16
 8002614:	2b00      	cmp	r3, #0
 8002616:	d120      	bne.n	800265a <HAL_ADC_Start_DMA+0x1ce>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a19      	ldr	r2, [pc, #100]	@ (8002684 <HAL_ADC_Start_DMA+0x1f8>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d11b      	bne.n	800265a <HAL_ADC_Start_DMA+0x1ce>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d114      	bne.n	800265a <HAL_ADC_Start_DMA+0x1ce>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	e00b      	b.n	800265a <HAL_ADC_Start_DMA+0x1ce>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002646:	f043 0210 	orr.w	r2, r3, #16
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002652:	f043 0201 	orr.w	r2, r3, #1
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return status;
 800265a:	7dfb      	ldrb	r3, [r7, #23]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3718      	adds	r7, #24
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20000000 	.word	0x20000000
 8002668:	431bde83 	.word	0x431bde83
 800266c:	fffff8fe 	.word	0xfffff8fe
 8002670:	08002c0d 	.word	0x08002c0d
 8002674:	08002cc7 	.word	0x08002cc7
 8002678:	08002ce3 	.word	0x08002ce3
 800267c:	40012300 	.word	0x40012300
 8002680:	40012000 	.word	0x40012000
 8002684:	40012200 	.word	0x40012200

08002688 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002690:	2300      	movs	r3, #0
 8002692:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800269a:	2b01      	cmp	r3, #1
 800269c:	d101      	bne.n	80026a2 <HAL_ADC_Stop_DMA+0x1a>
 800269e:	2302      	movs	r3, #2
 80026a0:	e046      	b.n	8002730 <HAL_ADC_Stop_DMA+0xa8>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 0201 	bic.w	r2, r2, #1
 80026b8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d12e      	bne.n	8002726 <HAL_ADC_Stop_DMA+0x9e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026d6:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d10f      	bne.n	8002706 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 ff0a 	bl	8003504 <HAL_DMA_Abort>
 80026f0:	4603      	mov	r3, r0
 80026f2:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80026f4:	7bfb      	ldrb	r3, [r7, #15]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d005      	beq.n	8002706 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8002714:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800271a:	4b07      	ldr	r3, [pc, #28]	@ (8002738 <HAL_ADC_Stop_DMA+0xb0>)
 800271c:	4013      	ands	r3, r2
 800271e:	f043 0201 	orr.w	r2, r3, #1
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800272e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	ffffeefe 	.word	0xffffeefe

0800273c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002778:	2b01      	cmp	r3, #1
 800277a:	d101      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x1c>
 800277c:	2302      	movs	r3, #2
 800277e:	e13a      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x292>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2b09      	cmp	r3, #9
 800278e:	d93a      	bls.n	8002806 <HAL_ADC_ConfigChannel+0xa2>
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002798:	d035      	beq.n	8002806 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68d9      	ldr	r1, [r3, #12]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	461a      	mov	r2, r3
 80027a8:	4613      	mov	r3, r2
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	4413      	add	r3, r2
 80027ae:	3b1e      	subs	r3, #30
 80027b0:	2207      	movs	r2, #7
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43da      	mvns	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	400a      	ands	r2, r1
 80027be:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a8f      	ldr	r2, [pc, #572]	@ (8002a04 <HAL_ADC_ConfigChannel+0x2a0>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d10a      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68d9      	ldr	r1, [r3, #12]
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	061a      	lsls	r2, r3, #24
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027de:	e039      	b.n	8002854 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68d9      	ldr	r1, [r3, #12]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	4618      	mov	r0, r3
 80027f2:	4603      	mov	r3, r0
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	4403      	add	r3, r0
 80027f8:	3b1e      	subs	r3, #30
 80027fa:	409a      	lsls	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002804:	e026      	b.n	8002854 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6919      	ldr	r1, [r3, #16]
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	b29b      	uxth	r3, r3
 8002812:	461a      	mov	r2, r3
 8002814:	4613      	mov	r3, r2
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	4413      	add	r3, r2
 800281a:	f003 031f 	and.w	r3, r3, #31
 800281e:	2207      	movs	r2, #7
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43da      	mvns	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	400a      	ands	r2, r1
 800282c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6919      	ldr	r1, [r3, #16]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	b29b      	uxth	r3, r3
 800283e:	4618      	mov	r0, r3
 8002840:	4603      	mov	r3, r0
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	4403      	add	r3, r0
 8002846:	f003 031f 	and.w	r3, r3, #31
 800284a:	409a      	lsls	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b06      	cmp	r3, #6
 800285a:	d824      	bhi.n	80028a6 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	4613      	mov	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	3b05      	subs	r3, #5
 800286e:	221f      	movs	r2, #31
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	43da      	mvns	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	400a      	ands	r2, r1
 800287c:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	b29b      	uxth	r3, r3
 800288a:	4618      	mov	r0, r3
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	3b05      	subs	r3, #5
 8002898:	fa00 f203 	lsl.w	r2, r0, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	635a      	str	r2, [r3, #52]	@ 0x34
 80028a4:	e04c      	b.n	8002940 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2b0c      	cmp	r3, #12
 80028ac:	d824      	bhi.n	80028f8 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	3b23      	subs	r3, #35	@ 0x23
 80028c0:	221f      	movs	r2, #31
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	43da      	mvns	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	400a      	ands	r2, r1
 80028ce:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	b29b      	uxth	r3, r3
 80028dc:	4618      	mov	r0, r3
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	4613      	mov	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	3b23      	subs	r3, #35	@ 0x23
 80028ea:	fa00 f203 	lsl.w	r2, r0, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80028f6:	e023      	b.n	8002940 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	4613      	mov	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	3b41      	subs	r3, #65	@ 0x41
 800290a:	221f      	movs	r2, #31
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	43da      	mvns	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	400a      	ands	r2, r1
 8002918:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	b29b      	uxth	r3, r3
 8002926:	4618      	mov	r0, r3
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	4613      	mov	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	3b41      	subs	r3, #65	@ 0x41
 8002934:	fa00 f203 	lsl.w	r2, r0, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a30      	ldr	r2, [pc, #192]	@ (8002a08 <HAL_ADC_ConfigChannel+0x2a4>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d10a      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x1fc>
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002952:	d105      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002954:	4b2d      	ldr	r3, [pc, #180]	@ (8002a0c <HAL_ADC_ConfigChannel+0x2a8>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	4a2c      	ldr	r2, [pc, #176]	@ (8002a0c <HAL_ADC_ConfigChannel+0x2a8>)
 800295a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800295e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a28      	ldr	r2, [pc, #160]	@ (8002a08 <HAL_ADC_ConfigChannel+0x2a4>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d10f      	bne.n	800298a <HAL_ADC_ConfigChannel+0x226>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2b12      	cmp	r3, #18
 8002970:	d10b      	bne.n	800298a <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002972:	4b26      	ldr	r3, [pc, #152]	@ (8002a0c <HAL_ADC_ConfigChannel+0x2a8>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	4a25      	ldr	r2, [pc, #148]	@ (8002a0c <HAL_ADC_ConfigChannel+0x2a8>)
 8002978:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800297c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800297e:	4b23      	ldr	r3, [pc, #140]	@ (8002a0c <HAL_ADC_ConfigChannel+0x2a8>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	4a22      	ldr	r2, [pc, #136]	@ (8002a0c <HAL_ADC_ConfigChannel+0x2a8>)
 8002984:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002988:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a1e      	ldr	r2, [pc, #120]	@ (8002a08 <HAL_ADC_ConfigChannel+0x2a4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d12b      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x288>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a1a      	ldr	r2, [pc, #104]	@ (8002a04 <HAL_ADC_ConfigChannel+0x2a0>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d003      	beq.n	80029a6 <HAL_ADC_ConfigChannel+0x242>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2b11      	cmp	r3, #17
 80029a4:	d122      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80029a6:	4b19      	ldr	r3, [pc, #100]	@ (8002a0c <HAL_ADC_ConfigChannel+0x2a8>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	4a18      	ldr	r2, [pc, #96]	@ (8002a0c <HAL_ADC_ConfigChannel+0x2a8>)
 80029ac:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80029b0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80029b2:	4b16      	ldr	r3, [pc, #88]	@ (8002a0c <HAL_ADC_ConfigChannel+0x2a8>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	4a15      	ldr	r2, [pc, #84]	@ (8002a0c <HAL_ADC_ConfigChannel+0x2a8>)
 80029b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80029bc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a10      	ldr	r2, [pc, #64]	@ (8002a04 <HAL_ADC_ConfigChannel+0x2a0>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d111      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80029c8:	4b11      	ldr	r3, [pc, #68]	@ (8002a10 <HAL_ADC_ConfigChannel+0x2ac>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a11      	ldr	r2, [pc, #68]	@ (8002a14 <HAL_ADC_ConfigChannel+0x2b0>)
 80029ce:	fba2 2303 	umull	r2, r3, r2, r3
 80029d2:	0c9a      	lsrs	r2, r3, #18
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80029de:	e002      	b.n	80029e6 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	3b01      	subs	r3, #1
 80029e4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1f9      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	10000012 	.word	0x10000012
 8002a08:	40012000 	.word	0x40012000
 8002a0c:	40012300 	.word	0x40012300
 8002a10:	20000000 	.word	0x20000000
 8002a14:	431bde83 	.word	0x431bde83

08002a18 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002a20:	4b78      	ldr	r3, [pc, #480]	@ (8002c04 <ADC_Init+0x1ec>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	4a77      	ldr	r2, [pc, #476]	@ (8002c04 <ADC_Init+0x1ec>)
 8002a26:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002a2a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002a2c:	4b75      	ldr	r3, [pc, #468]	@ (8002c04 <ADC_Init+0x1ec>)
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	4973      	ldr	r1, [pc, #460]	@ (8002c04 <ADC_Init+0x1ec>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6859      	ldr	r1, [r3, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	021a      	lsls	r2, r3, #8
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002a6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6859      	ldr	r1, [r3, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6899      	ldr	r1, [r3, #8]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa6:	4a58      	ldr	r2, [pc, #352]	@ (8002c08 <ADC_Init+0x1f0>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d022      	beq.n	8002af2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689a      	ldr	r2, [r3, #8]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002aba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6899      	ldr	r1, [r3, #8]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002adc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6899      	ldr	r1, [r3, #8]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	e00f      	b.n	8002b12 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b10:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 0202 	bic.w	r2, r2, #2
 8002b20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6899      	ldr	r1, [r3, #8]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	005a      	lsls	r2, r3, #1
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d01b      	beq.n	8002b78 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b4e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002b5e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6859      	ldr	r1, [r3, #4]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	035a      	lsls	r2, r3, #13
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	605a      	str	r2, [r3, #4]
 8002b76:	e007      	b.n	8002b88 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b86:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002b96:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	051a      	lsls	r2, r3, #20
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002bbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6899      	ldr	r1, [r3, #8]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002bca:	025a      	lsls	r2, r3, #9
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002be2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6899      	ldr	r1, [r3, #8]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	029a      	lsls	r2, r3, #10
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	609a      	str	r2, [r3, #8]
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	40012300 	.word	0x40012300
 8002c08:	0f000001 	.word	0x0f000001

08002c0c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c18:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d13c      	bne.n	8002ca0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d12b      	bne.n	8002c98 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d127      	bne.n	8002c98 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c4e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d006      	beq.n	8002c64 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d119      	bne.n	8002c98 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0220 	bic.w	r2, r2, #32
 8002c72:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c78:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d105      	bne.n	8002c98 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c90:	f043 0201 	orr.w	r2, r3, #1
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f01c fbc9 	bl	801f430 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c9e:	e00e      	b.n	8002cbe <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca4:	f003 0310 	and.w	r3, r3, #16
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f7ff fd4f 	bl	8002750 <HAL_ADC_ErrorCallback>
}
 8002cb2:	e004      	b.n	8002cbe <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	4798      	blx	r3
}
 8002cbe:	bf00      	nop
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b084      	sub	sp, #16
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f7ff fd31 	bl	800273c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cda:	bf00      	nop
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b084      	sub	sp, #16
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cee:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2240      	movs	r2, #64	@ 0x40
 8002cf4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cfa:	f043 0204 	orr.w	r2, r3, #4
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f7ff fd24 	bl	8002750 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d08:	bf00      	nop
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d20:	4b0b      	ldr	r3, [pc, #44]	@ (8002d50 <__NVIC_SetPriorityGrouping+0x40>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d26:	68ba      	ldr	r2, [r7, #8]
 8002d28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d38:	4b06      	ldr	r3, [pc, #24]	@ (8002d54 <__NVIC_SetPriorityGrouping+0x44>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d3e:	4a04      	ldr	r2, [pc, #16]	@ (8002d50 <__NVIC_SetPriorityGrouping+0x40>)
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	60d3      	str	r3, [r2, #12]
}
 8002d44:	bf00      	nop
 8002d46:	3714      	adds	r7, #20
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	e000ed00 	.word	0xe000ed00
 8002d54:	05fa0000 	.word	0x05fa0000

08002d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d5c:	4b04      	ldr	r3, [pc, #16]	@ (8002d70 <__NVIC_GetPriorityGrouping+0x18>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	0a1b      	lsrs	r3, r3, #8
 8002d62:	f003 0307 	and.w	r3, r3, #7
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	e000ed00 	.word	0xe000ed00

08002d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	db0b      	blt.n	8002d9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d86:	79fb      	ldrb	r3, [r7, #7]
 8002d88:	f003 021f 	and.w	r2, r3, #31
 8002d8c:	4907      	ldr	r1, [pc, #28]	@ (8002dac <__NVIC_EnableIRQ+0x38>)
 8002d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d92:	095b      	lsrs	r3, r3, #5
 8002d94:	2001      	movs	r0, #1
 8002d96:	fa00 f202 	lsl.w	r2, r0, r2
 8002d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	e000e100 	.word	0xe000e100

08002db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4603      	mov	r3, r0
 8002db8:	6039      	str	r1, [r7, #0]
 8002dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	db0a      	blt.n	8002dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	b2da      	uxtb	r2, r3
 8002dc8:	490c      	ldr	r1, [pc, #48]	@ (8002dfc <__NVIC_SetPriority+0x4c>)
 8002dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dce:	0112      	lsls	r2, r2, #4
 8002dd0:	b2d2      	uxtb	r2, r2
 8002dd2:	440b      	add	r3, r1
 8002dd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dd8:	e00a      	b.n	8002df0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	4908      	ldr	r1, [pc, #32]	@ (8002e00 <__NVIC_SetPriority+0x50>)
 8002de0:	79fb      	ldrb	r3, [r7, #7]
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	3b04      	subs	r3, #4
 8002de8:	0112      	lsls	r2, r2, #4
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	440b      	add	r3, r1
 8002dee:	761a      	strb	r2, [r3, #24]
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	e000e100 	.word	0xe000e100
 8002e00:	e000ed00 	.word	0xe000ed00

08002e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b089      	sub	sp, #36	@ 0x24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	f1c3 0307 	rsb	r3, r3, #7
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	bf28      	it	cs
 8002e22:	2304      	movcs	r3, #4
 8002e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	3304      	adds	r3, #4
 8002e2a:	2b06      	cmp	r3, #6
 8002e2c:	d902      	bls.n	8002e34 <NVIC_EncodePriority+0x30>
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	3b03      	subs	r3, #3
 8002e32:	e000      	b.n	8002e36 <NVIC_EncodePriority+0x32>
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43da      	mvns	r2, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	401a      	ands	r2, r3
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e4c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	fa01 f303 	lsl.w	r3, r1, r3
 8002e56:	43d9      	mvns	r1, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e5c:	4313      	orrs	r3, r2
         );
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3724      	adds	r7, #36	@ 0x24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7ff ff4c 	bl	8002d10 <__NVIC_SetPriorityGrouping>
}
 8002e78:	bf00      	nop
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
 8002e8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e92:	f7ff ff61 	bl	8002d58 <__NVIC_GetPriorityGrouping>
 8002e96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	68b9      	ldr	r1, [r7, #8]
 8002e9c:	6978      	ldr	r0, [r7, #20]
 8002e9e:	f7ff ffb1 	bl	8002e04 <NVIC_EncodePriority>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ea8:	4611      	mov	r1, r2
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff ff80 	bl	8002db0 <__NVIC_SetPriority>
}
 8002eb0:	bf00      	nop
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff ff54 	bl	8002d74 <__NVIC_EnableIRQ>
}
 8002ecc:	bf00      	nop
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e054      	b.n	8002f90 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	7f5b      	ldrb	r3, [r3, #29]
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d105      	bne.n	8002efc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7fd fc56 	bl	80007a8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2202      	movs	r2, #2
 8002f00:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	791b      	ldrb	r3, [r3, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10c      	bne.n	8002f24 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a22      	ldr	r2, [pc, #136]	@ (8002f98 <HAL_CRC_Init+0xc4>)
 8002f10:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 0218 	bic.w	r2, r2, #24
 8002f20:	609a      	str	r2, [r3, #8]
 8002f22:	e00c      	b.n	8002f3e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6899      	ldr	r1, [r3, #8]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f94c 	bl	80031cc <HAL_CRCEx_Polynomial_Set>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e028      	b.n	8002f90 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	795b      	ldrb	r3, [r3, #5]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d105      	bne.n	8002f52 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f4e:	611a      	str	r2, [r3, #16]
 8002f50:	e004      	b.n	8002f5c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	6912      	ldr	r2, [r2, #16]
 8002f5a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	695a      	ldr	r2, [r3, #20]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	699a      	ldr	r2, [r3, #24]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	04c11db7 	.word	0x04c11db7

08002f9c <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002fa8:	2300      	movs	r3, #0
 8002faa:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f042 0201 	orr.w	r2, r2, #1
 8002fc0:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	2b03      	cmp	r3, #3
 8002fc8:	d006      	beq.n	8002fd8 <HAL_CRC_Calculate+0x3c>
 8002fca:	2b03      	cmp	r3, #3
 8002fcc:	d829      	bhi.n	8003022 <HAL_CRC_Calculate+0x86>
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d019      	beq.n	8003006 <HAL_CRC_Calculate+0x6a>
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d01e      	beq.n	8003014 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8002fd6:	e024      	b.n	8003022 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]
 8002fdc:	e00a      	b.n	8002ff4 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	441a      	add	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6812      	ldr	r2, [r2, #0]
 8002fec:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	617b      	str	r3, [r7, #20]
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d3f0      	bcc.n	8002fde <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	613b      	str	r3, [r7, #16]
      break;
 8003004:	e00e      	b.n	8003024 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	68b9      	ldr	r1, [r7, #8]
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 f812 	bl	8003034 <CRC_Handle_8>
 8003010:	6138      	str	r0, [r7, #16]
      break;
 8003012:	e007      	b.n	8003024 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	68b9      	ldr	r1, [r7, #8]
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f000 f89d 	bl	8003158 <CRC_Handle_16>
 800301e:	6138      	str	r0, [r7, #16]
      break;
 8003020:	e000      	b.n	8003024 <HAL_CRC_Calculate+0x88>
      break;
 8003022:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2201      	movs	r2, #1
 8003028:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800302a:	693b      	ldr	r3, [r7, #16]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8003034:	b480      	push	{r7}
 8003036:	b089      	sub	sp, #36	@ 0x24
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003040:	2300      	movs	r3, #0
 8003042:	61fb      	str	r3, [r7, #28]
 8003044:	e023      	b.n	800308e <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	4413      	add	r3, r2
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	3301      	adds	r3, #1
 8003058:	68b9      	ldr	r1, [r7, #8]
 800305a:	440b      	add	r3, r1
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003060:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	3302      	adds	r3, #2
 8003068:	68b9      	ldr	r1, [r7, #8]
 800306a:	440b      	add	r3, r1
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003070:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	3303      	adds	r3, #3
 8003078:	68b9      	ldr	r1, [r7, #8]
 800307a:	440b      	add	r3, r1
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003084:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003086:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	3301      	adds	r3, #1
 800308c:	61fb      	str	r3, [r7, #28]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	089b      	lsrs	r3, r3, #2
 8003092:	69fa      	ldr	r2, [r7, #28]
 8003094:	429a      	cmp	r2, r3
 8003096:	d3d6      	bcc.n	8003046 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d051      	beq.n	8003146 <CRC_Handle_8+0x112>
  {
    if ((BufferLength % 4U) == 1U)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f003 0303 	and.w	r3, r3, #3
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d108      	bne.n	80030be <CRC_Handle_8+0x8a>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	4413      	add	r3, r2
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	6812      	ldr	r2, [r2, #0]
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	7013      	strb	r3, [r2, #0]
 80030bc:	e043      	b.n	8003146 <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 2U)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f003 0303 	and.w	r3, r3, #3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d118      	bne.n	80030fa <CRC_Handle_8+0xc6>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	68ba      	ldr	r2, [r7, #8]
 80030ce:	4413      	add	r3, r2
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	b21b      	sxth	r3, r3
 80030d4:	021b      	lsls	r3, r3, #8
 80030d6:	b21a      	sxth	r2, r3
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	3301      	adds	r3, #1
 80030de:	68b9      	ldr	r1, [r7, #8]
 80030e0:	440b      	add	r3, r1
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	b21b      	sxth	r3, r3
 80030e6:	4313      	orrs	r3, r2
 80030e8:	b21b      	sxth	r3, r3
 80030ea:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	8b7a      	ldrh	r2, [r7, #26]
 80030f6:	801a      	strh	r2, [r3, #0]
 80030f8:	e025      	b.n	8003146 <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 3U)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f003 0303 	and.w	r3, r3, #3
 8003100:	2b03      	cmp	r3, #3
 8003102:	d120      	bne.n	8003146 <CRC_Handle_8+0x112>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	4413      	add	r3, r2
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	b21b      	sxth	r3, r3
 8003110:	021b      	lsls	r3, r3, #8
 8003112:	b21a      	sxth	r2, r3
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	3301      	adds	r3, #1
 800311a:	68b9      	ldr	r1, [r7, #8]
 800311c:	440b      	add	r3, r1
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	b21b      	sxth	r3, r3
 8003122:	4313      	orrs	r3, r2
 8003124:	b21b      	sxth	r3, r3
 8003126:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	8b7a      	ldrh	r2, [r7, #26]
 8003132:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	3302      	adds	r3, #2
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	4413      	add	r3, r2
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	6812      	ldr	r2, [r2, #0]
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	7013      	strb	r3, [r2, #0]
      /* Nothing to do */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3724      	adds	r7, #36	@ 0x24
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8003158:	b480      	push	{r7}
 800315a:	b087      	sub	sp, #28
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003164:	2300      	movs	r3, #0
 8003166:	617b      	str	r3, [r7, #20]
 8003168:	e013      	b.n	8003192 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	4413      	add	r3, r2
 8003172:	881b      	ldrh	r3, [r3, #0]
 8003174:	041a      	lsls	r2, r3, #16
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	3302      	adds	r3, #2
 800317c:	68b9      	ldr	r1, [r7, #8]
 800317e:	440b      	add	r3, r1
 8003180:	881b      	ldrh	r3, [r3, #0]
 8003182:	4619      	mov	r1, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	430a      	orrs	r2, r1
 800318a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	3301      	adds	r3, #1
 8003190:	617b      	str	r3, [r7, #20]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	085b      	lsrs	r3, r3, #1
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	429a      	cmp	r2, r3
 800319a:	d3e6      	bcc.n	800316a <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d009      	beq.n	80031ba <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	4413      	add	r3, r2
 80031b4:	881a      	ldrh	r2, [r3, #0]
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	371c      	adds	r7, #28
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031d8:	2300      	movs	r3, #0
 80031da:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80031dc:	231f      	movs	r3, #31
 80031de:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d102      	bne.n	80031f0 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	75fb      	strb	r3, [r7, #23]
 80031ee:	e063      	b.n	80032b8 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80031f0:	bf00      	nop
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1e5a      	subs	r2, r3, #1
 80031f6:	613a      	str	r2, [r7, #16]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d009      	beq.n	8003210 <HAL_CRCEx_Polynomial_Set+0x44>
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	f003 031f 	and.w	r3, r3, #31
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	fa22 f303 	lsr.w	r3, r2, r3
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0f0      	beq.n	80031f2 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b18      	cmp	r3, #24
 8003214:	d846      	bhi.n	80032a4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8003216:	a201      	add	r2, pc, #4	@ (adr r2, 800321c <HAL_CRCEx_Polynomial_Set+0x50>)
 8003218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321c:	080032ab 	.word	0x080032ab
 8003220:	080032a5 	.word	0x080032a5
 8003224:	080032a5 	.word	0x080032a5
 8003228:	080032a5 	.word	0x080032a5
 800322c:	080032a5 	.word	0x080032a5
 8003230:	080032a5 	.word	0x080032a5
 8003234:	080032a5 	.word	0x080032a5
 8003238:	080032a5 	.word	0x080032a5
 800323c:	08003299 	.word	0x08003299
 8003240:	080032a5 	.word	0x080032a5
 8003244:	080032a5 	.word	0x080032a5
 8003248:	080032a5 	.word	0x080032a5
 800324c:	080032a5 	.word	0x080032a5
 8003250:	080032a5 	.word	0x080032a5
 8003254:	080032a5 	.word	0x080032a5
 8003258:	080032a5 	.word	0x080032a5
 800325c:	0800328d 	.word	0x0800328d
 8003260:	080032a5 	.word	0x080032a5
 8003264:	080032a5 	.word	0x080032a5
 8003268:	080032a5 	.word	0x080032a5
 800326c:	080032a5 	.word	0x080032a5
 8003270:	080032a5 	.word	0x080032a5
 8003274:	080032a5 	.word	0x080032a5
 8003278:	080032a5 	.word	0x080032a5
 800327c:	08003281 	.word	0x08003281
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	2b06      	cmp	r3, #6
 8003284:	d913      	bls.n	80032ae <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800328a:	e010      	b.n	80032ae <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	2b07      	cmp	r3, #7
 8003290:	d90f      	bls.n	80032b2 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003296:	e00c      	b.n	80032b2 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	2b0f      	cmp	r3, #15
 800329c:	d90b      	bls.n	80032b6 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80032a2:	e008      	b.n	80032b6 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	75fb      	strb	r3, [r7, #23]
        break;
 80032a8:	e006      	b.n	80032b8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80032aa:	bf00      	nop
 80032ac:	e004      	b.n	80032b8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80032ae:	bf00      	nop
 80032b0:	e002      	b.n	80032b8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80032b2:	bf00      	nop
 80032b4:	e000      	b.n	80032b8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80032b6:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80032b8:	7dfb      	ldrb	r3, [r7, #23]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10d      	bne.n	80032da <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f023 0118 	bic.w	r1, r3, #24
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80032da:	7dfb      	ldrb	r3, [r7, #23]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	371c      	adds	r7, #28
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032f4:	f7ff f856 	bl	80023a4 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e099      	b.n	8003438 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 0201 	bic.w	r2, r2, #1
 8003322:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003324:	e00f      	b.n	8003346 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003326:	f7ff f83d 	bl	80023a4 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b05      	cmp	r3, #5
 8003332:	d908      	bls.n	8003346 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2220      	movs	r2, #32
 8003338:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2203      	movs	r2, #3
 800333e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e078      	b.n	8003438 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1e8      	bne.n	8003326 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	4b38      	ldr	r3, [pc, #224]	@ (8003440 <HAL_DMA_Init+0x158>)
 8003360:	4013      	ands	r3, r2
 8003362:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685a      	ldr	r2, [r3, #4]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003372:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800337e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800338a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	4313      	orrs	r3, r2
 8003396:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339c:	2b04      	cmp	r3, #4
 800339e:	d107      	bne.n	80033b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a8:	4313      	orrs	r3, r2
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	f023 0307 	bic.w	r3, r3, #7
 80033c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d117      	bne.n	800340a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00e      	beq.n	800340a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 fb77 	bl	8003ae0 <DMA_CheckFifoParam>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d008      	beq.n	800340a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2240      	movs	r2, #64	@ 0x40
 80033fc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003406:	2301      	movs	r3, #1
 8003408:	e016      	b.n	8003438 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 fb2e 	bl	8003a74 <DMA_CalcBaseAndBitshift>
 8003418:	4603      	mov	r3, r0
 800341a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003420:	223f      	movs	r2, #63	@ 0x3f
 8003422:	409a      	lsls	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3718      	adds	r7, #24
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	f010803f 	.word	0xf010803f

08003444 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
 8003450:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003452:	2300      	movs	r3, #0
 8003454:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800345a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_DMA_Start_IT+0x26>
 8003466:	2302      	movs	r3, #2
 8003468:	e048      	b.n	80034fc <HAL_DMA_Start_IT+0xb8>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b01      	cmp	r3, #1
 800347c:	d137      	bne.n	80034ee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2202      	movs	r2, #2
 8003482:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	68b9      	ldr	r1, [r7, #8]
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f000 fac0 	bl	8003a18 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800349c:	223f      	movs	r2, #63	@ 0x3f
 800349e:	409a      	lsls	r2, r3
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f042 0216 	orr.w	r2, r2, #22
 80034b2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695a      	ldr	r2, [r3, #20]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80034c2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d007      	beq.n	80034dc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0208 	orr.w	r2, r2, #8
 80034da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 0201 	orr.w	r2, r2, #1
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	e005      	b.n	80034fa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034f6:	2302      	movs	r3, #2
 80034f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80034fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003510:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003512:	f7fe ff47 	bl	80023a4 <HAL_GetTick>
 8003516:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d008      	beq.n	8003536 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2280      	movs	r2, #128	@ 0x80
 8003528:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e052      	b.n	80035dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0216 	bic.w	r2, r2, #22
 8003544:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	695a      	ldr	r2, [r3, #20]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003554:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355a:	2b00      	cmp	r3, #0
 800355c:	d103      	bne.n	8003566 <HAL_DMA_Abort+0x62>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003562:	2b00      	cmp	r3, #0
 8003564:	d007      	beq.n	8003576 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 0208 	bic.w	r2, r2, #8
 8003574:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 0201 	bic.w	r2, r2, #1
 8003584:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003586:	e013      	b.n	80035b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003588:	f7fe ff0c 	bl	80023a4 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b05      	cmp	r3, #5
 8003594:	d90c      	bls.n	80035b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2220      	movs	r2, #32
 800359a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2203      	movs	r2, #3
 80035a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e015      	b.n	80035dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1e4      	bne.n	8003588 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035c2:	223f      	movs	r2, #63	@ 0x3f
 80035c4:	409a      	lsls	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d004      	beq.n	8003602 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2280      	movs	r2, #128	@ 0x80
 80035fc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e00c      	b.n	800361c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2205      	movs	r2, #5
 8003606:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 0201 	bic.w	r2, r2, #1
 8003618:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003630:	2300      	movs	r3, #0
 8003632:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003634:	4b8e      	ldr	r3, [pc, #568]	@ (8003870 <HAL_DMA_IRQHandler+0x248>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a8e      	ldr	r2, [pc, #568]	@ (8003874 <HAL_DMA_IRQHandler+0x24c>)
 800363a:	fba2 2303 	umull	r2, r3, r2, r3
 800363e:	0a9b      	lsrs	r3, r3, #10
 8003640:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003646:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003652:	2208      	movs	r2, #8
 8003654:	409a      	lsls	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	4013      	ands	r3, r2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d01a      	beq.n	8003694 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b00      	cmp	r3, #0
 800366a:	d013      	beq.n	8003694 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0204 	bic.w	r2, r2, #4
 800367a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003680:	2208      	movs	r2, #8
 8003682:	409a      	lsls	r2, r3
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800368c:	f043 0201 	orr.w	r2, r3, #1
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003698:	2201      	movs	r2, #1
 800369a:	409a      	lsls	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	4013      	ands	r3, r2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d012      	beq.n	80036ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00b      	beq.n	80036ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b6:	2201      	movs	r2, #1
 80036b8:	409a      	lsls	r2, r3
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036c2:	f043 0202 	orr.w	r2, r3, #2
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ce:	2204      	movs	r2, #4
 80036d0:	409a      	lsls	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	4013      	ands	r3, r2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d012      	beq.n	8003700 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00b      	beq.n	8003700 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ec:	2204      	movs	r2, #4
 80036ee:	409a      	lsls	r2, r3
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036f8:	f043 0204 	orr.w	r2, r3, #4
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003704:	2210      	movs	r2, #16
 8003706:	409a      	lsls	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4013      	ands	r3, r2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d043      	beq.n	8003798 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0308 	and.w	r3, r3, #8
 800371a:	2b00      	cmp	r3, #0
 800371c:	d03c      	beq.n	8003798 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003722:	2210      	movs	r2, #16
 8003724:	409a      	lsls	r2, r3
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d018      	beq.n	800376a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d108      	bne.n	8003758 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374a:	2b00      	cmp	r3, #0
 800374c:	d024      	beq.n	8003798 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	4798      	blx	r3
 8003756:	e01f      	b.n	8003798 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800375c:	2b00      	cmp	r3, #0
 800375e:	d01b      	beq.n	8003798 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	4798      	blx	r3
 8003768:	e016      	b.n	8003798 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003774:	2b00      	cmp	r3, #0
 8003776:	d107      	bne.n	8003788 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0208 	bic.w	r2, r2, #8
 8003786:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800379c:	2220      	movs	r2, #32
 800379e:	409a      	lsls	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	4013      	ands	r3, r2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 808f 	beq.w	80038c8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0310 	and.w	r3, r3, #16
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 8087 	beq.w	80038c8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037be:	2220      	movs	r2, #32
 80037c0:	409a      	lsls	r2, r3
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b05      	cmp	r3, #5
 80037d0:	d136      	bne.n	8003840 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0216 	bic.w	r2, r2, #22
 80037e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	695a      	ldr	r2, [r3, #20]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d103      	bne.n	8003802 <HAL_DMA_IRQHandler+0x1da>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d007      	beq.n	8003812 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 0208 	bic.w	r2, r2, #8
 8003810:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003816:	223f      	movs	r2, #63	@ 0x3f
 8003818:	409a      	lsls	r2, r3
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003832:	2b00      	cmp	r3, #0
 8003834:	d07e      	beq.n	8003934 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	4798      	blx	r3
        }
        return;
 800383e:	e079      	b.n	8003934 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d01d      	beq.n	800388a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10d      	bne.n	8003878 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003860:	2b00      	cmp	r3, #0
 8003862:	d031      	beq.n	80038c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	4798      	blx	r3
 800386c:	e02c      	b.n	80038c8 <HAL_DMA_IRQHandler+0x2a0>
 800386e:	bf00      	nop
 8003870:	20000000 	.word	0x20000000
 8003874:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800387c:	2b00      	cmp	r3, #0
 800387e:	d023      	beq.n	80038c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	4798      	blx	r3
 8003888:	e01e      	b.n	80038c8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10f      	bne.n	80038b8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0210 	bic.w	r2, r2, #16
 80038a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d032      	beq.n	8003936 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d022      	beq.n	8003922 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2205      	movs	r2, #5
 80038e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 0201 	bic.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	3301      	adds	r3, #1
 80038f8:	60bb      	str	r3, [r7, #8]
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d307      	bcc.n	8003910 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1f2      	bne.n	80038f4 <HAL_DMA_IRQHandler+0x2cc>
 800390e:	e000      	b.n	8003912 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003910:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003926:	2b00      	cmp	r3, #0
 8003928:	d005      	beq.n	8003936 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	4798      	blx	r3
 8003932:	e000      	b.n	8003936 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003934:	bf00      	nop
    }
  }
}
 8003936:	3718      	adds	r7, #24
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 800393c:	b480      	push	{r7}
 800393e:	b087      	sub	sp, #28
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	460b      	mov	r3, r1
 8003946:	607a      	str	r2, [r7, #4]
 8003948:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 800394a:	2300      	movs	r3, #0
 800394c:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003954:	2b01      	cmp	r3, #1
 8003956:	d101      	bne.n	800395c <HAL_DMA_RegisterCallback+0x20>
 8003958:	2302      	movs	r3, #2
 800395a:	e03d      	b.n	80039d8 <HAL_DMA_RegisterCallback+0x9c>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b01      	cmp	r3, #1
 800396e:	d12c      	bne.n	80039ca <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 8003970:	7afb      	ldrb	r3, [r7, #11]
 8003972:	2b05      	cmp	r3, #5
 8003974:	d826      	bhi.n	80039c4 <HAL_DMA_RegisterCallback+0x88>
 8003976:	a201      	add	r2, pc, #4	@ (adr r2, 800397c <HAL_DMA_RegisterCallback+0x40>)
 8003978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800397c:	08003995 	.word	0x08003995
 8003980:	0800399d 	.word	0x0800399d
 8003984:	080039a5 	.word	0x080039a5
 8003988:	080039ad 	.word	0x080039ad
 800398c:	080039b5 	.word	0x080039b5
 8003990:	080039bd 	.word	0x080039bd
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 800399a:	e018      	b.n	80039ce <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80039a2:	e014      	b.n	80039ce <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
 80039aa:	e010      	b.n	80039ce <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	649a      	str	r2, [r3, #72]	@ 0x48
      break;
 80039b2:	e00c      	b.n	80039ce <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	64da      	str	r2, [r3, #76]	@ 0x4c
      break;
 80039ba:	e008      	b.n	80039ce <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80039c2:	e004      	b.n	80039ce <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	75fb      	strb	r3, [r7, #23]
      break;
 80039c8:	e001      	b.n	80039ce <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  return status;
 80039d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	371c      	adds	r7, #28
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039f2:	b2db      	uxtb	r3, r3
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
 8003a24:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003a34:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	2b40      	cmp	r3, #64	@ 0x40
 8003a44:	d108      	bne.n	8003a58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a56:	e007      	b.n	8003a68 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	60da      	str	r2, [r3, #12]
}
 8003a68:	bf00      	nop
 8003a6a:	3714      	adds	r7, #20
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	3b10      	subs	r3, #16
 8003a84:	4a13      	ldr	r2, [pc, #76]	@ (8003ad4 <DMA_CalcBaseAndBitshift+0x60>)
 8003a86:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8a:	091b      	lsrs	r3, r3, #4
 8003a8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a8e:	4a12      	ldr	r2, [pc, #72]	@ (8003ad8 <DMA_CalcBaseAndBitshift+0x64>)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4413      	add	r3, r2
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	461a      	mov	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2b03      	cmp	r3, #3
 8003aa0:	d908      	bls.n	8003ab4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8003adc <DMA_CalcBaseAndBitshift+0x68>)
 8003aaa:	4013      	ands	r3, r2
 8003aac:	1d1a      	adds	r2, r3, #4
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	659a      	str	r2, [r3, #88]	@ 0x58
 8003ab2:	e006      	b.n	8003ac2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	461a      	mov	r2, r3
 8003aba:	4b08      	ldr	r3, [pc, #32]	@ (8003adc <DMA_CalcBaseAndBitshift+0x68>)
 8003abc:	4013      	ands	r3, r2
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3714      	adds	r7, #20
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	aaaaaaab 	.word	0xaaaaaaab
 8003ad8:	080266ec 	.word	0x080266ec
 8003adc:	fffffc00 	.word	0xfffffc00

08003ae0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d11f      	bne.n	8003b3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	2b03      	cmp	r3, #3
 8003afe:	d856      	bhi.n	8003bae <DMA_CheckFifoParam+0xce>
 8003b00:	a201      	add	r2, pc, #4	@ (adr r2, 8003b08 <DMA_CheckFifoParam+0x28>)
 8003b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b06:	bf00      	nop
 8003b08:	08003b19 	.word	0x08003b19
 8003b0c:	08003b2b 	.word	0x08003b2b
 8003b10:	08003b19 	.word	0x08003b19
 8003b14:	08003baf 	.word	0x08003baf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d046      	beq.n	8003bb2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b28:	e043      	b.n	8003bb2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b2e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b32:	d140      	bne.n	8003bb6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b38:	e03d      	b.n	8003bb6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b42:	d121      	bne.n	8003b88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2b03      	cmp	r3, #3
 8003b48:	d837      	bhi.n	8003bba <DMA_CheckFifoParam+0xda>
 8003b4a:	a201      	add	r2, pc, #4	@ (adr r2, 8003b50 <DMA_CheckFifoParam+0x70>)
 8003b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b50:	08003b61 	.word	0x08003b61
 8003b54:	08003b67 	.word	0x08003b67
 8003b58:	08003b61 	.word	0x08003b61
 8003b5c:	08003b79 	.word	0x08003b79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	73fb      	strb	r3, [r7, #15]
      break;
 8003b64:	e030      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d025      	beq.n	8003bbe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b76:	e022      	b.n	8003bbe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b7c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b80:	d11f      	bne.n	8003bc2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b86:	e01c      	b.n	8003bc2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d903      	bls.n	8003b96 <DMA_CheckFifoParam+0xb6>
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	2b03      	cmp	r3, #3
 8003b92:	d003      	beq.n	8003b9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b94:	e018      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	73fb      	strb	r3, [r7, #15]
      break;
 8003b9a:	e015      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00e      	beq.n	8003bc6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	73fb      	strb	r3, [r7, #15]
      break;
 8003bac:	e00b      	b.n	8003bc6 <DMA_CheckFifoParam+0xe6>
      break;
 8003bae:	bf00      	nop
 8003bb0:	e00a      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8003bb2:	bf00      	nop
 8003bb4:	e008      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8003bb6:	bf00      	nop
 8003bb8:	e006      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8003bba:	bf00      	nop
 8003bbc:	e004      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8003bbe:	bf00      	nop
 8003bc0:	e002      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      break;   
 8003bc2:	bf00      	nop
 8003bc4:	e000      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8003bc6:	bf00      	nop
    }
  } 
  
  return status; 
 8003bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop

08003bd8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e086      	b.n	8003cf8 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d106      	bne.n	8003c02 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f008 fd3d 	bl	800c67c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c02:	4b3f      	ldr	r3, [pc, #252]	@ (8003d00 <HAL_ETH_Init+0x128>)
 8003c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c06:	4a3e      	ldr	r2, [pc, #248]	@ (8003d00 <HAL_ETH_Init+0x128>)
 8003c08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c0e:	4b3c      	ldr	r3, [pc, #240]	@ (8003d00 <HAL_ETH_Init+0x128>)
 8003c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c16:	60bb      	str	r3, [r7, #8]
 8003c18:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003c1a:	4b3a      	ldr	r3, [pc, #232]	@ (8003d04 <HAL_ETH_Init+0x12c>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	4a39      	ldr	r2, [pc, #228]	@ (8003d04 <HAL_ETH_Init+0x12c>)
 8003c20:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003c24:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003c26:	4b37      	ldr	r3, [pc, #220]	@ (8003d04 <HAL_ETH_Init+0x12c>)
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	4935      	ldr	r1, [pc, #212]	@ (8003d04 <HAL_ETH_Init+0x12c>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003c34:	4b33      	ldr	r3, [pc, #204]	@ (8003d04 <HAL_ETH_Init+0x12c>)
 8003c36:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6812      	ldr	r2, [r2, #0]
 8003c46:	f043 0301 	orr.w	r3, r3, #1
 8003c4a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c4e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c50:	f7fe fba8 	bl	80023a4 <HAL_GetTick>
 8003c54:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003c56:	e011      	b.n	8003c7c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003c58:	f7fe fba4 	bl	80023a4 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003c66:	d909      	bls.n	8003c7c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2204      	movs	r2, #4
 8003c6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	22e0      	movs	r2, #224	@ 0xe0
 8003c74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e03d      	b.n	8003cf8 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1e4      	bne.n	8003c58 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 ff5c 	bl	8004b4c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f001 f807 	bl	8004ca8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f001 f85d 	bl	8004d5a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 ffc5 	bl	8004c38 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8003cbc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	4b0f      	ldr	r3, [pc, #60]	@ (8003d08 <HAL_ETH_Init+0x130>)
 8003ccc:	430b      	orrs	r3, r1
 8003cce:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8003ce2:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2210      	movs	r2, #16
 8003cf2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	40023800 	.word	0x40023800
 8003d04:	40013800 	.word	0x40013800
 8003d08:	00020060 	.word	0x00020060

08003d0c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d1a:	2b10      	cmp	r3, #16
 8003d1c:	d15f      	bne.n	8003dde <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2220      	movs	r2, #32
 8003d22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2204      	movs	r2, #4
 8003d30:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f9f6 	bl	8004124 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d40:	2001      	movs	r0, #1
 8003d42:	f7fe fb3b 	bl	80023bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6812      	ldr	r2, [r2, #0]
 8003d5c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003d60:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d64:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	6812      	ldr	r2, [r2, #0]
 8003d74:	f043 0302 	orr.w	r3, r3, #2
 8003d78:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d7c:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 fd80 	bl	8004884 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0208 	orr.w	r2, r2, #8
 8003d92:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d9c:	2001      	movs	r0, #1
 8003d9e:	f7fe fb0d 	bl	80023bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f042 0204 	orr.w	r2, r2, #4
 8003db8:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dc2:	69d9      	ldr	r1, [r3, #28]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	4b07      	ldr	r3, [pc, #28]	@ (8003de8 <HAL_ETH_Start_IT+0xdc>)
 8003dca:	430b      	orrs	r3, r1
 8003dcc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003dd0:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2240      	movs	r2, #64	@ 0x40
 8003dd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	e000      	b.n	8003de0 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
  }
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	0001a0c1 	.word	0x0001a0c1

08003dec <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dfa:	2b40      	cmp	r3, #64	@ 0x40
 8003dfc:	d16e      	bne.n	8003edc <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2220      	movs	r2, #32
 8003e02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e0e:	69d9      	ldr	r1, [r3, #28]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	4b34      	ldr	r3, [pc, #208]	@ (8003ee8 <HAL_ETH_Stop_IT+0xfc>)
 8003e16:	400b      	ands	r3, r1
 8003e18:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e1c:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	6812      	ldr	r2, [r2, #0]
 8003e2c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e30:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e34:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	6812      	ldr	r2, [r2, #0]
 8003e44:	f023 0302 	bic.w	r3, r3, #2
 8003e48:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e4c:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 0204 	bic.w	r2, r2, #4
 8003e5c:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e66:	2001      	movs	r0, #1
 8003e68:	f7fe faa8 	bl	80023bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 fd05 	bl	8004884 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0208 	bic.w	r2, r2, #8
 8003e88:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e92:	2001      	movs	r0, #1
 8003e94:	f7fe fa92 	bl	80023bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	617b      	str	r3, [r7, #20]
 8003ea4:	e00e      	b.n	8003ec4 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	3212      	adds	r2, #18
 8003eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eb0:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	617b      	str	r3, [r7, #20]
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	2b03      	cmp	r3, #3
 8003ec8:	d9ed      	bls.n	8003ea6 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2210      	movs	r2, #16
 8003ed4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	e000      	b.n	8003ede <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
  }
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3718      	adds	r7, #24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	fffe5f3e 	.word	0xfffe5f3e

08003eec <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d109      	bne.n	8003f10 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f02:	f043 0201 	orr.w	r2, r3, #1
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e045      	b.n	8003f9c <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f16:	2b40      	cmp	r3, #64	@ 0x40
 8003f18:	d13f      	bne.n	8003f9a <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8003f22:	2201      	movs	r2, #1
 8003f24:	6839      	ldr	r1, [r7, #0]
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 ff86 	bl	8004e38 <ETH_Prepare_Tx_Descriptors>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d009      	beq.n	8003f46 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f38:	f043 0202 	orr.w	r2, r3, #2
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e02a      	b.n	8003f9c <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003f46:	f3bf 8f4f 	dsb	sy
}
 8003f4a:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f50:	1c5a      	adds	r2, r3, #1
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f5a:	2b03      	cmp	r3, #3
 8003f5c:	d904      	bls.n	8003f68 <HAL_ETH_Transmit_IT+0x7c>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f62:	1f1a      	subs	r2, r3, #4
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	f003 0304 	and.w	r3, r3, #4
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00d      	beq.n	8003f96 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f82:	461a      	mov	r2, r3
 8003f84:	2304      	movs	r3, #4
 8003f86:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f90:	461a      	mov	r2, r3
 8003f92:	2300      	movs	r3, #0
 8003f94:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8003f96:	2300      	movs	r3, #0
 8003f98:	e000      	b.n	8003f9c <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
  }
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b088      	sub	sp, #32
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d109      	bne.n	8003fd0 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fc2:	f043 0201 	orr.w	r2, r3, #1
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e0a4      	b.n	800411a <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fd6:	2b40      	cmp	r3, #64	@ 0x40
 8003fd8:	d001      	beq.n	8003fde <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e09d      	b.n	800411a <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fe2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	69fa      	ldr	r2, [r7, #28]
 8003fe8:	3212      	adds	r2, #18
 8003fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fee:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ff4:	f1c3 0304 	rsb	r3, r3, #4
 8003ff8:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003ffa:	e066      	b.n	80040ca <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004004:	2b00      	cmp	r3, #0
 8004006:	d007      	beq.n	8004018 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	69da      	ldr	r2, [r3, #28]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	699a      	ldr	r2, [r3, #24]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004020:	2b00      	cmp	r3, #0
 8004022:	d103      	bne.n	800402c <HAL_ETH_ReadData+0x88>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004028:	2b00      	cmp	r3, #0
 800402a:	d03c      	beq.n	80040a6 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004034:	2b00      	cmp	r3, #0
 8004036:	d005      	beq.n	8004044 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	0c1b      	lsrs	r3, r3, #16
 800404a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800404e:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004058:	2b00      	cmp	r3, #0
 800405a:	d005      	beq.n	8004068 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8004064:	2301      	movs	r3, #1
 8004066:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004080:	461a      	mov	r2, r3
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	b29b      	uxth	r3, r3
 8004086:	f008 fccd 	bl	800ca24 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800408e:	1c5a      	adds	r2, r3, #1
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	441a      	add	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	2200      	movs	r2, #0
 80040a4:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	3301      	adds	r3, #1
 80040aa:	61fb      	str	r3, [r7, #28]
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	2b03      	cmp	r3, #3
 80040b0:	d902      	bls.n	80040b8 <HAL_ETH_ReadData+0x114>
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	3b04      	subs	r3, #4
 80040b6:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	69fa      	ldr	r2, [r7, #28]
 80040bc:	3212      	adds	r2, #18
 80040be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040c2:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	3301      	adds	r3, #1
 80040c8:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	db06      	blt.n	80040e0 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d202      	bcs.n	80040e0 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 80040da:	7cfb      	ldrb	r3, [r7, #19]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d08d      	beq.n	8003ffc <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	441a      	add	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d002      	beq.n	80040fa <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 f815 	bl	8004124 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	69fa      	ldr	r2, [r7, #28]
 80040fe:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8004100:	7cfb      	ldrb	r3, [r7, #19]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d108      	bne.n	8004118 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004114:	2300      	movs	r3, #0
 8004116:	e000      	b.n	800411a <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
}
 800411a:	4618      	mov	r0, r3
 800411c:	3720      	adds	r7, #32
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
	...

08004124 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b088      	sub	sp, #32
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800412c:	2300      	movs	r3, #0
 800412e:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8004130:	2301      	movs	r3, #1
 8004132:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004138:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	69fa      	ldr	r2, [r7, #28]
 800413e:	3212      	adds	r2, #18
 8004140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004144:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800414a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800414c:	e042      	b.n	80041d4 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d112      	bne.n	800417c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8004156:	f107 0308 	add.w	r3, r7, #8
 800415a:	4618      	mov	r0, r3
 800415c:	f008 fc32 	bl	800c9c4 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d102      	bne.n	800416c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8004166:	2300      	movs	r3, #0
 8004168:	74fb      	strb	r3, [r7, #19]
 800416a:	e007      	b.n	800417c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	461a      	mov	r2, r3
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	461a      	mov	r2, r3
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800417c:	7cfb      	ldrb	r3, [r7, #19]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d028      	beq.n	80041d4 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004186:	2b00      	cmp	r3, #0
 8004188:	d106      	bne.n	8004198 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	695a      	ldr	r2, [r3, #20]
 800418e:	4b26      	ldr	r3, [pc, #152]	@ (8004228 <ETH_UpdateDescriptor+0x104>)
 8004190:	4313      	orrs	r3, r2
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	6053      	str	r3, [r2, #4]
 8004196:	e005      	b.n	80041a4 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	3301      	adds	r3, #1
 80041b4:	61fb      	str	r3, [r7, #28]
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	2b03      	cmp	r3, #3
 80041ba:	d902      	bls.n	80041c2 <ETH_UpdateDescriptor+0x9e>
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	3b04      	subs	r3, #4
 80041c0:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	69fa      	ldr	r2, [r7, #28]
 80041c6:	3212      	adds	r2, #18
 80041c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041cc:	617b      	str	r3, [r7, #20]
      desccount--;
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	3b01      	subs	r3, #1
 80041d2:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d002      	beq.n	80041e0 <ETH_UpdateDescriptor+0xbc>
 80041da:	7cfb      	ldrb	r3, [r7, #19]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1b6      	bne.n	800414e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d01a      	beq.n	8004220 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	3303      	adds	r3, #3
 80041ee:	f003 0303 	and.w	r3, r3, #3
 80041f2:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80041f4:	f3bf 8f5f 	dmb	sy
}
 80041f8:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6919      	ldr	r1, [r3, #16]
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	4613      	mov	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	18ca      	adds	r2, r1, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004212:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	69fa      	ldr	r2, [r7, #28]
 8004218:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8004220:	bf00      	nop
 8004222:	3720      	adds	r7, #32
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	80004000 	.word	0x80004000

0800422c <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	3318      	adds	r3, #24
 8004238:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800423e:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004244:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8004246:	2301      	movs	r3, #1
 8004248:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800424a:	e047      	b.n	80042dc <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 800424c:	2301      	movs	r3, #1
 800424e:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	3b01      	subs	r3, #1
 8004254:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	3304      	adds	r3, #4
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	4413      	add	r3, r2
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10a      	bne.n	800427c <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	3301      	adds	r3, #1
 800426a:	613b      	str	r3, [r7, #16]
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	2b03      	cmp	r3, #3
 8004270:	d902      	bls.n	8004278 <HAL_ETH_ReleaseTxPacket+0x4c>
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	3b04      	subs	r3, #4
 8004276:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8004278:	2300      	movs	r3, #0
 800427a:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 800427c:	7bbb      	ldrb	r3, [r7, #14]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d02c      	beq.n	80042dc <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68d9      	ldr	r1, [r3, #12]
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	4613      	mov	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	440b      	add	r3, r1
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	db1f      	blt.n	80042d8 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	3304      	adds	r3, #4
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	4413      	add	r3, r2
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f008 fbff 	bl	800caa8 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	3304      	adds	r3, #4
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	4413      	add	r3, r2
 80042b4:	2200      	movs	r2, #0
 80042b6:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	3301      	adds	r3, #1
 80042bc:	613b      	str	r3, [r7, #16]
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	2b03      	cmp	r3, #3
 80042c2:	d902      	bls.n	80042ca <HAL_ETH_ReleaseTxPacket+0x9e>
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	3b04      	subs	r3, #4
 80042c8:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80042d6:	e001      	b.n	80042dc <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <HAL_ETH_ReleaseTxPacket+0xbc>
 80042e2:	7bfb      	ldrb	r3, [r7, #15]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1b1      	bne.n	800424c <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3718      	adds	r7, #24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
	...

080042f4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004302:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 800431c:	4b4b      	ldr	r3, [pc, #300]	@ (800444c <HAL_ETH_IRQHandler+0x158>)
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00e      	beq.n	800434a <HAL_ETH_IRQHandler+0x56>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004332:	2b00      	cmp	r3, #0
 8004334:	d009      	beq.n	800434a <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800433e:	461a      	mov	r2, r3
 8004340:	4b43      	ldr	r3, [pc, #268]	@ (8004450 <HAL_ETH_IRQHandler+0x15c>)
 8004342:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f007 fed9 	bl	800c0fc <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00f      	beq.n	8004374 <HAL_ETH_IRQHandler+0x80>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00a      	beq.n	8004374 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004366:	461a      	mov	r2, r3
 8004368:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800436c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f007 fed4 	bl	800c11c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d042      	beq.n	8004404 <HAL_ETH_IRQHandler+0x110>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d03d      	beq.n	8004404 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800438e:	f043 0208 	orr.w	r2, r3, #8
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d01a      	beq.n	80043d8 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043aa:	695a      	ldr	r2, [r3, #20]
 80043ac:	4b29      	ldr	r3, [pc, #164]	@ (8004454 <HAL_ETH_IRQHandler+0x160>)
 80043ae:	4013      	ands	r3, r2
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043be:	69db      	ldr	r3, [r3, #28]
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	6812      	ldr	r2, [r2, #0]
 80043c4:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 80043c8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80043cc:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	22e0      	movs	r2, #224	@ 0xe0
 80043d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80043d6:	e012      	b.n	80043fe <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043e0:	695a      	ldr	r2, [r3, #20]
 80043e2:	f248 6380 	movw	r3, #34432	@ 0x8680
 80043e6:	4013      	ands	r3, r2
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043f6:	461a      	mov	r2, r3
 80043f8:	f248 6380 	movw	r3, #34432	@ 0x8680
 80043fc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f007 fe9c 	bl	800c13c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	f003 0308 	and.w	r3, r3, #8
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00e      	beq.n	800442c <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004414:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f81a 	bl	8004458 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d006      	beq.n	8004444 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004436:	4b05      	ldr	r3, [pc, #20]	@ (800444c <HAL_ETH_IRQHandler+0x158>)
 8004438:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800443c:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f814 	bl	800446c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8004444:	bf00      	nop
 8004446:	3718      	adds	r7, #24
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	40013c00 	.word	0x40013c00
 8004450:	00010040 	.word	0x00010040
 8004454:	007e2000 	.word	0x007e2000

08004458 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
 800448c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f003 031c 	and.w	r3, r3, #28
 800449c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	02db      	lsls	r3, r3, #11
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	019b      	lsls	r3, r3, #6
 80044ae:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	f023 0302 	bic.w	r3, r3, #2
 80044be:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f043 0301 	orr.w	r3, r3, #1
 80044c6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80044d0:	f7fd ff68 	bl	80023a4 <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80044d6:	e00d      	b.n	80044f4 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80044d8:	f7fd ff64 	bl	80023a4 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044e6:	d301      	bcc.n	80044ec <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e010      	b.n	800450e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1ec      	bne.n	80044d8 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	b29b      	uxth	r3, r3
 8004506:	461a      	mov	r2, r3
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b086      	sub	sp, #24
 800451a:	af00      	add	r7, sp, #0
 800451c:	60f8      	str	r0, [r7, #12]
 800451e:	60b9      	str	r1, [r7, #8]
 8004520:	607a      	str	r2, [r7, #4]
 8004522:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f003 031c 	and.w	r3, r3, #28
 8004532:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	02db      	lsls	r3, r3, #11
 8004538:	b29b      	uxth	r3, r3
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	4313      	orrs	r3, r2
 800453e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	019b      	lsls	r3, r3, #6
 8004544:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	4313      	orrs	r3, r2
 800454c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f043 0302 	orr.w	r3, r3, #2
 8004554:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f043 0301 	orr.w	r3, r3, #1
 800455c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	b29a      	uxth	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004570:	f7fd ff18 	bl	80023a4 <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004576:	e00d      	b.n	8004594 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004578:	f7fd ff14 	bl	80023a4 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004586:	d301      	bcc.n	800458c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e009      	b.n	80045a0 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1ec      	bne.n	8004578 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3718      	adds	r7, #24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d101      	bne.n	80045bc <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e0e6      	b.n	800478a <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0310 	and.w	r3, r3, #16
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	bf14      	ite	ne
 80045ca:	2301      	movne	r3, #1
 80045cc:	2300      	moveq	r3, #0
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	461a      	mov	r2, r3
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	bf0c      	ite	eq
 80045f4:	2301      	moveq	r3, #1
 80045f6:	2300      	movne	r3, #0
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	461a      	mov	r2, r3
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 800460c:	2b00      	cmp	r3, #0
 800460e:	bf14      	ite	ne
 8004610:	2301      	movne	r3, #1
 8004612:	2300      	moveq	r3, #0
 8004614:	b2db      	uxtb	r3, r3
 8004616:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004626:	2b00      	cmp	r3, #0
 8004628:	bf0c      	ite	eq
 800462a:	2301      	moveq	r3, #1
 800462c:	2300      	movne	r3, #0
 800462e:	b2db      	uxtb	r3, r3
 8004630:	461a      	mov	r2, r3
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004640:	2b00      	cmp	r3, #0
 8004642:	bf14      	ite	ne
 8004644:	2301      	movne	r3, #1
 8004646:	2300      	moveq	r3, #0
 8004648:	b2db      	uxtb	r3, r3
 800464a:	461a      	mov	r2, r3
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004676:	2b00      	cmp	r3, #0
 8004678:	bf0c      	ite	eq
 800467a:	2301      	moveq	r3, #1
 800467c:	2300      	movne	r3, #0
 800467e:	b2db      	uxtb	r3, r3
 8004680:	461a      	mov	r2, r3
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004690:	2b00      	cmp	r3, #0
 8004692:	bf0c      	ite	eq
 8004694:	2301      	moveq	r3, #1
 8004696:	2300      	movne	r3, #0
 8004698:	b2db      	uxtb	r3, r3
 800469a:	461a      	mov	r2, r3
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	bf14      	ite	ne
 80046ae:	2301      	movne	r3, #1
 80046b0:	2300      	moveq	r3, #0
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	461a      	mov	r2, r3
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	bf14      	ite	ne
 80046d6:	2301      	movne	r3, #1
 80046d8:	2300      	moveq	r3, #0
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	461a      	mov	r2, r3
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	bf14      	ite	ne
 80046f0:	2301      	movne	r3, #1
 80046f2:	2300      	moveq	r3, #0
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	461a      	mov	r2, r3
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	bf14      	ite	ne
 800470a:	2301      	movne	r3, #1
 800470c:	2300      	moveq	r3, #0
 800470e:	b2db      	uxtb	r3, r3
 8004710:	461a      	mov	r2, r3
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004722:	2b00      	cmp	r3, #0
 8004724:	bf0c      	ite	eq
 8004726:	2301      	moveq	r3, #1
 8004728:	2300      	movne	r3, #0
 800472a:	b2db      	uxtb	r3, r3
 800472c:	461a      	mov	r2, r3
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	0c1b      	lsrs	r3, r3, #16
 800474a:	b29a      	uxth	r2, r3
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	f003 0304 	and.w	r3, r3, #4
 800475a:	2b00      	cmp	r3, #0
 800475c:	bf14      	ite	ne
 800475e:	2301      	movne	r3, #1
 8004760:	2300      	moveq	r3, #0
 8004762:	b2db      	uxtb	r3, r3
 8004764:	461a      	mov	r2, r3
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8004776:	2b00      	cmp	r3, #0
 8004778:	bf14      	ite	ne
 800477a:	2301      	movne	r3, #1
 800477c:	2300      	moveq	r3, #0
 800477e:	b2db      	uxtb	r3, r3
 8004780:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr

08004796 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b082      	sub	sp, #8
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
 800479e:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e00b      	b.n	80047c2 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047b0:	2b10      	cmp	r3, #16
 80047b2:	d105      	bne.n	80047c0 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80047b4:	6839      	ldr	r1, [r7, #0]
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f88a 	bl	80048d0 <ETH_SetMACConfig>

    return HAL_OK;
 80047bc:	2300      	movs	r3, #0
 80047be:	e000      	b.n	80047c2 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
  }
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
	...

080047cc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f023 031c 	bic.w	r3, r3, #28
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80047e4:	f003 fd04 	bl	80081f0 <HAL_RCC_GetHCLKFreq>
 80047e8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	4a14      	ldr	r2, [pc, #80]	@ (8004840 <HAL_ETH_SetMDIOClockRange+0x74>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d804      	bhi.n	80047fc <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f043 0308 	orr.w	r3, r3, #8
 80047f8:	60fb      	str	r3, [r7, #12]
 80047fa:	e019      	b.n	8004830 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	4a11      	ldr	r2, [pc, #68]	@ (8004844 <HAL_ETH_SetMDIOClockRange+0x78>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d204      	bcs.n	800480e <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f043 030c 	orr.w	r3, r3, #12
 800480a:	60fb      	str	r3, [r7, #12]
 800480c:	e010      	b.n	8004830 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	4a0d      	ldr	r2, [pc, #52]	@ (8004848 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d90c      	bls.n	8004830 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	4a0c      	ldr	r2, [pc, #48]	@ (800484c <HAL_ETH_SetMDIOClockRange+0x80>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d804      	bhi.n	8004828 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f043 0304 	orr.w	r3, r3, #4
 8004824:	60fb      	str	r3, [r7, #12]
 8004826:	e003      	b.n	8004830 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f043 0310 	orr.w	r3, r3, #16
 800482e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	611a      	str	r2, [r3, #16]
}
 8004838:	bf00      	nop
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	02160ebf 	.word	0x02160ebf
 8004844:	03938700 	.word	0x03938700
 8004848:	05f5e0ff 	.word	0x05f5e0ff
 800484c:	08f0d17f 	.word	0x08f0d17f

08004850 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 800485e:	4618      	mov	r0, r3
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8004878:	4618      	mov	r0, r3
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800488c:	2300      	movs	r3, #0
 800488e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	6812      	ldr	r2, [r2, #0]
 800489e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80048a6:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80048b4:	2001      	movs	r0, #1
 80048b6:	f7fd fd81 	bl	80023bc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80048c4:	6193      	str	r3, [r2, #24]
}
 80048c6:	bf00      	nop
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
	...

080048d0 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	4b53      	ldr	r3, [pc, #332]	@ (8004a34 <ETH_SetMACConfig+0x164>)
 80048e6:	4013      	ands	r3, r2
 80048e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	7b9b      	ldrb	r3, [r3, #14]
 80048ee:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	7c12      	ldrb	r2, [r2, #16]
 80048f4:	2a00      	cmp	r2, #0
 80048f6:	d102      	bne.n	80048fe <ETH_SetMACConfig+0x2e>
 80048f8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80048fc:	e000      	b.n	8004900 <ETH_SetMACConfig+0x30>
 80048fe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004900:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004902:	683a      	ldr	r2, [r7, #0]
 8004904:	7c52      	ldrb	r2, [r2, #17]
 8004906:	2a00      	cmp	r2, #0
 8004908:	d102      	bne.n	8004910 <ETH_SetMACConfig+0x40>
 800490a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800490e:	e000      	b.n	8004912 <ETH_SetMACConfig+0x42>
 8004910:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004912:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004918:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	7fdb      	ldrb	r3, [r3, #31]
 800491e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004920:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004926:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	7f92      	ldrb	r2, [r2, #30]
 800492c:	2a00      	cmp	r2, #0
 800492e:	d102      	bne.n	8004936 <ETH_SetMACConfig+0x66>
 8004930:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004934:	e000      	b.n	8004938 <ETH_SetMACConfig+0x68>
 8004936:	2200      	movs	r2, #0
                        macconf->Speed |
 8004938:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	7f1b      	ldrb	r3, [r3, #28]
 800493e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004940:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004946:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	791b      	ldrb	r3, [r3, #4]
 800494c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800494e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004956:	2a00      	cmp	r2, #0
 8004958:	d102      	bne.n	8004960 <ETH_SetMACConfig+0x90>
 800495a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800495e:	e000      	b.n	8004962 <ETH_SetMACConfig+0x92>
 8004960:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004962:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	7bdb      	ldrb	r3, [r3, #15]
 8004968:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800496a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004970:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004978:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800497a:	4313      	orrs	r3, r2
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	4313      	orrs	r3, r2
 8004980:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004992:	2001      	movs	r0, #1
 8004994:	f7fd fd12 	bl	80023bc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80049ae:	4013      	ands	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049b6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80049be:	2a00      	cmp	r2, #0
 80049c0:	d101      	bne.n	80049c6 <ETH_SetMACConfig+0xf6>
 80049c2:	2280      	movs	r2, #128	@ 0x80
 80049c4:	e000      	b.n	80049c8 <ETH_SetMACConfig+0xf8>
 80049c6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80049c8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80049ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80049d6:	2a01      	cmp	r2, #1
 80049d8:	d101      	bne.n	80049de <ETH_SetMACConfig+0x10e>
 80049da:	2208      	movs	r2, #8
 80049dc:	e000      	b.n	80049e0 <ETH_SetMACConfig+0x110>
 80049de:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80049e0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80049e8:	2a01      	cmp	r2, #1
 80049ea:	d101      	bne.n	80049f0 <ETH_SetMACConfig+0x120>
 80049ec:	2204      	movs	r2, #4
 80049ee:	e000      	b.n	80049f2 <ETH_SetMACConfig+0x122>
 80049f0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80049f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80049fa:	2a01      	cmp	r2, #1
 80049fc:	d101      	bne.n	8004a02 <ETH_SetMACConfig+0x132>
 80049fe:	2202      	movs	r2, #2
 8004a00:	e000      	b.n	8004a04 <ETH_SetMACConfig+0x134>
 8004a02:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004a04:	4313      	orrs	r3, r2
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a1c:	2001      	movs	r0, #1
 8004a1e:	f7fd fccd 	bl	80023bc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	619a      	str	r2, [r3, #24]
}
 8004a2a:	bf00      	nop
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	fd20810f 	.word	0xfd20810f

08004a38 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	4b3d      	ldr	r3, [pc, #244]	@ (8004b48 <ETH_SetDMAConfig+0x110>)
 8004a52:	4013      	ands	r3, r2
 8004a54:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	7b1b      	ldrb	r3, [r3, #12]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d102      	bne.n	8004a64 <ETH_SetDMAConfig+0x2c>
 8004a5e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004a62:	e000      	b.n	8004a66 <ETH_SetDMAConfig+0x2e>
 8004a64:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	7b5b      	ldrb	r3, [r3, #13]
 8004a6a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004a6c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	7f52      	ldrb	r2, [r2, #29]
 8004a72:	2a00      	cmp	r2, #0
 8004a74:	d102      	bne.n	8004a7c <ETH_SetDMAConfig+0x44>
 8004a76:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004a7a:	e000      	b.n	8004a7e <ETH_SetDMAConfig+0x46>
 8004a7c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004a7e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	7b9b      	ldrb	r3, [r3, #14]
 8004a84:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004a86:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004a8c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	7f1b      	ldrb	r3, [r3, #28]
 8004a92:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004a94:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	7f9b      	ldrb	r3, [r3, #30]
 8004a9a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004a9c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004aa2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004aaa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004aac:	4313      	orrs	r3, r2
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004abc:	461a      	mov	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004ace:	2001      	movs	r0, #1
 8004ad0:	f7fd fc74 	bl	80023bc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004adc:	461a      	mov	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	791b      	ldrb	r3, [r3, #4]
 8004ae6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004aec:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004af2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004af8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004b00:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004b02:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b08:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004b0a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004b10:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	6812      	ldr	r2, [r2, #0]
 8004b16:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004b1a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004b1e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b2c:	2001      	movs	r0, #1
 8004b2e:	f7fd fc45 	bl	80023bc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6013      	str	r3, [r2, #0]
}
 8004b40:	bf00      	nop
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	f8de3f23 	.word	0xf8de3f23

08004b4c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b0a6      	sub	sp, #152	@ 0x98
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004b54:	2301      	movs	r3, #1
 8004b56:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004b60:	2300      	movs	r3, #0
 8004b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004b64:	2300      	movs	r3, #0
 8004b66:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004b70:	2300      	movs	r3, #0
 8004b72:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004b76:	2301      	movs	r3, #1
 8004b78:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004b82:	2300      	movs	r3, #0
 8004b84:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004b92:	2300      	movs	r3, #0
 8004b94:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004bb4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004bb8:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004bba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004bc6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004bca:	4619      	mov	r1, r3
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f7ff fe7f 	bl	80048d0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004be0:	2301      	movs	r3, #1
 8004be2:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004be4:	2300      	movs	r3, #0
 8004be6:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004be8:	2300      	movs	r3, #0
 8004bea:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004c02:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004c06:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004c08:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004c0c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004c0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004c12:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004c14:	2301      	movs	r3, #1
 8004c16:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004c22:	f107 0308 	add.w	r3, r7, #8
 8004c26:	4619      	mov	r1, r3
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7ff ff05 	bl	8004a38 <ETH_SetDMAConfig>
}
 8004c2e:	bf00      	nop
 8004c30:	3798      	adds	r7, #152	@ 0x98
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
	...

08004c38 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b087      	sub	sp, #28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	3305      	adds	r3, #5
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	021b      	lsls	r3, r3, #8
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	3204      	adds	r2, #4
 8004c50:	7812      	ldrb	r2, [r2, #0]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	4b11      	ldr	r3, [pc, #68]	@ (8004ca0 <ETH_MACAddressConfig+0x68>)
 8004c5a:	4413      	add	r3, r2
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	3303      	adds	r3, #3
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	061a      	lsls	r2, r3, #24
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	3302      	adds	r3, #2
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	041b      	lsls	r3, r3, #16
 8004c72:	431a      	orrs	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	3301      	adds	r3, #1
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	021b      	lsls	r3, r3, #8
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	7812      	ldrb	r2, [r2, #0]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	4b06      	ldr	r3, [pc, #24]	@ (8004ca4 <ETH_MACAddressConfig+0x6c>)
 8004c8a:	4413      	add	r3, r2
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	6013      	str	r3, [r2, #0]
}
 8004c92:	bf00      	nop
 8004c94:	371c      	adds	r7, #28
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	40028040 	.word	0x40028040
 8004ca4:	40028044 	.word	0x40028044

08004ca8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	e03e      	b.n	8004d34 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68d9      	ldr	r1, [r3, #12]
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	00db      	lsls	r3, r3, #3
 8004cc4:	440b      	add	r3, r1
 8004cc6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004ce0:	68b9      	ldr	r1, [r7, #8]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	3206      	adds	r2, #6
 8004ce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d80c      	bhi.n	8004d18 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68d9      	ldr	r1, [r3, #12]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	1c5a      	adds	r2, r3, #1
 8004d06:	4613      	mov	r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4413      	add	r3, r2
 8004d0c:	00db      	lsls	r3, r3, #3
 8004d0e:	440b      	add	r3, r1
 8004d10:	461a      	mov	r2, r3
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	60da      	str	r2, [r3, #12]
 8004d16:	e004      	b.n	8004d22 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	3301      	adds	r3, #1
 8004d32:	60fb      	str	r3, [r7, #12]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2b03      	cmp	r3, #3
 8004d38:	d9bd      	bls.n	8004cb6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68da      	ldr	r2, [r3, #12]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d4c:	611a      	str	r2, [r3, #16]
}
 8004d4e:	bf00      	nop
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b085      	sub	sp, #20
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004d62:	2300      	movs	r3, #0
 8004d64:	60fb      	str	r3, [r7, #12]
 8004d66:	e048      	b.n	8004dfa <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6919      	ldr	r1, [r3, #16]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4413      	add	r3, r2
 8004d74:	00db      	lsls	r3, r3, #3
 8004d76:	440b      	add	r3, r1
 8004d78:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	2200      	movs	r2, #0
 8004d84:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	2200      	movs	r2, #0
 8004d96:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004da4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004dbe:	68b9      	ldr	r1, [r7, #8]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	3212      	adds	r2, #18
 8004dc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d80c      	bhi.n	8004dea <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6919      	ldr	r1, [r3, #16]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	1c5a      	adds	r2, r3, #1
 8004dd8:	4613      	mov	r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	4413      	add	r3, r2
 8004dde:	00db      	lsls	r3, r3, #3
 8004de0:	440b      	add	r3, r1
 8004de2:	461a      	mov	r2, r3
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	60da      	str	r2, [r3, #12]
 8004de8:	e004      	b.n	8004df4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	461a      	mov	r2, r3
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	3301      	adds	r3, #1
 8004df8:	60fb      	str	r3, [r7, #12]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2b03      	cmp	r3, #3
 8004dfe:	d9b3      	bls.n	8004d68 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	691a      	ldr	r2, [r3, #16]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e2a:	60da      	str	r2, [r3, #12]
}
 8004e2c:	bf00      	nop
 8004e2e:	3714      	adds	r7, #20
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b091      	sub	sp, #68	@ 0x44
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	3318      	adds	r3, #24
 8004e48:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8004e56:	2300      	movs	r3, #0
 8004e58:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e62:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e7a:	d007      	beq.n	8004e8c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004e7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e80:	3304      	adds	r3, #4
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	4413      	add	r3, r2
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d001      	beq.n	8004e90 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	e111      	b.n	80050b4 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8004e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e92:	3301      	adds	r3, #1
 8004e94:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e9e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea2:	685a      	ldr	r2, [r3, #4]
 8004ea4:	4b86      	ldr	r3, [pc, #536]	@ (80050c0 <ETH_Prepare_Tx_Descriptors+0x288>)
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004eaa:	6852      	ldr	r2, [r2, #4]
 8004eac:	431a      	orrs	r2, r3
 8004eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb0:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d008      	beq.n	8004ed0 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ece:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0320 	and.w	r3, r3, #32
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d008      	beq.n	8004eee <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eec:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0304 	and.w	r3, r3, #4
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d005      	beq.n	8004f06 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8004efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f04:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f10:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004f12:	e082      	b.n	800501a <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f1e:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d006      	beq.n	8004f34 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f30:	601a      	str	r2, [r3, #0]
 8004f32:	e005      	b.n	8004f40 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f3e:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004f40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f42:	3301      	adds	r3, #1
 8004f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f48:	2b03      	cmp	r3, #3
 8004f4a:	d902      	bls.n	8004f52 <ETH_Prepare_Tx_Descriptors+0x11a>
 8004f4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f4e:	3b04      	subs	r3, #4
 8004f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f54:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f5a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f68:	d007      	beq.n	8004f7a <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004f6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f6e:	3304      	adds	r3, #4
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4413      	add	r3, r2
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d029      	beq.n	8004fce <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8004f7a:	6a3b      	ldr	r3, [r7, #32]
 8004f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f80:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f86:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004f88:	2300      	movs	r3, #0
 8004f8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f8c:	e019      	b.n	8004fc2 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8004f8e:	f3bf 8f5f 	dmb	sy
}
 8004f92:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f9e:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004fa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fa8:	2b03      	cmp	r3, #3
 8004faa:	d902      	bls.n	8004fb2 <ETH_Prepare_Tx_Descriptors+0x17a>
 8004fac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fae:	3b04      	subs	r3, #4
 8004fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fba:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8004fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004fc2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004fc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d3e1      	bcc.n	8004f8e <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8004fca:	2302      	movs	r3, #2
 8004fcc:	e072      	b.n	80050b4 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd8:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8004fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fdc:	3301      	adds	r3, #1
 8004fde:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	461a      	mov	r2, r3
 8004fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fee:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	4b32      	ldr	r3, [pc, #200]	@ (80050c0 <ETH_Prepare_Tx_Descriptors+0x288>)
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ffa:	6852      	ldr	r2, [r2, #4]
 8004ffc:	431a      	orrs	r2, r3
 8004ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005000:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8005002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005004:	3301      	adds	r3, #1
 8005006:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8005008:	f3bf 8f5f 	dmb	sy
}
 800500c:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800500e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005018:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800501a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	2b00      	cmp	r3, #0
 8005020:	f47f af78 	bne.w	8004f14 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d006      	beq.n	8005038 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800502a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	e005      	b.n	8005044 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005042:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800504c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504e:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8005050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005052:	6a3a      	ldr	r2, [r7, #32]
 8005054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005058:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 800505a:	f3bf 8f5f 	dmb	sy
}
 800505e:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800506a:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800506c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005070:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005074:	3304      	adds	r3, #4
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	440b      	add	r3, r1
 800507a:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800507c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005080:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005082:	f3ef 8310 	mrs	r3, PRIMASK
 8005086:	613b      	str	r3, [r7, #16]
  return(result);
 8005088:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800508a:	61fb      	str	r3, [r7, #28]
 800508c:	2301      	movs	r3, #1
 800508e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	f383 8810 	msr	PRIMASK, r3
}
 8005096:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800509c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800509e:	4413      	add	r3, r2
 80050a0:	1c5a      	adds	r2, r3, #1
 80050a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	f383 8810 	msr	PRIMASK, r3
}
 80050b0:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3744      	adds	r7, #68	@ 0x44
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr
 80050c0:	ffffe000 	.word	0xffffe000

080050c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b089      	sub	sp, #36	@ 0x24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80050ce:	2300      	movs	r3, #0
 80050d0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80050d2:	2300      	movs	r3, #0
 80050d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80050d6:	2300      	movs	r3, #0
 80050d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80050da:	2300      	movs	r3, #0
 80050dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80050de:	2300      	movs	r3, #0
 80050e0:	61fb      	str	r3, [r7, #28]
 80050e2:	e175      	b.n	80053d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80050e4:	2201      	movs	r2, #1
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	4013      	ands	r3, r2
 80050f6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	f040 8164 	bne.w	80053ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f003 0303 	and.w	r3, r3, #3
 800510a:	2b01      	cmp	r3, #1
 800510c:	d005      	beq.n	800511a <HAL_GPIO_Init+0x56>
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f003 0303 	and.w	r3, r3, #3
 8005116:	2b02      	cmp	r3, #2
 8005118:	d130      	bne.n	800517c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	2203      	movs	r2, #3
 8005126:	fa02 f303 	lsl.w	r3, r2, r3
 800512a:	43db      	mvns	r3, r3
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	4013      	ands	r3, r2
 8005130:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	68da      	ldr	r2, [r3, #12]
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	fa02 f303 	lsl.w	r3, r2, r3
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	4313      	orrs	r3, r2
 8005142:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	69ba      	ldr	r2, [r7, #24]
 8005148:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005150:	2201      	movs	r2, #1
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	fa02 f303 	lsl.w	r3, r2, r3
 8005158:	43db      	mvns	r3, r3
 800515a:	69ba      	ldr	r2, [r7, #24]
 800515c:	4013      	ands	r3, r2
 800515e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	091b      	lsrs	r3, r3, #4
 8005166:	f003 0201 	and.w	r2, r3, #1
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	fa02 f303 	lsl.w	r3, r2, r3
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	4313      	orrs	r3, r2
 8005174:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f003 0303 	and.w	r3, r3, #3
 8005184:	2b03      	cmp	r3, #3
 8005186:	d017      	beq.n	80051b8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	2203      	movs	r2, #3
 8005194:	fa02 f303 	lsl.w	r3, r2, r3
 8005198:	43db      	mvns	r3, r3
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	4013      	ands	r3, r2
 800519e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	689a      	ldr	r2, [r3, #8]
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	005b      	lsls	r3, r3, #1
 80051a8:	fa02 f303 	lsl.w	r3, r2, r3
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	69ba      	ldr	r2, [r7, #24]
 80051b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f003 0303 	and.w	r3, r3, #3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d123      	bne.n	800520c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	08da      	lsrs	r2, r3, #3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	3208      	adds	r2, #8
 80051cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	f003 0307 	and.w	r3, r3, #7
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	220f      	movs	r2, #15
 80051dc:	fa02 f303 	lsl.w	r3, r2, r3
 80051e0:	43db      	mvns	r3, r3
 80051e2:	69ba      	ldr	r2, [r7, #24]
 80051e4:	4013      	ands	r3, r2
 80051e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	691a      	ldr	r2, [r3, #16]
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	f003 0307 	and.w	r3, r3, #7
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	fa02 f303 	lsl.w	r3, r2, r3
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	08da      	lsrs	r2, r3, #3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	3208      	adds	r2, #8
 8005206:	69b9      	ldr	r1, [r7, #24]
 8005208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	005b      	lsls	r3, r3, #1
 8005216:	2203      	movs	r2, #3
 8005218:	fa02 f303 	lsl.w	r3, r2, r3
 800521c:	43db      	mvns	r3, r3
 800521e:	69ba      	ldr	r2, [r7, #24]
 8005220:	4013      	ands	r3, r2
 8005222:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f003 0203 	and.w	r2, r3, #3
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	005b      	lsls	r3, r3, #1
 8005230:	fa02 f303 	lsl.w	r3, r2, r3
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	4313      	orrs	r3, r2
 8005238:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	69ba      	ldr	r2, [r7, #24]
 800523e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005248:	2b00      	cmp	r3, #0
 800524a:	f000 80be 	beq.w	80053ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800524e:	4b66      	ldr	r3, [pc, #408]	@ (80053e8 <HAL_GPIO_Init+0x324>)
 8005250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005252:	4a65      	ldr	r2, [pc, #404]	@ (80053e8 <HAL_GPIO_Init+0x324>)
 8005254:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005258:	6453      	str	r3, [r2, #68]	@ 0x44
 800525a:	4b63      	ldr	r3, [pc, #396]	@ (80053e8 <HAL_GPIO_Init+0x324>)
 800525c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800525e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005262:	60fb      	str	r3, [r7, #12]
 8005264:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005266:	4a61      	ldr	r2, [pc, #388]	@ (80053ec <HAL_GPIO_Init+0x328>)
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	089b      	lsrs	r3, r3, #2
 800526c:	3302      	adds	r3, #2
 800526e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005272:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	f003 0303 	and.w	r3, r3, #3
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	220f      	movs	r2, #15
 800527e:	fa02 f303 	lsl.w	r3, r2, r3
 8005282:	43db      	mvns	r3, r3
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	4013      	ands	r3, r2
 8005288:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a58      	ldr	r2, [pc, #352]	@ (80053f0 <HAL_GPIO_Init+0x32c>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d037      	beq.n	8005302 <HAL_GPIO_Init+0x23e>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a57      	ldr	r2, [pc, #348]	@ (80053f4 <HAL_GPIO_Init+0x330>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d031      	beq.n	80052fe <HAL_GPIO_Init+0x23a>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a56      	ldr	r2, [pc, #344]	@ (80053f8 <HAL_GPIO_Init+0x334>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d02b      	beq.n	80052fa <HAL_GPIO_Init+0x236>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a55      	ldr	r2, [pc, #340]	@ (80053fc <HAL_GPIO_Init+0x338>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d025      	beq.n	80052f6 <HAL_GPIO_Init+0x232>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a54      	ldr	r2, [pc, #336]	@ (8005400 <HAL_GPIO_Init+0x33c>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d01f      	beq.n	80052f2 <HAL_GPIO_Init+0x22e>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a53      	ldr	r2, [pc, #332]	@ (8005404 <HAL_GPIO_Init+0x340>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d019      	beq.n	80052ee <HAL_GPIO_Init+0x22a>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a52      	ldr	r2, [pc, #328]	@ (8005408 <HAL_GPIO_Init+0x344>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d013      	beq.n	80052ea <HAL_GPIO_Init+0x226>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a51      	ldr	r2, [pc, #324]	@ (800540c <HAL_GPIO_Init+0x348>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d00d      	beq.n	80052e6 <HAL_GPIO_Init+0x222>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a50      	ldr	r2, [pc, #320]	@ (8005410 <HAL_GPIO_Init+0x34c>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d007      	beq.n	80052e2 <HAL_GPIO_Init+0x21e>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a4f      	ldr	r2, [pc, #316]	@ (8005414 <HAL_GPIO_Init+0x350>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d101      	bne.n	80052de <HAL_GPIO_Init+0x21a>
 80052da:	2309      	movs	r3, #9
 80052dc:	e012      	b.n	8005304 <HAL_GPIO_Init+0x240>
 80052de:	230a      	movs	r3, #10
 80052e0:	e010      	b.n	8005304 <HAL_GPIO_Init+0x240>
 80052e2:	2308      	movs	r3, #8
 80052e4:	e00e      	b.n	8005304 <HAL_GPIO_Init+0x240>
 80052e6:	2307      	movs	r3, #7
 80052e8:	e00c      	b.n	8005304 <HAL_GPIO_Init+0x240>
 80052ea:	2306      	movs	r3, #6
 80052ec:	e00a      	b.n	8005304 <HAL_GPIO_Init+0x240>
 80052ee:	2305      	movs	r3, #5
 80052f0:	e008      	b.n	8005304 <HAL_GPIO_Init+0x240>
 80052f2:	2304      	movs	r3, #4
 80052f4:	e006      	b.n	8005304 <HAL_GPIO_Init+0x240>
 80052f6:	2303      	movs	r3, #3
 80052f8:	e004      	b.n	8005304 <HAL_GPIO_Init+0x240>
 80052fa:	2302      	movs	r3, #2
 80052fc:	e002      	b.n	8005304 <HAL_GPIO_Init+0x240>
 80052fe:	2301      	movs	r3, #1
 8005300:	e000      	b.n	8005304 <HAL_GPIO_Init+0x240>
 8005302:	2300      	movs	r3, #0
 8005304:	69fa      	ldr	r2, [r7, #28]
 8005306:	f002 0203 	and.w	r2, r2, #3
 800530a:	0092      	lsls	r2, r2, #2
 800530c:	4093      	lsls	r3, r2
 800530e:	69ba      	ldr	r2, [r7, #24]
 8005310:	4313      	orrs	r3, r2
 8005312:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005314:	4935      	ldr	r1, [pc, #212]	@ (80053ec <HAL_GPIO_Init+0x328>)
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	089b      	lsrs	r3, r3, #2
 800531a:	3302      	adds	r3, #2
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005322:	4b3d      	ldr	r3, [pc, #244]	@ (8005418 <HAL_GPIO_Init+0x354>)
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	43db      	mvns	r3, r3
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	4013      	ands	r3, r2
 8005330:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800533e:	69ba      	ldr	r2, [r7, #24]
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	4313      	orrs	r3, r2
 8005344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005346:	4a34      	ldr	r2, [pc, #208]	@ (8005418 <HAL_GPIO_Init+0x354>)
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800534c:	4b32      	ldr	r3, [pc, #200]	@ (8005418 <HAL_GPIO_Init+0x354>)
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	43db      	mvns	r3, r3
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	4013      	ands	r3, r2
 800535a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d003      	beq.n	8005370 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	4313      	orrs	r3, r2
 800536e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005370:	4a29      	ldr	r2, [pc, #164]	@ (8005418 <HAL_GPIO_Init+0x354>)
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005376:	4b28      	ldr	r3, [pc, #160]	@ (8005418 <HAL_GPIO_Init+0x354>)
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	43db      	mvns	r3, r3
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	4013      	ands	r3, r2
 8005384:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005392:	69ba      	ldr	r2, [r7, #24]
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	4313      	orrs	r3, r2
 8005398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800539a:	4a1f      	ldr	r2, [pc, #124]	@ (8005418 <HAL_GPIO_Init+0x354>)
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053a0:	4b1d      	ldr	r3, [pc, #116]	@ (8005418 <HAL_GPIO_Init+0x354>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	43db      	mvns	r3, r3
 80053aa:	69ba      	ldr	r2, [r7, #24]
 80053ac:	4013      	ands	r3, r2
 80053ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d003      	beq.n	80053c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80053c4:	4a14      	ldr	r2, [pc, #80]	@ (8005418 <HAL_GPIO_Init+0x354>)
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	3301      	adds	r3, #1
 80053ce:	61fb      	str	r3, [r7, #28]
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	2b0f      	cmp	r3, #15
 80053d4:	f67f ae86 	bls.w	80050e4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80053d8:	bf00      	nop
 80053da:	bf00      	nop
 80053dc:	3724      	adds	r7, #36	@ 0x24
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	40023800 	.word	0x40023800
 80053ec:	40013800 	.word	0x40013800
 80053f0:	40020000 	.word	0x40020000
 80053f4:	40020400 	.word	0x40020400
 80053f8:	40020800 	.word	0x40020800
 80053fc:	40020c00 	.word	0x40020c00
 8005400:	40021000 	.word	0x40021000
 8005404:	40021400 	.word	0x40021400
 8005408:	40021800 	.word	0x40021800
 800540c:	40021c00 	.word	0x40021c00
 8005410:	40022000 	.word	0x40022000
 8005414:	40022400 	.word	0x40022400
 8005418:	40013c00 	.word	0x40013c00

0800541c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e08b      	b.n	8005546 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d106      	bne.n	8005448 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f7fb fc96 	bl	8000d74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2224      	movs	r2, #36	@ 0x24
 800544c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f022 0201 	bic.w	r2, r2, #1
 800545e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685a      	ldr	r2, [r3, #4]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800546c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	689a      	ldr	r2, [r3, #8]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800547c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d107      	bne.n	8005496 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	689a      	ldr	r2, [r3, #8]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005492:	609a      	str	r2, [r3, #8]
 8005494:	e006      	b.n	80054a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	689a      	ldr	r2, [r3, #8]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80054a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d108      	bne.n	80054be <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685a      	ldr	r2, [r3, #4]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054ba:	605a      	str	r2, [r3, #4]
 80054bc:	e007      	b.n	80054ce <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	6859      	ldr	r1, [r3, #4]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	4b1d      	ldr	r3, [pc, #116]	@ (8005550 <HAL_I2C_Init+0x134>)
 80054da:	430b      	orrs	r3, r1
 80054dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80054ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	691a      	ldr	r2, [r3, #16]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	430a      	orrs	r2, r1
 8005506:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	69d9      	ldr	r1, [r3, #28]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a1a      	ldr	r2, [r3, #32]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	430a      	orrs	r2, r1
 8005516:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f042 0201 	orr.w	r2, r2, #1
 8005526:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2220      	movs	r2, #32
 8005532:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3708      	adds	r7, #8
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	02008000 	.word	0x02008000

08005554 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b08a      	sub	sp, #40	@ 0x28
 8005558:	af02      	add	r7, sp, #8
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	607a      	str	r2, [r7, #4]
 800555e:	461a      	mov	r2, r3
 8005560:	460b      	mov	r3, r1
 8005562:	817b      	strh	r3, [r7, #10]
 8005564:	4613      	mov	r3, r2
 8005566:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8005568:	2300      	movs	r3, #0
 800556a:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b20      	cmp	r3, #32
 8005576:	f040 80ef 	bne.w	8005758 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005584:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005588:	d101      	bne.n	800558e <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800558a:	2302      	movs	r3, #2
 800558c:	e0e5      	b.n	800575a <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005594:	2b01      	cmp	r3, #1
 8005596:	d101      	bne.n	800559c <HAL_I2C_Master_Transmit_DMA+0x48>
 8005598:	2302      	movs	r3, #2
 800559a:	e0de      	b.n	800575a <HAL_I2C_Master_Transmit_DMA+0x206>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2221      	movs	r2, #33	@ 0x21
 80055a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2210      	movs	r2, #16
 80055b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	893a      	ldrh	r2, [r7, #8]
 80055c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	4a66      	ldr	r2, [pc, #408]	@ (8005764 <HAL_I2C_Master_Transmit_DMA+0x210>)
 80055ca:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	4a66      	ldr	r2, [pc, #408]	@ (8005768 <HAL_I2C_Master_Transmit_DMA+0x214>)
 80055d0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	2bff      	cmp	r3, #255	@ 0xff
 80055da:	d906      	bls.n	80055ea <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	22ff      	movs	r2, #255	@ 0xff
 80055e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80055e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80055e6:	61fb      	str	r3, [r7, #28]
 80055e8:	e007      	b.n	80055fa <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80055f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80055f8:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d01a      	beq.n	8005638 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005606:	781a      	ldrb	r2, [r3, #0]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005612:	1c5a      	adds	r2, r3, #1
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800561c:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005622:	b29b      	uxth	r3, r3
 8005624:	3b01      	subs	r3, #1
 8005626:	b29a      	uxth	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005630:	3b01      	subs	r3, #1
 8005632:	b29a      	uxth	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800563c:	2b00      	cmp	r3, #0
 800563e:	d074      	beq.n	800572a <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005644:	2b00      	cmp	r3, #0
 8005646:	d022      	beq.n	800568e <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800564c:	4a47      	ldr	r2, [pc, #284]	@ (800576c <HAL_I2C_Master_Transmit_DMA+0x218>)
 800564e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005654:	4a46      	ldr	r2, [pc, #280]	@ (8005770 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8005656:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800565c:	2200      	movs	r2, #0
 800565e:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005664:	2200      	movs	r2, #0
 8005666:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005670:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005678:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800567e:	f7fd fee1 	bl	8003444 <HAL_DMA_Start_IT>
 8005682:	4603      	mov	r3, r0
 8005684:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005686:	7dfb      	ldrb	r3, [r7, #23]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d13a      	bne.n	8005702 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 800568c:	e013      	b.n	80056b6 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2220      	movs	r2, #32
 8005692:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056a2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e051      	b.n	800575a <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	3301      	adds	r3, #1
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	8979      	ldrh	r1, [r7, #10]
 80056c2:	4b2c      	ldr	r3, [pc, #176]	@ (8005774 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80056c4:	9300      	str	r3, [sp, #0]
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f001 ff3f 	bl	800754c <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	b29a      	uxth	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80056e8:	2110      	movs	r1, #16
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f001 ff60 	bl	80075b0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056fe:	601a      	str	r2, [r3, #0]
 8005700:	e028      	b.n	8005754 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2220      	movs	r2, #32
 8005706:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005716:	f043 0210 	orr.w	r2, r3, #16
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e017      	b.n	800575a <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	4a12      	ldr	r2, [pc, #72]	@ (8005778 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800572e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	b2da      	uxtb	r2, r3
 8005734:	8979      	ldrh	r1, [r7, #10]
 8005736:	4b0f      	ldr	r3, [pc, #60]	@ (8005774 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f001 ff04 	bl	800754c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800574c:	2101      	movs	r1, #1
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f001 ff2e 	bl	80075b0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005754:	2300      	movs	r3, #0
 8005756:	e000      	b.n	800575a <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005758:	2302      	movs	r3, #2
  }
}
 800575a:	4618      	mov	r0, r3
 800575c:	3720      	adds	r7, #32
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	ffff0000 	.word	0xffff0000
 8005768:	080062a3 	.word	0x080062a3
 800576c:	080072cf 	.word	0x080072cf
 8005770:	0800749d 	.word	0x0800749d
 8005774:	80002000 	.word	0x80002000
 8005778:	08005e17 	.word	0x08005e17

0800577c <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b088      	sub	sp, #32
 8005780:	af02      	add	r7, sp, #8
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	607a      	str	r2, [r7, #4]
 8005786:	461a      	mov	r2, r3
 8005788:	460b      	mov	r3, r1
 800578a:	817b      	strh	r3, [r7, #10]
 800578c:	4613      	mov	r3, r2
 800578e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005796:	b2db      	uxtb	r3, r3
 8005798:	2b20      	cmp	r3, #32
 800579a:	f040 80cd 	bne.w	8005938 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057ac:	d101      	bne.n	80057b2 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 80057ae:	2302      	movs	r3, #2
 80057b0:	e0c3      	b.n	800593a <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d101      	bne.n	80057c0 <HAL_I2C_Master_Receive_DMA+0x44>
 80057bc:	2302      	movs	r3, #2
 80057be:	e0bc      	b.n	800593a <HAL_I2C_Master_Receive_DMA+0x1be>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2222      	movs	r2, #34	@ 0x22
 80057cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2210      	movs	r2, #16
 80057d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	893a      	ldrh	r2, [r7, #8]
 80057e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	4a55      	ldr	r2, [pc, #340]	@ (8005944 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 80057ee:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	4a55      	ldr	r2, [pc, #340]	@ (8005948 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 80057f4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	2bff      	cmp	r3, #255	@ 0xff
 80057fe:	d906      	bls.n	800580e <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = 1U;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2201      	movs	r2, #1
 8005804:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005806:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800580a:	617b      	str	r3, [r7, #20]
 800580c:	e007      	b.n	800581e <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005812:	b29a      	uxth	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005818:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800581c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005822:	2b00      	cmp	r3, #0
 8005824:	d070      	beq.n	8005908 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800582a:	2b00      	cmp	r3, #0
 800582c:	d020      	beq.n	8005870 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005832:	4a46      	ldr	r2, [pc, #280]	@ (800594c <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8005834:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800583a:	4a45      	ldr	r2, [pc, #276]	@ (8005950 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 800583c:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005842:	2200      	movs	r2, #0
 8005844:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800584a:	2200      	movs	r2, #0
 800584c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	3324      	adds	r3, #36	@ 0x24
 8005858:	4619      	mov	r1, r3
 800585a:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005860:	f7fd fdf0 	bl	8003444 <HAL_DMA_Start_IT>
 8005864:	4603      	mov	r3, r0
 8005866:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005868:	7cfb      	ldrb	r3, [r7, #19]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d138      	bne.n	80058e0 <HAL_I2C_Master_Receive_DMA+0x164>
 800586e:	e013      	b.n	8005898 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2220      	movs	r2, #32
 8005874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005884:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e050      	b.n	800593a <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800589c:	b2da      	uxtb	r2, r3
 800589e:	8979      	ldrh	r1, [r7, #10]
 80058a0:	4b2c      	ldr	r3, [pc, #176]	@ (8005954 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f001 fe50 	bl	800754c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80058c6:	2110      	movs	r1, #16
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f001 fe71 	bl	80075b0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80058dc:	601a      	str	r2, [r3, #0]
 80058de:	e029      	b.n	8005934 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2220      	movs	r2, #32
 80058e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058f4:	f043 0210 	orr.w	r2, r3, #16
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e018      	b.n	800593a <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	4a13      	ldr	r2, [pc, #76]	@ (8005958 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 800590c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005912:	b2da      	uxtb	r2, r3
 8005914:	8979      	ldrh	r1, [r7, #10]
 8005916:	4b0f      	ldr	r3, [pc, #60]	@ (8005954 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8005918:	9300      	str	r3, [sp, #0]
 800591a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	f001 fe14 	bl	800754c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800592c:	2102      	movs	r1, #2
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f001 fe3e 	bl	80075b0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005934:	2300      	movs	r3, #0
 8005936:	e000      	b.n	800593a <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8005938:	2302      	movs	r3, #2
  }
}
 800593a:	4618      	mov	r0, r3
 800593c:	3718      	adds	r7, #24
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	ffff0000 	.word	0xffff0000
 8005948:	080062a3 	.word	0x080062a3
 800594c:	080073a5 	.word	0x080073a5
 8005950:	0800749d 	.word	0x0800749d
 8005954:	80002400 	.word	0x80002400
 8005958:	08005e17 	.word	0x08005e17

0800595c <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b086      	sub	sp, #24
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	4613      	mov	r3, r2
 8005968:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b20      	cmp	r3, #32
 8005974:	f040 80d1 	bne.w	8005b1a <HAL_I2C_Slave_Transmit_DMA+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d002      	beq.n	8005984 <HAL_I2C_Slave_Transmit_DMA+0x28>
 800597e:	88fb      	ldrh	r3, [r7, #6]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d105      	bne.n	8005990 <HAL_I2C_Slave_Transmit_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800598a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e0c5      	b.n	8005b1c <HAL_I2C_Slave_Transmit_DMA+0x1c0>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005996:	2b01      	cmp	r3, #1
 8005998:	d101      	bne.n	800599e <HAL_I2C_Slave_Transmit_DMA+0x42>
 800599a:	2302      	movs	r3, #2
 800599c:	e0be      	b.n	8005b1c <HAL_I2C_Slave_Transmit_DMA+0x1c0>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2221      	movs	r2, #33	@ 0x21
 80059aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2220      	movs	r2, #32
 80059b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	88fa      	ldrh	r2, [r7, #6]
 80059c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	4a53      	ldr	r2, [pc, #332]	@ (8005b24 <HAL_I2C_Slave_Transmit_DMA+0x1c8>)
 80059d6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	4a53      	ldr	r2, [pc, #332]	@ (8005b28 <HAL_I2C_Slave_Transmit_DMA+0x1cc>)
 80059dc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059e6:	d117      	bne.n	8005a18 <HAL_I2C_Slave_Transmit_DMA+0xbc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ec:	781a      	ldrb	r2, [r3, #0]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f8:	1c5a      	adds	r2, r3, #1
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	3b01      	subs	r3, #1
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a10:	3b01      	subs	r3, #1
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferCount != 0U)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d068      	beq.n	8005af4 <HAL_I2C_Slave_Transmit_DMA+0x198>
    {
      if (hi2c->hdmatx != NULL)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d022      	beq.n	8005a70 <HAL_I2C_Slave_Transmit_DMA+0x114>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a2e:	4a3f      	ldr	r2, [pc, #252]	@ (8005b2c <HAL_I2C_Slave_Transmit_DMA+0x1d0>)
 8005a30:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a36:	4a3e      	ldr	r2, [pc, #248]	@ (8005b30 <HAL_I2C_Slave_Transmit_DMA+0x1d4>)
 8005a38:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a3e:	2200      	movs	r2, #0
 8005a40:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a46:	2200      	movs	r2, #0
 8005a48:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005a52:	4619      	mov	r1, r3
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005a5a:	461a      	mov	r2, r3
                                         hi2c->XferSize);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005a60:	f7fd fcf0 	bl	8003444 <HAL_DMA_Start_IT>
 8005a64:	4603      	mov	r3, r0
 8005a66:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005a68:	7dfb      	ldrb	r3, [r7, #23]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d12e      	bne.n	8005acc <HAL_I2C_Slave_Transmit_DMA+0x170>
 8005a6e:	e013      	b.n	8005a98 <HAL_I2C_Slave_Transmit_DMA+0x13c>
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2228      	movs	r2, #40	@ 0x28
 8005a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a84:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e041      	b.n	8005b1c <HAL_I2C_Slave_Transmit_DMA+0x1c0>
      {
        /* Enable Address Acknowledge */
        hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005aa6:	605a      	str	r2, [r3, #4]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR, STOP, NACK, ADDR interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005ab0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f001 fd7b 	bl	80075b0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ac8:	601a      	str	r2, [r3, #0]
 8005aca:	e024      	b.n	8005b16 <HAL_I2C_Slave_Transmit_DMA+0x1ba>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2228      	movs	r2, #40	@ 0x28
 8005ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ae0:	f043 0210 	orr.w	r2, r3, #16
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e013      	b.n	8005b1c <HAL_I2C_Slave_Transmit_DMA+0x1c0>
      }
    }
    else
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	685a      	ldr	r2, [r3, #4]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b02:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005b0c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f001 fd4d 	bl	80075b0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005b16:	2300      	movs	r3, #0
 8005b18:	e000      	b.n	8005b1c <HAL_I2C_Slave_Transmit_DMA+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8005b1a:	2302      	movs	r3, #2
  }
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3718      	adds	r7, #24
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	ffff0000 	.word	0xffff0000
 8005b28:	08006745 	.word	0x08006745
 8005b2c:	08007365 	.word	0x08007365
 8005b30:	0800749d 	.word	0x0800749d

08005b34 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b086      	sub	sp, #24
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b20      	cmp	r3, #32
 8005b4c:	f040 809b 	bne.w	8005c86 <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d002      	beq.n	8005b5c <HAL_I2C_Slave_Receive_DMA+0x28>
 8005b56:	88fb      	ldrh	r3, [r7, #6]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d105      	bne.n	8005b68 <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b62:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e08f      	b.n	8005c88 <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d101      	bne.n	8005b76 <HAL_I2C_Slave_Receive_DMA+0x42>
 8005b72:	2302      	movs	r3, #2
 8005b74:	e088      	b.n	8005c88 <HAL_I2C_Slave_Receive_DMA+0x154>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2222      	movs	r2, #34	@ 0x22
 8005b82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2220      	movs	r2, #32
 8005b8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	88fa      	ldrh	r2, [r7, #6]
 8005b9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	4a38      	ldr	r2, [pc, #224]	@ (8005c90 <HAL_I2C_Slave_Receive_DMA+0x15c>)
 8005bae:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	4a38      	ldr	r2, [pc, #224]	@ (8005c94 <HAL_I2C_Slave_Receive_DMA+0x160>)
 8005bb4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->hdmarx != NULL)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d020      	beq.n	8005c00 <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bc2:	4a35      	ldr	r2, [pc, #212]	@ (8005c98 <HAL_I2C_Slave_Receive_DMA+0x164>)
 8005bc4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bca:	4a34      	ldr	r2, [pc, #208]	@ (8005c9c <HAL_I2C_Slave_Receive_DMA+0x168>)
 8005bcc:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bda:	2200      	movs	r2, #0
 8005bdc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3324      	adds	r3, #36	@ 0x24
 8005be8:	4619      	mov	r1, r3
 8005bea:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005bf0:	f7fd fc28 	bl	8003444 <HAL_DMA_Start_IT>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8005bf8:	7dfb      	ldrb	r3, [r7, #23]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d12f      	bne.n	8005c5e <HAL_I2C_Slave_Receive_DMA+0x12a>
 8005bfe:	e013      	b.n	8005c28 <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2228      	movs	r2, #40	@ 0x28
 8005c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c14:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e02f      	b.n	8005c88 <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	685a      	ldr	r2, [r3, #4]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c36:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005c40:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f001 fcb3 	bl	80075b0 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c58:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	e014      	b.n	8005c88 <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2228      	movs	r2, #40	@ 0x28
 8005c62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c72:	f043 0210 	orr.w	r2, r3, #16
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e000      	b.n	8005c88 <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 8005c86:	2302      	movs	r3, #2
  }
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3718      	adds	r7, #24
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	ffff0000 	.word	0xffff0000
 8005c94:	08006745 	.word	0x08006745
 8005c98:	08007457 	.word	0x08007457
 8005c9c:	0800749d 	.word	0x0800749d

08005ca0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d005      	beq.n	8005ccc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cc4:	68ba      	ldr	r2, [r7, #8]
 8005cc6:	68f9      	ldr	r1, [r7, #12]
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	4798      	blx	r3
  }
}
 8005ccc:	bf00      	nop
 8005cce:	3710      	adds	r7, #16
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b086      	sub	sp, #24
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	0a1b      	lsrs	r3, r3, #8
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d010      	beq.n	8005d1a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	09db      	lsrs	r3, r3, #7
 8005cfc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00a      	beq.n	8005d1a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d08:	f043 0201 	orr.w	r2, r3, #1
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d18:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	0a9b      	lsrs	r3, r3, #10
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d010      	beq.n	8005d48 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	09db      	lsrs	r3, r3, #7
 8005d2a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00a      	beq.n	8005d48 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d36:	f043 0208 	orr.w	r2, r3, #8
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005d46:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	0a5b      	lsrs	r3, r3, #9
 8005d4c:	f003 0301 	and.w	r3, r3, #1
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d010      	beq.n	8005d76 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	09db      	lsrs	r3, r3, #7
 8005d58:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00a      	beq.n	8005d76 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d64:	f043 0202 	orr.w	r2, r3, #2
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d74:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f003 030b 	and.w	r3, r3, #11
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d003      	beq.n	8005d8e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8005d86:	68f9      	ldr	r1, [r7, #12]
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f001 f965 	bl	8007058 <I2C_ITError>
  }
}
 8005d8e:	bf00      	nop
 8005d90:	3718      	adds	r7, #24
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b083      	sub	sp, #12
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
 8005d9e:	460b      	mov	r3, r1
 8005da0:	70fb      	strb	r3, [r7, #3]
 8005da2:	4613      	mov	r3, r2
 8005da4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005da6:	bf00      	nop
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b083      	sub	sp, #12
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005dba:	bf00      	nop
 8005dbc:	370c      	adds	r7, #12
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b083      	sub	sp, #12
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005dce:	bf00      	nop
 8005dd0:	370c      	adds	r7, #12
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b083      	sub	sp, #12
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005de2:	bf00      	nop
 8005de4:	370c      	adds	r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b083      	sub	sp, #12
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005df6:	bf00      	nop
 8005df8:	370c      	adds	r7, #12
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b083      	sub	sp, #12
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005e0a:	bf00      	nop
 8005e0c:	370c      	adds	r7, #12
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005e16:	b580      	push	{r7, lr}
 8005e18:	b088      	sub	sp, #32
 8005e1a:	af02      	add	r7, sp, #8
 8005e1c:	60f8      	str	r0, [r7, #12]
 8005e1e:	60b9      	str	r1, [r7, #8]
 8005e20:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d101      	bne.n	8005e34 <I2C_Master_ISR_IT+0x1e>
 8005e30:	2302      	movs	r3, #2
 8005e32:	e12e      	b.n	8006092 <I2C_Master_ISR_IT+0x27c>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	091b      	lsrs	r3, r3, #4
 8005e40:	f003 0301 	and.w	r3, r3, #1
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d013      	beq.n	8005e70 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	091b      	lsrs	r3, r3, #4
 8005e4c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00d      	beq.n	8005e70 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2210      	movs	r2, #16
 8005e5a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e60:	f043 0204 	orr.w	r2, r3, #4
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f001 fa0c 	bl	8007286 <I2C_Flush_TXDR>
 8005e6e:	e0fb      	b.n	8006068 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	089b      	lsrs	r3, r3, #2
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d023      	beq.n	8005ec4 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	089b      	lsrs	r3, r3, #2
 8005e80:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d01d      	beq.n	8005ec4 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	f023 0304 	bic.w	r3, r3, #4
 8005e8e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e9a:	b2d2      	uxtb	r2, r2
 8005e9c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea2:	1c5a      	adds	r2, r3, #1
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eac:	3b01      	subs	r3, #1
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005ec2:	e0d1      	b.n	8006068 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	099b      	lsrs	r3, r3, #6
 8005ec8:	f003 0301 	and.w	r3, r3, #1
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d12a      	bne.n	8005f26 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	085b      	lsrs	r3, r3, #1
 8005ed4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d024      	beq.n	8005f26 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	085b      	lsrs	r3, r3, #1
 8005ee0:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d01e      	beq.n	8005f26 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f000 80ba 	beq.w	8006068 <I2C_Master_ISR_IT+0x252>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef8:	781a      	ldrb	r2, [r3, #0]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f04:	1c5a      	adds	r2, r3, #1
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8005f24:	e0a0      	b.n	8006068 <I2C_Master_ISR_IT+0x252>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	09db      	lsrs	r3, r3, #7
 8005f2a:	f003 0301 	and.w	r3, r3, #1
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d06b      	beq.n	800600a <I2C_Master_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	099b      	lsrs	r3, r3, #6
 8005f36:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d065      	beq.n	800600a <I2C_Master_ISR_IT+0x1f4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d04e      	beq.n	8005fe6 <I2C_Master_ISR_IT+0x1d0>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d14a      	bne.n	8005fe6 <I2C_Master_ISR_IT+0x1d0>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f5c:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	2bff      	cmp	r3, #255	@ 0xff
 8005f66:	d91c      	bls.n	8005fa2 <I2C_Master_ISR_IT+0x18c>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	0c1b      	lsrs	r3, r3, #16
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d103      	bne.n	8005f84 <I2C_Master_ISR_IT+0x16e>
        {
          hi2c->XferSize = 1U;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005f82:	e002      	b.n	8005f8a <I2C_Master_ISR_IT+0x174>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	22ff      	movs	r2, #255	@ 0xff
 8005f88:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f8e:	b2da      	uxtb	r2, r3
 8005f90:	8a79      	ldrh	r1, [r7, #18]
 8005f92:	2300      	movs	r3, #0
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f001 fad6 	bl	800754c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fa0:	e032      	b.n	8006008 <I2C_Master_ISR_IT+0x1f2>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fb0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005fb4:	d00b      	beq.n	8005fce <I2C_Master_ISR_IT+0x1b8>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fba:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005fc0:	8a79      	ldrh	r1, [r7, #18]
 8005fc2:	2000      	movs	r0, #0
 8005fc4:	9000      	str	r0, [sp, #0]
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f001 fac0 	bl	800754c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fcc:	e01c      	b.n	8006008 <I2C_Master_ISR_IT+0x1f2>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fd2:	b2da      	uxtb	r2, r3
 8005fd4:	8a79      	ldrh	r1, [r7, #18]
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f001 fab4 	bl	800754c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fe4:	e010      	b.n	8006008 <I2C_Master_ISR_IT+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ff0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ff4:	d003      	beq.n	8005ffe <I2C_Master_ISR_IT+0x1e8>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f000 fd09 	bl	8006a0e <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ffc:	e034      	b.n	8006068 <I2C_Master_ISR_IT+0x252>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005ffe:	2140      	movs	r1, #64	@ 0x40
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f001 f829 	bl	8007058 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006006:	e02f      	b.n	8006068 <I2C_Master_ISR_IT+0x252>
 8006008:	e02e      	b.n	8006068 <I2C_Master_ISR_IT+0x252>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	099b      	lsrs	r3, r3, #6
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d028      	beq.n	8006068 <I2C_Master_ISR_IT+0x252>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	099b      	lsrs	r3, r3, #6
 800601a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800601e:	2b00      	cmp	r3, #0
 8006020:	d022      	beq.n	8006068 <I2C_Master_ISR_IT+0x252>
  {
    if (hi2c->XferCount == 0U)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006026:	b29b      	uxth	r3, r3
 8006028:	2b00      	cmp	r3, #0
 800602a:	d119      	bne.n	8006060 <I2C_Master_ISR_IT+0x24a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006036:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800603a:	d015      	beq.n	8006068 <I2C_Master_ISR_IT+0x252>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006040:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006044:	d108      	bne.n	8006058 <I2C_Master_ISR_IT+0x242>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006054:	605a      	str	r2, [r3, #4]
 8006056:	e007      	b.n	8006068 <I2C_Master_ISR_IT+0x252>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f000 fcd8 	bl	8006a0e <I2C_ITMasterSeqCplt>
 800605e:	e003      	b.n	8006068 <I2C_Master_ISR_IT+0x252>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006060:	2140      	movs	r1, #64	@ 0x40
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f000 fff8 	bl	8007058 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	095b      	lsrs	r3, r3, #5
 800606c:	f003 0301 	and.w	r3, r3, #1
 8006070:	2b00      	cmp	r3, #0
 8006072:	d009      	beq.n	8006088 <I2C_Master_ISR_IT+0x272>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	095b      	lsrs	r3, r3, #5
 8006078:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800607c:	2b00      	cmp	r3, #0
 800607e:	d003      	beq.n	8006088 <I2C_Master_ISR_IT+0x272>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8006080:	6979      	ldr	r1, [r7, #20]
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	f000 fd5e 	bl	8006b44 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3718      	adds	r7, #24
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800609a:	b580      	push	{r7, lr}
 800609c:	b086      	sub	sp, #24
 800609e:	af00      	add	r7, sp, #0
 80060a0:	60f8      	str	r0, [r7, #12]
 80060a2:	60b9      	str	r1, [r7, #8]
 80060a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d101      	bne.n	80060be <I2C_Slave_ISR_IT+0x24>
 80060ba:	2302      	movs	r3, #2
 80060bc:	e0ed      	b.n	800629a <I2C_Slave_ISR_IT+0x200>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	095b      	lsrs	r3, r3, #5
 80060ca:	f003 0301 	and.w	r3, r3, #1
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00a      	beq.n	80060e8 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	095b      	lsrs	r3, r3, #5
 80060d6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d004      	beq.n	80060e8 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80060de:	6939      	ldr	r1, [r7, #16]
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f000 fdf9 	bl	8006cd8 <I2C_ITSlaveCplt>
 80060e6:	e0d3      	b.n	8006290 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	091b      	lsrs	r3, r3, #4
 80060ec:	f003 0301 	and.w	r3, r3, #1
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d04d      	beq.n	8006190 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	091b      	lsrs	r3, r3, #4
 80060f8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d047      	beq.n	8006190 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006104:	b29b      	uxth	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d128      	bne.n	800615c <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006110:	b2db      	uxtb	r3, r3
 8006112:	2b28      	cmp	r3, #40	@ 0x28
 8006114:	d108      	bne.n	8006128 <I2C_Slave_ISR_IT+0x8e>
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800611c:	d104      	bne.n	8006128 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800611e:	6939      	ldr	r1, [r7, #16]
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f000 ff43 	bl	8006fac <I2C_ITListenCplt>
 8006126:	e032      	b.n	800618e <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800612e:	b2db      	uxtb	r3, r3
 8006130:	2b29      	cmp	r3, #41	@ 0x29
 8006132:	d10e      	bne.n	8006152 <I2C_Slave_ISR_IT+0xb8>
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800613a:	d00a      	beq.n	8006152 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2210      	movs	r2, #16
 8006142:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f001 f89e 	bl	8007286 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	f000 fc9c 	bl	8006a88 <I2C_ITSlaveSeqCplt>
 8006150:	e01d      	b.n	800618e <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2210      	movs	r2, #16
 8006158:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800615a:	e096      	b.n	800628a <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2210      	movs	r2, #16
 8006162:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006168:	f043 0204 	orr.w	r2, r3, #4
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d004      	beq.n	8006180 <I2C_Slave_ISR_IT+0xe6>
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800617c:	f040 8085 	bne.w	800628a <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006184:	4619      	mov	r1, r3
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f000 ff66 	bl	8007058 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800618c:	e07d      	b.n	800628a <I2C_Slave_ISR_IT+0x1f0>
 800618e:	e07c      	b.n	800628a <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	089b      	lsrs	r3, r3, #2
 8006194:	f003 0301 	and.w	r3, r3, #1
 8006198:	2b00      	cmp	r3, #0
 800619a:	d030      	beq.n	80061fe <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	089b      	lsrs	r3, r3, #2
 80061a0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d02a      	beq.n	80061fe <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d018      	beq.n	80061e4 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061bc:	b2d2      	uxtb	r2, r2
 80061be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c4:	1c5a      	adds	r2, r3, #1
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061ce:	3b01      	subs	r3, #1
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061da:	b29b      	uxth	r3, r3
 80061dc:	3b01      	subs	r3, #1
 80061de:	b29a      	uxth	r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d14f      	bne.n	800628e <I2C_Slave_ISR_IT+0x1f4>
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80061f4:	d04b      	beq.n	800628e <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f000 fc46 	bl	8006a88 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80061fc:	e047      	b.n	800628e <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	08db      	lsrs	r3, r3, #3
 8006202:	f003 0301 	and.w	r3, r3, #1
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00a      	beq.n	8006220 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	08db      	lsrs	r3, r3, #3
 800620e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006212:	2b00      	cmp	r3, #0
 8006214:	d004      	beq.n	8006220 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006216:	6939      	ldr	r1, [r7, #16]
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f000 fb74 	bl	8006906 <I2C_ITAddrCplt>
 800621e:	e037      	b.n	8006290 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	085b      	lsrs	r3, r3, #1
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	2b00      	cmp	r3, #0
 800622a:	d031      	beq.n	8006290 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	085b      	lsrs	r3, r3, #1
 8006230:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006234:	2b00      	cmp	r3, #0
 8006236:	d02b      	beq.n	8006290 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800623c:	b29b      	uxth	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d018      	beq.n	8006274 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006246:	781a      	ldrb	r2, [r3, #0]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006252:	1c5a      	adds	r2, r3, #1
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800625c:	b29b      	uxth	r3, r3
 800625e:	3b01      	subs	r3, #1
 8006260:	b29a      	uxth	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800626a:	3b01      	subs	r3, #1
 800626c:	b29a      	uxth	r2, r3
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006272:	e00d      	b.n	8006290 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800627a:	d002      	beq.n	8006282 <I2C_Slave_ISR_IT+0x1e8>
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d106      	bne.n	8006290 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f000 fc00 	bl	8006a88 <I2C_ITSlaveSeqCplt>
 8006288:	e002      	b.n	8006290 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800628a:	bf00      	nop
 800628c:	e000      	b.n	8006290 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800628e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3718      	adds	r7, #24
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b088      	sub	sp, #32
 80062a6:	af02      	add	r7, sp, #8
 80062a8:	60f8      	str	r0, [r7, #12]
 80062aa:	60b9      	str	r1, [r7, #8]
 80062ac:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d101      	bne.n	80062bc <I2C_Master_ISR_DMA+0x1a>
 80062b8:	2302      	movs	r3, #2
 80062ba:	e0f0      	b.n	800649e <I2C_Master_ISR_DMA+0x1fc>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	091b      	lsrs	r3, r3, #4
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d017      	beq.n	8006300 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	091b      	lsrs	r3, r3, #4
 80062d4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d011      	beq.n	8006300 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2210      	movs	r2, #16
 80062e2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062e8:	f043 0204 	orr.w	r2, r3, #4
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80062f0:	2120      	movs	r1, #32
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	f001 f95c 	bl	80075b0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f000 ffc4 	bl	8007286 <I2C_Flush_TXDR>
 80062fe:	e0c9      	b.n	8006494 <I2C_Master_ISR_DMA+0x1f2>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	09db      	lsrs	r3, r3, #7
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	2b00      	cmp	r3, #0
 800630a:	f000 8081 	beq.w	8006410 <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	099b      	lsrs	r3, r3, #6
 8006312:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006316:	2b00      	cmp	r3, #0
 8006318:	d07a      	beq.n	8006410 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006328:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800632e:	b29b      	uxth	r3, r3
 8006330:	2b00      	cmp	r3, #0
 8006332:	d05c      	beq.n	80063ee <I2C_Master_ISR_DMA+0x14c>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	b29b      	uxth	r3, r3
 800633c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006340:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006346:	b29b      	uxth	r3, r3
 8006348:	2bff      	cmp	r3, #255	@ 0xff
 800634a:	d914      	bls.n	8006376 <I2C_Master_ISR_DMA+0xd4>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	699b      	ldr	r3, [r3, #24]
 8006352:	0c1b      	lsrs	r3, r3, #16
 8006354:	b2db      	uxtb	r3, r3
 8006356:	f003 0301 	and.w	r3, r3, #1
 800635a:	b2db      	uxtb	r3, r3
 800635c:	2b01      	cmp	r3, #1
 800635e:	d103      	bne.n	8006368 <I2C_Master_ISR_DMA+0xc6>
        {
          hi2c->XferSize = 1U;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2201      	movs	r2, #1
 8006364:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006366:	e002      	b.n	800636e <I2C_Master_ISR_DMA+0xcc>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	22ff      	movs	r2, #255	@ 0xff
 800636c:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 800636e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006372:	617b      	str	r3, [r7, #20]
 8006374:	e010      	b.n	8006398 <I2C_Master_ISR_DMA+0xf6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800637a:	b29a      	uxth	r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006384:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006388:	d003      	beq.n	8006392 <I2C_Master_ISR_DMA+0xf0>
        {
          xfermode = hi2c->XferOptions;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800638e:	617b      	str	r3, [r7, #20]
 8006390:	e002      	b.n	8006398 <I2C_Master_ISR_DMA+0xf6>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8006392:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006396:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800639c:	b2da      	uxtb	r2, r3
 800639e:	8a79      	ldrh	r1, [r7, #18]
 80063a0:	2300      	movs	r3, #0
 80063a2:	9300      	str	r3, [sp, #0]
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f001 f8d0 	bl	800754c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b22      	cmp	r3, #34	@ 0x22
 80063c8:	d108      	bne.n	80063dc <I2C_Master_ISR_DMA+0x13a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80063d8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80063da:	e05b      	b.n	8006494 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063ea:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80063ec:	e052      	b.n	8006494 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063fc:	d003      	beq.n	8006406 <I2C_Master_ISR_DMA+0x164>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80063fe:	68f8      	ldr	r0, [r7, #12]
 8006400:	f000 fb05 	bl	8006a0e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8006404:	e046      	b.n	8006494 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006406:	2140      	movs	r1, #64	@ 0x40
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	f000 fe25 	bl	8007058 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800640e:	e041      	b.n	8006494 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	099b      	lsrs	r3, r3, #6
 8006414:	f003 0301 	and.w	r3, r3, #1
 8006418:	2b00      	cmp	r3, #0
 800641a:	d029      	beq.n	8006470 <I2C_Master_ISR_DMA+0x1ce>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	099b      	lsrs	r3, r3, #6
 8006420:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006424:	2b00      	cmp	r3, #0
 8006426:	d023      	beq.n	8006470 <I2C_Master_ISR_DMA+0x1ce>
  {
    if (hi2c->XferCount == 0U)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800642c:	b29b      	uxth	r3, r3
 800642e:	2b00      	cmp	r3, #0
 8006430:	d119      	bne.n	8006466 <I2C_Master_ISR_DMA+0x1c4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800643c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006440:	d027      	beq.n	8006492 <I2C_Master_ISR_DMA+0x1f0>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006446:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800644a:	d108      	bne.n	800645e <I2C_Master_ISR_DMA+0x1bc>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	685a      	ldr	r2, [r3, #4]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800645a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800645c:	e019      	b.n	8006492 <I2C_Master_ISR_DMA+0x1f0>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f000 fad5 	bl	8006a0e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8006464:	e015      	b.n	8006492 <I2C_Master_ISR_DMA+0x1f0>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006466:	2140      	movs	r1, #64	@ 0x40
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f000 fdf5 	bl	8007058 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800646e:	e010      	b.n	8006492 <I2C_Master_ISR_DMA+0x1f0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	095b      	lsrs	r3, r3, #5
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00b      	beq.n	8006494 <I2C_Master_ISR_DMA+0x1f2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	095b      	lsrs	r3, r3, #5
 8006480:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006484:	2b00      	cmp	r3, #0
 8006486:	d005      	beq.n	8006494 <I2C_Master_ISR_DMA+0x1f2>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006488:	68b9      	ldr	r1, [r7, #8]
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f000 fb5a 	bl	8006b44 <I2C_ITMasterCplt>
 8006490:	e000      	b.n	8006494 <I2C_Master_ISR_DMA+0x1f2>
    if (hi2c->XferCount == 0U)
 8006492:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3718      	adds	r7, #24
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
	...

080064a8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b088      	sub	sp, #32
 80064ac:	af02      	add	r7, sp, #8
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80064b4:	4b94      	ldr	r3, [pc, #592]	@ (8006708 <I2C_Mem_ISR_DMA+0x260>)
 80064b6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d101      	bne.n	80064c6 <I2C_Mem_ISR_DMA+0x1e>
 80064c2:	2302      	movs	r3, #2
 80064c4:	e139      	b.n	800673a <I2C_Mem_ISR_DMA+0x292>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2201      	movs	r2, #1
 80064ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	091b      	lsrs	r3, r3, #4
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d017      	beq.n	800650a <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	091b      	lsrs	r3, r3, #4
 80064de:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d011      	beq.n	800650a <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2210      	movs	r2, #16
 80064ec:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064f2:	f043 0204 	orr.w	r2, r3, #4
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80064fa:	2120      	movs	r1, #32
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	f001 f857 	bl	80075b0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f000 febf 	bl	8007286 <I2C_Flush_TXDR>
 8006508:	e112      	b.n	8006730 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	085b      	lsrs	r3, r3, #1
 800650e:	f003 0301 	and.w	r3, r3, #1
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00f      	beq.n	8006536 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	085b      	lsrs	r3, r3, #1
 800651a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800651e:	2b00      	cmp	r3, #0
 8006520:	d009      	beq.n	8006536 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800652a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006532:	651a      	str	r2, [r3, #80]	@ 0x50
 8006534:	e0fc      	b.n	8006730 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	09db      	lsrs	r3, r3, #7
 800653a:	f003 0301 	and.w	r3, r3, #1
 800653e:	2b00      	cmp	r3, #0
 8006540:	d06e      	beq.n	8006620 <I2C_Mem_ISR_DMA+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	099b      	lsrs	r3, r3, #6
 8006546:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800654a:	2b00      	cmp	r3, #0
 800654c:	d068      	beq.n	8006620 <I2C_Mem_ISR_DMA+0x178>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800654e:	2101      	movs	r1, #1
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f001 f8b1 	bl	80076b8 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006556:	2110      	movs	r1, #16
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f001 f829 	bl	80075b0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006562:	b29b      	uxth	r3, r3
 8006564:	2b00      	cmp	r3, #0
 8006566:	d056      	beq.n	8006616 <I2C_Mem_ISR_DMA+0x16e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800656c:	b29b      	uxth	r3, r3
 800656e:	2bff      	cmp	r3, #255	@ 0xff
 8006570:	d91e      	bls.n	80065b0 <I2C_Mem_ISR_DMA+0x108>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	699b      	ldr	r3, [r3, #24]
 8006578:	0c1b      	lsrs	r3, r3, #16
 800657a:	b2db      	uxtb	r3, r3
 800657c:	f003 0301 	and.w	r3, r3, #1
 8006580:	b2db      	uxtb	r3, r3
 8006582:	2b01      	cmp	r3, #1
 8006584:	d103      	bne.n	800658e <I2C_Mem_ISR_DMA+0xe6>
        {
          hi2c->XferSize = 1U;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2201      	movs	r2, #1
 800658a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800658c:	e002      	b.n	8006594 <I2C_Mem_ISR_DMA+0xec>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	22ff      	movs	r2, #255	@ 0xff
 8006592:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006598:	b299      	uxth	r1, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800659e:	b2da      	uxtb	r2, r3
 80065a0:	2300      	movs	r3, #0
 80065a2:	9300      	str	r3, [sp, #0]
 80065a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f000 ffcf 	bl	800754c <I2C_TransferConfig>
 80065ae:	e011      	b.n	80065d4 <I2C_Mem_ISR_DMA+0x12c>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065be:	b299      	uxth	r1, r3
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065c4:	b2da      	uxtb	r2, r3
 80065c6:	2300      	movs	r3, #0
 80065c8:	9300      	str	r3, [sp, #0]
 80065ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f000 ffbc 	bl	800754c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065d8:	b29a      	uxth	r2, r3
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	b29a      	uxth	r2, r3
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b22      	cmp	r3, #34	@ 0x22
 80065f0:	d108      	bne.n	8006604 <I2C_Mem_ISR_DMA+0x15c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006600:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006602:	e095      	b.n	8006730 <I2C_Mem_ISR_DMA+0x288>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006612:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006614:	e08c      	b.n	8006730 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006616:	2140      	movs	r1, #64	@ 0x40
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	f000 fd1d 	bl	8007058 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800661e:	e087      	b.n	8006730 <I2C_Mem_ISR_DMA+0x288>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	099b      	lsrs	r3, r3, #6
 8006624:	f003 0301 	and.w	r3, r3, #1
 8006628:	2b00      	cmp	r3, #0
 800662a:	d071      	beq.n	8006710 <I2C_Mem_ISR_DMA+0x268>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	099b      	lsrs	r3, r3, #6
 8006630:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006634:	2b00      	cmp	r3, #0
 8006636:	d06b      	beq.n	8006710 <I2C_Mem_ISR_DMA+0x268>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006638:	2101      	movs	r1, #1
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f001 f83c 	bl	80076b8 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006640:	2110      	movs	r1, #16
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	f000 ffb4 	bl	80075b0 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800664e:	b2db      	uxtb	r3, r3
 8006650:	2b22      	cmp	r3, #34	@ 0x22
 8006652:	d101      	bne.n	8006658 <I2C_Mem_ISR_DMA+0x1b0>
    {
      direction = I2C_GENERATE_START_READ;
 8006654:	4b2d      	ldr	r3, [pc, #180]	@ (800670c <I2C_Mem_ISR_DMA+0x264>)
 8006656:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800665c:	b29b      	uxth	r3, r3
 800665e:	2bff      	cmp	r3, #255	@ 0xff
 8006660:	d91e      	bls.n	80066a0 <I2C_Mem_ISR_DMA+0x1f8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	0c1b      	lsrs	r3, r3, #16
 800666a:	b2db      	uxtb	r3, r3
 800666c:	f003 0301 	and.w	r3, r3, #1
 8006670:	b2db      	uxtb	r3, r3
 8006672:	2b01      	cmp	r3, #1
 8006674:	d103      	bne.n	800667e <I2C_Mem_ISR_DMA+0x1d6>
      {
        hi2c->XferSize = 1U;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2201      	movs	r2, #1
 800667a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800667c:	e002      	b.n	8006684 <I2C_Mem_ISR_DMA+0x1dc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	22ff      	movs	r2, #255	@ 0xff
 8006682:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006688:	b299      	uxth	r1, r3
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800668e:	b2da      	uxtb	r2, r3
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	9300      	str	r3, [sp, #0]
 8006694:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f000 ff57 	bl	800754c <I2C_TransferConfig>
 800669e:	e011      	b.n	80066c4 <I2C_Mem_ISR_DMA+0x21c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066a4:	b29a      	uxth	r2, r3
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066ae:	b299      	uxth	r1, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066b4:	b2da      	uxtb	r2, r3
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	9300      	str	r3, [sp, #0]
 80066ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80066be:	68f8      	ldr	r0, [r7, #12]
 80066c0:	f000 ff44 	bl	800754c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066c8:	b29a      	uxth	r2, r3
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b22      	cmp	r3, #34	@ 0x22
 80066e0:	d108      	bne.n	80066f4 <I2C_Mem_ISR_DMA+0x24c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80066f0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066f2:	e01d      	b.n	8006730 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006702:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006704:	e014      	b.n	8006730 <I2C_Mem_ISR_DMA+0x288>
 8006706:	bf00      	nop
 8006708:	80002000 	.word	0x80002000
 800670c:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	095b      	lsrs	r3, r3, #5
 8006714:	f003 0301 	and.w	r3, r3, #1
 8006718:	2b00      	cmp	r3, #0
 800671a:	d009      	beq.n	8006730 <I2C_Mem_ISR_DMA+0x288>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	095b      	lsrs	r3, r3, #5
 8006720:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006724:	2b00      	cmp	r3, #0
 8006726:	d003      	beq.n	8006730 <I2C_Mem_ISR_DMA+0x288>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006728:	68b9      	ldr	r1, [r7, #8]
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f000 fa0a 	bl	8006b44 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3718      	adds	r7, #24
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop

08006744 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b088      	sub	sp, #32
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006754:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006756:	2300      	movs	r3, #0
 8006758:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006760:	2b01      	cmp	r3, #1
 8006762:	d101      	bne.n	8006768 <I2C_Slave_ISR_DMA+0x24>
 8006764:	2302      	movs	r3, #2
 8006766:	e0ca      	b.n	80068fe <I2C_Slave_ISR_DMA+0x1ba>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	095b      	lsrs	r3, r3, #5
 8006774:	f003 0301 	and.w	r3, r3, #1
 8006778:	2b00      	cmp	r3, #0
 800677a:	d00a      	beq.n	8006792 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	095b      	lsrs	r3, r3, #5
 8006780:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006784:	2b00      	cmp	r3, #0
 8006786:	d004      	beq.n	8006792 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006788:	68b9      	ldr	r1, [r7, #8]
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	f000 faa4 	bl	8006cd8 <I2C_ITSlaveCplt>
 8006790:	e0b0      	b.n	80068f4 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	091b      	lsrs	r3, r3, #4
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	2b00      	cmp	r3, #0
 800679c:	f000 809a 	beq.w	80068d4 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	091b      	lsrs	r3, r3, #4
 80067a4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	f000 8093 	beq.w	80068d4 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	0b9b      	lsrs	r3, r3, #14
 80067b2:	f003 0301 	and.w	r3, r3, #1
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d105      	bne.n	80067c6 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	0bdb      	lsrs	r3, r3, #15
 80067be:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d07f      	beq.n	80068c6 <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00d      	beq.n	80067ea <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	0bdb      	lsrs	r3, r3, #15
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d007      	beq.n	80067ea <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d101      	bne.n	80067ea <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 80067e6:	2301      	movs	r3, #1
 80067e8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00d      	beq.n	800680e <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	0b9b      	lsrs	r3, r3, #14
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d007      	beq.n	800680e <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d101      	bne.n	800680e <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 800680a:	2301      	movs	r3, #1
 800680c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d128      	bne.n	8006866 <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800681a:	b2db      	uxtb	r3, r3
 800681c:	2b28      	cmp	r3, #40	@ 0x28
 800681e:	d108      	bne.n	8006832 <I2C_Slave_ISR_DMA+0xee>
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006826:	d104      	bne.n	8006832 <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006828:	68b9      	ldr	r1, [r7, #8]
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	f000 fbbe 	bl	8006fac <I2C_ITListenCplt>
 8006830:	e048      	b.n	80068c4 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2b29      	cmp	r3, #41	@ 0x29
 800683c:	d10e      	bne.n	800685c <I2C_Slave_ISR_DMA+0x118>
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006844:	d00a      	beq.n	800685c <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2210      	movs	r2, #16
 800684c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	f000 fd19 	bl	8007286 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f000 f917 	bl	8006a88 <I2C_ITSlaveSeqCplt>
 800685a:	e033      	b.n	80068c4 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2210      	movs	r2, #16
 8006862:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006864:	e034      	b.n	80068d0 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2210      	movs	r2, #16
 800686c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006872:	f043 0204 	orr.w	r2, r3, #4
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006880:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d003      	beq.n	8006890 <I2C_Slave_ISR_DMA+0x14c>
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800688e:	d11f      	bne.n	80068d0 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006890:	7dfb      	ldrb	r3, [r7, #23]
 8006892:	2b21      	cmp	r3, #33	@ 0x21
 8006894:	d002      	beq.n	800689c <I2C_Slave_ISR_DMA+0x158>
 8006896:	7dfb      	ldrb	r3, [r7, #23]
 8006898:	2b29      	cmp	r3, #41	@ 0x29
 800689a:	d103      	bne.n	80068a4 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2221      	movs	r2, #33	@ 0x21
 80068a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80068a2:	e008      	b.n	80068b6 <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80068a4:	7dfb      	ldrb	r3, [r7, #23]
 80068a6:	2b22      	cmp	r3, #34	@ 0x22
 80068a8:	d002      	beq.n	80068b0 <I2C_Slave_ISR_DMA+0x16c>
 80068aa:	7dfb      	ldrb	r3, [r7, #23]
 80068ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80068ae:	d102      	bne.n	80068b6 <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2222      	movs	r2, #34	@ 0x22
 80068b4:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ba:	4619      	mov	r1, r3
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f000 fbcb 	bl	8007058 <I2C_ITError>
      if (treatdmanack == 1U)
 80068c2:	e005      	b.n	80068d0 <I2C_Slave_ISR_DMA+0x18c>
 80068c4:	e004      	b.n	80068d0 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2210      	movs	r2, #16
 80068cc:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80068ce:	e011      	b.n	80068f4 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 80068d0:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80068d2:	e00f      	b.n	80068f4 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	08db      	lsrs	r3, r3, #3
 80068d8:	f003 0301 	and.w	r3, r3, #1
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d009      	beq.n	80068f4 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	08db      	lsrs	r3, r3, #3
 80068e4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d003      	beq.n	80068f4 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80068ec:	68b9      	ldr	r1, [r7, #8]
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	f000 f809 	bl	8006906 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3720      	adds	r7, #32
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b084      	sub	sp, #16
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006916:	b2db      	uxtb	r3, r3
 8006918:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800691c:	2b28      	cmp	r3, #40	@ 0x28
 800691e:	d16a      	bne.n	80069f6 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	0c1b      	lsrs	r3, r3, #16
 8006928:	b2db      	uxtb	r3, r3
 800692a:	f003 0301 	and.w	r3, r3, #1
 800692e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	0c1b      	lsrs	r3, r3, #16
 8006938:	b29b      	uxth	r3, r3
 800693a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800693e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	b29b      	uxth	r3, r3
 8006948:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800694c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	b29b      	uxth	r3, r3
 8006956:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800695a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	2b02      	cmp	r3, #2
 8006962:	d138      	bne.n	80069d6 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006964:	897b      	ldrh	r3, [r7, #10]
 8006966:	09db      	lsrs	r3, r3, #7
 8006968:	b29a      	uxth	r2, r3
 800696a:	89bb      	ldrh	r3, [r7, #12]
 800696c:	4053      	eors	r3, r2
 800696e:	b29b      	uxth	r3, r3
 8006970:	f003 0306 	and.w	r3, r3, #6
 8006974:	2b00      	cmp	r3, #0
 8006976:	d11c      	bne.n	80069b2 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006978:	897b      	ldrh	r3, [r7, #10]
 800697a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006980:	1c5a      	adds	r2, r3, #1
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800698a:	2b02      	cmp	r3, #2
 800698c:	d13b      	bne.n	8006a06 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2208      	movs	r2, #8
 800699a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80069a4:	89ba      	ldrh	r2, [r7, #12]
 80069a6:	7bfb      	ldrb	r3, [r7, #15]
 80069a8:	4619      	mov	r1, r3
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f7ff f9f3 	bl	8005d96 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80069b0:	e029      	b.n	8006a06 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80069b2:	893b      	ldrh	r3, [r7, #8]
 80069b4:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80069b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 fe7c 	bl	80076b8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80069c8:	89ba      	ldrh	r2, [r7, #12]
 80069ca:	7bfb      	ldrb	r3, [r7, #15]
 80069cc:	4619      	mov	r1, r3
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f7ff f9e1 	bl	8005d96 <HAL_I2C_AddrCallback>
}
 80069d4:	e017      	b.n	8006a06 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80069d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 fe6c 	bl	80076b8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80069e8:	89ba      	ldrh	r2, [r7, #12]
 80069ea:	7bfb      	ldrb	r3, [r7, #15]
 80069ec:	4619      	mov	r1, r3
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f7ff f9d1 	bl	8005d96 <HAL_I2C_AddrCallback>
}
 80069f4:	e007      	b.n	8006a06 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2208      	movs	r2, #8
 80069fc:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8006a06:	bf00      	nop
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b082      	sub	sp, #8
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	2b21      	cmp	r3, #33	@ 0x21
 8006a28:	d115      	bne.n	8006a56 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2220      	movs	r2, #32
 8006a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2211      	movs	r2, #17
 8006a36:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006a3e:	2101      	movs	r1, #1
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 fe39 	bl	80076b8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f019 f8fe 	bl	801fc50 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006a54:	e014      	b.n	8006a80 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2220      	movs	r2, #32
 8006a5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2212      	movs	r2, #18
 8006a62:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006a6a:	2102      	movs	r1, #2
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 fe23 	bl	80076b8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f019 f8fe 	bl	801fc7c <HAL_I2C_MasterRxCpltCallback>
}
 8006a80:	bf00      	nop
 8006a82:	3708      	adds	r7, #8
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	0b9b      	lsrs	r3, r3, #14
 8006aa4:	f003 0301 	and.w	r3, r3, #1
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d008      	beq.n	8006abe <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006aba:	601a      	str	r2, [r3, #0]
 8006abc:	e00d      	b.n	8006ada <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	0bdb      	lsrs	r3, r3, #15
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d007      	beq.n	8006ada <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006ad8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b29      	cmp	r3, #41	@ 0x29
 8006ae4:	d112      	bne.n	8006b0c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2228      	movs	r2, #40	@ 0x28
 8006aea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2221      	movs	r2, #33	@ 0x21
 8006af2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006af4:	2101      	movs	r1, #1
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 fdde 	bl	80076b8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f019 f8cf 	bl	801fca8 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006b0a:	e017      	b.n	8006b3c <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b16:	d111      	bne.n	8006b3c <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2228      	movs	r2, #40	@ 0x28
 8006b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2222      	movs	r2, #34	@ 0x22
 8006b24:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006b26:	2102      	movs	r1, #2
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 fdc5 	bl	80076b8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f019 f8cc 	bl	801fcd4 <HAL_I2C_SlaveRxCpltCallback>
}
 8006b3c:	bf00      	nop
 8006b3e:	3710      	adds	r7, #16
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b086      	sub	sp, #24
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2220      	movs	r2, #32
 8006b58:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	2b21      	cmp	r3, #33	@ 0x21
 8006b64:	d107      	bne.n	8006b76 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006b66:	2101      	movs	r1, #1
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 fda5 	bl	80076b8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2211      	movs	r2, #17
 8006b72:	631a      	str	r2, [r3, #48]	@ 0x30
 8006b74:	e00c      	b.n	8006b90 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	2b22      	cmp	r3, #34	@ 0x22
 8006b80:	d106      	bne.n	8006b90 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006b82:	2102      	movs	r1, #2
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 fd97 	bl	80076b8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2212      	movs	r2, #18
 8006b8e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	6859      	ldr	r1, [r3, #4]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	4b4d      	ldr	r3, [pc, #308]	@ (8006cd0 <I2C_ITMasterCplt+0x18c>)
 8006b9c:	400b      	ands	r3, r1
 8006b9e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a4a      	ldr	r2, [pc, #296]	@ (8006cd4 <I2C_ITMasterCplt+0x190>)
 8006baa:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	091b      	lsrs	r3, r3, #4
 8006bb0:	f003 0301 	and.w	r3, r3, #1
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d009      	beq.n	8006bcc <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2210      	movs	r2, #16
 8006bbe:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bc4:	f043 0204 	orr.w	r2, r3, #4
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	2b60      	cmp	r3, #96	@ 0x60
 8006bd6:	d10b      	bne.n	8006bf0 <I2C_ITMasterCplt+0xac>
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	089b      	lsrs	r3, r3, #2
 8006bdc:	f003 0301 	and.w	r3, r3, #1
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d005      	beq.n	8006bf0 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006bee:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 fb48 	bl	8007286 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bfa:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	2b60      	cmp	r3, #96	@ 0x60
 8006c06:	d002      	beq.n	8006c0e <I2C_ITMasterCplt+0xca>
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d006      	beq.n	8006c1c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c12:	4619      	mov	r1, r3
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 fa1f 	bl	8007058 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006c1a:	e054      	b.n	8006cc6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	2b21      	cmp	r3, #33	@ 0x21
 8006c26:	d124      	bne.n	8006c72 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2220      	movs	r2, #32
 8006c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b40      	cmp	r3, #64	@ 0x40
 8006c40:	d10b      	bne.n	8006c5a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f7ff f8b7 	bl	8005dc6 <HAL_I2C_MemTxCpltCallback>
}
 8006c58:	e035      	b.n	8006cc6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f018 fff0 	bl	801fc50 <HAL_I2C_MasterTxCpltCallback>
}
 8006c70:	e029      	b.n	8006cc6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	2b22      	cmp	r3, #34	@ 0x22
 8006c7c:	d123      	bne.n	8006cc6 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2220      	movs	r2, #32
 8006c82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b40      	cmp	r3, #64	@ 0x40
 8006c96:	d10b      	bne.n	8006cb0 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f7ff f896 	bl	8005dda <HAL_I2C_MemRxCpltCallback>
}
 8006cae:	e00a      	b.n	8006cc6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f018 ffdb 	bl	801fc7c <HAL_I2C_MasterRxCpltCallback>
}
 8006cc6:	bf00      	nop
 8006cc8:	3718      	adds	r7, #24
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	fe00e800 	.word	0xfe00e800
 8006cd4:	ffff0000 	.word	0xffff0000

08006cd8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b086      	sub	sp, #24
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cfa:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2220      	movs	r2, #32
 8006d02:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006d04:	7afb      	ldrb	r3, [r7, #11]
 8006d06:	2b21      	cmp	r3, #33	@ 0x21
 8006d08:	d002      	beq.n	8006d10 <I2C_ITSlaveCplt+0x38>
 8006d0a:	7afb      	ldrb	r3, [r7, #11]
 8006d0c:	2b29      	cmp	r3, #41	@ 0x29
 8006d0e:	d108      	bne.n	8006d22 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006d10:	f248 0101 	movw	r1, #32769	@ 0x8001
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 fccf 	bl	80076b8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2221      	movs	r2, #33	@ 0x21
 8006d1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006d20:	e019      	b.n	8006d56 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006d22:	7afb      	ldrb	r3, [r7, #11]
 8006d24:	2b22      	cmp	r3, #34	@ 0x22
 8006d26:	d002      	beq.n	8006d2e <I2C_ITSlaveCplt+0x56>
 8006d28:	7afb      	ldrb	r3, [r7, #11]
 8006d2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d2c:	d108      	bne.n	8006d40 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006d2e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 fcc0 	bl	80076b8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2222      	movs	r2, #34	@ 0x22
 8006d3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8006d3e:	e00a      	b.n	8006d56 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8006d40:	7afb      	ldrb	r3, [r7, #11]
 8006d42:	2b28      	cmp	r3, #40	@ 0x28
 8006d44:	d107      	bne.n	8006d56 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8006d46:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 fcb4 	bl	80076b8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	685a      	ldr	r2, [r3, #4]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d64:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	6859      	ldr	r1, [r3, #4]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	4b8c      	ldr	r3, [pc, #560]	@ (8006fa4 <I2C_ITSlaveCplt+0x2cc>)
 8006d72:	400b      	ands	r3, r1
 8006d74:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 fa85 	bl	8007286 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	0b9b      	lsrs	r3, r3, #14
 8006d80:	f003 0301 	and.w	r3, r3, #1
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d013      	beq.n	8006db0 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006d96:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d020      	beq.n	8006de2 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006dae:	e018      	b.n	8006de2 <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	0bdb      	lsrs	r3, r3, #15
 8006db4:	f003 0301 	and.w	r3, r3, #1
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d012      	beq.n	8006de2 <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006dca:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d006      	beq.n	8006de2 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	b29a      	uxth	r2, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	089b      	lsrs	r3, r3, #2
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d020      	beq.n	8006e30 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	f023 0304 	bic.w	r3, r3, #4
 8006df4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e00:	b2d2      	uxtb	r2, r2
 8006e02:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e08:	1c5a      	adds	r2, r3, #1
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00c      	beq.n	8006e30 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	b29a      	uxth	r2, r3
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d005      	beq.n	8006e46 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e3e:	f043 0204 	orr.w	r2, r3, #4
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	091b      	lsrs	r3, r3, #4
 8006e4a:	f003 0301 	and.w	r3, r3, #1
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d04a      	beq.n	8006ee8 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	091b      	lsrs	r3, r3, #4
 8006e56:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d044      	beq.n	8006ee8 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d128      	bne.n	8006eba <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	2b28      	cmp	r3, #40	@ 0x28
 8006e72:	d108      	bne.n	8006e86 <I2C_ITSlaveCplt+0x1ae>
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e7a:	d104      	bne.n	8006e86 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006e7c:	6979      	ldr	r1, [r7, #20]
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 f894 	bl	8006fac <I2C_ITListenCplt>
 8006e84:	e030      	b.n	8006ee8 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	2b29      	cmp	r3, #41	@ 0x29
 8006e90:	d10e      	bne.n	8006eb0 <I2C_ITSlaveCplt+0x1d8>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006e98:	d00a      	beq.n	8006eb0 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2210      	movs	r2, #16
 8006ea0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f9ef 	bl	8007286 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f7ff fded 	bl	8006a88 <I2C_ITSlaveSeqCplt>
 8006eae:	e01b      	b.n	8006ee8 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2210      	movs	r2, #16
 8006eb6:	61da      	str	r2, [r3, #28]
 8006eb8:	e016      	b.n	8006ee8 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2210      	movs	r2, #16
 8006ec0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ec6:	f043 0204 	orr.w	r2, r3, #4
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d003      	beq.n	8006edc <I2C_ITSlaveCplt+0x204>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006eda:	d105      	bne.n	8006ee8 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f8b8 	bl	8007058 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d010      	beq.n	8006f20 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f02:	4619      	mov	r1, r3
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 f8a7 	bl	8007058 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	2b28      	cmp	r3, #40	@ 0x28
 8006f14:	d141      	bne.n	8006f9a <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006f16:	6979      	ldr	r1, [r7, #20]
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 f847 	bl	8006fac <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006f1e:	e03c      	b.n	8006f9a <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f24:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006f28:	d014      	beq.n	8006f54 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f7ff fdac 	bl	8006a88 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4a1d      	ldr	r2, [pc, #116]	@ (8006fa8 <I2C_ITSlaveCplt+0x2d0>)
 8006f34:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2220      	movs	r2, #32
 8006f3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f7fe ff30 	bl	8005db2 <HAL_I2C_ListenCpltCallback>
}
 8006f52:	e022      	b.n	8006f9a <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	2b22      	cmp	r3, #34	@ 0x22
 8006f5e:	d10e      	bne.n	8006f7e <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2220      	movs	r2, #32
 8006f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f018 feac 	bl	801fcd4 <HAL_I2C_SlaveRxCpltCallback>
}
 8006f7c:	e00d      	b.n	8006f9a <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2220      	movs	r2, #32
 8006f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f018 fe87 	bl	801fca8 <HAL_I2C_SlaveTxCpltCallback>
}
 8006f9a:	bf00      	nop
 8006f9c:	3718      	adds	r7, #24
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	fe00e800 	.word	0xfe00e800
 8006fa8:	ffff0000 	.word	0xffff0000

08006fac <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a26      	ldr	r2, [pc, #152]	@ (8007054 <I2C_ITListenCplt+0xa8>)
 8006fba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2220      	movs	r2, #32
 8006fc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	089b      	lsrs	r3, r3, #2
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d022      	beq.n	800702a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fee:	b2d2      	uxtb	r2, r2
 8006ff0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ff6:	1c5a      	adds	r2, r3, #1
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007000:	2b00      	cmp	r3, #0
 8007002:	d012      	beq.n	800702a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007008:	3b01      	subs	r3, #1
 800700a:	b29a      	uxth	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007014:	b29b      	uxth	r3, r3
 8007016:	3b01      	subs	r3, #1
 8007018:	b29a      	uxth	r2, r3
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007022:	f043 0204 	orr.w	r2, r3, #4
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800702a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 fb42 	bl	80076b8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2210      	movs	r2, #16
 800703a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f7fe feb4 	bl	8005db2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800704a:	bf00      	nop
 800704c:	3708      	adds	r7, #8
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	ffff0000 	.word	0xffff0000

08007058 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007068:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a6d      	ldr	r2, [pc, #436]	@ (800722c <I2C_ITError+0x1d4>)
 8007076:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	431a      	orrs	r2, r3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800708a:	7bfb      	ldrb	r3, [r7, #15]
 800708c:	2b28      	cmp	r3, #40	@ 0x28
 800708e:	d005      	beq.n	800709c <I2C_ITError+0x44>
 8007090:	7bfb      	ldrb	r3, [r7, #15]
 8007092:	2b29      	cmp	r3, #41	@ 0x29
 8007094:	d002      	beq.n	800709c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007096:	7bfb      	ldrb	r3, [r7, #15]
 8007098:	2b2a      	cmp	r3, #42	@ 0x2a
 800709a:	d10b      	bne.n	80070b4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800709c:	2103      	movs	r1, #3
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 fb0a 	bl	80076b8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2228      	movs	r2, #40	@ 0x28
 80070a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4a60      	ldr	r2, [pc, #384]	@ (8007230 <I2C_ITError+0x1d8>)
 80070b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80070b2:	e030      	b.n	8007116 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80070b4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 fafd 	bl	80076b8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f8e1 	bl	8007286 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	2b60      	cmp	r3, #96	@ 0x60
 80070ce:	d01f      	beq.n	8007110 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2220      	movs	r2, #32
 80070d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	f003 0320 	and.w	r3, r3, #32
 80070e2:	2b20      	cmp	r3, #32
 80070e4:	d114      	bne.n	8007110 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	699b      	ldr	r3, [r3, #24]
 80070ec:	f003 0310 	and.w	r3, r3, #16
 80070f0:	2b10      	cmp	r3, #16
 80070f2:	d109      	bne.n	8007108 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2210      	movs	r2, #16
 80070fa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007100:	f043 0204 	orr.w	r2, r3, #4
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2220      	movs	r2, #32
 800710e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800711a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007120:	2b00      	cmp	r3, #0
 8007122:	d039      	beq.n	8007198 <I2C_ITError+0x140>
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	2b11      	cmp	r3, #17
 8007128:	d002      	beq.n	8007130 <I2C_ITError+0xd8>
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	2b21      	cmp	r3, #33	@ 0x21
 800712e:	d133      	bne.n	8007198 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800713a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800713e:	d107      	bne.n	8007150 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800714e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007154:	4618      	mov	r0, r3
 8007156:	f7fc fc45 	bl	80039e4 <HAL_DMA_GetState>
 800715a:	4603      	mov	r3, r0
 800715c:	2b01      	cmp	r3, #1
 800715e:	d017      	beq.n	8007190 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007164:	4a33      	ldr	r2, [pc, #204]	@ (8007234 <I2C_ITError+0x1dc>)
 8007166:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007174:	4618      	mov	r0, r3
 8007176:	f7fc fa35 	bl	80035e4 <HAL_DMA_Abort_IT>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d04d      	beq.n	800721c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007184:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800718a:	4610      	mov	r0, r2
 800718c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800718e:	e045      	b.n	800721c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 f851 	bl	8007238 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007196:	e041      	b.n	800721c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800719c:	2b00      	cmp	r3, #0
 800719e:	d039      	beq.n	8007214 <I2C_ITError+0x1bc>
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	2b12      	cmp	r3, #18
 80071a4:	d002      	beq.n	80071ac <I2C_ITError+0x154>
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	2b22      	cmp	r3, #34	@ 0x22
 80071aa:	d133      	bne.n	8007214 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80071b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071ba:	d107      	bne.n	80071cc <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80071ca:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7fc fc07 	bl	80039e4 <HAL_DMA_GetState>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d017      	beq.n	800720c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071e0:	4a14      	ldr	r2, [pc, #80]	@ (8007234 <I2C_ITError+0x1dc>)
 80071e2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071f0:	4618      	mov	r0, r3
 80071f2:	f7fc f9f7 	bl	80035e4 <HAL_DMA_Abort_IT>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d011      	beq.n	8007220 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007200:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007206:	4610      	mov	r0, r2
 8007208:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800720a:	e009      	b.n	8007220 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 f813 	bl	8007238 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007212:	e005      	b.n	8007220 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 f80f 	bl	8007238 <I2C_TreatErrorCallback>
  }
}
 800721a:	e002      	b.n	8007222 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800721c:	bf00      	nop
 800721e:	e000      	b.n	8007222 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007220:	bf00      	nop
}
 8007222:	bf00      	nop
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	ffff0000 	.word	0xffff0000
 8007230:	0800609b 	.word	0x0800609b
 8007234:	08007511 	.word	0x08007511

08007238 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007246:	b2db      	uxtb	r3, r3
 8007248:	2b60      	cmp	r3, #96	@ 0x60
 800724a:	d10e      	bne.n	800726a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2220      	movs	r2, #32
 8007250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f7fe fdcd 	bl	8005e02 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007268:	e009      	b.n	800727e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f7fe fdb8 	bl	8005dee <HAL_I2C_ErrorCallback>
}
 800727e:	bf00      	nop
 8007280:	3708      	adds	r7, #8
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007286:	b480      	push	{r7}
 8007288:	b083      	sub	sp, #12
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	699b      	ldr	r3, [r3, #24]
 8007294:	f003 0302 	and.w	r3, r3, #2
 8007298:	2b02      	cmp	r3, #2
 800729a:	d103      	bne.n	80072a4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2200      	movs	r2, #0
 80072a2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	699b      	ldr	r3, [r3, #24]
 80072aa:	f003 0301 	and.w	r3, r3, #1
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d007      	beq.n	80072c2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	699a      	ldr	r2, [r3, #24]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f042 0201 	orr.w	r2, r2, #1
 80072c0:	619a      	str	r2, [r3, #24]
  }
}
 80072c2:	bf00      	nop
 80072c4:	370c      	adds	r7, #12
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr

080072ce <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b084      	sub	sp, #16
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072da:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80072ea:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d104      	bne.n	8007300 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80072f6:	2120      	movs	r1, #32
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f000 f959 	bl	80075b0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80072fe:	e02d      	b.n	800735c <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8007308:	441a      	add	r2, r3
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007312:	b29b      	uxth	r3, r3
 8007314:	2bff      	cmp	r3, #255	@ 0xff
 8007316:	d903      	bls.n	8007320 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	22ff      	movs	r2, #255	@ 0xff
 800731c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800731e:	e004      	b.n	800732a <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007324:	b29a      	uxth	r2, r3
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007332:	4619      	mov	r1, r3
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	3328      	adds	r3, #40	@ 0x28
 800733a:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8007340:	f7fc f880 	bl	8003444 <HAL_DMA_Start_IT>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d004      	beq.n	8007354 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800734a:	2110      	movs	r1, #16
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f7ff fe83 	bl	8007058 <I2C_ITError>
}
 8007352:	e003      	b.n	800735c <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007354:	2140      	movs	r1, #64	@ 0x40
 8007356:	68f8      	ldr	r0, [r7, #12]
 8007358:	f000 f92a 	bl	80075b0 <I2C_Enable_IRQ>
}
 800735c:	bf00      	nop
 800735e:	3710      	adds	r7, #16
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007370:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007376:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800737e:	d002      	beq.n	8007386 <I2C_DMASlaveTransmitCplt+0x22>
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d10a      	bne.n	800739c <I2C_DMASlaveTransmitCplt+0x38>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007394:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8007396:	68f8      	ldr	r0, [r7, #12]
 8007398:	f7ff fb76 	bl	8006a88 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 800739c:	bf00      	nop
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073b0:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80073c0:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d104      	bne.n	80073d6 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80073cc:	2120      	movs	r1, #32
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f000 f8ee 	bl	80075b0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80073d4:	e03b      	b.n	800744e <I2C_DMAMasterReceiveCplt+0xaa>
    hi2c->pBuffPtr += hi2c->XferSize;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80073de:	441a      	add	r2, r3
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	2bff      	cmp	r3, #255	@ 0xff
 80073ec:	d911      	bls.n	8007412 <I2C_DMAMasterReceiveCplt+0x6e>
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	0c1b      	lsrs	r3, r3, #16
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	f003 0301 	and.w	r3, r3, #1
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d103      	bne.n	800740a <I2C_DMAMasterReceiveCplt+0x66>
        hi2c->XferSize = 1U;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2201      	movs	r2, #1
 8007406:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007408:	e008      	b.n	800741c <I2C_DMAMasterReceiveCplt+0x78>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	22ff      	movs	r2, #255	@ 0xff
 800740e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007410:	e004      	b.n	800741c <I2C_DMAMasterReceiveCplt+0x78>
      hi2c->XferSize = hi2c->XferCount;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007416:	b29a      	uxth	r2, r3
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	3324      	adds	r3, #36	@ 0x24
 8007426:	4619      	mov	r1, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800742c:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8007432:	f7fc f807 	bl	8003444 <HAL_DMA_Start_IT>
 8007436:	4603      	mov	r3, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d004      	beq.n	8007446 <I2C_DMAMasterReceiveCplt+0xa2>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800743c:	2110      	movs	r1, #16
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f7ff fe0a 	bl	8007058 <I2C_ITError>
}
 8007444:	e003      	b.n	800744e <I2C_DMAMasterReceiveCplt+0xaa>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007446:	2140      	movs	r1, #64	@ 0x40
 8007448:	68f8      	ldr	r0, [r7, #12]
 800744a:	f000 f8b1 	bl	80075b0 <I2C_Enable_IRQ>
}
 800744e:	bf00      	nop
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007456:	b580      	push	{r7, lr}
 8007458:	b084      	sub	sp, #16
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007462:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007468:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d10e      	bne.n	8007494 <I2C_DMASlaveReceiveCplt+0x3e>
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800747c:	d00a      	beq.n	8007494 <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800748c:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	f7ff fafa 	bl	8006a88 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8007494:	bf00      	nop
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 80074a4:	2300      	movs	r3, #0
 80074a6:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ac:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d007      	beq.n	80074c6 <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d101      	bne.n	80074c6 <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 80074c2:	2301      	movs	r3, #1
 80074c4:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d007      	beq.n	80074de <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d101      	bne.n	80074de <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 80074da:	2301      	movs	r3, #1
 80074dc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f7fc fa8e 	bl	8003a00 <HAL_DMA_GetError>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d00e      	beq.n	8007508 <I2C_DMAError+0x6c>
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00b      	beq.n	8007508 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	685a      	ldr	r2, [r3, #4]
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80074fe:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007500:	2110      	movs	r1, #16
 8007502:	68b8      	ldr	r0, [r7, #8]
 8007504:	f7ff fda8 	bl	8007058 <I2C_ITError>
  }
}
 8007508:	bf00      	nop
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800751c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007522:	2b00      	cmp	r3, #0
 8007524:	d003      	beq.n	800752e <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800752a:	2200      	movs	r2, #0
 800752c:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007532:	2b00      	cmp	r3, #0
 8007534:	d003      	beq.n	800753e <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800753a:	2200      	movs	r2, #0
 800753c:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	f7ff fe7a 	bl	8007238 <I2C_TreatErrorCallback>
}
 8007544:	bf00      	nop
 8007546:	3710      	adds	r7, #16
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800754c:	b480      	push	{r7}
 800754e:	b087      	sub	sp, #28
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	607b      	str	r3, [r7, #4]
 8007556:	460b      	mov	r3, r1
 8007558:	817b      	strh	r3, [r7, #10]
 800755a:	4613      	mov	r3, r2
 800755c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800755e:	897b      	ldrh	r3, [r7, #10]
 8007560:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007564:	7a7b      	ldrb	r3, [r7, #9]
 8007566:	041b      	lsls	r3, r3, #16
 8007568:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800756c:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007572:	6a3b      	ldr	r3, [r7, #32]
 8007574:	4313      	orrs	r3, r2
 8007576:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800757a:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	685a      	ldr	r2, [r3, #4]
 8007582:	6a3b      	ldr	r3, [r7, #32]
 8007584:	0d5b      	lsrs	r3, r3, #21
 8007586:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800758a:	4b08      	ldr	r3, [pc, #32]	@ (80075ac <I2C_TransferConfig+0x60>)
 800758c:	430b      	orrs	r3, r1
 800758e:	43db      	mvns	r3, r3
 8007590:	ea02 0103 	and.w	r1, r2, r3
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	697a      	ldr	r2, [r7, #20]
 800759a:	430a      	orrs	r2, r1
 800759c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800759e:	bf00      	nop
 80075a0:	371c      	adds	r7, #28
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr
 80075aa:	bf00      	nop
 80075ac:	03ff63ff 	.word	0x03ff63ff

080075b0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b085      	sub	sp, #20
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	460b      	mov	r3, r1
 80075ba:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80075bc:	2300      	movs	r3, #0
 80075be:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075c4:	4a39      	ldr	r2, [pc, #228]	@ (80076ac <I2C_Enable_IRQ+0xfc>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d032      	beq.n	8007630 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80075ce:	4a38      	ldr	r2, [pc, #224]	@ (80076b0 <I2C_Enable_IRQ+0x100>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d02d      	beq.n	8007630 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80075d8:	4a36      	ldr	r2, [pc, #216]	@ (80076b4 <I2C_Enable_IRQ+0x104>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d028      	beq.n	8007630 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80075de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	da03      	bge.n	80075ee <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80075ec:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80075ee:	887b      	ldrh	r3, [r7, #2]
 80075f0:	f003 0301 	and.w	r3, r3, #1
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d003      	beq.n	8007600 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80075fe:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007600:	887b      	ldrh	r3, [r7, #2]
 8007602:	f003 0302 	and.w	r3, r3, #2
 8007606:	2b00      	cmp	r3, #0
 8007608:	d003      	beq.n	8007612 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8007610:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007612:	887b      	ldrh	r3, [r7, #2]
 8007614:	2b10      	cmp	r3, #16
 8007616:	d103      	bne.n	8007620 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800761e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007620:	887b      	ldrh	r3, [r7, #2]
 8007622:	2b20      	cmp	r3, #32
 8007624:	d133      	bne.n	800768e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f043 0320 	orr.w	r3, r3, #32
 800762c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800762e:	e02e      	b.n	800768e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007630:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007634:	2b00      	cmp	r3, #0
 8007636:	da03      	bge.n	8007640 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800763e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007640:	887b      	ldrh	r3, [r7, #2]
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	2b00      	cmp	r3, #0
 8007648:	d003      	beq.n	8007652 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8007650:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007652:	887b      	ldrh	r3, [r7, #2]
 8007654:	f003 0302 	and.w	r3, r3, #2
 8007658:	2b00      	cmp	r3, #0
 800765a:	d003      	beq.n	8007664 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8007662:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007664:	887b      	ldrh	r3, [r7, #2]
 8007666:	2b10      	cmp	r3, #16
 8007668:	d103      	bne.n	8007672 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007670:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007672:	887b      	ldrh	r3, [r7, #2]
 8007674:	2b20      	cmp	r3, #32
 8007676:	d103      	bne.n	8007680 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800767e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007680:	887b      	ldrh	r3, [r7, #2]
 8007682:	2b40      	cmp	r3, #64	@ 0x40
 8007684:	d103      	bne.n	800768e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800768c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	6819      	ldr	r1, [r3, #0]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	68fa      	ldr	r2, [r7, #12]
 800769a:	430a      	orrs	r2, r1
 800769c:	601a      	str	r2, [r3, #0]
}
 800769e:	bf00      	nop
 80076a0:	3714      	adds	r7, #20
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	080062a3 	.word	0x080062a3
 80076b0:	08006745 	.word	0x08006745
 80076b4:	080064a9 	.word	0x080064a9

080076b8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	460b      	mov	r3, r1
 80076c2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80076c4:	2300      	movs	r3, #0
 80076c6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80076c8:	887b      	ldrh	r3, [r7, #2]
 80076ca:	f003 0301 	and.w	r3, r3, #1
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00f      	beq.n	80076f2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80076d8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80076e6:	2b28      	cmp	r3, #40	@ 0x28
 80076e8:	d003      	beq.n	80076f2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80076f0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80076f2:	887b      	ldrh	r3, [r7, #2]
 80076f4:	f003 0302 	and.w	r3, r3, #2
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d00f      	beq.n	800771c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8007702:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800770a:	b2db      	uxtb	r3, r3
 800770c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007710:	2b28      	cmp	r3, #40	@ 0x28
 8007712:	d003      	beq.n	800771c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800771a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800771c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007720:	2b00      	cmp	r3, #0
 8007722:	da03      	bge.n	800772c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800772a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800772c:	887b      	ldrh	r3, [r7, #2]
 800772e:	2b10      	cmp	r3, #16
 8007730:	d103      	bne.n	800773a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007738:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800773a:	887b      	ldrh	r3, [r7, #2]
 800773c:	2b20      	cmp	r3, #32
 800773e:	d103      	bne.n	8007748 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f043 0320 	orr.w	r3, r3, #32
 8007746:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007748:	887b      	ldrh	r3, [r7, #2]
 800774a:	2b40      	cmp	r3, #64	@ 0x40
 800774c:	d103      	bne.n	8007756 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007754:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	6819      	ldr	r1, [r3, #0]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	43da      	mvns	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	400a      	ands	r2, r1
 8007766:	601a      	str	r2, [r3, #0]
}
 8007768:	bf00      	nop
 800776a:	3714      	adds	r7, #20
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007784:	b2db      	uxtb	r3, r3
 8007786:	2b20      	cmp	r3, #32
 8007788:	d138      	bne.n	80077fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007790:	2b01      	cmp	r3, #1
 8007792:	d101      	bne.n	8007798 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007794:	2302      	movs	r3, #2
 8007796:	e032      	b.n	80077fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2224      	movs	r2, #36	@ 0x24
 80077a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f022 0201 	bic.w	r2, r2, #1
 80077b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80077c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	6819      	ldr	r1, [r3, #0]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	683a      	ldr	r2, [r7, #0]
 80077d4:	430a      	orrs	r2, r1
 80077d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f042 0201 	orr.w	r2, r2, #1
 80077e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2220      	movs	r2, #32
 80077ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80077f8:	2300      	movs	r3, #0
 80077fa:	e000      	b.n	80077fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80077fc:	2302      	movs	r3, #2
  }
}
 80077fe:	4618      	mov	r0, r3
 8007800:	370c      	adds	r7, #12
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr

0800780a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800780a:	b480      	push	{r7}
 800780c:	b085      	sub	sp, #20
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
 8007812:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800781a:	b2db      	uxtb	r3, r3
 800781c:	2b20      	cmp	r3, #32
 800781e:	d139      	bne.n	8007894 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007826:	2b01      	cmp	r3, #1
 8007828:	d101      	bne.n	800782e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800782a:	2302      	movs	r3, #2
 800782c:	e033      	b.n	8007896 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2201      	movs	r2, #1
 8007832:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2224      	movs	r2, #36	@ 0x24
 800783a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f022 0201 	bic.w	r2, r2, #1
 800784c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800785c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	021b      	lsls	r3, r3, #8
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	4313      	orrs	r3, r2
 8007866:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	68fa      	ldr	r2, [r7, #12]
 800786e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f042 0201 	orr.w	r2, r2, #1
 800787e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2220      	movs	r2, #32
 8007884:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007890:	2300      	movs	r3, #0
 8007892:	e000      	b.n	8007896 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007894:	2302      	movs	r3, #2
  }
}
 8007896:	4618      	mov	r0, r3
 8007898:	3714      	adds	r7, #20
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr
	...

080078a4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80078aa:	2300      	movs	r3, #0
 80078ac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80078ae:	4b23      	ldr	r3, [pc, #140]	@ (800793c <HAL_PWREx_EnableOverDrive+0x98>)
 80078b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078b2:	4a22      	ldr	r2, [pc, #136]	@ (800793c <HAL_PWREx_EnableOverDrive+0x98>)
 80078b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80078ba:	4b20      	ldr	r3, [pc, #128]	@ (800793c <HAL_PWREx_EnableOverDrive+0x98>)
 80078bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078c2:	603b      	str	r3, [r7, #0]
 80078c4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80078c6:	4b1e      	ldr	r3, [pc, #120]	@ (8007940 <HAL_PWREx_EnableOverDrive+0x9c>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a1d      	ldr	r2, [pc, #116]	@ (8007940 <HAL_PWREx_EnableOverDrive+0x9c>)
 80078cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078d0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80078d2:	f7fa fd67 	bl	80023a4 <HAL_GetTick>
 80078d6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80078d8:	e009      	b.n	80078ee <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80078da:	f7fa fd63 	bl	80023a4 <HAL_GetTick>
 80078de:	4602      	mov	r2, r0
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	1ad3      	subs	r3, r2, r3
 80078e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80078e8:	d901      	bls.n	80078ee <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80078ea:	2303      	movs	r3, #3
 80078ec:	e022      	b.n	8007934 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80078ee:	4b14      	ldr	r3, [pc, #80]	@ (8007940 <HAL_PWREx_EnableOverDrive+0x9c>)
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80078f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078fa:	d1ee      	bne.n	80078da <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80078fc:	4b10      	ldr	r3, [pc, #64]	@ (8007940 <HAL_PWREx_EnableOverDrive+0x9c>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a0f      	ldr	r2, [pc, #60]	@ (8007940 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007902:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007906:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007908:	f7fa fd4c 	bl	80023a4 <HAL_GetTick>
 800790c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800790e:	e009      	b.n	8007924 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007910:	f7fa fd48 	bl	80023a4 <HAL_GetTick>
 8007914:	4602      	mov	r2, r0
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800791e:	d901      	bls.n	8007924 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007920:	2303      	movs	r3, #3
 8007922:	e007      	b.n	8007934 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007924:	4b06      	ldr	r3, [pc, #24]	@ (8007940 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800792c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007930:	d1ee      	bne.n	8007910 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007932:	2300      	movs	r3, #0
}
 8007934:	4618      	mov	r0, r3
 8007936:	3708      	adds	r7, #8
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}
 800793c:	40023800 	.word	0x40023800
 8007940:	40007000 	.word	0x40007000

08007944 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b086      	sub	sp, #24
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800794c:	2300      	movs	r3, #0
 800794e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d101      	bne.n	800795a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e291      	b.n	8007e7e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f003 0301 	and.w	r3, r3, #1
 8007962:	2b00      	cmp	r3, #0
 8007964:	f000 8087 	beq.w	8007a76 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007968:	4b96      	ldr	r3, [pc, #600]	@ (8007bc4 <HAL_RCC_OscConfig+0x280>)
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	f003 030c 	and.w	r3, r3, #12
 8007970:	2b04      	cmp	r3, #4
 8007972:	d00c      	beq.n	800798e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007974:	4b93      	ldr	r3, [pc, #588]	@ (8007bc4 <HAL_RCC_OscConfig+0x280>)
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	f003 030c 	and.w	r3, r3, #12
 800797c:	2b08      	cmp	r3, #8
 800797e:	d112      	bne.n	80079a6 <HAL_RCC_OscConfig+0x62>
 8007980:	4b90      	ldr	r3, [pc, #576]	@ (8007bc4 <HAL_RCC_OscConfig+0x280>)
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007988:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800798c:	d10b      	bne.n	80079a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800798e:	4b8d      	ldr	r3, [pc, #564]	@ (8007bc4 <HAL_RCC_OscConfig+0x280>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007996:	2b00      	cmp	r3, #0
 8007998:	d06c      	beq.n	8007a74 <HAL_RCC_OscConfig+0x130>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d168      	bne.n	8007a74 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e26b      	b.n	8007e7e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079ae:	d106      	bne.n	80079be <HAL_RCC_OscConfig+0x7a>
 80079b0:	4b84      	ldr	r3, [pc, #528]	@ (8007bc4 <HAL_RCC_OscConfig+0x280>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a83      	ldr	r2, [pc, #524]	@ (8007bc4 <HAL_RCC_OscConfig+0x280>)
 80079b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079ba:	6013      	str	r3, [r2, #0]
 80079bc:	e02e      	b.n	8007a1c <HAL_RCC_OscConfig+0xd8>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d10c      	bne.n	80079e0 <HAL_RCC_OscConfig+0x9c>
 80079c6:	4b7f      	ldr	r3, [pc, #508]	@ (8007bc4 <HAL_RCC_OscConfig+0x280>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a7e      	ldr	r2, [pc, #504]	@ (8007bc4 <HAL_RCC_OscConfig+0x280>)
 80079cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079d0:	6013      	str	r3, [r2, #0]
 80079d2:	4b7c      	ldr	r3, [pc, #496]	@ (8007bc4 <HAL_RCC_OscConfig+0x280>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a7b      	ldr	r2, [pc, #492]	@ (8007bc4 <HAL_RCC_OscConfig+0x280>)
 80079d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80079dc:	6013      	str	r3, [r2, #0]
 80079de:	e01d      	b.n	8007a1c <HAL_RCC_OscConfig+0xd8>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80079e8:	d10c      	bne.n	8007a04 <HAL_RCC_OscConfig+0xc0>
 80079ea:	4b76      	ldr	r3, [pc, #472]	@ (8007bc4 <HAL_RCC_OscConfig+0x280>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a75      	ldr	r2, [pc, #468]	@ (8007bc4 <HAL_RCC_OscConfig+0x280>)
 80079f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80079f4:	6013      	str	r3, [r2, #0]
 80079f6:	4b73      	ldr	r3, [pc, #460]	@ (8007bc4 <HAL_RCC_OscConfig+0x280>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a72      	ldr	r2, [pc, #456]	@ (8007bc4 <HAL_RCC_OscConfig+0x280>)
 80079fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a00:	6013      	str	r3, [r2, #0]
 8007a02:	e00b      	b.n	8007a1c <HAL_RCC_OscConfig+0xd8>
 8007a04:	4b6f      	ldr	r3, [pc, #444]	@ (8007bc4 <HAL_RCC_OscConfig+0x280>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a6e      	ldr	r2, [pc, #440]	@ (8007bc4 <HAL_RCC_OscConfig+0x280>)
 8007a0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a0e:	6013      	str	r3, [r2, #0]
 8007a10:	4b6c      	ldr	r3, [pc, #432]	@ (8007bc4 <HAL_RCC_OscConfig+0x280>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a6b      	ldr	r2, [pc, #428]	@ (8007bc4 <HAL_RCC_OscConfig+0x280>)
 8007a16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d013      	beq.n	8007a4c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a24:	f7fa fcbe 	bl	80023a4 <HAL_GetTick>
 8007a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a2a:	e008      	b.n	8007a3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a2c:	f7fa fcba 	bl	80023a4 <HAL_GetTick>
 8007a30:	4602      	mov	r2, r0
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	2b64      	cmp	r3, #100	@ 0x64
 8007a38:	d901      	bls.n	8007a3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007a3a:	2303      	movs	r3, #3
 8007a3c:	e21f      	b.n	8007e7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a3e:	4b61      	ldr	r3, [pc, #388]	@ (8007bc4 <HAL_RCC_OscConfig+0x280>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d0f0      	beq.n	8007a2c <HAL_RCC_OscConfig+0xe8>
 8007a4a:	e014      	b.n	8007a76 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a4c:	f7fa fcaa 	bl	80023a4 <HAL_GetTick>
 8007a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a52:	e008      	b.n	8007a66 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a54:	f7fa fca6 	bl	80023a4 <HAL_GetTick>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	1ad3      	subs	r3, r2, r3
 8007a5e:	2b64      	cmp	r3, #100	@ 0x64
 8007a60:	d901      	bls.n	8007a66 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007a62:	2303      	movs	r3, #3
 8007a64:	e20b      	b.n	8007e7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a66:	4b57      	ldr	r3, [pc, #348]	@ (8007bc4 <HAL_RCC_OscConfig+0x280>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d1f0      	bne.n	8007a54 <HAL_RCC_OscConfig+0x110>
 8007a72:	e000      	b.n	8007a76 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f003 0302 	and.w	r3, r3, #2
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d069      	beq.n	8007b56 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007a82:	4b50      	ldr	r3, [pc, #320]	@ (8007bc4 <HAL_RCC_OscConfig+0x280>)
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	f003 030c 	and.w	r3, r3, #12
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00b      	beq.n	8007aa6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a8e:	4b4d      	ldr	r3, [pc, #308]	@ (8007bc4 <HAL_RCC_OscConfig+0x280>)
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	f003 030c 	and.w	r3, r3, #12
 8007a96:	2b08      	cmp	r3, #8
 8007a98:	d11c      	bne.n	8007ad4 <HAL_RCC_OscConfig+0x190>
 8007a9a:	4b4a      	ldr	r3, [pc, #296]	@ (8007bc4 <HAL_RCC_OscConfig+0x280>)
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d116      	bne.n	8007ad4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007aa6:	4b47      	ldr	r3, [pc, #284]	@ (8007bc4 <HAL_RCC_OscConfig+0x280>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f003 0302 	and.w	r3, r3, #2
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d005      	beq.n	8007abe <HAL_RCC_OscConfig+0x17a>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d001      	beq.n	8007abe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e1df      	b.n	8007e7e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007abe:	4b41      	ldr	r3, [pc, #260]	@ (8007bc4 <HAL_RCC_OscConfig+0x280>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	00db      	lsls	r3, r3, #3
 8007acc:	493d      	ldr	r1, [pc, #244]	@ (8007bc4 <HAL_RCC_OscConfig+0x280>)
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ad2:	e040      	b.n	8007b56 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d023      	beq.n	8007b24 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007adc:	4b39      	ldr	r3, [pc, #228]	@ (8007bc4 <HAL_RCC_OscConfig+0x280>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a38      	ldr	r2, [pc, #224]	@ (8007bc4 <HAL_RCC_OscConfig+0x280>)
 8007ae2:	f043 0301 	orr.w	r3, r3, #1
 8007ae6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ae8:	f7fa fc5c 	bl	80023a4 <HAL_GetTick>
 8007aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007aee:	e008      	b.n	8007b02 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007af0:	f7fa fc58 	bl	80023a4 <HAL_GetTick>
 8007af4:	4602      	mov	r2, r0
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	1ad3      	subs	r3, r2, r3
 8007afa:	2b02      	cmp	r3, #2
 8007afc:	d901      	bls.n	8007b02 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007afe:	2303      	movs	r3, #3
 8007b00:	e1bd      	b.n	8007e7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b02:	4b30      	ldr	r3, [pc, #192]	@ (8007bc4 <HAL_RCC_OscConfig+0x280>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 0302 	and.w	r3, r3, #2
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d0f0      	beq.n	8007af0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b0e:	4b2d      	ldr	r3, [pc, #180]	@ (8007bc4 <HAL_RCC_OscConfig+0x280>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	00db      	lsls	r3, r3, #3
 8007b1c:	4929      	ldr	r1, [pc, #164]	@ (8007bc4 <HAL_RCC_OscConfig+0x280>)
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	600b      	str	r3, [r1, #0]
 8007b22:	e018      	b.n	8007b56 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b24:	4b27      	ldr	r3, [pc, #156]	@ (8007bc4 <HAL_RCC_OscConfig+0x280>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a26      	ldr	r2, [pc, #152]	@ (8007bc4 <HAL_RCC_OscConfig+0x280>)
 8007b2a:	f023 0301 	bic.w	r3, r3, #1
 8007b2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b30:	f7fa fc38 	bl	80023a4 <HAL_GetTick>
 8007b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b36:	e008      	b.n	8007b4a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b38:	f7fa fc34 	bl	80023a4 <HAL_GetTick>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	d901      	bls.n	8007b4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007b46:	2303      	movs	r3, #3
 8007b48:	e199      	b.n	8007e7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8007bc4 <HAL_RCC_OscConfig+0x280>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f003 0302 	and.w	r3, r3, #2
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d1f0      	bne.n	8007b38 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f003 0308 	and.w	r3, r3, #8
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d038      	beq.n	8007bd4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	695b      	ldr	r3, [r3, #20]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d019      	beq.n	8007b9e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b6a:	4b16      	ldr	r3, [pc, #88]	@ (8007bc4 <HAL_RCC_OscConfig+0x280>)
 8007b6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b6e:	4a15      	ldr	r2, [pc, #84]	@ (8007bc4 <HAL_RCC_OscConfig+0x280>)
 8007b70:	f043 0301 	orr.w	r3, r3, #1
 8007b74:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b76:	f7fa fc15 	bl	80023a4 <HAL_GetTick>
 8007b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b7c:	e008      	b.n	8007b90 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b7e:	f7fa fc11 	bl	80023a4 <HAL_GetTick>
 8007b82:	4602      	mov	r2, r0
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	1ad3      	subs	r3, r2, r3
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	d901      	bls.n	8007b90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007b8c:	2303      	movs	r3, #3
 8007b8e:	e176      	b.n	8007e7e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b90:	4b0c      	ldr	r3, [pc, #48]	@ (8007bc4 <HAL_RCC_OscConfig+0x280>)
 8007b92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b94:	f003 0302 	and.w	r3, r3, #2
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d0f0      	beq.n	8007b7e <HAL_RCC_OscConfig+0x23a>
 8007b9c:	e01a      	b.n	8007bd4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b9e:	4b09      	ldr	r3, [pc, #36]	@ (8007bc4 <HAL_RCC_OscConfig+0x280>)
 8007ba0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ba2:	4a08      	ldr	r2, [pc, #32]	@ (8007bc4 <HAL_RCC_OscConfig+0x280>)
 8007ba4:	f023 0301 	bic.w	r3, r3, #1
 8007ba8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007baa:	f7fa fbfb 	bl	80023a4 <HAL_GetTick>
 8007bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007bb0:	e00a      	b.n	8007bc8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007bb2:	f7fa fbf7 	bl	80023a4 <HAL_GetTick>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	1ad3      	subs	r3, r2, r3
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d903      	bls.n	8007bc8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e15c      	b.n	8007e7e <HAL_RCC_OscConfig+0x53a>
 8007bc4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007bc8:	4b91      	ldr	r3, [pc, #580]	@ (8007e10 <HAL_RCC_OscConfig+0x4cc>)
 8007bca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bcc:	f003 0302 	and.w	r3, r3, #2
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d1ee      	bne.n	8007bb2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f003 0304 	and.w	r3, r3, #4
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	f000 80a4 	beq.w	8007d2a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007be2:	4b8b      	ldr	r3, [pc, #556]	@ (8007e10 <HAL_RCC_OscConfig+0x4cc>)
 8007be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d10d      	bne.n	8007c0a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007bee:	4b88      	ldr	r3, [pc, #544]	@ (8007e10 <HAL_RCC_OscConfig+0x4cc>)
 8007bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bf2:	4a87      	ldr	r2, [pc, #540]	@ (8007e10 <HAL_RCC_OscConfig+0x4cc>)
 8007bf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007bf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8007bfa:	4b85      	ldr	r3, [pc, #532]	@ (8007e10 <HAL_RCC_OscConfig+0x4cc>)
 8007bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c02:	60bb      	str	r3, [r7, #8]
 8007c04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c06:	2301      	movs	r3, #1
 8007c08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c0a:	4b82      	ldr	r3, [pc, #520]	@ (8007e14 <HAL_RCC_OscConfig+0x4d0>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d118      	bne.n	8007c48 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007c16:	4b7f      	ldr	r3, [pc, #508]	@ (8007e14 <HAL_RCC_OscConfig+0x4d0>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a7e      	ldr	r2, [pc, #504]	@ (8007e14 <HAL_RCC_OscConfig+0x4d0>)
 8007c1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c22:	f7fa fbbf 	bl	80023a4 <HAL_GetTick>
 8007c26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c28:	e008      	b.n	8007c3c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c2a:	f7fa fbbb 	bl	80023a4 <HAL_GetTick>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	1ad3      	subs	r3, r2, r3
 8007c34:	2b64      	cmp	r3, #100	@ 0x64
 8007c36:	d901      	bls.n	8007c3c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	e120      	b.n	8007e7e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c3c:	4b75      	ldr	r3, [pc, #468]	@ (8007e14 <HAL_RCC_OscConfig+0x4d0>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d0f0      	beq.n	8007c2a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d106      	bne.n	8007c5e <HAL_RCC_OscConfig+0x31a>
 8007c50:	4b6f      	ldr	r3, [pc, #444]	@ (8007e10 <HAL_RCC_OscConfig+0x4cc>)
 8007c52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c54:	4a6e      	ldr	r2, [pc, #440]	@ (8007e10 <HAL_RCC_OscConfig+0x4cc>)
 8007c56:	f043 0301 	orr.w	r3, r3, #1
 8007c5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c5c:	e02d      	b.n	8007cba <HAL_RCC_OscConfig+0x376>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d10c      	bne.n	8007c80 <HAL_RCC_OscConfig+0x33c>
 8007c66:	4b6a      	ldr	r3, [pc, #424]	@ (8007e10 <HAL_RCC_OscConfig+0x4cc>)
 8007c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c6a:	4a69      	ldr	r2, [pc, #420]	@ (8007e10 <HAL_RCC_OscConfig+0x4cc>)
 8007c6c:	f023 0301 	bic.w	r3, r3, #1
 8007c70:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c72:	4b67      	ldr	r3, [pc, #412]	@ (8007e10 <HAL_RCC_OscConfig+0x4cc>)
 8007c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c76:	4a66      	ldr	r2, [pc, #408]	@ (8007e10 <HAL_RCC_OscConfig+0x4cc>)
 8007c78:	f023 0304 	bic.w	r3, r3, #4
 8007c7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c7e:	e01c      	b.n	8007cba <HAL_RCC_OscConfig+0x376>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	2b05      	cmp	r3, #5
 8007c86:	d10c      	bne.n	8007ca2 <HAL_RCC_OscConfig+0x35e>
 8007c88:	4b61      	ldr	r3, [pc, #388]	@ (8007e10 <HAL_RCC_OscConfig+0x4cc>)
 8007c8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c8c:	4a60      	ldr	r2, [pc, #384]	@ (8007e10 <HAL_RCC_OscConfig+0x4cc>)
 8007c8e:	f043 0304 	orr.w	r3, r3, #4
 8007c92:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c94:	4b5e      	ldr	r3, [pc, #376]	@ (8007e10 <HAL_RCC_OscConfig+0x4cc>)
 8007c96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c98:	4a5d      	ldr	r2, [pc, #372]	@ (8007e10 <HAL_RCC_OscConfig+0x4cc>)
 8007c9a:	f043 0301 	orr.w	r3, r3, #1
 8007c9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ca0:	e00b      	b.n	8007cba <HAL_RCC_OscConfig+0x376>
 8007ca2:	4b5b      	ldr	r3, [pc, #364]	@ (8007e10 <HAL_RCC_OscConfig+0x4cc>)
 8007ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ca6:	4a5a      	ldr	r2, [pc, #360]	@ (8007e10 <HAL_RCC_OscConfig+0x4cc>)
 8007ca8:	f023 0301 	bic.w	r3, r3, #1
 8007cac:	6713      	str	r3, [r2, #112]	@ 0x70
 8007cae:	4b58      	ldr	r3, [pc, #352]	@ (8007e10 <HAL_RCC_OscConfig+0x4cc>)
 8007cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cb2:	4a57      	ldr	r2, [pc, #348]	@ (8007e10 <HAL_RCC_OscConfig+0x4cc>)
 8007cb4:	f023 0304 	bic.w	r3, r3, #4
 8007cb8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d015      	beq.n	8007cee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cc2:	f7fa fb6f 	bl	80023a4 <HAL_GetTick>
 8007cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cc8:	e00a      	b.n	8007ce0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cca:	f7fa fb6b 	bl	80023a4 <HAL_GetTick>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	1ad3      	subs	r3, r2, r3
 8007cd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d901      	bls.n	8007ce0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	e0ce      	b.n	8007e7e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ce0:	4b4b      	ldr	r3, [pc, #300]	@ (8007e10 <HAL_RCC_OscConfig+0x4cc>)
 8007ce2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ce4:	f003 0302 	and.w	r3, r3, #2
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d0ee      	beq.n	8007cca <HAL_RCC_OscConfig+0x386>
 8007cec:	e014      	b.n	8007d18 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cee:	f7fa fb59 	bl	80023a4 <HAL_GetTick>
 8007cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007cf4:	e00a      	b.n	8007d0c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cf6:	f7fa fb55 	bl	80023a4 <HAL_GetTick>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	1ad3      	subs	r3, r2, r3
 8007d00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d901      	bls.n	8007d0c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	e0b8      	b.n	8007e7e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d0c:	4b40      	ldr	r3, [pc, #256]	@ (8007e10 <HAL_RCC_OscConfig+0x4cc>)
 8007d0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d10:	f003 0302 	and.w	r3, r3, #2
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d1ee      	bne.n	8007cf6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007d18:	7dfb      	ldrb	r3, [r7, #23]
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d105      	bne.n	8007d2a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d1e:	4b3c      	ldr	r3, [pc, #240]	@ (8007e10 <HAL_RCC_OscConfig+0x4cc>)
 8007d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d22:	4a3b      	ldr	r2, [pc, #236]	@ (8007e10 <HAL_RCC_OscConfig+0x4cc>)
 8007d24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d28:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	699b      	ldr	r3, [r3, #24]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	f000 80a4 	beq.w	8007e7c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007d34:	4b36      	ldr	r3, [pc, #216]	@ (8007e10 <HAL_RCC_OscConfig+0x4cc>)
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	f003 030c 	and.w	r3, r3, #12
 8007d3c:	2b08      	cmp	r3, #8
 8007d3e:	d06b      	beq.n	8007e18 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	699b      	ldr	r3, [r3, #24]
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	d149      	bne.n	8007ddc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d48:	4b31      	ldr	r3, [pc, #196]	@ (8007e10 <HAL_RCC_OscConfig+0x4cc>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a30      	ldr	r2, [pc, #192]	@ (8007e10 <HAL_RCC_OscConfig+0x4cc>)
 8007d4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d54:	f7fa fb26 	bl	80023a4 <HAL_GetTick>
 8007d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d5a:	e008      	b.n	8007d6e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d5c:	f7fa fb22 	bl	80023a4 <HAL_GetTick>
 8007d60:	4602      	mov	r2, r0
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	1ad3      	subs	r3, r2, r3
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	d901      	bls.n	8007d6e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007d6a:	2303      	movs	r3, #3
 8007d6c:	e087      	b.n	8007e7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d6e:	4b28      	ldr	r3, [pc, #160]	@ (8007e10 <HAL_RCC_OscConfig+0x4cc>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d1f0      	bne.n	8007d5c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	69da      	ldr	r2, [r3, #28]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6a1b      	ldr	r3, [r3, #32]
 8007d82:	431a      	orrs	r2, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d88:	019b      	lsls	r3, r3, #6
 8007d8a:	431a      	orrs	r2, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d90:	085b      	lsrs	r3, r3, #1
 8007d92:	3b01      	subs	r3, #1
 8007d94:	041b      	lsls	r3, r3, #16
 8007d96:	431a      	orrs	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d9c:	061b      	lsls	r3, r3, #24
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	4a1b      	ldr	r2, [pc, #108]	@ (8007e10 <HAL_RCC_OscConfig+0x4cc>)
 8007da2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007da6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007da8:	4b19      	ldr	r3, [pc, #100]	@ (8007e10 <HAL_RCC_OscConfig+0x4cc>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a18      	ldr	r2, [pc, #96]	@ (8007e10 <HAL_RCC_OscConfig+0x4cc>)
 8007dae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007db4:	f7fa faf6 	bl	80023a4 <HAL_GetTick>
 8007db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007dba:	e008      	b.n	8007dce <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007dbc:	f7fa faf2 	bl	80023a4 <HAL_GetTick>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	1ad3      	subs	r3, r2, r3
 8007dc6:	2b02      	cmp	r3, #2
 8007dc8:	d901      	bls.n	8007dce <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	e057      	b.n	8007e7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007dce:	4b10      	ldr	r3, [pc, #64]	@ (8007e10 <HAL_RCC_OscConfig+0x4cc>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d0f0      	beq.n	8007dbc <HAL_RCC_OscConfig+0x478>
 8007dda:	e04f      	b.n	8007e7c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8007e10 <HAL_RCC_OscConfig+0x4cc>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a0b      	ldr	r2, [pc, #44]	@ (8007e10 <HAL_RCC_OscConfig+0x4cc>)
 8007de2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007de6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007de8:	f7fa fadc 	bl	80023a4 <HAL_GetTick>
 8007dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dee:	e008      	b.n	8007e02 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007df0:	f7fa fad8 	bl	80023a4 <HAL_GetTick>
 8007df4:	4602      	mov	r2, r0
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	1ad3      	subs	r3, r2, r3
 8007dfa:	2b02      	cmp	r3, #2
 8007dfc:	d901      	bls.n	8007e02 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	e03d      	b.n	8007e7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e02:	4b03      	ldr	r3, [pc, #12]	@ (8007e10 <HAL_RCC_OscConfig+0x4cc>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1f0      	bne.n	8007df0 <HAL_RCC_OscConfig+0x4ac>
 8007e0e:	e035      	b.n	8007e7c <HAL_RCC_OscConfig+0x538>
 8007e10:	40023800 	.word	0x40023800
 8007e14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007e18:	4b1b      	ldr	r3, [pc, #108]	@ (8007e88 <HAL_RCC_OscConfig+0x544>)
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	699b      	ldr	r3, [r3, #24]
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d028      	beq.n	8007e78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d121      	bne.n	8007e78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d11a      	bne.n	8007e78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007e48:	4013      	ands	r3, r2
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007e4e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d111      	bne.n	8007e78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e5e:	085b      	lsrs	r3, r3, #1
 8007e60:	3b01      	subs	r3, #1
 8007e62:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d107      	bne.n	8007e78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e72:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d001      	beq.n	8007e7c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	e000      	b.n	8007e7e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3718      	adds	r7, #24
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	40023800 	.word	0x40023800

08007e8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007e96:	2300      	movs	r3, #0
 8007e98:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d101      	bne.n	8007ea4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e0d0      	b.n	8008046 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007ea4:	4b6a      	ldr	r3, [pc, #424]	@ (8008050 <HAL_RCC_ClockConfig+0x1c4>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f003 030f 	and.w	r3, r3, #15
 8007eac:	683a      	ldr	r2, [r7, #0]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d910      	bls.n	8007ed4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007eb2:	4b67      	ldr	r3, [pc, #412]	@ (8008050 <HAL_RCC_ClockConfig+0x1c4>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f023 020f 	bic.w	r2, r3, #15
 8007eba:	4965      	ldr	r1, [pc, #404]	@ (8008050 <HAL_RCC_ClockConfig+0x1c4>)
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ec2:	4b63      	ldr	r3, [pc, #396]	@ (8008050 <HAL_RCC_ClockConfig+0x1c4>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f003 030f 	and.w	r3, r3, #15
 8007eca:	683a      	ldr	r2, [r7, #0]
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d001      	beq.n	8007ed4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e0b8      	b.n	8008046 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f003 0302 	and.w	r3, r3, #2
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d020      	beq.n	8007f22 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f003 0304 	and.w	r3, r3, #4
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d005      	beq.n	8007ef8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007eec:	4b59      	ldr	r3, [pc, #356]	@ (8008054 <HAL_RCC_ClockConfig+0x1c8>)
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	4a58      	ldr	r2, [pc, #352]	@ (8008054 <HAL_RCC_ClockConfig+0x1c8>)
 8007ef2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007ef6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f003 0308 	and.w	r3, r3, #8
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d005      	beq.n	8007f10 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007f04:	4b53      	ldr	r3, [pc, #332]	@ (8008054 <HAL_RCC_ClockConfig+0x1c8>)
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	4a52      	ldr	r2, [pc, #328]	@ (8008054 <HAL_RCC_ClockConfig+0x1c8>)
 8007f0a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007f0e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f10:	4b50      	ldr	r3, [pc, #320]	@ (8008054 <HAL_RCC_ClockConfig+0x1c8>)
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	494d      	ldr	r1, [pc, #308]	@ (8008054 <HAL_RCC_ClockConfig+0x1c8>)
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f003 0301 	and.w	r3, r3, #1
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d040      	beq.n	8007fb0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d107      	bne.n	8007f46 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f36:	4b47      	ldr	r3, [pc, #284]	@ (8008054 <HAL_RCC_ClockConfig+0x1c8>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d115      	bne.n	8007f6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	e07f      	b.n	8008046 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	2b02      	cmp	r3, #2
 8007f4c:	d107      	bne.n	8007f5e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f4e:	4b41      	ldr	r3, [pc, #260]	@ (8008054 <HAL_RCC_ClockConfig+0x1c8>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d109      	bne.n	8007f6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e073      	b.n	8008046 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f5e:	4b3d      	ldr	r3, [pc, #244]	@ (8008054 <HAL_RCC_ClockConfig+0x1c8>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f003 0302 	and.w	r3, r3, #2
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d101      	bne.n	8007f6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e06b      	b.n	8008046 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f6e:	4b39      	ldr	r3, [pc, #228]	@ (8008054 <HAL_RCC_ClockConfig+0x1c8>)
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	f023 0203 	bic.w	r2, r3, #3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	4936      	ldr	r1, [pc, #216]	@ (8008054 <HAL_RCC_ClockConfig+0x1c8>)
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f80:	f7fa fa10 	bl	80023a4 <HAL_GetTick>
 8007f84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f86:	e00a      	b.n	8007f9e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f88:	f7fa fa0c 	bl	80023a4 <HAL_GetTick>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	1ad3      	subs	r3, r2, r3
 8007f92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d901      	bls.n	8007f9e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007f9a:	2303      	movs	r3, #3
 8007f9c:	e053      	b.n	8008046 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f9e:	4b2d      	ldr	r3, [pc, #180]	@ (8008054 <HAL_RCC_ClockConfig+0x1c8>)
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	f003 020c 	and.w	r2, r3, #12
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d1eb      	bne.n	8007f88 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007fb0:	4b27      	ldr	r3, [pc, #156]	@ (8008050 <HAL_RCC_ClockConfig+0x1c4>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f003 030f 	and.w	r3, r3, #15
 8007fb8:	683a      	ldr	r2, [r7, #0]
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d210      	bcs.n	8007fe0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fbe:	4b24      	ldr	r3, [pc, #144]	@ (8008050 <HAL_RCC_ClockConfig+0x1c4>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f023 020f 	bic.w	r2, r3, #15
 8007fc6:	4922      	ldr	r1, [pc, #136]	@ (8008050 <HAL_RCC_ClockConfig+0x1c4>)
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fce:	4b20      	ldr	r3, [pc, #128]	@ (8008050 <HAL_RCC_ClockConfig+0x1c4>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f003 030f 	and.w	r3, r3, #15
 8007fd6:	683a      	ldr	r2, [r7, #0]
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d001      	beq.n	8007fe0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e032      	b.n	8008046 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f003 0304 	and.w	r3, r3, #4
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d008      	beq.n	8007ffe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007fec:	4b19      	ldr	r3, [pc, #100]	@ (8008054 <HAL_RCC_ClockConfig+0x1c8>)
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	4916      	ldr	r1, [pc, #88]	@ (8008054 <HAL_RCC_ClockConfig+0x1c8>)
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f003 0308 	and.w	r3, r3, #8
 8008006:	2b00      	cmp	r3, #0
 8008008:	d009      	beq.n	800801e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800800a:	4b12      	ldr	r3, [pc, #72]	@ (8008054 <HAL_RCC_ClockConfig+0x1c8>)
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	691b      	ldr	r3, [r3, #16]
 8008016:	00db      	lsls	r3, r3, #3
 8008018:	490e      	ldr	r1, [pc, #56]	@ (8008054 <HAL_RCC_ClockConfig+0x1c8>)
 800801a:	4313      	orrs	r3, r2
 800801c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800801e:	f000 f821 	bl	8008064 <HAL_RCC_GetSysClockFreq>
 8008022:	4602      	mov	r2, r0
 8008024:	4b0b      	ldr	r3, [pc, #44]	@ (8008054 <HAL_RCC_ClockConfig+0x1c8>)
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	091b      	lsrs	r3, r3, #4
 800802a:	f003 030f 	and.w	r3, r3, #15
 800802e:	490a      	ldr	r1, [pc, #40]	@ (8008058 <HAL_RCC_ClockConfig+0x1cc>)
 8008030:	5ccb      	ldrb	r3, [r1, r3]
 8008032:	fa22 f303 	lsr.w	r3, r2, r3
 8008036:	4a09      	ldr	r2, [pc, #36]	@ (800805c <HAL_RCC_ClockConfig+0x1d0>)
 8008038:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800803a:	4b09      	ldr	r3, [pc, #36]	@ (8008060 <HAL_RCC_ClockConfig+0x1d4>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4618      	mov	r0, r3
 8008040:	f7f9 fb06 	bl	8001650 <HAL_InitTick>

  return HAL_OK;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3710      	adds	r7, #16
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	bf00      	nop
 8008050:	40023c00 	.word	0x40023c00
 8008054:	40023800 	.word	0x40023800
 8008058:	080266d4 	.word	0x080266d4
 800805c:	20000000 	.word	0x20000000
 8008060:	20000004 	.word	0x20000004

08008064 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008068:	b090      	sub	sp, #64	@ 0x40
 800806a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800806c:	2300      	movs	r3, #0
 800806e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008070:	2300      	movs	r3, #0
 8008072:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008074:	2300      	movs	r3, #0
 8008076:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8008078:	2300      	movs	r3, #0
 800807a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800807c:	4b59      	ldr	r3, [pc, #356]	@ (80081e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	f003 030c 	and.w	r3, r3, #12
 8008084:	2b08      	cmp	r3, #8
 8008086:	d00d      	beq.n	80080a4 <HAL_RCC_GetSysClockFreq+0x40>
 8008088:	2b08      	cmp	r3, #8
 800808a:	f200 80a1 	bhi.w	80081d0 <HAL_RCC_GetSysClockFreq+0x16c>
 800808e:	2b00      	cmp	r3, #0
 8008090:	d002      	beq.n	8008098 <HAL_RCC_GetSysClockFreq+0x34>
 8008092:	2b04      	cmp	r3, #4
 8008094:	d003      	beq.n	800809e <HAL_RCC_GetSysClockFreq+0x3a>
 8008096:	e09b      	b.n	80081d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008098:	4b53      	ldr	r3, [pc, #332]	@ (80081e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800809a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800809c:	e09b      	b.n	80081d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800809e:	4b53      	ldr	r3, [pc, #332]	@ (80081ec <HAL_RCC_GetSysClockFreq+0x188>)
 80080a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80080a2:	e098      	b.n	80081d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80080a4:	4b4f      	ldr	r3, [pc, #316]	@ (80081e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80080ac:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80080ae:	4b4d      	ldr	r3, [pc, #308]	@ (80081e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d028      	beq.n	800810c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080ba:	4b4a      	ldr	r3, [pc, #296]	@ (80081e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	099b      	lsrs	r3, r3, #6
 80080c0:	2200      	movs	r2, #0
 80080c2:	623b      	str	r3, [r7, #32]
 80080c4:	627a      	str	r2, [r7, #36]	@ 0x24
 80080c6:	6a3b      	ldr	r3, [r7, #32]
 80080c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80080cc:	2100      	movs	r1, #0
 80080ce:	4b47      	ldr	r3, [pc, #284]	@ (80081ec <HAL_RCC_GetSysClockFreq+0x188>)
 80080d0:	fb03 f201 	mul.w	r2, r3, r1
 80080d4:	2300      	movs	r3, #0
 80080d6:	fb00 f303 	mul.w	r3, r0, r3
 80080da:	4413      	add	r3, r2
 80080dc:	4a43      	ldr	r2, [pc, #268]	@ (80081ec <HAL_RCC_GetSysClockFreq+0x188>)
 80080de:	fba0 1202 	umull	r1, r2, r0, r2
 80080e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80080e4:	460a      	mov	r2, r1
 80080e6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80080e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080ea:	4413      	add	r3, r2
 80080ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80080ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080f0:	2200      	movs	r2, #0
 80080f2:	61bb      	str	r3, [r7, #24]
 80080f4:	61fa      	str	r2, [r7, #28]
 80080f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80080fe:	f7f8 f8d7 	bl	80002b0 <__aeabi_uldivmod>
 8008102:	4602      	mov	r2, r0
 8008104:	460b      	mov	r3, r1
 8008106:	4613      	mov	r3, r2
 8008108:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800810a:	e053      	b.n	80081b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800810c:	4b35      	ldr	r3, [pc, #212]	@ (80081e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	099b      	lsrs	r3, r3, #6
 8008112:	2200      	movs	r2, #0
 8008114:	613b      	str	r3, [r7, #16]
 8008116:	617a      	str	r2, [r7, #20]
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800811e:	f04f 0b00 	mov.w	fp, #0
 8008122:	4652      	mov	r2, sl
 8008124:	465b      	mov	r3, fp
 8008126:	f04f 0000 	mov.w	r0, #0
 800812a:	f04f 0100 	mov.w	r1, #0
 800812e:	0159      	lsls	r1, r3, #5
 8008130:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008134:	0150      	lsls	r0, r2, #5
 8008136:	4602      	mov	r2, r0
 8008138:	460b      	mov	r3, r1
 800813a:	ebb2 080a 	subs.w	r8, r2, sl
 800813e:	eb63 090b 	sbc.w	r9, r3, fp
 8008142:	f04f 0200 	mov.w	r2, #0
 8008146:	f04f 0300 	mov.w	r3, #0
 800814a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800814e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008152:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008156:	ebb2 0408 	subs.w	r4, r2, r8
 800815a:	eb63 0509 	sbc.w	r5, r3, r9
 800815e:	f04f 0200 	mov.w	r2, #0
 8008162:	f04f 0300 	mov.w	r3, #0
 8008166:	00eb      	lsls	r3, r5, #3
 8008168:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800816c:	00e2      	lsls	r2, r4, #3
 800816e:	4614      	mov	r4, r2
 8008170:	461d      	mov	r5, r3
 8008172:	eb14 030a 	adds.w	r3, r4, sl
 8008176:	603b      	str	r3, [r7, #0]
 8008178:	eb45 030b 	adc.w	r3, r5, fp
 800817c:	607b      	str	r3, [r7, #4]
 800817e:	f04f 0200 	mov.w	r2, #0
 8008182:	f04f 0300 	mov.w	r3, #0
 8008186:	e9d7 4500 	ldrd	r4, r5, [r7]
 800818a:	4629      	mov	r1, r5
 800818c:	028b      	lsls	r3, r1, #10
 800818e:	4621      	mov	r1, r4
 8008190:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008194:	4621      	mov	r1, r4
 8008196:	028a      	lsls	r2, r1, #10
 8008198:	4610      	mov	r0, r2
 800819a:	4619      	mov	r1, r3
 800819c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800819e:	2200      	movs	r2, #0
 80081a0:	60bb      	str	r3, [r7, #8]
 80081a2:	60fa      	str	r2, [r7, #12]
 80081a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80081a8:	f7f8 f882 	bl	80002b0 <__aeabi_uldivmod>
 80081ac:	4602      	mov	r2, r0
 80081ae:	460b      	mov	r3, r1
 80081b0:	4613      	mov	r3, r2
 80081b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80081b4:	4b0b      	ldr	r3, [pc, #44]	@ (80081e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	0c1b      	lsrs	r3, r3, #16
 80081ba:	f003 0303 	and.w	r3, r3, #3
 80081be:	3301      	adds	r3, #1
 80081c0:	005b      	lsls	r3, r3, #1
 80081c2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80081c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80081c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80081cc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80081ce:	e002      	b.n	80081d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80081d0:	4b05      	ldr	r3, [pc, #20]	@ (80081e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80081d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80081d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80081d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3740      	adds	r7, #64	@ 0x40
 80081dc:	46bd      	mov	sp, r7
 80081de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081e2:	bf00      	nop
 80081e4:	40023800 	.word	0x40023800
 80081e8:	00f42400 	.word	0x00f42400
 80081ec:	017d7840 	.word	0x017d7840

080081f0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80081f0:	b480      	push	{r7}
 80081f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80081f4:	4b03      	ldr	r3, [pc, #12]	@ (8008204 <HAL_RCC_GetHCLKFreq+0x14>)
 80081f6:	681b      	ldr	r3, [r3, #0]
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr
 8008202:	bf00      	nop
 8008204:	20000000 	.word	0x20000000

08008208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800820c:	f7ff fff0 	bl	80081f0 <HAL_RCC_GetHCLKFreq>
 8008210:	4602      	mov	r2, r0
 8008212:	4b05      	ldr	r3, [pc, #20]	@ (8008228 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	0a9b      	lsrs	r3, r3, #10
 8008218:	f003 0307 	and.w	r3, r3, #7
 800821c:	4903      	ldr	r1, [pc, #12]	@ (800822c <HAL_RCC_GetPCLK1Freq+0x24>)
 800821e:	5ccb      	ldrb	r3, [r1, r3]
 8008220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008224:	4618      	mov	r0, r3
 8008226:	bd80      	pop	{r7, pc}
 8008228:	40023800 	.word	0x40023800
 800822c:	080266e4 	.word	0x080266e4

08008230 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008234:	f7ff ffdc 	bl	80081f0 <HAL_RCC_GetHCLKFreq>
 8008238:	4602      	mov	r2, r0
 800823a:	4b05      	ldr	r3, [pc, #20]	@ (8008250 <HAL_RCC_GetPCLK2Freq+0x20>)
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	0b5b      	lsrs	r3, r3, #13
 8008240:	f003 0307 	and.w	r3, r3, #7
 8008244:	4903      	ldr	r1, [pc, #12]	@ (8008254 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008246:	5ccb      	ldrb	r3, [r1, r3]
 8008248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800824c:	4618      	mov	r0, r3
 800824e:	bd80      	pop	{r7, pc}
 8008250:	40023800 	.word	0x40023800
 8008254:	080266e4 	.word	0x080266e4

08008258 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	220f      	movs	r2, #15
 8008266:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008268:	4b12      	ldr	r3, [pc, #72]	@ (80082b4 <HAL_RCC_GetClockConfig+0x5c>)
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	f003 0203 	and.w	r2, r3, #3
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008274:	4b0f      	ldr	r3, [pc, #60]	@ (80082b4 <HAL_RCC_GetClockConfig+0x5c>)
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008280:	4b0c      	ldr	r3, [pc, #48]	@ (80082b4 <HAL_RCC_GetClockConfig+0x5c>)
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800828c:	4b09      	ldr	r3, [pc, #36]	@ (80082b4 <HAL_RCC_GetClockConfig+0x5c>)
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	08db      	lsrs	r3, r3, #3
 8008292:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800829a:	4b07      	ldr	r3, [pc, #28]	@ (80082b8 <HAL_RCC_GetClockConfig+0x60>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f003 020f 	and.w	r2, r3, #15
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	601a      	str	r2, [r3, #0]
}
 80082a6:	bf00      	nop
 80082a8:	370c      	adds	r7, #12
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop
 80082b4:	40023800 	.word	0x40023800
 80082b8:	40023c00 	.word	0x40023c00

080082bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b088      	sub	sp, #32
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80082c4:	2300      	movs	r3, #0
 80082c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80082c8:	2300      	movs	r3, #0
 80082ca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80082cc:	2300      	movs	r3, #0
 80082ce:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80082d0:	2300      	movs	r3, #0
 80082d2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80082d4:	2300      	movs	r3, #0
 80082d6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f003 0301 	and.w	r3, r3, #1
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d012      	beq.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80082e4:	4b69      	ldr	r3, [pc, #420]	@ (800848c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	4a68      	ldr	r2, [pc, #416]	@ (800848c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082ea:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80082ee:	6093      	str	r3, [r2, #8]
 80082f0:	4b66      	ldr	r3, [pc, #408]	@ (800848c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082f2:	689a      	ldr	r2, [r3, #8]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082f8:	4964      	ldr	r1, [pc, #400]	@ (800848c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082fa:	4313      	orrs	r3, r2
 80082fc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008302:	2b00      	cmp	r3, #0
 8008304:	d101      	bne.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008306:	2301      	movs	r3, #1
 8008308:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008312:	2b00      	cmp	r3, #0
 8008314:	d017      	beq.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008316:	4b5d      	ldr	r3, [pc, #372]	@ (800848c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008318:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800831c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008324:	4959      	ldr	r1, [pc, #356]	@ (800848c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008326:	4313      	orrs	r3, r2
 8008328:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008330:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008334:	d101      	bne.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008336:	2301      	movs	r3, #1
 8008338:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800833e:	2b00      	cmp	r3, #0
 8008340:	d101      	bne.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008342:	2301      	movs	r3, #1
 8008344:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800834e:	2b00      	cmp	r3, #0
 8008350:	d017      	beq.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008352:	4b4e      	ldr	r3, [pc, #312]	@ (800848c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008354:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008358:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008360:	494a      	ldr	r1, [pc, #296]	@ (800848c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008362:	4313      	orrs	r3, r2
 8008364:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800836c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008370:	d101      	bne.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008372:	2301      	movs	r3, #1
 8008374:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800837a:	2b00      	cmp	r3, #0
 800837c:	d101      	bne.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800837e:	2301      	movs	r3, #1
 8008380:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800838a:	2b00      	cmp	r3, #0
 800838c:	d001      	beq.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800838e:	2301      	movs	r3, #1
 8008390:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f003 0320 	and.w	r3, r3, #32
 800839a:	2b00      	cmp	r3, #0
 800839c:	f000 808b 	beq.w	80084b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80083a0:	4b3a      	ldr	r3, [pc, #232]	@ (800848c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083a4:	4a39      	ldr	r2, [pc, #228]	@ (800848c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80083ac:	4b37      	ldr	r3, [pc, #220]	@ (800848c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80083b4:	60bb      	str	r3, [r7, #8]
 80083b6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80083b8:	4b35      	ldr	r3, [pc, #212]	@ (8008490 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a34      	ldr	r2, [pc, #208]	@ (8008490 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80083be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083c4:	f7f9 ffee 	bl	80023a4 <HAL_GetTick>
 80083c8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80083ca:	e008      	b.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083cc:	f7f9 ffea 	bl	80023a4 <HAL_GetTick>
 80083d0:	4602      	mov	r2, r0
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	1ad3      	subs	r3, r2, r3
 80083d6:	2b64      	cmp	r3, #100	@ 0x64
 80083d8:	d901      	bls.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80083da:	2303      	movs	r3, #3
 80083dc:	e357      	b.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80083de:	4b2c      	ldr	r3, [pc, #176]	@ (8008490 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d0f0      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80083ea:	4b28      	ldr	r3, [pc, #160]	@ (800848c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083f2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d035      	beq.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008402:	693a      	ldr	r2, [r7, #16]
 8008404:	429a      	cmp	r2, r3
 8008406:	d02e      	beq.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008408:	4b20      	ldr	r3, [pc, #128]	@ (800848c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800840a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800840c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008410:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008412:	4b1e      	ldr	r3, [pc, #120]	@ (800848c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008416:	4a1d      	ldr	r2, [pc, #116]	@ (800848c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008418:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800841c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800841e:	4b1b      	ldr	r3, [pc, #108]	@ (800848c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008422:	4a1a      	ldr	r2, [pc, #104]	@ (800848c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008424:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008428:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800842a:	4a18      	ldr	r2, [pc, #96]	@ (800848c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008430:	4b16      	ldr	r3, [pc, #88]	@ (800848c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008434:	f003 0301 	and.w	r3, r3, #1
 8008438:	2b01      	cmp	r3, #1
 800843a:	d114      	bne.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800843c:	f7f9 ffb2 	bl	80023a4 <HAL_GetTick>
 8008440:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008442:	e00a      	b.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008444:	f7f9 ffae 	bl	80023a4 <HAL_GetTick>
 8008448:	4602      	mov	r2, r0
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	1ad3      	subs	r3, r2, r3
 800844e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008452:	4293      	cmp	r3, r2
 8008454:	d901      	bls.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008456:	2303      	movs	r3, #3
 8008458:	e319      	b.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800845a:	4b0c      	ldr	r3, [pc, #48]	@ (800848c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800845c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800845e:	f003 0302 	and.w	r3, r3, #2
 8008462:	2b00      	cmp	r3, #0
 8008464:	d0ee      	beq.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800846a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800846e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008472:	d111      	bne.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008474:	4b05      	ldr	r3, [pc, #20]	@ (800848c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008480:	4b04      	ldr	r3, [pc, #16]	@ (8008494 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008482:	400b      	ands	r3, r1
 8008484:	4901      	ldr	r1, [pc, #4]	@ (800848c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008486:	4313      	orrs	r3, r2
 8008488:	608b      	str	r3, [r1, #8]
 800848a:	e00b      	b.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800848c:	40023800 	.word	0x40023800
 8008490:	40007000 	.word	0x40007000
 8008494:	0ffffcff 	.word	0x0ffffcff
 8008498:	4baa      	ldr	r3, [pc, #680]	@ (8008744 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	4aa9      	ldr	r2, [pc, #676]	@ (8008744 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800849e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80084a2:	6093      	str	r3, [r2, #8]
 80084a4:	4ba7      	ldr	r3, [pc, #668]	@ (8008744 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084a6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084b0:	49a4      	ldr	r1, [pc, #656]	@ (8008744 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084b2:	4313      	orrs	r3, r2
 80084b4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f003 0310 	and.w	r3, r3, #16
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d010      	beq.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80084c2:	4ba0      	ldr	r3, [pc, #640]	@ (8008744 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80084c8:	4a9e      	ldr	r2, [pc, #632]	@ (8008744 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80084ce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80084d2:	4b9c      	ldr	r3, [pc, #624]	@ (8008744 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084d4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084dc:	4999      	ldr	r1, [pc, #612]	@ (8008744 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084de:	4313      	orrs	r3, r2
 80084e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00a      	beq.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80084f0:	4b94      	ldr	r3, [pc, #592]	@ (8008744 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084f6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084fe:	4991      	ldr	r1, [pc, #580]	@ (8008744 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008500:	4313      	orrs	r3, r2
 8008502:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800850e:	2b00      	cmp	r3, #0
 8008510:	d00a      	beq.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008512:	4b8c      	ldr	r3, [pc, #560]	@ (8008744 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008514:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008518:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008520:	4988      	ldr	r1, [pc, #544]	@ (8008744 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008522:	4313      	orrs	r3, r2
 8008524:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00a      	beq.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008534:	4b83      	ldr	r3, [pc, #524]	@ (8008744 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800853a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008542:	4980      	ldr	r1, [pc, #512]	@ (8008744 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008544:	4313      	orrs	r3, r2
 8008546:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008552:	2b00      	cmp	r3, #0
 8008554:	d00a      	beq.n	800856c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008556:	4b7b      	ldr	r3, [pc, #492]	@ (8008744 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008558:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800855c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008564:	4977      	ldr	r1, [pc, #476]	@ (8008744 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008566:	4313      	orrs	r3, r2
 8008568:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00a      	beq.n	800858e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008578:	4b72      	ldr	r3, [pc, #456]	@ (8008744 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800857a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800857e:	f023 0203 	bic.w	r2, r3, #3
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008586:	496f      	ldr	r1, [pc, #444]	@ (8008744 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008588:	4313      	orrs	r3, r2
 800858a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00a      	beq.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800859a:	4b6a      	ldr	r3, [pc, #424]	@ (8008744 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800859c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085a0:	f023 020c 	bic.w	r2, r3, #12
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085a8:	4966      	ldr	r1, [pc, #408]	@ (8008744 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085aa:	4313      	orrs	r3, r2
 80085ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00a      	beq.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80085bc:	4b61      	ldr	r3, [pc, #388]	@ (8008744 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085c2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085ca:	495e      	ldr	r1, [pc, #376]	@ (8008744 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085cc:	4313      	orrs	r3, r2
 80085ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00a      	beq.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80085de:	4b59      	ldr	r3, [pc, #356]	@ (8008744 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085e4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085ec:	4955      	ldr	r1, [pc, #340]	@ (8008744 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085ee:	4313      	orrs	r3, r2
 80085f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00a      	beq.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008600:	4b50      	ldr	r3, [pc, #320]	@ (8008744 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008606:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800860e:	494d      	ldr	r1, [pc, #308]	@ (8008744 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008610:	4313      	orrs	r3, r2
 8008612:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00a      	beq.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008622:	4b48      	ldr	r3, [pc, #288]	@ (8008744 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008624:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008628:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008630:	4944      	ldr	r1, [pc, #272]	@ (8008744 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008632:	4313      	orrs	r3, r2
 8008634:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008640:	2b00      	cmp	r3, #0
 8008642:	d00a      	beq.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008644:	4b3f      	ldr	r3, [pc, #252]	@ (8008744 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800864a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008652:	493c      	ldr	r1, [pc, #240]	@ (8008744 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008654:	4313      	orrs	r3, r2
 8008656:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008662:	2b00      	cmp	r3, #0
 8008664:	d00a      	beq.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008666:	4b37      	ldr	r3, [pc, #220]	@ (8008744 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800866c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008674:	4933      	ldr	r1, [pc, #204]	@ (8008744 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008676:	4313      	orrs	r3, r2
 8008678:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00a      	beq.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008688:	4b2e      	ldr	r3, [pc, #184]	@ (8008744 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800868a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800868e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008696:	492b      	ldr	r1, [pc, #172]	@ (8008744 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008698:	4313      	orrs	r3, r2
 800869a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d011      	beq.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80086aa:	4b26      	ldr	r3, [pc, #152]	@ (8008744 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086b0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80086b8:	4922      	ldr	r1, [pc, #136]	@ (8008744 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086ba:	4313      	orrs	r3, r2
 80086bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80086c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086c8:	d101      	bne.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80086ca:	2301      	movs	r3, #1
 80086cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f003 0308 	and.w	r3, r3, #8
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d001      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80086da:	2301      	movs	r3, #1
 80086dc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00a      	beq.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80086ea:	4b16      	ldr	r3, [pc, #88]	@ (8008744 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086f0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086f8:	4912      	ldr	r1, [pc, #72]	@ (8008744 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086fa:	4313      	orrs	r3, r2
 80086fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008708:	2b00      	cmp	r3, #0
 800870a:	d00b      	beq.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800870c:	4b0d      	ldr	r3, [pc, #52]	@ (8008744 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800870e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008712:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800871c:	4909      	ldr	r1, [pc, #36]	@ (8008744 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800871e:	4313      	orrs	r3, r2
 8008720:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008724:	69fb      	ldr	r3, [r7, #28]
 8008726:	2b01      	cmp	r3, #1
 8008728:	d006      	beq.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008732:	2b00      	cmp	r3, #0
 8008734:	f000 80d9 	beq.w	80088ea <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008738:	4b02      	ldr	r3, [pc, #8]	@ (8008744 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a01      	ldr	r2, [pc, #4]	@ (8008744 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800873e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008742:	e001      	b.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8008744:	40023800 	.word	0x40023800
 8008748:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800874a:	f7f9 fe2b 	bl	80023a4 <HAL_GetTick>
 800874e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008750:	e008      	b.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008752:	f7f9 fe27 	bl	80023a4 <HAL_GetTick>
 8008756:	4602      	mov	r2, r0
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	1ad3      	subs	r3, r2, r3
 800875c:	2b64      	cmp	r3, #100	@ 0x64
 800875e:	d901      	bls.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008760:	2303      	movs	r3, #3
 8008762:	e194      	b.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008764:	4b6c      	ldr	r3, [pc, #432]	@ (8008918 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800876c:	2b00      	cmp	r3, #0
 800876e:	d1f0      	bne.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f003 0301 	and.w	r3, r3, #1
 8008778:	2b00      	cmp	r3, #0
 800877a:	d021      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008780:	2b00      	cmp	r3, #0
 8008782:	d11d      	bne.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008784:	4b64      	ldr	r3, [pc, #400]	@ (8008918 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008786:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800878a:	0c1b      	lsrs	r3, r3, #16
 800878c:	f003 0303 	and.w	r3, r3, #3
 8008790:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008792:	4b61      	ldr	r3, [pc, #388]	@ (8008918 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008794:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008798:	0e1b      	lsrs	r3, r3, #24
 800879a:	f003 030f 	and.w	r3, r3, #15
 800879e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	019a      	lsls	r2, r3, #6
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	041b      	lsls	r3, r3, #16
 80087aa:	431a      	orrs	r2, r3
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	061b      	lsls	r3, r3, #24
 80087b0:	431a      	orrs	r2, r3
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	071b      	lsls	r3, r3, #28
 80087b8:	4957      	ldr	r1, [pc, #348]	@ (8008918 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087ba:	4313      	orrs	r3, r2
 80087bc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d004      	beq.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087d4:	d00a      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d02e      	beq.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80087ea:	d129      	bne.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80087ec:	4b4a      	ldr	r3, [pc, #296]	@ (8008918 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087f2:	0c1b      	lsrs	r3, r3, #16
 80087f4:	f003 0303 	and.w	r3, r3, #3
 80087f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80087fa:	4b47      	ldr	r3, [pc, #284]	@ (8008918 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008800:	0f1b      	lsrs	r3, r3, #28
 8008802:	f003 0307 	and.w	r3, r3, #7
 8008806:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	019a      	lsls	r2, r3, #6
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	041b      	lsls	r3, r3, #16
 8008812:	431a      	orrs	r2, r3
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	061b      	lsls	r3, r3, #24
 800881a:	431a      	orrs	r2, r3
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	071b      	lsls	r3, r3, #28
 8008820:	493d      	ldr	r1, [pc, #244]	@ (8008918 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008822:	4313      	orrs	r3, r2
 8008824:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008828:	4b3b      	ldr	r3, [pc, #236]	@ (8008918 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800882a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800882e:	f023 021f 	bic.w	r2, r3, #31
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008836:	3b01      	subs	r3, #1
 8008838:	4937      	ldr	r1, [pc, #220]	@ (8008918 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800883a:	4313      	orrs	r3, r2
 800883c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008848:	2b00      	cmp	r3, #0
 800884a:	d01d      	beq.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800884c:	4b32      	ldr	r3, [pc, #200]	@ (8008918 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800884e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008852:	0e1b      	lsrs	r3, r3, #24
 8008854:	f003 030f 	and.w	r3, r3, #15
 8008858:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800885a:	4b2f      	ldr	r3, [pc, #188]	@ (8008918 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800885c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008860:	0f1b      	lsrs	r3, r3, #28
 8008862:	f003 0307 	and.w	r3, r3, #7
 8008866:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	019a      	lsls	r2, r3, #6
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	691b      	ldr	r3, [r3, #16]
 8008872:	041b      	lsls	r3, r3, #16
 8008874:	431a      	orrs	r2, r3
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	061b      	lsls	r3, r3, #24
 800887a:	431a      	orrs	r2, r3
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	071b      	lsls	r3, r3, #28
 8008880:	4925      	ldr	r1, [pc, #148]	@ (8008918 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008882:	4313      	orrs	r3, r2
 8008884:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008890:	2b00      	cmp	r3, #0
 8008892:	d011      	beq.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	019a      	lsls	r2, r3, #6
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	691b      	ldr	r3, [r3, #16]
 800889e:	041b      	lsls	r3, r3, #16
 80088a0:	431a      	orrs	r2, r3
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	061b      	lsls	r3, r3, #24
 80088a8:	431a      	orrs	r2, r3
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	071b      	lsls	r3, r3, #28
 80088b0:	4919      	ldr	r1, [pc, #100]	@ (8008918 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088b2:	4313      	orrs	r3, r2
 80088b4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80088b8:	4b17      	ldr	r3, [pc, #92]	@ (8008918 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a16      	ldr	r2, [pc, #88]	@ (8008918 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80088c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088c4:	f7f9 fd6e 	bl	80023a4 <HAL_GetTick>
 80088c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80088ca:	e008      	b.n	80088de <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80088cc:	f7f9 fd6a 	bl	80023a4 <HAL_GetTick>
 80088d0:	4602      	mov	r2, r0
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	1ad3      	subs	r3, r2, r3
 80088d6:	2b64      	cmp	r3, #100	@ 0x64
 80088d8:	d901      	bls.n	80088de <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088da:	2303      	movs	r3, #3
 80088dc:	e0d7      	b.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80088de:	4b0e      	ldr	r3, [pc, #56]	@ (8008918 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d0f0      	beq.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80088ea:	69bb      	ldr	r3, [r7, #24]
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	f040 80cd 	bne.w	8008a8c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80088f2:	4b09      	ldr	r3, [pc, #36]	@ (8008918 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a08      	ldr	r2, [pc, #32]	@ (8008918 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80088fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088fe:	f7f9 fd51 	bl	80023a4 <HAL_GetTick>
 8008902:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008904:	e00a      	b.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008906:	f7f9 fd4d 	bl	80023a4 <HAL_GetTick>
 800890a:	4602      	mov	r2, r0
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	1ad3      	subs	r3, r2, r3
 8008910:	2b64      	cmp	r3, #100	@ 0x64
 8008912:	d903      	bls.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008914:	2303      	movs	r3, #3
 8008916:	e0ba      	b.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008918:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800891c:	4b5e      	ldr	r3, [pc, #376]	@ (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008924:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008928:	d0ed      	beq.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008932:	2b00      	cmp	r3, #0
 8008934:	d003      	beq.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800893a:	2b00      	cmp	r3, #0
 800893c:	d009      	beq.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008946:	2b00      	cmp	r3, #0
 8008948:	d02e      	beq.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800894e:	2b00      	cmp	r3, #0
 8008950:	d12a      	bne.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008952:	4b51      	ldr	r3, [pc, #324]	@ (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008954:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008958:	0c1b      	lsrs	r3, r3, #16
 800895a:	f003 0303 	and.w	r3, r3, #3
 800895e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008960:	4b4d      	ldr	r3, [pc, #308]	@ (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008966:	0f1b      	lsrs	r3, r3, #28
 8008968:	f003 0307 	and.w	r3, r3, #7
 800896c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	695b      	ldr	r3, [r3, #20]
 8008972:	019a      	lsls	r2, r3, #6
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	041b      	lsls	r3, r3, #16
 8008978:	431a      	orrs	r2, r3
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	699b      	ldr	r3, [r3, #24]
 800897e:	061b      	lsls	r3, r3, #24
 8008980:	431a      	orrs	r2, r3
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	071b      	lsls	r3, r3, #28
 8008986:	4944      	ldr	r1, [pc, #272]	@ (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008988:	4313      	orrs	r3, r2
 800898a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800898e:	4b42      	ldr	r3, [pc, #264]	@ (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008990:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008994:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800899c:	3b01      	subs	r3, #1
 800899e:	021b      	lsls	r3, r3, #8
 80089a0:	493d      	ldr	r1, [pc, #244]	@ (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089a2:	4313      	orrs	r3, r2
 80089a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d022      	beq.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80089b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089bc:	d11d      	bne.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80089be:	4b36      	ldr	r3, [pc, #216]	@ (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089c4:	0e1b      	lsrs	r3, r3, #24
 80089c6:	f003 030f 	and.w	r3, r3, #15
 80089ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80089cc:	4b32      	ldr	r3, [pc, #200]	@ (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089d2:	0f1b      	lsrs	r3, r3, #28
 80089d4:	f003 0307 	and.w	r3, r3, #7
 80089d8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	695b      	ldr	r3, [r3, #20]
 80089de:	019a      	lsls	r2, r3, #6
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6a1b      	ldr	r3, [r3, #32]
 80089e4:	041b      	lsls	r3, r3, #16
 80089e6:	431a      	orrs	r2, r3
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	061b      	lsls	r3, r3, #24
 80089ec:	431a      	orrs	r2, r3
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	071b      	lsls	r3, r3, #28
 80089f2:	4929      	ldr	r1, [pc, #164]	@ (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089f4:	4313      	orrs	r3, r2
 80089f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f003 0308 	and.w	r3, r3, #8
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d028      	beq.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008a06:	4b24      	ldr	r3, [pc, #144]	@ (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a0c:	0e1b      	lsrs	r3, r3, #24
 8008a0e:	f003 030f 	and.w	r3, r3, #15
 8008a12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008a14:	4b20      	ldr	r3, [pc, #128]	@ (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a1a:	0c1b      	lsrs	r3, r3, #16
 8008a1c:	f003 0303 	and.w	r3, r3, #3
 8008a20:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	695b      	ldr	r3, [r3, #20]
 8008a26:	019a      	lsls	r2, r3, #6
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	041b      	lsls	r3, r3, #16
 8008a2c:	431a      	orrs	r2, r3
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	061b      	lsls	r3, r3, #24
 8008a32:	431a      	orrs	r2, r3
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	69db      	ldr	r3, [r3, #28]
 8008a38:	071b      	lsls	r3, r3, #28
 8008a3a:	4917      	ldr	r1, [pc, #92]	@ (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008a42:	4b15      	ldr	r3, [pc, #84]	@ (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a48:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a50:	4911      	ldr	r1, [pc, #68]	@ (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a52:	4313      	orrs	r3, r2
 8008a54:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008a58:	4b0f      	ldr	r3, [pc, #60]	@ (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a0e      	ldr	r2, [pc, #56]	@ (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a64:	f7f9 fc9e 	bl	80023a4 <HAL_GetTick>
 8008a68:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008a6a:	e008      	b.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008a6c:	f7f9 fc9a 	bl	80023a4 <HAL_GetTick>
 8008a70:	4602      	mov	r2, r0
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	1ad3      	subs	r3, r2, r3
 8008a76:	2b64      	cmp	r3, #100	@ 0x64
 8008a78:	d901      	bls.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a7a:	2303      	movs	r3, #3
 8008a7c:	e007      	b.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008a7e:	4b06      	ldr	r3, [pc, #24]	@ (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a8a:	d1ef      	bne.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008a8c:	2300      	movs	r3, #0
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3720      	adds	r7, #32
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop
 8008a98:	40023800 	.word	0x40023800

08008a9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d101      	bne.n	8008aae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	e09d      	b.n	8008bea <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d108      	bne.n	8008ac8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008abe:	d009      	beq.n	8008ad4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	61da      	str	r2, [r3, #28]
 8008ac6:	e005      	b.n	8008ad4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d106      	bne.n	8008af4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f7f8 fc18 	bl	8001324 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2202      	movs	r2, #2
 8008af8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008b0a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008b14:	d902      	bls.n	8008b1c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008b16:	2300      	movs	r3, #0
 8008b18:	60fb      	str	r3, [r7, #12]
 8008b1a:	e002      	b.n	8008b22 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008b1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008b20:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	68db      	ldr	r3, [r3, #12]
 8008b26:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008b2a:	d007      	beq.n	8008b3c <HAL_SPI_Init+0xa0>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008b34:	d002      	beq.n	8008b3c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008b4c:	431a      	orrs	r2, r3
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	691b      	ldr	r3, [r3, #16]
 8008b52:	f003 0302 	and.w	r3, r3, #2
 8008b56:	431a      	orrs	r2, r3
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	695b      	ldr	r3, [r3, #20]
 8008b5c:	f003 0301 	and.w	r3, r3, #1
 8008b60:	431a      	orrs	r2, r3
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	699b      	ldr	r3, [r3, #24]
 8008b66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b6a:	431a      	orrs	r2, r3
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	69db      	ldr	r3, [r3, #28]
 8008b70:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008b74:	431a      	orrs	r2, r3
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6a1b      	ldr	r3, [r3, #32]
 8008b7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b7e:	ea42 0103 	orr.w	r1, r2, r3
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b86:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	430a      	orrs	r2, r1
 8008b90:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	699b      	ldr	r3, [r3, #24]
 8008b96:	0c1b      	lsrs	r3, r3, #16
 8008b98:	f003 0204 	and.w	r2, r3, #4
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ba0:	f003 0310 	and.w	r3, r3, #16
 8008ba4:	431a      	orrs	r2, r3
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008baa:	f003 0308 	and.w	r3, r3, #8
 8008bae:	431a      	orrs	r2, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	68db      	ldr	r3, [r3, #12]
 8008bb4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008bb8:	ea42 0103 	orr.w	r1, r2, r3
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	430a      	orrs	r2, r1
 8008bc8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	69da      	ldr	r2, [r3, #28]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008bd8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2201      	movs	r2, #1
 8008be4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008be8:	2300      	movs	r3, #0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
	...

08008bf4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer  (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	60b9      	str	r1, [r7, #8]
 8008bfe:	4613      	mov	r3, r2
 8008c00:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d001      	beq.n	8008c12 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8008c0e:	2302      	movs	r3, #2
 8008c10:	e0d4      	b.n	8008dbc <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d002      	beq.n	8008c1e <HAL_SPI_Transmit_DMA+0x2a>
 8008c18:	88fb      	ldrh	r3, [r7, #6]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d101      	bne.n	8008c22 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e0cc      	b.n	8008dbc <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d101      	bne.n	8008c30 <HAL_SPI_Transmit_DMA+0x3c>
 8008c2c:	2302      	movs	r3, #2
 8008c2e:	e0c5      	b.n	8008dbc <HAL_SPI_Transmit_DMA+0x1c8>
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2201      	movs	r2, #1
 8008c34:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2203      	movs	r2, #3
 8008c3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2200      	movs	r2, #0
 8008c44:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	68ba      	ldr	r2, [r7, #8]
 8008c4a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	88fa      	ldrh	r2, [r7, #6]
 8008c50:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	88fa      	ldrh	r2, [r7, #6]
 8008c56:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2200      	movs	r2, #0
 8008c62:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2200      	movs	r2, #0
 8008c68:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2200      	movs	r2, #0
 8008c76:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c82:	d10f      	bne.n	8008ca4 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	681a      	ldr	r2, [r3, #0]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008c92:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008ca2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ca8:	4a46      	ldr	r2, [pc, #280]	@ (8008dc4 <HAL_SPI_Transmit_DMA+0x1d0>)
 8008caa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cb0:	4a45      	ldr	r2, [pc, #276]	@ (8008dc8 <HAL_SPI_Transmit_DMA+0x1d4>)
 8008cb2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cb8:	4a44      	ldr	r2, [pc, #272]	@ (8008dcc <HAL_SPI_Transmit_DMA+0x1d8>)
 8008cba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	651a      	str	r2, [r3, #80]	@ 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	685a      	ldr	r2, [r3, #4]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008cd2:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008cdc:	d82d      	bhi.n	8008d3a <HAL_SPI_Transmit_DMA+0x146>
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ce2:	699b      	ldr	r3, [r3, #24]
 8008ce4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ce8:	d127      	bne.n	8008d3a <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	f003 0301 	and.w	r3, r3, #1
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d10f      	bne.n	8008d18 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	685a      	ldr	r2, [r3, #4]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008d06:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	085b      	lsrs	r3, r3, #1
 8008d10:	b29a      	uxth	r2, r3
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008d16:	e010      	b.n	8008d3a <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	685a      	ldr	r2, [r3, #4]
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008d26:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	085b      	lsrs	r3, r3, #1
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	3301      	adds	r3, #1
 8008d34:	b29a      	uxth	r2, r3
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d42:	4619      	mov	r1, r3
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	330c      	adds	r3, #12
 8008d4a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d50:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008d52:	f7fa fb77 	bl	8003444 <HAL_DMA_Start_IT>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d00b      	beq.n	8008d74 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d60:	f043 0210 	orr.w	r2, r3, #16
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008d70:	2301      	movs	r3, #1
 8008d72:	e023      	b.n	8008dbc <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d7e:	2b40      	cmp	r3, #64	@ 0x40
 8008d80:	d007      	beq.n	8008d92 <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d90:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2200      	movs	r2, #0
 8008d96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	685a      	ldr	r2, [r3, #4]
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f042 0220 	orr.w	r2, r2, #32
 8008da8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	685a      	ldr	r2, [r3, #4]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f042 0202 	orr.w	r2, r2, #2
 8008db8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008dba:	2300      	movs	r3, #0
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3710      	adds	r7, #16
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}
 8008dc4:	08009765 	.word	0x08009765
 8008dc8:	08009581 	.word	0x08009581
 8008dcc:	080097b9 	.word	0x080097b9

08008dd0 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data elements (u8 or u16) to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	60b9      	str	r1, [r7, #8]
 8008dda:	4613      	mov	r3, r2
 8008ddc:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d001      	beq.n	8008dee <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 8008dea:	2302      	movs	r3, #2
 8008dec:	e105      	b.n	8008ffa <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d002      	beq.n	8008dfa <HAL_SPI_Receive_DMA+0x2a>
 8008df4:	88fb      	ldrh	r3, [r7, #6]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d101      	bne.n	8008dfe <HAL_SPI_Receive_DMA+0x2e>
  {
    return HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e0fd      	b.n	8008ffa <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d110      	bne.n	8008e28 <HAL_SPI_Receive_DMA+0x58>
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008e0e:	d10b      	bne.n	8008e28 <HAL_SPI_Receive_DMA+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2204      	movs	r2, #4
 8008e14:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8008e18:	88fb      	ldrh	r3, [r7, #6]
 8008e1a:	68ba      	ldr	r2, [r7, #8]
 8008e1c:	68b9      	ldr	r1, [r7, #8]
 8008e1e:	68f8      	ldr	r0, [r7, #12]
 8008e20:	f000 f8f6 	bl	8009010 <HAL_SPI_TransmitReceive_DMA>
 8008e24:	4603      	mov	r3, r0
 8008e26:	e0e8      	b.n	8008ffa <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d101      	bne.n	8008e36 <HAL_SPI_Receive_DMA+0x66>
 8008e32:	2302      	movs	r3, #2
 8008e34:	e0e1      	b.n	8008ffa <HAL_SPI_Receive_DMA+0x22a>
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2201      	movs	r2, #1
 8008e3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2204      	movs	r2, #4
 8008e42:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	68ba      	ldr	r2, [r7, #8]
 8008e50:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	88fa      	ldrh	r2, [r7, #6]
 8008e56:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	88fa      	ldrh	r2, [r7, #6]
 8008e5e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2200      	movs	r2, #0
 8008e66:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2200      	movs	r2, #0
 8008e72:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2200      	movs	r2, #0
 8008e78:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e82:	d10f      	bne.n	8008ea4 <HAL_SPI_Receive_DMA+0xd4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e92:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008ea2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	685a      	ldr	r2, [r3, #4]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008eb2:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008ebc:	d908      	bls.n	8008ed0 <HAL_SPI_Receive_DMA+0x100>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	685a      	ldr	r2, [r3, #4]
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008ecc:	605a      	str	r2, [r3, #4]
 8008ece:	e042      	b.n	8008f56 <HAL_SPI_Receive_DMA+0x186>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	685a      	ldr	r2, [r3, #4]
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008ede:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ee4:	699b      	ldr	r3, [r3, #24]
 8008ee6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008eea:	d134      	bne.n	8008f56 <HAL_SPI_Receive_DMA+0x186>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	685a      	ldr	r2, [r3, #4]
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008efa:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	f003 0301 	and.w	r3, r3, #1
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d111      	bne.n	8008f30 <HAL_SPI_Receive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	685a      	ldr	r2, [r3, #4]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008f1a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	085b      	lsrs	r3, r3, #1
 8008f26:	b29a      	uxth	r2, r3
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008f2e:	e012      	b.n	8008f56 <HAL_SPI_Receive_DMA+0x186>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	685a      	ldr	r2, [r3, #4]
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008f3e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	085b      	lsrs	r3, r3, #1
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	b29a      	uxth	r2, r3
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f5a:	4a2a      	ldr	r2, [pc, #168]	@ (8009004 <HAL_SPI_Receive_DMA+0x234>)
 8008f5c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f62:	4a29      	ldr	r2, [pc, #164]	@ (8009008 <HAL_SPI_Receive_DMA+0x238>)
 8008f64:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f6a:	4a28      	ldr	r2, [pc, #160]	@ (800900c <HAL_SPI_Receive_DMA+0x23c>)
 8008f6c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f72:	2200      	movs	r2, #0
 8008f74:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	330c      	adds	r3, #12
 8008f80:	4619      	mov	r1, r3
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f86:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f8e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008f90:	f7fa fa58 	bl	8003444 <HAL_DMA_Start_IT>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d00b      	beq.n	8008fb2 <HAL_SPI_Receive_DMA+0x1e2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f9e:	f043 0210 	orr.w	r2, r3, #16
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e023      	b.n	8008ffa <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fbc:	2b40      	cmp	r3, #64	@ 0x40
 8008fbe:	d007      	beq.n	8008fd0 <HAL_SPI_Receive_DMA+0x200>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008fce:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	685a      	ldr	r2, [r3, #4]
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f042 0220 	orr.w	r2, r2, #32
 8008fe6:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	685a      	ldr	r2, [r3, #4]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f042 0201 	orr.w	r2, r2, #1
 8008ff6:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008ff8:	2300      	movs	r3, #0
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	08009781 	.word	0x08009781
 8009008:	08009629 	.word	0x08009629
 800900c:	080097b9 	.word	0x080097b9

08009010 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b086      	sub	sp, #24
 8009014:	af00      	add	r7, sp, #0
 8009016:	60f8      	str	r0, [r7, #12]
 8009018:	60b9      	str	r1, [r7, #8]
 800901a:	607a      	str	r2, [r7, #4]
 800901c:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009024:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800902c:	7dfb      	ldrb	r3, [r7, #23]
 800902e:	2b01      	cmp	r3, #1
 8009030:	d00c      	beq.n	800904c <HAL_SPI_TransmitReceive_DMA+0x3c>
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009038:	d106      	bne.n	8009048 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d102      	bne.n	8009048 <HAL_SPI_TransmitReceive_DMA+0x38>
 8009042:	7dfb      	ldrb	r3, [r7, #23]
 8009044:	2b04      	cmp	r3, #4
 8009046:	d001      	beq.n	800904c <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8009048:	2302      	movs	r3, #2
 800904a:	e158      	b.n	80092fe <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d005      	beq.n	800905e <HAL_SPI_TransmitReceive_DMA+0x4e>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d002      	beq.n	800905e <HAL_SPI_TransmitReceive_DMA+0x4e>
 8009058:	887b      	ldrh	r3, [r7, #2]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d101      	bne.n	8009062 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 800905e:	2301      	movs	r3, #1
 8009060:	e14d      	b.n	80092fe <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009068:	2b01      	cmp	r3, #1
 800906a:	d101      	bne.n	8009070 <HAL_SPI_TransmitReceive_DMA+0x60>
 800906c:	2302      	movs	r3, #2
 800906e:	e146      	b.n	80092fe <HAL_SPI_TransmitReceive_DMA+0x2ee>
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2201      	movs	r2, #1
 8009074:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800907e:	b2db      	uxtb	r3, r3
 8009080:	2b04      	cmp	r3, #4
 8009082:	d003      	beq.n	800908c <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2205      	movs	r2, #5
 8009088:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2200      	movs	r2, #0
 8009090:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	68ba      	ldr	r2, [r7, #8]
 8009096:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	887a      	ldrh	r2, [r7, #2]
 800909c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	887a      	ldrh	r2, [r7, #2]
 80090a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	887a      	ldrh	r2, [r7, #2]
 80090ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	887a      	ldrh	r2, [r7, #2]
 80090b6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2200      	movs	r2, #0
 80090be:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2200      	movs	r2, #0
 80090c4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	685a      	ldr	r2, [r3, #4]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 80090d4:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	68db      	ldr	r3, [r3, #12]
 80090da:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80090de:	d908      	bls.n	80090f2 <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	685a      	ldr	r2, [r3, #4]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80090ee:	605a      	str	r2, [r3, #4]
 80090f0:	e06f      	b.n	80091d2 <HAL_SPI_TransmitReceive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	685a      	ldr	r2, [r3, #4]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009100:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009106:	699b      	ldr	r3, [r3, #24]
 8009108:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800910c:	d126      	bne.n	800915c <HAL_SPI_TransmitReceive_DMA+0x14c>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8009112:	f003 0301 	and.w	r3, r3, #1
 8009116:	2b00      	cmp	r3, #0
 8009118:	d10f      	bne.n	800913a <HAL_SPI_TransmitReceive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	685a      	ldr	r2, [r3, #4]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009128:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800912e:	b29b      	uxth	r3, r3
 8009130:	085b      	lsrs	r3, r3, #1
 8009132:	b29a      	uxth	r2, r3
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009138:	e010      	b.n	800915c <HAL_SPI_TransmitReceive_DMA+0x14c>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	685a      	ldr	r2, [r3, #4]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009148:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800914e:	b29b      	uxth	r3, r3
 8009150:	085b      	lsrs	r3, r3, #1
 8009152:	b29b      	uxth	r3, r3
 8009154:	3301      	adds	r3, #1
 8009156:	b29a      	uxth	r2, r3
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009160:	699b      	ldr	r3, [r3, #24]
 8009162:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009166:	d134      	bne.n	80091d2 <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	685a      	ldr	r2, [r3, #4]
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009176:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800917e:	b29b      	uxth	r3, r3
 8009180:	f003 0301 	and.w	r3, r3, #1
 8009184:	2b00      	cmp	r3, #0
 8009186:	d111      	bne.n	80091ac <HAL_SPI_TransmitReceive_DMA+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	685a      	ldr	r2, [r3, #4]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009196:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800919e:	b29b      	uxth	r3, r3
 80091a0:	085b      	lsrs	r3, r3, #1
 80091a2:	b29a      	uxth	r2, r3
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80091aa:	e012      	b.n	80091d2 <HAL_SPI_TransmitReceive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	685a      	ldr	r2, [r3, #4]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80091ba:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	085b      	lsrs	r3, r3, #1
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	3301      	adds	r3, #1
 80091ca:	b29a      	uxth	r2, r3
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	2b04      	cmp	r3, #4
 80091dc:	d108      	bne.n	80091f0 <HAL_SPI_TransmitReceive_DMA+0x1e0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091e2:	4a49      	ldr	r2, [pc, #292]	@ (8009308 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 80091e4:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091ea:	4a48      	ldr	r2, [pc, #288]	@ (800930c <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 80091ec:	63da      	str	r2, [r3, #60]	@ 0x3c
 80091ee:	e007      	b.n	8009200 <HAL_SPI_TransmitReceive_DMA+0x1f0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091f4:	4a46      	ldr	r2, [pc, #280]	@ (8009310 <HAL_SPI_TransmitReceive_DMA+0x300>)
 80091f6:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091fc:	4a45      	ldr	r2, [pc, #276]	@ (8009314 <HAL_SPI_TransmitReceive_DMA+0x304>)
 80091fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009204:	4a44      	ldr	r2, [pc, #272]	@ (8009318 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8009206:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800920c:	2200      	movs	r2, #0
 800920e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	330c      	adds	r3, #12
 800921a:	4619      	mov	r1, r3
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009220:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009228:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800922a:	f7fa f90b 	bl	8003444 <HAL_DMA_Start_IT>
 800922e:	4603      	mov	r3, r0
 8009230:	2b00      	cmp	r3, #0
 8009232:	d00b      	beq.n	800924c <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009238:	f043 0210 	orr.w	r2, r3, #16
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2200      	movs	r2, #0
 8009244:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8009248:	2301      	movs	r3, #1
 800924a:	e058      	b.n	80092fe <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	685a      	ldr	r2, [r3, #4]
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f042 0201 	orr.w	r2, r2, #1
 800925a:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009260:	2200      	movs	r2, #0
 8009262:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009268:	2200      	movs	r2, #0
 800926a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009270:	2200      	movs	r2, #0
 8009272:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009278:	2200      	movs	r2, #0
 800927a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009284:	4619      	mov	r1, r3
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	330c      	adds	r3, #12
 800928c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009292:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009294:	f7fa f8d6 	bl	8003444 <HAL_DMA_Start_IT>
 8009298:	4603      	mov	r3, r0
 800929a:	2b00      	cmp	r3, #0
 800929c:	d00b      	beq.n	80092b6 <HAL_SPI_TransmitReceive_DMA+0x2a6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092a2:	f043 0210 	orr.w	r2, r3, #16
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2200      	movs	r2, #0
 80092ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	e023      	b.n	80092fe <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092c0:	2b40      	cmp	r3, #64	@ 0x40
 80092c2:	d007      	beq.n	80092d4 <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80092d2:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2200      	movs	r2, #0
 80092d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	685a      	ldr	r2, [r3, #4]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f042 0220 	orr.w	r2, r2, #32
 80092ea:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	685a      	ldr	r2, [r3, #4]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f042 0202 	orr.w	r2, r2, #2
 80092fa:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80092fc:	2300      	movs	r3, #0
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3718      	adds	r7, #24
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
 8009306:	bf00      	nop
 8009308:	08009781 	.word	0x08009781
 800930c:	08009629 	.word	0x08009629
 8009310:	0800979d 	.word	0x0800979d
 8009314:	080096d3 	.word	0x080096d3
 8009318:	080097b9 	.word	0x080097b9

0800931c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b088      	sub	sp, #32
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009334:	69bb      	ldr	r3, [r7, #24]
 8009336:	099b      	lsrs	r3, r3, #6
 8009338:	f003 0301 	and.w	r3, r3, #1
 800933c:	2b00      	cmp	r3, #0
 800933e:	d10f      	bne.n	8009360 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009346:	2b00      	cmp	r3, #0
 8009348:	d00a      	beq.n	8009360 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800934a:	69fb      	ldr	r3, [r7, #28]
 800934c:	099b      	lsrs	r3, r3, #6
 800934e:	f003 0301 	and.w	r3, r3, #1
 8009352:	2b00      	cmp	r3, #0
 8009354:	d004      	beq.n	8009360 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	4798      	blx	r3
    return;
 800935e:	e0d7      	b.n	8009510 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	085b      	lsrs	r3, r3, #1
 8009364:	f003 0301 	and.w	r3, r3, #1
 8009368:	2b00      	cmp	r3, #0
 800936a:	d00a      	beq.n	8009382 <HAL_SPI_IRQHandler+0x66>
 800936c:	69fb      	ldr	r3, [r7, #28]
 800936e:	09db      	lsrs	r3, r3, #7
 8009370:	f003 0301 	and.w	r3, r3, #1
 8009374:	2b00      	cmp	r3, #0
 8009376:	d004      	beq.n	8009382 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	4798      	blx	r3
    return;
 8009380:	e0c6      	b.n	8009510 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	095b      	lsrs	r3, r3, #5
 8009386:	f003 0301 	and.w	r3, r3, #1
 800938a:	2b00      	cmp	r3, #0
 800938c:	d10c      	bne.n	80093a8 <HAL_SPI_IRQHandler+0x8c>
 800938e:	69bb      	ldr	r3, [r7, #24]
 8009390:	099b      	lsrs	r3, r3, #6
 8009392:	f003 0301 	and.w	r3, r3, #1
 8009396:	2b00      	cmp	r3, #0
 8009398:	d106      	bne.n	80093a8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800939a:	69bb      	ldr	r3, [r7, #24]
 800939c:	0a1b      	lsrs	r3, r3, #8
 800939e:	f003 0301 	and.w	r3, r3, #1
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	f000 80b4 	beq.w	8009510 <HAL_SPI_IRQHandler+0x1f4>
 80093a8:	69fb      	ldr	r3, [r7, #28]
 80093aa:	095b      	lsrs	r3, r3, #5
 80093ac:	f003 0301 	and.w	r3, r3, #1
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	f000 80ad 	beq.w	8009510 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80093b6:	69bb      	ldr	r3, [r7, #24]
 80093b8:	099b      	lsrs	r3, r3, #6
 80093ba:	f003 0301 	and.w	r3, r3, #1
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d023      	beq.n	800940a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80093c8:	b2db      	uxtb	r3, r3
 80093ca:	2b03      	cmp	r3, #3
 80093cc:	d011      	beq.n	80093f2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093d2:	f043 0204 	orr.w	r2, r3, #4
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80093da:	2300      	movs	r3, #0
 80093dc:	617b      	str	r3, [r7, #20]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	68db      	ldr	r3, [r3, #12]
 80093e4:	617b      	str	r3, [r7, #20]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	617b      	str	r3, [r7, #20]
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	e00b      	b.n	800940a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80093f2:	2300      	movs	r3, #0
 80093f4:	613b      	str	r3, [r7, #16]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	613b      	str	r3, [r7, #16]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	689b      	ldr	r3, [r3, #8]
 8009404:	613b      	str	r3, [r7, #16]
 8009406:	693b      	ldr	r3, [r7, #16]
        return;
 8009408:	e082      	b.n	8009510 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800940a:	69bb      	ldr	r3, [r7, #24]
 800940c:	095b      	lsrs	r3, r3, #5
 800940e:	f003 0301 	and.w	r3, r3, #1
 8009412:	2b00      	cmp	r3, #0
 8009414:	d014      	beq.n	8009440 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800941a:	f043 0201 	orr.w	r2, r3, #1
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009422:	2300      	movs	r3, #0
 8009424:	60fb      	str	r3, [r7, #12]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	689b      	ldr	r3, [r3, #8]
 800942c:	60fb      	str	r3, [r7, #12]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800943c:	601a      	str	r2, [r3, #0]
 800943e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009440:	69bb      	ldr	r3, [r7, #24]
 8009442:	0a1b      	lsrs	r3, r3, #8
 8009444:	f003 0301 	and.w	r3, r3, #1
 8009448:	2b00      	cmp	r3, #0
 800944a:	d00c      	beq.n	8009466 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009450:	f043 0208 	orr.w	r2, r3, #8
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009458:	2300      	movs	r3, #0
 800945a:	60bb      	str	r3, [r7, #8]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	60bb      	str	r3, [r7, #8]
 8009464:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800946a:	2b00      	cmp	r3, #0
 800946c:	d04f      	beq.n	800950e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	685a      	ldr	r2, [r3, #4]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800947c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2201      	movs	r2, #1
 8009482:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009486:	69fb      	ldr	r3, [r7, #28]
 8009488:	f003 0302 	and.w	r3, r3, #2
 800948c:	2b00      	cmp	r3, #0
 800948e:	d104      	bne.n	800949a <HAL_SPI_IRQHandler+0x17e>
 8009490:	69fb      	ldr	r3, [r7, #28]
 8009492:	f003 0301 	and.w	r3, r3, #1
 8009496:	2b00      	cmp	r3, #0
 8009498:	d034      	beq.n	8009504 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	685a      	ldr	r2, [r3, #4]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f022 0203 	bic.w	r2, r2, #3
 80094a8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d011      	beq.n	80094d6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094b6:	4a18      	ldr	r2, [pc, #96]	@ (8009518 <HAL_SPI_IRQHandler+0x1fc>)
 80094b8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094be:	4618      	mov	r0, r3
 80094c0:	f7fa f890 	bl	80035e4 <HAL_DMA_Abort_IT>
 80094c4:	4603      	mov	r3, r0
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d005      	beq.n	80094d6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094ce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d016      	beq.n	800950c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094e2:	4a0d      	ldr	r2, [pc, #52]	@ (8009518 <HAL_SPI_IRQHandler+0x1fc>)
 80094e4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7fa f87a 	bl	80035e4 <HAL_DMA_Abort_IT>
 80094f0:	4603      	mov	r3, r0
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d00a      	beq.n	800950c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094fa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8009502:	e003      	b.n	800950c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 f831 	bl	800956c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800950a:	e000      	b.n	800950e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800950c:	bf00      	nop
    return;
 800950e:	bf00      	nop
  }
}
 8009510:	3720      	adds	r7, #32
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	080097f9 	.word	0x080097f9

0800951c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009524:	bf00      	nop
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009538:	bf00      	nop
 800953a:	370c      	adds	r7, #12
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800954c:	bf00      	nop
 800954e:	370c      	adds	r7, #12
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr

08009558 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8009560:	bf00      	nop
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800956c:	b480      	push	{r7}
 800956e:	b083      	sub	sp, #12
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009574:	bf00      	nop
 8009576:	370c      	adds	r7, #12
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr

08009580 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b086      	sub	sp, #24
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800958c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800958e:	f7f8 ff09 	bl	80023a4 <HAL_GetTick>
 8009592:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800959e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095a2:	d03b      	beq.n	800961c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	685a      	ldr	r2, [r3, #4]
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f022 0220 	bic.w	r2, r2, #32
 80095b2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	685a      	ldr	r2, [r3, #4]
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f022 0202 	bic.w	r2, r2, #2
 80095c2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80095c4:	693a      	ldr	r2, [r7, #16]
 80095c6:	2164      	movs	r1, #100	@ 0x64
 80095c8:	6978      	ldr	r0, [r7, #20]
 80095ca:	f000 fac5 	bl	8009b58 <SPI_EndRxTxTransaction>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d005      	beq.n	80095e0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095d8:	f043 0220 	orr.w	r2, r3, #32
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d10a      	bne.n	80095fe <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80095e8:	2300      	movs	r3, #0
 80095ea:	60fb      	str	r3, [r7, #12]
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	60fb      	str	r3, [r7, #12]
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	689b      	ldr	r3, [r3, #8]
 80095fa:	60fb      	str	r3, [r7, #12]
 80095fc:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	2200      	movs	r2, #0
 8009602:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	2201      	movs	r2, #1
 8009608:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009610:	2b00      	cmp	r3, #0
 8009612:	d003      	beq.n	800961c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009614:	6978      	ldr	r0, [r7, #20]
 8009616:	f7ff ffa9 	bl	800956c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800961a:	e002      	b.n	8009622 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800961c:	6978      	ldr	r0, [r7, #20]
 800961e:	f016 fced 	bl	801fffc <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009622:	3718      	adds	r7, #24
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009634:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009636:	f7f8 feb5 	bl	80023a4 <HAL_GetTick>
 800963a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009646:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800964a:	d03c      	beq.n	80096c6 <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	685a      	ldr	r2, [r3, #4]
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f022 0220 	bic.w	r2, r2, #32
 800965a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	689b      	ldr	r3, [r3, #8]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d10d      	bne.n	8009680 <SPI_DMAReceiveCplt+0x58>
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800966c:	d108      	bne.n	8009680 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	685a      	ldr	r2, [r3, #4]
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f022 0203 	bic.w	r2, r2, #3
 800967c:	605a      	str	r2, [r3, #4]
 800967e:	e007      	b.n	8009690 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	685a      	ldr	r2, [r3, #4]
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f022 0201 	bic.w	r2, r2, #1
 800968e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009690:	68ba      	ldr	r2, [r7, #8]
 8009692:	2164      	movs	r1, #100	@ 0x64
 8009694:	68f8      	ldr	r0, [r7, #12]
 8009696:	f000 f9e3 	bl	8009a60 <SPI_EndRxTransaction>
 800969a:	4603      	mov	r3, r0
 800969c:	2b00      	cmp	r3, #0
 800969e:	d002      	beq.n	80096a6 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2220      	movs	r2, #32
 80096a4:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2200      	movs	r2, #0
 80096aa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2201      	movs	r2, #1
 80096b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d003      	beq.n	80096c6 <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80096be:	68f8      	ldr	r0, [r7, #12]
 80096c0:	f7ff ff54 	bl	800956c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80096c4:	e002      	b.n	80096cc <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80096c6:	68f8      	ldr	r0, [r7, #12]
 80096c8:	f016 fcba 	bl	8020040 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80096cc:	3710      	adds	r7, #16
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}

080096d2 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80096d2:	b580      	push	{r7, lr}
 80096d4:	b084      	sub	sp, #16
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096de:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80096e0:	f7f8 fe60 	bl	80023a4 <HAL_GetTick>
 80096e4:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096f4:	d030      	beq.n	8009758 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	685a      	ldr	r2, [r3, #4]
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f022 0220 	bic.w	r2, r2, #32
 8009704:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009706:	68ba      	ldr	r2, [r7, #8]
 8009708:	2164      	movs	r1, #100	@ 0x64
 800970a:	68f8      	ldr	r0, [r7, #12]
 800970c:	f000 fa24 	bl	8009b58 <SPI_EndRxTxTransaction>
 8009710:	4603      	mov	r3, r0
 8009712:	2b00      	cmp	r3, #0
 8009714:	d005      	beq.n	8009722 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800971a:	f043 0220 	orr.w	r2, r3, #32
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	685a      	ldr	r2, [r3, #4]
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f022 0203 	bic.w	r2, r2, #3
 8009730:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2200      	movs	r2, #0
 8009736:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2200      	movs	r2, #0
 800973c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2201      	movs	r2, #1
 8009744:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800974c:	2b00      	cmp	r3, #0
 800974e:	d003      	beq.n	8009758 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009750:	68f8      	ldr	r0, [r7, #12]
 8009752:	f7ff ff0b 	bl	800956c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009756:	e002      	b.n	800975e <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8009758:	68f8      	ldr	r0, [r7, #12]
 800975a:	f7ff fedf 	bl	800951c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800975e:	3710      	adds	r7, #16
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009770:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8009772:	68f8      	ldr	r0, [r7, #12]
 8009774:	f7ff fedc 	bl	8009530 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009778:	bf00      	nop
 800977a:	3710      	adds	r7, #16
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800978c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800978e:	68f8      	ldr	r0, [r7, #12]
 8009790:	f7ff fed8 	bl	8009544 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009794:	bf00      	nop
 8009796:	3710      	adds	r7, #16
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097a8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80097aa:	68f8      	ldr	r0, [r7, #12]
 80097ac:	f7ff fed4 	bl	8009558 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80097b0:	bf00      	nop
 80097b2:	3710      	adds	r7, #16
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097c4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	685a      	ldr	r2, [r3, #4]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f022 0203 	bic.w	r2, r2, #3
 80097d4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097da:	f043 0210 	orr.w	r2, r3, #16
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2201      	movs	r2, #1
 80097e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80097ea:	68f8      	ldr	r0, [r7, #12]
 80097ec:	f7ff febe 	bl	800956c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80097f0:	bf00      	nop
 80097f2:	3710      	adds	r7, #16
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}

080097f8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009804:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2200      	movs	r2, #0
 800980a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2200      	movs	r2, #0
 8009812:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009814:	68f8      	ldr	r0, [r7, #12]
 8009816:	f7ff fea9 	bl	800956c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800981a:	bf00      	nop
 800981c:	3710      	adds	r7, #16
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
	...

08009824 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b088      	sub	sp, #32
 8009828:	af00      	add	r7, sp, #0
 800982a:	60f8      	str	r0, [r7, #12]
 800982c:	60b9      	str	r1, [r7, #8]
 800982e:	603b      	str	r3, [r7, #0]
 8009830:	4613      	mov	r3, r2
 8009832:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009834:	f7f8 fdb6 	bl	80023a4 <HAL_GetTick>
 8009838:	4602      	mov	r2, r0
 800983a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800983c:	1a9b      	subs	r3, r3, r2
 800983e:	683a      	ldr	r2, [r7, #0]
 8009840:	4413      	add	r3, r2
 8009842:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009844:	f7f8 fdae 	bl	80023a4 <HAL_GetTick>
 8009848:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800984a:	4b39      	ldr	r3, [pc, #228]	@ (8009930 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	015b      	lsls	r3, r3, #5
 8009850:	0d1b      	lsrs	r3, r3, #20
 8009852:	69fa      	ldr	r2, [r7, #28]
 8009854:	fb02 f303 	mul.w	r3, r2, r3
 8009858:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800985a:	e055      	b.n	8009908 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009862:	d051      	beq.n	8009908 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009864:	f7f8 fd9e 	bl	80023a4 <HAL_GetTick>
 8009868:	4602      	mov	r2, r0
 800986a:	69bb      	ldr	r3, [r7, #24]
 800986c:	1ad3      	subs	r3, r2, r3
 800986e:	69fa      	ldr	r2, [r7, #28]
 8009870:	429a      	cmp	r2, r3
 8009872:	d902      	bls.n	800987a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d13d      	bne.n	80098f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	685a      	ldr	r2, [r3, #4]
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009888:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009892:	d111      	bne.n	80098b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800989c:	d004      	beq.n	80098a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	689b      	ldr	r3, [r3, #8]
 80098a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098a6:	d107      	bne.n	80098b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80098b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098c0:	d10f      	bne.n	80098e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80098d0:	601a      	str	r2, [r3, #0]
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80098e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2201      	movs	r2, #1
 80098e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2200      	movs	r2, #0
 80098ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80098f2:	2303      	movs	r3, #3
 80098f4:	e018      	b.n	8009928 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d102      	bne.n	8009902 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80098fc:	2300      	movs	r3, #0
 80098fe:	61fb      	str	r3, [r7, #28]
 8009900:	e002      	b.n	8009908 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	3b01      	subs	r3, #1
 8009906:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	689a      	ldr	r2, [r3, #8]
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	4013      	ands	r3, r2
 8009912:	68ba      	ldr	r2, [r7, #8]
 8009914:	429a      	cmp	r2, r3
 8009916:	bf0c      	ite	eq
 8009918:	2301      	moveq	r3, #1
 800991a:	2300      	movne	r3, #0
 800991c:	b2db      	uxtb	r3, r3
 800991e:	461a      	mov	r2, r3
 8009920:	79fb      	ldrb	r3, [r7, #7]
 8009922:	429a      	cmp	r2, r3
 8009924:	d19a      	bne.n	800985c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8009926:	2300      	movs	r3, #0
}
 8009928:	4618      	mov	r0, r3
 800992a:	3720      	adds	r7, #32
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}
 8009930:	20000000 	.word	0x20000000

08009934 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b08a      	sub	sp, #40	@ 0x28
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	607a      	str	r2, [r7, #4]
 8009940:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009942:	2300      	movs	r3, #0
 8009944:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009946:	f7f8 fd2d 	bl	80023a4 <HAL_GetTick>
 800994a:	4602      	mov	r2, r0
 800994c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800994e:	1a9b      	subs	r3, r3, r2
 8009950:	683a      	ldr	r2, [r7, #0]
 8009952:	4413      	add	r3, r2
 8009954:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009956:	f7f8 fd25 	bl	80023a4 <HAL_GetTick>
 800995a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	330c      	adds	r3, #12
 8009962:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009964:	4b3d      	ldr	r3, [pc, #244]	@ (8009a5c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	4613      	mov	r3, r2
 800996a:	009b      	lsls	r3, r3, #2
 800996c:	4413      	add	r3, r2
 800996e:	00da      	lsls	r2, r3, #3
 8009970:	1ad3      	subs	r3, r2, r3
 8009972:	0d1b      	lsrs	r3, r3, #20
 8009974:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009976:	fb02 f303 	mul.w	r3, r2, r3
 800997a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800997c:	e061      	b.n	8009a42 <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009984:	d107      	bne.n	8009996 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d104      	bne.n	8009996 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800998c:	69fb      	ldr	r3, [r7, #28]
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	b2db      	uxtb	r3, r3
 8009992:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009994:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800999c:	d051      	beq.n	8009a42 <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800999e:	f7f8 fd01 	bl	80023a4 <HAL_GetTick>
 80099a2:	4602      	mov	r2, r0
 80099a4:	6a3b      	ldr	r3, [r7, #32]
 80099a6:	1ad3      	subs	r3, r2, r3
 80099a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d902      	bls.n	80099b4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80099ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d13d      	bne.n	8009a30 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	685a      	ldr	r2, [r3, #4]
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80099c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80099cc:	d111      	bne.n	80099f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	689b      	ldr	r3, [r3, #8]
 80099d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099d6:	d004      	beq.n	80099e2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099e0:	d107      	bne.n	80099f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80099f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099fa:	d10f      	bne.n	8009a1c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	681a      	ldr	r2, [r3, #0]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009a0a:	601a      	str	r2, [r3, #0]
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	681a      	ldr	r2, [r3, #0]
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009a1a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2201      	movs	r2, #1
 8009a20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2200      	movs	r2, #0
 8009a28:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009a2c:	2303      	movs	r3, #3
 8009a2e:	e011      	b.n	8009a54 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009a30:	69bb      	ldr	r3, [r7, #24]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d102      	bne.n	8009a3c <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 8009a36:	2300      	movs	r3, #0
 8009a38:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a3a:	e002      	b.n	8009a42 <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 8009a3c:	69bb      	ldr	r3, [r7, #24]
 8009a3e:	3b01      	subs	r3, #1
 8009a40:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	689a      	ldr	r2, [r3, #8]
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	4013      	ands	r3, r2
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d195      	bne.n	800997e <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 8009a52:	2300      	movs	r3, #0
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3728      	adds	r7, #40	@ 0x28
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}
 8009a5c:	20000000 	.word	0x20000000

08009a60 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b088      	sub	sp, #32
 8009a64:	af02      	add	r7, sp, #8
 8009a66:	60f8      	str	r0, [r7, #12]
 8009a68:	60b9      	str	r1, [r7, #8]
 8009a6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009a74:	d111      	bne.n	8009a9a <SPI_EndRxTransaction+0x3a>
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	689b      	ldr	r3, [r3, #8]
 8009a7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a7e:	d004      	beq.n	8009a8a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	689b      	ldr	r3, [r3, #8]
 8009a84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a88:	d107      	bne.n	8009a9a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009a98:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	685b      	ldr	r3, [r3, #4]
 8009a9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009aa2:	d112      	bne.n	8009aca <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	9300      	str	r3, [sp, #0]
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	2180      	movs	r1, #128	@ 0x80
 8009aae:	68f8      	ldr	r0, [r7, #12]
 8009ab0:	f7ff feb8 	bl	8009824 <SPI_WaitFlagStateUntilTimeout>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d021      	beq.n	8009afe <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009abe:	f043 0220 	orr.w	r2, r3, #32
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009ac6:	2303      	movs	r3, #3
 8009ac8:	e03d      	b.n	8009b46 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in us */
    count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009aca:	4b21      	ldr	r3, [pc, #132]	@ (8009b50 <SPI_EndRxTransaction+0xf0>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4a21      	ldr	r2, [pc, #132]	@ (8009b54 <SPI_EndRxTransaction+0xf4>)
 8009ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ad4:	0d5b      	lsrs	r3, r3, #21
 8009ad6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009ada:	fb02 f303 	mul.w	r3, r2, r3
 8009ade:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d00a      	beq.n	8009afc <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009af6:	2b80      	cmp	r3, #128	@ 0x80
 8009af8:	d0f2      	beq.n	8009ae0 <SPI_EndRxTransaction+0x80>
 8009afa:	e000      	b.n	8009afe <SPI_EndRxTransaction+0x9e>
        break;
 8009afc:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009b06:	d11d      	bne.n	8009b44 <SPI_EndRxTransaction+0xe4>
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	689b      	ldr	r3, [r3, #8]
 8009b0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b10:	d004      	beq.n	8009b1c <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	689b      	ldr	r3, [r3, #8]
 8009b16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b1a:	d113      	bne.n	8009b44 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	9300      	str	r3, [sp, #0]
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	2200      	movs	r2, #0
 8009b24:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009b28:	68f8      	ldr	r0, [r7, #12]
 8009b2a:	f7ff ff03 	bl	8009934 <SPI_WaitFifoStateUntilTimeout>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d007      	beq.n	8009b44 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b38:	f043 0220 	orr.w	r2, r3, #32
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009b40:	2303      	movs	r3, #3
 8009b42:	e000      	b.n	8009b46 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8009b44:	2300      	movs	r3, #0
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3718      	adds	r7, #24
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	bf00      	nop
 8009b50:	20000000 	.word	0x20000000
 8009b54:	165e9f81 	.word	0x165e9f81

08009b58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b088      	sub	sp, #32
 8009b5c:	af02      	add	r7, sp, #8
 8009b5e:	60f8      	str	r0, [r7, #12]
 8009b60:	60b9      	str	r1, [r7, #8]
 8009b62:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	9300      	str	r3, [sp, #0]
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009b70:	68f8      	ldr	r0, [r7, #12]
 8009b72:	f7ff fedf 	bl	8009934 <SPI_WaitFifoStateUntilTimeout>
 8009b76:	4603      	mov	r3, r0
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d007      	beq.n	8009b8c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b80:	f043 0220 	orr.w	r2, r3, #32
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009b88:	2303      	movs	r3, #3
 8009b8a:	e046      	b.n	8009c1a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009b8c:	4b25      	ldr	r3, [pc, #148]	@ (8009c24 <SPI_EndRxTxTransaction+0xcc>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4a25      	ldr	r2, [pc, #148]	@ (8009c28 <SPI_EndRxTxTransaction+0xd0>)
 8009b92:	fba2 2303 	umull	r2, r3, r2, r3
 8009b96:	0d5b      	lsrs	r3, r3, #21
 8009b98:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009b9c:	fb02 f303 	mul.w	r3, r2, r3
 8009ba0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009baa:	d112      	bne.n	8009bd2 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	9300      	str	r3, [sp, #0]
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	2180      	movs	r1, #128	@ 0x80
 8009bb6:	68f8      	ldr	r0, [r7, #12]
 8009bb8:	f7ff fe34 	bl	8009824 <SPI_WaitFlagStateUntilTimeout>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d016      	beq.n	8009bf0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bc6:	f043 0220 	orr.w	r2, r3, #32
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009bce:	2303      	movs	r3, #3
 8009bd0:	e023      	b.n	8009c1a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d00a      	beq.n	8009bee <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	3b01      	subs	r3, #1
 8009bdc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	689b      	ldr	r3, [r3, #8]
 8009be4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009be8:	2b80      	cmp	r3, #128	@ 0x80
 8009bea:	d0f2      	beq.n	8009bd2 <SPI_EndRxTxTransaction+0x7a>
 8009bec:	e000      	b.n	8009bf0 <SPI_EndRxTxTransaction+0x98>
        break;
 8009bee:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	9300      	str	r3, [sp, #0]
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009bfc:	68f8      	ldr	r0, [r7, #12]
 8009bfe:	f7ff fe99 	bl	8009934 <SPI_WaitFifoStateUntilTimeout>
 8009c02:	4603      	mov	r3, r0
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d007      	beq.n	8009c18 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c0c:	f043 0220 	orr.w	r2, r3, #32
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009c14:	2303      	movs	r3, #3
 8009c16:	e000      	b.n	8009c1a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8009c18:	2300      	movs	r3, #0
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3718      	adds	r7, #24
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	20000000 	.word	0x20000000
 8009c28:	165e9f81 	.word	0x165e9f81

08009c2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d101      	bne.n	8009c3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	e049      	b.n	8009cd2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c44:	b2db      	uxtb	r3, r3
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d106      	bne.n	8009c58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f7f7 ffd0 	bl	8001bf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2202      	movs	r2, #2
 8009c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	3304      	adds	r3, #4
 8009c68:	4619      	mov	r1, r3
 8009c6a:	4610      	mov	r0, r2
 8009c6c:	f000 fb40 	bl	800a2f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2201      	movs	r2, #1
 8009c74:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2201      	movs	r2, #1
 8009c84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2201      	movs	r2, #1
 8009c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2201      	movs	r2, #1
 8009cac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009cd0:	2300      	movs	r3, #0
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3708      	adds	r7, #8
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
	...

08009cdc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b085      	sub	sp, #20
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009cea:	b2db      	uxtb	r3, r3
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d001      	beq.n	8009cf4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	e04c      	b.n	8009d8e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2202      	movs	r2, #2
 8009cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a26      	ldr	r2, [pc, #152]	@ (8009d9c <HAL_TIM_Base_Start+0xc0>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d022      	beq.n	8009d4c <HAL_TIM_Base_Start+0x70>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d0e:	d01d      	beq.n	8009d4c <HAL_TIM_Base_Start+0x70>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a22      	ldr	r2, [pc, #136]	@ (8009da0 <HAL_TIM_Base_Start+0xc4>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d018      	beq.n	8009d4c <HAL_TIM_Base_Start+0x70>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a21      	ldr	r2, [pc, #132]	@ (8009da4 <HAL_TIM_Base_Start+0xc8>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d013      	beq.n	8009d4c <HAL_TIM_Base_Start+0x70>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4a1f      	ldr	r2, [pc, #124]	@ (8009da8 <HAL_TIM_Base_Start+0xcc>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d00e      	beq.n	8009d4c <HAL_TIM_Base_Start+0x70>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a1e      	ldr	r2, [pc, #120]	@ (8009dac <HAL_TIM_Base_Start+0xd0>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d009      	beq.n	8009d4c <HAL_TIM_Base_Start+0x70>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4a1c      	ldr	r2, [pc, #112]	@ (8009db0 <HAL_TIM_Base_Start+0xd4>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d004      	beq.n	8009d4c <HAL_TIM_Base_Start+0x70>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4a1b      	ldr	r2, [pc, #108]	@ (8009db4 <HAL_TIM_Base_Start+0xd8>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d115      	bne.n	8009d78 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	689a      	ldr	r2, [r3, #8]
 8009d52:	4b19      	ldr	r3, [pc, #100]	@ (8009db8 <HAL_TIM_Base_Start+0xdc>)
 8009d54:	4013      	ands	r3, r2
 8009d56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2b06      	cmp	r3, #6
 8009d5c:	d015      	beq.n	8009d8a <HAL_TIM_Base_Start+0xae>
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d64:	d011      	beq.n	8009d8a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	681a      	ldr	r2, [r3, #0]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f042 0201 	orr.w	r2, r2, #1
 8009d74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d76:	e008      	b.n	8009d8a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f042 0201 	orr.w	r2, r2, #1
 8009d86:	601a      	str	r2, [r3, #0]
 8009d88:	e000      	b.n	8009d8c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009d8c:	2300      	movs	r3, #0
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3714      	adds	r7, #20
 8009d92:	46bd      	mov	sp, r7
 8009d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d98:	4770      	bx	lr
 8009d9a:	bf00      	nop
 8009d9c:	40010000 	.word	0x40010000
 8009da0:	40000400 	.word	0x40000400
 8009da4:	40000800 	.word	0x40000800
 8009da8:	40000c00 	.word	0x40000c00
 8009dac:	40010400 	.word	0x40010400
 8009db0:	40014000 	.word	0x40014000
 8009db4:	40001800 	.word	0x40001800
 8009db8:	00010007 	.word	0x00010007

08009dbc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b083      	sub	sp, #12
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	6a1a      	ldr	r2, [r3, #32]
 8009dca:	4b0f      	ldr	r3, [pc, #60]	@ (8009e08 <HAL_TIM_Base_Stop+0x4c>)
 8009dcc:	4013      	ands	r3, r2
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d10f      	bne.n	8009df2 <HAL_TIM_Base_Stop+0x36>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	6a1a      	ldr	r2, [r3, #32]
 8009dd8:	f240 4344 	movw	r3, #1092	@ 0x444
 8009ddc:	4013      	ands	r3, r2
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d107      	bne.n	8009df2 <HAL_TIM_Base_Stop+0x36>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f022 0201 	bic.w	r2, r2, #1
 8009df0:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2201      	movs	r2, #1
 8009df6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8009dfa:	2300      	movs	r3, #0
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	370c      	adds	r7, #12
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr
 8009e08:	00111111 	.word	0x00111111

08009e0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b085      	sub	sp, #20
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e1a:	b2db      	uxtb	r3, r3
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d001      	beq.n	8009e24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009e20:	2301      	movs	r3, #1
 8009e22:	e054      	b.n	8009ece <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2202      	movs	r2, #2
 8009e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	68da      	ldr	r2, [r3, #12]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f042 0201 	orr.w	r2, r2, #1
 8009e3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4a26      	ldr	r2, [pc, #152]	@ (8009edc <HAL_TIM_Base_Start_IT+0xd0>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d022      	beq.n	8009e8c <HAL_TIM_Base_Start_IT+0x80>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e4e:	d01d      	beq.n	8009e8c <HAL_TIM_Base_Start_IT+0x80>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a22      	ldr	r2, [pc, #136]	@ (8009ee0 <HAL_TIM_Base_Start_IT+0xd4>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d018      	beq.n	8009e8c <HAL_TIM_Base_Start_IT+0x80>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4a21      	ldr	r2, [pc, #132]	@ (8009ee4 <HAL_TIM_Base_Start_IT+0xd8>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d013      	beq.n	8009e8c <HAL_TIM_Base_Start_IT+0x80>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a1f      	ldr	r2, [pc, #124]	@ (8009ee8 <HAL_TIM_Base_Start_IT+0xdc>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d00e      	beq.n	8009e8c <HAL_TIM_Base_Start_IT+0x80>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a1e      	ldr	r2, [pc, #120]	@ (8009eec <HAL_TIM_Base_Start_IT+0xe0>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d009      	beq.n	8009e8c <HAL_TIM_Base_Start_IT+0x80>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a1c      	ldr	r2, [pc, #112]	@ (8009ef0 <HAL_TIM_Base_Start_IT+0xe4>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d004      	beq.n	8009e8c <HAL_TIM_Base_Start_IT+0x80>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4a1b      	ldr	r2, [pc, #108]	@ (8009ef4 <HAL_TIM_Base_Start_IT+0xe8>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d115      	bne.n	8009eb8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	689a      	ldr	r2, [r3, #8]
 8009e92:	4b19      	ldr	r3, [pc, #100]	@ (8009ef8 <HAL_TIM_Base_Start_IT+0xec>)
 8009e94:	4013      	ands	r3, r2
 8009e96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	2b06      	cmp	r3, #6
 8009e9c:	d015      	beq.n	8009eca <HAL_TIM_Base_Start_IT+0xbe>
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ea4:	d011      	beq.n	8009eca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f042 0201 	orr.w	r2, r2, #1
 8009eb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009eb6:	e008      	b.n	8009eca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f042 0201 	orr.w	r2, r2, #1
 8009ec6:	601a      	str	r2, [r3, #0]
 8009ec8:	e000      	b.n	8009ecc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009eca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009ecc:	2300      	movs	r3, #0
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3714      	adds	r7, #20
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr
 8009eda:	bf00      	nop
 8009edc:	40010000 	.word	0x40010000
 8009ee0:	40000400 	.word	0x40000400
 8009ee4:	40000800 	.word	0x40000800
 8009ee8:	40000c00 	.word	0x40000c00
 8009eec:	40010400 	.word	0x40010400
 8009ef0:	40014000 	.word	0x40014000
 8009ef4:	40001800 	.word	0x40001800
 8009ef8:	00010007 	.word	0x00010007

08009efc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b084      	sub	sp, #16
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	68db      	ldr	r3, [r3, #12]
 8009f0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	691b      	ldr	r3, [r3, #16]
 8009f12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	f003 0302 	and.w	r3, r3, #2
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d020      	beq.n	8009f60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f003 0302 	and.w	r3, r3, #2
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d01b      	beq.n	8009f60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f06f 0202 	mvn.w	r2, #2
 8009f30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2201      	movs	r2, #1
 8009f36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	699b      	ldr	r3, [r3, #24]
 8009f3e:	f003 0303 	and.w	r3, r3, #3
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d003      	beq.n	8009f4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 f9b4 	bl	800a2b4 <HAL_TIM_IC_CaptureCallback>
 8009f4c:	e005      	b.n	8009f5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 f9a6 	bl	800a2a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 f9b7 	bl	800a2c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	f003 0304 	and.w	r3, r3, #4
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d020      	beq.n	8009fac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	f003 0304 	and.w	r3, r3, #4
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d01b      	beq.n	8009fac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f06f 0204 	mvn.w	r2, #4
 8009f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2202      	movs	r2, #2
 8009f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	699b      	ldr	r3, [r3, #24]
 8009f8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d003      	beq.n	8009f9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 f98e 	bl	800a2b4 <HAL_TIM_IC_CaptureCallback>
 8009f98:	e005      	b.n	8009fa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 f980 	bl	800a2a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f000 f991 	bl	800a2c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	f003 0308 	and.w	r3, r3, #8
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d020      	beq.n	8009ff8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	f003 0308 	and.w	r3, r3, #8
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d01b      	beq.n	8009ff8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f06f 0208 	mvn.w	r2, #8
 8009fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2204      	movs	r2, #4
 8009fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	69db      	ldr	r3, [r3, #28]
 8009fd6:	f003 0303 	and.w	r3, r3, #3
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d003      	beq.n	8009fe6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f000 f968 	bl	800a2b4 <HAL_TIM_IC_CaptureCallback>
 8009fe4:	e005      	b.n	8009ff2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 f95a 	bl	800a2a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f000 f96b 	bl	800a2c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	f003 0310 	and.w	r3, r3, #16
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d020      	beq.n	800a044 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	f003 0310 	and.w	r3, r3, #16
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d01b      	beq.n	800a044 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f06f 0210 	mvn.w	r2, #16
 800a014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2208      	movs	r2, #8
 800a01a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	69db      	ldr	r3, [r3, #28]
 800a022:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a026:	2b00      	cmp	r3, #0
 800a028:	d003      	beq.n	800a032 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 f942 	bl	800a2b4 <HAL_TIM_IC_CaptureCallback>
 800a030:	e005      	b.n	800a03e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f000 f934 	bl	800a2a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f000 f945 	bl	800a2c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2200      	movs	r2, #0
 800a042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	f003 0301 	and.w	r3, r3, #1
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d00c      	beq.n	800a068 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	f003 0301 	and.w	r3, r3, #1
 800a054:	2b00      	cmp	r3, #0
 800a056:	d007      	beq.n	800a068 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f06f 0201 	mvn.w	r2, #1
 800a060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f7f7 f8d0 	bl	8001208 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d104      	bne.n	800a07c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d00c      	beq.n	800a096 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a082:	2b00      	cmp	r3, #0
 800a084:	d007      	beq.n	800a096 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a08e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f000 fb05 	bl	800a6a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d00c      	beq.n	800a0ba <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d007      	beq.n	800a0ba <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a0b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f000 fafd 	bl	800a6b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d00c      	beq.n	800a0de <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d007      	beq.n	800a0de <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a0d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f000 f8ff 	bl	800a2dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	f003 0320 	and.w	r3, r3, #32
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d00c      	beq.n	800a102 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f003 0320 	and.w	r3, r3, #32
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d007      	beq.n	800a102 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f06f 0220 	mvn.w	r2, #32
 800a0fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 fac5 	bl	800a68c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a102:	bf00      	nop
 800a104:	3710      	adds	r7, #16
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
	...

0800a10c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a116:	2300      	movs	r3, #0
 800a118:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a120:	2b01      	cmp	r3, #1
 800a122:	d101      	bne.n	800a128 <HAL_TIM_ConfigClockSource+0x1c>
 800a124:	2302      	movs	r3, #2
 800a126:	e0b4      	b.n	800a292 <HAL_TIM_ConfigClockSource+0x186>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2201      	movs	r2, #1
 800a12c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2202      	movs	r2, #2
 800a134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	689b      	ldr	r3, [r3, #8]
 800a13e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a140:	68ba      	ldr	r2, [r7, #8]
 800a142:	4b56      	ldr	r3, [pc, #344]	@ (800a29c <HAL_TIM_ConfigClockSource+0x190>)
 800a144:	4013      	ands	r3, r2
 800a146:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a14e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	68ba      	ldr	r2, [r7, #8]
 800a156:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a160:	d03e      	beq.n	800a1e0 <HAL_TIM_ConfigClockSource+0xd4>
 800a162:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a166:	f200 8087 	bhi.w	800a278 <HAL_TIM_ConfigClockSource+0x16c>
 800a16a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a16e:	f000 8086 	beq.w	800a27e <HAL_TIM_ConfigClockSource+0x172>
 800a172:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a176:	d87f      	bhi.n	800a278 <HAL_TIM_ConfigClockSource+0x16c>
 800a178:	2b70      	cmp	r3, #112	@ 0x70
 800a17a:	d01a      	beq.n	800a1b2 <HAL_TIM_ConfigClockSource+0xa6>
 800a17c:	2b70      	cmp	r3, #112	@ 0x70
 800a17e:	d87b      	bhi.n	800a278 <HAL_TIM_ConfigClockSource+0x16c>
 800a180:	2b60      	cmp	r3, #96	@ 0x60
 800a182:	d050      	beq.n	800a226 <HAL_TIM_ConfigClockSource+0x11a>
 800a184:	2b60      	cmp	r3, #96	@ 0x60
 800a186:	d877      	bhi.n	800a278 <HAL_TIM_ConfigClockSource+0x16c>
 800a188:	2b50      	cmp	r3, #80	@ 0x50
 800a18a:	d03c      	beq.n	800a206 <HAL_TIM_ConfigClockSource+0xfa>
 800a18c:	2b50      	cmp	r3, #80	@ 0x50
 800a18e:	d873      	bhi.n	800a278 <HAL_TIM_ConfigClockSource+0x16c>
 800a190:	2b40      	cmp	r3, #64	@ 0x40
 800a192:	d058      	beq.n	800a246 <HAL_TIM_ConfigClockSource+0x13a>
 800a194:	2b40      	cmp	r3, #64	@ 0x40
 800a196:	d86f      	bhi.n	800a278 <HAL_TIM_ConfigClockSource+0x16c>
 800a198:	2b30      	cmp	r3, #48	@ 0x30
 800a19a:	d064      	beq.n	800a266 <HAL_TIM_ConfigClockSource+0x15a>
 800a19c:	2b30      	cmp	r3, #48	@ 0x30
 800a19e:	d86b      	bhi.n	800a278 <HAL_TIM_ConfigClockSource+0x16c>
 800a1a0:	2b20      	cmp	r3, #32
 800a1a2:	d060      	beq.n	800a266 <HAL_TIM_ConfigClockSource+0x15a>
 800a1a4:	2b20      	cmp	r3, #32
 800a1a6:	d867      	bhi.n	800a278 <HAL_TIM_ConfigClockSource+0x16c>
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d05c      	beq.n	800a266 <HAL_TIM_ConfigClockSource+0x15a>
 800a1ac:	2b10      	cmp	r3, #16
 800a1ae:	d05a      	beq.n	800a266 <HAL_TIM_ConfigClockSource+0x15a>
 800a1b0:	e062      	b.n	800a278 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a1c2:	f000 f9b5 	bl	800a530 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	689b      	ldr	r3, [r3, #8]
 800a1cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a1d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	68ba      	ldr	r2, [r7, #8]
 800a1dc:	609a      	str	r2, [r3, #8]
      break;
 800a1de:	e04f      	b.n	800a280 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a1f0:	f000 f99e 	bl	800a530 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	689a      	ldr	r2, [r3, #8]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a202:	609a      	str	r2, [r3, #8]
      break;
 800a204:	e03c      	b.n	800a280 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a212:	461a      	mov	r2, r3
 800a214:	f000 f912 	bl	800a43c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	2150      	movs	r1, #80	@ 0x50
 800a21e:	4618      	mov	r0, r3
 800a220:	f000 f96b 	bl	800a4fa <TIM_ITRx_SetConfig>
      break;
 800a224:	e02c      	b.n	800a280 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a232:	461a      	mov	r2, r3
 800a234:	f000 f931 	bl	800a49a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	2160      	movs	r1, #96	@ 0x60
 800a23e:	4618      	mov	r0, r3
 800a240:	f000 f95b 	bl	800a4fa <TIM_ITRx_SetConfig>
      break;
 800a244:	e01c      	b.n	800a280 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a252:	461a      	mov	r2, r3
 800a254:	f000 f8f2 	bl	800a43c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	2140      	movs	r1, #64	@ 0x40
 800a25e:	4618      	mov	r0, r3
 800a260:	f000 f94b 	bl	800a4fa <TIM_ITRx_SetConfig>
      break;
 800a264:	e00c      	b.n	800a280 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681a      	ldr	r2, [r3, #0]
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4619      	mov	r1, r3
 800a270:	4610      	mov	r0, r2
 800a272:	f000 f942 	bl	800a4fa <TIM_ITRx_SetConfig>
      break;
 800a276:	e003      	b.n	800a280 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a278:	2301      	movs	r3, #1
 800a27a:	73fb      	strb	r3, [r7, #15]
      break;
 800a27c:	e000      	b.n	800a280 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a27e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2201      	movs	r2, #1
 800a284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2200      	movs	r2, #0
 800a28c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a290:	7bfb      	ldrb	r3, [r7, #15]
}
 800a292:	4618      	mov	r0, r3
 800a294:	3710      	adds	r7, #16
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	fffeff88 	.word	0xfffeff88

0800a2a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b083      	sub	sp, #12
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a2a8:	bf00      	nop
 800a2aa:	370c      	adds	r7, #12
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr

0800a2b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b083      	sub	sp, #12
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a2bc:	bf00      	nop
 800a2be:	370c      	adds	r7, #12
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c6:	4770      	bx	lr

0800a2c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b083      	sub	sp, #12
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a2d0:	bf00      	nop
 800a2d2:	370c      	adds	r7, #12
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a2e4:	bf00      	nop
 800a2e6:	370c      	adds	r7, #12
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr

0800a2f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b085      	sub	sp, #20
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	4a43      	ldr	r2, [pc, #268]	@ (800a410 <TIM_Base_SetConfig+0x120>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d013      	beq.n	800a330 <TIM_Base_SetConfig+0x40>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a30e:	d00f      	beq.n	800a330 <TIM_Base_SetConfig+0x40>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	4a40      	ldr	r2, [pc, #256]	@ (800a414 <TIM_Base_SetConfig+0x124>)
 800a314:	4293      	cmp	r3, r2
 800a316:	d00b      	beq.n	800a330 <TIM_Base_SetConfig+0x40>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	4a3f      	ldr	r2, [pc, #252]	@ (800a418 <TIM_Base_SetConfig+0x128>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d007      	beq.n	800a330 <TIM_Base_SetConfig+0x40>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	4a3e      	ldr	r2, [pc, #248]	@ (800a41c <TIM_Base_SetConfig+0x12c>)
 800a324:	4293      	cmp	r3, r2
 800a326:	d003      	beq.n	800a330 <TIM_Base_SetConfig+0x40>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	4a3d      	ldr	r2, [pc, #244]	@ (800a420 <TIM_Base_SetConfig+0x130>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d108      	bne.n	800a342 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a336:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	68fa      	ldr	r2, [r7, #12]
 800a33e:	4313      	orrs	r3, r2
 800a340:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	4a32      	ldr	r2, [pc, #200]	@ (800a410 <TIM_Base_SetConfig+0x120>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d02b      	beq.n	800a3a2 <TIM_Base_SetConfig+0xb2>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a350:	d027      	beq.n	800a3a2 <TIM_Base_SetConfig+0xb2>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	4a2f      	ldr	r2, [pc, #188]	@ (800a414 <TIM_Base_SetConfig+0x124>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d023      	beq.n	800a3a2 <TIM_Base_SetConfig+0xb2>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	4a2e      	ldr	r2, [pc, #184]	@ (800a418 <TIM_Base_SetConfig+0x128>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d01f      	beq.n	800a3a2 <TIM_Base_SetConfig+0xb2>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	4a2d      	ldr	r2, [pc, #180]	@ (800a41c <TIM_Base_SetConfig+0x12c>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d01b      	beq.n	800a3a2 <TIM_Base_SetConfig+0xb2>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	4a2c      	ldr	r2, [pc, #176]	@ (800a420 <TIM_Base_SetConfig+0x130>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d017      	beq.n	800a3a2 <TIM_Base_SetConfig+0xb2>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	4a2b      	ldr	r2, [pc, #172]	@ (800a424 <TIM_Base_SetConfig+0x134>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d013      	beq.n	800a3a2 <TIM_Base_SetConfig+0xb2>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	4a2a      	ldr	r2, [pc, #168]	@ (800a428 <TIM_Base_SetConfig+0x138>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d00f      	beq.n	800a3a2 <TIM_Base_SetConfig+0xb2>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	4a29      	ldr	r2, [pc, #164]	@ (800a42c <TIM_Base_SetConfig+0x13c>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d00b      	beq.n	800a3a2 <TIM_Base_SetConfig+0xb2>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	4a28      	ldr	r2, [pc, #160]	@ (800a430 <TIM_Base_SetConfig+0x140>)
 800a38e:	4293      	cmp	r3, r2
 800a390:	d007      	beq.n	800a3a2 <TIM_Base_SetConfig+0xb2>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	4a27      	ldr	r2, [pc, #156]	@ (800a434 <TIM_Base_SetConfig+0x144>)
 800a396:	4293      	cmp	r3, r2
 800a398:	d003      	beq.n	800a3a2 <TIM_Base_SetConfig+0xb2>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	4a26      	ldr	r2, [pc, #152]	@ (800a438 <TIM_Base_SetConfig+0x148>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d108      	bne.n	800a3b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a3a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	68db      	ldr	r3, [r3, #12]
 800a3ae:	68fa      	ldr	r2, [r7, #12]
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	695b      	ldr	r3, [r3, #20]
 800a3be:	4313      	orrs	r3, r2
 800a3c0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	689a      	ldr	r2, [r3, #8]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	681a      	ldr	r2, [r3, #0]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	4a0e      	ldr	r2, [pc, #56]	@ (800a410 <TIM_Base_SetConfig+0x120>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d003      	beq.n	800a3e2 <TIM_Base_SetConfig+0xf2>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	4a10      	ldr	r2, [pc, #64]	@ (800a420 <TIM_Base_SetConfig+0x130>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d103      	bne.n	800a3ea <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	691a      	ldr	r2, [r3, #16]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f043 0204 	orr.w	r2, r3, #4
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	68fa      	ldr	r2, [r7, #12]
 800a400:	601a      	str	r2, [r3, #0]
}
 800a402:	bf00      	nop
 800a404:	3714      	adds	r7, #20
 800a406:	46bd      	mov	sp, r7
 800a408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40c:	4770      	bx	lr
 800a40e:	bf00      	nop
 800a410:	40010000 	.word	0x40010000
 800a414:	40000400 	.word	0x40000400
 800a418:	40000800 	.word	0x40000800
 800a41c:	40000c00 	.word	0x40000c00
 800a420:	40010400 	.word	0x40010400
 800a424:	40014000 	.word	0x40014000
 800a428:	40014400 	.word	0x40014400
 800a42c:	40014800 	.word	0x40014800
 800a430:	40001800 	.word	0x40001800
 800a434:	40001c00 	.word	0x40001c00
 800a438:	40002000 	.word	0x40002000

0800a43c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b087      	sub	sp, #28
 800a440:	af00      	add	r7, sp, #0
 800a442:	60f8      	str	r0, [r7, #12]
 800a444:	60b9      	str	r1, [r7, #8]
 800a446:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	6a1b      	ldr	r3, [r3, #32]
 800a44c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	6a1b      	ldr	r3, [r3, #32]
 800a452:	f023 0201 	bic.w	r2, r3, #1
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	699b      	ldr	r3, [r3, #24]
 800a45e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a466:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	011b      	lsls	r3, r3, #4
 800a46c:	693a      	ldr	r2, [r7, #16]
 800a46e:	4313      	orrs	r3, r2
 800a470:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	f023 030a 	bic.w	r3, r3, #10
 800a478:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a47a:	697a      	ldr	r2, [r7, #20]
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	4313      	orrs	r3, r2
 800a480:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	693a      	ldr	r2, [r7, #16]
 800a486:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	697a      	ldr	r2, [r7, #20]
 800a48c:	621a      	str	r2, [r3, #32]
}
 800a48e:	bf00      	nop
 800a490:	371c      	adds	r7, #28
 800a492:	46bd      	mov	sp, r7
 800a494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a498:	4770      	bx	lr

0800a49a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a49a:	b480      	push	{r7}
 800a49c:	b087      	sub	sp, #28
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	60f8      	str	r0, [r7, #12]
 800a4a2:	60b9      	str	r1, [r7, #8]
 800a4a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	6a1b      	ldr	r3, [r3, #32]
 800a4aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	6a1b      	ldr	r3, [r3, #32]
 800a4b0:	f023 0210 	bic.w	r2, r3, #16
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	699b      	ldr	r3, [r3, #24]
 800a4bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a4c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	031b      	lsls	r3, r3, #12
 800a4ca:	693a      	ldr	r2, [r7, #16]
 800a4cc:	4313      	orrs	r3, r2
 800a4ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a4d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	011b      	lsls	r3, r3, #4
 800a4dc:	697a      	ldr	r2, [r7, #20]
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	693a      	ldr	r2, [r7, #16]
 800a4e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	697a      	ldr	r2, [r7, #20]
 800a4ec:	621a      	str	r2, [r3, #32]
}
 800a4ee:	bf00      	nop
 800a4f0:	371c      	adds	r7, #28
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr

0800a4fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a4fa:	b480      	push	{r7}
 800a4fc:	b085      	sub	sp, #20
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
 800a502:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	689b      	ldr	r3, [r3, #8]
 800a508:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a510:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a512:	683a      	ldr	r2, [r7, #0]
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	4313      	orrs	r3, r2
 800a518:	f043 0307 	orr.w	r3, r3, #7
 800a51c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	68fa      	ldr	r2, [r7, #12]
 800a522:	609a      	str	r2, [r3, #8]
}
 800a524:	bf00      	nop
 800a526:	3714      	adds	r7, #20
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr

0800a530 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a530:	b480      	push	{r7}
 800a532:	b087      	sub	sp, #28
 800a534:	af00      	add	r7, sp, #0
 800a536:	60f8      	str	r0, [r7, #12]
 800a538:	60b9      	str	r1, [r7, #8]
 800a53a:	607a      	str	r2, [r7, #4]
 800a53c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a54a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	021a      	lsls	r2, r3, #8
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	431a      	orrs	r2, r3
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	4313      	orrs	r3, r2
 800a558:	697a      	ldr	r2, [r7, #20]
 800a55a:	4313      	orrs	r3, r2
 800a55c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	697a      	ldr	r2, [r7, #20]
 800a562:	609a      	str	r2, [r3, #8]
}
 800a564:	bf00      	nop
 800a566:	371c      	adds	r7, #28
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a570:	b480      	push	{r7}
 800a572:	b085      	sub	sp, #20
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a580:	2b01      	cmp	r3, #1
 800a582:	d101      	bne.n	800a588 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a584:	2302      	movs	r3, #2
 800a586:	e06d      	b.n	800a664 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2201      	movs	r2, #1
 800a58c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2202      	movs	r2, #2
 800a594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	689b      	ldr	r3, [r3, #8]
 800a5a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4a30      	ldr	r2, [pc, #192]	@ (800a670 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d004      	beq.n	800a5bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	4a2f      	ldr	r2, [pc, #188]	@ (800a674 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d108      	bne.n	800a5ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a5c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	68fa      	ldr	r2, [r7, #12]
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	68fa      	ldr	r2, [r7, #12]
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	68fa      	ldr	r2, [r7, #12]
 800a5e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4a20      	ldr	r2, [pc, #128]	@ (800a670 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d022      	beq.n	800a638 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5fa:	d01d      	beq.n	800a638 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a1d      	ldr	r2, [pc, #116]	@ (800a678 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d018      	beq.n	800a638 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	4a1c      	ldr	r2, [pc, #112]	@ (800a67c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d013      	beq.n	800a638 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	4a1a      	ldr	r2, [pc, #104]	@ (800a680 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d00e      	beq.n	800a638 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	4a15      	ldr	r2, [pc, #84]	@ (800a674 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a620:	4293      	cmp	r3, r2
 800a622:	d009      	beq.n	800a638 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4a16      	ldr	r2, [pc, #88]	@ (800a684 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d004      	beq.n	800a638 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4a15      	ldr	r2, [pc, #84]	@ (800a688 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d10c      	bne.n	800a652 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a63e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	689b      	ldr	r3, [r3, #8]
 800a644:	68ba      	ldr	r2, [r7, #8]
 800a646:	4313      	orrs	r3, r2
 800a648:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	68ba      	ldr	r2, [r7, #8]
 800a650:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2201      	movs	r2, #1
 800a656:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2200      	movs	r2, #0
 800a65e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a662:	2300      	movs	r3, #0
}
 800a664:	4618      	mov	r0, r3
 800a666:	3714      	adds	r7, #20
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr
 800a670:	40010000 	.word	0x40010000
 800a674:	40010400 	.word	0x40010400
 800a678:	40000400 	.word	0x40000400
 800a67c:	40000800 	.word	0x40000800
 800a680:	40000c00 	.word	0x40000c00
 800a684:	40014000 	.word	0x40014000
 800a688:	40001800 	.word	0x40001800

0800a68c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a68c:	b480      	push	{r7}
 800a68e:	b083      	sub	sp, #12
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a694:	bf00      	nop
 800a696:	370c      	adds	r7, #12
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr

0800a6a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b083      	sub	sp, #12
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a6a8:	bf00      	nop
 800a6aa:	370c      	adds	r7, #12
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr

0800a6b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b083      	sub	sp, #12
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a6bc:	bf00      	nop
 800a6be:	370c      	adds	r7, #12
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr

0800a6c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b082      	sub	sp, #8
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d101      	bne.n	800a6da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	e040      	b.n	800a75c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d106      	bne.n	800a6f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f7f7 fb80 	bl	8001df0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2224      	movs	r2, #36	@ 0x24
 800a6f4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	681a      	ldr	r2, [r3, #0]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f022 0201 	bic.w	r2, r2, #1
 800a704:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d002      	beq.n	800a714 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f000 fece 	bl	800b4b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f000 fc67 	bl	800afe8 <UART_SetConfig>
 800a71a:	4603      	mov	r3, r0
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d101      	bne.n	800a724 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800a720:	2301      	movs	r3, #1
 800a722:	e01b      	b.n	800a75c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	685a      	ldr	r2, [r3, #4]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a732:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	689a      	ldr	r2, [r3, #8]
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a742:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	681a      	ldr	r2, [r3, #0]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f042 0201 	orr.w	r2, r2, #1
 800a752:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f000 ff4d 	bl	800b5f4 <UART_CheckIdleState>
 800a75a:	4603      	mov	r3, r0
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3708      	adds	r7, #8
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b08a      	sub	sp, #40	@ 0x28
 800a768:	af02      	add	r7, sp, #8
 800a76a:	60f8      	str	r0, [r7, #12]
 800a76c:	60b9      	str	r1, [r7, #8]
 800a76e:	603b      	str	r3, [r7, #0]
 800a770:	4613      	mov	r3, r2
 800a772:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a778:	2b20      	cmp	r3, #32
 800a77a:	d177      	bne.n	800a86c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d002      	beq.n	800a788 <HAL_UART_Transmit+0x24>
 800a782:	88fb      	ldrh	r3, [r7, #6]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d101      	bne.n	800a78c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a788:	2301      	movs	r3, #1
 800a78a:	e070      	b.n	800a86e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	2200      	movs	r2, #0
 800a790:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2221      	movs	r2, #33	@ 0x21
 800a798:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a79a:	f7f7 fe03 	bl	80023a4 <HAL_GetTick>
 800a79e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	88fa      	ldrh	r2, [r7, #6]
 800a7a4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	88fa      	ldrh	r2, [r7, #6]
 800a7ac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a7b8:	d108      	bne.n	800a7cc <HAL_UART_Transmit+0x68>
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	691b      	ldr	r3, [r3, #16]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d104      	bne.n	800a7cc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	61bb      	str	r3, [r7, #24]
 800a7ca:	e003      	b.n	800a7d4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a7d4:	e02f      	b.n	800a836 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	9300      	str	r3, [sp, #0]
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	2180      	movs	r1, #128	@ 0x80
 800a7e0:	68f8      	ldr	r0, [r7, #12]
 800a7e2:	f000 ff5e 	bl	800b6a2 <UART_WaitOnFlagUntilTimeout>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d004      	beq.n	800a7f6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	2220      	movs	r2, #32
 800a7f0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800a7f2:	2303      	movs	r3, #3
 800a7f4:	e03b      	b.n	800a86e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800a7f6:	69fb      	ldr	r3, [r7, #28]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d10b      	bne.n	800a814 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a7fc:	69bb      	ldr	r3, [r7, #24]
 800a7fe:	881b      	ldrh	r3, [r3, #0]
 800a800:	461a      	mov	r2, r3
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a80a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a80c:	69bb      	ldr	r3, [r7, #24]
 800a80e:	3302      	adds	r3, #2
 800a810:	61bb      	str	r3, [r7, #24]
 800a812:	e007      	b.n	800a824 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a814:	69fb      	ldr	r3, [r7, #28]
 800a816:	781a      	ldrb	r2, [r3, #0]
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a81e:	69fb      	ldr	r3, [r7, #28]
 800a820:	3301      	adds	r3, #1
 800a822:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a82a:	b29b      	uxth	r3, r3
 800a82c:	3b01      	subs	r3, #1
 800a82e:	b29a      	uxth	r2, r3
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a83c:	b29b      	uxth	r3, r3
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d1c9      	bne.n	800a7d6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	9300      	str	r3, [sp, #0]
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	2200      	movs	r2, #0
 800a84a:	2140      	movs	r1, #64	@ 0x40
 800a84c:	68f8      	ldr	r0, [r7, #12]
 800a84e:	f000 ff28 	bl	800b6a2 <UART_WaitOnFlagUntilTimeout>
 800a852:	4603      	mov	r3, r0
 800a854:	2b00      	cmp	r3, #0
 800a856:	d004      	beq.n	800a862 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2220      	movs	r2, #32
 800a85c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800a85e:	2303      	movs	r3, #3
 800a860:	e005      	b.n	800a86e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	2220      	movs	r2, #32
 800a866:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800a868:	2300      	movs	r3, #0
 800a86a:	e000      	b.n	800a86e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800a86c:	2302      	movs	r3, #2
  }
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3720      	adds	r7, #32
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
	...

0800a878 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a878:	b480      	push	{r7}
 800a87a:	b08b      	sub	sp, #44	@ 0x2c
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	60f8      	str	r0, [r7, #12]
 800a880:	60b9      	str	r1, [r7, #8]
 800a882:	4613      	mov	r3, r2
 800a884:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a88a:	2b20      	cmp	r3, #32
 800a88c:	d147      	bne.n	800a91e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d002      	beq.n	800a89a <HAL_UART_Transmit_IT+0x22>
 800a894:	88fb      	ldrh	r3, [r7, #6]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d101      	bne.n	800a89e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800a89a:	2301      	movs	r3, #1
 800a89c:	e040      	b.n	800a920 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	68ba      	ldr	r2, [r7, #8]
 800a8a2:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	88fa      	ldrh	r2, [r7, #6]
 800a8a8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	88fa      	ldrh	r2, [r7, #6]
 800a8b0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	2221      	movs	r2, #33	@ 0x21
 800a8c6:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	689b      	ldr	r3, [r3, #8]
 800a8cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8d0:	d107      	bne.n	800a8e2 <HAL_UART_Transmit_IT+0x6a>
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	691b      	ldr	r3, [r3, #16]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d103      	bne.n	800a8e2 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	4a13      	ldr	r2, [pc, #76]	@ (800a92c <HAL_UART_Transmit_IT+0xb4>)
 800a8de:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a8e0:	e002      	b.n	800a8e8 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	4a12      	ldr	r2, [pc, #72]	@ (800a930 <HAL_UART_Transmit_IT+0xb8>)
 800a8e6:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	e853 3f00 	ldrex	r3, [r3]
 800a8f4:	613b      	str	r3, [r7, #16]
   return(result);
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8fc:	627b      	str	r3, [r7, #36]	@ 0x24
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	461a      	mov	r2, r3
 800a904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a906:	623b      	str	r3, [r7, #32]
 800a908:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a90a:	69f9      	ldr	r1, [r7, #28]
 800a90c:	6a3a      	ldr	r2, [r7, #32]
 800a90e:	e841 2300 	strex	r3, r2, [r1]
 800a912:	61bb      	str	r3, [r7, #24]
   return(result);
 800a914:	69bb      	ldr	r3, [r7, #24]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d1e6      	bne.n	800a8e8 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800a91a:	2300      	movs	r3, #0
 800a91c:	e000      	b.n	800a920 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800a91e:	2302      	movs	r3, #2
  }
}
 800a920:	4618      	mov	r0, r3
 800a922:	372c      	adds	r7, #44	@ 0x2c
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr
 800a92c:	0800bcf9 	.word	0x0800bcf9
 800a930:	0800bc43 	.word	0x0800bc43

0800a934 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b08a      	sub	sp, #40	@ 0x28
 800a938:	af00      	add	r7, sp, #0
 800a93a:	60f8      	str	r0, [r7, #12]
 800a93c:	60b9      	str	r1, [r7, #8]
 800a93e:	4613      	mov	r3, r2
 800a940:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a948:	2b20      	cmp	r3, #32
 800a94a:	d132      	bne.n	800a9b2 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d002      	beq.n	800a958 <HAL_UART_Receive_DMA+0x24>
 800a952:	88fb      	ldrh	r3, [r7, #6]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d101      	bne.n	800a95c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a958:	2301      	movs	r3, #1
 800a95a:	e02b      	b.n	800a9b4 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2200      	movs	r2, #0
 800a960:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	685b      	ldr	r3, [r3, #4]
 800a968:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d018      	beq.n	800a9a2 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	e853 3f00 	ldrex	r3, [r3]
 800a97c:	613b      	str	r3, [r7, #16]
   return(result);
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a984:	627b      	str	r3, [r7, #36]	@ 0x24
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	461a      	mov	r2, r3
 800a98c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a98e:	623b      	str	r3, [r7, #32]
 800a990:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a992:	69f9      	ldr	r1, [r7, #28]
 800a994:	6a3a      	ldr	r2, [r7, #32]
 800a996:	e841 2300 	strex	r3, r2, [r1]
 800a99a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a99c:	69bb      	ldr	r3, [r7, #24]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d1e6      	bne.n	800a970 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a9a2:	88fb      	ldrh	r3, [r7, #6]
 800a9a4:	461a      	mov	r2, r3
 800a9a6:	68b9      	ldr	r1, [r7, #8]
 800a9a8:	68f8      	ldr	r0, [r7, #12]
 800a9aa:	f000 fee7 	bl	800b77c <UART_Start_Receive_DMA>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	e000      	b.n	800a9b4 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800a9b2:	2302      	movs	r3, #2
  }
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3728      	adds	r7, #40	@ 0x28
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b0ba      	sub	sp, #232	@ 0xe8
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	69db      	ldr	r3, [r3, #28]
 800a9ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	689b      	ldr	r3, [r3, #8]
 800a9de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a9e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a9e6:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a9ea:	4013      	ands	r3, r2
 800a9ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a9f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d115      	bne.n	800aa24 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a9f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9fc:	f003 0320 	and.w	r3, r3, #32
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d00f      	beq.n	800aa24 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800aa04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa08:	f003 0320 	and.w	r3, r3, #32
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d009      	beq.n	800aa24 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	f000 82b1 	beq.w	800af7c <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	4798      	blx	r3
      }
      return;
 800aa22:	e2ab      	b.n	800af7c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800aa24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	f000 8117 	beq.w	800ac5c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800aa2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa32:	f003 0301 	and.w	r3, r3, #1
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d106      	bne.n	800aa48 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800aa3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800aa3e:	4b85      	ldr	r3, [pc, #532]	@ (800ac54 <HAL_UART_IRQHandler+0x298>)
 800aa40:	4013      	ands	r3, r2
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	f000 810a 	beq.w	800ac5c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aa48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa4c:	f003 0301 	and.w	r3, r3, #1
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d011      	beq.n	800aa78 <HAL_UART_IRQHandler+0xbc>
 800aa54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d00b      	beq.n	800aa78 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	2201      	movs	r2, #1
 800aa66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa6e:	f043 0201 	orr.w	r2, r3, #1
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa7c:	f003 0302 	and.w	r3, r3, #2
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d011      	beq.n	800aaa8 <HAL_UART_IRQHandler+0xec>
 800aa84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa88:	f003 0301 	and.w	r3, r3, #1
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d00b      	beq.n	800aaa8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	2202      	movs	r2, #2
 800aa96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa9e:	f043 0204 	orr.w	r2, r3, #4
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aaa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aaac:	f003 0304 	and.w	r3, r3, #4
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d011      	beq.n	800aad8 <HAL_UART_IRQHandler+0x11c>
 800aab4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aab8:	f003 0301 	and.w	r3, r3, #1
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d00b      	beq.n	800aad8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	2204      	movs	r2, #4
 800aac6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aace:	f043 0202 	orr.w	r2, r3, #2
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800aad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aadc:	f003 0308 	and.w	r3, r3, #8
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d017      	beq.n	800ab14 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800aae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aae8:	f003 0320 	and.w	r3, r3, #32
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d105      	bne.n	800aafc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800aaf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aaf4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d00b      	beq.n	800ab14 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	2208      	movs	r2, #8
 800ab02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab0a:	f043 0208 	orr.w	r2, r3, #8
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ab14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d012      	beq.n	800ab46 <HAL_UART_IRQHandler+0x18a>
 800ab20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab24:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d00c      	beq.n	800ab46 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ab34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab3c:	f043 0220 	orr.w	r2, r3, #32
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	f000 8217 	beq.w	800af80 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800ab52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab56:	f003 0320 	and.w	r3, r3, #32
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d00d      	beq.n	800ab7a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ab5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab62:	f003 0320 	and.w	r3, r3, #32
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d007      	beq.n	800ab7a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d003      	beq.n	800ab7a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab80:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	689b      	ldr	r3, [r3, #8]
 800ab8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab8e:	2b40      	cmp	r3, #64	@ 0x40
 800ab90:	d005      	beq.n	800ab9e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ab92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ab96:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d04f      	beq.n	800ac3e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f000 feb2 	bl	800b908 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	689b      	ldr	r3, [r3, #8]
 800abaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abae:	2b40      	cmp	r3, #64	@ 0x40
 800abb0:	d141      	bne.n	800ac36 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	3308      	adds	r3, #8
 800abb8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800abc0:	e853 3f00 	ldrex	r3, [r3]
 800abc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800abc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800abcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800abd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	3308      	adds	r3, #8
 800abda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800abde:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800abe2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abe6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800abea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800abee:	e841 2300 	strex	r3, r2, [r1]
 800abf2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800abf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d1d9      	bne.n	800abb2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d013      	beq.n	800ac2e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac0a:	4a13      	ldr	r2, [pc, #76]	@ (800ac58 <HAL_UART_IRQHandler+0x29c>)
 800ac0c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac12:	4618      	mov	r0, r3
 800ac14:	f7f8 fce6 	bl	80035e4 <HAL_DMA_Abort_IT>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d017      	beq.n	800ac4e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800ac28:	4610      	mov	r0, r2
 800ac2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac2c:	e00f      	b.n	800ac4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f000 f9c4 	bl	800afbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac34:	e00b      	b.n	800ac4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f000 f9c0 	bl	800afbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac3c:	e007      	b.n	800ac4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f000 f9bc 	bl	800afbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2200      	movs	r2, #0
 800ac48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800ac4c:	e198      	b.n	800af80 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac4e:	bf00      	nop
    return;
 800ac50:	e196      	b.n	800af80 <HAL_UART_IRQHandler+0x5c4>
 800ac52:	bf00      	nop
 800ac54:	04000120 	.word	0x04000120
 800ac58:	0800bc1f 	.word	0x0800bc1f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	f040 8166 	bne.w	800af32 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ac66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac6a:	f003 0310 	and.w	r3, r3, #16
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	f000 815f 	beq.w	800af32 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ac74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac78:	f003 0310 	and.w	r3, r3, #16
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	f000 8158 	beq.w	800af32 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	2210      	movs	r2, #16
 800ac88:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	689b      	ldr	r3, [r3, #8]
 800ac90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac94:	2b40      	cmp	r3, #64	@ 0x40
 800ac96:	f040 80d0 	bne.w	800ae3a <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	685b      	ldr	r3, [r3, #4]
 800aca2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800aca6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800acaa:	2b00      	cmp	r3, #0
 800acac:	f000 80ab 	beq.w	800ae06 <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800acb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800acba:	429a      	cmp	r2, r3
 800acbc:	f080 80a3 	bcs.w	800ae06 <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800acc6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800acce:	69db      	ldr	r3, [r3, #28]
 800acd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800acd4:	f000 8086 	beq.w	800ade4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ace0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ace4:	e853 3f00 	ldrex	r3, [r3]
 800ace8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800acec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800acf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800acf4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	461a      	mov	r2, r3
 800acfe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ad02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ad06:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ad0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ad12:	e841 2300 	strex	r3, r2, [r1]
 800ad16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ad1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d1da      	bne.n	800acd8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	3308      	adds	r3, #8
 800ad28:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ad2c:	e853 3f00 	ldrex	r3, [r3]
 800ad30:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ad32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ad34:	f023 0301 	bic.w	r3, r3, #1
 800ad38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	3308      	adds	r3, #8
 800ad42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ad46:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ad4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad4c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ad4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ad52:	e841 2300 	strex	r3, r2, [r1]
 800ad56:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ad58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d1e1      	bne.n	800ad22 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	3308      	adds	r3, #8
 800ad64:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ad68:	e853 3f00 	ldrex	r3, [r3]
 800ad6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ad6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ad70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	3308      	adds	r3, #8
 800ad7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ad82:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ad84:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad86:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ad88:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ad8a:	e841 2300 	strex	r3, r2, [r1]
 800ad8e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ad90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d1e3      	bne.n	800ad5e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2220      	movs	r2, #32
 800ad9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2200      	movs	r2, #0
 800ada2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800adac:	e853 3f00 	ldrex	r3, [r3]
 800adb0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800adb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800adb4:	f023 0310 	bic.w	r3, r3, #16
 800adb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	461a      	mov	r2, r3
 800adc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800adc6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800adc8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800adcc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800adce:	e841 2300 	strex	r3, r2, [r1]
 800add2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800add4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800add6:	2b00      	cmp	r3, #0
 800add8:	d1e4      	bne.n	800ada4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800adde:	4618      	mov	r0, r3
 800ade0:	f7f8 fb90 	bl	8003504 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2202      	movs	r2, #2
 800ade8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800adf6:	b29b      	uxth	r3, r3
 800adf8:	1ad3      	subs	r3, r2, r3
 800adfa:	b29b      	uxth	r3, r3
 800adfc:	4619      	mov	r1, r3
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f000 f8e6 	bl	800afd0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800ae04:	e0be      	b.n	800af84 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ae0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ae10:	429a      	cmp	r2, r3
 800ae12:	f040 80b7 	bne.w	800af84 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae1a:	69db      	ldr	r3, [r3, #28]
 800ae1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae20:	f040 80b0 	bne.w	800af84 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2202      	movs	r2, #2
 800ae28:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ae30:	4619      	mov	r1, r3
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f000 f8cc 	bl	800afd0 <HAL_UARTEx_RxEventCallback>
      return;
 800ae38:	e0a4      	b.n	800af84 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ae46:	b29b      	uxth	r3, r3
 800ae48:	1ad3      	subs	r3, r2, r3
 800ae4a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	f000 8096 	beq.w	800af88 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800ae5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	f000 8091 	beq.w	800af88 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae6e:	e853 3f00 	ldrex	r3, [r3]
 800ae72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ae74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ae7a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	461a      	mov	r2, r3
 800ae84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ae88:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae8a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ae8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ae90:	e841 2300 	strex	r3, r2, [r1]
 800ae94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ae96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d1e4      	bne.n	800ae66 <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	3308      	adds	r3, #8
 800aea2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aea6:	e853 3f00 	ldrex	r3, [r3]
 800aeaa:	623b      	str	r3, [r7, #32]
   return(result);
 800aeac:	6a3b      	ldr	r3, [r7, #32]
 800aeae:	f023 0301 	bic.w	r3, r3, #1
 800aeb2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	3308      	adds	r3, #8
 800aebc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800aec0:	633a      	str	r2, [r7, #48]	@ 0x30
 800aec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aec4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aec6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aec8:	e841 2300 	strex	r3, r2, [r1]
 800aecc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d1e3      	bne.n	800ae9c <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2220      	movs	r2, #32
 800aed8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2200      	movs	r2, #0
 800aee0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2200      	movs	r2, #0
 800aee6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	e853 3f00 	ldrex	r3, [r3]
 800aef4:	60fb      	str	r3, [r7, #12]
   return(result);
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f023 0310 	bic.w	r3, r3, #16
 800aefc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	461a      	mov	r2, r3
 800af06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800af0a:	61fb      	str	r3, [r7, #28]
 800af0c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af0e:	69b9      	ldr	r1, [r7, #24]
 800af10:	69fa      	ldr	r2, [r7, #28]
 800af12:	e841 2300 	strex	r3, r2, [r1]
 800af16:	617b      	str	r3, [r7, #20]
   return(result);
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d1e4      	bne.n	800aee8 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2202      	movs	r2, #2
 800af22:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800af24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800af28:	4619      	mov	r1, r3
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f000 f850 	bl	800afd0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800af30:	e02a      	b.n	800af88 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800af32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d00e      	beq.n	800af5c <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800af3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af46:	2b00      	cmp	r3, #0
 800af48:	d008      	beq.n	800af5c <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d01c      	beq.n	800af8c <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	4798      	blx	r3
    }
    return;
 800af5a:	e017      	b.n	800af8c <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800af5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af64:	2b00      	cmp	r3, #0
 800af66:	d012      	beq.n	800af8e <HAL_UART_IRQHandler+0x5d2>
 800af68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af70:	2b00      	cmp	r3, #0
 800af72:	d00c      	beq.n	800af8e <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 ff1f 	bl	800bdb8 <UART_EndTransmit_IT>
    return;
 800af7a:	e008      	b.n	800af8e <HAL_UART_IRQHandler+0x5d2>
      return;
 800af7c:	bf00      	nop
 800af7e:	e006      	b.n	800af8e <HAL_UART_IRQHandler+0x5d2>
    return;
 800af80:	bf00      	nop
 800af82:	e004      	b.n	800af8e <HAL_UART_IRQHandler+0x5d2>
      return;
 800af84:	bf00      	nop
 800af86:	e002      	b.n	800af8e <HAL_UART_IRQHandler+0x5d2>
      return;
 800af88:	bf00      	nop
 800af8a:	e000      	b.n	800af8e <HAL_UART_IRQHandler+0x5d2>
    return;
 800af8c:	bf00      	nop
  }

}
 800af8e:	37e8      	adds	r7, #232	@ 0xe8
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}

0800af94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800af94:	b480      	push	{r7}
 800af96:	b083      	sub	sp, #12
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800af9c:	bf00      	nop
 800af9e:	370c      	adds	r7, #12
 800afa0:	46bd      	mov	sp, r7
 800afa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa6:	4770      	bx	lr

0800afa8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b083      	sub	sp, #12
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800afb0:	bf00      	nop
 800afb2:	370c      	adds	r7, #12
 800afb4:	46bd      	mov	sp, r7
 800afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afba:	4770      	bx	lr

0800afbc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800afbc:	b480      	push	{r7}
 800afbe:	b083      	sub	sp, #12
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800afc4:	bf00      	nop
 800afc6:	370c      	adds	r7, #12
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr

0800afd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b083      	sub	sp, #12
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	460b      	mov	r3, r1
 800afda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800afdc:	bf00      	nop
 800afde:	370c      	adds	r7, #12
 800afe0:	46bd      	mov	sp, r7
 800afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe6:	4770      	bx	lr

0800afe8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b088      	sub	sp, #32
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aff0:	2300      	movs	r3, #0
 800aff2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	689a      	ldr	r2, [r3, #8]
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	691b      	ldr	r3, [r3, #16]
 800affc:	431a      	orrs	r2, r3
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	695b      	ldr	r3, [r3, #20]
 800b002:	431a      	orrs	r2, r3
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	69db      	ldr	r3, [r3, #28]
 800b008:	4313      	orrs	r3, r2
 800b00a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	681a      	ldr	r2, [r3, #0]
 800b012:	4ba6      	ldr	r3, [pc, #664]	@ (800b2ac <UART_SetConfig+0x2c4>)
 800b014:	4013      	ands	r3, r2
 800b016:	687a      	ldr	r2, [r7, #4]
 800b018:	6812      	ldr	r2, [r2, #0]
 800b01a:	6979      	ldr	r1, [r7, #20]
 800b01c:	430b      	orrs	r3, r1
 800b01e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	685b      	ldr	r3, [r3, #4]
 800b026:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	68da      	ldr	r2, [r3, #12]
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	430a      	orrs	r2, r1
 800b034:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	699b      	ldr	r3, [r3, #24]
 800b03a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6a1b      	ldr	r3, [r3, #32]
 800b040:	697a      	ldr	r2, [r7, #20]
 800b042:	4313      	orrs	r3, r2
 800b044:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	689b      	ldr	r3, [r3, #8]
 800b04c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	697a      	ldr	r2, [r7, #20]
 800b056:	430a      	orrs	r2, r1
 800b058:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	4a94      	ldr	r2, [pc, #592]	@ (800b2b0 <UART_SetConfig+0x2c8>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d120      	bne.n	800b0a6 <UART_SetConfig+0xbe>
 800b064:	4b93      	ldr	r3, [pc, #588]	@ (800b2b4 <UART_SetConfig+0x2cc>)
 800b066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b06a:	f003 0303 	and.w	r3, r3, #3
 800b06e:	2b03      	cmp	r3, #3
 800b070:	d816      	bhi.n	800b0a0 <UART_SetConfig+0xb8>
 800b072:	a201      	add	r2, pc, #4	@ (adr r2, 800b078 <UART_SetConfig+0x90>)
 800b074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b078:	0800b089 	.word	0x0800b089
 800b07c:	0800b095 	.word	0x0800b095
 800b080:	0800b08f 	.word	0x0800b08f
 800b084:	0800b09b 	.word	0x0800b09b
 800b088:	2301      	movs	r3, #1
 800b08a:	77fb      	strb	r3, [r7, #31]
 800b08c:	e150      	b.n	800b330 <UART_SetConfig+0x348>
 800b08e:	2302      	movs	r3, #2
 800b090:	77fb      	strb	r3, [r7, #31]
 800b092:	e14d      	b.n	800b330 <UART_SetConfig+0x348>
 800b094:	2304      	movs	r3, #4
 800b096:	77fb      	strb	r3, [r7, #31]
 800b098:	e14a      	b.n	800b330 <UART_SetConfig+0x348>
 800b09a:	2308      	movs	r3, #8
 800b09c:	77fb      	strb	r3, [r7, #31]
 800b09e:	e147      	b.n	800b330 <UART_SetConfig+0x348>
 800b0a0:	2310      	movs	r3, #16
 800b0a2:	77fb      	strb	r3, [r7, #31]
 800b0a4:	e144      	b.n	800b330 <UART_SetConfig+0x348>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	4a83      	ldr	r2, [pc, #524]	@ (800b2b8 <UART_SetConfig+0x2d0>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d132      	bne.n	800b116 <UART_SetConfig+0x12e>
 800b0b0:	4b80      	ldr	r3, [pc, #512]	@ (800b2b4 <UART_SetConfig+0x2cc>)
 800b0b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0b6:	f003 030c 	and.w	r3, r3, #12
 800b0ba:	2b0c      	cmp	r3, #12
 800b0bc:	d828      	bhi.n	800b110 <UART_SetConfig+0x128>
 800b0be:	a201      	add	r2, pc, #4	@ (adr r2, 800b0c4 <UART_SetConfig+0xdc>)
 800b0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0c4:	0800b0f9 	.word	0x0800b0f9
 800b0c8:	0800b111 	.word	0x0800b111
 800b0cc:	0800b111 	.word	0x0800b111
 800b0d0:	0800b111 	.word	0x0800b111
 800b0d4:	0800b105 	.word	0x0800b105
 800b0d8:	0800b111 	.word	0x0800b111
 800b0dc:	0800b111 	.word	0x0800b111
 800b0e0:	0800b111 	.word	0x0800b111
 800b0e4:	0800b0ff 	.word	0x0800b0ff
 800b0e8:	0800b111 	.word	0x0800b111
 800b0ec:	0800b111 	.word	0x0800b111
 800b0f0:	0800b111 	.word	0x0800b111
 800b0f4:	0800b10b 	.word	0x0800b10b
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	77fb      	strb	r3, [r7, #31]
 800b0fc:	e118      	b.n	800b330 <UART_SetConfig+0x348>
 800b0fe:	2302      	movs	r3, #2
 800b100:	77fb      	strb	r3, [r7, #31]
 800b102:	e115      	b.n	800b330 <UART_SetConfig+0x348>
 800b104:	2304      	movs	r3, #4
 800b106:	77fb      	strb	r3, [r7, #31]
 800b108:	e112      	b.n	800b330 <UART_SetConfig+0x348>
 800b10a:	2308      	movs	r3, #8
 800b10c:	77fb      	strb	r3, [r7, #31]
 800b10e:	e10f      	b.n	800b330 <UART_SetConfig+0x348>
 800b110:	2310      	movs	r3, #16
 800b112:	77fb      	strb	r3, [r7, #31]
 800b114:	e10c      	b.n	800b330 <UART_SetConfig+0x348>
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	4a68      	ldr	r2, [pc, #416]	@ (800b2bc <UART_SetConfig+0x2d4>)
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d120      	bne.n	800b162 <UART_SetConfig+0x17a>
 800b120:	4b64      	ldr	r3, [pc, #400]	@ (800b2b4 <UART_SetConfig+0x2cc>)
 800b122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b126:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b12a:	2b30      	cmp	r3, #48	@ 0x30
 800b12c:	d013      	beq.n	800b156 <UART_SetConfig+0x16e>
 800b12e:	2b30      	cmp	r3, #48	@ 0x30
 800b130:	d814      	bhi.n	800b15c <UART_SetConfig+0x174>
 800b132:	2b20      	cmp	r3, #32
 800b134:	d009      	beq.n	800b14a <UART_SetConfig+0x162>
 800b136:	2b20      	cmp	r3, #32
 800b138:	d810      	bhi.n	800b15c <UART_SetConfig+0x174>
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d002      	beq.n	800b144 <UART_SetConfig+0x15c>
 800b13e:	2b10      	cmp	r3, #16
 800b140:	d006      	beq.n	800b150 <UART_SetConfig+0x168>
 800b142:	e00b      	b.n	800b15c <UART_SetConfig+0x174>
 800b144:	2300      	movs	r3, #0
 800b146:	77fb      	strb	r3, [r7, #31]
 800b148:	e0f2      	b.n	800b330 <UART_SetConfig+0x348>
 800b14a:	2302      	movs	r3, #2
 800b14c:	77fb      	strb	r3, [r7, #31]
 800b14e:	e0ef      	b.n	800b330 <UART_SetConfig+0x348>
 800b150:	2304      	movs	r3, #4
 800b152:	77fb      	strb	r3, [r7, #31]
 800b154:	e0ec      	b.n	800b330 <UART_SetConfig+0x348>
 800b156:	2308      	movs	r3, #8
 800b158:	77fb      	strb	r3, [r7, #31]
 800b15a:	e0e9      	b.n	800b330 <UART_SetConfig+0x348>
 800b15c:	2310      	movs	r3, #16
 800b15e:	77fb      	strb	r3, [r7, #31]
 800b160:	e0e6      	b.n	800b330 <UART_SetConfig+0x348>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	4a56      	ldr	r2, [pc, #344]	@ (800b2c0 <UART_SetConfig+0x2d8>)
 800b168:	4293      	cmp	r3, r2
 800b16a:	d120      	bne.n	800b1ae <UART_SetConfig+0x1c6>
 800b16c:	4b51      	ldr	r3, [pc, #324]	@ (800b2b4 <UART_SetConfig+0x2cc>)
 800b16e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b172:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b176:	2bc0      	cmp	r3, #192	@ 0xc0
 800b178:	d013      	beq.n	800b1a2 <UART_SetConfig+0x1ba>
 800b17a:	2bc0      	cmp	r3, #192	@ 0xc0
 800b17c:	d814      	bhi.n	800b1a8 <UART_SetConfig+0x1c0>
 800b17e:	2b80      	cmp	r3, #128	@ 0x80
 800b180:	d009      	beq.n	800b196 <UART_SetConfig+0x1ae>
 800b182:	2b80      	cmp	r3, #128	@ 0x80
 800b184:	d810      	bhi.n	800b1a8 <UART_SetConfig+0x1c0>
 800b186:	2b00      	cmp	r3, #0
 800b188:	d002      	beq.n	800b190 <UART_SetConfig+0x1a8>
 800b18a:	2b40      	cmp	r3, #64	@ 0x40
 800b18c:	d006      	beq.n	800b19c <UART_SetConfig+0x1b4>
 800b18e:	e00b      	b.n	800b1a8 <UART_SetConfig+0x1c0>
 800b190:	2300      	movs	r3, #0
 800b192:	77fb      	strb	r3, [r7, #31]
 800b194:	e0cc      	b.n	800b330 <UART_SetConfig+0x348>
 800b196:	2302      	movs	r3, #2
 800b198:	77fb      	strb	r3, [r7, #31]
 800b19a:	e0c9      	b.n	800b330 <UART_SetConfig+0x348>
 800b19c:	2304      	movs	r3, #4
 800b19e:	77fb      	strb	r3, [r7, #31]
 800b1a0:	e0c6      	b.n	800b330 <UART_SetConfig+0x348>
 800b1a2:	2308      	movs	r3, #8
 800b1a4:	77fb      	strb	r3, [r7, #31]
 800b1a6:	e0c3      	b.n	800b330 <UART_SetConfig+0x348>
 800b1a8:	2310      	movs	r3, #16
 800b1aa:	77fb      	strb	r3, [r7, #31]
 800b1ac:	e0c0      	b.n	800b330 <UART_SetConfig+0x348>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	4a44      	ldr	r2, [pc, #272]	@ (800b2c4 <UART_SetConfig+0x2dc>)
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d125      	bne.n	800b204 <UART_SetConfig+0x21c>
 800b1b8:	4b3e      	ldr	r3, [pc, #248]	@ (800b2b4 <UART_SetConfig+0x2cc>)
 800b1ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b1c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b1c6:	d017      	beq.n	800b1f8 <UART_SetConfig+0x210>
 800b1c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b1cc:	d817      	bhi.n	800b1fe <UART_SetConfig+0x216>
 800b1ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b1d2:	d00b      	beq.n	800b1ec <UART_SetConfig+0x204>
 800b1d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b1d8:	d811      	bhi.n	800b1fe <UART_SetConfig+0x216>
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d003      	beq.n	800b1e6 <UART_SetConfig+0x1fe>
 800b1de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b1e2:	d006      	beq.n	800b1f2 <UART_SetConfig+0x20a>
 800b1e4:	e00b      	b.n	800b1fe <UART_SetConfig+0x216>
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	77fb      	strb	r3, [r7, #31]
 800b1ea:	e0a1      	b.n	800b330 <UART_SetConfig+0x348>
 800b1ec:	2302      	movs	r3, #2
 800b1ee:	77fb      	strb	r3, [r7, #31]
 800b1f0:	e09e      	b.n	800b330 <UART_SetConfig+0x348>
 800b1f2:	2304      	movs	r3, #4
 800b1f4:	77fb      	strb	r3, [r7, #31]
 800b1f6:	e09b      	b.n	800b330 <UART_SetConfig+0x348>
 800b1f8:	2308      	movs	r3, #8
 800b1fa:	77fb      	strb	r3, [r7, #31]
 800b1fc:	e098      	b.n	800b330 <UART_SetConfig+0x348>
 800b1fe:	2310      	movs	r3, #16
 800b200:	77fb      	strb	r3, [r7, #31]
 800b202:	e095      	b.n	800b330 <UART_SetConfig+0x348>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	4a2f      	ldr	r2, [pc, #188]	@ (800b2c8 <UART_SetConfig+0x2e0>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d125      	bne.n	800b25a <UART_SetConfig+0x272>
 800b20e:	4b29      	ldr	r3, [pc, #164]	@ (800b2b4 <UART_SetConfig+0x2cc>)
 800b210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b214:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b218:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b21c:	d017      	beq.n	800b24e <UART_SetConfig+0x266>
 800b21e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b222:	d817      	bhi.n	800b254 <UART_SetConfig+0x26c>
 800b224:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b228:	d00b      	beq.n	800b242 <UART_SetConfig+0x25a>
 800b22a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b22e:	d811      	bhi.n	800b254 <UART_SetConfig+0x26c>
 800b230:	2b00      	cmp	r3, #0
 800b232:	d003      	beq.n	800b23c <UART_SetConfig+0x254>
 800b234:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b238:	d006      	beq.n	800b248 <UART_SetConfig+0x260>
 800b23a:	e00b      	b.n	800b254 <UART_SetConfig+0x26c>
 800b23c:	2301      	movs	r3, #1
 800b23e:	77fb      	strb	r3, [r7, #31]
 800b240:	e076      	b.n	800b330 <UART_SetConfig+0x348>
 800b242:	2302      	movs	r3, #2
 800b244:	77fb      	strb	r3, [r7, #31]
 800b246:	e073      	b.n	800b330 <UART_SetConfig+0x348>
 800b248:	2304      	movs	r3, #4
 800b24a:	77fb      	strb	r3, [r7, #31]
 800b24c:	e070      	b.n	800b330 <UART_SetConfig+0x348>
 800b24e:	2308      	movs	r3, #8
 800b250:	77fb      	strb	r3, [r7, #31]
 800b252:	e06d      	b.n	800b330 <UART_SetConfig+0x348>
 800b254:	2310      	movs	r3, #16
 800b256:	77fb      	strb	r3, [r7, #31]
 800b258:	e06a      	b.n	800b330 <UART_SetConfig+0x348>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	4a1b      	ldr	r2, [pc, #108]	@ (800b2cc <UART_SetConfig+0x2e4>)
 800b260:	4293      	cmp	r3, r2
 800b262:	d138      	bne.n	800b2d6 <UART_SetConfig+0x2ee>
 800b264:	4b13      	ldr	r3, [pc, #76]	@ (800b2b4 <UART_SetConfig+0x2cc>)
 800b266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b26a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800b26e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b272:	d017      	beq.n	800b2a4 <UART_SetConfig+0x2bc>
 800b274:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b278:	d82a      	bhi.n	800b2d0 <UART_SetConfig+0x2e8>
 800b27a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b27e:	d00b      	beq.n	800b298 <UART_SetConfig+0x2b0>
 800b280:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b284:	d824      	bhi.n	800b2d0 <UART_SetConfig+0x2e8>
 800b286:	2b00      	cmp	r3, #0
 800b288:	d003      	beq.n	800b292 <UART_SetConfig+0x2aa>
 800b28a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b28e:	d006      	beq.n	800b29e <UART_SetConfig+0x2b6>
 800b290:	e01e      	b.n	800b2d0 <UART_SetConfig+0x2e8>
 800b292:	2300      	movs	r3, #0
 800b294:	77fb      	strb	r3, [r7, #31]
 800b296:	e04b      	b.n	800b330 <UART_SetConfig+0x348>
 800b298:	2302      	movs	r3, #2
 800b29a:	77fb      	strb	r3, [r7, #31]
 800b29c:	e048      	b.n	800b330 <UART_SetConfig+0x348>
 800b29e:	2304      	movs	r3, #4
 800b2a0:	77fb      	strb	r3, [r7, #31]
 800b2a2:	e045      	b.n	800b330 <UART_SetConfig+0x348>
 800b2a4:	2308      	movs	r3, #8
 800b2a6:	77fb      	strb	r3, [r7, #31]
 800b2a8:	e042      	b.n	800b330 <UART_SetConfig+0x348>
 800b2aa:	bf00      	nop
 800b2ac:	efff69f3 	.word	0xefff69f3
 800b2b0:	40011000 	.word	0x40011000
 800b2b4:	40023800 	.word	0x40023800
 800b2b8:	40004400 	.word	0x40004400
 800b2bc:	40004800 	.word	0x40004800
 800b2c0:	40004c00 	.word	0x40004c00
 800b2c4:	40005000 	.word	0x40005000
 800b2c8:	40011400 	.word	0x40011400
 800b2cc:	40007800 	.word	0x40007800
 800b2d0:	2310      	movs	r3, #16
 800b2d2:	77fb      	strb	r3, [r7, #31]
 800b2d4:	e02c      	b.n	800b330 <UART_SetConfig+0x348>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	4a72      	ldr	r2, [pc, #456]	@ (800b4a4 <UART_SetConfig+0x4bc>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d125      	bne.n	800b32c <UART_SetConfig+0x344>
 800b2e0:	4b71      	ldr	r3, [pc, #452]	@ (800b4a8 <UART_SetConfig+0x4c0>)
 800b2e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2e6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b2ea:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b2ee:	d017      	beq.n	800b320 <UART_SetConfig+0x338>
 800b2f0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b2f4:	d817      	bhi.n	800b326 <UART_SetConfig+0x33e>
 800b2f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b2fa:	d00b      	beq.n	800b314 <UART_SetConfig+0x32c>
 800b2fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b300:	d811      	bhi.n	800b326 <UART_SetConfig+0x33e>
 800b302:	2b00      	cmp	r3, #0
 800b304:	d003      	beq.n	800b30e <UART_SetConfig+0x326>
 800b306:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b30a:	d006      	beq.n	800b31a <UART_SetConfig+0x332>
 800b30c:	e00b      	b.n	800b326 <UART_SetConfig+0x33e>
 800b30e:	2300      	movs	r3, #0
 800b310:	77fb      	strb	r3, [r7, #31]
 800b312:	e00d      	b.n	800b330 <UART_SetConfig+0x348>
 800b314:	2302      	movs	r3, #2
 800b316:	77fb      	strb	r3, [r7, #31]
 800b318:	e00a      	b.n	800b330 <UART_SetConfig+0x348>
 800b31a:	2304      	movs	r3, #4
 800b31c:	77fb      	strb	r3, [r7, #31]
 800b31e:	e007      	b.n	800b330 <UART_SetConfig+0x348>
 800b320:	2308      	movs	r3, #8
 800b322:	77fb      	strb	r3, [r7, #31]
 800b324:	e004      	b.n	800b330 <UART_SetConfig+0x348>
 800b326:	2310      	movs	r3, #16
 800b328:	77fb      	strb	r3, [r7, #31]
 800b32a:	e001      	b.n	800b330 <UART_SetConfig+0x348>
 800b32c:	2310      	movs	r3, #16
 800b32e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	69db      	ldr	r3, [r3, #28]
 800b334:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b338:	d15b      	bne.n	800b3f2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800b33a:	7ffb      	ldrb	r3, [r7, #31]
 800b33c:	2b08      	cmp	r3, #8
 800b33e:	d828      	bhi.n	800b392 <UART_SetConfig+0x3aa>
 800b340:	a201      	add	r2, pc, #4	@ (adr r2, 800b348 <UART_SetConfig+0x360>)
 800b342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b346:	bf00      	nop
 800b348:	0800b36d 	.word	0x0800b36d
 800b34c:	0800b375 	.word	0x0800b375
 800b350:	0800b37d 	.word	0x0800b37d
 800b354:	0800b393 	.word	0x0800b393
 800b358:	0800b383 	.word	0x0800b383
 800b35c:	0800b393 	.word	0x0800b393
 800b360:	0800b393 	.word	0x0800b393
 800b364:	0800b393 	.word	0x0800b393
 800b368:	0800b38b 	.word	0x0800b38b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b36c:	f7fc ff4c 	bl	8008208 <HAL_RCC_GetPCLK1Freq>
 800b370:	61b8      	str	r0, [r7, #24]
        break;
 800b372:	e013      	b.n	800b39c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b374:	f7fc ff5c 	bl	8008230 <HAL_RCC_GetPCLK2Freq>
 800b378:	61b8      	str	r0, [r7, #24]
        break;
 800b37a:	e00f      	b.n	800b39c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b37c:	4b4b      	ldr	r3, [pc, #300]	@ (800b4ac <UART_SetConfig+0x4c4>)
 800b37e:	61bb      	str	r3, [r7, #24]
        break;
 800b380:	e00c      	b.n	800b39c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b382:	f7fc fe6f 	bl	8008064 <HAL_RCC_GetSysClockFreq>
 800b386:	61b8      	str	r0, [r7, #24]
        break;
 800b388:	e008      	b.n	800b39c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b38a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b38e:	61bb      	str	r3, [r7, #24]
        break;
 800b390:	e004      	b.n	800b39c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800b392:	2300      	movs	r3, #0
 800b394:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b396:	2301      	movs	r3, #1
 800b398:	77bb      	strb	r3, [r7, #30]
        break;
 800b39a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b39c:	69bb      	ldr	r3, [r7, #24]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d074      	beq.n	800b48c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b3a2:	69bb      	ldr	r3, [r7, #24]
 800b3a4:	005a      	lsls	r2, r3, #1
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	085b      	lsrs	r3, r3, #1
 800b3ac:	441a      	add	r2, r3
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	685b      	ldr	r3, [r3, #4]
 800b3b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	2b0f      	cmp	r3, #15
 800b3bc:	d916      	bls.n	800b3ec <UART_SetConfig+0x404>
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b3c4:	d212      	bcs.n	800b3ec <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	b29b      	uxth	r3, r3
 800b3ca:	f023 030f 	bic.w	r3, r3, #15
 800b3ce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b3d0:	693b      	ldr	r3, [r7, #16]
 800b3d2:	085b      	lsrs	r3, r3, #1
 800b3d4:	b29b      	uxth	r3, r3
 800b3d6:	f003 0307 	and.w	r3, r3, #7
 800b3da:	b29a      	uxth	r2, r3
 800b3dc:	89fb      	ldrh	r3, [r7, #14]
 800b3de:	4313      	orrs	r3, r2
 800b3e0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	89fa      	ldrh	r2, [r7, #14]
 800b3e8:	60da      	str	r2, [r3, #12]
 800b3ea:	e04f      	b.n	800b48c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	77bb      	strb	r3, [r7, #30]
 800b3f0:	e04c      	b.n	800b48c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b3f2:	7ffb      	ldrb	r3, [r7, #31]
 800b3f4:	2b08      	cmp	r3, #8
 800b3f6:	d828      	bhi.n	800b44a <UART_SetConfig+0x462>
 800b3f8:	a201      	add	r2, pc, #4	@ (adr r2, 800b400 <UART_SetConfig+0x418>)
 800b3fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3fe:	bf00      	nop
 800b400:	0800b425 	.word	0x0800b425
 800b404:	0800b42d 	.word	0x0800b42d
 800b408:	0800b435 	.word	0x0800b435
 800b40c:	0800b44b 	.word	0x0800b44b
 800b410:	0800b43b 	.word	0x0800b43b
 800b414:	0800b44b 	.word	0x0800b44b
 800b418:	0800b44b 	.word	0x0800b44b
 800b41c:	0800b44b 	.word	0x0800b44b
 800b420:	0800b443 	.word	0x0800b443
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b424:	f7fc fef0 	bl	8008208 <HAL_RCC_GetPCLK1Freq>
 800b428:	61b8      	str	r0, [r7, #24]
        break;
 800b42a:	e013      	b.n	800b454 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b42c:	f7fc ff00 	bl	8008230 <HAL_RCC_GetPCLK2Freq>
 800b430:	61b8      	str	r0, [r7, #24]
        break;
 800b432:	e00f      	b.n	800b454 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b434:	4b1d      	ldr	r3, [pc, #116]	@ (800b4ac <UART_SetConfig+0x4c4>)
 800b436:	61bb      	str	r3, [r7, #24]
        break;
 800b438:	e00c      	b.n	800b454 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b43a:	f7fc fe13 	bl	8008064 <HAL_RCC_GetSysClockFreq>
 800b43e:	61b8      	str	r0, [r7, #24]
        break;
 800b440:	e008      	b.n	800b454 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b442:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b446:	61bb      	str	r3, [r7, #24]
        break;
 800b448:	e004      	b.n	800b454 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800b44a:	2300      	movs	r3, #0
 800b44c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b44e:	2301      	movs	r3, #1
 800b450:	77bb      	strb	r3, [r7, #30]
        break;
 800b452:	bf00      	nop
    }

    if (pclk != 0U)
 800b454:	69bb      	ldr	r3, [r7, #24]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d018      	beq.n	800b48c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	085a      	lsrs	r2, r3, #1
 800b460:	69bb      	ldr	r3, [r7, #24]
 800b462:	441a      	add	r2, r3
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	685b      	ldr	r3, [r3, #4]
 800b468:	fbb2 f3f3 	udiv	r3, r2, r3
 800b46c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	2b0f      	cmp	r3, #15
 800b472:	d909      	bls.n	800b488 <UART_SetConfig+0x4a0>
 800b474:	693b      	ldr	r3, [r7, #16]
 800b476:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b47a:	d205      	bcs.n	800b488 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	b29a      	uxth	r2, r3
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	60da      	str	r2, [r3, #12]
 800b486:	e001      	b.n	800b48c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b488:	2301      	movs	r3, #1
 800b48a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2200      	movs	r2, #0
 800b490:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2200      	movs	r2, #0
 800b496:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800b498:	7fbb      	ldrb	r3, [r7, #30]
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3720      	adds	r7, #32
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}
 800b4a2:	bf00      	nop
 800b4a4:	40007c00 	.word	0x40007c00
 800b4a8:	40023800 	.word	0x40023800
 800b4ac:	00f42400 	.word	0x00f42400

0800b4b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b083      	sub	sp, #12
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4bc:	f003 0308 	and.w	r3, r3, #8
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d00a      	beq.n	800b4da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	685b      	ldr	r3, [r3, #4]
 800b4ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	430a      	orrs	r2, r1
 800b4d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4de:	f003 0301 	and.w	r3, r3, #1
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d00a      	beq.n	800b4fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	430a      	orrs	r2, r1
 800b4fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b500:	f003 0302 	and.w	r3, r3, #2
 800b504:	2b00      	cmp	r3, #0
 800b506:	d00a      	beq.n	800b51e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	430a      	orrs	r2, r1
 800b51c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b522:	f003 0304 	and.w	r3, r3, #4
 800b526:	2b00      	cmp	r3, #0
 800b528:	d00a      	beq.n	800b540 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	430a      	orrs	r2, r1
 800b53e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b544:	f003 0310 	and.w	r3, r3, #16
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d00a      	beq.n	800b562 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	689b      	ldr	r3, [r3, #8]
 800b552:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	430a      	orrs	r2, r1
 800b560:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b566:	f003 0320 	and.w	r3, r3, #32
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d00a      	beq.n	800b584 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	689b      	ldr	r3, [r3, #8]
 800b574:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	430a      	orrs	r2, r1
 800b582:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d01a      	beq.n	800b5c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	685b      	ldr	r3, [r3, #4]
 800b596:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	430a      	orrs	r2, r1
 800b5a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b5ae:	d10a      	bne.n	800b5c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	685b      	ldr	r3, [r3, #4]
 800b5b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	430a      	orrs	r2, r1
 800b5c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d00a      	beq.n	800b5e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	685b      	ldr	r3, [r3, #4]
 800b5d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	430a      	orrs	r2, r1
 800b5e6:	605a      	str	r2, [r3, #4]
  }
}
 800b5e8:	bf00      	nop
 800b5ea:	370c      	adds	r7, #12
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f2:	4770      	bx	lr

0800b5f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b08c      	sub	sp, #48	@ 0x30
 800b5f8:	af02      	add	r7, sp, #8
 800b5fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2200      	movs	r2, #0
 800b600:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b604:	f7f6 fece 	bl	80023a4 <HAL_GetTick>
 800b608:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f003 0308 	and.w	r3, r3, #8
 800b614:	2b08      	cmp	r3, #8
 800b616:	d12e      	bne.n	800b676 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b618:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b61c:	9300      	str	r3, [sp, #0]
 800b61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b620:	2200      	movs	r2, #0
 800b622:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f000 f83b 	bl	800b6a2 <UART_WaitOnFlagUntilTimeout>
 800b62c:	4603      	mov	r3, r0
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d021      	beq.n	800b676 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	e853 3f00 	ldrex	r3, [r3]
 800b63e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b646:	623b      	str	r3, [r7, #32]
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	461a      	mov	r2, r3
 800b64e:	6a3b      	ldr	r3, [r7, #32]
 800b650:	61fb      	str	r3, [r7, #28]
 800b652:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b654:	69b9      	ldr	r1, [r7, #24]
 800b656:	69fa      	ldr	r2, [r7, #28]
 800b658:	e841 2300 	strex	r3, r2, [r1]
 800b65c:	617b      	str	r3, [r7, #20]
   return(result);
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d1e6      	bne.n	800b632 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2220      	movs	r2, #32
 800b668:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2200      	movs	r2, #0
 800b66e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b672:	2303      	movs	r3, #3
 800b674:	e011      	b.n	800b69a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2220      	movs	r2, #32
 800b67a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2220      	movs	r2, #32
 800b680:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2200      	movs	r2, #0
 800b688:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2200      	movs	r2, #0
 800b68e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2200      	movs	r2, #0
 800b694:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800b698:	2300      	movs	r3, #0
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3728      	adds	r7, #40	@ 0x28
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}

0800b6a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b6a2:	b580      	push	{r7, lr}
 800b6a4:	b084      	sub	sp, #16
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	60f8      	str	r0, [r7, #12]
 800b6aa:	60b9      	str	r1, [r7, #8]
 800b6ac:	603b      	str	r3, [r7, #0]
 800b6ae:	4613      	mov	r3, r2
 800b6b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6b2:	e04f      	b.n	800b754 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b6b4:	69bb      	ldr	r3, [r7, #24]
 800b6b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b6ba:	d04b      	beq.n	800b754 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b6bc:	f7f6 fe72 	bl	80023a4 <HAL_GetTick>
 800b6c0:	4602      	mov	r2, r0
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	1ad3      	subs	r3, r2, r3
 800b6c6:	69ba      	ldr	r2, [r7, #24]
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d302      	bcc.n	800b6d2 <UART_WaitOnFlagUntilTimeout+0x30>
 800b6cc:	69bb      	ldr	r3, [r7, #24]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d101      	bne.n	800b6d6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b6d2:	2303      	movs	r3, #3
 800b6d4:	e04e      	b.n	800b774 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f003 0304 	and.w	r3, r3, #4
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d037      	beq.n	800b754 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	2b80      	cmp	r3, #128	@ 0x80
 800b6e8:	d034      	beq.n	800b754 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	2b40      	cmp	r3, #64	@ 0x40
 800b6ee:	d031      	beq.n	800b754 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	69db      	ldr	r3, [r3, #28]
 800b6f6:	f003 0308 	and.w	r3, r3, #8
 800b6fa:	2b08      	cmp	r3, #8
 800b6fc:	d110      	bne.n	800b720 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	2208      	movs	r2, #8
 800b704:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b706:	68f8      	ldr	r0, [r7, #12]
 800b708:	f000 f8fe 	bl	800b908 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	2208      	movs	r2, #8
 800b710:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	2200      	movs	r2, #0
 800b718:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800b71c:	2301      	movs	r3, #1
 800b71e:	e029      	b.n	800b774 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	69db      	ldr	r3, [r3, #28]
 800b726:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b72a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b72e:	d111      	bne.n	800b754 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b738:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b73a:	68f8      	ldr	r0, [r7, #12]
 800b73c:	f000 f8e4 	bl	800b908 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	2220      	movs	r2, #32
 800b744:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	2200      	movs	r2, #0
 800b74c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800b750:	2303      	movs	r3, #3
 800b752:	e00f      	b.n	800b774 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	69da      	ldr	r2, [r3, #28]
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	4013      	ands	r3, r2
 800b75e:	68ba      	ldr	r2, [r7, #8]
 800b760:	429a      	cmp	r2, r3
 800b762:	bf0c      	ite	eq
 800b764:	2301      	moveq	r3, #1
 800b766:	2300      	movne	r3, #0
 800b768:	b2db      	uxtb	r3, r3
 800b76a:	461a      	mov	r2, r3
 800b76c:	79fb      	ldrb	r3, [r7, #7]
 800b76e:	429a      	cmp	r2, r3
 800b770:	d0a0      	beq.n	800b6b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b772:	2300      	movs	r3, #0
}
 800b774:	4618      	mov	r0, r3
 800b776:	3710      	adds	r7, #16
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}

0800b77c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b096      	sub	sp, #88	@ 0x58
 800b780:	af00      	add	r7, sp, #0
 800b782:	60f8      	str	r0, [r7, #12]
 800b784:	60b9      	str	r1, [r7, #8]
 800b786:	4613      	mov	r3, r2
 800b788:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	68ba      	ldr	r2, [r7, #8]
 800b78e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	88fa      	ldrh	r2, [r7, #6]
 800b794:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	2200      	movs	r2, #0
 800b79c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	2222      	movs	r2, #34	@ 0x22
 800b7a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d028      	beq.n	800b802 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b7b4:	4a3e      	ldr	r2, [pc, #248]	@ (800b8b0 <UART_Start_Receive_DMA+0x134>)
 800b7b6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b7bc:	4a3d      	ldr	r2, [pc, #244]	@ (800b8b4 <UART_Start_Receive_DMA+0x138>)
 800b7be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b7c4:	4a3c      	ldr	r2, [pc, #240]	@ (800b8b8 <UART_Start_Receive_DMA+0x13c>)
 800b7c6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	3324      	adds	r3, #36	@ 0x24
 800b7da:	4619      	mov	r1, r3
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	88fb      	ldrh	r3, [r7, #6]
 800b7e4:	f7f7 fe2e 	bl	8003444 <HAL_DMA_Start_IT>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d009      	beq.n	800b802 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2210      	movs	r2, #16
 800b7f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	2220      	movs	r2, #32
 800b7fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800b7fe:	2301      	movs	r3, #1
 800b800:	e051      	b.n	800b8a6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	691b      	ldr	r3, [r3, #16]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d018      	beq.n	800b83c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b810:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b812:	e853 3f00 	ldrex	r3, [r3]
 800b816:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b81a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b81e:	657b      	str	r3, [r7, #84]	@ 0x54
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	461a      	mov	r2, r3
 800b826:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b828:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b82a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b82c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b82e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b830:	e841 2300 	strex	r3, r2, [r1]
 800b834:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b836:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d1e6      	bne.n	800b80a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	3308      	adds	r3, #8
 800b842:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b846:	e853 3f00 	ldrex	r3, [r3]
 800b84a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b84c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b84e:	f043 0301 	orr.w	r3, r3, #1
 800b852:	653b      	str	r3, [r7, #80]	@ 0x50
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	3308      	adds	r3, #8
 800b85a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b85c:	637a      	str	r2, [r7, #52]	@ 0x34
 800b85e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b860:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b862:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b864:	e841 2300 	strex	r3, r2, [r1]
 800b868:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b86a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d1e5      	bne.n	800b83c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	3308      	adds	r3, #8
 800b876:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	e853 3f00 	ldrex	r3, [r3]
 800b87e:	613b      	str	r3, [r7, #16]
   return(result);
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b886:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	3308      	adds	r3, #8
 800b88e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b890:	623a      	str	r2, [r7, #32]
 800b892:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b894:	69f9      	ldr	r1, [r7, #28]
 800b896:	6a3a      	ldr	r2, [r7, #32]
 800b898:	e841 2300 	strex	r3, r2, [r1]
 800b89c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b89e:	69bb      	ldr	r3, [r7, #24]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d1e5      	bne.n	800b870 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800b8a4:	2300      	movs	r3, #0
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3758      	adds	r7, #88	@ 0x58
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	0800b9d1 	.word	0x0800b9d1
 800b8b4:	0800bb2f 	.word	0x0800bb2f
 800b8b8:	0800bba1 	.word	0x0800bba1

0800b8bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b089      	sub	sp, #36	@ 0x24
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	e853 3f00 	ldrex	r3, [r3]
 800b8d0:	60bb      	str	r3, [r7, #8]
   return(result);
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b8d8:	61fb      	str	r3, [r7, #28]
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	461a      	mov	r2, r3
 800b8e0:	69fb      	ldr	r3, [r7, #28]
 800b8e2:	61bb      	str	r3, [r7, #24]
 800b8e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8e6:	6979      	ldr	r1, [r7, #20]
 800b8e8:	69ba      	ldr	r2, [r7, #24]
 800b8ea:	e841 2300 	strex	r3, r2, [r1]
 800b8ee:	613b      	str	r3, [r7, #16]
   return(result);
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d1e6      	bne.n	800b8c4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2220      	movs	r2, #32
 800b8fa:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800b8fc:	bf00      	nop
 800b8fe:	3724      	adds	r7, #36	@ 0x24
 800b900:	46bd      	mov	sp, r7
 800b902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b906:	4770      	bx	lr

0800b908 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b908:	b480      	push	{r7}
 800b90a:	b095      	sub	sp, #84	@ 0x54
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b918:	e853 3f00 	ldrex	r3, [r3]
 800b91c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b91e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b920:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b924:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	461a      	mov	r2, r3
 800b92c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b92e:	643b      	str	r3, [r7, #64]	@ 0x40
 800b930:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b932:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b934:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b936:	e841 2300 	strex	r3, r2, [r1]
 800b93a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b93c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d1e6      	bne.n	800b910 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	3308      	adds	r3, #8
 800b948:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b94a:	6a3b      	ldr	r3, [r7, #32]
 800b94c:	e853 3f00 	ldrex	r3, [r3]
 800b950:	61fb      	str	r3, [r7, #28]
   return(result);
 800b952:	69fb      	ldr	r3, [r7, #28]
 800b954:	f023 0301 	bic.w	r3, r3, #1
 800b958:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	3308      	adds	r3, #8
 800b960:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b962:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b964:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b966:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b968:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b96a:	e841 2300 	strex	r3, r2, [r1]
 800b96e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b972:	2b00      	cmp	r3, #0
 800b974:	d1e5      	bne.n	800b942 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b97a:	2b01      	cmp	r3, #1
 800b97c:	d118      	bne.n	800b9b0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	e853 3f00 	ldrex	r3, [r3]
 800b98a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	f023 0310 	bic.w	r3, r3, #16
 800b992:	647b      	str	r3, [r7, #68]	@ 0x44
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	461a      	mov	r2, r3
 800b99a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b99c:	61bb      	str	r3, [r7, #24]
 800b99e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9a0:	6979      	ldr	r1, [r7, #20]
 800b9a2:	69ba      	ldr	r2, [r7, #24]
 800b9a4:	e841 2300 	strex	r3, r2, [r1]
 800b9a8:	613b      	str	r3, [r7, #16]
   return(result);
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d1e6      	bne.n	800b97e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2220      	movs	r2, #32
 800b9b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800b9c4:	bf00      	nop
 800b9c6:	3754      	adds	r7, #84	@ 0x54
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ce:	4770      	bx	lr

0800b9d0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b09c      	sub	sp, #112	@ 0x70
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9dc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	69db      	ldr	r3, [r3, #28]
 800b9e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b9e6:	d071      	beq.n	800bacc <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800b9e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b9f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b9f8:	e853 3f00 	ldrex	r3, [r3]
 800b9fc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b9fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ba04:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ba06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	461a      	mov	r2, r3
 800ba0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ba0e:	657b      	str	r3, [r7, #84]	@ 0x54
 800ba10:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba12:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ba14:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ba16:	e841 2300 	strex	r3, r2, [r1]
 800ba1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ba1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d1e6      	bne.n	800b9f0 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	3308      	adds	r3, #8
 800ba28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba2c:	e853 3f00 	ldrex	r3, [r3]
 800ba30:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ba32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba34:	f023 0301 	bic.w	r3, r3, #1
 800ba38:	667b      	str	r3, [r7, #100]	@ 0x64
 800ba3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	3308      	adds	r3, #8
 800ba40:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ba42:	643a      	str	r2, [r7, #64]	@ 0x40
 800ba44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ba48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ba4a:	e841 2300 	strex	r3, r2, [r1]
 800ba4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ba50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d1e5      	bne.n	800ba22 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	3308      	adds	r3, #8
 800ba5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba5e:	6a3b      	ldr	r3, [r7, #32]
 800ba60:	e853 3f00 	ldrex	r3, [r3]
 800ba64:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba66:	69fb      	ldr	r3, [r7, #28]
 800ba68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba6c:	663b      	str	r3, [r7, #96]	@ 0x60
 800ba6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	3308      	adds	r3, #8
 800ba74:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ba76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ba78:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ba7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba7e:	e841 2300 	strex	r3, r2, [r1]
 800ba82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ba84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d1e5      	bne.n	800ba56 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ba8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba8c:	2220      	movs	r2, #32
 800ba8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ba96:	2b01      	cmp	r3, #1
 800ba98:	d118      	bne.n	800bacc <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	e853 3f00 	ldrex	r3, [r3]
 800baa6:	60bb      	str	r3, [r7, #8]
   return(result);
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	f023 0310 	bic.w	r3, r3, #16
 800baae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bab0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	461a      	mov	r2, r3
 800bab6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bab8:	61bb      	str	r3, [r7, #24]
 800baba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800babc:	6979      	ldr	r1, [r7, #20]
 800babe:	69ba      	ldr	r2, [r7, #24]
 800bac0:	e841 2300 	strex	r3, r2, [r1]
 800bac4:	613b      	str	r3, [r7, #16]
   return(result);
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d1e6      	bne.n	800ba9a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bacc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bace:	2200      	movs	r2, #0
 800bad0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bad2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bad6:	2b01      	cmp	r3, #1
 800bad8:	d122      	bne.n	800bb20 <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 800bada:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800badc:	2200      	movs	r2, #0
 800bade:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 800baec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800baee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800baf2:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d204      	bcs.n	800bb04 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800bafa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bafc:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800bb00:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bb04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb06:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800bb0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800bb10:	b29b      	uxth	r3, r3
 800bb12:	1ad3      	subs	r3, r2, r3
 800bb14:	b29b      	uxth	r3, r3
 800bb16:	4619      	mov	r1, r3
 800bb18:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bb1a:	f7ff fa59 	bl	800afd0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bb1e:	e002      	b.n	800bb26 <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 800bb20:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bb22:	f014 fd17 	bl	8020554 <HAL_UART_RxCpltCallback>
}
 800bb26:	bf00      	nop
 800bb28:	3770      	adds	r7, #112	@ 0x70
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}

0800bb2e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bb2e:	b580      	push	{r7, lr}
 800bb30:	b084      	sub	sp, #16
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb3a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	2201      	movs	r2, #1
 800bb40:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bb46:	2b01      	cmp	r3, #1
 800bb48:	d123      	bne.n	800bb92 <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bb50:	085b      	lsrs	r3, r3, #1
 800bb52:	b29a      	uxth	r2, r3
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	685b      	ldr	r3, [r3, #4]
 800bb60:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bb68:	897a      	ldrh	r2, [r7, #10]
 800bb6a:	429a      	cmp	r2, r3
 800bb6c:	d803      	bhi.n	800bb76 <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	897a      	ldrh	r2, [r7, #10]
 800bb72:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800bb82:	b29b      	uxth	r3, r3
 800bb84:	1ad3      	subs	r3, r2, r3
 800bb86:	b29b      	uxth	r3, r3
 800bb88:	4619      	mov	r1, r3
 800bb8a:	68f8      	ldr	r0, [r7, #12]
 800bb8c:	f7ff fa20 	bl	800afd0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bb90:	e002      	b.n	800bb98 <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 800bb92:	68f8      	ldr	r0, [r7, #12]
 800bb94:	f7ff fa08 	bl	800afa8 <HAL_UART_RxHalfCpltCallback>
}
 800bb98:	bf00      	nop
 800bb9a:	3710      	adds	r7, #16
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}

0800bba0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b086      	sub	sp, #24
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbac:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bbb2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bbba:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	689b      	ldr	r3, [r3, #8]
 800bbc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bbc6:	2b80      	cmp	r3, #128	@ 0x80
 800bbc8:	d109      	bne.n	800bbde <UART_DMAError+0x3e>
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	2b21      	cmp	r3, #33	@ 0x21
 800bbce:	d106      	bne.n	800bbde <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800bbd8:	6978      	ldr	r0, [r7, #20]
 800bbda:	f7ff fe6f 	bl	800b8bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	689b      	ldr	r3, [r3, #8]
 800bbe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbe8:	2b40      	cmp	r3, #64	@ 0x40
 800bbea:	d109      	bne.n	800bc00 <UART_DMAError+0x60>
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	2b22      	cmp	r3, #34	@ 0x22
 800bbf0:	d106      	bne.n	800bc00 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bbf2:	697b      	ldr	r3, [r7, #20]
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800bbfa:	6978      	ldr	r0, [r7, #20]
 800bbfc:	f7ff fe84 	bl	800b908 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bc00:	697b      	ldr	r3, [r7, #20]
 800bc02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc06:	f043 0210 	orr.w	r2, r3, #16
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bc10:	6978      	ldr	r0, [r7, #20]
 800bc12:	f7ff f9d3 	bl	800afbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc16:	bf00      	nop
 800bc18:	3718      	adds	r7, #24
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}

0800bc1e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bc1e:	b580      	push	{r7, lr}
 800bc20:	b084      	sub	sp, #16
 800bc22:	af00      	add	r7, sp, #0
 800bc24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bc34:	68f8      	ldr	r0, [r7, #12]
 800bc36:	f7ff f9c1 	bl	800afbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc3a:	bf00      	nop
 800bc3c:	3710      	adds	r7, #16
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}

0800bc42 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bc42:	b480      	push	{r7}
 800bc44:	b08f      	sub	sp, #60	@ 0x3c
 800bc46:	af00      	add	r7, sp, #0
 800bc48:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bc4e:	2b21      	cmp	r3, #33	@ 0x21
 800bc50:	d14c      	bne.n	800bcec <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800bc58:	b29b      	uxth	r3, r3
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d132      	bne.n	800bcc4 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc64:	6a3b      	ldr	r3, [r7, #32]
 800bc66:	e853 3f00 	ldrex	r3, [r3]
 800bc6a:	61fb      	str	r3, [r7, #28]
   return(result);
 800bc6c:	69fb      	ldr	r3, [r7, #28]
 800bc6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bc72:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	461a      	mov	r2, r3
 800bc7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bc7e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bc82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc84:	e841 2300 	strex	r3, r2, [r1]
 800bc88:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bc8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d1e6      	bne.n	800bc5e <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	e853 3f00 	ldrex	r3, [r3]
 800bc9c:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bca4:	633b      	str	r3, [r7, #48]	@ 0x30
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	461a      	mov	r2, r3
 800bcac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcae:	61bb      	str	r3, [r7, #24]
 800bcb0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcb2:	6979      	ldr	r1, [r7, #20]
 800bcb4:	69ba      	ldr	r2, [r7, #24]
 800bcb6:	e841 2300 	strex	r3, r2, [r1]
 800bcba:	613b      	str	r3, [r7, #16]
   return(result);
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d1e6      	bne.n	800bc90 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800bcc2:	e013      	b.n	800bcec <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bcc8:	781a      	ldrb	r2, [r3, #0]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bcd4:	1c5a      	adds	r2, r3, #1
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800bce0:	b29b      	uxth	r3, r3
 800bce2:	3b01      	subs	r3, #1
 800bce4:	b29a      	uxth	r2, r3
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800bcec:	bf00      	nop
 800bcee:	373c      	adds	r7, #60	@ 0x3c
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr

0800bcf8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b091      	sub	sp, #68	@ 0x44
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bd04:	2b21      	cmp	r3, #33	@ 0x21
 800bd06:	d151      	bne.n	800bdac <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800bd0e:	b29b      	uxth	r3, r3
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d132      	bne.n	800bd7a <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd1c:	e853 3f00 	ldrex	r3, [r3]
 800bd20:	623b      	str	r3, [r7, #32]
   return(result);
 800bd22:	6a3b      	ldr	r3, [r7, #32]
 800bd24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bd28:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	461a      	mov	r2, r3
 800bd30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd32:	633b      	str	r3, [r7, #48]	@ 0x30
 800bd34:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bd38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd3a:	e841 2300 	strex	r3, r2, [r1]
 800bd3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bd40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d1e6      	bne.n	800bd14 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	e853 3f00 	ldrex	r3, [r3]
 800bd52:	60fb      	str	r3, [r7, #12]
   return(result);
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd5a:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	461a      	mov	r2, r3
 800bd62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd64:	61fb      	str	r3, [r7, #28]
 800bd66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd68:	69b9      	ldr	r1, [r7, #24]
 800bd6a:	69fa      	ldr	r2, [r7, #28]
 800bd6c:	e841 2300 	strex	r3, r2, [r1]
 800bd70:	617b      	str	r3, [r7, #20]
   return(result);
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d1e6      	bne.n	800bd46 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800bd78:	e018      	b.n	800bdac <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800bd80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd82:	881b      	ldrh	r3, [r3, #0]
 800bd84:	461a      	mov	r2, r3
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bd8e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd94:	1c9a      	adds	r2, r3, #2
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800bda0:	b29b      	uxth	r3, r3
 800bda2:	3b01      	subs	r3, #1
 800bda4:	b29a      	uxth	r2, r3
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800bdac:	bf00      	nop
 800bdae:	3744      	adds	r7, #68	@ 0x44
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb6:	4770      	bx	lr

0800bdb8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b088      	sub	sp, #32
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	e853 3f00 	ldrex	r3, [r3]
 800bdcc:	60bb      	str	r3, [r7, #8]
   return(result);
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bdd4:	61fb      	str	r3, [r7, #28]
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	461a      	mov	r2, r3
 800bddc:	69fb      	ldr	r3, [r7, #28]
 800bdde:	61bb      	str	r3, [r7, #24]
 800bde0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bde2:	6979      	ldr	r1, [r7, #20]
 800bde4:	69ba      	ldr	r2, [r7, #24]
 800bde6:	e841 2300 	strex	r3, r2, [r1]
 800bdea:	613b      	str	r3, [r7, #16]
   return(result);
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d1e6      	bne.n	800bdc0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2220      	movs	r2, #32
 800bdf6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f7ff f8c8 	bl	800af94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be04:	bf00      	nop
 800be06:	3720      	adds	r7, #32
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd80      	pop	{r7, pc}

0800be0c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b084      	sub	sp, #16
 800be10:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 800be12:	4b92      	ldr	r3, [pc, #584]	@ (800c05c <MX_LWIP_Init+0x250>)
 800be14:	220a      	movs	r2, #10
 800be16:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 800be18:	4b90      	ldr	r3, [pc, #576]	@ (800c05c <MX_LWIP_Init+0x250>)
 800be1a:	2200      	movs	r2, #0
 800be1c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800be1e:	4b8f      	ldr	r3, [pc, #572]	@ (800c05c <MX_LWIP_Init+0x250>)
 800be20:	2201      	movs	r2, #1
 800be22:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 800be24:	4b8d      	ldr	r3, [pc, #564]	@ (800c05c <MX_LWIP_Init+0x250>)
 800be26:	2264      	movs	r2, #100	@ 0x64
 800be28:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800be2a:	4b8d      	ldr	r3, [pc, #564]	@ (800c060 <MX_LWIP_Init+0x254>)
 800be2c:	22ff      	movs	r2, #255	@ 0xff
 800be2e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800be30:	4b8b      	ldr	r3, [pc, #556]	@ (800c060 <MX_LWIP_Init+0x254>)
 800be32:	22ff      	movs	r2, #255	@ 0xff
 800be34:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800be36:	4b8a      	ldr	r3, [pc, #552]	@ (800c060 <MX_LWIP_Init+0x254>)
 800be38:	22ff      	movs	r2, #255	@ 0xff
 800be3a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800be3c:	4b88      	ldr	r3, [pc, #544]	@ (800c060 <MX_LWIP_Init+0x254>)
 800be3e:	2200      	movs	r2, #0
 800be40:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 800be42:	4b88      	ldr	r3, [pc, #544]	@ (800c064 <MX_LWIP_Init+0x258>)
 800be44:	220a      	movs	r2, #10
 800be46:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800be48:	4b86      	ldr	r3, [pc, #536]	@ (800c064 <MX_LWIP_Init+0x258>)
 800be4a:	2200      	movs	r2, #0
 800be4c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800be4e:	4b85      	ldr	r3, [pc, #532]	@ (800c064 <MX_LWIP_Init+0x258>)
 800be50:	2201      	movs	r2, #1
 800be52:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 101;
 800be54:	4b83      	ldr	r3, [pc, #524]	@ (800c064 <MX_LWIP_Init+0x258>)
 800be56:	2265      	movs	r2, #101	@ 0x65
 800be58:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800be5a:	2100      	movs	r1, #0
 800be5c:	2000      	movs	r0, #0
 800be5e:	f006 ff95 	bl	8012d8c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800be62:	4b7e      	ldr	r3, [pc, #504]	@ (800c05c <MX_LWIP_Init+0x250>)
 800be64:	781b      	ldrb	r3, [r3, #0]
 800be66:	061a      	lsls	r2, r3, #24
 800be68:	4b7c      	ldr	r3, [pc, #496]	@ (800c05c <MX_LWIP_Init+0x250>)
 800be6a:	785b      	ldrb	r3, [r3, #1]
 800be6c:	041b      	lsls	r3, r3, #16
 800be6e:	431a      	orrs	r2, r3
 800be70:	4b7a      	ldr	r3, [pc, #488]	@ (800c05c <MX_LWIP_Init+0x250>)
 800be72:	789b      	ldrb	r3, [r3, #2]
 800be74:	021b      	lsls	r3, r3, #8
 800be76:	4313      	orrs	r3, r2
 800be78:	4a78      	ldr	r2, [pc, #480]	@ (800c05c <MX_LWIP_Init+0x250>)
 800be7a:	78d2      	ldrb	r2, [r2, #3]
 800be7c:	4313      	orrs	r3, r2
 800be7e:	061a      	lsls	r2, r3, #24
 800be80:	4b76      	ldr	r3, [pc, #472]	@ (800c05c <MX_LWIP_Init+0x250>)
 800be82:	781b      	ldrb	r3, [r3, #0]
 800be84:	0619      	lsls	r1, r3, #24
 800be86:	4b75      	ldr	r3, [pc, #468]	@ (800c05c <MX_LWIP_Init+0x250>)
 800be88:	785b      	ldrb	r3, [r3, #1]
 800be8a:	041b      	lsls	r3, r3, #16
 800be8c:	4319      	orrs	r1, r3
 800be8e:	4b73      	ldr	r3, [pc, #460]	@ (800c05c <MX_LWIP_Init+0x250>)
 800be90:	789b      	ldrb	r3, [r3, #2]
 800be92:	021b      	lsls	r3, r3, #8
 800be94:	430b      	orrs	r3, r1
 800be96:	4971      	ldr	r1, [pc, #452]	@ (800c05c <MX_LWIP_Init+0x250>)
 800be98:	78c9      	ldrb	r1, [r1, #3]
 800be9a:	430b      	orrs	r3, r1
 800be9c:	021b      	lsls	r3, r3, #8
 800be9e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bea2:	431a      	orrs	r2, r3
 800bea4:	4b6d      	ldr	r3, [pc, #436]	@ (800c05c <MX_LWIP_Init+0x250>)
 800bea6:	781b      	ldrb	r3, [r3, #0]
 800bea8:	0619      	lsls	r1, r3, #24
 800beaa:	4b6c      	ldr	r3, [pc, #432]	@ (800c05c <MX_LWIP_Init+0x250>)
 800beac:	785b      	ldrb	r3, [r3, #1]
 800beae:	041b      	lsls	r3, r3, #16
 800beb0:	4319      	orrs	r1, r3
 800beb2:	4b6a      	ldr	r3, [pc, #424]	@ (800c05c <MX_LWIP_Init+0x250>)
 800beb4:	789b      	ldrb	r3, [r3, #2]
 800beb6:	021b      	lsls	r3, r3, #8
 800beb8:	430b      	orrs	r3, r1
 800beba:	4968      	ldr	r1, [pc, #416]	@ (800c05c <MX_LWIP_Init+0x250>)
 800bebc:	78c9      	ldrb	r1, [r1, #3]
 800bebe:	430b      	orrs	r3, r1
 800bec0:	0a1b      	lsrs	r3, r3, #8
 800bec2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bec6:	431a      	orrs	r2, r3
 800bec8:	4b64      	ldr	r3, [pc, #400]	@ (800c05c <MX_LWIP_Init+0x250>)
 800beca:	781b      	ldrb	r3, [r3, #0]
 800becc:	0619      	lsls	r1, r3, #24
 800bece:	4b63      	ldr	r3, [pc, #396]	@ (800c05c <MX_LWIP_Init+0x250>)
 800bed0:	785b      	ldrb	r3, [r3, #1]
 800bed2:	041b      	lsls	r3, r3, #16
 800bed4:	4319      	orrs	r1, r3
 800bed6:	4b61      	ldr	r3, [pc, #388]	@ (800c05c <MX_LWIP_Init+0x250>)
 800bed8:	789b      	ldrb	r3, [r3, #2]
 800beda:	021b      	lsls	r3, r3, #8
 800bedc:	430b      	orrs	r3, r1
 800bede:	495f      	ldr	r1, [pc, #380]	@ (800c05c <MX_LWIP_Init+0x250>)
 800bee0:	78c9      	ldrb	r1, [r1, #3]
 800bee2:	430b      	orrs	r3, r1
 800bee4:	0e1b      	lsrs	r3, r3, #24
 800bee6:	4313      	orrs	r3, r2
 800bee8:	4a5f      	ldr	r2, [pc, #380]	@ (800c068 <MX_LWIP_Init+0x25c>)
 800beea:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800beec:	4b5c      	ldr	r3, [pc, #368]	@ (800c060 <MX_LWIP_Init+0x254>)
 800beee:	781b      	ldrb	r3, [r3, #0]
 800bef0:	061a      	lsls	r2, r3, #24
 800bef2:	4b5b      	ldr	r3, [pc, #364]	@ (800c060 <MX_LWIP_Init+0x254>)
 800bef4:	785b      	ldrb	r3, [r3, #1]
 800bef6:	041b      	lsls	r3, r3, #16
 800bef8:	431a      	orrs	r2, r3
 800befa:	4b59      	ldr	r3, [pc, #356]	@ (800c060 <MX_LWIP_Init+0x254>)
 800befc:	789b      	ldrb	r3, [r3, #2]
 800befe:	021b      	lsls	r3, r3, #8
 800bf00:	4313      	orrs	r3, r2
 800bf02:	4a57      	ldr	r2, [pc, #348]	@ (800c060 <MX_LWIP_Init+0x254>)
 800bf04:	78d2      	ldrb	r2, [r2, #3]
 800bf06:	4313      	orrs	r3, r2
 800bf08:	061a      	lsls	r2, r3, #24
 800bf0a:	4b55      	ldr	r3, [pc, #340]	@ (800c060 <MX_LWIP_Init+0x254>)
 800bf0c:	781b      	ldrb	r3, [r3, #0]
 800bf0e:	0619      	lsls	r1, r3, #24
 800bf10:	4b53      	ldr	r3, [pc, #332]	@ (800c060 <MX_LWIP_Init+0x254>)
 800bf12:	785b      	ldrb	r3, [r3, #1]
 800bf14:	041b      	lsls	r3, r3, #16
 800bf16:	4319      	orrs	r1, r3
 800bf18:	4b51      	ldr	r3, [pc, #324]	@ (800c060 <MX_LWIP_Init+0x254>)
 800bf1a:	789b      	ldrb	r3, [r3, #2]
 800bf1c:	021b      	lsls	r3, r3, #8
 800bf1e:	430b      	orrs	r3, r1
 800bf20:	494f      	ldr	r1, [pc, #316]	@ (800c060 <MX_LWIP_Init+0x254>)
 800bf22:	78c9      	ldrb	r1, [r1, #3]
 800bf24:	430b      	orrs	r3, r1
 800bf26:	021b      	lsls	r3, r3, #8
 800bf28:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bf2c:	431a      	orrs	r2, r3
 800bf2e:	4b4c      	ldr	r3, [pc, #304]	@ (800c060 <MX_LWIP_Init+0x254>)
 800bf30:	781b      	ldrb	r3, [r3, #0]
 800bf32:	0619      	lsls	r1, r3, #24
 800bf34:	4b4a      	ldr	r3, [pc, #296]	@ (800c060 <MX_LWIP_Init+0x254>)
 800bf36:	785b      	ldrb	r3, [r3, #1]
 800bf38:	041b      	lsls	r3, r3, #16
 800bf3a:	4319      	orrs	r1, r3
 800bf3c:	4b48      	ldr	r3, [pc, #288]	@ (800c060 <MX_LWIP_Init+0x254>)
 800bf3e:	789b      	ldrb	r3, [r3, #2]
 800bf40:	021b      	lsls	r3, r3, #8
 800bf42:	430b      	orrs	r3, r1
 800bf44:	4946      	ldr	r1, [pc, #280]	@ (800c060 <MX_LWIP_Init+0x254>)
 800bf46:	78c9      	ldrb	r1, [r1, #3]
 800bf48:	430b      	orrs	r3, r1
 800bf4a:	0a1b      	lsrs	r3, r3, #8
 800bf4c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bf50:	431a      	orrs	r2, r3
 800bf52:	4b43      	ldr	r3, [pc, #268]	@ (800c060 <MX_LWIP_Init+0x254>)
 800bf54:	781b      	ldrb	r3, [r3, #0]
 800bf56:	0619      	lsls	r1, r3, #24
 800bf58:	4b41      	ldr	r3, [pc, #260]	@ (800c060 <MX_LWIP_Init+0x254>)
 800bf5a:	785b      	ldrb	r3, [r3, #1]
 800bf5c:	041b      	lsls	r3, r3, #16
 800bf5e:	4319      	orrs	r1, r3
 800bf60:	4b3f      	ldr	r3, [pc, #252]	@ (800c060 <MX_LWIP_Init+0x254>)
 800bf62:	789b      	ldrb	r3, [r3, #2]
 800bf64:	021b      	lsls	r3, r3, #8
 800bf66:	430b      	orrs	r3, r1
 800bf68:	493d      	ldr	r1, [pc, #244]	@ (800c060 <MX_LWIP_Init+0x254>)
 800bf6a:	78c9      	ldrb	r1, [r1, #3]
 800bf6c:	430b      	orrs	r3, r1
 800bf6e:	0e1b      	lsrs	r3, r3, #24
 800bf70:	4313      	orrs	r3, r2
 800bf72:	4a3e      	ldr	r2, [pc, #248]	@ (800c06c <MX_LWIP_Init+0x260>)
 800bf74:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800bf76:	4b3b      	ldr	r3, [pc, #236]	@ (800c064 <MX_LWIP_Init+0x258>)
 800bf78:	781b      	ldrb	r3, [r3, #0]
 800bf7a:	061a      	lsls	r2, r3, #24
 800bf7c:	4b39      	ldr	r3, [pc, #228]	@ (800c064 <MX_LWIP_Init+0x258>)
 800bf7e:	785b      	ldrb	r3, [r3, #1]
 800bf80:	041b      	lsls	r3, r3, #16
 800bf82:	431a      	orrs	r2, r3
 800bf84:	4b37      	ldr	r3, [pc, #220]	@ (800c064 <MX_LWIP_Init+0x258>)
 800bf86:	789b      	ldrb	r3, [r3, #2]
 800bf88:	021b      	lsls	r3, r3, #8
 800bf8a:	4313      	orrs	r3, r2
 800bf8c:	4a35      	ldr	r2, [pc, #212]	@ (800c064 <MX_LWIP_Init+0x258>)
 800bf8e:	78d2      	ldrb	r2, [r2, #3]
 800bf90:	4313      	orrs	r3, r2
 800bf92:	061a      	lsls	r2, r3, #24
 800bf94:	4b33      	ldr	r3, [pc, #204]	@ (800c064 <MX_LWIP_Init+0x258>)
 800bf96:	781b      	ldrb	r3, [r3, #0]
 800bf98:	0619      	lsls	r1, r3, #24
 800bf9a:	4b32      	ldr	r3, [pc, #200]	@ (800c064 <MX_LWIP_Init+0x258>)
 800bf9c:	785b      	ldrb	r3, [r3, #1]
 800bf9e:	041b      	lsls	r3, r3, #16
 800bfa0:	4319      	orrs	r1, r3
 800bfa2:	4b30      	ldr	r3, [pc, #192]	@ (800c064 <MX_LWIP_Init+0x258>)
 800bfa4:	789b      	ldrb	r3, [r3, #2]
 800bfa6:	021b      	lsls	r3, r3, #8
 800bfa8:	430b      	orrs	r3, r1
 800bfaa:	492e      	ldr	r1, [pc, #184]	@ (800c064 <MX_LWIP_Init+0x258>)
 800bfac:	78c9      	ldrb	r1, [r1, #3]
 800bfae:	430b      	orrs	r3, r1
 800bfb0:	021b      	lsls	r3, r3, #8
 800bfb2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bfb6:	431a      	orrs	r2, r3
 800bfb8:	4b2a      	ldr	r3, [pc, #168]	@ (800c064 <MX_LWIP_Init+0x258>)
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	0619      	lsls	r1, r3, #24
 800bfbe:	4b29      	ldr	r3, [pc, #164]	@ (800c064 <MX_LWIP_Init+0x258>)
 800bfc0:	785b      	ldrb	r3, [r3, #1]
 800bfc2:	041b      	lsls	r3, r3, #16
 800bfc4:	4319      	orrs	r1, r3
 800bfc6:	4b27      	ldr	r3, [pc, #156]	@ (800c064 <MX_LWIP_Init+0x258>)
 800bfc8:	789b      	ldrb	r3, [r3, #2]
 800bfca:	021b      	lsls	r3, r3, #8
 800bfcc:	430b      	orrs	r3, r1
 800bfce:	4925      	ldr	r1, [pc, #148]	@ (800c064 <MX_LWIP_Init+0x258>)
 800bfd0:	78c9      	ldrb	r1, [r1, #3]
 800bfd2:	430b      	orrs	r3, r1
 800bfd4:	0a1b      	lsrs	r3, r3, #8
 800bfd6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bfda:	431a      	orrs	r2, r3
 800bfdc:	4b21      	ldr	r3, [pc, #132]	@ (800c064 <MX_LWIP_Init+0x258>)
 800bfde:	781b      	ldrb	r3, [r3, #0]
 800bfe0:	0619      	lsls	r1, r3, #24
 800bfe2:	4b20      	ldr	r3, [pc, #128]	@ (800c064 <MX_LWIP_Init+0x258>)
 800bfe4:	785b      	ldrb	r3, [r3, #1]
 800bfe6:	041b      	lsls	r3, r3, #16
 800bfe8:	4319      	orrs	r1, r3
 800bfea:	4b1e      	ldr	r3, [pc, #120]	@ (800c064 <MX_LWIP_Init+0x258>)
 800bfec:	789b      	ldrb	r3, [r3, #2]
 800bfee:	021b      	lsls	r3, r3, #8
 800bff0:	430b      	orrs	r3, r1
 800bff2:	491c      	ldr	r1, [pc, #112]	@ (800c064 <MX_LWIP_Init+0x258>)
 800bff4:	78c9      	ldrb	r1, [r1, #3]
 800bff6:	430b      	orrs	r3, r1
 800bff8:	0e1b      	lsrs	r3, r3, #24
 800bffa:	4313      	orrs	r3, r2
 800bffc:	4a1c      	ldr	r2, [pc, #112]	@ (800c070 <MX_LWIP_Init+0x264>)
 800bffe:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800c000:	4b1c      	ldr	r3, [pc, #112]	@ (800c074 <MX_LWIP_Init+0x268>)
 800c002:	9302      	str	r3, [sp, #8]
 800c004:	4b1c      	ldr	r3, [pc, #112]	@ (800c078 <MX_LWIP_Init+0x26c>)
 800c006:	9301      	str	r3, [sp, #4]
 800c008:	2300      	movs	r3, #0
 800c00a:	9300      	str	r3, [sp, #0]
 800c00c:	4b18      	ldr	r3, [pc, #96]	@ (800c070 <MX_LWIP_Init+0x264>)
 800c00e:	4a17      	ldr	r2, [pc, #92]	@ (800c06c <MX_LWIP_Init+0x260>)
 800c010:	4915      	ldr	r1, [pc, #84]	@ (800c068 <MX_LWIP_Init+0x25c>)
 800c012:	481a      	ldr	r0, [pc, #104]	@ (800c07c <MX_LWIP_Init+0x270>)
 800c014:	f007 fd7e 	bl	8013b14 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800c018:	4818      	ldr	r0, [pc, #96]	@ (800c07c <MX_LWIP_Init+0x270>)
 800c01a:	f008 f80f 	bl	801403c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800c01e:	4817      	ldr	r0, [pc, #92]	@ (800c07c <MX_LWIP_Init+0x270>)
 800c020:	f008 f830 	bl	8014084 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800c024:	4916      	ldr	r1, [pc, #88]	@ (800c080 <MX_LWIP_Init+0x274>)
 800c026:	4815      	ldr	r0, [pc, #84]	@ (800c07c <MX_LWIP_Init+0x270>)
 800c028:	f008 f92e 	bl	8014288 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800c02c:	2224      	movs	r2, #36	@ 0x24
 800c02e:	2100      	movs	r1, #0
 800c030:	4814      	ldr	r0, [pc, #80]	@ (800c084 <MX_LWIP_Init+0x278>)
 800c032:	f014 fd11 	bl	8020a58 <memset>
  attributes.name = "EthLink";
 800c036:	4b13      	ldr	r3, [pc, #76]	@ (800c084 <MX_LWIP_Init+0x278>)
 800c038:	4a13      	ldr	r2, [pc, #76]	@ (800c088 <MX_LWIP_Init+0x27c>)
 800c03a:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800c03c:	4b11      	ldr	r3, [pc, #68]	@ (800c084 <MX_LWIP_Init+0x278>)
 800c03e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c042:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800c044:	4b0f      	ldr	r3, [pc, #60]	@ (800c084 <MX_LWIP_Init+0x278>)
 800c046:	2210      	movs	r2, #16
 800c048:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800c04a:	4a0e      	ldr	r2, [pc, #56]	@ (800c084 <MX_LWIP_Init+0x278>)
 800c04c:	490b      	ldr	r1, [pc, #44]	@ (800c07c <MX_LWIP_Init+0x270>)
 800c04e:	480f      	ldr	r0, [pc, #60]	@ (800c08c <MX_LWIP_Init+0x280>)
 800c050:	f000 fdce 	bl	800cbf0 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800c054:	bf00      	nop
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}
 800c05a:	bf00      	nop
 800c05c:	20000b90 	.word	0x20000b90
 800c060:	20000b94 	.word	0x20000b94
 800c064:	20000b98 	.word	0x20000b98
 800c068:	20000b84 	.word	0x20000b84
 800c06c:	20000b88 	.word	0x20000b88
 800c070:	20000b8c 	.word	0x20000b8c
 800c074:	08012c9d 	.word	0x08012c9d
 800c078:	0800c5d1 	.word	0x0800c5d1
 800c07c:	20000b50 	.word	0x20000b50
 800c080:	0800c091 	.word	0x0800c091
 800c084:	20000b9c 	.word	0x20000b9c
 800c088:	080218e4 	.word	0x080218e4
 800c08c:	0800c8a9 	.word	0x0800c8a9

0800c090 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800c090:	b480      	push	{r7}
 800c092:	b083      	sub	sp, #12
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800c098:	bf00      	nop
 800c09a:	370c      	adds	r7, #12
 800c09c:	46bd      	mov	sp, r7
 800c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a2:	4770      	bx	lr

0800c0a4 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b087      	sub	sp, #28
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800c0b6:	2320      	movs	r3, #32
 800c0b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800c0ba:	f3bf 8f4f 	dsb	sy
}
 800c0be:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 800c0c0:	e00b      	b.n	800c0da <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800c0c2:	4a0d      	ldr	r2, [pc, #52]	@ (800c0f8 <SCB_InvalidateDCache_by_Addr+0x54>)
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	693a      	ldr	r2, [r7, #16]
 800c0ce:	4413      	add	r3, r2
 800c0d0:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800c0d2:	697a      	ldr	r2, [r7, #20]
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	1ad3      	subs	r3, r2, r3
 800c0d8:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	dcf0      	bgt.n	800c0c2 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800c0e0:	f3bf 8f4f 	dsb	sy
}
 800c0e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c0e6:	f3bf 8f6f 	isb	sy
}
 800c0ea:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 800c0ec:	bf00      	nop
 800c0ee:	371c      	adds	r7, #28
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f6:	4770      	bx	lr
 800c0f8:	e000ed00 	.word	0xe000ed00

0800c0fc <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b082      	sub	sp, #8
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800c104:	4b04      	ldr	r3, [pc, #16]	@ (800c118 <HAL_ETH_RxCpltCallback+0x1c>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	4618      	mov	r0, r3
 800c10a:	f001 f897 	bl	800d23c <osSemaphoreRelease>
}
 800c10e:	bf00      	nop
 800c110:	3708      	adds	r7, #8
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}
 800c116:	bf00      	nop
 800c118:	2000cfdc 	.word	0x2000cfdc

0800c11c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b082      	sub	sp, #8
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800c124:	4b04      	ldr	r3, [pc, #16]	@ (800c138 <HAL_ETH_TxCpltCallback+0x1c>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	4618      	mov	r0, r3
 800c12a:	f001 f887 	bl	800d23c <osSemaphoreRelease>
}
 800c12e:	bf00      	nop
 800c130:	3708      	adds	r7, #8
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}
 800c136:	bf00      	nop
 800c138:	2000cfe0 	.word	0x2000cfe0

0800c13c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b082      	sub	sp, #8
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f7f8 fb90 	bl	800486a <HAL_ETH_GetDMAError>
 800c14a:	4603      	mov	r3, r0
 800c14c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c150:	2b80      	cmp	r3, #128	@ 0x80
 800c152:	d104      	bne.n	800c15e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800c154:	4b04      	ldr	r3, [pc, #16]	@ (800c168 <HAL_ETH_ErrorCallback+0x2c>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4618      	mov	r0, r3
 800c15a:	f001 f86f 	bl	800d23c <osSemaphoreRelease>
  }
}
 800c15e:	bf00      	nop
 800c160:	3708      	adds	r7, #8
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
 800c166:	bf00      	nop
 800c168:	2000cfdc 	.word	0x2000cfdc

0800c16c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b0aa      	sub	sp, #168	@ 0xa8
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800c174:	2300      	movs	r3, #0
 800c176:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800c17a:	2300      	movs	r3, #0
 800c17c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 800c180:	2300      	movs	r3, #0
 800c182:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800c186:	f107 0310 	add.w	r3, r7, #16
 800c18a:	2264      	movs	r2, #100	@ 0x64
 800c18c:	2100      	movs	r1, #0
 800c18e:	4618      	mov	r0, r3
 800c190:	f014 fc62 	bl	8020a58 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800c194:	4b89      	ldr	r3, [pc, #548]	@ (800c3bc <low_level_init+0x250>)
 800c196:	4a8a      	ldr	r2, [pc, #552]	@ (800c3c0 <low_level_init+0x254>)
 800c198:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800c19a:	2300      	movs	r3, #0
 800c19c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800c19e:	2380      	movs	r3, #128	@ 0x80
 800c1a0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800c1a2:	23e1      	movs	r3, #225	@ 0xe1
 800c1a4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800c1b2:	4a82      	ldr	r2, [pc, #520]	@ (800c3bc <low_level_init+0x250>)
 800c1b4:	f107 0308 	add.w	r3, r7, #8
 800c1b8:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800c1ba:	4b80      	ldr	r3, [pc, #512]	@ (800c3bc <low_level_init+0x250>)
 800c1bc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800c1c0:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800c1c2:	4b7e      	ldr	r3, [pc, #504]	@ (800c3bc <low_level_init+0x250>)
 800c1c4:	4a7f      	ldr	r2, [pc, #508]	@ (800c3c4 <low_level_init+0x258>)
 800c1c6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800c1c8:	4b7c      	ldr	r3, [pc, #496]	@ (800c3bc <low_level_init+0x250>)
 800c1ca:	4a7f      	ldr	r2, [pc, #508]	@ (800c3c8 <low_level_init+0x25c>)
 800c1cc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800c1ce:	4b7b      	ldr	r3, [pc, #492]	@ (800c3bc <low_level_init+0x250>)
 800c1d0:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800c1d4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800c1d6:	4879      	ldr	r0, [pc, #484]	@ (800c3bc <low_level_init+0x250>)
 800c1d8:	f7f7 fcfe 	bl	8003bd8 <HAL_ETH_Init>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800c1e2:	2238      	movs	r2, #56	@ 0x38
 800c1e4:	2100      	movs	r1, #0
 800c1e6:	4879      	ldr	r0, [pc, #484]	@ (800c3cc <low_level_init+0x260>)
 800c1e8:	f014 fc36 	bl	8020a58 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800c1ec:	4b77      	ldr	r3, [pc, #476]	@ (800c3cc <low_level_init+0x260>)
 800c1ee:	2221      	movs	r2, #33	@ 0x21
 800c1f0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800c1f2:	4b76      	ldr	r3, [pc, #472]	@ (800c3cc <low_level_init+0x260>)
 800c1f4:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800c1f8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800c1fa:	4b74      	ldr	r3, [pc, #464]	@ (800c3cc <low_level_init+0x260>)
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800c200:	4873      	ldr	r0, [pc, #460]	@ (800c3d0 <low_level_init+0x264>)
 800c202:	f007 fb03 	bl	801380c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2206      	movs	r2, #6
 800c20a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800c20e:	4b6b      	ldr	r3, [pc, #428]	@ (800c3bc <low_level_init+0x250>)
 800c210:	685b      	ldr	r3, [r3, #4]
 800c212:	781a      	ldrb	r2, [r3, #0]
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800c21a:	4b68      	ldr	r3, [pc, #416]	@ (800c3bc <low_level_init+0x250>)
 800c21c:	685b      	ldr	r3, [r3, #4]
 800c21e:	785a      	ldrb	r2, [r3, #1]
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800c226:	4b65      	ldr	r3, [pc, #404]	@ (800c3bc <low_level_init+0x250>)
 800c228:	685b      	ldr	r3, [r3, #4]
 800c22a:	789a      	ldrb	r2, [r3, #2]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800c232:	4b62      	ldr	r3, [pc, #392]	@ (800c3bc <low_level_init+0x250>)
 800c234:	685b      	ldr	r3, [r3, #4]
 800c236:	78da      	ldrb	r2, [r3, #3]
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800c23e:	4b5f      	ldr	r3, [pc, #380]	@ (800c3bc <low_level_init+0x250>)
 800c240:	685b      	ldr	r3, [r3, #4]
 800c242:	791a      	ldrb	r2, [r3, #4]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800c24a:	4b5c      	ldr	r3, [pc, #368]	@ (800c3bc <low_level_init+0x250>)
 800c24c:	685b      	ldr	r3, [r3, #4]
 800c24e:	795a      	ldrb	r2, [r3, #5]
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800c25c:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c264:	f043 030a 	orr.w	r3, r3, #10
 800c268:	b2da      	uxtb	r2, r3
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800c270:	2200      	movs	r2, #0
 800c272:	2100      	movs	r1, #0
 800c274:	2001      	movs	r0, #1
 800c276:	f000 fedf 	bl	800d038 <osSemaphoreNew>
 800c27a:	4603      	mov	r3, r0
 800c27c:	4a55      	ldr	r2, [pc, #340]	@ (800c3d4 <low_level_init+0x268>)
 800c27e:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800c280:	2200      	movs	r2, #0
 800c282:	2100      	movs	r1, #0
 800c284:	2001      	movs	r0, #1
 800c286:	f000 fed7 	bl	800d038 <osSemaphoreNew>
 800c28a:	4603      	mov	r3, r0
 800c28c:	4a52      	ldr	r2, [pc, #328]	@ (800c3d8 <low_level_init+0x26c>)
 800c28e:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800c290:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800c294:	2224      	movs	r2, #36	@ 0x24
 800c296:	2100      	movs	r1, #0
 800c298:	4618      	mov	r0, r3
 800c29a:	f014 fbdd 	bl	8020a58 <memset>
  attributes.name = "EthIf";
 800c29e:	4b4f      	ldr	r3, [pc, #316]	@ (800c3dc <low_level_init+0x270>)
 800c2a0:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800c2a2:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800c2a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 800c2aa:	2330      	movs	r3, #48	@ 0x30
 800c2ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800c2b0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800c2b4:	461a      	mov	r2, r3
 800c2b6:	6879      	ldr	r1, [r7, #4]
 800c2b8:	4849      	ldr	r0, [pc, #292]	@ (800c3e0 <low_level_init+0x274>)
 800c2ba:	f000 fc99 	bl	800cbf0 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800c2be:	4949      	ldr	r1, [pc, #292]	@ (800c3e4 <low_level_init+0x278>)
 800c2c0:	4849      	ldr	r0, [pc, #292]	@ (800c3e8 <low_level_init+0x27c>)
 800c2c2:	f7f5 ff48 	bl	8002156 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800c2c6:	4848      	ldr	r0, [pc, #288]	@ (800c3e8 <low_level_init+0x27c>)
 800c2c8:	f7f5 ff77 	bl	80021ba <LAN8742_Init>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d006      	beq.n	800c2e0 <low_level_init+0x174>
  {
    netif_set_link_down(netif);
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f007 ffa8 	bl	8014228 <netif_set_link_down>
    netif_set_down(netif);
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f007 ff3f 	bl	801415c <netif_set_down>
 800c2de:	e06a      	b.n	800c3b6 <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800c2e0:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d164      	bne.n	800c3b2 <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c2e8:	483f      	ldr	r0, [pc, #252]	@ (800c3e8 <low_level_init+0x27c>)
 800c2ea:	f7f5 ffb3 	bl	8002254 <LAN8742_GetLinkState>
 800c2ee:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800c2f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c2f6:	2b01      	cmp	r3, #1
 800c2f8:	dc06      	bgt.n	800c308 <low_level_init+0x19c>
    {
      netif_set_link_down(netif);
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f007 ff94 	bl	8014228 <netif_set_link_down>
      netif_set_down(netif);
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f007 ff2b 	bl	801415c <netif_set_down>
 800c306:	e056      	b.n	800c3b6 <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 800c308:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c30c:	3b02      	subs	r3, #2
 800c30e:	2b03      	cmp	r3, #3
 800c310:	d82a      	bhi.n	800c368 <low_level_init+0x1fc>
 800c312:	a201      	add	r2, pc, #4	@ (adr r2, 800c318 <low_level_init+0x1ac>)
 800c314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c318:	0800c329 	.word	0x0800c329
 800c31c:	0800c33b 	.word	0x0800c33b
 800c320:	0800c34b 	.word	0x0800c34b
 800c324:	0800c35b 	.word	0x0800c35b
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800c328:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c32c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800c330:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c334:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c338:	e01f      	b.n	800c37a <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800c33a:	2300      	movs	r3, #0
 800c33c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800c340:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c344:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c348:	e017      	b.n	800c37a <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800c34a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c34e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800c352:	2300      	movs	r3, #0
 800c354:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c358:	e00f      	b.n	800c37a <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800c35a:	2300      	movs	r3, #0
 800c35c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800c360:	2300      	movs	r3, #0
 800c362:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c366:	e008      	b.n	800c37a <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 800c368:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c36c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800c370:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c374:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c378:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800c37a:	f107 0310 	add.w	r3, r7, #16
 800c37e:	4619      	mov	r1, r3
 800c380:	480e      	ldr	r0, [pc, #56]	@ (800c3bc <low_level_init+0x250>)
 800c382:	f7f8 f911 	bl	80045a8 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800c386:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c38a:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 800c38c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c390:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800c392:	f107 0310 	add.w	r3, r7, #16
 800c396:	4619      	mov	r1, r3
 800c398:	4808      	ldr	r0, [pc, #32]	@ (800c3bc <low_level_init+0x250>)
 800c39a:	f7f8 f9fc 	bl	8004796 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800c39e:	4807      	ldr	r0, [pc, #28]	@ (800c3bc <low_level_init+0x250>)
 800c3a0:	f7f7 fcb4 	bl	8003d0c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f007 fe6d 	bl	8014084 <netif_set_up>
    netif_set_link_up(netif);
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f007 ff08 	bl	80141c0 <netif_set_link_up>
 800c3b0:	e001      	b.n	800c3b6 <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 800c3b2:	f7f4 ff3b 	bl	800122c <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 800c3b6:	37a8      	adds	r7, #168	@ 0xa8
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}
 800c3bc:	2000cfe4 	.word	0x2000cfe4
 800c3c0:	40028000 	.word	0x40028000
 800c3c4:	20000170 	.word	0x20000170
 800c3c8:	200000d0 	.word	0x200000d0
 800c3cc:	2000d094 	.word	0x2000d094
 800c3d0:	080266f4 	.word	0x080266f4
 800c3d4:	2000cfdc 	.word	0x2000cfdc
 800c3d8:	2000cfe0 	.word	0x2000cfe0
 800c3dc:	08021904 	.word	0x08021904
 800c3e0:	0800c57d 	.word	0x0800c57d
 800c3e4:	2000000c 	.word	0x2000000c
 800c3e8:	2000d0cc 	.word	0x2000d0cc

0800c3ec <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b092      	sub	sp, #72	@ 0x48
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800c3fe:	2300      	movs	r3, #0
 800c400:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800c404:	f107 030c 	add.w	r3, r7, #12
 800c408:	2230      	movs	r2, #48	@ 0x30
 800c40a:	2100      	movs	r1, #0
 800c40c:	4618      	mov	r0, r3
 800c40e:	f014 fb23 	bl	8020a58 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800c412:	f107 030c 	add.w	r3, r7, #12
 800c416:	2230      	movs	r2, #48	@ 0x30
 800c418:	2100      	movs	r1, #0
 800c41a:	4618      	mov	r0, r3
 800c41c:	f014 fb1c 	bl	8020a58 <memset>

  for(q = p; q != NULL; q = q->next)
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	643b      	str	r3, [r7, #64]	@ 0x40
 800c424:	e045      	b.n	800c4b2 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800c426:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c428:	2b03      	cmp	r3, #3
 800c42a:	d902      	bls.n	800c432 <low_level_output+0x46>
      return ERR_IF;
 800c42c:	f06f 030b 	mvn.w	r3, #11
 800c430:	e07f      	b.n	800c532 <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800c432:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c434:	6859      	ldr	r1, [r3, #4]
 800c436:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c438:	4613      	mov	r3, r2
 800c43a:	005b      	lsls	r3, r3, #1
 800c43c:	4413      	add	r3, r2
 800c43e:	009b      	lsls	r3, r3, #2
 800c440:	3348      	adds	r3, #72	@ 0x48
 800c442:	443b      	add	r3, r7
 800c444:	3b3c      	subs	r3, #60	@ 0x3c
 800c446:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800c448:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c44a:	895b      	ldrh	r3, [r3, #10]
 800c44c:	4619      	mov	r1, r3
 800c44e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c450:	4613      	mov	r3, r2
 800c452:	005b      	lsls	r3, r3, #1
 800c454:	4413      	add	r3, r2
 800c456:	009b      	lsls	r3, r3, #2
 800c458:	3348      	adds	r3, #72	@ 0x48
 800c45a:	443b      	add	r3, r7
 800c45c:	3b38      	subs	r3, #56	@ 0x38
 800c45e:	6019      	str	r1, [r3, #0]

    if(i>0)
 800c460:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c462:	2b00      	cmp	r3, #0
 800c464:	d011      	beq.n	800c48a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800c466:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c468:	1e5a      	subs	r2, r3, #1
 800c46a:	f107 000c 	add.w	r0, r7, #12
 800c46e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c470:	460b      	mov	r3, r1
 800c472:	005b      	lsls	r3, r3, #1
 800c474:	440b      	add	r3, r1
 800c476:	009b      	lsls	r3, r3, #2
 800c478:	18c1      	adds	r1, r0, r3
 800c47a:	4613      	mov	r3, r2
 800c47c:	005b      	lsls	r3, r3, #1
 800c47e:	4413      	add	r3, r2
 800c480:	009b      	lsls	r3, r3, #2
 800c482:	3348      	adds	r3, #72	@ 0x48
 800c484:	443b      	add	r3, r7
 800c486:	3b34      	subs	r3, #52	@ 0x34
 800c488:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800c48a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d109      	bne.n	800c4a6 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800c492:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c494:	4613      	mov	r3, r2
 800c496:	005b      	lsls	r3, r3, #1
 800c498:	4413      	add	r3, r2
 800c49a:	009b      	lsls	r3, r3, #2
 800c49c:	3348      	adds	r3, #72	@ 0x48
 800c49e:	443b      	add	r3, r7
 800c4a0:	3b34      	subs	r3, #52	@ 0x34
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	601a      	str	r2, [r3, #0]
    }

    i++;
 800c4a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4a8:	3301      	adds	r3, #1
 800c4aa:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800c4ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	643b      	str	r3, [r7, #64]	@ 0x40
 800c4b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d1b6      	bne.n	800c426 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	891b      	ldrh	r3, [r3, #8]
 800c4bc:	461a      	mov	r2, r3
 800c4be:	4b1f      	ldr	r3, [pc, #124]	@ (800c53c <low_level_output+0x150>)
 800c4c0:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800c4c2:	4a1e      	ldr	r2, [pc, #120]	@ (800c53c <low_level_output+0x150>)
 800c4c4:	f107 030c 	add.w	r3, r7, #12
 800c4c8:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800c4ca:	4a1c      	ldr	r2, [pc, #112]	@ (800c53c <low_level_output+0x150>)
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800c4d0:	6838      	ldr	r0, [r7, #0]
 800c4d2:	f008 fb91 	bl	8014bf8 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800c4d6:	4919      	ldr	r1, [pc, #100]	@ (800c53c <low_level_output+0x150>)
 800c4d8:	4819      	ldr	r0, [pc, #100]	@ (800c540 <low_level_output+0x154>)
 800c4da:	f7f7 fd07 	bl	8003eec <HAL_ETH_Transmit_IT>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d103      	bne.n	800c4ec <low_level_output+0x100>
    {
      errval = ERR_OK;
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c4ea:	e01b      	b.n	800c524 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 800c4ec:	4814      	ldr	r0, [pc, #80]	@ (800c540 <low_level_output+0x154>)
 800c4ee:	f7f8 f9af 	bl	8004850 <HAL_ETH_GetError>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	f003 0302 	and.w	r3, r3, #2
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d00d      	beq.n	800c518 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(  TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800c4fc:	4b11      	ldr	r3, [pc, #68]	@ (800c544 <low_level_output+0x158>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800c504:	4618      	mov	r0, r3
 800c506:	f000 fe33 	bl	800d170 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 800c50a:	480d      	ldr	r0, [pc, #52]	@ (800c540 <low_level_output+0x154>)
 800c50c:	f7f7 fe8e 	bl	800422c <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800c510:	23fe      	movs	r3, #254	@ 0xfe
 800c512:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c516:	e005      	b.n	800c524 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 800c518:	6838      	ldr	r0, [r7, #0]
 800c51a:	f008 faaf 	bl	8014a7c <pbuf_free>
        errval =  ERR_IF;
 800c51e:	23f4      	movs	r3, #244	@ 0xf4
 800c520:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800c524:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c528:	f113 0f02 	cmn.w	r3, #2
 800c52c:	d0d3      	beq.n	800c4d6 <low_level_output+0xea>

  return errval;
 800c52e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800c532:	4618      	mov	r0, r3
 800c534:	3748      	adds	r7, #72	@ 0x48
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}
 800c53a:	bf00      	nop
 800c53c:	2000d094 	.word	0x2000d094
 800c540:	2000cfe4 	.word	0x2000cfe4
 800c544:	2000cfe0 	.word	0x2000cfe0

0800c548 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b084      	sub	sp, #16
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800c550:	2300      	movs	r3, #0
 800c552:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800c554:	4b07      	ldr	r3, [pc, #28]	@ (800c574 <low_level_input+0x2c>)
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d105      	bne.n	800c568 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800c55c:	f107 030c 	add.w	r3, r7, #12
 800c560:	4619      	mov	r1, r3
 800c562:	4805      	ldr	r0, [pc, #20]	@ (800c578 <low_level_input+0x30>)
 800c564:	f7f7 fd1e 	bl	8003fa4 <HAL_ETH_ReadData>
  }

  return p;
 800c568:	68fb      	ldr	r3, [r7, #12]
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	3710      	adds	r7, #16
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}
 800c572:	bf00      	nop
 800c574:	2000cfd8 	.word	0x2000cfd8
 800c578:	2000cfe4 	.word	0x2000cfe4

0800c57c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b084      	sub	sp, #16
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800c584:	2300      	movs	r3, #0
 800c586:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800c58c:	4b0f      	ldr	r3, [pc, #60]	@ (800c5cc <ethernetif_input+0x50>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800c594:	4618      	mov	r0, r3
 800c596:	f000 fdeb 	bl	800d170 <osSemaphoreAcquire>
 800c59a:	4603      	mov	r3, r0
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d1f5      	bne.n	800c58c <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800c5a0:	68b8      	ldr	r0, [r7, #8]
 800c5a2:	f7ff ffd1 	bl	800c548 <low_level_input>
 800c5a6:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d00a      	beq.n	800c5c4 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	691b      	ldr	r3, [r3, #16]
 800c5b2:	68b9      	ldr	r1, [r7, #8]
 800c5b4:	68f8      	ldr	r0, [r7, #12]
 800c5b6:	4798      	blx	r3
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d002      	beq.n	800c5c4 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800c5be:	68f8      	ldr	r0, [r7, #12]
 800c5c0:	f008 fa5c 	bl	8014a7c <pbuf_free>
          }
        }
      } while(p!=NULL);
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d1ea      	bne.n	800c5a0 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800c5ca:	e7df      	b.n	800c58c <ethernetif_input+0x10>
 800c5cc:	2000cfdc 	.word	0x2000cfdc

0800c5d0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b082      	sub	sp, #8
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d106      	bne.n	800c5ec <ethernetif_init+0x1c>
 800c5de:	4b0e      	ldr	r3, [pc, #56]	@ (800c618 <ethernetif_init+0x48>)
 800c5e0:	f240 220d 	movw	r2, #525	@ 0x20d
 800c5e4:	490d      	ldr	r1, [pc, #52]	@ (800c61c <ethernetif_init+0x4c>)
 800c5e6:	480e      	ldr	r0, [pc, #56]	@ (800c620 <ethernetif_init+0x50>)
 800c5e8:	f014 f8d6 	bl	8020798 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2273      	movs	r2, #115	@ 0x73
 800c5f0:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2274      	movs	r2, #116	@ 0x74
 800c5f8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	4a09      	ldr	r2, [pc, #36]	@ (800c624 <ethernetif_init+0x54>)
 800c600:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	4a08      	ldr	r2, [pc, #32]	@ (800c628 <ethernetif_init+0x58>)
 800c606:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f7ff fdaf 	bl	800c16c <low_level_init>

  return ERR_OK;
 800c60e:	2300      	movs	r3, #0
}
 800c610:	4618      	mov	r0, r3
 800c612:	3708      	adds	r7, #8
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}
 800c618:	0802190c 	.word	0x0802190c
 800c61c:	08021928 	.word	0x08021928
 800c620:	08021938 	.word	0x08021938
 800c624:	0801cc89 	.word	0x0801cc89
 800c628:	0800c3ed 	.word	0x0800c3ed

0800c62c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b084      	sub	sp, #16
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800c638:	68f9      	ldr	r1, [r7, #12]
 800c63a:	4809      	ldr	r0, [pc, #36]	@ (800c660 <pbuf_free_custom+0x34>)
 800c63c:	f007 fa14 	bl	8013a68 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800c640:	4b08      	ldr	r3, [pc, #32]	@ (800c664 <pbuf_free_custom+0x38>)
 800c642:	781b      	ldrb	r3, [r3, #0]
 800c644:	2b01      	cmp	r3, #1
 800c646:	d107      	bne.n	800c658 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800c648:	4b06      	ldr	r3, [pc, #24]	@ (800c664 <pbuf_free_custom+0x38>)
 800c64a:	2200      	movs	r2, #0
 800c64c:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800c64e:	4b06      	ldr	r3, [pc, #24]	@ (800c668 <pbuf_free_custom+0x3c>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	4618      	mov	r0, r3
 800c654:	f000 fdf2 	bl	800d23c <osSemaphoreRelease>
  }
}
 800c658:	bf00      	nop
 800c65a:	3710      	adds	r7, #16
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}
 800c660:	080266f4 	.word	0x080266f4
 800c664:	2000cfd8 	.word	0x2000cfd8
 800c668:	2000cfdc 	.word	0x2000cfdc

0800c66c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c670:	f7f5 fe98 	bl	80023a4 <HAL_GetTick>
 800c674:	4603      	mov	r3, r0
}
 800c676:	4618      	mov	r0, r3
 800c678:	bd80      	pop	{r7, pc}
	...

0800c67c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b08e      	sub	sp, #56	@ 0x38
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c684:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c688:	2200      	movs	r2, #0
 800c68a:	601a      	str	r2, [r3, #0]
 800c68c:	605a      	str	r2, [r3, #4]
 800c68e:	609a      	str	r2, [r3, #8]
 800c690:	60da      	str	r2, [r3, #12]
 800c692:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	4a56      	ldr	r2, [pc, #344]	@ (800c7f4 <HAL_ETH_MspInit+0x178>)
 800c69a:	4293      	cmp	r3, r2
 800c69c:	f040 80a6 	bne.w	800c7ec <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800c6a0:	4b55      	ldr	r3, [pc, #340]	@ (800c7f8 <HAL_ETH_MspInit+0x17c>)
 800c6a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6a4:	4a54      	ldr	r2, [pc, #336]	@ (800c7f8 <HAL_ETH_MspInit+0x17c>)
 800c6a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c6aa:	6313      	str	r3, [r2, #48]	@ 0x30
 800c6ac:	4b52      	ldr	r3, [pc, #328]	@ (800c7f8 <HAL_ETH_MspInit+0x17c>)
 800c6ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c6b4:	623b      	str	r3, [r7, #32]
 800c6b6:	6a3b      	ldr	r3, [r7, #32]
 800c6b8:	4b4f      	ldr	r3, [pc, #316]	@ (800c7f8 <HAL_ETH_MspInit+0x17c>)
 800c6ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6bc:	4a4e      	ldr	r2, [pc, #312]	@ (800c7f8 <HAL_ETH_MspInit+0x17c>)
 800c6be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c6c2:	6313      	str	r3, [r2, #48]	@ 0x30
 800c6c4:	4b4c      	ldr	r3, [pc, #304]	@ (800c7f8 <HAL_ETH_MspInit+0x17c>)
 800c6c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c6cc:	61fb      	str	r3, [r7, #28]
 800c6ce:	69fb      	ldr	r3, [r7, #28]
 800c6d0:	4b49      	ldr	r3, [pc, #292]	@ (800c7f8 <HAL_ETH_MspInit+0x17c>)
 800c6d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6d4:	4a48      	ldr	r2, [pc, #288]	@ (800c7f8 <HAL_ETH_MspInit+0x17c>)
 800c6d6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c6da:	6313      	str	r3, [r2, #48]	@ 0x30
 800c6dc:	4b46      	ldr	r3, [pc, #280]	@ (800c7f8 <HAL_ETH_MspInit+0x17c>)
 800c6de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c6e4:	61bb      	str	r3, [r7, #24]
 800c6e6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c6e8:	4b43      	ldr	r3, [pc, #268]	@ (800c7f8 <HAL_ETH_MspInit+0x17c>)
 800c6ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6ec:	4a42      	ldr	r2, [pc, #264]	@ (800c7f8 <HAL_ETH_MspInit+0x17c>)
 800c6ee:	f043 0304 	orr.w	r3, r3, #4
 800c6f2:	6313      	str	r3, [r2, #48]	@ 0x30
 800c6f4:	4b40      	ldr	r3, [pc, #256]	@ (800c7f8 <HAL_ETH_MspInit+0x17c>)
 800c6f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6f8:	f003 0304 	and.w	r3, r3, #4
 800c6fc:	617b      	str	r3, [r7, #20]
 800c6fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c700:	4b3d      	ldr	r3, [pc, #244]	@ (800c7f8 <HAL_ETH_MspInit+0x17c>)
 800c702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c704:	4a3c      	ldr	r2, [pc, #240]	@ (800c7f8 <HAL_ETH_MspInit+0x17c>)
 800c706:	f043 0301 	orr.w	r3, r3, #1
 800c70a:	6313      	str	r3, [r2, #48]	@ 0x30
 800c70c:	4b3a      	ldr	r3, [pc, #232]	@ (800c7f8 <HAL_ETH_MspInit+0x17c>)
 800c70e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c710:	f003 0301 	and.w	r3, r3, #1
 800c714:	613b      	str	r3, [r7, #16]
 800c716:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c718:	4b37      	ldr	r3, [pc, #220]	@ (800c7f8 <HAL_ETH_MspInit+0x17c>)
 800c71a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c71c:	4a36      	ldr	r2, [pc, #216]	@ (800c7f8 <HAL_ETH_MspInit+0x17c>)
 800c71e:	f043 0302 	orr.w	r3, r3, #2
 800c722:	6313      	str	r3, [r2, #48]	@ 0x30
 800c724:	4b34      	ldr	r3, [pc, #208]	@ (800c7f8 <HAL_ETH_MspInit+0x17c>)
 800c726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c728:	f003 0302 	and.w	r3, r3, #2
 800c72c:	60fb      	str	r3, [r7, #12]
 800c72e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800c730:	4b31      	ldr	r3, [pc, #196]	@ (800c7f8 <HAL_ETH_MspInit+0x17c>)
 800c732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c734:	4a30      	ldr	r2, [pc, #192]	@ (800c7f8 <HAL_ETH_MspInit+0x17c>)
 800c736:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c73a:	6313      	str	r3, [r2, #48]	@ 0x30
 800c73c:	4b2e      	ldr	r3, [pc, #184]	@ (800c7f8 <HAL_ETH_MspInit+0x17c>)
 800c73e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c744:	60bb      	str	r3, [r7, #8]
 800c746:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800c748:	2332      	movs	r3, #50	@ 0x32
 800c74a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c74c:	2302      	movs	r3, #2
 800c74e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c750:	2300      	movs	r3, #0
 800c752:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c754:	2303      	movs	r3, #3
 800c756:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c758:	230b      	movs	r3, #11
 800c75a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c75c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c760:	4619      	mov	r1, r3
 800c762:	4826      	ldr	r0, [pc, #152]	@ (800c7fc <HAL_ETH_MspInit+0x180>)
 800c764:	f7f8 fcae 	bl	80050c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800c768:	2386      	movs	r3, #134	@ 0x86
 800c76a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c76c:	2302      	movs	r3, #2
 800c76e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c770:	2300      	movs	r3, #0
 800c772:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c774:	2303      	movs	r3, #3
 800c776:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c778:	230b      	movs	r3, #11
 800c77a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c77c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c780:	4619      	mov	r1, r3
 800c782:	481f      	ldr	r0, [pc, #124]	@ (800c800 <HAL_ETH_MspInit+0x184>)
 800c784:	f7f8 fc9e 	bl	80050c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800c788:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c78c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c78e:	2302      	movs	r3, #2
 800c790:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c792:	2300      	movs	r3, #0
 800c794:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c796:	2303      	movs	r3, #3
 800c798:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c79a:	230b      	movs	r3, #11
 800c79c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c79e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c7a2:	4619      	mov	r1, r3
 800c7a4:	4817      	ldr	r0, [pc, #92]	@ (800c804 <HAL_ETH_MspInit+0x188>)
 800c7a6:	f7f8 fc8d 	bl	80050c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800c7aa:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800c7ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c7b0:	2302      	movs	r3, #2
 800c7b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c7b8:	2303      	movs	r3, #3
 800c7ba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c7bc:	230b      	movs	r3, #11
 800c7be:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c7c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c7c4:	4619      	mov	r1, r3
 800c7c6:	4810      	ldr	r0, [pc, #64]	@ (800c808 <HAL_ETH_MspInit+0x18c>)
 800c7c8:	f7f8 fc7c 	bl	80050c4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	2105      	movs	r1, #5
 800c7d0:	203d      	movs	r0, #61	@ 0x3d
 800c7d2:	f7f6 fb55 	bl	8002e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800c7d6:	203d      	movs	r0, #61	@ 0x3d
 800c7d8:	f7f6 fb6e 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 800c7dc:	2200      	movs	r2, #0
 800c7de:	2105      	movs	r1, #5
 800c7e0:	203e      	movs	r0, #62	@ 0x3e
 800c7e2:	f7f6 fb4d 	bl	8002e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800c7e6:	203e      	movs	r0, #62	@ 0x3e
 800c7e8:	f7f6 fb66 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800c7ec:	bf00      	nop
 800c7ee:	3738      	adds	r7, #56	@ 0x38
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}
 800c7f4:	40028000 	.word	0x40028000
 800c7f8:	40023800 	.word	0x40023800
 800c7fc:	40020800 	.word	0x40020800
 800c800:	40020000 	.word	0x40020000
 800c804:	40020400 	.word	0x40020400
 800c808:	40021800 	.word	0x40021800

0800c80c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800c810:	4802      	ldr	r0, [pc, #8]	@ (800c81c <ETH_PHY_IO_Init+0x10>)
 800c812:	f7f7 ffdb 	bl	80047cc <HAL_ETH_SetMDIOClockRange>

  return 0;
 800c816:	2300      	movs	r3, #0
}
 800c818:	4618      	mov	r0, r3
 800c81a:	bd80      	pop	{r7, pc}
 800c81c:	2000cfe4 	.word	0x2000cfe4

0800c820 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800c820:	b480      	push	{r7}
 800c822:	af00      	add	r7, sp, #0
  return 0;
 800c824:	2300      	movs	r3, #0
}
 800c826:	4618      	mov	r0, r3
 800c828:	46bd      	mov	sp, r7
 800c82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82e:	4770      	bx	lr

0800c830 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b084      	sub	sp, #16
 800c834:	af00      	add	r7, sp, #0
 800c836:	60f8      	str	r0, [r7, #12]
 800c838:	60b9      	str	r1, [r7, #8]
 800c83a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	68ba      	ldr	r2, [r7, #8]
 800c840:	68f9      	ldr	r1, [r7, #12]
 800c842:	4807      	ldr	r0, [pc, #28]	@ (800c860 <ETH_PHY_IO_ReadReg+0x30>)
 800c844:	f7f7 fe1c 	bl	8004480 <HAL_ETH_ReadPHYRegister>
 800c848:	4603      	mov	r3, r0
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d002      	beq.n	800c854 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800c84e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c852:	e000      	b.n	800c856 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800c854:	2300      	movs	r3, #0
}
 800c856:	4618      	mov	r0, r3
 800c858:	3710      	adds	r7, #16
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}
 800c85e:	bf00      	nop
 800c860:	2000cfe4 	.word	0x2000cfe4

0800c864 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b084      	sub	sp, #16
 800c868:	af00      	add	r7, sp, #0
 800c86a:	60f8      	str	r0, [r7, #12]
 800c86c:	60b9      	str	r1, [r7, #8]
 800c86e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	68ba      	ldr	r2, [r7, #8]
 800c874:	68f9      	ldr	r1, [r7, #12]
 800c876:	4807      	ldr	r0, [pc, #28]	@ (800c894 <ETH_PHY_IO_WriteReg+0x30>)
 800c878:	f7f7 fe4d 	bl	8004516 <HAL_ETH_WritePHYRegister>
 800c87c:	4603      	mov	r3, r0
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d002      	beq.n	800c888 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800c882:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c886:	e000      	b.n	800c88a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800c888:	2300      	movs	r3, #0
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	3710      	adds	r7, #16
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}
 800c892:	bf00      	nop
 800c894:	2000cfe4 	.word	0x2000cfe4

0800c898 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c89c:	f7f5 fd82 	bl	80023a4 <HAL_GetTick>
 800c8a0:	4603      	mov	r3, r0
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	bd80      	pop	{r7, pc}
	...

0800c8a8 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b0a0      	sub	sp, #128	@ 0x80
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800c8b0:	f107 0308 	add.w	r3, r7, #8
 800c8b4:	2264      	movs	r2, #100	@ 0x64
 800c8b6:	2100      	movs	r1, #0
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	f014 f8cd 	bl	8020a58 <memset>
  int32_t PHYLinkState = 0;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c8d2:	483a      	ldr	r0, [pc, #232]	@ (800c9bc <ethernet_link_thread+0x114>)
 800c8d4:	f7f5 fcbe 	bl	8002254 <LAN8742_GetLinkState>
 800c8d8:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800c8da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c8dc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c8e0:	089b      	lsrs	r3, r3, #2
 800c8e2:	f003 0301 	and.w	r3, r3, #1
 800c8e6:	b2db      	uxtb	r3, r3
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d00c      	beq.n	800c906 <ethernet_link_thread+0x5e>
 800c8ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c8ee:	2b01      	cmp	r3, #1
 800c8f0:	dc09      	bgt.n	800c906 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800c8f2:	4833      	ldr	r0, [pc, #204]	@ (800c9c0 <ethernet_link_thread+0x118>)
 800c8f4:	f7f7 fa7a 	bl	8003dec <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800c8f8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c8fa:	f007 fc2f 	bl	801415c <netif_set_down>
    netif_set_link_down(netif);
 800c8fe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c900:	f007 fc92 	bl	8014228 <netif_set_link_down>
 800c904:	e055      	b.n	800c9b2 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800c906:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c908:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c90c:	f003 0304 	and.w	r3, r3, #4
 800c910:	2b00      	cmp	r3, #0
 800c912:	d14e      	bne.n	800c9b2 <ethernet_link_thread+0x10a>
 800c914:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c916:	2b01      	cmp	r3, #1
 800c918:	dd4b      	ble.n	800c9b2 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800c91a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c91c:	3b02      	subs	r3, #2
 800c91e:	2b03      	cmp	r3, #3
 800c920:	d82a      	bhi.n	800c978 <ethernet_link_thread+0xd0>
 800c922:	a201      	add	r2, pc, #4	@ (adr r2, 800c928 <ethernet_link_thread+0x80>)
 800c924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c928:	0800c939 	.word	0x0800c939
 800c92c:	0800c94b 	.word	0x0800c94b
 800c930:	0800c95b 	.word	0x0800c95b
 800c934:	0800c96b 	.word	0x0800c96b
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800c938:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c93c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800c93e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c942:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c944:	2301      	movs	r3, #1
 800c946:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c948:	e017      	b.n	800c97a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800c94a:	2300      	movs	r3, #0
 800c94c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800c94e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c952:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c954:	2301      	movs	r3, #1
 800c956:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c958:	e00f      	b.n	800c97a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800c95a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c95e:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800c960:	2300      	movs	r3, #0
 800c962:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c964:	2301      	movs	r3, #1
 800c966:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c968:	e007      	b.n	800c97a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800c96a:	2300      	movs	r3, #0
 800c96c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800c96e:	2300      	movs	r3, #0
 800c970:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c972:	2301      	movs	r3, #1
 800c974:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c976:	e000      	b.n	800c97a <ethernet_link_thread+0xd2>
    default:
      break;
 800c978:	bf00      	nop
    }

    if(linkchanged)
 800c97a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d018      	beq.n	800c9b2 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800c980:	f107 0308 	add.w	r3, r7, #8
 800c984:	4619      	mov	r1, r3
 800c986:	480e      	ldr	r0, [pc, #56]	@ (800c9c0 <ethernet_link_thread+0x118>)
 800c988:	f7f7 fe0e 	bl	80045a8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800c98c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c98e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800c990:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c992:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800c994:	f107 0308 	add.w	r3, r7, #8
 800c998:	4619      	mov	r1, r3
 800c99a:	4809      	ldr	r0, [pc, #36]	@ (800c9c0 <ethernet_link_thread+0x118>)
 800c99c:	f7f7 fefb 	bl	8004796 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800c9a0:	4807      	ldr	r0, [pc, #28]	@ (800c9c0 <ethernet_link_thread+0x118>)
 800c9a2:	f7f7 f9b3 	bl	8003d0c <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800c9a6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c9a8:	f007 fb6c 	bl	8014084 <netif_set_up>
      netif_set_link_up(netif);
 800c9ac:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c9ae:	f007 fc07 	bl	80141c0 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800c9b2:	2064      	movs	r0, #100	@ 0x64
 800c9b4:	f000 f9ca 	bl	800cd4c <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c9b8:	e78b      	b.n	800c8d2 <ethernet_link_thread+0x2a>
 800c9ba:	bf00      	nop
 800c9bc:	2000d0cc 	.word	0x2000d0cc
 800c9c0:	2000cfe4 	.word	0x2000cfe4

0800c9c4 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b086      	sub	sp, #24
 800c9c8:	af02      	add	r7, sp, #8
 800c9ca:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800c9cc:	4812      	ldr	r0, [pc, #72]	@ (800ca18 <HAL_ETH_RxAllocateCallback+0x54>)
 800c9ce:	f006 ffd1 	bl	8013974 <memp_malloc_pool>
 800c9d2:	60f8      	str	r0, [r7, #12]
  if (p)
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d014      	beq.n	800ca04 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	f103 0220 	add.w	r2, r3, #32
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	4a0d      	ldr	r2, [pc, #52]	@ (800ca1c <HAL_ETH_RxAllocateCallback+0x58>)
 800c9e8:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800c9f2:	9201      	str	r2, [sp, #4]
 800c9f4:	9300      	str	r3, [sp, #0]
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	2241      	movs	r2, #65	@ 0x41
 800c9fa:	2100      	movs	r1, #0
 800c9fc:	2000      	movs	r0, #0
 800c9fe:	f007 fe5b 	bl	80146b8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800ca02:	e005      	b.n	800ca10 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800ca04:	4b06      	ldr	r3, [pc, #24]	@ (800ca20 <HAL_ETH_RxAllocateCallback+0x5c>)
 800ca06:	2201      	movs	r2, #1
 800ca08:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	601a      	str	r2, [r3, #0]
}
 800ca10:	bf00      	nop
 800ca12:	3710      	adds	r7, #16
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}
 800ca18:	080266f4 	.word	0x080266f4
 800ca1c:	0800c62d 	.word	0x0800c62d
 800ca20:	2000cfd8 	.word	0x2000cfd8

0800ca24 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b088      	sub	sp, #32
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	60f8      	str	r0, [r7, #12]
 800ca2c:	60b9      	str	r1, [r7, #8]
 800ca2e:	607a      	str	r2, [r7, #4]
 800ca30:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	3b20      	subs	r3, #32
 800ca42:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800ca44:	69fb      	ldr	r3, [r7, #28]
 800ca46:	2200      	movs	r2, #0
 800ca48:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800ca4a:	69fb      	ldr	r3, [r7, #28]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800ca50:	69fb      	ldr	r3, [r7, #28]
 800ca52:	887a      	ldrh	r2, [r7, #2]
 800ca54:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800ca56:	69bb      	ldr	r3, [r7, #24]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d103      	bne.n	800ca66 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800ca5e:	69bb      	ldr	r3, [r7, #24]
 800ca60:	69fa      	ldr	r2, [r7, #28]
 800ca62:	601a      	str	r2, [r3, #0]
 800ca64:	e003      	b.n	800ca6e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800ca66:	697b      	ldr	r3, [r7, #20]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	69fa      	ldr	r2, [r7, #28]
 800ca6c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800ca6e:	697b      	ldr	r3, [r7, #20]
 800ca70:	69fa      	ldr	r2, [r7, #28]
 800ca72:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800ca74:	69bb      	ldr	r3, [r7, #24]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	61fb      	str	r3, [r7, #28]
 800ca7a:	e009      	b.n	800ca90 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800ca7c:	69fb      	ldr	r3, [r7, #28]
 800ca7e:	891a      	ldrh	r2, [r3, #8]
 800ca80:	887b      	ldrh	r3, [r7, #2]
 800ca82:	4413      	add	r3, r2
 800ca84:	b29a      	uxth	r2, r3
 800ca86:	69fb      	ldr	r3, [r7, #28]
 800ca88:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800ca8a:	69fb      	ldr	r3, [r7, #28]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	61fb      	str	r3, [r7, #28]
 800ca90:	69fb      	ldr	r3, [r7, #28]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d1f2      	bne.n	800ca7c <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800ca96:	887b      	ldrh	r3, [r7, #2]
 800ca98:	4619      	mov	r1, r3
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f7ff fb02 	bl	800c0a4 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800caa0:	bf00      	nop
 800caa2:	3720      	adds	r7, #32
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}

0800caa8 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b082      	sub	sp, #8
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	f007 ffe3 	bl	8014a7c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800cab6:	bf00      	nop
 800cab8:	3708      	adds	r7, #8
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}

0800cabe <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cabe:	b480      	push	{r7}
 800cac0:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800cac2:	bf00      	nop
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr

0800cacc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cacc:	b480      	push	{r7}
 800cace:	b085      	sub	sp, #20
 800cad0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cad2:	f3ef 8305 	mrs	r3, IPSR
 800cad6:	60bb      	str	r3, [r7, #8]
  return(result);
 800cad8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d10f      	bne.n	800cafe <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cade:	f3ef 8310 	mrs	r3, PRIMASK
 800cae2:	607b      	str	r3, [r7, #4]
  return(result);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d105      	bne.n	800caf6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800caea:	f3ef 8311 	mrs	r3, BASEPRI
 800caee:	603b      	str	r3, [r7, #0]
  return(result);
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d007      	beq.n	800cb06 <osKernelInitialize+0x3a>
 800caf6:	4b0e      	ldr	r3, [pc, #56]	@ (800cb30 <osKernelInitialize+0x64>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	2b02      	cmp	r3, #2
 800cafc:	d103      	bne.n	800cb06 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800cafe:	f06f 0305 	mvn.w	r3, #5
 800cb02:	60fb      	str	r3, [r7, #12]
 800cb04:	e00c      	b.n	800cb20 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cb06:	4b0a      	ldr	r3, [pc, #40]	@ (800cb30 <osKernelInitialize+0x64>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d105      	bne.n	800cb1a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cb0e:	4b08      	ldr	r3, [pc, #32]	@ (800cb30 <osKernelInitialize+0x64>)
 800cb10:	2201      	movs	r2, #1
 800cb12:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cb14:	2300      	movs	r3, #0
 800cb16:	60fb      	str	r3, [r7, #12]
 800cb18:	e002      	b.n	800cb20 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800cb1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cb1e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800cb20:	68fb      	ldr	r3, [r7, #12]
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3714      	adds	r7, #20
 800cb26:	46bd      	mov	sp, r7
 800cb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2c:	4770      	bx	lr
 800cb2e:	bf00      	nop
 800cb30:	2000d0ec 	.word	0x2000d0ec

0800cb34 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b084      	sub	sp, #16
 800cb38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb3a:	f3ef 8305 	mrs	r3, IPSR
 800cb3e:	60bb      	str	r3, [r7, #8]
  return(result);
 800cb40:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d10f      	bne.n	800cb66 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb46:	f3ef 8310 	mrs	r3, PRIMASK
 800cb4a:	607b      	str	r3, [r7, #4]
  return(result);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d105      	bne.n	800cb5e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cb52:	f3ef 8311 	mrs	r3, BASEPRI
 800cb56:	603b      	str	r3, [r7, #0]
  return(result);
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d007      	beq.n	800cb6e <osKernelStart+0x3a>
 800cb5e:	4b0f      	ldr	r3, [pc, #60]	@ (800cb9c <osKernelStart+0x68>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	2b02      	cmp	r3, #2
 800cb64:	d103      	bne.n	800cb6e <osKernelStart+0x3a>
    stat = osErrorISR;
 800cb66:	f06f 0305 	mvn.w	r3, #5
 800cb6a:	60fb      	str	r3, [r7, #12]
 800cb6c:	e010      	b.n	800cb90 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cb6e:	4b0b      	ldr	r3, [pc, #44]	@ (800cb9c <osKernelStart+0x68>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	2b01      	cmp	r3, #1
 800cb74:	d109      	bne.n	800cb8a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cb76:	f7ff ffa2 	bl	800cabe <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cb7a:	4b08      	ldr	r3, [pc, #32]	@ (800cb9c <osKernelStart+0x68>)
 800cb7c:	2202      	movs	r2, #2
 800cb7e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cb80:	f002 fa8c 	bl	800f09c <vTaskStartScheduler>
      stat = osOK;
 800cb84:	2300      	movs	r3, #0
 800cb86:	60fb      	str	r3, [r7, #12]
 800cb88:	e002      	b.n	800cb90 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800cb8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cb8e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800cb90:	68fb      	ldr	r3, [r7, #12]
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	3710      	adds	r7, #16
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}
 800cb9a:	bf00      	nop
 800cb9c:	2000d0ec 	.word	0x2000d0ec

0800cba0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b084      	sub	sp, #16
 800cba4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cba6:	f3ef 8305 	mrs	r3, IPSR
 800cbaa:	60bb      	str	r3, [r7, #8]
  return(result);
 800cbac:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d10f      	bne.n	800cbd2 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cbb2:	f3ef 8310 	mrs	r3, PRIMASK
 800cbb6:	607b      	str	r3, [r7, #4]
  return(result);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d105      	bne.n	800cbca <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cbbe:	f3ef 8311 	mrs	r3, BASEPRI
 800cbc2:	603b      	str	r3, [r7, #0]
  return(result);
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d007      	beq.n	800cbda <osKernelGetTickCount+0x3a>
 800cbca:	4b08      	ldr	r3, [pc, #32]	@ (800cbec <osKernelGetTickCount+0x4c>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	2b02      	cmp	r3, #2
 800cbd0:	d103      	bne.n	800cbda <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800cbd2:	f002 fb95 	bl	800f300 <xTaskGetTickCountFromISR>
 800cbd6:	60f8      	str	r0, [r7, #12]
 800cbd8:	e002      	b.n	800cbe0 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800cbda:	f002 fb81 	bl	800f2e0 <xTaskGetTickCount>
 800cbde:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800cbe0:	68fb      	ldr	r3, [r7, #12]
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3710      	adds	r7, #16
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}
 800cbea:	bf00      	nop
 800cbec:	2000d0ec 	.word	0x2000d0ec

0800cbf0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b090      	sub	sp, #64	@ 0x40
 800cbf4:	af04      	add	r7, sp, #16
 800cbf6:	60f8      	str	r0, [r7, #12]
 800cbf8:	60b9      	str	r1, [r7, #8]
 800cbfa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc00:	f3ef 8305 	mrs	r3, IPSR
 800cc04:	61fb      	str	r3, [r7, #28]
  return(result);
 800cc06:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	f040 8090 	bne.w	800cd2e <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc0e:	f3ef 8310 	mrs	r3, PRIMASK
 800cc12:	61bb      	str	r3, [r7, #24]
  return(result);
 800cc14:	69bb      	ldr	r3, [r7, #24]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d105      	bne.n	800cc26 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cc1a:	f3ef 8311 	mrs	r3, BASEPRI
 800cc1e:	617b      	str	r3, [r7, #20]
  return(result);
 800cc20:	697b      	ldr	r3, [r7, #20]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d003      	beq.n	800cc2e <osThreadNew+0x3e>
 800cc26:	4b44      	ldr	r3, [pc, #272]	@ (800cd38 <osThreadNew+0x148>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	2b02      	cmp	r3, #2
 800cc2c:	d07f      	beq.n	800cd2e <osThreadNew+0x13e>
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d07c      	beq.n	800cd2e <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800cc34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cc38:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800cc3a:	2318      	movs	r3, #24
 800cc3c:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 800cc3e:	2300      	movs	r3, #0
 800cc40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 800cc42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cc46:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d045      	beq.n	800ccda <osThreadNew+0xea>
      if (attr->name != NULL) {
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d002      	beq.n	800cc5c <osThreadNew+0x6c>
        name = attr->name;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	699b      	ldr	r3, [r3, #24]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d002      	beq.n	800cc6a <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	699b      	ldr	r3, [r3, #24]
 800cc68:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cc6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d008      	beq.n	800cc82 <osThreadNew+0x92>
 800cc70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc72:	2b38      	cmp	r3, #56	@ 0x38
 800cc74:	d805      	bhi.n	800cc82 <osThreadNew+0x92>
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	685b      	ldr	r3, [r3, #4]
 800cc7a:	f003 0301 	and.w	r3, r3, #1
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d001      	beq.n	800cc86 <osThreadNew+0x96>
        return (NULL);
 800cc82:	2300      	movs	r3, #0
 800cc84:	e054      	b.n	800cd30 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	695b      	ldr	r3, [r3, #20]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d003      	beq.n	800cc96 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	695b      	ldr	r3, [r3, #20]
 800cc92:	089b      	lsrs	r3, r3, #2
 800cc94:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	689b      	ldr	r3, [r3, #8]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d00e      	beq.n	800ccbc <osThreadNew+0xcc>
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	68db      	ldr	r3, [r3, #12]
 800cca2:	2ba7      	cmp	r3, #167	@ 0xa7
 800cca4:	d90a      	bls.n	800ccbc <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d006      	beq.n	800ccbc <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	695b      	ldr	r3, [r3, #20]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d002      	beq.n	800ccbc <osThreadNew+0xcc>
        mem = 1;
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	623b      	str	r3, [r7, #32]
 800ccba:	e010      	b.n	800ccde <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	689b      	ldr	r3, [r3, #8]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d10c      	bne.n	800ccde <osThreadNew+0xee>
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	68db      	ldr	r3, [r3, #12]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d108      	bne.n	800ccde <osThreadNew+0xee>
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	691b      	ldr	r3, [r3, #16]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d104      	bne.n	800ccde <osThreadNew+0xee>
          mem = 0;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	623b      	str	r3, [r7, #32]
 800ccd8:	e001      	b.n	800ccde <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800ccde:	6a3b      	ldr	r3, [r7, #32]
 800cce0:	2b01      	cmp	r3, #1
 800cce2:	d110      	bne.n	800cd06 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800cce8:	687a      	ldr	r2, [r7, #4]
 800ccea:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ccec:	9202      	str	r2, [sp, #8]
 800ccee:	9301      	str	r3, [sp, #4]
 800ccf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccf2:	9300      	str	r3, [sp, #0]
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ccf8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ccfa:	68f8      	ldr	r0, [r7, #12]
 800ccfc:	f001 ff5a 	bl	800ebb4 <xTaskCreateStatic>
 800cd00:	4603      	mov	r3, r0
 800cd02:	613b      	str	r3, [r7, #16]
 800cd04:	e013      	b.n	800cd2e <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800cd06:	6a3b      	ldr	r3, [r7, #32]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d110      	bne.n	800cd2e <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cd0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd0e:	b29a      	uxth	r2, r3
 800cd10:	f107 0310 	add.w	r3, r7, #16
 800cd14:	9301      	str	r3, [sp, #4]
 800cd16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd18:	9300      	str	r3, [sp, #0]
 800cd1a:	68bb      	ldr	r3, [r7, #8]
 800cd1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cd1e:	68f8      	ldr	r0, [r7, #12]
 800cd20:	f001 ffae 	bl	800ec80 <xTaskCreate>
 800cd24:	4603      	mov	r3, r0
 800cd26:	2b01      	cmp	r3, #1
 800cd28:	d001      	beq.n	800cd2e <osThreadNew+0x13e>
          hTask = NULL;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cd2e:	693b      	ldr	r3, [r7, #16]
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3730      	adds	r7, #48	@ 0x30
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}
 800cd38:	2000d0ec 	.word	0x2000d0ec

0800cd3c <osThreadExit>:
  }

  return (stat);
}

__NO_RETURN void osThreadExit (void) {
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 800cd40:	2000      	movs	r0, #0
 800cd42:	f002 f8fd 	bl	800ef40 <vTaskDelete>
#endif
  for (;;);
 800cd46:	bf00      	nop
 800cd48:	e7fd      	b.n	800cd46 <osThreadExit+0xa>
	...

0800cd4c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b086      	sub	sp, #24
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd54:	f3ef 8305 	mrs	r3, IPSR
 800cd58:	613b      	str	r3, [r7, #16]
  return(result);
 800cd5a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d10f      	bne.n	800cd80 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd60:	f3ef 8310 	mrs	r3, PRIMASK
 800cd64:	60fb      	str	r3, [r7, #12]
  return(result);
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d105      	bne.n	800cd78 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cd6c:	f3ef 8311 	mrs	r3, BASEPRI
 800cd70:	60bb      	str	r3, [r7, #8]
  return(result);
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d007      	beq.n	800cd88 <osDelay+0x3c>
 800cd78:	4b0a      	ldr	r3, [pc, #40]	@ (800cda4 <osDelay+0x58>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	2b02      	cmp	r3, #2
 800cd7e:	d103      	bne.n	800cd88 <osDelay+0x3c>
    stat = osErrorISR;
 800cd80:	f06f 0305 	mvn.w	r3, #5
 800cd84:	617b      	str	r3, [r7, #20]
 800cd86:	e007      	b.n	800cd98 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d002      	beq.n	800cd98 <osDelay+0x4c>
      vTaskDelay(ticks);
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f002 f94a 	bl	800f02c <vTaskDelay>
    }
  }

  return (stat);
 800cd98:	697b      	ldr	r3, [r7, #20]
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3718      	adds	r7, #24
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}
 800cda2:	bf00      	nop
 800cda4:	2000d0ec 	.word	0x2000d0ec

0800cda8 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b08a      	sub	sp, #40	@ 0x28
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cdb4:	f3ef 8305 	mrs	r3, IPSR
 800cdb8:	613b      	str	r3, [r7, #16]
  return(result);
 800cdba:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	f040 8085 	bne.w	800cecc <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cdc2:	f3ef 8310 	mrs	r3, PRIMASK
 800cdc6:	60fb      	str	r3, [r7, #12]
  return(result);
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d105      	bne.n	800cdda <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cdce:	f3ef 8311 	mrs	r3, BASEPRI
 800cdd2:	60bb      	str	r3, [r7, #8]
  return(result);
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d003      	beq.n	800cde2 <osMutexNew+0x3a>
 800cdda:	4b3f      	ldr	r3, [pc, #252]	@ (800ced8 <osMutexNew+0x130>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	2b02      	cmp	r3, #2
 800cde0:	d074      	beq.n	800cecc <osMutexNew+0x124>
    if (attr != NULL) {
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d003      	beq.n	800cdf0 <osMutexNew+0x48>
      type = attr->attr_bits;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	685b      	ldr	r3, [r3, #4]
 800cdec:	623b      	str	r3, [r7, #32]
 800cdee:	e001      	b.n	800cdf4 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800cdf4:	6a3b      	ldr	r3, [r7, #32]
 800cdf6:	f003 0301 	and.w	r3, r3, #1
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d002      	beq.n	800ce04 <osMutexNew+0x5c>
      rmtx = 1U;
 800cdfe:	2301      	movs	r3, #1
 800ce00:	61fb      	str	r3, [r7, #28]
 800ce02:	e001      	b.n	800ce08 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800ce04:	2300      	movs	r3, #0
 800ce06:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800ce08:	6a3b      	ldr	r3, [r7, #32]
 800ce0a:	f003 0308 	and.w	r3, r3, #8
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d15c      	bne.n	800cecc <osMutexNew+0x124>
      mem = -1;
 800ce12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ce16:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d015      	beq.n	800ce4a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	689b      	ldr	r3, [r3, #8]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d006      	beq.n	800ce34 <osMutexNew+0x8c>
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	68db      	ldr	r3, [r3, #12]
 800ce2a:	2b4f      	cmp	r3, #79	@ 0x4f
 800ce2c:	d902      	bls.n	800ce34 <osMutexNew+0x8c>
          mem = 1;
 800ce2e:	2301      	movs	r3, #1
 800ce30:	61bb      	str	r3, [r7, #24]
 800ce32:	e00c      	b.n	800ce4e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	689b      	ldr	r3, [r3, #8]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d108      	bne.n	800ce4e <osMutexNew+0xa6>
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	68db      	ldr	r3, [r3, #12]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d104      	bne.n	800ce4e <osMutexNew+0xa6>
            mem = 0;
 800ce44:	2300      	movs	r3, #0
 800ce46:	61bb      	str	r3, [r7, #24]
 800ce48:	e001      	b.n	800ce4e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800ce4e:	69bb      	ldr	r3, [r7, #24]
 800ce50:	2b01      	cmp	r3, #1
 800ce52:	d112      	bne.n	800ce7a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800ce54:	69fb      	ldr	r3, [r7, #28]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d007      	beq.n	800ce6a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	689b      	ldr	r3, [r3, #8]
 800ce5e:	4619      	mov	r1, r3
 800ce60:	2004      	movs	r0, #4
 800ce62:	f000 fec0 	bl	800dbe6 <xQueueCreateMutexStatic>
 800ce66:	6278      	str	r0, [r7, #36]	@ 0x24
 800ce68:	e016      	b.n	800ce98 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	689b      	ldr	r3, [r3, #8]
 800ce6e:	4619      	mov	r1, r3
 800ce70:	2001      	movs	r0, #1
 800ce72:	f000 feb8 	bl	800dbe6 <xQueueCreateMutexStatic>
 800ce76:	6278      	str	r0, [r7, #36]	@ 0x24
 800ce78:	e00e      	b.n	800ce98 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800ce7a:	69bb      	ldr	r3, [r7, #24]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d10b      	bne.n	800ce98 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800ce80:	69fb      	ldr	r3, [r7, #28]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d004      	beq.n	800ce90 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800ce86:	2004      	movs	r0, #4
 800ce88:	f000 fe95 	bl	800dbb6 <xQueueCreateMutex>
 800ce8c:	6278      	str	r0, [r7, #36]	@ 0x24
 800ce8e:	e003      	b.n	800ce98 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800ce90:	2001      	movs	r0, #1
 800ce92:	f000 fe90 	bl	800dbb6 <xQueueCreateMutex>
 800ce96:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800ce98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d00c      	beq.n	800ceb8 <osMutexNew+0x110>
        if (attr != NULL) {
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d003      	beq.n	800ceac <osMutexNew+0x104>
          name = attr->name;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	617b      	str	r3, [r7, #20]
 800ceaa:	e001      	b.n	800ceb0 <osMutexNew+0x108>
        } else {
          name = NULL;
 800ceac:	2300      	movs	r3, #0
 800ceae:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800ceb0:	6979      	ldr	r1, [r7, #20]
 800ceb2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ceb4:	f001 fdf6 	bl	800eaa4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800ceb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d006      	beq.n	800cecc <osMutexNew+0x124>
 800cebe:	69fb      	ldr	r3, [r7, #28]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d003      	beq.n	800cecc <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800cec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cec6:	f043 0301 	orr.w	r3, r3, #1
 800ceca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800cecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cece:	4618      	mov	r0, r3
 800ced0:	3728      	adds	r7, #40	@ 0x28
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}
 800ced6:	bf00      	nop
 800ced8:	2000d0ec 	.word	0x2000d0ec

0800cedc <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800cedc:	b580      	push	{r7, lr}
 800cede:	b088      	sub	sp, #32
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
 800cee4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f023 0301 	bic.w	r3, r3, #1
 800ceec:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f003 0301 	and.w	r3, r3, #1
 800cef4:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800cef6:	2300      	movs	r3, #0
 800cef8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cefa:	f3ef 8305 	mrs	r3, IPSR
 800cefe:	613b      	str	r3, [r7, #16]
  return(result);
 800cf00:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d10f      	bne.n	800cf26 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf06:	f3ef 8310 	mrs	r3, PRIMASK
 800cf0a:	60fb      	str	r3, [r7, #12]
  return(result);
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d105      	bne.n	800cf1e <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cf12:	f3ef 8311 	mrs	r3, BASEPRI
 800cf16:	60bb      	str	r3, [r7, #8]
  return(result);
 800cf18:	68bb      	ldr	r3, [r7, #8]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d007      	beq.n	800cf2e <osMutexAcquire+0x52>
 800cf1e:	4b1d      	ldr	r3, [pc, #116]	@ (800cf94 <osMutexAcquire+0xb8>)
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	2b02      	cmp	r3, #2
 800cf24:	d103      	bne.n	800cf2e <osMutexAcquire+0x52>
    stat = osErrorISR;
 800cf26:	f06f 0305 	mvn.w	r3, #5
 800cf2a:	61fb      	str	r3, [r7, #28]
 800cf2c:	e02c      	b.n	800cf88 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800cf2e:	69bb      	ldr	r3, [r7, #24]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d103      	bne.n	800cf3c <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800cf34:	f06f 0303 	mvn.w	r3, #3
 800cf38:	61fb      	str	r3, [r7, #28]
 800cf3a:	e025      	b.n	800cf88 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800cf3c:	697b      	ldr	r3, [r7, #20]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d011      	beq.n	800cf66 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800cf42:	6839      	ldr	r1, [r7, #0]
 800cf44:	69b8      	ldr	r0, [r7, #24]
 800cf46:	f000 fea0 	bl	800dc8a <xQueueTakeMutexRecursive>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	2b01      	cmp	r3, #1
 800cf4e:	d01b      	beq.n	800cf88 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d003      	beq.n	800cf5e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800cf56:	f06f 0301 	mvn.w	r3, #1
 800cf5a:	61fb      	str	r3, [r7, #28]
 800cf5c:	e014      	b.n	800cf88 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800cf5e:	f06f 0302 	mvn.w	r3, #2
 800cf62:	61fb      	str	r3, [r7, #28]
 800cf64:	e010      	b.n	800cf88 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800cf66:	6839      	ldr	r1, [r7, #0]
 800cf68:	69b8      	ldr	r0, [r7, #24]
 800cf6a:	f001 fa6b 	bl	800e444 <xQueueSemaphoreTake>
 800cf6e:	4603      	mov	r3, r0
 800cf70:	2b01      	cmp	r3, #1
 800cf72:	d009      	beq.n	800cf88 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d003      	beq.n	800cf82 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800cf7a:	f06f 0301 	mvn.w	r3, #1
 800cf7e:	61fb      	str	r3, [r7, #28]
 800cf80:	e002      	b.n	800cf88 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800cf82:	f06f 0302 	mvn.w	r3, #2
 800cf86:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cf88:	69fb      	ldr	r3, [r7, #28]
}
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	3720      	adds	r7, #32
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd80      	pop	{r7, pc}
 800cf92:	bf00      	nop
 800cf94:	2000d0ec 	.word	0x2000d0ec

0800cf98 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b088      	sub	sp, #32
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f023 0301 	bic.w	r3, r3, #1
 800cfa6:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f003 0301 	and.w	r3, r3, #1
 800cfae:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cfb4:	f3ef 8305 	mrs	r3, IPSR
 800cfb8:	613b      	str	r3, [r7, #16]
  return(result);
 800cfba:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d10f      	bne.n	800cfe0 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cfc0:	f3ef 8310 	mrs	r3, PRIMASK
 800cfc4:	60fb      	str	r3, [r7, #12]
  return(result);
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d105      	bne.n	800cfd8 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cfcc:	f3ef 8311 	mrs	r3, BASEPRI
 800cfd0:	60bb      	str	r3, [r7, #8]
  return(result);
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d007      	beq.n	800cfe8 <osMutexRelease+0x50>
 800cfd8:	4b16      	ldr	r3, [pc, #88]	@ (800d034 <osMutexRelease+0x9c>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	2b02      	cmp	r3, #2
 800cfde:	d103      	bne.n	800cfe8 <osMutexRelease+0x50>
    stat = osErrorISR;
 800cfe0:	f06f 0305 	mvn.w	r3, #5
 800cfe4:	61fb      	str	r3, [r7, #28]
 800cfe6:	e01f      	b.n	800d028 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800cfe8:	69bb      	ldr	r3, [r7, #24]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d103      	bne.n	800cff6 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800cfee:	f06f 0303 	mvn.w	r3, #3
 800cff2:	61fb      	str	r3, [r7, #28]
 800cff4:	e018      	b.n	800d028 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800cff6:	697b      	ldr	r3, [r7, #20]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d009      	beq.n	800d010 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800cffc:	69b8      	ldr	r0, [r7, #24]
 800cffe:	f000 fe0d 	bl	800dc1c <xQueueGiveMutexRecursive>
 800d002:	4603      	mov	r3, r0
 800d004:	2b01      	cmp	r3, #1
 800d006:	d00f      	beq.n	800d028 <osMutexRelease+0x90>
        stat = osErrorResource;
 800d008:	f06f 0302 	mvn.w	r3, #2
 800d00c:	61fb      	str	r3, [r7, #28]
 800d00e:	e00b      	b.n	800d028 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800d010:	2300      	movs	r3, #0
 800d012:	2200      	movs	r2, #0
 800d014:	2100      	movs	r1, #0
 800d016:	69b8      	ldr	r0, [r7, #24]
 800d018:	f000 fee6 	bl	800dde8 <xQueueGenericSend>
 800d01c:	4603      	mov	r3, r0
 800d01e:	2b01      	cmp	r3, #1
 800d020:	d002      	beq.n	800d028 <osMutexRelease+0x90>
        stat = osErrorResource;
 800d022:	f06f 0302 	mvn.w	r3, #2
 800d026:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800d028:	69fb      	ldr	r3, [r7, #28]
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3720      	adds	r7, #32
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}
 800d032:	bf00      	nop
 800d034:	2000d0ec 	.word	0x2000d0ec

0800d038 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800d038:	b580      	push	{r7, lr}
 800d03a:	b08c      	sub	sp, #48	@ 0x30
 800d03c:	af02      	add	r7, sp, #8
 800d03e:	60f8      	str	r0, [r7, #12]
 800d040:	60b9      	str	r1, [r7, #8]
 800d042:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800d044:	2300      	movs	r3, #0
 800d046:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d048:	f3ef 8305 	mrs	r3, IPSR
 800d04c:	61bb      	str	r3, [r7, #24]
  return(result);
 800d04e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800d050:	2b00      	cmp	r3, #0
 800d052:	f040 8086 	bne.w	800d162 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d056:	f3ef 8310 	mrs	r3, PRIMASK
 800d05a:	617b      	str	r3, [r7, #20]
  return(result);
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d105      	bne.n	800d06e <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d062:	f3ef 8311 	mrs	r3, BASEPRI
 800d066:	613b      	str	r3, [r7, #16]
  return(result);
 800d068:	693b      	ldr	r3, [r7, #16]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d003      	beq.n	800d076 <osSemaphoreNew+0x3e>
 800d06e:	4b3f      	ldr	r3, [pc, #252]	@ (800d16c <osSemaphoreNew+0x134>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	2b02      	cmp	r3, #2
 800d074:	d075      	beq.n	800d162 <osSemaphoreNew+0x12a>
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d072      	beq.n	800d162 <osSemaphoreNew+0x12a>
 800d07c:	68ba      	ldr	r2, [r7, #8]
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	429a      	cmp	r2, r3
 800d082:	d86e      	bhi.n	800d162 <osSemaphoreNew+0x12a>
    mem = -1;
 800d084:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d088:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d015      	beq.n	800d0bc <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	689b      	ldr	r3, [r3, #8]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d006      	beq.n	800d0a6 <osSemaphoreNew+0x6e>
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	68db      	ldr	r3, [r3, #12]
 800d09c:	2b4f      	cmp	r3, #79	@ 0x4f
 800d09e:	d902      	bls.n	800d0a6 <osSemaphoreNew+0x6e>
        mem = 1;
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	623b      	str	r3, [r7, #32]
 800d0a4:	e00c      	b.n	800d0c0 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	689b      	ldr	r3, [r3, #8]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d108      	bne.n	800d0c0 <osSemaphoreNew+0x88>
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	68db      	ldr	r3, [r3, #12]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d104      	bne.n	800d0c0 <osSemaphoreNew+0x88>
          mem = 0;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	623b      	str	r3, [r7, #32]
 800d0ba:	e001      	b.n	800d0c0 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800d0bc:	2300      	movs	r3, #0
 800d0be:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800d0c0:	6a3b      	ldr	r3, [r7, #32]
 800d0c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d0c6:	d04c      	beq.n	800d162 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	2b01      	cmp	r3, #1
 800d0cc:	d128      	bne.n	800d120 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800d0ce:	6a3b      	ldr	r3, [r7, #32]
 800d0d0:	2b01      	cmp	r3, #1
 800d0d2:	d10a      	bne.n	800d0ea <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	689b      	ldr	r3, [r3, #8]
 800d0d8:	2203      	movs	r2, #3
 800d0da:	9200      	str	r2, [sp, #0]
 800d0dc:	2200      	movs	r2, #0
 800d0de:	2100      	movs	r1, #0
 800d0e0:	2001      	movs	r0, #1
 800d0e2:	f000 fc61 	bl	800d9a8 <xQueueGenericCreateStatic>
 800d0e6:	6278      	str	r0, [r7, #36]	@ 0x24
 800d0e8:	e005      	b.n	800d0f6 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800d0ea:	2203      	movs	r2, #3
 800d0ec:	2100      	movs	r1, #0
 800d0ee:	2001      	movs	r0, #1
 800d0f0:	f000 fce1 	bl	800dab6 <xQueueGenericCreate>
 800d0f4:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800d0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d022      	beq.n	800d142 <osSemaphoreNew+0x10a>
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d01f      	beq.n	800d142 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d102:	2300      	movs	r3, #0
 800d104:	2200      	movs	r2, #0
 800d106:	2100      	movs	r1, #0
 800d108:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d10a:	f000 fe6d 	bl	800dde8 <xQueueGenericSend>
 800d10e:	4603      	mov	r3, r0
 800d110:	2b01      	cmp	r3, #1
 800d112:	d016      	beq.n	800d142 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800d114:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d116:	f001 fb77 	bl	800e808 <vQueueDelete>
            hSemaphore = NULL;
 800d11a:	2300      	movs	r3, #0
 800d11c:	627b      	str	r3, [r7, #36]	@ 0x24
 800d11e:	e010      	b.n	800d142 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800d120:	6a3b      	ldr	r3, [r7, #32]
 800d122:	2b01      	cmp	r3, #1
 800d124:	d108      	bne.n	800d138 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	689b      	ldr	r3, [r3, #8]
 800d12a:	461a      	mov	r2, r3
 800d12c:	68b9      	ldr	r1, [r7, #8]
 800d12e:	68f8      	ldr	r0, [r7, #12]
 800d130:	f000 fde4 	bl	800dcfc <xQueueCreateCountingSemaphoreStatic>
 800d134:	6278      	str	r0, [r7, #36]	@ 0x24
 800d136:	e004      	b.n	800d142 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800d138:	68b9      	ldr	r1, [r7, #8]
 800d13a:	68f8      	ldr	r0, [r7, #12]
 800d13c:	f000 fe1b 	bl	800dd76 <xQueueCreateCountingSemaphore>
 800d140:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800d142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d144:	2b00      	cmp	r3, #0
 800d146:	d00c      	beq.n	800d162 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d003      	beq.n	800d156 <osSemaphoreNew+0x11e>
          name = attr->name;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	61fb      	str	r3, [r7, #28]
 800d154:	e001      	b.n	800d15a <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800d156:	2300      	movs	r3, #0
 800d158:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800d15a:	69f9      	ldr	r1, [r7, #28]
 800d15c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d15e:	f001 fca1 	bl	800eaa4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800d162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d164:	4618      	mov	r0, r3
 800d166:	3728      	adds	r7, #40	@ 0x28
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}
 800d16c:	2000d0ec 	.word	0x2000d0ec

0800d170 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800d170:	b580      	push	{r7, lr}
 800d172:	b088      	sub	sp, #32
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
 800d178:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d17e:	2300      	movs	r3, #0
 800d180:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800d182:	69bb      	ldr	r3, [r7, #24]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d103      	bne.n	800d190 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800d188:	f06f 0303 	mvn.w	r3, #3
 800d18c:	61fb      	str	r3, [r7, #28]
 800d18e:	e04b      	b.n	800d228 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d190:	f3ef 8305 	mrs	r3, IPSR
 800d194:	617b      	str	r3, [r7, #20]
  return(result);
 800d196:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d10f      	bne.n	800d1bc <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d19c:	f3ef 8310 	mrs	r3, PRIMASK
 800d1a0:	613b      	str	r3, [r7, #16]
  return(result);
 800d1a2:	693b      	ldr	r3, [r7, #16]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d105      	bne.n	800d1b4 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d1a8:	f3ef 8311 	mrs	r3, BASEPRI
 800d1ac:	60fb      	str	r3, [r7, #12]
  return(result);
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d026      	beq.n	800d202 <osSemaphoreAcquire+0x92>
 800d1b4:	4b1f      	ldr	r3, [pc, #124]	@ (800d234 <osSemaphoreAcquire+0xc4>)
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	2b02      	cmp	r3, #2
 800d1ba:	d122      	bne.n	800d202 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d003      	beq.n	800d1ca <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800d1c2:	f06f 0303 	mvn.w	r3, #3
 800d1c6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800d1c8:	e02d      	b.n	800d226 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800d1ce:	f107 0308 	add.w	r3, r7, #8
 800d1d2:	461a      	mov	r2, r3
 800d1d4:	2100      	movs	r1, #0
 800d1d6:	69b8      	ldr	r0, [r7, #24]
 800d1d8:	f001 fa4c 	bl	800e674 <xQueueReceiveFromISR>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	2b01      	cmp	r3, #1
 800d1e0:	d003      	beq.n	800d1ea <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800d1e2:	f06f 0302 	mvn.w	r3, #2
 800d1e6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800d1e8:	e01d      	b.n	800d226 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d01a      	beq.n	800d226 <osSemaphoreAcquire+0xb6>
 800d1f0:	4b11      	ldr	r3, [pc, #68]	@ (800d238 <osSemaphoreAcquire+0xc8>)
 800d1f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d1f6:	601a      	str	r2, [r3, #0]
 800d1f8:	f3bf 8f4f 	dsb	sy
 800d1fc:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800d200:	e011      	b.n	800d226 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800d202:	6839      	ldr	r1, [r7, #0]
 800d204:	69b8      	ldr	r0, [r7, #24]
 800d206:	f001 f91d 	bl	800e444 <xQueueSemaphoreTake>
 800d20a:	4603      	mov	r3, r0
 800d20c:	2b01      	cmp	r3, #1
 800d20e:	d00b      	beq.n	800d228 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d003      	beq.n	800d21e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800d216:	f06f 0301 	mvn.w	r3, #1
 800d21a:	61fb      	str	r3, [r7, #28]
 800d21c:	e004      	b.n	800d228 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800d21e:	f06f 0302 	mvn.w	r3, #2
 800d222:	61fb      	str	r3, [r7, #28]
 800d224:	e000      	b.n	800d228 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800d226:	bf00      	nop
      }
    }
  }

  return (stat);
 800d228:	69fb      	ldr	r3, [r7, #28]
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3720      	adds	r7, #32
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}
 800d232:	bf00      	nop
 800d234:	2000d0ec 	.word	0x2000d0ec
 800d238:	e000ed04 	.word	0xe000ed04

0800d23c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b088      	sub	sp, #32
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d248:	2300      	movs	r3, #0
 800d24a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800d24c:	69bb      	ldr	r3, [r7, #24]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d103      	bne.n	800d25a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800d252:	f06f 0303 	mvn.w	r3, #3
 800d256:	61fb      	str	r3, [r7, #28]
 800d258:	e03e      	b.n	800d2d8 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d25a:	f3ef 8305 	mrs	r3, IPSR
 800d25e:	617b      	str	r3, [r7, #20]
  return(result);
 800d260:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800d262:	2b00      	cmp	r3, #0
 800d264:	d10f      	bne.n	800d286 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d266:	f3ef 8310 	mrs	r3, PRIMASK
 800d26a:	613b      	str	r3, [r7, #16]
  return(result);
 800d26c:	693b      	ldr	r3, [r7, #16]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d105      	bne.n	800d27e <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d272:	f3ef 8311 	mrs	r3, BASEPRI
 800d276:	60fb      	str	r3, [r7, #12]
  return(result);
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d01e      	beq.n	800d2bc <osSemaphoreRelease+0x80>
 800d27e:	4b19      	ldr	r3, [pc, #100]	@ (800d2e4 <osSemaphoreRelease+0xa8>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	2b02      	cmp	r3, #2
 800d284:	d11a      	bne.n	800d2bc <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800d286:	2300      	movs	r3, #0
 800d288:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d28a:	f107 0308 	add.w	r3, r7, #8
 800d28e:	4619      	mov	r1, r3
 800d290:	69b8      	ldr	r0, [r7, #24]
 800d292:	f000 ff56 	bl	800e142 <xQueueGiveFromISR>
 800d296:	4603      	mov	r3, r0
 800d298:	2b01      	cmp	r3, #1
 800d29a:	d003      	beq.n	800d2a4 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800d29c:	f06f 0302 	mvn.w	r3, #2
 800d2a0:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d2a2:	e018      	b.n	800d2d6 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800d2a4:	68bb      	ldr	r3, [r7, #8]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d015      	beq.n	800d2d6 <osSemaphoreRelease+0x9a>
 800d2aa:	4b0f      	ldr	r3, [pc, #60]	@ (800d2e8 <osSemaphoreRelease+0xac>)
 800d2ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d2b0:	601a      	str	r2, [r3, #0]
 800d2b2:	f3bf 8f4f 	dsb	sy
 800d2b6:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d2ba:	e00c      	b.n	800d2d6 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d2bc:	2300      	movs	r3, #0
 800d2be:	2200      	movs	r2, #0
 800d2c0:	2100      	movs	r1, #0
 800d2c2:	69b8      	ldr	r0, [r7, #24]
 800d2c4:	f000 fd90 	bl	800dde8 <xQueueGenericSend>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	2b01      	cmp	r3, #1
 800d2cc:	d004      	beq.n	800d2d8 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800d2ce:	f06f 0302 	mvn.w	r3, #2
 800d2d2:	61fb      	str	r3, [r7, #28]
 800d2d4:	e000      	b.n	800d2d8 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d2d6:	bf00      	nop
    }
  }

  return (stat);
 800d2d8:	69fb      	ldr	r3, [r7, #28]
}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	3720      	adds	r7, #32
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}
 800d2e2:	bf00      	nop
 800d2e4:	2000d0ec 	.word	0x2000d0ec
 800d2e8:	e000ed04 	.word	0xe000ed04

0800d2ec <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b088      	sub	sp, #32
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d2f8:	f3ef 8305 	mrs	r3, IPSR
 800d2fc:	617b      	str	r3, [r7, #20]
  return(result);
 800d2fe:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800d300:	2b00      	cmp	r3, #0
 800d302:	d10f      	bne.n	800d324 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d304:	f3ef 8310 	mrs	r3, PRIMASK
 800d308:	613b      	str	r3, [r7, #16]
  return(result);
 800d30a:	693b      	ldr	r3, [r7, #16]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d105      	bne.n	800d31c <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d310:	f3ef 8311 	mrs	r3, BASEPRI
 800d314:	60fb      	str	r3, [r7, #12]
  return(result);
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d007      	beq.n	800d32c <osSemaphoreDelete+0x40>
 800d31c:	4b0d      	ldr	r3, [pc, #52]	@ (800d354 <osSemaphoreDelete+0x68>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	2b02      	cmp	r3, #2
 800d322:	d103      	bne.n	800d32c <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 800d324:	f06f 0305 	mvn.w	r3, #5
 800d328:	61fb      	str	r3, [r7, #28]
 800d32a:	e00e      	b.n	800d34a <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 800d32c:	69bb      	ldr	r3, [r7, #24]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d103      	bne.n	800d33a <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 800d332:	f06f 0303 	mvn.w	r3, #3
 800d336:	61fb      	str	r3, [r7, #28]
 800d338:	e007      	b.n	800d34a <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800d33a:	69b8      	ldr	r0, [r7, #24]
 800d33c:	f001 fbdc 	bl	800eaf8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800d340:	2300      	movs	r3, #0
 800d342:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 800d344:	69b8      	ldr	r0, [r7, #24]
 800d346:	f001 fa5f 	bl	800e808 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800d34a:	69fb      	ldr	r3, [r7, #28]
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	3720      	adds	r7, #32
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}
 800d354:	2000d0ec 	.word	0x2000d0ec

0800d358 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d358:	b580      	push	{r7, lr}
 800d35a:	b08c      	sub	sp, #48	@ 0x30
 800d35c:	af02      	add	r7, sp, #8
 800d35e:	60f8      	str	r0, [r7, #12]
 800d360:	60b9      	str	r1, [r7, #8]
 800d362:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800d364:	2300      	movs	r3, #0
 800d366:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d368:	f3ef 8305 	mrs	r3, IPSR
 800d36c:	61bb      	str	r3, [r7, #24]
  return(result);
 800d36e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d370:	2b00      	cmp	r3, #0
 800d372:	d16f      	bne.n	800d454 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d374:	f3ef 8310 	mrs	r3, PRIMASK
 800d378:	617b      	str	r3, [r7, #20]
  return(result);
 800d37a:	697b      	ldr	r3, [r7, #20]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d105      	bne.n	800d38c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d380:	f3ef 8311 	mrs	r3, BASEPRI
 800d384:	613b      	str	r3, [r7, #16]
  return(result);
 800d386:	693b      	ldr	r3, [r7, #16]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d003      	beq.n	800d394 <osMessageQueueNew+0x3c>
 800d38c:	4b34      	ldr	r3, [pc, #208]	@ (800d460 <osMessageQueueNew+0x108>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	2b02      	cmp	r3, #2
 800d392:	d05f      	beq.n	800d454 <osMessageQueueNew+0xfc>
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d05c      	beq.n	800d454 <osMessageQueueNew+0xfc>
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d059      	beq.n	800d454 <osMessageQueueNew+0xfc>
    mem = -1;
 800d3a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d3a4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d029      	beq.n	800d400 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	689b      	ldr	r3, [r3, #8]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d012      	beq.n	800d3da <osMessageQueueNew+0x82>
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	68db      	ldr	r3, [r3, #12]
 800d3b8:	2b4f      	cmp	r3, #79	@ 0x4f
 800d3ba:	d90e      	bls.n	800d3da <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d00a      	beq.n	800d3da <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	695a      	ldr	r2, [r3, #20]
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	68b9      	ldr	r1, [r7, #8]
 800d3cc:	fb01 f303 	mul.w	r3, r1, r3
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	d302      	bcc.n	800d3da <osMessageQueueNew+0x82>
        mem = 1;
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	623b      	str	r3, [r7, #32]
 800d3d8:	e014      	b.n	800d404 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	689b      	ldr	r3, [r3, #8]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d110      	bne.n	800d404 <osMessageQueueNew+0xac>
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	68db      	ldr	r3, [r3, #12]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d10c      	bne.n	800d404 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d108      	bne.n	800d404 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	695b      	ldr	r3, [r3, #20]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d104      	bne.n	800d404 <osMessageQueueNew+0xac>
          mem = 0;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	623b      	str	r3, [r7, #32]
 800d3fe:	e001      	b.n	800d404 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800d400:	2300      	movs	r3, #0
 800d402:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800d404:	6a3b      	ldr	r3, [r7, #32]
 800d406:	2b01      	cmp	r3, #1
 800d408:	d10b      	bne.n	800d422 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	691a      	ldr	r2, [r3, #16]
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	689b      	ldr	r3, [r3, #8]
 800d412:	2100      	movs	r1, #0
 800d414:	9100      	str	r1, [sp, #0]
 800d416:	68b9      	ldr	r1, [r7, #8]
 800d418:	68f8      	ldr	r0, [r7, #12]
 800d41a:	f000 fac5 	bl	800d9a8 <xQueueGenericCreateStatic>
 800d41e:	6278      	str	r0, [r7, #36]	@ 0x24
 800d420:	e008      	b.n	800d434 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800d422:	6a3b      	ldr	r3, [r7, #32]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d105      	bne.n	800d434 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800d428:	2200      	movs	r2, #0
 800d42a:	68b9      	ldr	r1, [r7, #8]
 800d42c:	68f8      	ldr	r0, [r7, #12]
 800d42e:	f000 fb42 	bl	800dab6 <xQueueGenericCreate>
 800d432:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800d434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d436:	2b00      	cmp	r3, #0
 800d438:	d00c      	beq.n	800d454 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d003      	beq.n	800d448 <osMessageQueueNew+0xf0>
        name = attr->name;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	61fb      	str	r3, [r7, #28]
 800d446:	e001      	b.n	800d44c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800d448:	2300      	movs	r3, #0
 800d44a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800d44c:	69f9      	ldr	r1, [r7, #28]
 800d44e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d450:	f001 fb28 	bl	800eaa4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800d454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d456:	4618      	mov	r0, r3
 800d458:	3728      	adds	r7, #40	@ 0x28
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}
 800d45e:	bf00      	nop
 800d460:	2000d0ec 	.word	0x2000d0ec

0800d464 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d464:	b580      	push	{r7, lr}
 800d466:	b08a      	sub	sp, #40	@ 0x28
 800d468:	af00      	add	r7, sp, #0
 800d46a:	60f8      	str	r0, [r7, #12]
 800d46c:	60b9      	str	r1, [r7, #8]
 800d46e:	603b      	str	r3, [r7, #0]
 800d470:	4613      	mov	r3, r2
 800d472:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d478:	2300      	movs	r3, #0
 800d47a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d47c:	f3ef 8305 	mrs	r3, IPSR
 800d480:	61fb      	str	r3, [r7, #28]
  return(result);
 800d482:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d484:	2b00      	cmp	r3, #0
 800d486:	d10f      	bne.n	800d4a8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d488:	f3ef 8310 	mrs	r3, PRIMASK
 800d48c:	61bb      	str	r3, [r7, #24]
  return(result);
 800d48e:	69bb      	ldr	r3, [r7, #24]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d105      	bne.n	800d4a0 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d494:	f3ef 8311 	mrs	r3, BASEPRI
 800d498:	617b      	str	r3, [r7, #20]
  return(result);
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d02c      	beq.n	800d4fa <osMessageQueuePut+0x96>
 800d4a0:	4b28      	ldr	r3, [pc, #160]	@ (800d544 <osMessageQueuePut+0xe0>)
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	2b02      	cmp	r3, #2
 800d4a6:	d128      	bne.n	800d4fa <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d4a8:	6a3b      	ldr	r3, [r7, #32]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d005      	beq.n	800d4ba <osMessageQueuePut+0x56>
 800d4ae:	68bb      	ldr	r3, [r7, #8]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d002      	beq.n	800d4ba <osMessageQueuePut+0x56>
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d003      	beq.n	800d4c2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800d4ba:	f06f 0303 	mvn.w	r3, #3
 800d4be:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d4c0:	e039      	b.n	800d536 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d4c6:	f107 0210 	add.w	r2, r7, #16
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	68b9      	ldr	r1, [r7, #8]
 800d4ce:	6a38      	ldr	r0, [r7, #32]
 800d4d0:	f000 fd94 	bl	800dffc <xQueueGenericSendFromISR>
 800d4d4:	4603      	mov	r3, r0
 800d4d6:	2b01      	cmp	r3, #1
 800d4d8:	d003      	beq.n	800d4e2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800d4da:	f06f 0302 	mvn.w	r3, #2
 800d4de:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d4e0:	e029      	b.n	800d536 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800d4e2:	693b      	ldr	r3, [r7, #16]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d026      	beq.n	800d536 <osMessageQueuePut+0xd2>
 800d4e8:	4b17      	ldr	r3, [pc, #92]	@ (800d548 <osMessageQueuePut+0xe4>)
 800d4ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d4ee:	601a      	str	r2, [r3, #0]
 800d4f0:	f3bf 8f4f 	dsb	sy
 800d4f4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d4f8:	e01d      	b.n	800d536 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d4fa:	6a3b      	ldr	r3, [r7, #32]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d002      	beq.n	800d506 <osMessageQueuePut+0xa2>
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d103      	bne.n	800d50e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800d506:	f06f 0303 	mvn.w	r3, #3
 800d50a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d50c:	e014      	b.n	800d538 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d50e:	2300      	movs	r3, #0
 800d510:	683a      	ldr	r2, [r7, #0]
 800d512:	68b9      	ldr	r1, [r7, #8]
 800d514:	6a38      	ldr	r0, [r7, #32]
 800d516:	f000 fc67 	bl	800dde8 <xQueueGenericSend>
 800d51a:	4603      	mov	r3, r0
 800d51c:	2b01      	cmp	r3, #1
 800d51e:	d00b      	beq.n	800d538 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d003      	beq.n	800d52e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800d526:	f06f 0301 	mvn.w	r3, #1
 800d52a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d52c:	e004      	b.n	800d538 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800d52e:	f06f 0302 	mvn.w	r3, #2
 800d532:	627b      	str	r3, [r7, #36]	@ 0x24
 800d534:	e000      	b.n	800d538 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d536:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d53a:	4618      	mov	r0, r3
 800d53c:	3728      	adds	r7, #40	@ 0x28
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}
 800d542:	bf00      	nop
 800d544:	2000d0ec 	.word	0x2000d0ec
 800d548:	e000ed04 	.word	0xe000ed04

0800d54c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b08a      	sub	sp, #40	@ 0x28
 800d550:	af00      	add	r7, sp, #0
 800d552:	60f8      	str	r0, [r7, #12]
 800d554:	60b9      	str	r1, [r7, #8]
 800d556:	607a      	str	r2, [r7, #4]
 800d558:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d55e:	2300      	movs	r3, #0
 800d560:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d562:	f3ef 8305 	mrs	r3, IPSR
 800d566:	61fb      	str	r3, [r7, #28]
  return(result);
 800d568:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d10f      	bne.n	800d58e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d56e:	f3ef 8310 	mrs	r3, PRIMASK
 800d572:	61bb      	str	r3, [r7, #24]
  return(result);
 800d574:	69bb      	ldr	r3, [r7, #24]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d105      	bne.n	800d586 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d57a:	f3ef 8311 	mrs	r3, BASEPRI
 800d57e:	617b      	str	r3, [r7, #20]
  return(result);
 800d580:	697b      	ldr	r3, [r7, #20]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d02c      	beq.n	800d5e0 <osMessageQueueGet+0x94>
 800d586:	4b28      	ldr	r3, [pc, #160]	@ (800d628 <osMessageQueueGet+0xdc>)
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	2b02      	cmp	r3, #2
 800d58c:	d128      	bne.n	800d5e0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d58e:	6a3b      	ldr	r3, [r7, #32]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d005      	beq.n	800d5a0 <osMessageQueueGet+0x54>
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d002      	beq.n	800d5a0 <osMessageQueueGet+0x54>
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d003      	beq.n	800d5a8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800d5a0:	f06f 0303 	mvn.w	r3, #3
 800d5a4:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d5a6:	e038      	b.n	800d61a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d5ac:	f107 0310 	add.w	r3, r7, #16
 800d5b0:	461a      	mov	r2, r3
 800d5b2:	68b9      	ldr	r1, [r7, #8]
 800d5b4:	6a38      	ldr	r0, [r7, #32]
 800d5b6:	f001 f85d 	bl	800e674 <xQueueReceiveFromISR>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	2b01      	cmp	r3, #1
 800d5be:	d003      	beq.n	800d5c8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800d5c0:	f06f 0302 	mvn.w	r3, #2
 800d5c4:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d5c6:	e028      	b.n	800d61a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800d5c8:	693b      	ldr	r3, [r7, #16]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d025      	beq.n	800d61a <osMessageQueueGet+0xce>
 800d5ce:	4b17      	ldr	r3, [pc, #92]	@ (800d62c <osMessageQueueGet+0xe0>)
 800d5d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d5d4:	601a      	str	r2, [r3, #0]
 800d5d6:	f3bf 8f4f 	dsb	sy
 800d5da:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d5de:	e01c      	b.n	800d61a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d5e0:	6a3b      	ldr	r3, [r7, #32]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d002      	beq.n	800d5ec <osMessageQueueGet+0xa0>
 800d5e6:	68bb      	ldr	r3, [r7, #8]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d103      	bne.n	800d5f4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800d5ec:	f06f 0303 	mvn.w	r3, #3
 800d5f0:	627b      	str	r3, [r7, #36]	@ 0x24
 800d5f2:	e013      	b.n	800d61c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d5f4:	683a      	ldr	r2, [r7, #0]
 800d5f6:	68b9      	ldr	r1, [r7, #8]
 800d5f8:	6a38      	ldr	r0, [r7, #32]
 800d5fa:	f000 fe3b 	bl	800e274 <xQueueReceive>
 800d5fe:	4603      	mov	r3, r0
 800d600:	2b01      	cmp	r3, #1
 800d602:	d00b      	beq.n	800d61c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d003      	beq.n	800d612 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800d60a:	f06f 0301 	mvn.w	r3, #1
 800d60e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d610:	e004      	b.n	800d61c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800d612:	f06f 0302 	mvn.w	r3, #2
 800d616:	627b      	str	r3, [r7, #36]	@ 0x24
 800d618:	e000      	b.n	800d61c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d61a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d61c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d61e:	4618      	mov	r0, r3
 800d620:	3728      	adds	r7, #40	@ 0x28
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}
 800d626:	bf00      	nop
 800d628:	2000d0ec 	.word	0x2000d0ec
 800d62c:	e000ed04 	.word	0xe000ed04

0800d630 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800d630:	b580      	push	{r7, lr}
 800d632:	b088      	sub	sp, #32
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 800d63c:	69bb      	ldr	r3, [r7, #24]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d102      	bne.n	800d648 <osMessageQueueGetCount+0x18>
    count = 0U;
 800d642:	2300      	movs	r3, #0
 800d644:	61fb      	str	r3, [r7, #28]
 800d646:	e01e      	b.n	800d686 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d648:	f3ef 8305 	mrs	r3, IPSR
 800d64c:	617b      	str	r3, [r7, #20]
  return(result);
 800d64e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800d650:	2b00      	cmp	r3, #0
 800d652:	d10f      	bne.n	800d674 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d654:	f3ef 8310 	mrs	r3, PRIMASK
 800d658:	613b      	str	r3, [r7, #16]
  return(result);
 800d65a:	693b      	ldr	r3, [r7, #16]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d105      	bne.n	800d66c <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d660:	f3ef 8311 	mrs	r3, BASEPRI
 800d664:	60fb      	str	r3, [r7, #12]
  return(result);
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d008      	beq.n	800d67e <osMessageQueueGetCount+0x4e>
 800d66c:	4b08      	ldr	r3, [pc, #32]	@ (800d690 <osMessageQueueGetCount+0x60>)
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	2b02      	cmp	r3, #2
 800d672:	d104      	bne.n	800d67e <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800d674:	69b8      	ldr	r0, [r7, #24]
 800d676:	f001 f8a6 	bl	800e7c6 <uxQueueMessagesWaitingFromISR>
 800d67a:	61f8      	str	r0, [r7, #28]
 800d67c:	e003      	b.n	800d686 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800d67e:	69b8      	ldr	r0, [r7, #24]
 800d680:	f001 f880 	bl	800e784 <uxQueueMessagesWaiting>
 800d684:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 800d686:	69fb      	ldr	r3, [r7, #28]
}
 800d688:	4618      	mov	r0, r3
 800d68a:	3720      	adds	r7, #32
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}
 800d690:	2000d0ec 	.word	0x2000d0ec

0800d694 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 800d694:	b580      	push	{r7, lr}
 800d696:	b088      	sub	sp, #32
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d6a0:	f3ef 8305 	mrs	r3, IPSR
 800d6a4:	617b      	str	r3, [r7, #20]
  return(result);
 800d6a6:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d10f      	bne.n	800d6cc <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d6ac:	f3ef 8310 	mrs	r3, PRIMASK
 800d6b0:	613b      	str	r3, [r7, #16]
  return(result);
 800d6b2:	693b      	ldr	r3, [r7, #16]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d105      	bne.n	800d6c4 <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d6b8:	f3ef 8311 	mrs	r3, BASEPRI
 800d6bc:	60fb      	str	r3, [r7, #12]
  return(result);
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d007      	beq.n	800d6d4 <osMessageQueueDelete+0x40>
 800d6c4:	4b0d      	ldr	r3, [pc, #52]	@ (800d6fc <osMessageQueueDelete+0x68>)
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	2b02      	cmp	r3, #2
 800d6ca:	d103      	bne.n	800d6d4 <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 800d6cc:	f06f 0305 	mvn.w	r3, #5
 800d6d0:	61fb      	str	r3, [r7, #28]
 800d6d2:	e00e      	b.n	800d6f2 <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 800d6d4:	69bb      	ldr	r3, [r7, #24]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d103      	bne.n	800d6e2 <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 800d6da:	f06f 0303 	mvn.w	r3, #3
 800d6de:	61fb      	str	r3, [r7, #28]
 800d6e0:	e007      	b.n	800d6f2 <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800d6e2:	69b8      	ldr	r0, [r7, #24]
 800d6e4:	f001 fa08 	bl	800eaf8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 800d6ec:	69b8      	ldr	r0, [r7, #24]
 800d6ee:	f001 f88b 	bl	800e808 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800d6f2:	69fb      	ldr	r3, [r7, #28]
}
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	3720      	adds	r7, #32
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}
 800d6fc:	2000d0ec 	.word	0x2000d0ec

0800d700 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d700:	b480      	push	{r7}
 800d702:	b085      	sub	sp, #20
 800d704:	af00      	add	r7, sp, #0
 800d706:	60f8      	str	r0, [r7, #12]
 800d708:	60b9      	str	r1, [r7, #8]
 800d70a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	4a07      	ldr	r2, [pc, #28]	@ (800d72c <vApplicationGetIdleTaskMemory+0x2c>)
 800d710:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d712:	68bb      	ldr	r3, [r7, #8]
 800d714:	4a06      	ldr	r2, [pc, #24]	@ (800d730 <vApplicationGetIdleTaskMemory+0x30>)
 800d716:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d71e:	601a      	str	r2, [r3, #0]
}
 800d720:	bf00      	nop
 800d722:	3714      	adds	r7, #20
 800d724:	46bd      	mov	sp, r7
 800d726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72a:	4770      	bx	lr
 800d72c:	2000d0f0 	.word	0x2000d0f0
 800d730:	2000d198 	.word	0x2000d198

0800d734 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d734:	b480      	push	{r7}
 800d736:	b085      	sub	sp, #20
 800d738:	af00      	add	r7, sp, #0
 800d73a:	60f8      	str	r0, [r7, #12]
 800d73c:	60b9      	str	r1, [r7, #8]
 800d73e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	4a07      	ldr	r2, [pc, #28]	@ (800d760 <vApplicationGetTimerTaskMemory+0x2c>)
 800d744:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	4a06      	ldr	r2, [pc, #24]	@ (800d764 <vApplicationGetTimerTaskMemory+0x30>)
 800d74a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d752:	601a      	str	r2, [r3, #0]
}
 800d754:	bf00      	nop
 800d756:	3714      	adds	r7, #20
 800d758:	46bd      	mov	sp, r7
 800d75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75e:	4770      	bx	lr
 800d760:	2000d998 	.word	0x2000d998
 800d764:	2000da40 	.word	0x2000da40

0800d768 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d768:	b480      	push	{r7}
 800d76a:	b083      	sub	sp, #12
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f103 0208 	add.w	r2, r3, #8
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d780:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	f103 0208 	add.w	r2, r3, #8
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	f103 0208 	add.w	r2, r3, #8
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	2200      	movs	r2, #0
 800d79a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d79c:	bf00      	nop
 800d79e:	370c      	adds	r7, #12
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a6:	4770      	bx	lr

0800d7a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d7a8:	b480      	push	{r7}
 800d7aa:	b083      	sub	sp, #12
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d7b6:	bf00      	nop
 800d7b8:	370c      	adds	r7, #12
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c0:	4770      	bx	lr

0800d7c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d7c2:	b480      	push	{r7}
 800d7c4:	b085      	sub	sp, #20
 800d7c6:	af00      	add	r7, sp, #0
 800d7c8:	6078      	str	r0, [r7, #4]
 800d7ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	685b      	ldr	r3, [r3, #4]
 800d7d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	68fa      	ldr	r2, [r7, #12]
 800d7d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	689a      	ldr	r2, [r3, #8]
 800d7dc:	683b      	ldr	r3, [r7, #0]
 800d7de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	689b      	ldr	r3, [r3, #8]
 800d7e4:	683a      	ldr	r2, [r7, #0]
 800d7e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	683a      	ldr	r2, [r7, #0]
 800d7ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	687a      	ldr	r2, [r7, #4]
 800d7f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	1c5a      	adds	r2, r3, #1
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	601a      	str	r2, [r3, #0]
}
 800d7fe:	bf00      	nop
 800d800:	3714      	adds	r7, #20
 800d802:	46bd      	mov	sp, r7
 800d804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d808:	4770      	bx	lr

0800d80a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d80a:	b480      	push	{r7}
 800d80c:	b085      	sub	sp, #20
 800d80e:	af00      	add	r7, sp, #0
 800d810:	6078      	str	r0, [r7, #4]
 800d812:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d81a:	68bb      	ldr	r3, [r7, #8]
 800d81c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d820:	d103      	bne.n	800d82a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	691b      	ldr	r3, [r3, #16]
 800d826:	60fb      	str	r3, [r7, #12]
 800d828:	e00c      	b.n	800d844 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	3308      	adds	r3, #8
 800d82e:	60fb      	str	r3, [r7, #12]
 800d830:	e002      	b.n	800d838 <vListInsert+0x2e>
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	685b      	ldr	r3, [r3, #4]
 800d836:	60fb      	str	r3, [r7, #12]
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	685b      	ldr	r3, [r3, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	68ba      	ldr	r2, [r7, #8]
 800d840:	429a      	cmp	r2, r3
 800d842:	d2f6      	bcs.n	800d832 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	685a      	ldr	r2, [r3, #4]
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	685b      	ldr	r3, [r3, #4]
 800d850:	683a      	ldr	r2, [r7, #0]
 800d852:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	68fa      	ldr	r2, [r7, #12]
 800d858:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	683a      	ldr	r2, [r7, #0]
 800d85e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	687a      	ldr	r2, [r7, #4]
 800d864:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	1c5a      	adds	r2, r3, #1
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	601a      	str	r2, [r3, #0]
}
 800d870:	bf00      	nop
 800d872:	3714      	adds	r7, #20
 800d874:	46bd      	mov	sp, r7
 800d876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87a:	4770      	bx	lr

0800d87c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d87c:	b480      	push	{r7}
 800d87e:	b085      	sub	sp, #20
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	691b      	ldr	r3, [r3, #16]
 800d888:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	685b      	ldr	r3, [r3, #4]
 800d88e:	687a      	ldr	r2, [r7, #4]
 800d890:	6892      	ldr	r2, [r2, #8]
 800d892:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	689b      	ldr	r3, [r3, #8]
 800d898:	687a      	ldr	r2, [r7, #4]
 800d89a:	6852      	ldr	r2, [r2, #4]
 800d89c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	685b      	ldr	r3, [r3, #4]
 800d8a2:	687a      	ldr	r2, [r7, #4]
 800d8a4:	429a      	cmp	r2, r3
 800d8a6:	d103      	bne.n	800d8b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	689a      	ldr	r2, [r3, #8]
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	1e5a      	subs	r2, r3, #1
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	681b      	ldr	r3, [r3, #0]
}
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	3714      	adds	r7, #20
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ce:	4770      	bx	lr

0800d8d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b084      	sub	sp, #16
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
 800d8d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d10d      	bne.n	800d900 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d8e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8e8:	b672      	cpsid	i
 800d8ea:	f383 8811 	msr	BASEPRI, r3
 800d8ee:	f3bf 8f6f 	isb	sy
 800d8f2:	f3bf 8f4f 	dsb	sy
 800d8f6:	b662      	cpsie	i
 800d8f8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d8fa:	bf00      	nop
 800d8fc:	bf00      	nop
 800d8fe:	e7fd      	b.n	800d8fc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800d900:	f002 feec 	bl	80106dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	681a      	ldr	r2, [r3, #0]
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d90c:	68f9      	ldr	r1, [r7, #12]
 800d90e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d910:	fb01 f303 	mul.w	r3, r1, r3
 800d914:	441a      	add	r2, r3
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	2200      	movs	r2, #0
 800d91e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	681a      	ldr	r2, [r3, #0]
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	681a      	ldr	r2, [r3, #0]
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d930:	3b01      	subs	r3, #1
 800d932:	68f9      	ldr	r1, [r7, #12]
 800d934:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d936:	fb01 f303 	mul.w	r3, r1, r3
 800d93a:	441a      	add	r2, r3
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	22ff      	movs	r2, #255	@ 0xff
 800d944:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	22ff      	movs	r2, #255	@ 0xff
 800d94c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d114      	bne.n	800d980 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	691b      	ldr	r3, [r3, #16]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d01a      	beq.n	800d994 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	3310      	adds	r3, #16
 800d962:	4618      	mov	r0, r3
 800d964:	f001 fe7c 	bl	800f660 <xTaskRemoveFromEventList>
 800d968:	4603      	mov	r3, r0
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d012      	beq.n	800d994 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d96e:	4b0d      	ldr	r3, [pc, #52]	@ (800d9a4 <xQueueGenericReset+0xd4>)
 800d970:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d974:	601a      	str	r2, [r3, #0]
 800d976:	f3bf 8f4f 	dsb	sy
 800d97a:	f3bf 8f6f 	isb	sy
 800d97e:	e009      	b.n	800d994 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	3310      	adds	r3, #16
 800d984:	4618      	mov	r0, r3
 800d986:	f7ff feef 	bl	800d768 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	3324      	adds	r3, #36	@ 0x24
 800d98e:	4618      	mov	r0, r3
 800d990:	f7ff feea 	bl	800d768 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d994:	f002 fed8 	bl	8010748 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d998:	2301      	movs	r3, #1
}
 800d99a:	4618      	mov	r0, r3
 800d99c:	3710      	adds	r7, #16
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}
 800d9a2:	bf00      	nop
 800d9a4:	e000ed04 	.word	0xe000ed04

0800d9a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b08e      	sub	sp, #56	@ 0x38
 800d9ac:	af02      	add	r7, sp, #8
 800d9ae:	60f8      	str	r0, [r7, #12]
 800d9b0:	60b9      	str	r1, [r7, #8]
 800d9b2:	607a      	str	r2, [r7, #4]
 800d9b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d10d      	bne.n	800d9d8 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800d9bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9c0:	b672      	cpsid	i
 800d9c2:	f383 8811 	msr	BASEPRI, r3
 800d9c6:	f3bf 8f6f 	isb	sy
 800d9ca:	f3bf 8f4f 	dsb	sy
 800d9ce:	b662      	cpsie	i
 800d9d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d9d2:	bf00      	nop
 800d9d4:	bf00      	nop
 800d9d6:	e7fd      	b.n	800d9d4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d10d      	bne.n	800d9fa <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800d9de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9e2:	b672      	cpsid	i
 800d9e4:	f383 8811 	msr	BASEPRI, r3
 800d9e8:	f3bf 8f6f 	isb	sy
 800d9ec:	f3bf 8f4f 	dsb	sy
 800d9f0:	b662      	cpsie	i
 800d9f2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d9f4:	bf00      	nop
 800d9f6:	bf00      	nop
 800d9f8:	e7fd      	b.n	800d9f6 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d002      	beq.n	800da06 <xQueueGenericCreateStatic+0x5e>
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d001      	beq.n	800da0a <xQueueGenericCreateStatic+0x62>
 800da06:	2301      	movs	r3, #1
 800da08:	e000      	b.n	800da0c <xQueueGenericCreateStatic+0x64>
 800da0a:	2300      	movs	r3, #0
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d10d      	bne.n	800da2c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800da10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da14:	b672      	cpsid	i
 800da16:	f383 8811 	msr	BASEPRI, r3
 800da1a:	f3bf 8f6f 	isb	sy
 800da1e:	f3bf 8f4f 	dsb	sy
 800da22:	b662      	cpsie	i
 800da24:	623b      	str	r3, [r7, #32]
}
 800da26:	bf00      	nop
 800da28:	bf00      	nop
 800da2a:	e7fd      	b.n	800da28 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d102      	bne.n	800da38 <xQueueGenericCreateStatic+0x90>
 800da32:	68bb      	ldr	r3, [r7, #8]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d101      	bne.n	800da3c <xQueueGenericCreateStatic+0x94>
 800da38:	2301      	movs	r3, #1
 800da3a:	e000      	b.n	800da3e <xQueueGenericCreateStatic+0x96>
 800da3c:	2300      	movs	r3, #0
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d10d      	bne.n	800da5e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800da42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da46:	b672      	cpsid	i
 800da48:	f383 8811 	msr	BASEPRI, r3
 800da4c:	f3bf 8f6f 	isb	sy
 800da50:	f3bf 8f4f 	dsb	sy
 800da54:	b662      	cpsie	i
 800da56:	61fb      	str	r3, [r7, #28]
}
 800da58:	bf00      	nop
 800da5a:	bf00      	nop
 800da5c:	e7fd      	b.n	800da5a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800da5e:	2350      	movs	r3, #80	@ 0x50
 800da60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800da62:	697b      	ldr	r3, [r7, #20]
 800da64:	2b50      	cmp	r3, #80	@ 0x50
 800da66:	d00d      	beq.n	800da84 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800da68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da6c:	b672      	cpsid	i
 800da6e:	f383 8811 	msr	BASEPRI, r3
 800da72:	f3bf 8f6f 	isb	sy
 800da76:	f3bf 8f4f 	dsb	sy
 800da7a:	b662      	cpsie	i
 800da7c:	61bb      	str	r3, [r7, #24]
}
 800da7e:	bf00      	nop
 800da80:	bf00      	nop
 800da82:	e7fd      	b.n	800da80 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800da84:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800da8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d00d      	beq.n	800daac <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800da90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da92:	2201      	movs	r2, #1
 800da94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800da98:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800da9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da9e:	9300      	str	r3, [sp, #0]
 800daa0:	4613      	mov	r3, r2
 800daa2:	687a      	ldr	r2, [r7, #4]
 800daa4:	68b9      	ldr	r1, [r7, #8]
 800daa6:	68f8      	ldr	r0, [r7, #12]
 800daa8:	f000 f848 	bl	800db3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800daac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800daae:	4618      	mov	r0, r3
 800dab0:	3730      	adds	r7, #48	@ 0x30
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}

0800dab6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800dab6:	b580      	push	{r7, lr}
 800dab8:	b08a      	sub	sp, #40	@ 0x28
 800daba:	af02      	add	r7, sp, #8
 800dabc:	60f8      	str	r0, [r7, #12]
 800dabe:	60b9      	str	r1, [r7, #8]
 800dac0:	4613      	mov	r3, r2
 800dac2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d10d      	bne.n	800dae6 <xQueueGenericCreate+0x30>
	__asm volatile
 800daca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dace:	b672      	cpsid	i
 800dad0:	f383 8811 	msr	BASEPRI, r3
 800dad4:	f3bf 8f6f 	isb	sy
 800dad8:	f3bf 8f4f 	dsb	sy
 800dadc:	b662      	cpsie	i
 800dade:	613b      	str	r3, [r7, #16]
}
 800dae0:	bf00      	nop
 800dae2:	bf00      	nop
 800dae4:	e7fd      	b.n	800dae2 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d102      	bne.n	800daf2 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800daec:	2300      	movs	r3, #0
 800daee:	61fb      	str	r3, [r7, #28]
 800daf0:	e004      	b.n	800dafc <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	68ba      	ldr	r2, [r7, #8]
 800daf6:	fb02 f303 	mul.w	r3, r2, r3
 800dafa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800dafc:	69fb      	ldr	r3, [r7, #28]
 800dafe:	3350      	adds	r3, #80	@ 0x50
 800db00:	4618      	mov	r0, r3
 800db02:	f002 ff19 	bl	8010938 <pvPortMalloc>
 800db06:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800db08:	69bb      	ldr	r3, [r7, #24]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d011      	beq.n	800db32 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800db0e:	69bb      	ldr	r3, [r7, #24]
 800db10:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	3350      	adds	r3, #80	@ 0x50
 800db16:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800db18:	69bb      	ldr	r3, [r7, #24]
 800db1a:	2200      	movs	r2, #0
 800db1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800db20:	79fa      	ldrb	r2, [r7, #7]
 800db22:	69bb      	ldr	r3, [r7, #24]
 800db24:	9300      	str	r3, [sp, #0]
 800db26:	4613      	mov	r3, r2
 800db28:	697a      	ldr	r2, [r7, #20]
 800db2a:	68b9      	ldr	r1, [r7, #8]
 800db2c:	68f8      	ldr	r0, [r7, #12]
 800db2e:	f000 f805 	bl	800db3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800db32:	69bb      	ldr	r3, [r7, #24]
	}
 800db34:	4618      	mov	r0, r3
 800db36:	3720      	adds	r7, #32
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}

0800db3c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b084      	sub	sp, #16
 800db40:	af00      	add	r7, sp, #0
 800db42:	60f8      	str	r0, [r7, #12]
 800db44:	60b9      	str	r1, [r7, #8]
 800db46:	607a      	str	r2, [r7, #4]
 800db48:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800db4a:	68bb      	ldr	r3, [r7, #8]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d103      	bne.n	800db58 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800db50:	69bb      	ldr	r3, [r7, #24]
 800db52:	69ba      	ldr	r2, [r7, #24]
 800db54:	601a      	str	r2, [r3, #0]
 800db56:	e002      	b.n	800db5e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800db58:	69bb      	ldr	r3, [r7, #24]
 800db5a:	687a      	ldr	r2, [r7, #4]
 800db5c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800db5e:	69bb      	ldr	r3, [r7, #24]
 800db60:	68fa      	ldr	r2, [r7, #12]
 800db62:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800db64:	69bb      	ldr	r3, [r7, #24]
 800db66:	68ba      	ldr	r2, [r7, #8]
 800db68:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800db6a:	2101      	movs	r1, #1
 800db6c:	69b8      	ldr	r0, [r7, #24]
 800db6e:	f7ff feaf 	bl	800d8d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800db72:	69bb      	ldr	r3, [r7, #24]
 800db74:	78fa      	ldrb	r2, [r7, #3]
 800db76:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800db7a:	bf00      	nop
 800db7c:	3710      	adds	r7, #16
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}

0800db82 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800db82:	b580      	push	{r7, lr}
 800db84:	b082      	sub	sp, #8
 800db86:	af00      	add	r7, sp, #0
 800db88:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d00e      	beq.n	800dbae <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2200      	movs	r2, #0
 800db94:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	2200      	movs	r2, #0
 800db9a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2200      	movs	r2, #0
 800dba0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800dba2:	2300      	movs	r3, #0
 800dba4:	2200      	movs	r2, #0
 800dba6:	2100      	movs	r1, #0
 800dba8:	6878      	ldr	r0, [r7, #4]
 800dbaa:	f000 f91d 	bl	800dde8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800dbae:	bf00      	nop
 800dbb0:	3708      	adds	r7, #8
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}

0800dbb6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800dbb6:	b580      	push	{r7, lr}
 800dbb8:	b086      	sub	sp, #24
 800dbba:	af00      	add	r7, sp, #0
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800dbc0:	2301      	movs	r3, #1
 800dbc2:	617b      	str	r3, [r7, #20]
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800dbc8:	79fb      	ldrb	r3, [r7, #7]
 800dbca:	461a      	mov	r2, r3
 800dbcc:	6939      	ldr	r1, [r7, #16]
 800dbce:	6978      	ldr	r0, [r7, #20]
 800dbd0:	f7ff ff71 	bl	800dab6 <xQueueGenericCreate>
 800dbd4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800dbd6:	68f8      	ldr	r0, [r7, #12]
 800dbd8:	f7ff ffd3 	bl	800db82 <prvInitialiseMutex>

		return xNewQueue;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
	}
 800dbde:	4618      	mov	r0, r3
 800dbe0:	3718      	adds	r7, #24
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}

0800dbe6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800dbe6:	b580      	push	{r7, lr}
 800dbe8:	b088      	sub	sp, #32
 800dbea:	af02      	add	r7, sp, #8
 800dbec:	4603      	mov	r3, r0
 800dbee:	6039      	str	r1, [r7, #0]
 800dbf0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800dbf2:	2301      	movs	r3, #1
 800dbf4:	617b      	str	r3, [r7, #20]
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800dbfa:	79fb      	ldrb	r3, [r7, #7]
 800dbfc:	9300      	str	r3, [sp, #0]
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	2200      	movs	r2, #0
 800dc02:	6939      	ldr	r1, [r7, #16]
 800dc04:	6978      	ldr	r0, [r7, #20]
 800dc06:	f7ff fecf 	bl	800d9a8 <xQueueGenericCreateStatic>
 800dc0a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800dc0c:	68f8      	ldr	r0, [r7, #12]
 800dc0e:	f7ff ffb8 	bl	800db82 <prvInitialiseMutex>

		return xNewQueue;
 800dc12:	68fb      	ldr	r3, [r7, #12]
	}
 800dc14:	4618      	mov	r0, r3
 800dc16:	3718      	adds	r7, #24
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd80      	pop	{r7, pc}

0800dc1c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800dc1c:	b590      	push	{r4, r7, lr}
 800dc1e:	b087      	sub	sp, #28
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800dc28:	693b      	ldr	r3, [r7, #16]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d10d      	bne.n	800dc4a <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 800dc2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc32:	b672      	cpsid	i
 800dc34:	f383 8811 	msr	BASEPRI, r3
 800dc38:	f3bf 8f6f 	isb	sy
 800dc3c:	f3bf 8f4f 	dsb	sy
 800dc40:	b662      	cpsie	i
 800dc42:	60fb      	str	r3, [r7, #12]
}
 800dc44:	bf00      	nop
 800dc46:	bf00      	nop
 800dc48:	e7fd      	b.n	800dc46 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800dc4a:	693b      	ldr	r3, [r7, #16]
 800dc4c:	689c      	ldr	r4, [r3, #8]
 800dc4e:	f001 fed5 	bl	800f9fc <xTaskGetCurrentTaskHandle>
 800dc52:	4603      	mov	r3, r0
 800dc54:	429c      	cmp	r4, r3
 800dc56:	d111      	bne.n	800dc7c <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800dc58:	693b      	ldr	r3, [r7, #16]
 800dc5a:	68db      	ldr	r3, [r3, #12]
 800dc5c:	1e5a      	subs	r2, r3, #1
 800dc5e:	693b      	ldr	r3, [r7, #16]
 800dc60:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800dc62:	693b      	ldr	r3, [r7, #16]
 800dc64:	68db      	ldr	r3, [r3, #12]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d105      	bne.n	800dc76 <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	2100      	movs	r1, #0
 800dc70:	6938      	ldr	r0, [r7, #16]
 800dc72:	f000 f8b9 	bl	800dde8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800dc76:	2301      	movs	r3, #1
 800dc78:	617b      	str	r3, [r7, #20]
 800dc7a:	e001      	b.n	800dc80 <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800dc80:	697b      	ldr	r3, [r7, #20]
	}
 800dc82:	4618      	mov	r0, r3
 800dc84:	371c      	adds	r7, #28
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd90      	pop	{r4, r7, pc}

0800dc8a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800dc8a:	b590      	push	{r4, r7, lr}
 800dc8c:	b087      	sub	sp, #28
 800dc8e:	af00      	add	r7, sp, #0
 800dc90:	6078      	str	r0, [r7, #4]
 800dc92:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800dc98:	693b      	ldr	r3, [r7, #16]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d10d      	bne.n	800dcba <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 800dc9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dca2:	b672      	cpsid	i
 800dca4:	f383 8811 	msr	BASEPRI, r3
 800dca8:	f3bf 8f6f 	isb	sy
 800dcac:	f3bf 8f4f 	dsb	sy
 800dcb0:	b662      	cpsie	i
 800dcb2:	60fb      	str	r3, [r7, #12]
}
 800dcb4:	bf00      	nop
 800dcb6:	bf00      	nop
 800dcb8:	e7fd      	b.n	800dcb6 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800dcba:	693b      	ldr	r3, [r7, #16]
 800dcbc:	689c      	ldr	r4, [r3, #8]
 800dcbe:	f001 fe9d 	bl	800f9fc <xTaskGetCurrentTaskHandle>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	429c      	cmp	r4, r3
 800dcc6:	d107      	bne.n	800dcd8 <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800dcc8:	693b      	ldr	r3, [r7, #16]
 800dcca:	68db      	ldr	r3, [r3, #12]
 800dccc:	1c5a      	adds	r2, r3, #1
 800dcce:	693b      	ldr	r3, [r7, #16]
 800dcd0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	617b      	str	r3, [r7, #20]
 800dcd6:	e00c      	b.n	800dcf2 <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800dcd8:	6839      	ldr	r1, [r7, #0]
 800dcda:	6938      	ldr	r0, [r7, #16]
 800dcdc:	f000 fbb2 	bl	800e444 <xQueueSemaphoreTake>
 800dce0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800dce2:	697b      	ldr	r3, [r7, #20]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d004      	beq.n	800dcf2 <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800dce8:	693b      	ldr	r3, [r7, #16]
 800dcea:	68db      	ldr	r3, [r3, #12]
 800dcec:	1c5a      	adds	r2, r3, #1
 800dcee:	693b      	ldr	r3, [r7, #16]
 800dcf0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800dcf2:	697b      	ldr	r3, [r7, #20]
	}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	371c      	adds	r7, #28
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bd90      	pop	{r4, r7, pc}

0800dcfc <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b08a      	sub	sp, #40	@ 0x28
 800dd00:	af02      	add	r7, sp, #8
 800dd02:	60f8      	str	r0, [r7, #12]
 800dd04:	60b9      	str	r1, [r7, #8]
 800dd06:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d10d      	bne.n	800dd2a <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 800dd0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd12:	b672      	cpsid	i
 800dd14:	f383 8811 	msr	BASEPRI, r3
 800dd18:	f3bf 8f6f 	isb	sy
 800dd1c:	f3bf 8f4f 	dsb	sy
 800dd20:	b662      	cpsie	i
 800dd22:	61bb      	str	r3, [r7, #24]
}
 800dd24:	bf00      	nop
 800dd26:	bf00      	nop
 800dd28:	e7fd      	b.n	800dd26 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800dd2a:	68ba      	ldr	r2, [r7, #8]
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	429a      	cmp	r2, r3
 800dd30:	d90d      	bls.n	800dd4e <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 800dd32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd36:	b672      	cpsid	i
 800dd38:	f383 8811 	msr	BASEPRI, r3
 800dd3c:	f3bf 8f6f 	isb	sy
 800dd40:	f3bf 8f4f 	dsb	sy
 800dd44:	b662      	cpsie	i
 800dd46:	617b      	str	r3, [r7, #20]
}
 800dd48:	bf00      	nop
 800dd4a:	bf00      	nop
 800dd4c:	e7fd      	b.n	800dd4a <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800dd4e:	2302      	movs	r3, #2
 800dd50:	9300      	str	r3, [sp, #0]
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	2200      	movs	r2, #0
 800dd56:	2100      	movs	r1, #0
 800dd58:	68f8      	ldr	r0, [r7, #12]
 800dd5a:	f7ff fe25 	bl	800d9a8 <xQueueGenericCreateStatic>
 800dd5e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800dd60:	69fb      	ldr	r3, [r7, #28]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d002      	beq.n	800dd6c <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800dd66:	69fb      	ldr	r3, [r7, #28]
 800dd68:	68ba      	ldr	r2, [r7, #8]
 800dd6a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800dd6c:	69fb      	ldr	r3, [r7, #28]
	}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3720      	adds	r7, #32
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}

0800dd76 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800dd76:	b580      	push	{r7, lr}
 800dd78:	b086      	sub	sp, #24
 800dd7a:	af00      	add	r7, sp, #0
 800dd7c:	6078      	str	r0, [r7, #4]
 800dd7e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d10d      	bne.n	800dda2 <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 800dd86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd8a:	b672      	cpsid	i
 800dd8c:	f383 8811 	msr	BASEPRI, r3
 800dd90:	f3bf 8f6f 	isb	sy
 800dd94:	f3bf 8f4f 	dsb	sy
 800dd98:	b662      	cpsie	i
 800dd9a:	613b      	str	r3, [r7, #16]
}
 800dd9c:	bf00      	nop
 800dd9e:	bf00      	nop
 800dda0:	e7fd      	b.n	800dd9e <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800dda2:	683a      	ldr	r2, [r7, #0]
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	429a      	cmp	r2, r3
 800dda8:	d90d      	bls.n	800ddc6 <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 800ddaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddae:	b672      	cpsid	i
 800ddb0:	f383 8811 	msr	BASEPRI, r3
 800ddb4:	f3bf 8f6f 	isb	sy
 800ddb8:	f3bf 8f4f 	dsb	sy
 800ddbc:	b662      	cpsie	i
 800ddbe:	60fb      	str	r3, [r7, #12]
}
 800ddc0:	bf00      	nop
 800ddc2:	bf00      	nop
 800ddc4:	e7fd      	b.n	800ddc2 <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ddc6:	2202      	movs	r2, #2
 800ddc8:	2100      	movs	r1, #0
 800ddca:	6878      	ldr	r0, [r7, #4]
 800ddcc:	f7ff fe73 	bl	800dab6 <xQueueGenericCreate>
 800ddd0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800ddd2:	697b      	ldr	r3, [r7, #20]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d002      	beq.n	800ddde <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ddd8:	697b      	ldr	r3, [r7, #20]
 800ddda:	683a      	ldr	r2, [r7, #0]
 800dddc:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ddde:	697b      	ldr	r3, [r7, #20]
	}
 800dde0:	4618      	mov	r0, r3
 800dde2:	3718      	adds	r7, #24
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd80      	pop	{r7, pc}

0800dde8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b08e      	sub	sp, #56	@ 0x38
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	60f8      	str	r0, [r7, #12]
 800ddf0:	60b9      	str	r1, [r7, #8]
 800ddf2:	607a      	str	r2, [r7, #4]
 800ddf4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ddfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de00:	2b00      	cmp	r3, #0
 800de02:	d10d      	bne.n	800de20 <xQueueGenericSend+0x38>
	__asm volatile
 800de04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de08:	b672      	cpsid	i
 800de0a:	f383 8811 	msr	BASEPRI, r3
 800de0e:	f3bf 8f6f 	isb	sy
 800de12:	f3bf 8f4f 	dsb	sy
 800de16:	b662      	cpsie	i
 800de18:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800de1a:	bf00      	nop
 800de1c:	bf00      	nop
 800de1e:	e7fd      	b.n	800de1c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d103      	bne.n	800de2e <xQueueGenericSend+0x46>
 800de26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d101      	bne.n	800de32 <xQueueGenericSend+0x4a>
 800de2e:	2301      	movs	r3, #1
 800de30:	e000      	b.n	800de34 <xQueueGenericSend+0x4c>
 800de32:	2300      	movs	r3, #0
 800de34:	2b00      	cmp	r3, #0
 800de36:	d10d      	bne.n	800de54 <xQueueGenericSend+0x6c>
	__asm volatile
 800de38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de3c:	b672      	cpsid	i
 800de3e:	f383 8811 	msr	BASEPRI, r3
 800de42:	f3bf 8f6f 	isb	sy
 800de46:	f3bf 8f4f 	dsb	sy
 800de4a:	b662      	cpsie	i
 800de4c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800de4e:	bf00      	nop
 800de50:	bf00      	nop
 800de52:	e7fd      	b.n	800de50 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	2b02      	cmp	r3, #2
 800de58:	d103      	bne.n	800de62 <xQueueGenericSend+0x7a>
 800de5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de5e:	2b01      	cmp	r3, #1
 800de60:	d101      	bne.n	800de66 <xQueueGenericSend+0x7e>
 800de62:	2301      	movs	r3, #1
 800de64:	e000      	b.n	800de68 <xQueueGenericSend+0x80>
 800de66:	2300      	movs	r3, #0
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d10d      	bne.n	800de88 <xQueueGenericSend+0xa0>
	__asm volatile
 800de6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de70:	b672      	cpsid	i
 800de72:	f383 8811 	msr	BASEPRI, r3
 800de76:	f3bf 8f6f 	isb	sy
 800de7a:	f3bf 8f4f 	dsb	sy
 800de7e:	b662      	cpsie	i
 800de80:	623b      	str	r3, [r7, #32]
}
 800de82:	bf00      	nop
 800de84:	bf00      	nop
 800de86:	e7fd      	b.n	800de84 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800de88:	f001 fdc8 	bl	800fa1c <xTaskGetSchedulerState>
 800de8c:	4603      	mov	r3, r0
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d102      	bne.n	800de98 <xQueueGenericSend+0xb0>
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d101      	bne.n	800de9c <xQueueGenericSend+0xb4>
 800de98:	2301      	movs	r3, #1
 800de9a:	e000      	b.n	800de9e <xQueueGenericSend+0xb6>
 800de9c:	2300      	movs	r3, #0
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d10d      	bne.n	800debe <xQueueGenericSend+0xd6>
	__asm volatile
 800dea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dea6:	b672      	cpsid	i
 800dea8:	f383 8811 	msr	BASEPRI, r3
 800deac:	f3bf 8f6f 	isb	sy
 800deb0:	f3bf 8f4f 	dsb	sy
 800deb4:	b662      	cpsie	i
 800deb6:	61fb      	str	r3, [r7, #28]
}
 800deb8:	bf00      	nop
 800deba:	bf00      	nop
 800debc:	e7fd      	b.n	800deba <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800debe:	f002 fc0d 	bl	80106dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dec4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dec8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800deca:	429a      	cmp	r2, r3
 800decc:	d302      	bcc.n	800ded4 <xQueueGenericSend+0xec>
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	2b02      	cmp	r3, #2
 800ded2:	d129      	bne.n	800df28 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ded4:	683a      	ldr	r2, [r7, #0]
 800ded6:	68b9      	ldr	r1, [r7, #8]
 800ded8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800deda:	f000 fcd3 	bl	800e884 <prvCopyDataToQueue>
 800dede:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d010      	beq.n	800df0a <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deea:	3324      	adds	r3, #36	@ 0x24
 800deec:	4618      	mov	r0, r3
 800deee:	f001 fbb7 	bl	800f660 <xTaskRemoveFromEventList>
 800def2:	4603      	mov	r3, r0
 800def4:	2b00      	cmp	r3, #0
 800def6:	d013      	beq.n	800df20 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800def8:	4b3f      	ldr	r3, [pc, #252]	@ (800dff8 <xQueueGenericSend+0x210>)
 800defa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800defe:	601a      	str	r2, [r3, #0]
 800df00:	f3bf 8f4f 	dsb	sy
 800df04:	f3bf 8f6f 	isb	sy
 800df08:	e00a      	b.n	800df20 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800df0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d007      	beq.n	800df20 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800df10:	4b39      	ldr	r3, [pc, #228]	@ (800dff8 <xQueueGenericSend+0x210>)
 800df12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df16:	601a      	str	r2, [r3, #0]
 800df18:	f3bf 8f4f 	dsb	sy
 800df1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800df20:	f002 fc12 	bl	8010748 <vPortExitCritical>
				return pdPASS;
 800df24:	2301      	movs	r3, #1
 800df26:	e063      	b.n	800dff0 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d103      	bne.n	800df36 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800df2e:	f002 fc0b 	bl	8010748 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800df32:	2300      	movs	r3, #0
 800df34:	e05c      	b.n	800dff0 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800df36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d106      	bne.n	800df4a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800df3c:	f107 0314 	add.w	r3, r7, #20
 800df40:	4618      	mov	r0, r3
 800df42:	f001 fbf3 	bl	800f72c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800df46:	2301      	movs	r3, #1
 800df48:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800df4a:	f002 fbfd 	bl	8010748 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800df4e:	f001 f919 	bl	800f184 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800df52:	f002 fbc3 	bl	80106dc <vPortEnterCritical>
 800df56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800df5c:	b25b      	sxtb	r3, r3
 800df5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800df62:	d103      	bne.n	800df6c <xQueueGenericSend+0x184>
 800df64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df66:	2200      	movs	r2, #0
 800df68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800df6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800df72:	b25b      	sxtb	r3, r3
 800df74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800df78:	d103      	bne.n	800df82 <xQueueGenericSend+0x19a>
 800df7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df7c:	2200      	movs	r2, #0
 800df7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800df82:	f002 fbe1 	bl	8010748 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800df86:	1d3a      	adds	r2, r7, #4
 800df88:	f107 0314 	add.w	r3, r7, #20
 800df8c:	4611      	mov	r1, r2
 800df8e:	4618      	mov	r0, r3
 800df90:	f001 fbe2 	bl	800f758 <xTaskCheckForTimeOut>
 800df94:	4603      	mov	r3, r0
 800df96:	2b00      	cmp	r3, #0
 800df98:	d124      	bne.n	800dfe4 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800df9a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800df9c:	f000 fd6a 	bl	800ea74 <prvIsQueueFull>
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d018      	beq.n	800dfd8 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800dfa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfa8:	3310      	adds	r3, #16
 800dfaa:	687a      	ldr	r2, [r7, #4]
 800dfac:	4611      	mov	r1, r2
 800dfae:	4618      	mov	r0, r3
 800dfb0:	f001 fb00 	bl	800f5b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800dfb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dfb6:	f000 fcf5 	bl	800e9a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800dfba:	f001 f8f1 	bl	800f1a0 <xTaskResumeAll>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	f47f af7c 	bne.w	800debe <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800dfc6:	4b0c      	ldr	r3, [pc, #48]	@ (800dff8 <xQueueGenericSend+0x210>)
 800dfc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dfcc:	601a      	str	r2, [r3, #0]
 800dfce:	f3bf 8f4f 	dsb	sy
 800dfd2:	f3bf 8f6f 	isb	sy
 800dfd6:	e772      	b.n	800debe <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800dfd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dfda:	f000 fce3 	bl	800e9a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dfde:	f001 f8df 	bl	800f1a0 <xTaskResumeAll>
 800dfe2:	e76c      	b.n	800debe <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800dfe4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dfe6:	f000 fcdd 	bl	800e9a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dfea:	f001 f8d9 	bl	800f1a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800dfee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	3738      	adds	r7, #56	@ 0x38
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}
 800dff8:	e000ed04 	.word	0xe000ed04

0800dffc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b08e      	sub	sp, #56	@ 0x38
 800e000:	af00      	add	r7, sp, #0
 800e002:	60f8      	str	r0, [r7, #12]
 800e004:	60b9      	str	r1, [r7, #8]
 800e006:	607a      	str	r2, [r7, #4]
 800e008:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e00e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e010:	2b00      	cmp	r3, #0
 800e012:	d10d      	bne.n	800e030 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800e014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e018:	b672      	cpsid	i
 800e01a:	f383 8811 	msr	BASEPRI, r3
 800e01e:	f3bf 8f6f 	isb	sy
 800e022:	f3bf 8f4f 	dsb	sy
 800e026:	b662      	cpsie	i
 800e028:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e02a:	bf00      	nop
 800e02c:	bf00      	nop
 800e02e:	e7fd      	b.n	800e02c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e030:	68bb      	ldr	r3, [r7, #8]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d103      	bne.n	800e03e <xQueueGenericSendFromISR+0x42>
 800e036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d101      	bne.n	800e042 <xQueueGenericSendFromISR+0x46>
 800e03e:	2301      	movs	r3, #1
 800e040:	e000      	b.n	800e044 <xQueueGenericSendFromISR+0x48>
 800e042:	2300      	movs	r3, #0
 800e044:	2b00      	cmp	r3, #0
 800e046:	d10d      	bne.n	800e064 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800e048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e04c:	b672      	cpsid	i
 800e04e:	f383 8811 	msr	BASEPRI, r3
 800e052:	f3bf 8f6f 	isb	sy
 800e056:	f3bf 8f4f 	dsb	sy
 800e05a:	b662      	cpsie	i
 800e05c:	623b      	str	r3, [r7, #32]
}
 800e05e:	bf00      	nop
 800e060:	bf00      	nop
 800e062:	e7fd      	b.n	800e060 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e064:	683b      	ldr	r3, [r7, #0]
 800e066:	2b02      	cmp	r3, #2
 800e068:	d103      	bne.n	800e072 <xQueueGenericSendFromISR+0x76>
 800e06a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e06c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e06e:	2b01      	cmp	r3, #1
 800e070:	d101      	bne.n	800e076 <xQueueGenericSendFromISR+0x7a>
 800e072:	2301      	movs	r3, #1
 800e074:	e000      	b.n	800e078 <xQueueGenericSendFromISR+0x7c>
 800e076:	2300      	movs	r3, #0
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d10d      	bne.n	800e098 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800e07c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e080:	b672      	cpsid	i
 800e082:	f383 8811 	msr	BASEPRI, r3
 800e086:	f3bf 8f6f 	isb	sy
 800e08a:	f3bf 8f4f 	dsb	sy
 800e08e:	b662      	cpsie	i
 800e090:	61fb      	str	r3, [r7, #28]
}
 800e092:	bf00      	nop
 800e094:	bf00      	nop
 800e096:	e7fd      	b.n	800e094 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e098:	f002 fc08 	bl	80108ac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e09c:	f3ef 8211 	mrs	r2, BASEPRI
 800e0a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0a4:	b672      	cpsid	i
 800e0a6:	f383 8811 	msr	BASEPRI, r3
 800e0aa:	f3bf 8f6f 	isb	sy
 800e0ae:	f3bf 8f4f 	dsb	sy
 800e0b2:	b662      	cpsie	i
 800e0b4:	61ba      	str	r2, [r7, #24]
 800e0b6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e0b8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e0ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e0bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e0c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e0c4:	429a      	cmp	r2, r3
 800e0c6:	d302      	bcc.n	800e0ce <xQueueGenericSendFromISR+0xd2>
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	2b02      	cmp	r3, #2
 800e0cc:	d12c      	bne.n	800e128 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e0ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e0d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e0d8:	683a      	ldr	r2, [r7, #0]
 800e0da:	68b9      	ldr	r1, [r7, #8]
 800e0dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e0de:	f000 fbd1 	bl	800e884 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e0e2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800e0e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e0ea:	d112      	bne.n	800e112 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e0ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d016      	beq.n	800e122 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e0f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0f6:	3324      	adds	r3, #36	@ 0x24
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f001 fab1 	bl	800f660 <xTaskRemoveFromEventList>
 800e0fe:	4603      	mov	r3, r0
 800e100:	2b00      	cmp	r3, #0
 800e102:	d00e      	beq.n	800e122 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d00b      	beq.n	800e122 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2201      	movs	r2, #1
 800e10e:	601a      	str	r2, [r3, #0]
 800e110:	e007      	b.n	800e122 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e112:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e116:	3301      	adds	r3, #1
 800e118:	b2db      	uxtb	r3, r3
 800e11a:	b25a      	sxtb	r2, r3
 800e11c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e11e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e122:	2301      	movs	r3, #1
 800e124:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800e126:	e001      	b.n	800e12c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e128:	2300      	movs	r3, #0
 800e12a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e12c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e12e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e130:	693b      	ldr	r3, [r7, #16]
 800e132:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e136:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e13a:	4618      	mov	r0, r3
 800e13c:	3738      	adds	r7, #56	@ 0x38
 800e13e:	46bd      	mov	sp, r7
 800e140:	bd80      	pop	{r7, pc}

0800e142 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e142:	b580      	push	{r7, lr}
 800e144:	b08e      	sub	sp, #56	@ 0x38
 800e146:	af00      	add	r7, sp, #0
 800e148:	6078      	str	r0, [r7, #4]
 800e14a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e152:	2b00      	cmp	r3, #0
 800e154:	d10d      	bne.n	800e172 <xQueueGiveFromISR+0x30>
	__asm volatile
 800e156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e15a:	b672      	cpsid	i
 800e15c:	f383 8811 	msr	BASEPRI, r3
 800e160:	f3bf 8f6f 	isb	sy
 800e164:	f3bf 8f4f 	dsb	sy
 800e168:	b662      	cpsie	i
 800e16a:	623b      	str	r3, [r7, #32]
}
 800e16c:	bf00      	nop
 800e16e:	bf00      	nop
 800e170:	e7fd      	b.n	800e16e <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e176:	2b00      	cmp	r3, #0
 800e178:	d00d      	beq.n	800e196 <xQueueGiveFromISR+0x54>
	__asm volatile
 800e17a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e17e:	b672      	cpsid	i
 800e180:	f383 8811 	msr	BASEPRI, r3
 800e184:	f3bf 8f6f 	isb	sy
 800e188:	f3bf 8f4f 	dsb	sy
 800e18c:	b662      	cpsie	i
 800e18e:	61fb      	str	r3, [r7, #28]
}
 800e190:	bf00      	nop
 800e192:	bf00      	nop
 800e194:	e7fd      	b.n	800e192 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d103      	bne.n	800e1a6 <xQueueGiveFromISR+0x64>
 800e19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1a0:	689b      	ldr	r3, [r3, #8]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d101      	bne.n	800e1aa <xQueueGiveFromISR+0x68>
 800e1a6:	2301      	movs	r3, #1
 800e1a8:	e000      	b.n	800e1ac <xQueueGiveFromISR+0x6a>
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d10d      	bne.n	800e1cc <xQueueGiveFromISR+0x8a>
	__asm volatile
 800e1b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1b4:	b672      	cpsid	i
 800e1b6:	f383 8811 	msr	BASEPRI, r3
 800e1ba:	f3bf 8f6f 	isb	sy
 800e1be:	f3bf 8f4f 	dsb	sy
 800e1c2:	b662      	cpsie	i
 800e1c4:	61bb      	str	r3, [r7, #24]
}
 800e1c6:	bf00      	nop
 800e1c8:	bf00      	nop
 800e1ca:	e7fd      	b.n	800e1c8 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e1cc:	f002 fb6e 	bl	80108ac <vPortValidateInterruptPriority>
	__asm volatile
 800e1d0:	f3ef 8211 	mrs	r2, BASEPRI
 800e1d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1d8:	b672      	cpsid	i
 800e1da:	f383 8811 	msr	BASEPRI, r3
 800e1de:	f3bf 8f6f 	isb	sy
 800e1e2:	f3bf 8f4f 	dsb	sy
 800e1e6:	b662      	cpsie	i
 800e1e8:	617a      	str	r2, [r7, #20]
 800e1ea:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e1ec:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e1ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e1f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e1f4:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e1f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e1fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	d22b      	bcs.n	800e258 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e202:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e206:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e20a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e20c:	1c5a      	adds	r2, r3, #1
 800e20e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e210:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e212:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e216:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e21a:	d112      	bne.n	800e242 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e21c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e21e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e220:	2b00      	cmp	r3, #0
 800e222:	d016      	beq.n	800e252 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e226:	3324      	adds	r3, #36	@ 0x24
 800e228:	4618      	mov	r0, r3
 800e22a:	f001 fa19 	bl	800f660 <xTaskRemoveFromEventList>
 800e22e:	4603      	mov	r3, r0
 800e230:	2b00      	cmp	r3, #0
 800e232:	d00e      	beq.n	800e252 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d00b      	beq.n	800e252 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	2201      	movs	r2, #1
 800e23e:	601a      	str	r2, [r3, #0]
 800e240:	e007      	b.n	800e252 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e242:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e246:	3301      	adds	r3, #1
 800e248:	b2db      	uxtb	r3, r3
 800e24a:	b25a      	sxtb	r2, r3
 800e24c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e24e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e252:	2301      	movs	r3, #1
 800e254:	637b      	str	r3, [r7, #52]	@ 0x34
 800e256:	e001      	b.n	800e25c <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e258:	2300      	movs	r3, #0
 800e25a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e25c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e25e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	f383 8811 	msr	BASEPRI, r3
}
 800e266:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3738      	adds	r7, #56	@ 0x38
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}
	...

0800e274 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e274:	b580      	push	{r7, lr}
 800e276:	b08c      	sub	sp, #48	@ 0x30
 800e278:	af00      	add	r7, sp, #0
 800e27a:	60f8      	str	r0, [r7, #12]
 800e27c:	60b9      	str	r1, [r7, #8]
 800e27e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e280:	2300      	movs	r3, #0
 800e282:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d10d      	bne.n	800e2aa <xQueueReceive+0x36>
	__asm volatile
 800e28e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e292:	b672      	cpsid	i
 800e294:	f383 8811 	msr	BASEPRI, r3
 800e298:	f3bf 8f6f 	isb	sy
 800e29c:	f3bf 8f4f 	dsb	sy
 800e2a0:	b662      	cpsie	i
 800e2a2:	623b      	str	r3, [r7, #32]
}
 800e2a4:	bf00      	nop
 800e2a6:	bf00      	nop
 800e2a8:	e7fd      	b.n	800e2a6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e2aa:	68bb      	ldr	r3, [r7, #8]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d103      	bne.n	800e2b8 <xQueueReceive+0x44>
 800e2b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d101      	bne.n	800e2bc <xQueueReceive+0x48>
 800e2b8:	2301      	movs	r3, #1
 800e2ba:	e000      	b.n	800e2be <xQueueReceive+0x4a>
 800e2bc:	2300      	movs	r3, #0
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d10d      	bne.n	800e2de <xQueueReceive+0x6a>
	__asm volatile
 800e2c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2c6:	b672      	cpsid	i
 800e2c8:	f383 8811 	msr	BASEPRI, r3
 800e2cc:	f3bf 8f6f 	isb	sy
 800e2d0:	f3bf 8f4f 	dsb	sy
 800e2d4:	b662      	cpsie	i
 800e2d6:	61fb      	str	r3, [r7, #28]
}
 800e2d8:	bf00      	nop
 800e2da:	bf00      	nop
 800e2dc:	e7fd      	b.n	800e2da <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e2de:	f001 fb9d 	bl	800fa1c <xTaskGetSchedulerState>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d102      	bne.n	800e2ee <xQueueReceive+0x7a>
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d101      	bne.n	800e2f2 <xQueueReceive+0x7e>
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	e000      	b.n	800e2f4 <xQueueReceive+0x80>
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d10d      	bne.n	800e314 <xQueueReceive+0xa0>
	__asm volatile
 800e2f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2fc:	b672      	cpsid	i
 800e2fe:	f383 8811 	msr	BASEPRI, r3
 800e302:	f3bf 8f6f 	isb	sy
 800e306:	f3bf 8f4f 	dsb	sy
 800e30a:	b662      	cpsie	i
 800e30c:	61bb      	str	r3, [r7, #24]
}
 800e30e:	bf00      	nop
 800e310:	bf00      	nop
 800e312:	e7fd      	b.n	800e310 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e314:	f002 f9e2 	bl	80106dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e31a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e31c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e320:	2b00      	cmp	r3, #0
 800e322:	d01f      	beq.n	800e364 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e324:	68b9      	ldr	r1, [r7, #8]
 800e326:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e328:	f000 fb16 	bl	800e958 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e32c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e32e:	1e5a      	subs	r2, r3, #1
 800e330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e332:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e336:	691b      	ldr	r3, [r3, #16]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d00f      	beq.n	800e35c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e33c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e33e:	3310      	adds	r3, #16
 800e340:	4618      	mov	r0, r3
 800e342:	f001 f98d 	bl	800f660 <xTaskRemoveFromEventList>
 800e346:	4603      	mov	r3, r0
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d007      	beq.n	800e35c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e34c:	4b3c      	ldr	r3, [pc, #240]	@ (800e440 <xQueueReceive+0x1cc>)
 800e34e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e352:	601a      	str	r2, [r3, #0]
 800e354:	f3bf 8f4f 	dsb	sy
 800e358:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e35c:	f002 f9f4 	bl	8010748 <vPortExitCritical>
				return pdPASS;
 800e360:	2301      	movs	r3, #1
 800e362:	e069      	b.n	800e438 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d103      	bne.n	800e372 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e36a:	f002 f9ed 	bl	8010748 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e36e:	2300      	movs	r3, #0
 800e370:	e062      	b.n	800e438 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e374:	2b00      	cmp	r3, #0
 800e376:	d106      	bne.n	800e386 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e378:	f107 0310 	add.w	r3, r7, #16
 800e37c:	4618      	mov	r0, r3
 800e37e:	f001 f9d5 	bl	800f72c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e382:	2301      	movs	r3, #1
 800e384:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e386:	f002 f9df 	bl	8010748 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e38a:	f000 fefb 	bl	800f184 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e38e:	f002 f9a5 	bl	80106dc <vPortEnterCritical>
 800e392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e394:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e398:	b25b      	sxtb	r3, r3
 800e39a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e39e:	d103      	bne.n	800e3a8 <xQueueReceive+0x134>
 800e3a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e3a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e3ae:	b25b      	sxtb	r3, r3
 800e3b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e3b4:	d103      	bne.n	800e3be <xQueueReceive+0x14a>
 800e3b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e3be:	f002 f9c3 	bl	8010748 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e3c2:	1d3a      	adds	r2, r7, #4
 800e3c4:	f107 0310 	add.w	r3, r7, #16
 800e3c8:	4611      	mov	r1, r2
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f001 f9c4 	bl	800f758 <xTaskCheckForTimeOut>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d123      	bne.n	800e41e <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e3d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e3d8:	f000 fb36 	bl	800ea48 <prvIsQueueEmpty>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d017      	beq.n	800e412 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e3e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3e4:	3324      	adds	r3, #36	@ 0x24
 800e3e6:	687a      	ldr	r2, [r7, #4]
 800e3e8:	4611      	mov	r1, r2
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	f001 f8e2 	bl	800f5b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e3f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e3f2:	f000 fad7 	bl	800e9a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e3f6:	f000 fed3 	bl	800f1a0 <xTaskResumeAll>
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d189      	bne.n	800e314 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800e400:	4b0f      	ldr	r3, [pc, #60]	@ (800e440 <xQueueReceive+0x1cc>)
 800e402:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e406:	601a      	str	r2, [r3, #0]
 800e408:	f3bf 8f4f 	dsb	sy
 800e40c:	f3bf 8f6f 	isb	sy
 800e410:	e780      	b.n	800e314 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e412:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e414:	f000 fac6 	bl	800e9a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e418:	f000 fec2 	bl	800f1a0 <xTaskResumeAll>
 800e41c:	e77a      	b.n	800e314 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e41e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e420:	f000 fac0 	bl	800e9a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e424:	f000 febc 	bl	800f1a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e428:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e42a:	f000 fb0d 	bl	800ea48 <prvIsQueueEmpty>
 800e42e:	4603      	mov	r3, r0
 800e430:	2b00      	cmp	r3, #0
 800e432:	f43f af6f 	beq.w	800e314 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e436:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e438:	4618      	mov	r0, r3
 800e43a:	3730      	adds	r7, #48	@ 0x30
 800e43c:	46bd      	mov	sp, r7
 800e43e:	bd80      	pop	{r7, pc}
 800e440:	e000ed04 	.word	0xe000ed04

0800e444 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b08e      	sub	sp, #56	@ 0x38
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
 800e44c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e44e:	2300      	movs	r3, #0
 800e450:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e456:	2300      	movs	r3, #0
 800e458:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e45a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d10d      	bne.n	800e47c <xQueueSemaphoreTake+0x38>
	__asm volatile
 800e460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e464:	b672      	cpsid	i
 800e466:	f383 8811 	msr	BASEPRI, r3
 800e46a:	f3bf 8f6f 	isb	sy
 800e46e:	f3bf 8f4f 	dsb	sy
 800e472:	b662      	cpsie	i
 800e474:	623b      	str	r3, [r7, #32]
}
 800e476:	bf00      	nop
 800e478:	bf00      	nop
 800e47a:	e7fd      	b.n	800e478 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e47c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e47e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e480:	2b00      	cmp	r3, #0
 800e482:	d00d      	beq.n	800e4a0 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800e484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e488:	b672      	cpsid	i
 800e48a:	f383 8811 	msr	BASEPRI, r3
 800e48e:	f3bf 8f6f 	isb	sy
 800e492:	f3bf 8f4f 	dsb	sy
 800e496:	b662      	cpsie	i
 800e498:	61fb      	str	r3, [r7, #28]
}
 800e49a:	bf00      	nop
 800e49c:	bf00      	nop
 800e49e:	e7fd      	b.n	800e49c <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e4a0:	f001 fabc 	bl	800fa1c <xTaskGetSchedulerState>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d102      	bne.n	800e4b0 <xQueueSemaphoreTake+0x6c>
 800e4aa:	683b      	ldr	r3, [r7, #0]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d101      	bne.n	800e4b4 <xQueueSemaphoreTake+0x70>
 800e4b0:	2301      	movs	r3, #1
 800e4b2:	e000      	b.n	800e4b6 <xQueueSemaphoreTake+0x72>
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d10d      	bne.n	800e4d6 <xQueueSemaphoreTake+0x92>
	__asm volatile
 800e4ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4be:	b672      	cpsid	i
 800e4c0:	f383 8811 	msr	BASEPRI, r3
 800e4c4:	f3bf 8f6f 	isb	sy
 800e4c8:	f3bf 8f4f 	dsb	sy
 800e4cc:	b662      	cpsie	i
 800e4ce:	61bb      	str	r3, [r7, #24]
}
 800e4d0:	bf00      	nop
 800e4d2:	bf00      	nop
 800e4d4:	e7fd      	b.n	800e4d2 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e4d6:	f002 f901 	bl	80106dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e4da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e4de:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e4e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d024      	beq.n	800e530 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e4e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4e8:	1e5a      	subs	r2, r3, #1
 800e4ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4ec:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e4ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d104      	bne.n	800e500 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e4f6:	f001 fc13 	bl	800fd20 <pvTaskIncrementMutexHeldCount>
 800e4fa:	4602      	mov	r2, r0
 800e4fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4fe:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e502:	691b      	ldr	r3, [r3, #16]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d00f      	beq.n	800e528 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e50a:	3310      	adds	r3, #16
 800e50c:	4618      	mov	r0, r3
 800e50e:	f001 f8a7 	bl	800f660 <xTaskRemoveFromEventList>
 800e512:	4603      	mov	r3, r0
 800e514:	2b00      	cmp	r3, #0
 800e516:	d007      	beq.n	800e528 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e518:	4b55      	ldr	r3, [pc, #340]	@ (800e670 <xQueueSemaphoreTake+0x22c>)
 800e51a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e51e:	601a      	str	r2, [r3, #0]
 800e520:	f3bf 8f4f 	dsb	sy
 800e524:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e528:	f002 f90e 	bl	8010748 <vPortExitCritical>
				return pdPASS;
 800e52c:	2301      	movs	r3, #1
 800e52e:	e09a      	b.n	800e666 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e530:	683b      	ldr	r3, [r7, #0]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d114      	bne.n	800e560 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d00d      	beq.n	800e558 <xQueueSemaphoreTake+0x114>
	__asm volatile
 800e53c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e540:	b672      	cpsid	i
 800e542:	f383 8811 	msr	BASEPRI, r3
 800e546:	f3bf 8f6f 	isb	sy
 800e54a:	f3bf 8f4f 	dsb	sy
 800e54e:	b662      	cpsie	i
 800e550:	617b      	str	r3, [r7, #20]
}
 800e552:	bf00      	nop
 800e554:	bf00      	nop
 800e556:	e7fd      	b.n	800e554 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e558:	f002 f8f6 	bl	8010748 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e55c:	2300      	movs	r3, #0
 800e55e:	e082      	b.n	800e666 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e562:	2b00      	cmp	r3, #0
 800e564:	d106      	bne.n	800e574 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e566:	f107 030c 	add.w	r3, r7, #12
 800e56a:	4618      	mov	r0, r3
 800e56c:	f001 f8de 	bl	800f72c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e570:	2301      	movs	r3, #1
 800e572:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e574:	f002 f8e8 	bl	8010748 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e578:	f000 fe04 	bl	800f184 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e57c:	f002 f8ae 	bl	80106dc <vPortEnterCritical>
 800e580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e582:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e586:	b25b      	sxtb	r3, r3
 800e588:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e58c:	d103      	bne.n	800e596 <xQueueSemaphoreTake+0x152>
 800e58e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e590:	2200      	movs	r2, #0
 800e592:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e598:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e59c:	b25b      	sxtb	r3, r3
 800e59e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e5a2:	d103      	bne.n	800e5ac <xQueueSemaphoreTake+0x168>
 800e5a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e5ac:	f002 f8cc 	bl	8010748 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e5b0:	463a      	mov	r2, r7
 800e5b2:	f107 030c 	add.w	r3, r7, #12
 800e5b6:	4611      	mov	r1, r2
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f001 f8cd 	bl	800f758 <xTaskCheckForTimeOut>
 800e5be:	4603      	mov	r3, r0
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d132      	bne.n	800e62a <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e5c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e5c6:	f000 fa3f 	bl	800ea48 <prvIsQueueEmpty>
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d026      	beq.n	800e61e <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e5d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d109      	bne.n	800e5ec <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800e5d8:	f002 f880 	bl	80106dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e5dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5de:	689b      	ldr	r3, [r3, #8]
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	f001 fa39 	bl	800fa58 <xTaskPriorityInherit>
 800e5e6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800e5e8:	f002 f8ae 	bl	8010748 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e5ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5ee:	3324      	adds	r3, #36	@ 0x24
 800e5f0:	683a      	ldr	r2, [r7, #0]
 800e5f2:	4611      	mov	r1, r2
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	f000 ffdd 	bl	800f5b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e5fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e5fc:	f000 f9d2 	bl	800e9a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e600:	f000 fdce 	bl	800f1a0 <xTaskResumeAll>
 800e604:	4603      	mov	r3, r0
 800e606:	2b00      	cmp	r3, #0
 800e608:	f47f af65 	bne.w	800e4d6 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800e60c:	4b18      	ldr	r3, [pc, #96]	@ (800e670 <xQueueSemaphoreTake+0x22c>)
 800e60e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e612:	601a      	str	r2, [r3, #0]
 800e614:	f3bf 8f4f 	dsb	sy
 800e618:	f3bf 8f6f 	isb	sy
 800e61c:	e75b      	b.n	800e4d6 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e61e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e620:	f000 f9c0 	bl	800e9a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e624:	f000 fdbc 	bl	800f1a0 <xTaskResumeAll>
 800e628:	e755      	b.n	800e4d6 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e62a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e62c:	f000 f9ba 	bl	800e9a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e630:	f000 fdb6 	bl	800f1a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e634:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e636:	f000 fa07 	bl	800ea48 <prvIsQueueEmpty>
 800e63a:	4603      	mov	r3, r0
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	f43f af4a 	beq.w	800e4d6 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e644:	2b00      	cmp	r3, #0
 800e646:	d00d      	beq.n	800e664 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800e648:	f002 f848 	bl	80106dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e64c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e64e:	f000 f901 	bl	800e854 <prvGetDisinheritPriorityAfterTimeout>
 800e652:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e656:	689b      	ldr	r3, [r3, #8]
 800e658:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e65a:	4618      	mov	r0, r3
 800e65c:	f001 fad8 	bl	800fc10 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e660:	f002 f872 	bl	8010748 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e664:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e666:	4618      	mov	r0, r3
 800e668:	3738      	adds	r7, #56	@ 0x38
 800e66a:	46bd      	mov	sp, r7
 800e66c:	bd80      	pop	{r7, pc}
 800e66e:	bf00      	nop
 800e670:	e000ed04 	.word	0xe000ed04

0800e674 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b08e      	sub	sp, #56	@ 0x38
 800e678:	af00      	add	r7, sp, #0
 800e67a:	60f8      	str	r0, [r7, #12]
 800e67c:	60b9      	str	r1, [r7, #8]
 800e67e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e686:	2b00      	cmp	r3, #0
 800e688:	d10d      	bne.n	800e6a6 <xQueueReceiveFromISR+0x32>
	__asm volatile
 800e68a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e68e:	b672      	cpsid	i
 800e690:	f383 8811 	msr	BASEPRI, r3
 800e694:	f3bf 8f6f 	isb	sy
 800e698:	f3bf 8f4f 	dsb	sy
 800e69c:	b662      	cpsie	i
 800e69e:	623b      	str	r3, [r7, #32]
}
 800e6a0:	bf00      	nop
 800e6a2:	bf00      	nop
 800e6a4:	e7fd      	b.n	800e6a2 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e6a6:	68bb      	ldr	r3, [r7, #8]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d103      	bne.n	800e6b4 <xQueueReceiveFromISR+0x40>
 800e6ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d101      	bne.n	800e6b8 <xQueueReceiveFromISR+0x44>
 800e6b4:	2301      	movs	r3, #1
 800e6b6:	e000      	b.n	800e6ba <xQueueReceiveFromISR+0x46>
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d10d      	bne.n	800e6da <xQueueReceiveFromISR+0x66>
	__asm volatile
 800e6be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6c2:	b672      	cpsid	i
 800e6c4:	f383 8811 	msr	BASEPRI, r3
 800e6c8:	f3bf 8f6f 	isb	sy
 800e6cc:	f3bf 8f4f 	dsb	sy
 800e6d0:	b662      	cpsie	i
 800e6d2:	61fb      	str	r3, [r7, #28]
}
 800e6d4:	bf00      	nop
 800e6d6:	bf00      	nop
 800e6d8:	e7fd      	b.n	800e6d6 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e6da:	f002 f8e7 	bl	80108ac <vPortValidateInterruptPriority>
	__asm volatile
 800e6de:	f3ef 8211 	mrs	r2, BASEPRI
 800e6e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6e6:	b672      	cpsid	i
 800e6e8:	f383 8811 	msr	BASEPRI, r3
 800e6ec:	f3bf 8f6f 	isb	sy
 800e6f0:	f3bf 8f4f 	dsb	sy
 800e6f4:	b662      	cpsie	i
 800e6f6:	61ba      	str	r2, [r7, #24]
 800e6f8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e6fa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e6fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e6fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e702:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e706:	2b00      	cmp	r3, #0
 800e708:	d02f      	beq.n	800e76a <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e70a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e70c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e710:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e714:	68b9      	ldr	r1, [r7, #8]
 800e716:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e718:	f000 f91e 	bl	800e958 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e71c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e71e:	1e5a      	subs	r2, r3, #1
 800e720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e722:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e724:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e728:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e72c:	d112      	bne.n	800e754 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e72e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e730:	691b      	ldr	r3, [r3, #16]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d016      	beq.n	800e764 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e738:	3310      	adds	r3, #16
 800e73a:	4618      	mov	r0, r3
 800e73c:	f000 ff90 	bl	800f660 <xTaskRemoveFromEventList>
 800e740:	4603      	mov	r3, r0
 800e742:	2b00      	cmp	r3, #0
 800e744:	d00e      	beq.n	800e764 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d00b      	beq.n	800e764 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	2201      	movs	r2, #1
 800e750:	601a      	str	r2, [r3, #0]
 800e752:	e007      	b.n	800e764 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e754:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e758:	3301      	adds	r3, #1
 800e75a:	b2db      	uxtb	r3, r3
 800e75c:	b25a      	sxtb	r2, r3
 800e75e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e760:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800e764:	2301      	movs	r3, #1
 800e766:	637b      	str	r3, [r7, #52]	@ 0x34
 800e768:	e001      	b.n	800e76e <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800e76a:	2300      	movs	r3, #0
 800e76c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e76e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e770:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e772:	693b      	ldr	r3, [r7, #16]
 800e774:	f383 8811 	msr	BASEPRI, r3
}
 800e778:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e77a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e77c:	4618      	mov	r0, r3
 800e77e:	3738      	adds	r7, #56	@ 0x38
 800e780:	46bd      	mov	sp, r7
 800e782:	bd80      	pop	{r7, pc}

0800e784 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800e784:	b580      	push	{r7, lr}
 800e786:	b084      	sub	sp, #16
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d10d      	bne.n	800e7ae <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 800e792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e796:	b672      	cpsid	i
 800e798:	f383 8811 	msr	BASEPRI, r3
 800e79c:	f3bf 8f6f 	isb	sy
 800e7a0:	f3bf 8f4f 	dsb	sy
 800e7a4:	b662      	cpsie	i
 800e7a6:	60bb      	str	r3, [r7, #8]
}
 800e7a8:	bf00      	nop
 800e7aa:	bf00      	nop
 800e7ac:	e7fd      	b.n	800e7aa <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800e7ae:	f001 ff95 	bl	80106dc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7b6:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800e7b8:	f001 ffc6 	bl	8010748 <vPortExitCritical>

	return uxReturn;
 800e7bc:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800e7be:	4618      	mov	r0, r3
 800e7c0:	3710      	adds	r7, #16
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}

0800e7c6 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800e7c6:	b480      	push	{r7}
 800e7c8:	b087      	sub	sp, #28
 800e7ca:	af00      	add	r7, sp, #0
 800e7cc:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800e7d2:	697b      	ldr	r3, [r7, #20]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d10d      	bne.n	800e7f4 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 800e7d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7dc:	b672      	cpsid	i
 800e7de:	f383 8811 	msr	BASEPRI, r3
 800e7e2:	f3bf 8f6f 	isb	sy
 800e7e6:	f3bf 8f4f 	dsb	sy
 800e7ea:	b662      	cpsie	i
 800e7ec:	60fb      	str	r3, [r7, #12]
}
 800e7ee:	bf00      	nop
 800e7f0:	bf00      	nop
 800e7f2:	e7fd      	b.n	800e7f0 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800e7f4:	697b      	ldr	r3, [r7, #20]
 800e7f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7f8:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800e7fa:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	371c      	adds	r7, #28
 800e800:	46bd      	mov	sp, r7
 800e802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e806:	4770      	bx	lr

0800e808 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b084      	sub	sp, #16
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d10d      	bne.n	800e836 <vQueueDelete+0x2e>
	__asm volatile
 800e81a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e81e:	b672      	cpsid	i
 800e820:	f383 8811 	msr	BASEPRI, r3
 800e824:	f3bf 8f6f 	isb	sy
 800e828:	f3bf 8f4f 	dsb	sy
 800e82c:	b662      	cpsie	i
 800e82e:	60bb      	str	r3, [r7, #8]
}
 800e830:	bf00      	nop
 800e832:	bf00      	nop
 800e834:	e7fd      	b.n	800e832 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800e836:	68f8      	ldr	r0, [r7, #12]
 800e838:	f000 f95e 	bl	800eaf8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800e842:	2b00      	cmp	r3, #0
 800e844:	d102      	bne.n	800e84c <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 800e846:	68f8      	ldr	r0, [r7, #12]
 800e848:	f002 f948 	bl	8010adc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800e84c:	bf00      	nop
 800e84e:	3710      	adds	r7, #16
 800e850:	46bd      	mov	sp, r7
 800e852:	bd80      	pop	{r7, pc}

0800e854 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e854:	b480      	push	{r7}
 800e856:	b085      	sub	sp, #20
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e860:	2b00      	cmp	r3, #0
 800e862:	d006      	beq.n	800e872 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800e86e:	60fb      	str	r3, [r7, #12]
 800e870:	e001      	b.n	800e876 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e872:	2300      	movs	r3, #0
 800e874:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e876:	68fb      	ldr	r3, [r7, #12]
	}
 800e878:	4618      	mov	r0, r3
 800e87a:	3714      	adds	r7, #20
 800e87c:	46bd      	mov	sp, r7
 800e87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e882:	4770      	bx	lr

0800e884 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b086      	sub	sp, #24
 800e888:	af00      	add	r7, sp, #0
 800e88a:	60f8      	str	r0, [r7, #12]
 800e88c:	60b9      	str	r1, [r7, #8]
 800e88e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e890:	2300      	movs	r3, #0
 800e892:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e898:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d10d      	bne.n	800e8be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d14d      	bne.n	800e946 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	689b      	ldr	r3, [r3, #8]
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	f001 f93a 	bl	800fb28 <xTaskPriorityDisinherit>
 800e8b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	609a      	str	r2, [r3, #8]
 800e8bc:	e043      	b.n	800e946 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d119      	bne.n	800e8f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	6858      	ldr	r0, [r3, #4]
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8cc:	461a      	mov	r2, r3
 800e8ce:	68b9      	ldr	r1, [r7, #8]
 800e8d0:	f012 f995 	bl	8020bfe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	685a      	ldr	r2, [r3, #4]
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8dc:	441a      	add	r2, r3
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	685a      	ldr	r2, [r3, #4]
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	689b      	ldr	r3, [r3, #8]
 800e8ea:	429a      	cmp	r2, r3
 800e8ec:	d32b      	bcc.n	800e946 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	681a      	ldr	r2, [r3, #0]
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	605a      	str	r2, [r3, #4]
 800e8f6:	e026      	b.n	800e946 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	68d8      	ldr	r0, [r3, #12]
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e900:	461a      	mov	r2, r3
 800e902:	68b9      	ldr	r1, [r7, #8]
 800e904:	f012 f97b 	bl	8020bfe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	68da      	ldr	r2, [r3, #12]
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e910:	425b      	negs	r3, r3
 800e912:	441a      	add	r2, r3
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	68da      	ldr	r2, [r3, #12]
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	429a      	cmp	r2, r3
 800e922:	d207      	bcs.n	800e934 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	689a      	ldr	r2, [r3, #8]
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e92c:	425b      	negs	r3, r3
 800e92e:	441a      	add	r2, r3
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2b02      	cmp	r3, #2
 800e938:	d105      	bne.n	800e946 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e93a:	693b      	ldr	r3, [r7, #16]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d002      	beq.n	800e946 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e940:	693b      	ldr	r3, [r7, #16]
 800e942:	3b01      	subs	r3, #1
 800e944:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e946:	693b      	ldr	r3, [r7, #16]
 800e948:	1c5a      	adds	r2, r3, #1
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800e94e:	697b      	ldr	r3, [r7, #20]
}
 800e950:	4618      	mov	r0, r3
 800e952:	3718      	adds	r7, #24
 800e954:	46bd      	mov	sp, r7
 800e956:	bd80      	pop	{r7, pc}

0800e958 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b082      	sub	sp, #8
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
 800e960:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e966:	2b00      	cmp	r3, #0
 800e968:	d018      	beq.n	800e99c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	68da      	ldr	r2, [r3, #12]
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e972:	441a      	add	r2, r3
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	68da      	ldr	r2, [r3, #12]
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	689b      	ldr	r3, [r3, #8]
 800e980:	429a      	cmp	r2, r3
 800e982:	d303      	bcc.n	800e98c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681a      	ldr	r2, [r3, #0]
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	68d9      	ldr	r1, [r3, #12]
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e994:	461a      	mov	r2, r3
 800e996:	6838      	ldr	r0, [r7, #0]
 800e998:	f012 f931 	bl	8020bfe <memcpy>
	}
}
 800e99c:	bf00      	nop
 800e99e:	3708      	adds	r7, #8
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}

0800e9a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b084      	sub	sp, #16
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e9ac:	f001 fe96 	bl	80106dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e9b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e9b8:	e011      	b.n	800e9de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d012      	beq.n	800e9e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	3324      	adds	r3, #36	@ 0x24
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	f000 fe4a 	bl	800f660 <xTaskRemoveFromEventList>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d001      	beq.n	800e9d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e9d2:	f000 ff29 	bl	800f828 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e9d6:	7bfb      	ldrb	r3, [r7, #15]
 800e9d8:	3b01      	subs	r3, #1
 800e9da:	b2db      	uxtb	r3, r3
 800e9dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e9de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	dce9      	bgt.n	800e9ba <prvUnlockQueue+0x16>
 800e9e6:	e000      	b.n	800e9ea <prvUnlockQueue+0x46>
					break;
 800e9e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	22ff      	movs	r2, #255	@ 0xff
 800e9ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800e9f2:	f001 fea9 	bl	8010748 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e9f6:	f001 fe71 	bl	80106dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ea00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ea02:	e011      	b.n	800ea28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	691b      	ldr	r3, [r3, #16]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d012      	beq.n	800ea32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	3310      	adds	r3, #16
 800ea10:	4618      	mov	r0, r3
 800ea12:	f000 fe25 	bl	800f660 <xTaskRemoveFromEventList>
 800ea16:	4603      	mov	r3, r0
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d001      	beq.n	800ea20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ea1c:	f000 ff04 	bl	800f828 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ea20:	7bbb      	ldrb	r3, [r7, #14]
 800ea22:	3b01      	subs	r3, #1
 800ea24:	b2db      	uxtb	r3, r3
 800ea26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ea28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	dce9      	bgt.n	800ea04 <prvUnlockQueue+0x60>
 800ea30:	e000      	b.n	800ea34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ea32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	22ff      	movs	r2, #255	@ 0xff
 800ea38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ea3c:	f001 fe84 	bl	8010748 <vPortExitCritical>
}
 800ea40:	bf00      	nop
 800ea42:	3710      	adds	r7, #16
 800ea44:	46bd      	mov	sp, r7
 800ea46:	bd80      	pop	{r7, pc}

0800ea48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b084      	sub	sp, #16
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ea50:	f001 fe44 	bl	80106dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d102      	bne.n	800ea62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ea5c:	2301      	movs	r3, #1
 800ea5e:	60fb      	str	r3, [r7, #12]
 800ea60:	e001      	b.n	800ea66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ea62:	2300      	movs	r3, #0
 800ea64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ea66:	f001 fe6f 	bl	8010748 <vPortExitCritical>

	return xReturn;
 800ea6a:	68fb      	ldr	r3, [r7, #12]
}
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	3710      	adds	r7, #16
 800ea70:	46bd      	mov	sp, r7
 800ea72:	bd80      	pop	{r7, pc}

0800ea74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b084      	sub	sp, #16
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ea7c:	f001 fe2e 	bl	80106dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ea88:	429a      	cmp	r2, r3
 800ea8a:	d102      	bne.n	800ea92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ea8c:	2301      	movs	r3, #1
 800ea8e:	60fb      	str	r3, [r7, #12]
 800ea90:	e001      	b.n	800ea96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ea92:	2300      	movs	r3, #0
 800ea94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ea96:	f001 fe57 	bl	8010748 <vPortExitCritical>

	return xReturn;
 800ea9a:	68fb      	ldr	r3, [r7, #12]
}
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	3710      	adds	r7, #16
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}

0800eaa4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800eaa4:	b480      	push	{r7}
 800eaa6:	b085      	sub	sp, #20
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
 800eaac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eaae:	2300      	movs	r3, #0
 800eab0:	60fb      	str	r3, [r7, #12]
 800eab2:	e014      	b.n	800eade <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800eab4:	4a0f      	ldr	r2, [pc, #60]	@ (800eaf4 <vQueueAddToRegistry+0x50>)
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d10b      	bne.n	800ead8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800eac0:	490c      	ldr	r1, [pc, #48]	@ (800eaf4 <vQueueAddToRegistry+0x50>)
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	683a      	ldr	r2, [r7, #0]
 800eac6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800eaca:	4a0a      	ldr	r2, [pc, #40]	@ (800eaf4 <vQueueAddToRegistry+0x50>)
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	00db      	lsls	r3, r3, #3
 800ead0:	4413      	add	r3, r2
 800ead2:	687a      	ldr	r2, [r7, #4]
 800ead4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ead6:	e006      	b.n	800eae6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	3301      	adds	r3, #1
 800eadc:	60fb      	str	r3, [r7, #12]
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	2b0b      	cmp	r3, #11
 800eae2:	d9e7      	bls.n	800eab4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800eae4:	bf00      	nop
 800eae6:	bf00      	nop
 800eae8:	3714      	adds	r7, #20
 800eaea:	46bd      	mov	sp, r7
 800eaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf0:	4770      	bx	lr
 800eaf2:	bf00      	nop
 800eaf4:	2000ea40 	.word	0x2000ea40

0800eaf8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800eaf8:	b480      	push	{r7}
 800eafa:	b085      	sub	sp, #20
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eb00:	2300      	movs	r3, #0
 800eb02:	60fb      	str	r3, [r7, #12]
 800eb04:	e016      	b.n	800eb34 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800eb06:	4a10      	ldr	r2, [pc, #64]	@ (800eb48 <vQueueUnregisterQueue+0x50>)
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	00db      	lsls	r3, r3, #3
 800eb0c:	4413      	add	r3, r2
 800eb0e:	685b      	ldr	r3, [r3, #4]
 800eb10:	687a      	ldr	r2, [r7, #4]
 800eb12:	429a      	cmp	r2, r3
 800eb14:	d10b      	bne.n	800eb2e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800eb16:	4a0c      	ldr	r2, [pc, #48]	@ (800eb48 <vQueueUnregisterQueue+0x50>)
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	2100      	movs	r1, #0
 800eb1c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800eb20:	4a09      	ldr	r2, [pc, #36]	@ (800eb48 <vQueueUnregisterQueue+0x50>)
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	00db      	lsls	r3, r3, #3
 800eb26:	4413      	add	r3, r2
 800eb28:	2200      	movs	r2, #0
 800eb2a:	605a      	str	r2, [r3, #4]
				break;
 800eb2c:	e006      	b.n	800eb3c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	3301      	adds	r3, #1
 800eb32:	60fb      	str	r3, [r7, #12]
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	2b0b      	cmp	r3, #11
 800eb38:	d9e5      	bls.n	800eb06 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800eb3a:	bf00      	nop
 800eb3c:	bf00      	nop
 800eb3e:	3714      	adds	r7, #20
 800eb40:	46bd      	mov	sp, r7
 800eb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb46:	4770      	bx	lr
 800eb48:	2000ea40 	.word	0x2000ea40

0800eb4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b086      	sub	sp, #24
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	60f8      	str	r0, [r7, #12]
 800eb54:	60b9      	str	r1, [r7, #8]
 800eb56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800eb5c:	f001 fdbe 	bl	80106dc <vPortEnterCritical>
 800eb60:	697b      	ldr	r3, [r7, #20]
 800eb62:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800eb66:	b25b      	sxtb	r3, r3
 800eb68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eb6c:	d103      	bne.n	800eb76 <vQueueWaitForMessageRestricted+0x2a>
 800eb6e:	697b      	ldr	r3, [r7, #20]
 800eb70:	2200      	movs	r2, #0
 800eb72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eb76:	697b      	ldr	r3, [r7, #20]
 800eb78:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800eb7c:	b25b      	sxtb	r3, r3
 800eb7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eb82:	d103      	bne.n	800eb8c <vQueueWaitForMessageRestricted+0x40>
 800eb84:	697b      	ldr	r3, [r7, #20]
 800eb86:	2200      	movs	r2, #0
 800eb88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800eb8c:	f001 fddc 	bl	8010748 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800eb90:	697b      	ldr	r3, [r7, #20]
 800eb92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d106      	bne.n	800eba6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800eb98:	697b      	ldr	r3, [r7, #20]
 800eb9a:	3324      	adds	r3, #36	@ 0x24
 800eb9c:	687a      	ldr	r2, [r7, #4]
 800eb9e:	68b9      	ldr	r1, [r7, #8]
 800eba0:	4618      	mov	r0, r3
 800eba2:	f000 fd2f 	bl	800f604 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800eba6:	6978      	ldr	r0, [r7, #20]
 800eba8:	f7ff fefc 	bl	800e9a4 <prvUnlockQueue>
	}
 800ebac:	bf00      	nop
 800ebae:	3718      	adds	r7, #24
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	bd80      	pop	{r7, pc}

0800ebb4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b08e      	sub	sp, #56	@ 0x38
 800ebb8:	af04      	add	r7, sp, #16
 800ebba:	60f8      	str	r0, [r7, #12]
 800ebbc:	60b9      	str	r1, [r7, #8]
 800ebbe:	607a      	str	r2, [r7, #4]
 800ebc0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ebc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d10d      	bne.n	800ebe4 <xTaskCreateStatic+0x30>
	__asm volatile
 800ebc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebcc:	b672      	cpsid	i
 800ebce:	f383 8811 	msr	BASEPRI, r3
 800ebd2:	f3bf 8f6f 	isb	sy
 800ebd6:	f3bf 8f4f 	dsb	sy
 800ebda:	b662      	cpsie	i
 800ebdc:	623b      	str	r3, [r7, #32]
}
 800ebde:	bf00      	nop
 800ebe0:	bf00      	nop
 800ebe2:	e7fd      	b.n	800ebe0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800ebe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d10d      	bne.n	800ec06 <xTaskCreateStatic+0x52>
	__asm volatile
 800ebea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebee:	b672      	cpsid	i
 800ebf0:	f383 8811 	msr	BASEPRI, r3
 800ebf4:	f3bf 8f6f 	isb	sy
 800ebf8:	f3bf 8f4f 	dsb	sy
 800ebfc:	b662      	cpsie	i
 800ebfe:	61fb      	str	r3, [r7, #28]
}
 800ec00:	bf00      	nop
 800ec02:	bf00      	nop
 800ec04:	e7fd      	b.n	800ec02 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ec06:	23a8      	movs	r3, #168	@ 0xa8
 800ec08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ec0a:	693b      	ldr	r3, [r7, #16]
 800ec0c:	2ba8      	cmp	r3, #168	@ 0xa8
 800ec0e:	d00d      	beq.n	800ec2c <xTaskCreateStatic+0x78>
	__asm volatile
 800ec10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec14:	b672      	cpsid	i
 800ec16:	f383 8811 	msr	BASEPRI, r3
 800ec1a:	f3bf 8f6f 	isb	sy
 800ec1e:	f3bf 8f4f 	dsb	sy
 800ec22:	b662      	cpsie	i
 800ec24:	61bb      	str	r3, [r7, #24]
}
 800ec26:	bf00      	nop
 800ec28:	bf00      	nop
 800ec2a:	e7fd      	b.n	800ec28 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ec2c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ec2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d01e      	beq.n	800ec72 <xTaskCreateStatic+0xbe>
 800ec34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d01b      	beq.n	800ec72 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ec3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec3c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ec3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ec42:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ec44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec46:	2202      	movs	r2, #2
 800ec48:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	9303      	str	r3, [sp, #12]
 800ec50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec52:	9302      	str	r3, [sp, #8]
 800ec54:	f107 0314 	add.w	r3, r7, #20
 800ec58:	9301      	str	r3, [sp, #4]
 800ec5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec5c:	9300      	str	r3, [sp, #0]
 800ec5e:	683b      	ldr	r3, [r7, #0]
 800ec60:	687a      	ldr	r2, [r7, #4]
 800ec62:	68b9      	ldr	r1, [r7, #8]
 800ec64:	68f8      	ldr	r0, [r7, #12]
 800ec66:	f000 f851 	bl	800ed0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ec6a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ec6c:	f000 f8f8 	bl	800ee60 <prvAddNewTaskToReadyList>
 800ec70:	e001      	b.n	800ec76 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800ec72:	2300      	movs	r3, #0
 800ec74:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ec76:	697b      	ldr	r3, [r7, #20]
	}
 800ec78:	4618      	mov	r0, r3
 800ec7a:	3728      	adds	r7, #40	@ 0x28
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	bd80      	pop	{r7, pc}

0800ec80 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b08c      	sub	sp, #48	@ 0x30
 800ec84:	af04      	add	r7, sp, #16
 800ec86:	60f8      	str	r0, [r7, #12]
 800ec88:	60b9      	str	r1, [r7, #8]
 800ec8a:	603b      	str	r3, [r7, #0]
 800ec8c:	4613      	mov	r3, r2
 800ec8e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ec90:	88fb      	ldrh	r3, [r7, #6]
 800ec92:	009b      	lsls	r3, r3, #2
 800ec94:	4618      	mov	r0, r3
 800ec96:	f001 fe4f 	bl	8010938 <pvPortMalloc>
 800ec9a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ec9c:	697b      	ldr	r3, [r7, #20]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d00e      	beq.n	800ecc0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800eca2:	20a8      	movs	r0, #168	@ 0xa8
 800eca4:	f001 fe48 	bl	8010938 <pvPortMalloc>
 800eca8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ecaa:	69fb      	ldr	r3, [r7, #28]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d003      	beq.n	800ecb8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ecb0:	69fb      	ldr	r3, [r7, #28]
 800ecb2:	697a      	ldr	r2, [r7, #20]
 800ecb4:	631a      	str	r2, [r3, #48]	@ 0x30
 800ecb6:	e005      	b.n	800ecc4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ecb8:	6978      	ldr	r0, [r7, #20]
 800ecba:	f001 ff0f 	bl	8010adc <vPortFree>
 800ecbe:	e001      	b.n	800ecc4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ecc4:	69fb      	ldr	r3, [r7, #28]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d017      	beq.n	800ecfa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ecca:	69fb      	ldr	r3, [r7, #28]
 800eccc:	2200      	movs	r2, #0
 800ecce:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ecd2:	88fa      	ldrh	r2, [r7, #6]
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	9303      	str	r3, [sp, #12]
 800ecd8:	69fb      	ldr	r3, [r7, #28]
 800ecda:	9302      	str	r3, [sp, #8]
 800ecdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecde:	9301      	str	r3, [sp, #4]
 800ece0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ece2:	9300      	str	r3, [sp, #0]
 800ece4:	683b      	ldr	r3, [r7, #0]
 800ece6:	68b9      	ldr	r1, [r7, #8]
 800ece8:	68f8      	ldr	r0, [r7, #12]
 800ecea:	f000 f80f 	bl	800ed0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ecee:	69f8      	ldr	r0, [r7, #28]
 800ecf0:	f000 f8b6 	bl	800ee60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ecf4:	2301      	movs	r3, #1
 800ecf6:	61bb      	str	r3, [r7, #24]
 800ecf8:	e002      	b.n	800ed00 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ecfa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ecfe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ed00:	69bb      	ldr	r3, [r7, #24]
	}
 800ed02:	4618      	mov	r0, r3
 800ed04:	3720      	adds	r7, #32
 800ed06:	46bd      	mov	sp, r7
 800ed08:	bd80      	pop	{r7, pc}
	...

0800ed0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b088      	sub	sp, #32
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	60f8      	str	r0, [r7, #12]
 800ed14:	60b9      	str	r1, [r7, #8]
 800ed16:	607a      	str	r2, [r7, #4]
 800ed18:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ed1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed1c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	009b      	lsls	r3, r3, #2
 800ed22:	461a      	mov	r2, r3
 800ed24:	21a5      	movs	r1, #165	@ 0xa5
 800ed26:	f011 fe97 	bl	8020a58 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ed2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ed2e:	6879      	ldr	r1, [r7, #4]
 800ed30:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ed34:	440b      	add	r3, r1
 800ed36:	009b      	lsls	r3, r3, #2
 800ed38:	4413      	add	r3, r2
 800ed3a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ed3c:	69bb      	ldr	r3, [r7, #24]
 800ed3e:	f023 0307 	bic.w	r3, r3, #7
 800ed42:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ed44:	69bb      	ldr	r3, [r7, #24]
 800ed46:	f003 0307 	and.w	r3, r3, #7
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d00d      	beq.n	800ed6a <prvInitialiseNewTask+0x5e>
	__asm volatile
 800ed4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed52:	b672      	cpsid	i
 800ed54:	f383 8811 	msr	BASEPRI, r3
 800ed58:	f3bf 8f6f 	isb	sy
 800ed5c:	f3bf 8f4f 	dsb	sy
 800ed60:	b662      	cpsie	i
 800ed62:	617b      	str	r3, [r7, #20]
}
 800ed64:	bf00      	nop
 800ed66:	bf00      	nop
 800ed68:	e7fd      	b.n	800ed66 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ed6a:	68bb      	ldr	r3, [r7, #8]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d01f      	beq.n	800edb0 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ed70:	2300      	movs	r3, #0
 800ed72:	61fb      	str	r3, [r7, #28]
 800ed74:	e012      	b.n	800ed9c <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ed76:	68ba      	ldr	r2, [r7, #8]
 800ed78:	69fb      	ldr	r3, [r7, #28]
 800ed7a:	4413      	add	r3, r2
 800ed7c:	7819      	ldrb	r1, [r3, #0]
 800ed7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ed80:	69fb      	ldr	r3, [r7, #28]
 800ed82:	4413      	add	r3, r2
 800ed84:	3334      	adds	r3, #52	@ 0x34
 800ed86:	460a      	mov	r2, r1
 800ed88:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ed8a:	68ba      	ldr	r2, [r7, #8]
 800ed8c:	69fb      	ldr	r3, [r7, #28]
 800ed8e:	4413      	add	r3, r2
 800ed90:	781b      	ldrb	r3, [r3, #0]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d006      	beq.n	800eda4 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ed96:	69fb      	ldr	r3, [r7, #28]
 800ed98:	3301      	adds	r3, #1
 800ed9a:	61fb      	str	r3, [r7, #28]
 800ed9c:	69fb      	ldr	r3, [r7, #28]
 800ed9e:	2b0f      	cmp	r3, #15
 800eda0:	d9e9      	bls.n	800ed76 <prvInitialiseNewTask+0x6a>
 800eda2:	e000      	b.n	800eda6 <prvInitialiseNewTask+0x9a>
			{
				break;
 800eda4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800eda6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eda8:	2200      	movs	r2, #0
 800edaa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800edae:	e003      	b.n	800edb8 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800edb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edb2:	2200      	movs	r2, #0
 800edb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800edb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edba:	2b37      	cmp	r3, #55	@ 0x37
 800edbc:	d901      	bls.n	800edc2 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800edbe:	2337      	movs	r3, #55	@ 0x37
 800edc0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800edc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edc4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800edc6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800edc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800edcc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800edce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edd0:	2200      	movs	r2, #0
 800edd2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800edd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edd6:	3304      	adds	r3, #4
 800edd8:	4618      	mov	r0, r3
 800edda:	f7fe fce5 	bl	800d7a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800edde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ede0:	3318      	adds	r3, #24
 800ede2:	4618      	mov	r0, r3
 800ede4:	f7fe fce0 	bl	800d7a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ede8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800edec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800edee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edf0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800edf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edf6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800edf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800edfc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800edfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee00:	2200      	movs	r2, #0
 800ee02:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ee06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee08:	2200      	movs	r2, #0
 800ee0a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ee0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee10:	3354      	adds	r3, #84	@ 0x54
 800ee12:	224c      	movs	r2, #76	@ 0x4c
 800ee14:	2100      	movs	r1, #0
 800ee16:	4618      	mov	r0, r3
 800ee18:	f011 fe1e 	bl	8020a58 <memset>
 800ee1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee1e:	4a0d      	ldr	r2, [pc, #52]	@ (800ee54 <prvInitialiseNewTask+0x148>)
 800ee20:	659a      	str	r2, [r3, #88]	@ 0x58
 800ee22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee24:	4a0c      	ldr	r2, [pc, #48]	@ (800ee58 <prvInitialiseNewTask+0x14c>)
 800ee26:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ee28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee2a:	4a0c      	ldr	r2, [pc, #48]	@ (800ee5c <prvInitialiseNewTask+0x150>)
 800ee2c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ee2e:	683a      	ldr	r2, [r7, #0]
 800ee30:	68f9      	ldr	r1, [r7, #12]
 800ee32:	69b8      	ldr	r0, [r7, #24]
 800ee34:	f001 fb44 	bl	80104c0 <pxPortInitialiseStack>
 800ee38:	4602      	mov	r2, r0
 800ee3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee3c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ee3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d002      	beq.n	800ee4a <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ee44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ee48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ee4a:	bf00      	nop
 800ee4c:	3720      	adds	r7, #32
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}
 800ee52:	bf00      	nop
 800ee54:	2002d844 	.word	0x2002d844
 800ee58:	2002d8ac 	.word	0x2002d8ac
 800ee5c:	2002d914 	.word	0x2002d914

0800ee60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b082      	sub	sp, #8
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ee68:	f001 fc38 	bl	80106dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ee6c:	4b2d      	ldr	r3, [pc, #180]	@ (800ef24 <prvAddNewTaskToReadyList+0xc4>)
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	3301      	adds	r3, #1
 800ee72:	4a2c      	ldr	r2, [pc, #176]	@ (800ef24 <prvAddNewTaskToReadyList+0xc4>)
 800ee74:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ee76:	4b2c      	ldr	r3, [pc, #176]	@ (800ef28 <prvAddNewTaskToReadyList+0xc8>)
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d109      	bne.n	800ee92 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ee7e:	4a2a      	ldr	r2, [pc, #168]	@ (800ef28 <prvAddNewTaskToReadyList+0xc8>)
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ee84:	4b27      	ldr	r3, [pc, #156]	@ (800ef24 <prvAddNewTaskToReadyList+0xc4>)
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	2b01      	cmp	r3, #1
 800ee8a:	d110      	bne.n	800eeae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ee8c:	f000 fcf0 	bl	800f870 <prvInitialiseTaskLists>
 800ee90:	e00d      	b.n	800eeae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ee92:	4b26      	ldr	r3, [pc, #152]	@ (800ef2c <prvAddNewTaskToReadyList+0xcc>)
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d109      	bne.n	800eeae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ee9a:	4b23      	ldr	r3, [pc, #140]	@ (800ef28 <prvAddNewTaskToReadyList+0xc8>)
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eea4:	429a      	cmp	r2, r3
 800eea6:	d802      	bhi.n	800eeae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800eea8:	4a1f      	ldr	r2, [pc, #124]	@ (800ef28 <prvAddNewTaskToReadyList+0xc8>)
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800eeae:	4b20      	ldr	r3, [pc, #128]	@ (800ef30 <prvAddNewTaskToReadyList+0xd0>)
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	3301      	adds	r3, #1
 800eeb4:	4a1e      	ldr	r2, [pc, #120]	@ (800ef30 <prvAddNewTaskToReadyList+0xd0>)
 800eeb6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800eeb8:	4b1d      	ldr	r3, [pc, #116]	@ (800ef30 <prvAddNewTaskToReadyList+0xd0>)
 800eeba:	681a      	ldr	r2, [r3, #0]
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eec4:	4b1b      	ldr	r3, [pc, #108]	@ (800ef34 <prvAddNewTaskToReadyList+0xd4>)
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	429a      	cmp	r2, r3
 800eeca:	d903      	bls.n	800eed4 <prvAddNewTaskToReadyList+0x74>
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eed0:	4a18      	ldr	r2, [pc, #96]	@ (800ef34 <prvAddNewTaskToReadyList+0xd4>)
 800eed2:	6013      	str	r3, [r2, #0]
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eed8:	4613      	mov	r3, r2
 800eeda:	009b      	lsls	r3, r3, #2
 800eedc:	4413      	add	r3, r2
 800eede:	009b      	lsls	r3, r3, #2
 800eee0:	4a15      	ldr	r2, [pc, #84]	@ (800ef38 <prvAddNewTaskToReadyList+0xd8>)
 800eee2:	441a      	add	r2, r3
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	3304      	adds	r3, #4
 800eee8:	4619      	mov	r1, r3
 800eeea:	4610      	mov	r0, r2
 800eeec:	f7fe fc69 	bl	800d7c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800eef0:	f001 fc2a 	bl	8010748 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800eef4:	4b0d      	ldr	r3, [pc, #52]	@ (800ef2c <prvAddNewTaskToReadyList+0xcc>)
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d00e      	beq.n	800ef1a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800eefc:	4b0a      	ldr	r3, [pc, #40]	@ (800ef28 <prvAddNewTaskToReadyList+0xc8>)
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef06:	429a      	cmp	r2, r3
 800ef08:	d207      	bcs.n	800ef1a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ef0a:	4b0c      	ldr	r3, [pc, #48]	@ (800ef3c <prvAddNewTaskToReadyList+0xdc>)
 800ef0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ef10:	601a      	str	r2, [r3, #0]
 800ef12:	f3bf 8f4f 	dsb	sy
 800ef16:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ef1a:	bf00      	nop
 800ef1c:	3708      	adds	r7, #8
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	bd80      	pop	{r7, pc}
 800ef22:	bf00      	nop
 800ef24:	2000ef74 	.word	0x2000ef74
 800ef28:	2000eaa0 	.word	0x2000eaa0
 800ef2c:	2000ef80 	.word	0x2000ef80
 800ef30:	2000ef90 	.word	0x2000ef90
 800ef34:	2000ef7c 	.word	0x2000ef7c
 800ef38:	2000eaa4 	.word	0x2000eaa4
 800ef3c:	e000ed04 	.word	0xe000ed04

0800ef40 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b084      	sub	sp, #16
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800ef48:	f001 fbc8 	bl	80106dc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d102      	bne.n	800ef58 <vTaskDelete+0x18>
 800ef52:	4b2e      	ldr	r3, [pc, #184]	@ (800f00c <vTaskDelete+0xcc>)
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	e000      	b.n	800ef5a <vTaskDelete+0x1a>
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	3304      	adds	r3, #4
 800ef60:	4618      	mov	r0, r3
 800ef62:	f7fe fc8b 	bl	800d87c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d004      	beq.n	800ef78 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	3318      	adds	r3, #24
 800ef72:	4618      	mov	r0, r3
 800ef74:	f7fe fc82 	bl	800d87c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800ef78:	4b25      	ldr	r3, [pc, #148]	@ (800f010 <vTaskDelete+0xd0>)
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	3301      	adds	r3, #1
 800ef7e:	4a24      	ldr	r2, [pc, #144]	@ (800f010 <vTaskDelete+0xd0>)
 800ef80:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800ef82:	4b22      	ldr	r3, [pc, #136]	@ (800f00c <vTaskDelete+0xcc>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	68fa      	ldr	r2, [r7, #12]
 800ef88:	429a      	cmp	r2, r3
 800ef8a:	d10b      	bne.n	800efa4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	3304      	adds	r3, #4
 800ef90:	4619      	mov	r1, r3
 800ef92:	4820      	ldr	r0, [pc, #128]	@ (800f014 <vTaskDelete+0xd4>)
 800ef94:	f7fe fc15 	bl	800d7c2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800ef98:	4b1f      	ldr	r3, [pc, #124]	@ (800f018 <vTaskDelete+0xd8>)
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	3301      	adds	r3, #1
 800ef9e:	4a1e      	ldr	r2, [pc, #120]	@ (800f018 <vTaskDelete+0xd8>)
 800efa0:	6013      	str	r3, [r2, #0]
 800efa2:	e009      	b.n	800efb8 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800efa4:	4b1d      	ldr	r3, [pc, #116]	@ (800f01c <vTaskDelete+0xdc>)
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	3b01      	subs	r3, #1
 800efaa:	4a1c      	ldr	r2, [pc, #112]	@ (800f01c <vTaskDelete+0xdc>)
 800efac:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800efae:	68f8      	ldr	r0, [r7, #12]
 800efb0:	f000 fccc 	bl	800f94c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800efb4:	f000 fd02 	bl	800f9bc <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800efb8:	f001 fbc6 	bl	8010748 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800efbc:	4b18      	ldr	r3, [pc, #96]	@ (800f020 <vTaskDelete+0xe0>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d01e      	beq.n	800f002 <vTaskDelete+0xc2>
		{
			if( pxTCB == pxCurrentTCB )
 800efc4:	4b11      	ldr	r3, [pc, #68]	@ (800f00c <vTaskDelete+0xcc>)
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	68fa      	ldr	r2, [r7, #12]
 800efca:	429a      	cmp	r2, r3
 800efcc:	d119      	bne.n	800f002 <vTaskDelete+0xc2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800efce:	4b15      	ldr	r3, [pc, #84]	@ (800f024 <vTaskDelete+0xe4>)
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d00d      	beq.n	800eff2 <vTaskDelete+0xb2>
	__asm volatile
 800efd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efda:	b672      	cpsid	i
 800efdc:	f383 8811 	msr	BASEPRI, r3
 800efe0:	f3bf 8f6f 	isb	sy
 800efe4:	f3bf 8f4f 	dsb	sy
 800efe8:	b662      	cpsie	i
 800efea:	60bb      	str	r3, [r7, #8]
}
 800efec:	bf00      	nop
 800efee:	bf00      	nop
 800eff0:	e7fd      	b.n	800efee <vTaskDelete+0xae>
				portYIELD_WITHIN_API();
 800eff2:	4b0d      	ldr	r3, [pc, #52]	@ (800f028 <vTaskDelete+0xe8>)
 800eff4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eff8:	601a      	str	r2, [r3, #0]
 800effa:	f3bf 8f4f 	dsb	sy
 800effe:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f002:	bf00      	nop
 800f004:	3710      	adds	r7, #16
 800f006:	46bd      	mov	sp, r7
 800f008:	bd80      	pop	{r7, pc}
 800f00a:	bf00      	nop
 800f00c:	2000eaa0 	.word	0x2000eaa0
 800f010:	2000ef90 	.word	0x2000ef90
 800f014:	2000ef48 	.word	0x2000ef48
 800f018:	2000ef5c 	.word	0x2000ef5c
 800f01c:	2000ef74 	.word	0x2000ef74
 800f020:	2000ef80 	.word	0x2000ef80
 800f024:	2000ef9c 	.word	0x2000ef9c
 800f028:	e000ed04 	.word	0xe000ed04

0800f02c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b084      	sub	sp, #16
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f034:	2300      	movs	r3, #0
 800f036:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d01a      	beq.n	800f074 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f03e:	4b15      	ldr	r3, [pc, #84]	@ (800f094 <vTaskDelay+0x68>)
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d00d      	beq.n	800f062 <vTaskDelay+0x36>
	__asm volatile
 800f046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f04a:	b672      	cpsid	i
 800f04c:	f383 8811 	msr	BASEPRI, r3
 800f050:	f3bf 8f6f 	isb	sy
 800f054:	f3bf 8f4f 	dsb	sy
 800f058:	b662      	cpsie	i
 800f05a:	60bb      	str	r3, [r7, #8]
}
 800f05c:	bf00      	nop
 800f05e:	bf00      	nop
 800f060:	e7fd      	b.n	800f05e <vTaskDelay+0x32>
			vTaskSuspendAll();
 800f062:	f000 f88f 	bl	800f184 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f066:	2100      	movs	r1, #0
 800f068:	6878      	ldr	r0, [r7, #4]
 800f06a:	f000 fe6d 	bl	800fd48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f06e:	f000 f897 	bl	800f1a0 <xTaskResumeAll>
 800f072:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d107      	bne.n	800f08a <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800f07a:	4b07      	ldr	r3, [pc, #28]	@ (800f098 <vTaskDelay+0x6c>)
 800f07c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f080:	601a      	str	r2, [r3, #0]
 800f082:	f3bf 8f4f 	dsb	sy
 800f086:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f08a:	bf00      	nop
 800f08c:	3710      	adds	r7, #16
 800f08e:	46bd      	mov	sp, r7
 800f090:	bd80      	pop	{r7, pc}
 800f092:	bf00      	nop
 800f094:	2000ef9c 	.word	0x2000ef9c
 800f098:	e000ed04 	.word	0xe000ed04

0800f09c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b08a      	sub	sp, #40	@ 0x28
 800f0a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f0aa:	463a      	mov	r2, r7
 800f0ac:	1d39      	adds	r1, r7, #4
 800f0ae:	f107 0308 	add.w	r3, r7, #8
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	f7fe fb24 	bl	800d700 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f0b8:	6839      	ldr	r1, [r7, #0]
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	68ba      	ldr	r2, [r7, #8]
 800f0be:	9202      	str	r2, [sp, #8]
 800f0c0:	9301      	str	r3, [sp, #4]
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	9300      	str	r3, [sp, #0]
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	460a      	mov	r2, r1
 800f0ca:	4926      	ldr	r1, [pc, #152]	@ (800f164 <vTaskStartScheduler+0xc8>)
 800f0cc:	4826      	ldr	r0, [pc, #152]	@ (800f168 <vTaskStartScheduler+0xcc>)
 800f0ce:	f7ff fd71 	bl	800ebb4 <xTaskCreateStatic>
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	4a25      	ldr	r2, [pc, #148]	@ (800f16c <vTaskStartScheduler+0xd0>)
 800f0d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f0d8:	4b24      	ldr	r3, [pc, #144]	@ (800f16c <vTaskStartScheduler+0xd0>)
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d002      	beq.n	800f0e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f0e0:	2301      	movs	r3, #1
 800f0e2:	617b      	str	r3, [r7, #20]
 800f0e4:	e001      	b.n	800f0ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f0ea:	697b      	ldr	r3, [r7, #20]
 800f0ec:	2b01      	cmp	r3, #1
 800f0ee:	d102      	bne.n	800f0f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f0f0:	f000 fe7e 	bl	800fdf0 <xTimerCreateTimerTask>
 800f0f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f0f6:	697b      	ldr	r3, [r7, #20]
 800f0f8:	2b01      	cmp	r3, #1
 800f0fa:	d11d      	bne.n	800f138 <vTaskStartScheduler+0x9c>
	__asm volatile
 800f0fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f100:	b672      	cpsid	i
 800f102:	f383 8811 	msr	BASEPRI, r3
 800f106:	f3bf 8f6f 	isb	sy
 800f10a:	f3bf 8f4f 	dsb	sy
 800f10e:	b662      	cpsie	i
 800f110:	613b      	str	r3, [r7, #16]
}
 800f112:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f114:	4b16      	ldr	r3, [pc, #88]	@ (800f170 <vTaskStartScheduler+0xd4>)
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	3354      	adds	r3, #84	@ 0x54
 800f11a:	4a16      	ldr	r2, [pc, #88]	@ (800f174 <vTaskStartScheduler+0xd8>)
 800f11c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f11e:	4b16      	ldr	r3, [pc, #88]	@ (800f178 <vTaskStartScheduler+0xdc>)
 800f120:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f124:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f126:	4b15      	ldr	r3, [pc, #84]	@ (800f17c <vTaskStartScheduler+0xe0>)
 800f128:	2201      	movs	r2, #1
 800f12a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f12c:	4b14      	ldr	r3, [pc, #80]	@ (800f180 <vTaskStartScheduler+0xe4>)
 800f12e:	2200      	movs	r2, #0
 800f130:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f132:	f001 fa55 	bl	80105e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f136:	e011      	b.n	800f15c <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f138:	697b      	ldr	r3, [r7, #20]
 800f13a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f13e:	d10d      	bne.n	800f15c <vTaskStartScheduler+0xc0>
	__asm volatile
 800f140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f144:	b672      	cpsid	i
 800f146:	f383 8811 	msr	BASEPRI, r3
 800f14a:	f3bf 8f6f 	isb	sy
 800f14e:	f3bf 8f4f 	dsb	sy
 800f152:	b662      	cpsie	i
 800f154:	60fb      	str	r3, [r7, #12]
}
 800f156:	bf00      	nop
 800f158:	bf00      	nop
 800f15a:	e7fd      	b.n	800f158 <vTaskStartScheduler+0xbc>
}
 800f15c:	bf00      	nop
 800f15e:	3718      	adds	r7, #24
 800f160:	46bd      	mov	sp, r7
 800f162:	bd80      	pop	{r7, pc}
 800f164:	08021960 	.word	0x08021960
 800f168:	0800f841 	.word	0x0800f841
 800f16c:	2000ef98 	.word	0x2000ef98
 800f170:	2000eaa0 	.word	0x2000eaa0
 800f174:	20000080 	.word	0x20000080
 800f178:	2000ef94 	.word	0x2000ef94
 800f17c:	2000ef80 	.word	0x2000ef80
 800f180:	2000ef78 	.word	0x2000ef78

0800f184 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f184:	b480      	push	{r7}
 800f186:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f188:	4b04      	ldr	r3, [pc, #16]	@ (800f19c <vTaskSuspendAll+0x18>)
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	3301      	adds	r3, #1
 800f18e:	4a03      	ldr	r2, [pc, #12]	@ (800f19c <vTaskSuspendAll+0x18>)
 800f190:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f192:	bf00      	nop
 800f194:	46bd      	mov	sp, r7
 800f196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19a:	4770      	bx	lr
 800f19c:	2000ef9c 	.word	0x2000ef9c

0800f1a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b084      	sub	sp, #16
 800f1a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f1ae:	4b43      	ldr	r3, [pc, #268]	@ (800f2bc <xTaskResumeAll+0x11c>)
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d10d      	bne.n	800f1d2 <xTaskResumeAll+0x32>
	__asm volatile
 800f1b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1ba:	b672      	cpsid	i
 800f1bc:	f383 8811 	msr	BASEPRI, r3
 800f1c0:	f3bf 8f6f 	isb	sy
 800f1c4:	f3bf 8f4f 	dsb	sy
 800f1c8:	b662      	cpsie	i
 800f1ca:	603b      	str	r3, [r7, #0]
}
 800f1cc:	bf00      	nop
 800f1ce:	bf00      	nop
 800f1d0:	e7fd      	b.n	800f1ce <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f1d2:	f001 fa83 	bl	80106dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f1d6:	4b39      	ldr	r3, [pc, #228]	@ (800f2bc <xTaskResumeAll+0x11c>)
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	3b01      	subs	r3, #1
 800f1dc:	4a37      	ldr	r2, [pc, #220]	@ (800f2bc <xTaskResumeAll+0x11c>)
 800f1de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f1e0:	4b36      	ldr	r3, [pc, #216]	@ (800f2bc <xTaskResumeAll+0x11c>)
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d162      	bne.n	800f2ae <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f1e8:	4b35      	ldr	r3, [pc, #212]	@ (800f2c0 <xTaskResumeAll+0x120>)
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d05e      	beq.n	800f2ae <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f1f0:	e02f      	b.n	800f252 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1f2:	4b34      	ldr	r3, [pc, #208]	@ (800f2c4 <xTaskResumeAll+0x124>)
 800f1f4:	68db      	ldr	r3, [r3, #12]
 800f1f6:	68db      	ldr	r3, [r3, #12]
 800f1f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	3318      	adds	r3, #24
 800f1fe:	4618      	mov	r0, r3
 800f200:	f7fe fb3c 	bl	800d87c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	3304      	adds	r3, #4
 800f208:	4618      	mov	r0, r3
 800f20a:	f7fe fb37 	bl	800d87c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f212:	4b2d      	ldr	r3, [pc, #180]	@ (800f2c8 <xTaskResumeAll+0x128>)
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	429a      	cmp	r2, r3
 800f218:	d903      	bls.n	800f222 <xTaskResumeAll+0x82>
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f21e:	4a2a      	ldr	r2, [pc, #168]	@ (800f2c8 <xTaskResumeAll+0x128>)
 800f220:	6013      	str	r3, [r2, #0]
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f226:	4613      	mov	r3, r2
 800f228:	009b      	lsls	r3, r3, #2
 800f22a:	4413      	add	r3, r2
 800f22c:	009b      	lsls	r3, r3, #2
 800f22e:	4a27      	ldr	r2, [pc, #156]	@ (800f2cc <xTaskResumeAll+0x12c>)
 800f230:	441a      	add	r2, r3
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	3304      	adds	r3, #4
 800f236:	4619      	mov	r1, r3
 800f238:	4610      	mov	r0, r2
 800f23a:	f7fe fac2 	bl	800d7c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f242:	4b23      	ldr	r3, [pc, #140]	@ (800f2d0 <xTaskResumeAll+0x130>)
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f248:	429a      	cmp	r2, r3
 800f24a:	d302      	bcc.n	800f252 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 800f24c:	4b21      	ldr	r3, [pc, #132]	@ (800f2d4 <xTaskResumeAll+0x134>)
 800f24e:	2201      	movs	r2, #1
 800f250:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f252:	4b1c      	ldr	r3, [pc, #112]	@ (800f2c4 <xTaskResumeAll+0x124>)
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d1cb      	bne.n	800f1f2 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d001      	beq.n	800f264 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f260:	f000 fbac 	bl	800f9bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f264:	4b1c      	ldr	r3, [pc, #112]	@ (800f2d8 <xTaskResumeAll+0x138>)
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d010      	beq.n	800f292 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f270:	f000 f858 	bl	800f324 <xTaskIncrementTick>
 800f274:	4603      	mov	r3, r0
 800f276:	2b00      	cmp	r3, #0
 800f278:	d002      	beq.n	800f280 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800f27a:	4b16      	ldr	r3, [pc, #88]	@ (800f2d4 <xTaskResumeAll+0x134>)
 800f27c:	2201      	movs	r2, #1
 800f27e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	3b01      	subs	r3, #1
 800f284:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d1f1      	bne.n	800f270 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 800f28c:	4b12      	ldr	r3, [pc, #72]	@ (800f2d8 <xTaskResumeAll+0x138>)
 800f28e:	2200      	movs	r2, #0
 800f290:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f292:	4b10      	ldr	r3, [pc, #64]	@ (800f2d4 <xTaskResumeAll+0x134>)
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d009      	beq.n	800f2ae <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f29a:	2301      	movs	r3, #1
 800f29c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f29e:	4b0f      	ldr	r3, [pc, #60]	@ (800f2dc <xTaskResumeAll+0x13c>)
 800f2a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f2a4:	601a      	str	r2, [r3, #0]
 800f2a6:	f3bf 8f4f 	dsb	sy
 800f2aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f2ae:	f001 fa4b 	bl	8010748 <vPortExitCritical>

	return xAlreadyYielded;
 800f2b2:	68bb      	ldr	r3, [r7, #8]
}
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	3710      	adds	r7, #16
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd80      	pop	{r7, pc}
 800f2bc:	2000ef9c 	.word	0x2000ef9c
 800f2c0:	2000ef74 	.word	0x2000ef74
 800f2c4:	2000ef34 	.word	0x2000ef34
 800f2c8:	2000ef7c 	.word	0x2000ef7c
 800f2cc:	2000eaa4 	.word	0x2000eaa4
 800f2d0:	2000eaa0 	.word	0x2000eaa0
 800f2d4:	2000ef88 	.word	0x2000ef88
 800f2d8:	2000ef84 	.word	0x2000ef84
 800f2dc:	e000ed04 	.word	0xe000ed04

0800f2e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f2e0:	b480      	push	{r7}
 800f2e2:	b083      	sub	sp, #12
 800f2e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f2e6:	4b05      	ldr	r3, [pc, #20]	@ (800f2fc <xTaskGetTickCount+0x1c>)
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f2ec:	687b      	ldr	r3, [r7, #4]
}
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	370c      	adds	r7, #12
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f8:	4770      	bx	lr
 800f2fa:	bf00      	nop
 800f2fc:	2000ef78 	.word	0x2000ef78

0800f300 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b082      	sub	sp, #8
 800f304:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f306:	f001 fad1 	bl	80108ac <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f30a:	2300      	movs	r3, #0
 800f30c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f30e:	4b04      	ldr	r3, [pc, #16]	@ (800f320 <xTaskGetTickCountFromISR+0x20>)
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f314:	683b      	ldr	r3, [r7, #0]
}
 800f316:	4618      	mov	r0, r3
 800f318:	3708      	adds	r7, #8
 800f31a:	46bd      	mov	sp, r7
 800f31c:	bd80      	pop	{r7, pc}
 800f31e:	bf00      	nop
 800f320:	2000ef78 	.word	0x2000ef78

0800f324 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f324:	b580      	push	{r7, lr}
 800f326:	b086      	sub	sp, #24
 800f328:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f32a:	2300      	movs	r3, #0
 800f32c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f32e:	4b50      	ldr	r3, [pc, #320]	@ (800f470 <xTaskIncrementTick+0x14c>)
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	2b00      	cmp	r3, #0
 800f334:	f040 808c 	bne.w	800f450 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f338:	4b4e      	ldr	r3, [pc, #312]	@ (800f474 <xTaskIncrementTick+0x150>)
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	3301      	adds	r3, #1
 800f33e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f340:	4a4c      	ldr	r2, [pc, #304]	@ (800f474 <xTaskIncrementTick+0x150>)
 800f342:	693b      	ldr	r3, [r7, #16]
 800f344:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f346:	693b      	ldr	r3, [r7, #16]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d123      	bne.n	800f394 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800f34c:	4b4a      	ldr	r3, [pc, #296]	@ (800f478 <xTaskIncrementTick+0x154>)
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d00d      	beq.n	800f372 <xTaskIncrementTick+0x4e>
	__asm volatile
 800f356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f35a:	b672      	cpsid	i
 800f35c:	f383 8811 	msr	BASEPRI, r3
 800f360:	f3bf 8f6f 	isb	sy
 800f364:	f3bf 8f4f 	dsb	sy
 800f368:	b662      	cpsie	i
 800f36a:	603b      	str	r3, [r7, #0]
}
 800f36c:	bf00      	nop
 800f36e:	bf00      	nop
 800f370:	e7fd      	b.n	800f36e <xTaskIncrementTick+0x4a>
 800f372:	4b41      	ldr	r3, [pc, #260]	@ (800f478 <xTaskIncrementTick+0x154>)
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	60fb      	str	r3, [r7, #12]
 800f378:	4b40      	ldr	r3, [pc, #256]	@ (800f47c <xTaskIncrementTick+0x158>)
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	4a3e      	ldr	r2, [pc, #248]	@ (800f478 <xTaskIncrementTick+0x154>)
 800f37e:	6013      	str	r3, [r2, #0]
 800f380:	4a3e      	ldr	r2, [pc, #248]	@ (800f47c <xTaskIncrementTick+0x158>)
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	6013      	str	r3, [r2, #0]
 800f386:	4b3e      	ldr	r3, [pc, #248]	@ (800f480 <xTaskIncrementTick+0x15c>)
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	3301      	adds	r3, #1
 800f38c:	4a3c      	ldr	r2, [pc, #240]	@ (800f480 <xTaskIncrementTick+0x15c>)
 800f38e:	6013      	str	r3, [r2, #0]
 800f390:	f000 fb14 	bl	800f9bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f394:	4b3b      	ldr	r3, [pc, #236]	@ (800f484 <xTaskIncrementTick+0x160>)
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	693a      	ldr	r2, [r7, #16]
 800f39a:	429a      	cmp	r2, r3
 800f39c:	d349      	bcc.n	800f432 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f39e:	4b36      	ldr	r3, [pc, #216]	@ (800f478 <xTaskIncrementTick+0x154>)
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d104      	bne.n	800f3b2 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f3a8:	4b36      	ldr	r3, [pc, #216]	@ (800f484 <xTaskIncrementTick+0x160>)
 800f3aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f3ae:	601a      	str	r2, [r3, #0]
					break;
 800f3b0:	e03f      	b.n	800f432 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f3b2:	4b31      	ldr	r3, [pc, #196]	@ (800f478 <xTaskIncrementTick+0x154>)
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	68db      	ldr	r3, [r3, #12]
 800f3b8:	68db      	ldr	r3, [r3, #12]
 800f3ba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f3bc:	68bb      	ldr	r3, [r7, #8]
 800f3be:	685b      	ldr	r3, [r3, #4]
 800f3c0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f3c2:	693a      	ldr	r2, [r7, #16]
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	429a      	cmp	r2, r3
 800f3c8:	d203      	bcs.n	800f3d2 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f3ca:	4a2e      	ldr	r2, [pc, #184]	@ (800f484 <xTaskIncrementTick+0x160>)
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f3d0:	e02f      	b.n	800f432 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f3d2:	68bb      	ldr	r3, [r7, #8]
 800f3d4:	3304      	adds	r3, #4
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f7fe fa50 	bl	800d87c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f3dc:	68bb      	ldr	r3, [r7, #8]
 800f3de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d004      	beq.n	800f3ee <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f3e4:	68bb      	ldr	r3, [r7, #8]
 800f3e6:	3318      	adds	r3, #24
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	f7fe fa47 	bl	800d87c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f3ee:	68bb      	ldr	r3, [r7, #8]
 800f3f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3f2:	4b25      	ldr	r3, [pc, #148]	@ (800f488 <xTaskIncrementTick+0x164>)
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	429a      	cmp	r2, r3
 800f3f8:	d903      	bls.n	800f402 <xTaskIncrementTick+0xde>
 800f3fa:	68bb      	ldr	r3, [r7, #8]
 800f3fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3fe:	4a22      	ldr	r2, [pc, #136]	@ (800f488 <xTaskIncrementTick+0x164>)
 800f400:	6013      	str	r3, [r2, #0]
 800f402:	68bb      	ldr	r3, [r7, #8]
 800f404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f406:	4613      	mov	r3, r2
 800f408:	009b      	lsls	r3, r3, #2
 800f40a:	4413      	add	r3, r2
 800f40c:	009b      	lsls	r3, r3, #2
 800f40e:	4a1f      	ldr	r2, [pc, #124]	@ (800f48c <xTaskIncrementTick+0x168>)
 800f410:	441a      	add	r2, r3
 800f412:	68bb      	ldr	r3, [r7, #8]
 800f414:	3304      	adds	r3, #4
 800f416:	4619      	mov	r1, r3
 800f418:	4610      	mov	r0, r2
 800f41a:	f7fe f9d2 	bl	800d7c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f41e:	68bb      	ldr	r3, [r7, #8]
 800f420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f422:	4b1b      	ldr	r3, [pc, #108]	@ (800f490 <xTaskIncrementTick+0x16c>)
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f428:	429a      	cmp	r2, r3
 800f42a:	d3b8      	bcc.n	800f39e <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800f42c:	2301      	movs	r3, #1
 800f42e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f430:	e7b5      	b.n	800f39e <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f432:	4b17      	ldr	r3, [pc, #92]	@ (800f490 <xTaskIncrementTick+0x16c>)
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f438:	4914      	ldr	r1, [pc, #80]	@ (800f48c <xTaskIncrementTick+0x168>)
 800f43a:	4613      	mov	r3, r2
 800f43c:	009b      	lsls	r3, r3, #2
 800f43e:	4413      	add	r3, r2
 800f440:	009b      	lsls	r3, r3, #2
 800f442:	440b      	add	r3, r1
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	2b01      	cmp	r3, #1
 800f448:	d907      	bls.n	800f45a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800f44a:	2301      	movs	r3, #1
 800f44c:	617b      	str	r3, [r7, #20]
 800f44e:	e004      	b.n	800f45a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f450:	4b10      	ldr	r3, [pc, #64]	@ (800f494 <xTaskIncrementTick+0x170>)
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	3301      	adds	r3, #1
 800f456:	4a0f      	ldr	r2, [pc, #60]	@ (800f494 <xTaskIncrementTick+0x170>)
 800f458:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f45a:	4b0f      	ldr	r3, [pc, #60]	@ (800f498 <xTaskIncrementTick+0x174>)
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d001      	beq.n	800f466 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800f462:	2301      	movs	r3, #1
 800f464:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f466:	697b      	ldr	r3, [r7, #20]
}
 800f468:	4618      	mov	r0, r3
 800f46a:	3718      	adds	r7, #24
 800f46c:	46bd      	mov	sp, r7
 800f46e:	bd80      	pop	{r7, pc}
 800f470:	2000ef9c 	.word	0x2000ef9c
 800f474:	2000ef78 	.word	0x2000ef78
 800f478:	2000ef2c 	.word	0x2000ef2c
 800f47c:	2000ef30 	.word	0x2000ef30
 800f480:	2000ef8c 	.word	0x2000ef8c
 800f484:	2000ef94 	.word	0x2000ef94
 800f488:	2000ef7c 	.word	0x2000ef7c
 800f48c:	2000eaa4 	.word	0x2000eaa4
 800f490:	2000eaa0 	.word	0x2000eaa0
 800f494:	2000ef84 	.word	0x2000ef84
 800f498:	2000ef88 	.word	0x2000ef88

0800f49c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b086      	sub	sp, #24
 800f4a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f4a2:	4b3e      	ldr	r3, [pc, #248]	@ (800f59c <vTaskSwitchContext+0x100>)
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d003      	beq.n	800f4b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f4aa:	4b3d      	ldr	r3, [pc, #244]	@ (800f5a0 <vTaskSwitchContext+0x104>)
 800f4ac:	2201      	movs	r2, #1
 800f4ae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f4b0:	e070      	b.n	800f594 <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 800f4b2:	4b3b      	ldr	r3, [pc, #236]	@ (800f5a0 <vTaskSwitchContext+0x104>)
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800f4b8:	4b3a      	ldr	r3, [pc, #232]	@ (800f5a4 <vTaskSwitchContext+0x108>)
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f4be:	613b      	str	r3, [r7, #16]
 800f4c0:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800f4c4:	60fb      	str	r3, [r7, #12]
 800f4c6:	693b      	ldr	r3, [r7, #16]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	68fa      	ldr	r2, [r7, #12]
 800f4cc:	429a      	cmp	r2, r3
 800f4ce:	d111      	bne.n	800f4f4 <vTaskSwitchContext+0x58>
 800f4d0:	693b      	ldr	r3, [r7, #16]
 800f4d2:	3304      	adds	r3, #4
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	68fa      	ldr	r2, [r7, #12]
 800f4d8:	429a      	cmp	r2, r3
 800f4da:	d10b      	bne.n	800f4f4 <vTaskSwitchContext+0x58>
 800f4dc:	693b      	ldr	r3, [r7, #16]
 800f4de:	3308      	adds	r3, #8
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	68fa      	ldr	r2, [r7, #12]
 800f4e4:	429a      	cmp	r2, r3
 800f4e6:	d105      	bne.n	800f4f4 <vTaskSwitchContext+0x58>
 800f4e8:	693b      	ldr	r3, [r7, #16]
 800f4ea:	330c      	adds	r3, #12
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	68fa      	ldr	r2, [r7, #12]
 800f4f0:	429a      	cmp	r2, r3
 800f4f2:	d008      	beq.n	800f506 <vTaskSwitchContext+0x6a>
 800f4f4:	4b2b      	ldr	r3, [pc, #172]	@ (800f5a4 <vTaskSwitchContext+0x108>)
 800f4f6:	681a      	ldr	r2, [r3, #0]
 800f4f8:	4b2a      	ldr	r3, [pc, #168]	@ (800f5a4 <vTaskSwitchContext+0x108>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	3334      	adds	r3, #52	@ 0x34
 800f4fe:	4619      	mov	r1, r3
 800f500:	4610      	mov	r0, r2
 800f502:	f7f1 f9f3 	bl	80008ec <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f506:	4b28      	ldr	r3, [pc, #160]	@ (800f5a8 <vTaskSwitchContext+0x10c>)
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	617b      	str	r3, [r7, #20]
 800f50c:	e013      	b.n	800f536 <vTaskSwitchContext+0x9a>
 800f50e:	697b      	ldr	r3, [r7, #20]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d10d      	bne.n	800f530 <vTaskSwitchContext+0x94>
	__asm volatile
 800f514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f518:	b672      	cpsid	i
 800f51a:	f383 8811 	msr	BASEPRI, r3
 800f51e:	f3bf 8f6f 	isb	sy
 800f522:	f3bf 8f4f 	dsb	sy
 800f526:	b662      	cpsie	i
 800f528:	607b      	str	r3, [r7, #4]
}
 800f52a:	bf00      	nop
 800f52c:	bf00      	nop
 800f52e:	e7fd      	b.n	800f52c <vTaskSwitchContext+0x90>
 800f530:	697b      	ldr	r3, [r7, #20]
 800f532:	3b01      	subs	r3, #1
 800f534:	617b      	str	r3, [r7, #20]
 800f536:	491d      	ldr	r1, [pc, #116]	@ (800f5ac <vTaskSwitchContext+0x110>)
 800f538:	697a      	ldr	r2, [r7, #20]
 800f53a:	4613      	mov	r3, r2
 800f53c:	009b      	lsls	r3, r3, #2
 800f53e:	4413      	add	r3, r2
 800f540:	009b      	lsls	r3, r3, #2
 800f542:	440b      	add	r3, r1
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d0e1      	beq.n	800f50e <vTaskSwitchContext+0x72>
 800f54a:	697a      	ldr	r2, [r7, #20]
 800f54c:	4613      	mov	r3, r2
 800f54e:	009b      	lsls	r3, r3, #2
 800f550:	4413      	add	r3, r2
 800f552:	009b      	lsls	r3, r3, #2
 800f554:	4a15      	ldr	r2, [pc, #84]	@ (800f5ac <vTaskSwitchContext+0x110>)
 800f556:	4413      	add	r3, r2
 800f558:	60bb      	str	r3, [r7, #8]
 800f55a:	68bb      	ldr	r3, [r7, #8]
 800f55c:	685b      	ldr	r3, [r3, #4]
 800f55e:	685a      	ldr	r2, [r3, #4]
 800f560:	68bb      	ldr	r3, [r7, #8]
 800f562:	605a      	str	r2, [r3, #4]
 800f564:	68bb      	ldr	r3, [r7, #8]
 800f566:	685a      	ldr	r2, [r3, #4]
 800f568:	68bb      	ldr	r3, [r7, #8]
 800f56a:	3308      	adds	r3, #8
 800f56c:	429a      	cmp	r2, r3
 800f56e:	d104      	bne.n	800f57a <vTaskSwitchContext+0xde>
 800f570:	68bb      	ldr	r3, [r7, #8]
 800f572:	685b      	ldr	r3, [r3, #4]
 800f574:	685a      	ldr	r2, [r3, #4]
 800f576:	68bb      	ldr	r3, [r7, #8]
 800f578:	605a      	str	r2, [r3, #4]
 800f57a:	68bb      	ldr	r3, [r7, #8]
 800f57c:	685b      	ldr	r3, [r3, #4]
 800f57e:	68db      	ldr	r3, [r3, #12]
 800f580:	4a08      	ldr	r2, [pc, #32]	@ (800f5a4 <vTaskSwitchContext+0x108>)
 800f582:	6013      	str	r3, [r2, #0]
 800f584:	4a08      	ldr	r2, [pc, #32]	@ (800f5a8 <vTaskSwitchContext+0x10c>)
 800f586:	697b      	ldr	r3, [r7, #20]
 800f588:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f58a:	4b06      	ldr	r3, [pc, #24]	@ (800f5a4 <vTaskSwitchContext+0x108>)
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	3354      	adds	r3, #84	@ 0x54
 800f590:	4a07      	ldr	r2, [pc, #28]	@ (800f5b0 <vTaskSwitchContext+0x114>)
 800f592:	6013      	str	r3, [r2, #0]
}
 800f594:	bf00      	nop
 800f596:	3718      	adds	r7, #24
 800f598:	46bd      	mov	sp, r7
 800f59a:	bd80      	pop	{r7, pc}
 800f59c:	2000ef9c 	.word	0x2000ef9c
 800f5a0:	2000ef88 	.word	0x2000ef88
 800f5a4:	2000eaa0 	.word	0x2000eaa0
 800f5a8:	2000ef7c 	.word	0x2000ef7c
 800f5ac:	2000eaa4 	.word	0x2000eaa4
 800f5b0:	20000080 	.word	0x20000080

0800f5b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b084      	sub	sp, #16
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
 800f5bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d10d      	bne.n	800f5e0 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800f5c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5c8:	b672      	cpsid	i
 800f5ca:	f383 8811 	msr	BASEPRI, r3
 800f5ce:	f3bf 8f6f 	isb	sy
 800f5d2:	f3bf 8f4f 	dsb	sy
 800f5d6:	b662      	cpsie	i
 800f5d8:	60fb      	str	r3, [r7, #12]
}
 800f5da:	bf00      	nop
 800f5dc:	bf00      	nop
 800f5de:	e7fd      	b.n	800f5dc <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f5e0:	4b07      	ldr	r3, [pc, #28]	@ (800f600 <vTaskPlaceOnEventList+0x4c>)
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	3318      	adds	r3, #24
 800f5e6:	4619      	mov	r1, r3
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f7fe f90e 	bl	800d80a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f5ee:	2101      	movs	r1, #1
 800f5f0:	6838      	ldr	r0, [r7, #0]
 800f5f2:	f000 fba9 	bl	800fd48 <prvAddCurrentTaskToDelayedList>
}
 800f5f6:	bf00      	nop
 800f5f8:	3710      	adds	r7, #16
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	bd80      	pop	{r7, pc}
 800f5fe:	bf00      	nop
 800f600:	2000eaa0 	.word	0x2000eaa0

0800f604 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f604:	b580      	push	{r7, lr}
 800f606:	b086      	sub	sp, #24
 800f608:	af00      	add	r7, sp, #0
 800f60a:	60f8      	str	r0, [r7, #12]
 800f60c:	60b9      	str	r1, [r7, #8]
 800f60e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d10d      	bne.n	800f632 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800f616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f61a:	b672      	cpsid	i
 800f61c:	f383 8811 	msr	BASEPRI, r3
 800f620:	f3bf 8f6f 	isb	sy
 800f624:	f3bf 8f4f 	dsb	sy
 800f628:	b662      	cpsie	i
 800f62a:	617b      	str	r3, [r7, #20]
}
 800f62c:	bf00      	nop
 800f62e:	bf00      	nop
 800f630:	e7fd      	b.n	800f62e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f632:	4b0a      	ldr	r3, [pc, #40]	@ (800f65c <vTaskPlaceOnEventListRestricted+0x58>)
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	3318      	adds	r3, #24
 800f638:	4619      	mov	r1, r3
 800f63a:	68f8      	ldr	r0, [r7, #12]
 800f63c:	f7fe f8c1 	bl	800d7c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d002      	beq.n	800f64c <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800f646:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f64a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f64c:	6879      	ldr	r1, [r7, #4]
 800f64e:	68b8      	ldr	r0, [r7, #8]
 800f650:	f000 fb7a 	bl	800fd48 <prvAddCurrentTaskToDelayedList>
	}
 800f654:	bf00      	nop
 800f656:	3718      	adds	r7, #24
 800f658:	46bd      	mov	sp, r7
 800f65a:	bd80      	pop	{r7, pc}
 800f65c:	2000eaa0 	.word	0x2000eaa0

0800f660 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b086      	sub	sp, #24
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	68db      	ldr	r3, [r3, #12]
 800f66c:	68db      	ldr	r3, [r3, #12]
 800f66e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f670:	693b      	ldr	r3, [r7, #16]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d10d      	bne.n	800f692 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800f676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f67a:	b672      	cpsid	i
 800f67c:	f383 8811 	msr	BASEPRI, r3
 800f680:	f3bf 8f6f 	isb	sy
 800f684:	f3bf 8f4f 	dsb	sy
 800f688:	b662      	cpsie	i
 800f68a:	60fb      	str	r3, [r7, #12]
}
 800f68c:	bf00      	nop
 800f68e:	bf00      	nop
 800f690:	e7fd      	b.n	800f68e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f692:	693b      	ldr	r3, [r7, #16]
 800f694:	3318      	adds	r3, #24
 800f696:	4618      	mov	r0, r3
 800f698:	f7fe f8f0 	bl	800d87c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f69c:	4b1d      	ldr	r3, [pc, #116]	@ (800f714 <xTaskRemoveFromEventList+0xb4>)
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d11d      	bne.n	800f6e0 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f6a4:	693b      	ldr	r3, [r7, #16]
 800f6a6:	3304      	adds	r3, #4
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	f7fe f8e7 	bl	800d87c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f6ae:	693b      	ldr	r3, [r7, #16]
 800f6b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f6b2:	4b19      	ldr	r3, [pc, #100]	@ (800f718 <xTaskRemoveFromEventList+0xb8>)
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	429a      	cmp	r2, r3
 800f6b8:	d903      	bls.n	800f6c2 <xTaskRemoveFromEventList+0x62>
 800f6ba:	693b      	ldr	r3, [r7, #16]
 800f6bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6be:	4a16      	ldr	r2, [pc, #88]	@ (800f718 <xTaskRemoveFromEventList+0xb8>)
 800f6c0:	6013      	str	r3, [r2, #0]
 800f6c2:	693b      	ldr	r3, [r7, #16]
 800f6c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f6c6:	4613      	mov	r3, r2
 800f6c8:	009b      	lsls	r3, r3, #2
 800f6ca:	4413      	add	r3, r2
 800f6cc:	009b      	lsls	r3, r3, #2
 800f6ce:	4a13      	ldr	r2, [pc, #76]	@ (800f71c <xTaskRemoveFromEventList+0xbc>)
 800f6d0:	441a      	add	r2, r3
 800f6d2:	693b      	ldr	r3, [r7, #16]
 800f6d4:	3304      	adds	r3, #4
 800f6d6:	4619      	mov	r1, r3
 800f6d8:	4610      	mov	r0, r2
 800f6da:	f7fe f872 	bl	800d7c2 <vListInsertEnd>
 800f6de:	e005      	b.n	800f6ec <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f6e0:	693b      	ldr	r3, [r7, #16]
 800f6e2:	3318      	adds	r3, #24
 800f6e4:	4619      	mov	r1, r3
 800f6e6:	480e      	ldr	r0, [pc, #56]	@ (800f720 <xTaskRemoveFromEventList+0xc0>)
 800f6e8:	f7fe f86b 	bl	800d7c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f6ec:	693b      	ldr	r3, [r7, #16]
 800f6ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f6f0:	4b0c      	ldr	r3, [pc, #48]	@ (800f724 <xTaskRemoveFromEventList+0xc4>)
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6f6:	429a      	cmp	r2, r3
 800f6f8:	d905      	bls.n	800f706 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f6fa:	2301      	movs	r3, #1
 800f6fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f6fe:	4b0a      	ldr	r3, [pc, #40]	@ (800f728 <xTaskRemoveFromEventList+0xc8>)
 800f700:	2201      	movs	r2, #1
 800f702:	601a      	str	r2, [r3, #0]
 800f704:	e001      	b.n	800f70a <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800f706:	2300      	movs	r3, #0
 800f708:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f70a:	697b      	ldr	r3, [r7, #20]
}
 800f70c:	4618      	mov	r0, r3
 800f70e:	3718      	adds	r7, #24
 800f710:	46bd      	mov	sp, r7
 800f712:	bd80      	pop	{r7, pc}
 800f714:	2000ef9c 	.word	0x2000ef9c
 800f718:	2000ef7c 	.word	0x2000ef7c
 800f71c:	2000eaa4 	.word	0x2000eaa4
 800f720:	2000ef34 	.word	0x2000ef34
 800f724:	2000eaa0 	.word	0x2000eaa0
 800f728:	2000ef88 	.word	0x2000ef88

0800f72c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f72c:	b480      	push	{r7}
 800f72e:	b083      	sub	sp, #12
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f734:	4b06      	ldr	r3, [pc, #24]	@ (800f750 <vTaskInternalSetTimeOutState+0x24>)
 800f736:	681a      	ldr	r2, [r3, #0]
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f73c:	4b05      	ldr	r3, [pc, #20]	@ (800f754 <vTaskInternalSetTimeOutState+0x28>)
 800f73e:	681a      	ldr	r2, [r3, #0]
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	605a      	str	r2, [r3, #4]
}
 800f744:	bf00      	nop
 800f746:	370c      	adds	r7, #12
 800f748:	46bd      	mov	sp, r7
 800f74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74e:	4770      	bx	lr
 800f750:	2000ef8c 	.word	0x2000ef8c
 800f754:	2000ef78 	.word	0x2000ef78

0800f758 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b088      	sub	sp, #32
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
 800f760:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d10d      	bne.n	800f784 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800f768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f76c:	b672      	cpsid	i
 800f76e:	f383 8811 	msr	BASEPRI, r3
 800f772:	f3bf 8f6f 	isb	sy
 800f776:	f3bf 8f4f 	dsb	sy
 800f77a:	b662      	cpsie	i
 800f77c:	613b      	str	r3, [r7, #16]
}
 800f77e:	bf00      	nop
 800f780:	bf00      	nop
 800f782:	e7fd      	b.n	800f780 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d10d      	bne.n	800f7a6 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800f78a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f78e:	b672      	cpsid	i
 800f790:	f383 8811 	msr	BASEPRI, r3
 800f794:	f3bf 8f6f 	isb	sy
 800f798:	f3bf 8f4f 	dsb	sy
 800f79c:	b662      	cpsie	i
 800f79e:	60fb      	str	r3, [r7, #12]
}
 800f7a0:	bf00      	nop
 800f7a2:	bf00      	nop
 800f7a4:	e7fd      	b.n	800f7a2 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800f7a6:	f000 ff99 	bl	80106dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f7aa:	4b1d      	ldr	r3, [pc, #116]	@ (800f820 <xTaskCheckForTimeOut+0xc8>)
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	685b      	ldr	r3, [r3, #4]
 800f7b4:	69ba      	ldr	r2, [r7, #24]
 800f7b6:	1ad3      	subs	r3, r2, r3
 800f7b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f7ba:	683b      	ldr	r3, [r7, #0]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f7c2:	d102      	bne.n	800f7ca <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	61fb      	str	r3, [r7, #28]
 800f7c8:	e023      	b.n	800f812 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	681a      	ldr	r2, [r3, #0]
 800f7ce:	4b15      	ldr	r3, [pc, #84]	@ (800f824 <xTaskCheckForTimeOut+0xcc>)
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	429a      	cmp	r2, r3
 800f7d4:	d007      	beq.n	800f7e6 <xTaskCheckForTimeOut+0x8e>
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	685b      	ldr	r3, [r3, #4]
 800f7da:	69ba      	ldr	r2, [r7, #24]
 800f7dc:	429a      	cmp	r2, r3
 800f7de:	d302      	bcc.n	800f7e6 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f7e0:	2301      	movs	r3, #1
 800f7e2:	61fb      	str	r3, [r7, #28]
 800f7e4:	e015      	b.n	800f812 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f7e6:	683b      	ldr	r3, [r7, #0]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	697a      	ldr	r2, [r7, #20]
 800f7ec:	429a      	cmp	r2, r3
 800f7ee:	d20b      	bcs.n	800f808 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f7f0:	683b      	ldr	r3, [r7, #0]
 800f7f2:	681a      	ldr	r2, [r3, #0]
 800f7f4:	697b      	ldr	r3, [r7, #20]
 800f7f6:	1ad2      	subs	r2, r2, r3
 800f7f8:	683b      	ldr	r3, [r7, #0]
 800f7fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f7fc:	6878      	ldr	r0, [r7, #4]
 800f7fe:	f7ff ff95 	bl	800f72c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f802:	2300      	movs	r3, #0
 800f804:	61fb      	str	r3, [r7, #28]
 800f806:	e004      	b.n	800f812 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800f808:	683b      	ldr	r3, [r7, #0]
 800f80a:	2200      	movs	r2, #0
 800f80c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f80e:	2301      	movs	r3, #1
 800f810:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f812:	f000 ff99 	bl	8010748 <vPortExitCritical>

	return xReturn;
 800f816:	69fb      	ldr	r3, [r7, #28]
}
 800f818:	4618      	mov	r0, r3
 800f81a:	3720      	adds	r7, #32
 800f81c:	46bd      	mov	sp, r7
 800f81e:	bd80      	pop	{r7, pc}
 800f820:	2000ef78 	.word	0x2000ef78
 800f824:	2000ef8c 	.word	0x2000ef8c

0800f828 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f828:	b480      	push	{r7}
 800f82a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f82c:	4b03      	ldr	r3, [pc, #12]	@ (800f83c <vTaskMissedYield+0x14>)
 800f82e:	2201      	movs	r2, #1
 800f830:	601a      	str	r2, [r3, #0]
}
 800f832:	bf00      	nop
 800f834:	46bd      	mov	sp, r7
 800f836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83a:	4770      	bx	lr
 800f83c:	2000ef88 	.word	0x2000ef88

0800f840 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f840:	b580      	push	{r7, lr}
 800f842:	b082      	sub	sp, #8
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f848:	f000 f852 	bl	800f8f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f84c:	4b06      	ldr	r3, [pc, #24]	@ (800f868 <prvIdleTask+0x28>)
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	2b01      	cmp	r3, #1
 800f852:	d9f9      	bls.n	800f848 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f854:	4b05      	ldr	r3, [pc, #20]	@ (800f86c <prvIdleTask+0x2c>)
 800f856:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f85a:	601a      	str	r2, [r3, #0]
 800f85c:	f3bf 8f4f 	dsb	sy
 800f860:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f864:	e7f0      	b.n	800f848 <prvIdleTask+0x8>
 800f866:	bf00      	nop
 800f868:	2000eaa4 	.word	0x2000eaa4
 800f86c:	e000ed04 	.word	0xe000ed04

0800f870 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b082      	sub	sp, #8
 800f874:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f876:	2300      	movs	r3, #0
 800f878:	607b      	str	r3, [r7, #4]
 800f87a:	e00c      	b.n	800f896 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f87c:	687a      	ldr	r2, [r7, #4]
 800f87e:	4613      	mov	r3, r2
 800f880:	009b      	lsls	r3, r3, #2
 800f882:	4413      	add	r3, r2
 800f884:	009b      	lsls	r3, r3, #2
 800f886:	4a12      	ldr	r2, [pc, #72]	@ (800f8d0 <prvInitialiseTaskLists+0x60>)
 800f888:	4413      	add	r3, r2
 800f88a:	4618      	mov	r0, r3
 800f88c:	f7fd ff6c 	bl	800d768 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	3301      	adds	r3, #1
 800f894:	607b      	str	r3, [r7, #4]
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	2b37      	cmp	r3, #55	@ 0x37
 800f89a:	d9ef      	bls.n	800f87c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f89c:	480d      	ldr	r0, [pc, #52]	@ (800f8d4 <prvInitialiseTaskLists+0x64>)
 800f89e:	f7fd ff63 	bl	800d768 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f8a2:	480d      	ldr	r0, [pc, #52]	@ (800f8d8 <prvInitialiseTaskLists+0x68>)
 800f8a4:	f7fd ff60 	bl	800d768 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f8a8:	480c      	ldr	r0, [pc, #48]	@ (800f8dc <prvInitialiseTaskLists+0x6c>)
 800f8aa:	f7fd ff5d 	bl	800d768 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f8ae:	480c      	ldr	r0, [pc, #48]	@ (800f8e0 <prvInitialiseTaskLists+0x70>)
 800f8b0:	f7fd ff5a 	bl	800d768 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f8b4:	480b      	ldr	r0, [pc, #44]	@ (800f8e4 <prvInitialiseTaskLists+0x74>)
 800f8b6:	f7fd ff57 	bl	800d768 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f8ba:	4b0b      	ldr	r3, [pc, #44]	@ (800f8e8 <prvInitialiseTaskLists+0x78>)
 800f8bc:	4a05      	ldr	r2, [pc, #20]	@ (800f8d4 <prvInitialiseTaskLists+0x64>)
 800f8be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f8c0:	4b0a      	ldr	r3, [pc, #40]	@ (800f8ec <prvInitialiseTaskLists+0x7c>)
 800f8c2:	4a05      	ldr	r2, [pc, #20]	@ (800f8d8 <prvInitialiseTaskLists+0x68>)
 800f8c4:	601a      	str	r2, [r3, #0]
}
 800f8c6:	bf00      	nop
 800f8c8:	3708      	adds	r7, #8
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	bd80      	pop	{r7, pc}
 800f8ce:	bf00      	nop
 800f8d0:	2000eaa4 	.word	0x2000eaa4
 800f8d4:	2000ef04 	.word	0x2000ef04
 800f8d8:	2000ef18 	.word	0x2000ef18
 800f8dc:	2000ef34 	.word	0x2000ef34
 800f8e0:	2000ef48 	.word	0x2000ef48
 800f8e4:	2000ef60 	.word	0x2000ef60
 800f8e8:	2000ef2c 	.word	0x2000ef2c
 800f8ec:	2000ef30 	.word	0x2000ef30

0800f8f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b082      	sub	sp, #8
 800f8f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f8f6:	e019      	b.n	800f92c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f8f8:	f000 fef0 	bl	80106dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f8fc:	4b10      	ldr	r3, [pc, #64]	@ (800f940 <prvCheckTasksWaitingTermination+0x50>)
 800f8fe:	68db      	ldr	r3, [r3, #12]
 800f900:	68db      	ldr	r3, [r3, #12]
 800f902:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	3304      	adds	r3, #4
 800f908:	4618      	mov	r0, r3
 800f90a:	f7fd ffb7 	bl	800d87c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f90e:	4b0d      	ldr	r3, [pc, #52]	@ (800f944 <prvCheckTasksWaitingTermination+0x54>)
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	3b01      	subs	r3, #1
 800f914:	4a0b      	ldr	r2, [pc, #44]	@ (800f944 <prvCheckTasksWaitingTermination+0x54>)
 800f916:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f918:	4b0b      	ldr	r3, [pc, #44]	@ (800f948 <prvCheckTasksWaitingTermination+0x58>)
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	3b01      	subs	r3, #1
 800f91e:	4a0a      	ldr	r2, [pc, #40]	@ (800f948 <prvCheckTasksWaitingTermination+0x58>)
 800f920:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f922:	f000 ff11 	bl	8010748 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f926:	6878      	ldr	r0, [r7, #4]
 800f928:	f000 f810 	bl	800f94c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f92c:	4b06      	ldr	r3, [pc, #24]	@ (800f948 <prvCheckTasksWaitingTermination+0x58>)
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d1e1      	bne.n	800f8f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f934:	bf00      	nop
 800f936:	bf00      	nop
 800f938:	3708      	adds	r7, #8
 800f93a:	46bd      	mov	sp, r7
 800f93c:	bd80      	pop	{r7, pc}
 800f93e:	bf00      	nop
 800f940:	2000ef48 	.word	0x2000ef48
 800f944:	2000ef74 	.word	0x2000ef74
 800f948:	2000ef5c 	.word	0x2000ef5c

0800f94c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b084      	sub	sp, #16
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	3354      	adds	r3, #84	@ 0x54
 800f958:	4618      	mov	r0, r3
 800f95a:	f011 f895 	bl	8020a88 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f964:	2b00      	cmp	r3, #0
 800f966:	d108      	bne.n	800f97a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f96c:	4618      	mov	r0, r3
 800f96e:	f001 f8b5 	bl	8010adc <vPortFree>
				vPortFree( pxTCB );
 800f972:	6878      	ldr	r0, [r7, #4]
 800f974:	f001 f8b2 	bl	8010adc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f978:	e01b      	b.n	800f9b2 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f980:	2b01      	cmp	r3, #1
 800f982:	d103      	bne.n	800f98c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f984:	6878      	ldr	r0, [r7, #4]
 800f986:	f001 f8a9 	bl	8010adc <vPortFree>
	}
 800f98a:	e012      	b.n	800f9b2 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f992:	2b02      	cmp	r3, #2
 800f994:	d00d      	beq.n	800f9b2 <prvDeleteTCB+0x66>
	__asm volatile
 800f996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f99a:	b672      	cpsid	i
 800f99c:	f383 8811 	msr	BASEPRI, r3
 800f9a0:	f3bf 8f6f 	isb	sy
 800f9a4:	f3bf 8f4f 	dsb	sy
 800f9a8:	b662      	cpsie	i
 800f9aa:	60fb      	str	r3, [r7, #12]
}
 800f9ac:	bf00      	nop
 800f9ae:	bf00      	nop
 800f9b0:	e7fd      	b.n	800f9ae <prvDeleteTCB+0x62>
	}
 800f9b2:	bf00      	nop
 800f9b4:	3710      	adds	r7, #16
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bd80      	pop	{r7, pc}
	...

0800f9bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f9bc:	b480      	push	{r7}
 800f9be:	b083      	sub	sp, #12
 800f9c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f9c2:	4b0c      	ldr	r3, [pc, #48]	@ (800f9f4 <prvResetNextTaskUnblockTime+0x38>)
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d104      	bne.n	800f9d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f9cc:	4b0a      	ldr	r3, [pc, #40]	@ (800f9f8 <prvResetNextTaskUnblockTime+0x3c>)
 800f9ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f9d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f9d4:	e008      	b.n	800f9e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9d6:	4b07      	ldr	r3, [pc, #28]	@ (800f9f4 <prvResetNextTaskUnblockTime+0x38>)
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	68db      	ldr	r3, [r3, #12]
 800f9dc:	68db      	ldr	r3, [r3, #12]
 800f9de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	685b      	ldr	r3, [r3, #4]
 800f9e4:	4a04      	ldr	r2, [pc, #16]	@ (800f9f8 <prvResetNextTaskUnblockTime+0x3c>)
 800f9e6:	6013      	str	r3, [r2, #0]
}
 800f9e8:	bf00      	nop
 800f9ea:	370c      	adds	r7, #12
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f2:	4770      	bx	lr
 800f9f4:	2000ef2c 	.word	0x2000ef2c
 800f9f8:	2000ef94 	.word	0x2000ef94

0800f9fc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800f9fc:	b480      	push	{r7}
 800f9fe:	b083      	sub	sp, #12
 800fa00:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800fa02:	4b05      	ldr	r3, [pc, #20]	@ (800fa18 <xTaskGetCurrentTaskHandle+0x1c>)
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	607b      	str	r3, [r7, #4]

		return xReturn;
 800fa08:	687b      	ldr	r3, [r7, #4]
	}
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	370c      	adds	r7, #12
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa14:	4770      	bx	lr
 800fa16:	bf00      	nop
 800fa18:	2000eaa0 	.word	0x2000eaa0

0800fa1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fa1c:	b480      	push	{r7}
 800fa1e:	b083      	sub	sp, #12
 800fa20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fa22:	4b0b      	ldr	r3, [pc, #44]	@ (800fa50 <xTaskGetSchedulerState+0x34>)
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d102      	bne.n	800fa30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fa2a:	2301      	movs	r3, #1
 800fa2c:	607b      	str	r3, [r7, #4]
 800fa2e:	e008      	b.n	800fa42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fa30:	4b08      	ldr	r3, [pc, #32]	@ (800fa54 <xTaskGetSchedulerState+0x38>)
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d102      	bne.n	800fa3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fa38:	2302      	movs	r3, #2
 800fa3a:	607b      	str	r3, [r7, #4]
 800fa3c:	e001      	b.n	800fa42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fa3e:	2300      	movs	r3, #0
 800fa40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fa42:	687b      	ldr	r3, [r7, #4]
	}
 800fa44:	4618      	mov	r0, r3
 800fa46:	370c      	adds	r7, #12
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4e:	4770      	bx	lr
 800fa50:	2000ef80 	.word	0x2000ef80
 800fa54:	2000ef9c 	.word	0x2000ef9c

0800fa58 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b084      	sub	sp, #16
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800fa64:	2300      	movs	r3, #0
 800fa66:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d051      	beq.n	800fb12 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800fa6e:	68bb      	ldr	r3, [r7, #8]
 800fa70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa72:	4b2a      	ldr	r3, [pc, #168]	@ (800fb1c <xTaskPriorityInherit+0xc4>)
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa78:	429a      	cmp	r2, r3
 800fa7a:	d241      	bcs.n	800fb00 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fa7c:	68bb      	ldr	r3, [r7, #8]
 800fa7e:	699b      	ldr	r3, [r3, #24]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	db06      	blt.n	800fa92 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa84:	4b25      	ldr	r3, [pc, #148]	@ (800fb1c <xTaskPriorityInherit+0xc4>)
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa8a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fa8e:	68bb      	ldr	r3, [r7, #8]
 800fa90:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800fa92:	68bb      	ldr	r3, [r7, #8]
 800fa94:	6959      	ldr	r1, [r3, #20]
 800fa96:	68bb      	ldr	r3, [r7, #8]
 800fa98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa9a:	4613      	mov	r3, r2
 800fa9c:	009b      	lsls	r3, r3, #2
 800fa9e:	4413      	add	r3, r2
 800faa0:	009b      	lsls	r3, r3, #2
 800faa2:	4a1f      	ldr	r2, [pc, #124]	@ (800fb20 <xTaskPriorityInherit+0xc8>)
 800faa4:	4413      	add	r3, r2
 800faa6:	4299      	cmp	r1, r3
 800faa8:	d122      	bne.n	800faf0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800faaa:	68bb      	ldr	r3, [r7, #8]
 800faac:	3304      	adds	r3, #4
 800faae:	4618      	mov	r0, r3
 800fab0:	f7fd fee4 	bl	800d87c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fab4:	4b19      	ldr	r3, [pc, #100]	@ (800fb1c <xTaskPriorityInherit+0xc4>)
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fabe:	68bb      	ldr	r3, [r7, #8]
 800fac0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fac2:	4b18      	ldr	r3, [pc, #96]	@ (800fb24 <xTaskPriorityInherit+0xcc>)
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	429a      	cmp	r2, r3
 800fac8:	d903      	bls.n	800fad2 <xTaskPriorityInherit+0x7a>
 800faca:	68bb      	ldr	r3, [r7, #8]
 800facc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800face:	4a15      	ldr	r2, [pc, #84]	@ (800fb24 <xTaskPriorityInherit+0xcc>)
 800fad0:	6013      	str	r3, [r2, #0]
 800fad2:	68bb      	ldr	r3, [r7, #8]
 800fad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fad6:	4613      	mov	r3, r2
 800fad8:	009b      	lsls	r3, r3, #2
 800fada:	4413      	add	r3, r2
 800fadc:	009b      	lsls	r3, r3, #2
 800fade:	4a10      	ldr	r2, [pc, #64]	@ (800fb20 <xTaskPriorityInherit+0xc8>)
 800fae0:	441a      	add	r2, r3
 800fae2:	68bb      	ldr	r3, [r7, #8]
 800fae4:	3304      	adds	r3, #4
 800fae6:	4619      	mov	r1, r3
 800fae8:	4610      	mov	r0, r2
 800faea:	f7fd fe6a 	bl	800d7c2 <vListInsertEnd>
 800faee:	e004      	b.n	800fafa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800faf0:	4b0a      	ldr	r3, [pc, #40]	@ (800fb1c <xTaskPriorityInherit+0xc4>)
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800faf6:	68bb      	ldr	r3, [r7, #8]
 800faf8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800fafa:	2301      	movs	r3, #1
 800fafc:	60fb      	str	r3, [r7, #12]
 800fafe:	e008      	b.n	800fb12 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800fb00:	68bb      	ldr	r3, [r7, #8]
 800fb02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fb04:	4b05      	ldr	r3, [pc, #20]	@ (800fb1c <xTaskPriorityInherit+0xc4>)
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb0a:	429a      	cmp	r2, r3
 800fb0c:	d201      	bcs.n	800fb12 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800fb0e:	2301      	movs	r3, #1
 800fb10:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fb12:	68fb      	ldr	r3, [r7, #12]
	}
 800fb14:	4618      	mov	r0, r3
 800fb16:	3710      	adds	r7, #16
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	bd80      	pop	{r7, pc}
 800fb1c:	2000eaa0 	.word	0x2000eaa0
 800fb20:	2000eaa4 	.word	0x2000eaa4
 800fb24:	2000ef7c 	.word	0x2000ef7c

0800fb28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b086      	sub	sp, #24
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fb34:	2300      	movs	r3, #0
 800fb36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d05c      	beq.n	800fbf8 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fb3e:	4b31      	ldr	r3, [pc, #196]	@ (800fc04 <xTaskPriorityDisinherit+0xdc>)
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	693a      	ldr	r2, [r7, #16]
 800fb44:	429a      	cmp	r2, r3
 800fb46:	d00d      	beq.n	800fb64 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800fb48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb4c:	b672      	cpsid	i
 800fb4e:	f383 8811 	msr	BASEPRI, r3
 800fb52:	f3bf 8f6f 	isb	sy
 800fb56:	f3bf 8f4f 	dsb	sy
 800fb5a:	b662      	cpsie	i
 800fb5c:	60fb      	str	r3, [r7, #12]
}
 800fb5e:	bf00      	nop
 800fb60:	bf00      	nop
 800fb62:	e7fd      	b.n	800fb60 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800fb64:	693b      	ldr	r3, [r7, #16]
 800fb66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d10d      	bne.n	800fb88 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800fb6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb70:	b672      	cpsid	i
 800fb72:	f383 8811 	msr	BASEPRI, r3
 800fb76:	f3bf 8f6f 	isb	sy
 800fb7a:	f3bf 8f4f 	dsb	sy
 800fb7e:	b662      	cpsie	i
 800fb80:	60bb      	str	r3, [r7, #8]
}
 800fb82:	bf00      	nop
 800fb84:	bf00      	nop
 800fb86:	e7fd      	b.n	800fb84 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800fb88:	693b      	ldr	r3, [r7, #16]
 800fb8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fb8c:	1e5a      	subs	r2, r3, #1
 800fb8e:	693b      	ldr	r3, [r7, #16]
 800fb90:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fb92:	693b      	ldr	r3, [r7, #16]
 800fb94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb96:	693b      	ldr	r3, [r7, #16]
 800fb98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fb9a:	429a      	cmp	r2, r3
 800fb9c:	d02c      	beq.n	800fbf8 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fb9e:	693b      	ldr	r3, [r7, #16]
 800fba0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d128      	bne.n	800fbf8 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fba6:	693b      	ldr	r3, [r7, #16]
 800fba8:	3304      	adds	r3, #4
 800fbaa:	4618      	mov	r0, r3
 800fbac:	f7fd fe66 	bl	800d87c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fbb0:	693b      	ldr	r3, [r7, #16]
 800fbb2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fbb4:	693b      	ldr	r3, [r7, #16]
 800fbb6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fbb8:	693b      	ldr	r3, [r7, #16]
 800fbba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbbc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fbc0:	693b      	ldr	r3, [r7, #16]
 800fbc2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fbc4:	693b      	ldr	r3, [r7, #16]
 800fbc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fbc8:	4b0f      	ldr	r3, [pc, #60]	@ (800fc08 <xTaskPriorityDisinherit+0xe0>)
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	429a      	cmp	r2, r3
 800fbce:	d903      	bls.n	800fbd8 <xTaskPriorityDisinherit+0xb0>
 800fbd0:	693b      	ldr	r3, [r7, #16]
 800fbd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbd4:	4a0c      	ldr	r2, [pc, #48]	@ (800fc08 <xTaskPriorityDisinherit+0xe0>)
 800fbd6:	6013      	str	r3, [r2, #0]
 800fbd8:	693b      	ldr	r3, [r7, #16]
 800fbda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fbdc:	4613      	mov	r3, r2
 800fbde:	009b      	lsls	r3, r3, #2
 800fbe0:	4413      	add	r3, r2
 800fbe2:	009b      	lsls	r3, r3, #2
 800fbe4:	4a09      	ldr	r2, [pc, #36]	@ (800fc0c <xTaskPriorityDisinherit+0xe4>)
 800fbe6:	441a      	add	r2, r3
 800fbe8:	693b      	ldr	r3, [r7, #16]
 800fbea:	3304      	adds	r3, #4
 800fbec:	4619      	mov	r1, r3
 800fbee:	4610      	mov	r0, r2
 800fbf0:	f7fd fde7 	bl	800d7c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fbf4:	2301      	movs	r3, #1
 800fbf6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fbf8:	697b      	ldr	r3, [r7, #20]
	}
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	3718      	adds	r7, #24
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	bd80      	pop	{r7, pc}
 800fc02:	bf00      	nop
 800fc04:	2000eaa0 	.word	0x2000eaa0
 800fc08:	2000ef7c 	.word	0x2000ef7c
 800fc0c:	2000eaa4 	.word	0x2000eaa4

0800fc10 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b088      	sub	sp, #32
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
 800fc18:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800fc1e:	2301      	movs	r3, #1
 800fc20:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d070      	beq.n	800fd0a <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800fc28:	69bb      	ldr	r3, [r7, #24]
 800fc2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d10d      	bne.n	800fc4c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800fc30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc34:	b672      	cpsid	i
 800fc36:	f383 8811 	msr	BASEPRI, r3
 800fc3a:	f3bf 8f6f 	isb	sy
 800fc3e:	f3bf 8f4f 	dsb	sy
 800fc42:	b662      	cpsie	i
 800fc44:	60fb      	str	r3, [r7, #12]
}
 800fc46:	bf00      	nop
 800fc48:	bf00      	nop
 800fc4a:	e7fd      	b.n	800fc48 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800fc4c:	69bb      	ldr	r3, [r7, #24]
 800fc4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fc50:	683a      	ldr	r2, [r7, #0]
 800fc52:	429a      	cmp	r2, r3
 800fc54:	d902      	bls.n	800fc5c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800fc56:	683b      	ldr	r3, [r7, #0]
 800fc58:	61fb      	str	r3, [r7, #28]
 800fc5a:	e002      	b.n	800fc62 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800fc5c:	69bb      	ldr	r3, [r7, #24]
 800fc5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fc60:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800fc62:	69bb      	ldr	r3, [r7, #24]
 800fc64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc66:	69fa      	ldr	r2, [r7, #28]
 800fc68:	429a      	cmp	r2, r3
 800fc6a:	d04e      	beq.n	800fd0a <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800fc6c:	69bb      	ldr	r3, [r7, #24]
 800fc6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fc70:	697a      	ldr	r2, [r7, #20]
 800fc72:	429a      	cmp	r2, r3
 800fc74:	d149      	bne.n	800fd0a <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800fc76:	4b27      	ldr	r3, [pc, #156]	@ (800fd14 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	69ba      	ldr	r2, [r7, #24]
 800fc7c:	429a      	cmp	r2, r3
 800fc7e:	d10d      	bne.n	800fc9c <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 800fc80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc84:	b672      	cpsid	i
 800fc86:	f383 8811 	msr	BASEPRI, r3
 800fc8a:	f3bf 8f6f 	isb	sy
 800fc8e:	f3bf 8f4f 	dsb	sy
 800fc92:	b662      	cpsie	i
 800fc94:	60bb      	str	r3, [r7, #8]
}
 800fc96:	bf00      	nop
 800fc98:	bf00      	nop
 800fc9a:	e7fd      	b.n	800fc98 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800fc9c:	69bb      	ldr	r3, [r7, #24]
 800fc9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fca0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800fca2:	69bb      	ldr	r3, [r7, #24]
 800fca4:	69fa      	ldr	r2, [r7, #28]
 800fca6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fca8:	69bb      	ldr	r3, [r7, #24]
 800fcaa:	699b      	ldr	r3, [r3, #24]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	db04      	blt.n	800fcba <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fcb0:	69fb      	ldr	r3, [r7, #28]
 800fcb2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fcb6:	69bb      	ldr	r3, [r7, #24]
 800fcb8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fcba:	69bb      	ldr	r3, [r7, #24]
 800fcbc:	6959      	ldr	r1, [r3, #20]
 800fcbe:	693a      	ldr	r2, [r7, #16]
 800fcc0:	4613      	mov	r3, r2
 800fcc2:	009b      	lsls	r3, r3, #2
 800fcc4:	4413      	add	r3, r2
 800fcc6:	009b      	lsls	r3, r3, #2
 800fcc8:	4a13      	ldr	r2, [pc, #76]	@ (800fd18 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800fcca:	4413      	add	r3, r2
 800fccc:	4299      	cmp	r1, r3
 800fcce:	d11c      	bne.n	800fd0a <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fcd0:	69bb      	ldr	r3, [r7, #24]
 800fcd2:	3304      	adds	r3, #4
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	f7fd fdd1 	bl	800d87c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800fcda:	69bb      	ldr	r3, [r7, #24]
 800fcdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fcde:	4b0f      	ldr	r3, [pc, #60]	@ (800fd1c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	429a      	cmp	r2, r3
 800fce4:	d903      	bls.n	800fcee <vTaskPriorityDisinheritAfterTimeout+0xde>
 800fce6:	69bb      	ldr	r3, [r7, #24]
 800fce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcea:	4a0c      	ldr	r2, [pc, #48]	@ (800fd1c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800fcec:	6013      	str	r3, [r2, #0]
 800fcee:	69bb      	ldr	r3, [r7, #24]
 800fcf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fcf2:	4613      	mov	r3, r2
 800fcf4:	009b      	lsls	r3, r3, #2
 800fcf6:	4413      	add	r3, r2
 800fcf8:	009b      	lsls	r3, r3, #2
 800fcfa:	4a07      	ldr	r2, [pc, #28]	@ (800fd18 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800fcfc:	441a      	add	r2, r3
 800fcfe:	69bb      	ldr	r3, [r7, #24]
 800fd00:	3304      	adds	r3, #4
 800fd02:	4619      	mov	r1, r3
 800fd04:	4610      	mov	r0, r2
 800fd06:	f7fd fd5c 	bl	800d7c2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fd0a:	bf00      	nop
 800fd0c:	3720      	adds	r7, #32
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	bd80      	pop	{r7, pc}
 800fd12:	bf00      	nop
 800fd14:	2000eaa0 	.word	0x2000eaa0
 800fd18:	2000eaa4 	.word	0x2000eaa4
 800fd1c:	2000ef7c 	.word	0x2000ef7c

0800fd20 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800fd20:	b480      	push	{r7}
 800fd22:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800fd24:	4b07      	ldr	r3, [pc, #28]	@ (800fd44 <pvTaskIncrementMutexHeldCount+0x24>)
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d004      	beq.n	800fd36 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800fd2c:	4b05      	ldr	r3, [pc, #20]	@ (800fd44 <pvTaskIncrementMutexHeldCount+0x24>)
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd32:	3201      	adds	r2, #1
 800fd34:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800fd36:	4b03      	ldr	r3, [pc, #12]	@ (800fd44 <pvTaskIncrementMutexHeldCount+0x24>)
 800fd38:	681b      	ldr	r3, [r3, #0]
	}
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd42:	4770      	bx	lr
 800fd44:	2000eaa0 	.word	0x2000eaa0

0800fd48 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b084      	sub	sp, #16
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
 800fd50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fd52:	4b21      	ldr	r3, [pc, #132]	@ (800fdd8 <prvAddCurrentTaskToDelayedList+0x90>)
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fd58:	4b20      	ldr	r3, [pc, #128]	@ (800fddc <prvAddCurrentTaskToDelayedList+0x94>)
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	3304      	adds	r3, #4
 800fd5e:	4618      	mov	r0, r3
 800fd60:	f7fd fd8c 	bl	800d87c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fd6a:	d10a      	bne.n	800fd82 <prvAddCurrentTaskToDelayedList+0x3a>
 800fd6c:	683b      	ldr	r3, [r7, #0]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d007      	beq.n	800fd82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fd72:	4b1a      	ldr	r3, [pc, #104]	@ (800fddc <prvAddCurrentTaskToDelayedList+0x94>)
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	3304      	adds	r3, #4
 800fd78:	4619      	mov	r1, r3
 800fd7a:	4819      	ldr	r0, [pc, #100]	@ (800fde0 <prvAddCurrentTaskToDelayedList+0x98>)
 800fd7c:	f7fd fd21 	bl	800d7c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fd80:	e026      	b.n	800fdd0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fd82:	68fa      	ldr	r2, [r7, #12]
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	4413      	add	r3, r2
 800fd88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fd8a:	4b14      	ldr	r3, [pc, #80]	@ (800fddc <prvAddCurrentTaskToDelayedList+0x94>)
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	68ba      	ldr	r2, [r7, #8]
 800fd90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fd92:	68ba      	ldr	r2, [r7, #8]
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	429a      	cmp	r2, r3
 800fd98:	d209      	bcs.n	800fdae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fd9a:	4b12      	ldr	r3, [pc, #72]	@ (800fde4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800fd9c:	681a      	ldr	r2, [r3, #0]
 800fd9e:	4b0f      	ldr	r3, [pc, #60]	@ (800fddc <prvAddCurrentTaskToDelayedList+0x94>)
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	3304      	adds	r3, #4
 800fda4:	4619      	mov	r1, r3
 800fda6:	4610      	mov	r0, r2
 800fda8:	f7fd fd2f 	bl	800d80a <vListInsert>
}
 800fdac:	e010      	b.n	800fdd0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fdae:	4b0e      	ldr	r3, [pc, #56]	@ (800fde8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800fdb0:	681a      	ldr	r2, [r3, #0]
 800fdb2:	4b0a      	ldr	r3, [pc, #40]	@ (800fddc <prvAddCurrentTaskToDelayedList+0x94>)
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	3304      	adds	r3, #4
 800fdb8:	4619      	mov	r1, r3
 800fdba:	4610      	mov	r0, r2
 800fdbc:	f7fd fd25 	bl	800d80a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fdc0:	4b0a      	ldr	r3, [pc, #40]	@ (800fdec <prvAddCurrentTaskToDelayedList+0xa4>)
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	68ba      	ldr	r2, [r7, #8]
 800fdc6:	429a      	cmp	r2, r3
 800fdc8:	d202      	bcs.n	800fdd0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800fdca:	4a08      	ldr	r2, [pc, #32]	@ (800fdec <prvAddCurrentTaskToDelayedList+0xa4>)
 800fdcc:	68bb      	ldr	r3, [r7, #8]
 800fdce:	6013      	str	r3, [r2, #0]
}
 800fdd0:	bf00      	nop
 800fdd2:	3710      	adds	r7, #16
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bd80      	pop	{r7, pc}
 800fdd8:	2000ef78 	.word	0x2000ef78
 800fddc:	2000eaa0 	.word	0x2000eaa0
 800fde0:	2000ef60 	.word	0x2000ef60
 800fde4:	2000ef30 	.word	0x2000ef30
 800fde8:	2000ef2c 	.word	0x2000ef2c
 800fdec:	2000ef94 	.word	0x2000ef94

0800fdf0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b08a      	sub	sp, #40	@ 0x28
 800fdf4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800fdfa:	f000 fb21 	bl	8010440 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800fdfe:	4b1e      	ldr	r3, [pc, #120]	@ (800fe78 <xTimerCreateTimerTask+0x88>)
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d021      	beq.n	800fe4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fe06:	2300      	movs	r3, #0
 800fe08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fe0e:	1d3a      	adds	r2, r7, #4
 800fe10:	f107 0108 	add.w	r1, r7, #8
 800fe14:	f107 030c 	add.w	r3, r7, #12
 800fe18:	4618      	mov	r0, r3
 800fe1a:	f7fd fc8b 	bl	800d734 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800fe1e:	6879      	ldr	r1, [r7, #4]
 800fe20:	68bb      	ldr	r3, [r7, #8]
 800fe22:	68fa      	ldr	r2, [r7, #12]
 800fe24:	9202      	str	r2, [sp, #8]
 800fe26:	9301      	str	r3, [sp, #4]
 800fe28:	2302      	movs	r3, #2
 800fe2a:	9300      	str	r3, [sp, #0]
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	460a      	mov	r2, r1
 800fe30:	4912      	ldr	r1, [pc, #72]	@ (800fe7c <xTimerCreateTimerTask+0x8c>)
 800fe32:	4813      	ldr	r0, [pc, #76]	@ (800fe80 <xTimerCreateTimerTask+0x90>)
 800fe34:	f7fe febe 	bl	800ebb4 <xTaskCreateStatic>
 800fe38:	4603      	mov	r3, r0
 800fe3a:	4a12      	ldr	r2, [pc, #72]	@ (800fe84 <xTimerCreateTimerTask+0x94>)
 800fe3c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800fe3e:	4b11      	ldr	r3, [pc, #68]	@ (800fe84 <xTimerCreateTimerTask+0x94>)
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d001      	beq.n	800fe4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800fe46:	2301      	movs	r3, #1
 800fe48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800fe4a:	697b      	ldr	r3, [r7, #20]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d10d      	bne.n	800fe6c <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800fe50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe54:	b672      	cpsid	i
 800fe56:	f383 8811 	msr	BASEPRI, r3
 800fe5a:	f3bf 8f6f 	isb	sy
 800fe5e:	f3bf 8f4f 	dsb	sy
 800fe62:	b662      	cpsie	i
 800fe64:	613b      	str	r3, [r7, #16]
}
 800fe66:	bf00      	nop
 800fe68:	bf00      	nop
 800fe6a:	e7fd      	b.n	800fe68 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800fe6c:	697b      	ldr	r3, [r7, #20]
}
 800fe6e:	4618      	mov	r0, r3
 800fe70:	3718      	adds	r7, #24
 800fe72:	46bd      	mov	sp, r7
 800fe74:	bd80      	pop	{r7, pc}
 800fe76:	bf00      	nop
 800fe78:	2000efd0 	.word	0x2000efd0
 800fe7c:	08021968 	.word	0x08021968
 800fe80:	0800ffc9 	.word	0x0800ffc9
 800fe84:	2000efd4 	.word	0x2000efd4

0800fe88 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b08a      	sub	sp, #40	@ 0x28
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	60f8      	str	r0, [r7, #12]
 800fe90:	60b9      	str	r1, [r7, #8]
 800fe92:	607a      	str	r2, [r7, #4]
 800fe94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800fe96:	2300      	movs	r3, #0
 800fe98:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d10d      	bne.n	800febc <xTimerGenericCommand+0x34>
	__asm volatile
 800fea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fea4:	b672      	cpsid	i
 800fea6:	f383 8811 	msr	BASEPRI, r3
 800feaa:	f3bf 8f6f 	isb	sy
 800feae:	f3bf 8f4f 	dsb	sy
 800feb2:	b662      	cpsie	i
 800feb4:	623b      	str	r3, [r7, #32]
}
 800feb6:	bf00      	nop
 800feb8:	bf00      	nop
 800feba:	e7fd      	b.n	800feb8 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800febc:	4b19      	ldr	r3, [pc, #100]	@ (800ff24 <xTimerGenericCommand+0x9c>)
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d02a      	beq.n	800ff1a <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800fec4:	68bb      	ldr	r3, [r7, #8]
 800fec6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fed0:	68bb      	ldr	r3, [r7, #8]
 800fed2:	2b05      	cmp	r3, #5
 800fed4:	dc18      	bgt.n	800ff08 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fed6:	f7ff fda1 	bl	800fa1c <xTaskGetSchedulerState>
 800feda:	4603      	mov	r3, r0
 800fedc:	2b02      	cmp	r3, #2
 800fede:	d109      	bne.n	800fef4 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fee0:	4b10      	ldr	r3, [pc, #64]	@ (800ff24 <xTimerGenericCommand+0x9c>)
 800fee2:	6818      	ldr	r0, [r3, #0]
 800fee4:	f107 0110 	add.w	r1, r7, #16
 800fee8:	2300      	movs	r3, #0
 800feea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800feec:	f7fd ff7c 	bl	800dde8 <xQueueGenericSend>
 800fef0:	6278      	str	r0, [r7, #36]	@ 0x24
 800fef2:	e012      	b.n	800ff1a <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fef4:	4b0b      	ldr	r3, [pc, #44]	@ (800ff24 <xTimerGenericCommand+0x9c>)
 800fef6:	6818      	ldr	r0, [r3, #0]
 800fef8:	f107 0110 	add.w	r1, r7, #16
 800fefc:	2300      	movs	r3, #0
 800fefe:	2200      	movs	r2, #0
 800ff00:	f7fd ff72 	bl	800dde8 <xQueueGenericSend>
 800ff04:	6278      	str	r0, [r7, #36]	@ 0x24
 800ff06:	e008      	b.n	800ff1a <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ff08:	4b06      	ldr	r3, [pc, #24]	@ (800ff24 <xTimerGenericCommand+0x9c>)
 800ff0a:	6818      	ldr	r0, [r3, #0]
 800ff0c:	f107 0110 	add.w	r1, r7, #16
 800ff10:	2300      	movs	r3, #0
 800ff12:	683a      	ldr	r2, [r7, #0]
 800ff14:	f7fe f872 	bl	800dffc <xQueueGenericSendFromISR>
 800ff18:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ff1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	3728      	adds	r7, #40	@ 0x28
 800ff20:	46bd      	mov	sp, r7
 800ff22:	bd80      	pop	{r7, pc}
 800ff24:	2000efd0 	.word	0x2000efd0

0800ff28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b088      	sub	sp, #32
 800ff2c:	af02      	add	r7, sp, #8
 800ff2e:	6078      	str	r0, [r7, #4]
 800ff30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff32:	4b24      	ldr	r3, [pc, #144]	@ (800ffc4 <prvProcessExpiredTimer+0x9c>)
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	68db      	ldr	r3, [r3, #12]
 800ff38:	68db      	ldr	r3, [r3, #12]
 800ff3a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ff3c:	697b      	ldr	r3, [r7, #20]
 800ff3e:	3304      	adds	r3, #4
 800ff40:	4618      	mov	r0, r3
 800ff42:	f7fd fc9b 	bl	800d87c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ff46:	697b      	ldr	r3, [r7, #20]
 800ff48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ff4c:	f003 0304 	and.w	r3, r3, #4
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d025      	beq.n	800ffa0 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ff54:	697b      	ldr	r3, [r7, #20]
 800ff56:	699a      	ldr	r2, [r3, #24]
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	18d1      	adds	r1, r2, r3
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	683a      	ldr	r2, [r7, #0]
 800ff60:	6978      	ldr	r0, [r7, #20]
 800ff62:	f000 f8d7 	bl	8010114 <prvInsertTimerInActiveList>
 800ff66:	4603      	mov	r3, r0
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d022      	beq.n	800ffb2 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	9300      	str	r3, [sp, #0]
 800ff70:	2300      	movs	r3, #0
 800ff72:	687a      	ldr	r2, [r7, #4]
 800ff74:	2100      	movs	r1, #0
 800ff76:	6978      	ldr	r0, [r7, #20]
 800ff78:	f7ff ff86 	bl	800fe88 <xTimerGenericCommand>
 800ff7c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ff7e:	693b      	ldr	r3, [r7, #16]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d116      	bne.n	800ffb2 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800ff84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff88:	b672      	cpsid	i
 800ff8a:	f383 8811 	msr	BASEPRI, r3
 800ff8e:	f3bf 8f6f 	isb	sy
 800ff92:	f3bf 8f4f 	dsb	sy
 800ff96:	b662      	cpsie	i
 800ff98:	60fb      	str	r3, [r7, #12]
}
 800ff9a:	bf00      	nop
 800ff9c:	bf00      	nop
 800ff9e:	e7fd      	b.n	800ff9c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ffa0:	697b      	ldr	r3, [r7, #20]
 800ffa2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ffa6:	f023 0301 	bic.w	r3, r3, #1
 800ffaa:	b2da      	uxtb	r2, r3
 800ffac:	697b      	ldr	r3, [r7, #20]
 800ffae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ffb2:	697b      	ldr	r3, [r7, #20]
 800ffb4:	6a1b      	ldr	r3, [r3, #32]
 800ffb6:	6978      	ldr	r0, [r7, #20]
 800ffb8:	4798      	blx	r3
}
 800ffba:	bf00      	nop
 800ffbc:	3718      	adds	r7, #24
 800ffbe:	46bd      	mov	sp, r7
 800ffc0:	bd80      	pop	{r7, pc}
 800ffc2:	bf00      	nop
 800ffc4:	2000efc8 	.word	0x2000efc8

0800ffc8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b084      	sub	sp, #16
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ffd0:	f107 0308 	add.w	r3, r7, #8
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	f000 f859 	bl	801008c <prvGetNextExpireTime>
 800ffda:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ffdc:	68bb      	ldr	r3, [r7, #8]
 800ffde:	4619      	mov	r1, r3
 800ffe0:	68f8      	ldr	r0, [r7, #12]
 800ffe2:	f000 f805 	bl	800fff0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ffe6:	f000 f8d7 	bl	8010198 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ffea:	bf00      	nop
 800ffec:	e7f0      	b.n	800ffd0 <prvTimerTask+0x8>
	...

0800fff0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800fff0:	b580      	push	{r7, lr}
 800fff2:	b084      	sub	sp, #16
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
 800fff8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800fffa:	f7ff f8c3 	bl	800f184 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fffe:	f107 0308 	add.w	r3, r7, #8
 8010002:	4618      	mov	r0, r3
 8010004:	f000 f866 	bl	80100d4 <prvSampleTimeNow>
 8010008:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801000a:	68bb      	ldr	r3, [r7, #8]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d130      	bne.n	8010072 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010010:	683b      	ldr	r3, [r7, #0]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d10a      	bne.n	801002c <prvProcessTimerOrBlockTask+0x3c>
 8010016:	687a      	ldr	r2, [r7, #4]
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	429a      	cmp	r2, r3
 801001c:	d806      	bhi.n	801002c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801001e:	f7ff f8bf 	bl	800f1a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010022:	68f9      	ldr	r1, [r7, #12]
 8010024:	6878      	ldr	r0, [r7, #4]
 8010026:	f7ff ff7f 	bl	800ff28 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801002a:	e024      	b.n	8010076 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d008      	beq.n	8010044 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010032:	4b13      	ldr	r3, [pc, #76]	@ (8010080 <prvProcessTimerOrBlockTask+0x90>)
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d101      	bne.n	8010040 <prvProcessTimerOrBlockTask+0x50>
 801003c:	2301      	movs	r3, #1
 801003e:	e000      	b.n	8010042 <prvProcessTimerOrBlockTask+0x52>
 8010040:	2300      	movs	r3, #0
 8010042:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010044:	4b0f      	ldr	r3, [pc, #60]	@ (8010084 <prvProcessTimerOrBlockTask+0x94>)
 8010046:	6818      	ldr	r0, [r3, #0]
 8010048:	687a      	ldr	r2, [r7, #4]
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	1ad3      	subs	r3, r2, r3
 801004e:	683a      	ldr	r2, [r7, #0]
 8010050:	4619      	mov	r1, r3
 8010052:	f7fe fd7b 	bl	800eb4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010056:	f7ff f8a3 	bl	800f1a0 <xTaskResumeAll>
 801005a:	4603      	mov	r3, r0
 801005c:	2b00      	cmp	r3, #0
 801005e:	d10a      	bne.n	8010076 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010060:	4b09      	ldr	r3, [pc, #36]	@ (8010088 <prvProcessTimerOrBlockTask+0x98>)
 8010062:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010066:	601a      	str	r2, [r3, #0]
 8010068:	f3bf 8f4f 	dsb	sy
 801006c:	f3bf 8f6f 	isb	sy
}
 8010070:	e001      	b.n	8010076 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010072:	f7ff f895 	bl	800f1a0 <xTaskResumeAll>
}
 8010076:	bf00      	nop
 8010078:	3710      	adds	r7, #16
 801007a:	46bd      	mov	sp, r7
 801007c:	bd80      	pop	{r7, pc}
 801007e:	bf00      	nop
 8010080:	2000efcc 	.word	0x2000efcc
 8010084:	2000efd0 	.word	0x2000efd0
 8010088:	e000ed04 	.word	0xe000ed04

0801008c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801008c:	b480      	push	{r7}
 801008e:	b085      	sub	sp, #20
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010094:	4b0e      	ldr	r3, [pc, #56]	@ (80100d0 <prvGetNextExpireTime+0x44>)
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d101      	bne.n	80100a2 <prvGetNextExpireTime+0x16>
 801009e:	2201      	movs	r2, #1
 80100a0:	e000      	b.n	80100a4 <prvGetNextExpireTime+0x18>
 80100a2:	2200      	movs	r2, #0
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d105      	bne.n	80100bc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80100b0:	4b07      	ldr	r3, [pc, #28]	@ (80100d0 <prvGetNextExpireTime+0x44>)
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	68db      	ldr	r3, [r3, #12]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	60fb      	str	r3, [r7, #12]
 80100ba:	e001      	b.n	80100c0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80100bc:	2300      	movs	r3, #0
 80100be:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80100c0:	68fb      	ldr	r3, [r7, #12]
}
 80100c2:	4618      	mov	r0, r3
 80100c4:	3714      	adds	r7, #20
 80100c6:	46bd      	mov	sp, r7
 80100c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100cc:	4770      	bx	lr
 80100ce:	bf00      	nop
 80100d0:	2000efc8 	.word	0x2000efc8

080100d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b084      	sub	sp, #16
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80100dc:	f7ff f900 	bl	800f2e0 <xTaskGetTickCount>
 80100e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80100e2:	4b0b      	ldr	r3, [pc, #44]	@ (8010110 <prvSampleTimeNow+0x3c>)
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	68fa      	ldr	r2, [r7, #12]
 80100e8:	429a      	cmp	r2, r3
 80100ea:	d205      	bcs.n	80100f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80100ec:	f000 f940 	bl	8010370 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	2201      	movs	r2, #1
 80100f4:	601a      	str	r2, [r3, #0]
 80100f6:	e002      	b.n	80100fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	2200      	movs	r2, #0
 80100fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80100fe:	4a04      	ldr	r2, [pc, #16]	@ (8010110 <prvSampleTimeNow+0x3c>)
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010104:	68fb      	ldr	r3, [r7, #12]
}
 8010106:	4618      	mov	r0, r3
 8010108:	3710      	adds	r7, #16
 801010a:	46bd      	mov	sp, r7
 801010c:	bd80      	pop	{r7, pc}
 801010e:	bf00      	nop
 8010110:	2000efd8 	.word	0x2000efd8

08010114 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010114:	b580      	push	{r7, lr}
 8010116:	b086      	sub	sp, #24
 8010118:	af00      	add	r7, sp, #0
 801011a:	60f8      	str	r0, [r7, #12]
 801011c:	60b9      	str	r1, [r7, #8]
 801011e:	607a      	str	r2, [r7, #4]
 8010120:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010122:	2300      	movs	r3, #0
 8010124:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	68ba      	ldr	r2, [r7, #8]
 801012a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	68fa      	ldr	r2, [r7, #12]
 8010130:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010132:	68ba      	ldr	r2, [r7, #8]
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	429a      	cmp	r2, r3
 8010138:	d812      	bhi.n	8010160 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801013a:	687a      	ldr	r2, [r7, #4]
 801013c:	683b      	ldr	r3, [r7, #0]
 801013e:	1ad2      	subs	r2, r2, r3
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	699b      	ldr	r3, [r3, #24]
 8010144:	429a      	cmp	r2, r3
 8010146:	d302      	bcc.n	801014e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010148:	2301      	movs	r3, #1
 801014a:	617b      	str	r3, [r7, #20]
 801014c:	e01b      	b.n	8010186 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801014e:	4b10      	ldr	r3, [pc, #64]	@ (8010190 <prvInsertTimerInActiveList+0x7c>)
 8010150:	681a      	ldr	r2, [r3, #0]
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	3304      	adds	r3, #4
 8010156:	4619      	mov	r1, r3
 8010158:	4610      	mov	r0, r2
 801015a:	f7fd fb56 	bl	800d80a <vListInsert>
 801015e:	e012      	b.n	8010186 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010160:	687a      	ldr	r2, [r7, #4]
 8010162:	683b      	ldr	r3, [r7, #0]
 8010164:	429a      	cmp	r2, r3
 8010166:	d206      	bcs.n	8010176 <prvInsertTimerInActiveList+0x62>
 8010168:	68ba      	ldr	r2, [r7, #8]
 801016a:	683b      	ldr	r3, [r7, #0]
 801016c:	429a      	cmp	r2, r3
 801016e:	d302      	bcc.n	8010176 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010170:	2301      	movs	r3, #1
 8010172:	617b      	str	r3, [r7, #20]
 8010174:	e007      	b.n	8010186 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010176:	4b07      	ldr	r3, [pc, #28]	@ (8010194 <prvInsertTimerInActiveList+0x80>)
 8010178:	681a      	ldr	r2, [r3, #0]
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	3304      	adds	r3, #4
 801017e:	4619      	mov	r1, r3
 8010180:	4610      	mov	r0, r2
 8010182:	f7fd fb42 	bl	800d80a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010186:	697b      	ldr	r3, [r7, #20]
}
 8010188:	4618      	mov	r0, r3
 801018a:	3718      	adds	r7, #24
 801018c:	46bd      	mov	sp, r7
 801018e:	bd80      	pop	{r7, pc}
 8010190:	2000efcc 	.word	0x2000efcc
 8010194:	2000efc8 	.word	0x2000efc8

08010198 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010198:	b580      	push	{r7, lr}
 801019a:	b08e      	sub	sp, #56	@ 0x38
 801019c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801019e:	e0d4      	b.n	801034a <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	da1b      	bge.n	80101de <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80101a6:	1d3b      	adds	r3, r7, #4
 80101a8:	3304      	adds	r3, #4
 80101aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80101ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d10d      	bne.n	80101ce <prvProcessReceivedCommands+0x36>
	__asm volatile
 80101b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101b6:	b672      	cpsid	i
 80101b8:	f383 8811 	msr	BASEPRI, r3
 80101bc:	f3bf 8f6f 	isb	sy
 80101c0:	f3bf 8f4f 	dsb	sy
 80101c4:	b662      	cpsie	i
 80101c6:	61fb      	str	r3, [r7, #28]
}
 80101c8:	bf00      	nop
 80101ca:	bf00      	nop
 80101cc:	e7fd      	b.n	80101ca <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80101ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80101d4:	6850      	ldr	r0, [r2, #4]
 80101d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80101d8:	6892      	ldr	r2, [r2, #8]
 80101da:	4611      	mov	r1, r2
 80101dc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	f2c0 80b2 	blt.w	801034a <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80101ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101ec:	695b      	ldr	r3, [r3, #20]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d004      	beq.n	80101fc <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80101f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101f4:	3304      	adds	r3, #4
 80101f6:	4618      	mov	r0, r3
 80101f8:	f7fd fb40 	bl	800d87c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80101fc:	463b      	mov	r3, r7
 80101fe:	4618      	mov	r0, r3
 8010200:	f7ff ff68 	bl	80100d4 <prvSampleTimeNow>
 8010204:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	2b09      	cmp	r3, #9
 801020a:	f200 809b 	bhi.w	8010344 <prvProcessReceivedCommands+0x1ac>
 801020e:	a201      	add	r2, pc, #4	@ (adr r2, 8010214 <prvProcessReceivedCommands+0x7c>)
 8010210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010214:	0801023d 	.word	0x0801023d
 8010218:	0801023d 	.word	0x0801023d
 801021c:	0801023d 	.word	0x0801023d
 8010220:	080102b7 	.word	0x080102b7
 8010224:	080102cb 	.word	0x080102cb
 8010228:	0801031b 	.word	0x0801031b
 801022c:	0801023d 	.word	0x0801023d
 8010230:	0801023d 	.word	0x0801023d
 8010234:	080102b7 	.word	0x080102b7
 8010238:	080102cb 	.word	0x080102cb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801023c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801023e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010242:	f043 0301 	orr.w	r3, r3, #1
 8010246:	b2da      	uxtb	r2, r3
 8010248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801024a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801024e:	68ba      	ldr	r2, [r7, #8]
 8010250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010252:	699b      	ldr	r3, [r3, #24]
 8010254:	18d1      	adds	r1, r2, r3
 8010256:	68bb      	ldr	r3, [r7, #8]
 8010258:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801025a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801025c:	f7ff ff5a 	bl	8010114 <prvInsertTimerInActiveList>
 8010260:	4603      	mov	r3, r0
 8010262:	2b00      	cmp	r3, #0
 8010264:	d070      	beq.n	8010348 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010268:	6a1b      	ldr	r3, [r3, #32]
 801026a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801026c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801026e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010270:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010274:	f003 0304 	and.w	r3, r3, #4
 8010278:	2b00      	cmp	r3, #0
 801027a:	d065      	beq.n	8010348 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801027c:	68ba      	ldr	r2, [r7, #8]
 801027e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010280:	699b      	ldr	r3, [r3, #24]
 8010282:	441a      	add	r2, r3
 8010284:	2300      	movs	r3, #0
 8010286:	9300      	str	r3, [sp, #0]
 8010288:	2300      	movs	r3, #0
 801028a:	2100      	movs	r1, #0
 801028c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801028e:	f7ff fdfb 	bl	800fe88 <xTimerGenericCommand>
 8010292:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010294:	6a3b      	ldr	r3, [r7, #32]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d156      	bne.n	8010348 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 801029a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801029e:	b672      	cpsid	i
 80102a0:	f383 8811 	msr	BASEPRI, r3
 80102a4:	f3bf 8f6f 	isb	sy
 80102a8:	f3bf 8f4f 	dsb	sy
 80102ac:	b662      	cpsie	i
 80102ae:	61bb      	str	r3, [r7, #24]
}
 80102b0:	bf00      	nop
 80102b2:	bf00      	nop
 80102b4:	e7fd      	b.n	80102b2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80102b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80102bc:	f023 0301 	bic.w	r3, r3, #1
 80102c0:	b2da      	uxtb	r2, r3
 80102c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80102c8:	e03f      	b.n	801034a <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80102ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80102d0:	f043 0301 	orr.w	r3, r3, #1
 80102d4:	b2da      	uxtb	r2, r3
 80102d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80102dc:	68ba      	ldr	r2, [r7, #8]
 80102de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102e0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80102e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102e4:	699b      	ldr	r3, [r3, #24]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d10d      	bne.n	8010306 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 80102ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102ee:	b672      	cpsid	i
 80102f0:	f383 8811 	msr	BASEPRI, r3
 80102f4:	f3bf 8f6f 	isb	sy
 80102f8:	f3bf 8f4f 	dsb	sy
 80102fc:	b662      	cpsie	i
 80102fe:	617b      	str	r3, [r7, #20]
}
 8010300:	bf00      	nop
 8010302:	bf00      	nop
 8010304:	e7fd      	b.n	8010302 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010308:	699a      	ldr	r2, [r3, #24]
 801030a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801030c:	18d1      	adds	r1, r2, r3
 801030e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010310:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010312:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010314:	f7ff fefe 	bl	8010114 <prvInsertTimerInActiveList>
					break;
 8010318:	e017      	b.n	801034a <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801031a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801031c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010320:	f003 0302 	and.w	r3, r3, #2
 8010324:	2b00      	cmp	r3, #0
 8010326:	d103      	bne.n	8010330 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8010328:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801032a:	f000 fbd7 	bl	8010adc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801032e:	e00c      	b.n	801034a <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010332:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010336:	f023 0301 	bic.w	r3, r3, #1
 801033a:	b2da      	uxtb	r2, r3
 801033c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801033e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010342:	e002      	b.n	801034a <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8010344:	bf00      	nop
 8010346:	e000      	b.n	801034a <prvProcessReceivedCommands+0x1b2>
					break;
 8010348:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801034a:	4b08      	ldr	r3, [pc, #32]	@ (801036c <prvProcessReceivedCommands+0x1d4>)
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	1d39      	adds	r1, r7, #4
 8010350:	2200      	movs	r2, #0
 8010352:	4618      	mov	r0, r3
 8010354:	f7fd ff8e 	bl	800e274 <xQueueReceive>
 8010358:	4603      	mov	r3, r0
 801035a:	2b00      	cmp	r3, #0
 801035c:	f47f af20 	bne.w	80101a0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010360:	bf00      	nop
 8010362:	bf00      	nop
 8010364:	3730      	adds	r7, #48	@ 0x30
 8010366:	46bd      	mov	sp, r7
 8010368:	bd80      	pop	{r7, pc}
 801036a:	bf00      	nop
 801036c:	2000efd0 	.word	0x2000efd0

08010370 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010370:	b580      	push	{r7, lr}
 8010372:	b088      	sub	sp, #32
 8010374:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010376:	e04b      	b.n	8010410 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010378:	4b2f      	ldr	r3, [pc, #188]	@ (8010438 <prvSwitchTimerLists+0xc8>)
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	68db      	ldr	r3, [r3, #12]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010382:	4b2d      	ldr	r3, [pc, #180]	@ (8010438 <prvSwitchTimerLists+0xc8>)
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	68db      	ldr	r3, [r3, #12]
 8010388:	68db      	ldr	r3, [r3, #12]
 801038a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	3304      	adds	r3, #4
 8010390:	4618      	mov	r0, r3
 8010392:	f7fd fa73 	bl	800d87c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	6a1b      	ldr	r3, [r3, #32]
 801039a:	68f8      	ldr	r0, [r7, #12]
 801039c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80103a4:	f003 0304 	and.w	r3, r3, #4
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d031      	beq.n	8010410 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	699b      	ldr	r3, [r3, #24]
 80103b0:	693a      	ldr	r2, [r7, #16]
 80103b2:	4413      	add	r3, r2
 80103b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80103b6:	68ba      	ldr	r2, [r7, #8]
 80103b8:	693b      	ldr	r3, [r7, #16]
 80103ba:	429a      	cmp	r2, r3
 80103bc:	d90e      	bls.n	80103dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	68ba      	ldr	r2, [r7, #8]
 80103c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	68fa      	ldr	r2, [r7, #12]
 80103c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80103ca:	4b1b      	ldr	r3, [pc, #108]	@ (8010438 <prvSwitchTimerLists+0xc8>)
 80103cc:	681a      	ldr	r2, [r3, #0]
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	3304      	adds	r3, #4
 80103d2:	4619      	mov	r1, r3
 80103d4:	4610      	mov	r0, r2
 80103d6:	f7fd fa18 	bl	800d80a <vListInsert>
 80103da:	e019      	b.n	8010410 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80103dc:	2300      	movs	r3, #0
 80103de:	9300      	str	r3, [sp, #0]
 80103e0:	2300      	movs	r3, #0
 80103e2:	693a      	ldr	r2, [r7, #16]
 80103e4:	2100      	movs	r1, #0
 80103e6:	68f8      	ldr	r0, [r7, #12]
 80103e8:	f7ff fd4e 	bl	800fe88 <xTimerGenericCommand>
 80103ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d10d      	bne.n	8010410 <prvSwitchTimerLists+0xa0>
	__asm volatile
 80103f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103f8:	b672      	cpsid	i
 80103fa:	f383 8811 	msr	BASEPRI, r3
 80103fe:	f3bf 8f6f 	isb	sy
 8010402:	f3bf 8f4f 	dsb	sy
 8010406:	b662      	cpsie	i
 8010408:	603b      	str	r3, [r7, #0]
}
 801040a:	bf00      	nop
 801040c:	bf00      	nop
 801040e:	e7fd      	b.n	801040c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010410:	4b09      	ldr	r3, [pc, #36]	@ (8010438 <prvSwitchTimerLists+0xc8>)
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d1ae      	bne.n	8010378 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801041a:	4b07      	ldr	r3, [pc, #28]	@ (8010438 <prvSwitchTimerLists+0xc8>)
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010420:	4b06      	ldr	r3, [pc, #24]	@ (801043c <prvSwitchTimerLists+0xcc>)
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	4a04      	ldr	r2, [pc, #16]	@ (8010438 <prvSwitchTimerLists+0xc8>)
 8010426:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010428:	4a04      	ldr	r2, [pc, #16]	@ (801043c <prvSwitchTimerLists+0xcc>)
 801042a:	697b      	ldr	r3, [r7, #20]
 801042c:	6013      	str	r3, [r2, #0]
}
 801042e:	bf00      	nop
 8010430:	3718      	adds	r7, #24
 8010432:	46bd      	mov	sp, r7
 8010434:	bd80      	pop	{r7, pc}
 8010436:	bf00      	nop
 8010438:	2000efc8 	.word	0x2000efc8
 801043c:	2000efcc 	.word	0x2000efcc

08010440 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010440:	b580      	push	{r7, lr}
 8010442:	b082      	sub	sp, #8
 8010444:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010446:	f000 f949 	bl	80106dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801044a:	4b15      	ldr	r3, [pc, #84]	@ (80104a0 <prvCheckForValidListAndQueue+0x60>)
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d120      	bne.n	8010494 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010452:	4814      	ldr	r0, [pc, #80]	@ (80104a4 <prvCheckForValidListAndQueue+0x64>)
 8010454:	f7fd f988 	bl	800d768 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010458:	4813      	ldr	r0, [pc, #76]	@ (80104a8 <prvCheckForValidListAndQueue+0x68>)
 801045a:	f7fd f985 	bl	800d768 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801045e:	4b13      	ldr	r3, [pc, #76]	@ (80104ac <prvCheckForValidListAndQueue+0x6c>)
 8010460:	4a10      	ldr	r2, [pc, #64]	@ (80104a4 <prvCheckForValidListAndQueue+0x64>)
 8010462:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010464:	4b12      	ldr	r3, [pc, #72]	@ (80104b0 <prvCheckForValidListAndQueue+0x70>)
 8010466:	4a10      	ldr	r2, [pc, #64]	@ (80104a8 <prvCheckForValidListAndQueue+0x68>)
 8010468:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801046a:	2300      	movs	r3, #0
 801046c:	9300      	str	r3, [sp, #0]
 801046e:	4b11      	ldr	r3, [pc, #68]	@ (80104b4 <prvCheckForValidListAndQueue+0x74>)
 8010470:	4a11      	ldr	r2, [pc, #68]	@ (80104b8 <prvCheckForValidListAndQueue+0x78>)
 8010472:	2110      	movs	r1, #16
 8010474:	200a      	movs	r0, #10
 8010476:	f7fd fa97 	bl	800d9a8 <xQueueGenericCreateStatic>
 801047a:	4603      	mov	r3, r0
 801047c:	4a08      	ldr	r2, [pc, #32]	@ (80104a0 <prvCheckForValidListAndQueue+0x60>)
 801047e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010480:	4b07      	ldr	r3, [pc, #28]	@ (80104a0 <prvCheckForValidListAndQueue+0x60>)
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d005      	beq.n	8010494 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010488:	4b05      	ldr	r3, [pc, #20]	@ (80104a0 <prvCheckForValidListAndQueue+0x60>)
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	490b      	ldr	r1, [pc, #44]	@ (80104bc <prvCheckForValidListAndQueue+0x7c>)
 801048e:	4618      	mov	r0, r3
 8010490:	f7fe fb08 	bl	800eaa4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010494:	f000 f958 	bl	8010748 <vPortExitCritical>
}
 8010498:	bf00      	nop
 801049a:	46bd      	mov	sp, r7
 801049c:	bd80      	pop	{r7, pc}
 801049e:	bf00      	nop
 80104a0:	2000efd0 	.word	0x2000efd0
 80104a4:	2000efa0 	.word	0x2000efa0
 80104a8:	2000efb4 	.word	0x2000efb4
 80104ac:	2000efc8 	.word	0x2000efc8
 80104b0:	2000efcc 	.word	0x2000efcc
 80104b4:	2000f07c 	.word	0x2000f07c
 80104b8:	2000efdc 	.word	0x2000efdc
 80104bc:	08021970 	.word	0x08021970

080104c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80104c0:	b480      	push	{r7}
 80104c2:	b085      	sub	sp, #20
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	60f8      	str	r0, [r7, #12]
 80104c8:	60b9      	str	r1, [r7, #8]
 80104ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	3b04      	subs	r3, #4
 80104d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80104d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	3b04      	subs	r3, #4
 80104de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80104e0:	68bb      	ldr	r3, [r7, #8]
 80104e2:	f023 0201 	bic.w	r2, r3, #1
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	3b04      	subs	r3, #4
 80104ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80104f0:	4a0c      	ldr	r2, [pc, #48]	@ (8010524 <pxPortInitialiseStack+0x64>)
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	3b14      	subs	r3, #20
 80104fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80104fc:	687a      	ldr	r2, [r7, #4]
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	3b04      	subs	r3, #4
 8010506:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	f06f 0202 	mvn.w	r2, #2
 801050e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	3b20      	subs	r3, #32
 8010514:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010516:	68fb      	ldr	r3, [r7, #12]
}
 8010518:	4618      	mov	r0, r3
 801051a:	3714      	adds	r7, #20
 801051c:	46bd      	mov	sp, r7
 801051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010522:	4770      	bx	lr
 8010524:	08010529 	.word	0x08010529

08010528 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010528:	b480      	push	{r7}
 801052a:	b085      	sub	sp, #20
 801052c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801052e:	2300      	movs	r3, #0
 8010530:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010532:	4b15      	ldr	r3, [pc, #84]	@ (8010588 <prvTaskExitError+0x60>)
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801053a:	d00d      	beq.n	8010558 <prvTaskExitError+0x30>
	__asm volatile
 801053c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010540:	b672      	cpsid	i
 8010542:	f383 8811 	msr	BASEPRI, r3
 8010546:	f3bf 8f6f 	isb	sy
 801054a:	f3bf 8f4f 	dsb	sy
 801054e:	b662      	cpsie	i
 8010550:	60fb      	str	r3, [r7, #12]
}
 8010552:	bf00      	nop
 8010554:	bf00      	nop
 8010556:	e7fd      	b.n	8010554 <prvTaskExitError+0x2c>
	__asm volatile
 8010558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801055c:	b672      	cpsid	i
 801055e:	f383 8811 	msr	BASEPRI, r3
 8010562:	f3bf 8f6f 	isb	sy
 8010566:	f3bf 8f4f 	dsb	sy
 801056a:	b662      	cpsie	i
 801056c:	60bb      	str	r3, [r7, #8]
}
 801056e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010570:	bf00      	nop
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	2b00      	cmp	r3, #0
 8010576:	d0fc      	beq.n	8010572 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010578:	bf00      	nop
 801057a:	bf00      	nop
 801057c:	3714      	adds	r7, #20
 801057e:	46bd      	mov	sp, r7
 8010580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010584:	4770      	bx	lr
 8010586:	bf00      	nop
 8010588:	20000020 	.word	0x20000020
 801058c:	00000000 	.word	0x00000000

08010590 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010590:	4b07      	ldr	r3, [pc, #28]	@ (80105b0 <pxCurrentTCBConst2>)
 8010592:	6819      	ldr	r1, [r3, #0]
 8010594:	6808      	ldr	r0, [r1, #0]
 8010596:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801059a:	f380 8809 	msr	PSP, r0
 801059e:	f3bf 8f6f 	isb	sy
 80105a2:	f04f 0000 	mov.w	r0, #0
 80105a6:	f380 8811 	msr	BASEPRI, r0
 80105aa:	4770      	bx	lr
 80105ac:	f3af 8000 	nop.w

080105b0 <pxCurrentTCBConst2>:
 80105b0:	2000eaa0 	.word	0x2000eaa0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80105b4:	bf00      	nop
 80105b6:	bf00      	nop

080105b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80105b8:	4808      	ldr	r0, [pc, #32]	@ (80105dc <prvPortStartFirstTask+0x24>)
 80105ba:	6800      	ldr	r0, [r0, #0]
 80105bc:	6800      	ldr	r0, [r0, #0]
 80105be:	f380 8808 	msr	MSP, r0
 80105c2:	f04f 0000 	mov.w	r0, #0
 80105c6:	f380 8814 	msr	CONTROL, r0
 80105ca:	b662      	cpsie	i
 80105cc:	b661      	cpsie	f
 80105ce:	f3bf 8f4f 	dsb	sy
 80105d2:	f3bf 8f6f 	isb	sy
 80105d6:	df00      	svc	0
 80105d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80105da:	bf00      	nop
 80105dc:	e000ed08 	.word	0xe000ed08

080105e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b084      	sub	sp, #16
 80105e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80105e6:	4b37      	ldr	r3, [pc, #220]	@ (80106c4 <xPortStartScheduler+0xe4>)
 80105e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	781b      	ldrb	r3, [r3, #0]
 80105ee:	b2db      	uxtb	r3, r3
 80105f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	22ff      	movs	r2, #255	@ 0xff
 80105f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	781b      	ldrb	r3, [r3, #0]
 80105fc:	b2db      	uxtb	r3, r3
 80105fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010600:	78fb      	ldrb	r3, [r7, #3]
 8010602:	b2db      	uxtb	r3, r3
 8010604:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8010608:	b2da      	uxtb	r2, r3
 801060a:	4b2f      	ldr	r3, [pc, #188]	@ (80106c8 <xPortStartScheduler+0xe8>)
 801060c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801060e:	4b2f      	ldr	r3, [pc, #188]	@ (80106cc <xPortStartScheduler+0xec>)
 8010610:	2207      	movs	r2, #7
 8010612:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010614:	e009      	b.n	801062a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8010616:	4b2d      	ldr	r3, [pc, #180]	@ (80106cc <xPortStartScheduler+0xec>)
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	3b01      	subs	r3, #1
 801061c:	4a2b      	ldr	r2, [pc, #172]	@ (80106cc <xPortStartScheduler+0xec>)
 801061e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010620:	78fb      	ldrb	r3, [r7, #3]
 8010622:	b2db      	uxtb	r3, r3
 8010624:	005b      	lsls	r3, r3, #1
 8010626:	b2db      	uxtb	r3, r3
 8010628:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801062a:	78fb      	ldrb	r3, [r7, #3]
 801062c:	b2db      	uxtb	r3, r3
 801062e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010632:	2b80      	cmp	r3, #128	@ 0x80
 8010634:	d0ef      	beq.n	8010616 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010636:	4b25      	ldr	r3, [pc, #148]	@ (80106cc <xPortStartScheduler+0xec>)
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	f1c3 0307 	rsb	r3, r3, #7
 801063e:	2b04      	cmp	r3, #4
 8010640:	d00d      	beq.n	801065e <xPortStartScheduler+0x7e>
	__asm volatile
 8010642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010646:	b672      	cpsid	i
 8010648:	f383 8811 	msr	BASEPRI, r3
 801064c:	f3bf 8f6f 	isb	sy
 8010650:	f3bf 8f4f 	dsb	sy
 8010654:	b662      	cpsie	i
 8010656:	60bb      	str	r3, [r7, #8]
}
 8010658:	bf00      	nop
 801065a:	bf00      	nop
 801065c:	e7fd      	b.n	801065a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801065e:	4b1b      	ldr	r3, [pc, #108]	@ (80106cc <xPortStartScheduler+0xec>)
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	021b      	lsls	r3, r3, #8
 8010664:	4a19      	ldr	r2, [pc, #100]	@ (80106cc <xPortStartScheduler+0xec>)
 8010666:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010668:	4b18      	ldr	r3, [pc, #96]	@ (80106cc <xPortStartScheduler+0xec>)
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010670:	4a16      	ldr	r2, [pc, #88]	@ (80106cc <xPortStartScheduler+0xec>)
 8010672:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	b2da      	uxtb	r2, r3
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801067c:	4b14      	ldr	r3, [pc, #80]	@ (80106d0 <xPortStartScheduler+0xf0>)
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	4a13      	ldr	r2, [pc, #76]	@ (80106d0 <xPortStartScheduler+0xf0>)
 8010682:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010686:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010688:	4b11      	ldr	r3, [pc, #68]	@ (80106d0 <xPortStartScheduler+0xf0>)
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	4a10      	ldr	r2, [pc, #64]	@ (80106d0 <xPortStartScheduler+0xf0>)
 801068e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8010692:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010694:	f000 f8dc 	bl	8010850 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010698:	4b0e      	ldr	r3, [pc, #56]	@ (80106d4 <xPortStartScheduler+0xf4>)
 801069a:	2200      	movs	r2, #0
 801069c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801069e:	f000 f8fb 	bl	8010898 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80106a2:	4b0d      	ldr	r3, [pc, #52]	@ (80106d8 <xPortStartScheduler+0xf8>)
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	4a0c      	ldr	r2, [pc, #48]	@ (80106d8 <xPortStartScheduler+0xf8>)
 80106a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80106ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80106ae:	f7ff ff83 	bl	80105b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80106b2:	f7fe fef3 	bl	800f49c <vTaskSwitchContext>
	prvTaskExitError();
 80106b6:	f7ff ff37 	bl	8010528 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80106ba:	2300      	movs	r3, #0
}
 80106bc:	4618      	mov	r0, r3
 80106be:	3710      	adds	r7, #16
 80106c0:	46bd      	mov	sp, r7
 80106c2:	bd80      	pop	{r7, pc}
 80106c4:	e000e400 	.word	0xe000e400
 80106c8:	2000f0cc 	.word	0x2000f0cc
 80106cc:	2000f0d0 	.word	0x2000f0d0
 80106d0:	e000ed20 	.word	0xe000ed20
 80106d4:	20000020 	.word	0x20000020
 80106d8:	e000ef34 	.word	0xe000ef34

080106dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80106dc:	b480      	push	{r7}
 80106de:	b083      	sub	sp, #12
 80106e0:	af00      	add	r7, sp, #0
	__asm volatile
 80106e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106e6:	b672      	cpsid	i
 80106e8:	f383 8811 	msr	BASEPRI, r3
 80106ec:	f3bf 8f6f 	isb	sy
 80106f0:	f3bf 8f4f 	dsb	sy
 80106f4:	b662      	cpsie	i
 80106f6:	607b      	str	r3, [r7, #4]
}
 80106f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80106fa:	4b11      	ldr	r3, [pc, #68]	@ (8010740 <vPortEnterCritical+0x64>)
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	3301      	adds	r3, #1
 8010700:	4a0f      	ldr	r2, [pc, #60]	@ (8010740 <vPortEnterCritical+0x64>)
 8010702:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010704:	4b0e      	ldr	r3, [pc, #56]	@ (8010740 <vPortEnterCritical+0x64>)
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	2b01      	cmp	r3, #1
 801070a:	d112      	bne.n	8010732 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801070c:	4b0d      	ldr	r3, [pc, #52]	@ (8010744 <vPortEnterCritical+0x68>)
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	b2db      	uxtb	r3, r3
 8010712:	2b00      	cmp	r3, #0
 8010714:	d00d      	beq.n	8010732 <vPortEnterCritical+0x56>
	__asm volatile
 8010716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801071a:	b672      	cpsid	i
 801071c:	f383 8811 	msr	BASEPRI, r3
 8010720:	f3bf 8f6f 	isb	sy
 8010724:	f3bf 8f4f 	dsb	sy
 8010728:	b662      	cpsie	i
 801072a:	603b      	str	r3, [r7, #0]
}
 801072c:	bf00      	nop
 801072e:	bf00      	nop
 8010730:	e7fd      	b.n	801072e <vPortEnterCritical+0x52>
	}
}
 8010732:	bf00      	nop
 8010734:	370c      	adds	r7, #12
 8010736:	46bd      	mov	sp, r7
 8010738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073c:	4770      	bx	lr
 801073e:	bf00      	nop
 8010740:	20000020 	.word	0x20000020
 8010744:	e000ed04 	.word	0xe000ed04

08010748 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010748:	b480      	push	{r7}
 801074a:	b083      	sub	sp, #12
 801074c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801074e:	4b13      	ldr	r3, [pc, #76]	@ (801079c <vPortExitCritical+0x54>)
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d10d      	bne.n	8010772 <vPortExitCritical+0x2a>
	__asm volatile
 8010756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801075a:	b672      	cpsid	i
 801075c:	f383 8811 	msr	BASEPRI, r3
 8010760:	f3bf 8f6f 	isb	sy
 8010764:	f3bf 8f4f 	dsb	sy
 8010768:	b662      	cpsie	i
 801076a:	607b      	str	r3, [r7, #4]
}
 801076c:	bf00      	nop
 801076e:	bf00      	nop
 8010770:	e7fd      	b.n	801076e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8010772:	4b0a      	ldr	r3, [pc, #40]	@ (801079c <vPortExitCritical+0x54>)
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	3b01      	subs	r3, #1
 8010778:	4a08      	ldr	r2, [pc, #32]	@ (801079c <vPortExitCritical+0x54>)
 801077a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801077c:	4b07      	ldr	r3, [pc, #28]	@ (801079c <vPortExitCritical+0x54>)
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d105      	bne.n	8010790 <vPortExitCritical+0x48>
 8010784:	2300      	movs	r3, #0
 8010786:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010788:	683b      	ldr	r3, [r7, #0]
 801078a:	f383 8811 	msr	BASEPRI, r3
}
 801078e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010790:	bf00      	nop
 8010792:	370c      	adds	r7, #12
 8010794:	46bd      	mov	sp, r7
 8010796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079a:	4770      	bx	lr
 801079c:	20000020 	.word	0x20000020

080107a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80107a0:	f3ef 8009 	mrs	r0, PSP
 80107a4:	f3bf 8f6f 	isb	sy
 80107a8:	4b15      	ldr	r3, [pc, #84]	@ (8010800 <pxCurrentTCBConst>)
 80107aa:	681a      	ldr	r2, [r3, #0]
 80107ac:	f01e 0f10 	tst.w	lr, #16
 80107b0:	bf08      	it	eq
 80107b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80107b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107ba:	6010      	str	r0, [r2, #0]
 80107bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80107c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80107c4:	b672      	cpsid	i
 80107c6:	f380 8811 	msr	BASEPRI, r0
 80107ca:	f3bf 8f4f 	dsb	sy
 80107ce:	f3bf 8f6f 	isb	sy
 80107d2:	b662      	cpsie	i
 80107d4:	f7fe fe62 	bl	800f49c <vTaskSwitchContext>
 80107d8:	f04f 0000 	mov.w	r0, #0
 80107dc:	f380 8811 	msr	BASEPRI, r0
 80107e0:	bc09      	pop	{r0, r3}
 80107e2:	6819      	ldr	r1, [r3, #0]
 80107e4:	6808      	ldr	r0, [r1, #0]
 80107e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107ea:	f01e 0f10 	tst.w	lr, #16
 80107ee:	bf08      	it	eq
 80107f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80107f4:	f380 8809 	msr	PSP, r0
 80107f8:	f3bf 8f6f 	isb	sy
 80107fc:	4770      	bx	lr
 80107fe:	bf00      	nop

08010800 <pxCurrentTCBConst>:
 8010800:	2000eaa0 	.word	0x2000eaa0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010804:	bf00      	nop
 8010806:	bf00      	nop

08010808 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010808:	b580      	push	{r7, lr}
 801080a:	b082      	sub	sp, #8
 801080c:	af00      	add	r7, sp, #0
	__asm volatile
 801080e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010812:	b672      	cpsid	i
 8010814:	f383 8811 	msr	BASEPRI, r3
 8010818:	f3bf 8f6f 	isb	sy
 801081c:	f3bf 8f4f 	dsb	sy
 8010820:	b662      	cpsie	i
 8010822:	607b      	str	r3, [r7, #4]
}
 8010824:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010826:	f7fe fd7d 	bl	800f324 <xTaskIncrementTick>
 801082a:	4603      	mov	r3, r0
 801082c:	2b00      	cmp	r3, #0
 801082e:	d003      	beq.n	8010838 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010830:	4b06      	ldr	r3, [pc, #24]	@ (801084c <SysTick_Handler+0x44>)
 8010832:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010836:	601a      	str	r2, [r3, #0]
 8010838:	2300      	movs	r3, #0
 801083a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801083c:	683b      	ldr	r3, [r7, #0]
 801083e:	f383 8811 	msr	BASEPRI, r3
}
 8010842:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010844:	bf00      	nop
 8010846:	3708      	adds	r7, #8
 8010848:	46bd      	mov	sp, r7
 801084a:	bd80      	pop	{r7, pc}
 801084c:	e000ed04 	.word	0xe000ed04

08010850 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010850:	b480      	push	{r7}
 8010852:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010854:	4b0b      	ldr	r3, [pc, #44]	@ (8010884 <vPortSetupTimerInterrupt+0x34>)
 8010856:	2200      	movs	r2, #0
 8010858:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801085a:	4b0b      	ldr	r3, [pc, #44]	@ (8010888 <vPortSetupTimerInterrupt+0x38>)
 801085c:	2200      	movs	r2, #0
 801085e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010860:	4b0a      	ldr	r3, [pc, #40]	@ (801088c <vPortSetupTimerInterrupt+0x3c>)
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	4a0a      	ldr	r2, [pc, #40]	@ (8010890 <vPortSetupTimerInterrupt+0x40>)
 8010866:	fba2 2303 	umull	r2, r3, r2, r3
 801086a:	099b      	lsrs	r3, r3, #6
 801086c:	4a09      	ldr	r2, [pc, #36]	@ (8010894 <vPortSetupTimerInterrupt+0x44>)
 801086e:	3b01      	subs	r3, #1
 8010870:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010872:	4b04      	ldr	r3, [pc, #16]	@ (8010884 <vPortSetupTimerInterrupt+0x34>)
 8010874:	2207      	movs	r2, #7
 8010876:	601a      	str	r2, [r3, #0]
}
 8010878:	bf00      	nop
 801087a:	46bd      	mov	sp, r7
 801087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010880:	4770      	bx	lr
 8010882:	bf00      	nop
 8010884:	e000e010 	.word	0xe000e010
 8010888:	e000e018 	.word	0xe000e018
 801088c:	20000000 	.word	0x20000000
 8010890:	10624dd3 	.word	0x10624dd3
 8010894:	e000e014 	.word	0xe000e014

08010898 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010898:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80108a8 <vPortEnableVFP+0x10>
 801089c:	6801      	ldr	r1, [r0, #0]
 801089e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80108a2:	6001      	str	r1, [r0, #0]
 80108a4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80108a6:	bf00      	nop
 80108a8:	e000ed88 	.word	0xe000ed88

080108ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80108ac:	b480      	push	{r7}
 80108ae:	b085      	sub	sp, #20
 80108b0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80108b2:	f3ef 8305 	mrs	r3, IPSR
 80108b6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	2b0f      	cmp	r3, #15
 80108bc:	d917      	bls.n	80108ee <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80108be:	4a1a      	ldr	r2, [pc, #104]	@ (8010928 <vPortValidateInterruptPriority+0x7c>)
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	4413      	add	r3, r2
 80108c4:	781b      	ldrb	r3, [r3, #0]
 80108c6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80108c8:	4b18      	ldr	r3, [pc, #96]	@ (801092c <vPortValidateInterruptPriority+0x80>)
 80108ca:	781b      	ldrb	r3, [r3, #0]
 80108cc:	7afa      	ldrb	r2, [r7, #11]
 80108ce:	429a      	cmp	r2, r3
 80108d0:	d20d      	bcs.n	80108ee <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80108d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108d6:	b672      	cpsid	i
 80108d8:	f383 8811 	msr	BASEPRI, r3
 80108dc:	f3bf 8f6f 	isb	sy
 80108e0:	f3bf 8f4f 	dsb	sy
 80108e4:	b662      	cpsie	i
 80108e6:	607b      	str	r3, [r7, #4]
}
 80108e8:	bf00      	nop
 80108ea:	bf00      	nop
 80108ec:	e7fd      	b.n	80108ea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80108ee:	4b10      	ldr	r3, [pc, #64]	@ (8010930 <vPortValidateInterruptPriority+0x84>)
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80108f6:	4b0f      	ldr	r3, [pc, #60]	@ (8010934 <vPortValidateInterruptPriority+0x88>)
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	429a      	cmp	r2, r3
 80108fc:	d90d      	bls.n	801091a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 80108fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010902:	b672      	cpsid	i
 8010904:	f383 8811 	msr	BASEPRI, r3
 8010908:	f3bf 8f6f 	isb	sy
 801090c:	f3bf 8f4f 	dsb	sy
 8010910:	b662      	cpsie	i
 8010912:	603b      	str	r3, [r7, #0]
}
 8010914:	bf00      	nop
 8010916:	bf00      	nop
 8010918:	e7fd      	b.n	8010916 <vPortValidateInterruptPriority+0x6a>
	}
 801091a:	bf00      	nop
 801091c:	3714      	adds	r7, #20
 801091e:	46bd      	mov	sp, r7
 8010920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010924:	4770      	bx	lr
 8010926:	bf00      	nop
 8010928:	e000e3f0 	.word	0xe000e3f0
 801092c:	2000f0cc 	.word	0x2000f0cc
 8010930:	e000ed0c 	.word	0xe000ed0c
 8010934:	2000f0d0 	.word	0x2000f0d0

08010938 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010938:	b580      	push	{r7, lr}
 801093a:	b08a      	sub	sp, #40	@ 0x28
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010940:	2300      	movs	r3, #0
 8010942:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010944:	f7fe fc1e 	bl	800f184 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010948:	4b5f      	ldr	r3, [pc, #380]	@ (8010ac8 <pvPortMalloc+0x190>)
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d101      	bne.n	8010954 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010950:	f000 f924 	bl	8010b9c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010954:	4b5d      	ldr	r3, [pc, #372]	@ (8010acc <pvPortMalloc+0x194>)
 8010956:	681a      	ldr	r2, [r3, #0]
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	4013      	ands	r3, r2
 801095c:	2b00      	cmp	r3, #0
 801095e:	f040 8094 	bne.w	8010a8a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	2b00      	cmp	r3, #0
 8010966:	d020      	beq.n	80109aa <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8010968:	2208      	movs	r2, #8
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	4413      	add	r3, r2
 801096e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	f003 0307 	and.w	r3, r3, #7
 8010976:	2b00      	cmp	r3, #0
 8010978:	d017      	beq.n	80109aa <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	f023 0307 	bic.w	r3, r3, #7
 8010980:	3308      	adds	r3, #8
 8010982:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	f003 0307 	and.w	r3, r3, #7
 801098a:	2b00      	cmp	r3, #0
 801098c:	d00d      	beq.n	80109aa <pvPortMalloc+0x72>
	__asm volatile
 801098e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010992:	b672      	cpsid	i
 8010994:	f383 8811 	msr	BASEPRI, r3
 8010998:	f3bf 8f6f 	isb	sy
 801099c:	f3bf 8f4f 	dsb	sy
 80109a0:	b662      	cpsie	i
 80109a2:	617b      	str	r3, [r7, #20]
}
 80109a4:	bf00      	nop
 80109a6:	bf00      	nop
 80109a8:	e7fd      	b.n	80109a6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d06c      	beq.n	8010a8a <pvPortMalloc+0x152>
 80109b0:	4b47      	ldr	r3, [pc, #284]	@ (8010ad0 <pvPortMalloc+0x198>)
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	687a      	ldr	r2, [r7, #4]
 80109b6:	429a      	cmp	r2, r3
 80109b8:	d867      	bhi.n	8010a8a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80109ba:	4b46      	ldr	r3, [pc, #280]	@ (8010ad4 <pvPortMalloc+0x19c>)
 80109bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80109be:	4b45      	ldr	r3, [pc, #276]	@ (8010ad4 <pvPortMalloc+0x19c>)
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80109c4:	e004      	b.n	80109d0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80109c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80109ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80109d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109d2:	685b      	ldr	r3, [r3, #4]
 80109d4:	687a      	ldr	r2, [r7, #4]
 80109d6:	429a      	cmp	r2, r3
 80109d8:	d903      	bls.n	80109e2 <pvPortMalloc+0xaa>
 80109da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d1f1      	bne.n	80109c6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80109e2:	4b39      	ldr	r3, [pc, #228]	@ (8010ac8 <pvPortMalloc+0x190>)
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80109e8:	429a      	cmp	r2, r3
 80109ea:	d04e      	beq.n	8010a8a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80109ec:	6a3b      	ldr	r3, [r7, #32]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	2208      	movs	r2, #8
 80109f2:	4413      	add	r3, r2
 80109f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80109f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109f8:	681a      	ldr	r2, [r3, #0]
 80109fa:	6a3b      	ldr	r3, [r7, #32]
 80109fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80109fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a00:	685a      	ldr	r2, [r3, #4]
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	1ad2      	subs	r2, r2, r3
 8010a06:	2308      	movs	r3, #8
 8010a08:	005b      	lsls	r3, r3, #1
 8010a0a:	429a      	cmp	r2, r3
 8010a0c:	d922      	bls.n	8010a54 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	4413      	add	r3, r2
 8010a14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010a16:	69bb      	ldr	r3, [r7, #24]
 8010a18:	f003 0307 	and.w	r3, r3, #7
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d00d      	beq.n	8010a3c <pvPortMalloc+0x104>
	__asm volatile
 8010a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a24:	b672      	cpsid	i
 8010a26:	f383 8811 	msr	BASEPRI, r3
 8010a2a:	f3bf 8f6f 	isb	sy
 8010a2e:	f3bf 8f4f 	dsb	sy
 8010a32:	b662      	cpsie	i
 8010a34:	613b      	str	r3, [r7, #16]
}
 8010a36:	bf00      	nop
 8010a38:	bf00      	nop
 8010a3a:	e7fd      	b.n	8010a38 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a3e:	685a      	ldr	r2, [r3, #4]
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	1ad2      	subs	r2, r2, r3
 8010a44:	69bb      	ldr	r3, [r7, #24]
 8010a46:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a4a:	687a      	ldr	r2, [r7, #4]
 8010a4c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010a4e:	69b8      	ldr	r0, [r7, #24]
 8010a50:	f000 f906 	bl	8010c60 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010a54:	4b1e      	ldr	r3, [pc, #120]	@ (8010ad0 <pvPortMalloc+0x198>)
 8010a56:	681a      	ldr	r2, [r3, #0]
 8010a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a5a:	685b      	ldr	r3, [r3, #4]
 8010a5c:	1ad3      	subs	r3, r2, r3
 8010a5e:	4a1c      	ldr	r2, [pc, #112]	@ (8010ad0 <pvPortMalloc+0x198>)
 8010a60:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010a62:	4b1b      	ldr	r3, [pc, #108]	@ (8010ad0 <pvPortMalloc+0x198>)
 8010a64:	681a      	ldr	r2, [r3, #0]
 8010a66:	4b1c      	ldr	r3, [pc, #112]	@ (8010ad8 <pvPortMalloc+0x1a0>)
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	429a      	cmp	r2, r3
 8010a6c:	d203      	bcs.n	8010a76 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010a6e:	4b18      	ldr	r3, [pc, #96]	@ (8010ad0 <pvPortMalloc+0x198>)
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	4a19      	ldr	r2, [pc, #100]	@ (8010ad8 <pvPortMalloc+0x1a0>)
 8010a74:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a78:	685a      	ldr	r2, [r3, #4]
 8010a7a:	4b14      	ldr	r3, [pc, #80]	@ (8010acc <pvPortMalloc+0x194>)
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	431a      	orrs	r2, r3
 8010a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a82:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a86:	2200      	movs	r2, #0
 8010a88:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010a8a:	f7fe fb89 	bl	800f1a0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8010a8e:	69fb      	ldr	r3, [r7, #28]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d101      	bne.n	8010a98 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8010a94:	f7ef ff3a 	bl	800090c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010a98:	69fb      	ldr	r3, [r7, #28]
 8010a9a:	f003 0307 	and.w	r3, r3, #7
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d00d      	beq.n	8010abe <pvPortMalloc+0x186>
	__asm volatile
 8010aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010aa6:	b672      	cpsid	i
 8010aa8:	f383 8811 	msr	BASEPRI, r3
 8010aac:	f3bf 8f6f 	isb	sy
 8010ab0:	f3bf 8f4f 	dsb	sy
 8010ab4:	b662      	cpsie	i
 8010ab6:	60fb      	str	r3, [r7, #12]
}
 8010ab8:	bf00      	nop
 8010aba:	bf00      	nop
 8010abc:	e7fd      	b.n	8010aba <pvPortMalloc+0x182>
	return pvReturn;
 8010abe:	69fb      	ldr	r3, [r7, #28]
}
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	3728      	adds	r7, #40	@ 0x28
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	bd80      	pop	{r7, pc}
 8010ac8:	200270dc 	.word	0x200270dc
 8010acc:	200270e8 	.word	0x200270e8
 8010ad0:	200270e0 	.word	0x200270e0
 8010ad4:	200270d4 	.word	0x200270d4
 8010ad8:	200270e4 	.word	0x200270e4

08010adc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010adc:	b580      	push	{r7, lr}
 8010ade:	b086      	sub	sp, #24
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d04e      	beq.n	8010b8c <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010aee:	2308      	movs	r3, #8
 8010af0:	425b      	negs	r3, r3
 8010af2:	697a      	ldr	r2, [r7, #20]
 8010af4:	4413      	add	r3, r2
 8010af6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010af8:	697b      	ldr	r3, [r7, #20]
 8010afa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010afc:	693b      	ldr	r3, [r7, #16]
 8010afe:	685a      	ldr	r2, [r3, #4]
 8010b00:	4b24      	ldr	r3, [pc, #144]	@ (8010b94 <vPortFree+0xb8>)
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	4013      	ands	r3, r2
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d10d      	bne.n	8010b26 <vPortFree+0x4a>
	__asm volatile
 8010b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b0e:	b672      	cpsid	i
 8010b10:	f383 8811 	msr	BASEPRI, r3
 8010b14:	f3bf 8f6f 	isb	sy
 8010b18:	f3bf 8f4f 	dsb	sy
 8010b1c:	b662      	cpsie	i
 8010b1e:	60fb      	str	r3, [r7, #12]
}
 8010b20:	bf00      	nop
 8010b22:	bf00      	nop
 8010b24:	e7fd      	b.n	8010b22 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010b26:	693b      	ldr	r3, [r7, #16]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d00d      	beq.n	8010b4a <vPortFree+0x6e>
	__asm volatile
 8010b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b32:	b672      	cpsid	i
 8010b34:	f383 8811 	msr	BASEPRI, r3
 8010b38:	f3bf 8f6f 	isb	sy
 8010b3c:	f3bf 8f4f 	dsb	sy
 8010b40:	b662      	cpsie	i
 8010b42:	60bb      	str	r3, [r7, #8]
}
 8010b44:	bf00      	nop
 8010b46:	bf00      	nop
 8010b48:	e7fd      	b.n	8010b46 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010b4a:	693b      	ldr	r3, [r7, #16]
 8010b4c:	685a      	ldr	r2, [r3, #4]
 8010b4e:	4b11      	ldr	r3, [pc, #68]	@ (8010b94 <vPortFree+0xb8>)
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	4013      	ands	r3, r2
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d019      	beq.n	8010b8c <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010b58:	693b      	ldr	r3, [r7, #16]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d115      	bne.n	8010b8c <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010b60:	693b      	ldr	r3, [r7, #16]
 8010b62:	685a      	ldr	r2, [r3, #4]
 8010b64:	4b0b      	ldr	r3, [pc, #44]	@ (8010b94 <vPortFree+0xb8>)
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	43db      	mvns	r3, r3
 8010b6a:	401a      	ands	r2, r3
 8010b6c:	693b      	ldr	r3, [r7, #16]
 8010b6e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010b70:	f7fe fb08 	bl	800f184 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010b74:	693b      	ldr	r3, [r7, #16]
 8010b76:	685a      	ldr	r2, [r3, #4]
 8010b78:	4b07      	ldr	r3, [pc, #28]	@ (8010b98 <vPortFree+0xbc>)
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	4413      	add	r3, r2
 8010b7e:	4a06      	ldr	r2, [pc, #24]	@ (8010b98 <vPortFree+0xbc>)
 8010b80:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010b82:	6938      	ldr	r0, [r7, #16]
 8010b84:	f000 f86c 	bl	8010c60 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010b88:	f7fe fb0a 	bl	800f1a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010b8c:	bf00      	nop
 8010b8e:	3718      	adds	r7, #24
 8010b90:	46bd      	mov	sp, r7
 8010b92:	bd80      	pop	{r7, pc}
 8010b94:	200270e8 	.word	0x200270e8
 8010b98:	200270e0 	.word	0x200270e0

08010b9c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010b9c:	b480      	push	{r7}
 8010b9e:	b085      	sub	sp, #20
 8010ba0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010ba2:	f44f 33c0 	mov.w	r3, #98304	@ 0x18000
 8010ba6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010ba8:	4b27      	ldr	r3, [pc, #156]	@ (8010c48 <prvHeapInit+0xac>)
 8010baa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	f003 0307 	and.w	r3, r3, #7
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d00c      	beq.n	8010bd0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	3307      	adds	r3, #7
 8010bba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	f023 0307 	bic.w	r3, r3, #7
 8010bc2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010bc4:	68ba      	ldr	r2, [r7, #8]
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	1ad3      	subs	r3, r2, r3
 8010bca:	4a1f      	ldr	r2, [pc, #124]	@ (8010c48 <prvHeapInit+0xac>)
 8010bcc:	4413      	add	r3, r2
 8010bce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010bd4:	4a1d      	ldr	r2, [pc, #116]	@ (8010c4c <prvHeapInit+0xb0>)
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010bda:	4b1c      	ldr	r3, [pc, #112]	@ (8010c4c <prvHeapInit+0xb0>)
 8010bdc:	2200      	movs	r2, #0
 8010bde:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	68ba      	ldr	r2, [r7, #8]
 8010be4:	4413      	add	r3, r2
 8010be6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010be8:	2208      	movs	r2, #8
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	1a9b      	subs	r3, r3, r2
 8010bee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	f023 0307 	bic.w	r3, r3, #7
 8010bf6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	4a15      	ldr	r2, [pc, #84]	@ (8010c50 <prvHeapInit+0xb4>)
 8010bfc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010bfe:	4b14      	ldr	r3, [pc, #80]	@ (8010c50 <prvHeapInit+0xb4>)
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	2200      	movs	r2, #0
 8010c04:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010c06:	4b12      	ldr	r3, [pc, #72]	@ (8010c50 <prvHeapInit+0xb4>)
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010c12:	683b      	ldr	r3, [r7, #0]
 8010c14:	68fa      	ldr	r2, [r7, #12]
 8010c16:	1ad2      	subs	r2, r2, r3
 8010c18:	683b      	ldr	r3, [r7, #0]
 8010c1a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8010c50 <prvHeapInit+0xb4>)
 8010c1e:	681a      	ldr	r2, [r3, #0]
 8010c20:	683b      	ldr	r3, [r7, #0]
 8010c22:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010c24:	683b      	ldr	r3, [r7, #0]
 8010c26:	685b      	ldr	r3, [r3, #4]
 8010c28:	4a0a      	ldr	r2, [pc, #40]	@ (8010c54 <prvHeapInit+0xb8>)
 8010c2a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010c2c:	683b      	ldr	r3, [r7, #0]
 8010c2e:	685b      	ldr	r3, [r3, #4]
 8010c30:	4a09      	ldr	r2, [pc, #36]	@ (8010c58 <prvHeapInit+0xbc>)
 8010c32:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010c34:	4b09      	ldr	r3, [pc, #36]	@ (8010c5c <prvHeapInit+0xc0>)
 8010c36:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8010c3a:	601a      	str	r2, [r3, #0]
}
 8010c3c:	bf00      	nop
 8010c3e:	3714      	adds	r7, #20
 8010c40:	46bd      	mov	sp, r7
 8010c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c46:	4770      	bx	lr
 8010c48:	2000f0d4 	.word	0x2000f0d4
 8010c4c:	200270d4 	.word	0x200270d4
 8010c50:	200270dc 	.word	0x200270dc
 8010c54:	200270e4 	.word	0x200270e4
 8010c58:	200270e0 	.word	0x200270e0
 8010c5c:	200270e8 	.word	0x200270e8

08010c60 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010c60:	b480      	push	{r7}
 8010c62:	b085      	sub	sp, #20
 8010c64:	af00      	add	r7, sp, #0
 8010c66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010c68:	4b28      	ldr	r3, [pc, #160]	@ (8010d0c <prvInsertBlockIntoFreeList+0xac>)
 8010c6a:	60fb      	str	r3, [r7, #12]
 8010c6c:	e002      	b.n	8010c74 <prvInsertBlockIntoFreeList+0x14>
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	60fb      	str	r3, [r7, #12]
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	687a      	ldr	r2, [r7, #4]
 8010c7a:	429a      	cmp	r2, r3
 8010c7c:	d8f7      	bhi.n	8010c6e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	685b      	ldr	r3, [r3, #4]
 8010c86:	68ba      	ldr	r2, [r7, #8]
 8010c88:	4413      	add	r3, r2
 8010c8a:	687a      	ldr	r2, [r7, #4]
 8010c8c:	429a      	cmp	r2, r3
 8010c8e:	d108      	bne.n	8010ca2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	685a      	ldr	r2, [r3, #4]
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	685b      	ldr	r3, [r3, #4]
 8010c98:	441a      	add	r2, r3
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	685b      	ldr	r3, [r3, #4]
 8010caa:	68ba      	ldr	r2, [r7, #8]
 8010cac:	441a      	add	r2, r3
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	429a      	cmp	r2, r3
 8010cb4:	d118      	bne.n	8010ce8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	681a      	ldr	r2, [r3, #0]
 8010cba:	4b15      	ldr	r3, [pc, #84]	@ (8010d10 <prvInsertBlockIntoFreeList+0xb0>)
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	429a      	cmp	r2, r3
 8010cc0:	d00d      	beq.n	8010cde <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	685a      	ldr	r2, [r3, #4]
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	685b      	ldr	r3, [r3, #4]
 8010ccc:	441a      	add	r2, r3
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	681a      	ldr	r2, [r3, #0]
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	601a      	str	r2, [r3, #0]
 8010cdc:	e008      	b.n	8010cf0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010cde:	4b0c      	ldr	r3, [pc, #48]	@ (8010d10 <prvInsertBlockIntoFreeList+0xb0>)
 8010ce0:	681a      	ldr	r2, [r3, #0]
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	601a      	str	r2, [r3, #0]
 8010ce6:	e003      	b.n	8010cf0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	681a      	ldr	r2, [r3, #0]
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010cf0:	68fa      	ldr	r2, [r7, #12]
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	429a      	cmp	r2, r3
 8010cf6:	d002      	beq.n	8010cfe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	687a      	ldr	r2, [r7, #4]
 8010cfc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010cfe:	bf00      	nop
 8010d00:	3714      	adds	r7, #20
 8010d02:	46bd      	mov	sp, r7
 8010d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d08:	4770      	bx	lr
 8010d0a:	bf00      	nop
 8010d0c:	200270d4 	.word	0x200270d4
 8010d10:	200270dc 	.word	0x200270dc

08010d14 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8010d14:	b580      	push	{r7, lr}
 8010d16:	b084      	sub	sp, #16
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	6078      	str	r0, [r7, #4]
 8010d1c:	6039      	str	r1, [r7, #0]
  err_t err;

#ifdef LWIP_DEBUG
  /* catch functions that don't set err */
  apimsg->err = ERR_VAL;
 8010d1e:	683b      	ldr	r3, [r7, #0]
 8010d20:	22fa      	movs	r2, #250	@ 0xfa
 8010d22:	711a      	strb	r2, [r3, #4]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8010d24:	683b      	ldr	r3, [r7, #0]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	330c      	adds	r3, #12
 8010d2a:	461a      	mov	r2, r3
 8010d2c:	6839      	ldr	r1, [r7, #0]
 8010d2e:	6878      	ldr	r0, [r7, #4]
 8010d30:	f002 f816 	bl	8012d60 <tcpip_send_msg_wait_sem>
 8010d34:	4603      	mov	r3, r0
 8010d36:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8010d38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d103      	bne.n	8010d48 <netconn_apimsg+0x34>
    return apimsg->err;
 8010d40:	683b      	ldr	r3, [r7, #0]
 8010d42:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010d46:	e001      	b.n	8010d4c <netconn_apimsg+0x38>
  }
  return err;
 8010d48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	3710      	adds	r7, #16
 8010d50:	46bd      	mov	sp, r7
 8010d52:	bd80      	pop	{r7, pc}

08010d54 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b08c      	sub	sp, #48	@ 0x30
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	4603      	mov	r3, r0
 8010d5c:	603a      	str	r2, [r7, #0]
 8010d5e:	71fb      	strb	r3, [r7, #7]
 8010d60:	460b      	mov	r3, r1
 8010d62:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8010d64:	79fb      	ldrb	r3, [r7, #7]
 8010d66:	6839      	ldr	r1, [r7, #0]
 8010d68:	4618      	mov	r0, r3
 8010d6a:	f000 ff21 	bl	8011bb0 <netconn_alloc>
 8010d6e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 8010d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d054      	beq.n	8010e20 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8010d76:	79bb      	ldrb	r3, [r7, #6]
 8010d78:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8010d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d7c:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8010d7e:	f107 0308 	add.w	r3, r7, #8
 8010d82:	4619      	mov	r1, r3
 8010d84:	4829      	ldr	r0, [pc, #164]	@ (8010e2c <netconn_new_with_proto_and_callback+0xd8>)
 8010d86:	f7ff ffc5 	bl	8010d14 <netconn_apimsg>
 8010d8a:	4603      	mov	r3, r0
 8010d8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 8010d90:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d043      	beq.n	8010e20 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8010d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d9a:	685b      	ldr	r3, [r3, #4]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d005      	beq.n	8010dac <netconn_new_with_proto_and_callback+0x58>
 8010da0:	4b23      	ldr	r3, [pc, #140]	@ (8010e30 <netconn_new_with_proto_and_callback+0xdc>)
 8010da2:	22a3      	movs	r2, #163	@ 0xa3
 8010da4:	4923      	ldr	r1, [pc, #140]	@ (8010e34 <netconn_new_with_proto_and_callback+0xe0>)
 8010da6:	4824      	ldr	r0, [pc, #144]	@ (8010e38 <netconn_new_with_proto_and_callback+0xe4>)
 8010da8:	f00f fcf6 	bl	8020798 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8010dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010dae:	3310      	adds	r3, #16
 8010db0:	4618      	mov	r0, r3
 8010db2:	f00e f8fb 	bl	801efac <sys_mbox_valid>
 8010db6:	4603      	mov	r3, r0
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d105      	bne.n	8010dc8 <netconn_new_with_proto_and_callback+0x74>
 8010dbc:	4b1c      	ldr	r3, [pc, #112]	@ (8010e30 <netconn_new_with_proto_and_callback+0xdc>)
 8010dbe:	22a4      	movs	r2, #164	@ 0xa4
 8010dc0:	491e      	ldr	r1, [pc, #120]	@ (8010e3c <netconn_new_with_proto_and_callback+0xe8>)
 8010dc2:	481d      	ldr	r0, [pc, #116]	@ (8010e38 <netconn_new_with_proto_and_callback+0xe4>)
 8010dc4:	f00f fce8 	bl	8020798 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8010dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010dca:	3314      	adds	r3, #20
 8010dcc:	4618      	mov	r0, r3
 8010dce:	f00e f8ed 	bl	801efac <sys_mbox_valid>
 8010dd2:	4603      	mov	r3, r0
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d005      	beq.n	8010de4 <netconn_new_with_proto_and_callback+0x90>
 8010dd8:	4b15      	ldr	r3, [pc, #84]	@ (8010e30 <netconn_new_with_proto_and_callback+0xdc>)
 8010dda:	22a6      	movs	r2, #166	@ 0xa6
 8010ddc:	4918      	ldr	r1, [pc, #96]	@ (8010e40 <netconn_new_with_proto_and_callback+0xec>)
 8010dde:	4816      	ldr	r0, [pc, #88]	@ (8010e38 <netconn_new_with_proto_and_callback+0xe4>)
 8010de0:	f00f fcda 	bl	8020798 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8010de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010de6:	330c      	adds	r3, #12
 8010de8:	4618      	mov	r0, r3
 8010dea:	f00e f999 	bl	801f120 <sys_sem_valid>
 8010dee:	4603      	mov	r3, r0
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d105      	bne.n	8010e00 <netconn_new_with_proto_and_callback+0xac>
 8010df4:	4b0e      	ldr	r3, [pc, #56]	@ (8010e30 <netconn_new_with_proto_and_callback+0xdc>)
 8010df6:	22a9      	movs	r2, #169	@ 0xa9
 8010df8:	4912      	ldr	r1, [pc, #72]	@ (8010e44 <netconn_new_with_proto_and_callback+0xf0>)
 8010dfa:	480f      	ldr	r0, [pc, #60]	@ (8010e38 <netconn_new_with_proto_and_callback+0xe4>)
 8010dfc:	f00f fccc 	bl	8020798 <iprintf>
      sys_sem_free(&conn->op_completed);
 8010e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e02:	330c      	adds	r3, #12
 8010e04:	4618      	mov	r0, r3
 8010e06:	f00e f973 	bl	801f0f0 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8010e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e0c:	3310      	adds	r3, #16
 8010e0e:	4618      	mov	r0, r3
 8010e10:	f00e f838 	bl	801ee84 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8010e14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010e16:	2007      	movs	r0, #7
 8010e18:	f002 fe4a 	bl	8013ab0 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	e000      	b.n	8010e22 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8010e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8010e22:	4618      	mov	r0, r3
 8010e24:	3730      	adds	r7, #48	@ 0x30
 8010e26:	46bd      	mov	sp, r7
 8010e28:	bd80      	pop	{r7, pc}
 8010e2a:	bf00      	nop
 8010e2c:	08011b85 	.word	0x08011b85
 8010e30:	08021978 	.word	0x08021978
 8010e34:	080219ac 	.word	0x080219ac
 8010e38:	080219d0 	.word	0x080219d0
 8010e3c:	080219f8 	.word	0x080219f8
 8010e40:	08021a10 	.word	0x08021a10
 8010e44:	08021a34 	.word	0x08021a34

08010e48 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	b08c      	sub	sp, #48	@ 0x30
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d101      	bne.n	8010e5a <netconn_prepare_delete+0x12>
    return ERR_OK;
 8010e56:	2300      	movs	r3, #0
 8010e58:	e014      	b.n	8010e84 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8010e5e:	2329      	movs	r3, #41	@ 0x29
 8010e60:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8010e62:	f107 030c 	add.w	r3, r7, #12
 8010e66:	4619      	mov	r1, r3
 8010e68:	4808      	ldr	r0, [pc, #32]	@ (8010e8c <netconn_prepare_delete+0x44>)
 8010e6a:	f7ff ff53 	bl	8010d14 <netconn_apimsg>
 8010e6e:	4603      	mov	r3, r0
 8010e70:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8010e74:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d002      	beq.n	8010e82 <netconn_prepare_delete+0x3a>
    return err;
 8010e7c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8010e80:	e000      	b.n	8010e84 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8010e82:	2300      	movs	r3, #0
}
 8010e84:	4618      	mov	r0, r3
 8010e86:	3730      	adds	r7, #48	@ 0x30
 8010e88:	46bd      	mov	sp, r7
 8010e8a:	bd80      	pop	{r7, pc}
 8010e8c:	080120f1 	.word	0x080120f1

08010e90 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b084      	sub	sp, #16
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d101      	bne.n	8010ea2 <netconn_delete+0x12>
    return ERR_OK;
 8010e9e:	2300      	movs	r3, #0
 8010ea0:	e00d      	b.n	8010ebe <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8010ea2:	6878      	ldr	r0, [r7, #4]
 8010ea4:	f7ff ffd0 	bl	8010e48 <netconn_prepare_delete>
 8010ea8:	4603      	mov	r3, r0
 8010eaa:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8010eac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d102      	bne.n	8010eba <netconn_delete+0x2a>
    netconn_free(conn);
 8010eb4:	6878      	ldr	r0, [r7, #4]
 8010eb6:	f000 fee9 	bl	8011c8c <netconn_free>
  }
  return err;
 8010eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	3710      	adds	r7, #16
 8010ec2:	46bd      	mov	sp, r7
 8010ec4:	bd80      	pop	{r7, pc}
	...

08010ec8 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8010ec8:	b580      	push	{r7, lr}
 8010eca:	b08e      	sub	sp, #56	@ 0x38
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	60f8      	str	r0, [r7, #12]
 8010ed0:	60b9      	str	r1, [r7, #8]
 8010ed2:	4613      	mov	r3, r2
 8010ed4:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d109      	bne.n	8010ef0 <netconn_bind+0x28>
 8010edc:	4b11      	ldr	r3, [pc, #68]	@ (8010f24 <netconn_bind+0x5c>)
 8010ede:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8010ee2:	4911      	ldr	r1, [pc, #68]	@ (8010f28 <netconn_bind+0x60>)
 8010ee4:	4811      	ldr	r0, [pc, #68]	@ (8010f2c <netconn_bind+0x64>)
 8010ee6:	f00f fc57 	bl	8020798 <iprintf>
 8010eea:	f06f 030f 	mvn.w	r3, #15
 8010eee:	e015      	b.n	8010f1c <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8010ef0:	68bb      	ldr	r3, [r7, #8]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d101      	bne.n	8010efa <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8010ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8010f30 <netconn_bind+0x68>)
 8010ef8:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8010efe:	68bb      	ldr	r3, [r7, #8]
 8010f00:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8010f02:	88fb      	ldrh	r3, [r7, #6]
 8010f04:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8010f06:	f107 0314 	add.w	r3, r7, #20
 8010f0a:	4619      	mov	r1, r3
 8010f0c:	4809      	ldr	r0, [pc, #36]	@ (8010f34 <netconn_bind+0x6c>)
 8010f0e:	f7ff ff01 	bl	8010d14 <netconn_apimsg>
 8010f12:	4603      	mov	r3, r0
 8010f14:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8010f18:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	3738      	adds	r7, #56	@ 0x38
 8010f20:	46bd      	mov	sp, r7
 8010f22:	bd80      	pop	{r7, pc}
 8010f24:	08021978 	.word	0x08021978
 8010f28:	08021ab0 	.word	0x08021ab0
 8010f2c:	080219d0 	.word	0x080219d0
 8010f30:	08026884 	.word	0x08026884
 8010f34:	080122b9 	.word	0x080122b9

08010f38 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	b088      	sub	sp, #32
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	60f8      	str	r0, [r7, #12]
 8010f40:	60b9      	str	r1, [r7, #8]
 8010f42:	4613      	mov	r3, r2
 8010f44:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8010f46:	2300      	movs	r3, #0
 8010f48:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8010f4a:	68bb      	ldr	r3, [r7, #8]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d109      	bne.n	8010f64 <netconn_recv_data+0x2c>
 8010f50:	4b58      	ldr	r3, [pc, #352]	@ (80110b4 <netconn_recv_data+0x17c>)
 8010f52:	f44f 7212 	mov.w	r2, #584	@ 0x248
 8010f56:	4958      	ldr	r1, [pc, #352]	@ (80110b8 <netconn_recv_data+0x180>)
 8010f58:	4858      	ldr	r0, [pc, #352]	@ (80110bc <netconn_recv_data+0x184>)
 8010f5a:	f00f fc1d 	bl	8020798 <iprintf>
 8010f5e:	f06f 030f 	mvn.w	r3, #15
 8010f62:	e0a2      	b.n	80110aa <netconn_recv_data+0x172>
  *new_buf = NULL;
 8010f64:	68bb      	ldr	r3, [r7, #8]
 8010f66:	2200      	movs	r2, #0
 8010f68:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d109      	bne.n	8010f84 <netconn_recv_data+0x4c>
 8010f70:	4b50      	ldr	r3, [pc, #320]	@ (80110b4 <netconn_recv_data+0x17c>)
 8010f72:	f240 224a 	movw	r2, #586	@ 0x24a
 8010f76:	4952      	ldr	r1, [pc, #328]	@ (80110c0 <netconn_recv_data+0x188>)
 8010f78:	4850      	ldr	r0, [pc, #320]	@ (80110bc <netconn_recv_data+0x184>)
 8010f7a:	f00f fc0d 	bl	8020798 <iprintf>
 8010f7e:	f06f 030f 	mvn.w	r3, #15
 8010f82:	e092      	b.n	80110aa <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	3310      	adds	r3, #16
 8010f88:	4618      	mov	r0, r3
 8010f8a:	f00e f80f 	bl	801efac <sys_mbox_valid>
 8010f8e:	4603      	mov	r3, r0
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d10e      	bne.n	8010fb2 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8010f94:	68f8      	ldr	r0, [r7, #12]
 8010f96:	f000 fa45 	bl	8011424 <netconn_err>
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8010f9e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d002      	beq.n	8010fac <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8010fa6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8010faa:	e07e      	b.n	80110aa <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8010fac:	f06f 030a 	mvn.w	r3, #10
 8010fb0:	e07b      	b.n	80110aa <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	7f1b      	ldrb	r3, [r3, #28]
 8010fb6:	f003 0302 	and.w	r3, r3, #2
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d10f      	bne.n	8010fde <netconn_recv_data+0xa6>
 8010fbe:	79fb      	ldrb	r3, [r7, #7]
 8010fc0:	f003 0304 	and.w	r3, r3, #4
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d10a      	bne.n	8010fde <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	7f1b      	ldrb	r3, [r3, #28]
 8010fcc:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d104      	bne.n	8010fde <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d023      	beq.n	8011026 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	3310      	adds	r3, #16
 8010fe2:	f107 0218 	add.w	r2, r7, #24
 8010fe6:	4611      	mov	r1, r2
 8010fe8:	4618      	mov	r0, r3
 8010fea:	f00d ffc8 	bl	801ef7e <sys_arch_mbox_tryfetch>
 8010fee:	4603      	mov	r3, r0
 8010ff0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010ff4:	d11f      	bne.n	8011036 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8010ff6:	68f8      	ldr	r0, [r7, #12]
 8010ff8:	f000 fa14 	bl	8011424 <netconn_err>
 8010ffc:	4603      	mov	r3, r0
 8010ffe:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8011000:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d002      	beq.n	801100e <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8011008:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801100c:	e04d      	b.n	80110aa <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	7f1b      	ldrb	r3, [r3, #28]
 8011012:	f003 0301 	and.w	r3, r3, #1
 8011016:	2b00      	cmp	r3, #0
 8011018:	d002      	beq.n	8011020 <netconn_recv_data+0xe8>
        return ERR_CONN;
 801101a:	f06f 030a 	mvn.w	r3, #10
 801101e:	e044      	b.n	80110aa <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8011020:	f06f 0306 	mvn.w	r3, #6
 8011024:	e041      	b.n	80110aa <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	3310      	adds	r3, #16
 801102a:	f107 0118 	add.w	r1, r7, #24
 801102e:	2200      	movs	r2, #0
 8011030:	4618      	mov	r0, r3
 8011032:	f00d ff73 	bl	801ef1c <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	781b      	ldrb	r3, [r3, #0]
 801103a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801103e:	2b10      	cmp	r3, #16
 8011040:	d117      	bne.n	8011072 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8011042:	69bb      	ldr	r3, [r7, #24]
 8011044:	f107 0217 	add.w	r2, r7, #23
 8011048:	4611      	mov	r1, r2
 801104a:	4618      	mov	r0, r3
 801104c:	f000 fa3c 	bl	80114c8 <lwip_netconn_is_err_msg>
 8011050:	4603      	mov	r3, r0
 8011052:	2b00      	cmp	r3, #0
 8011054:	d009      	beq.n	801106a <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8011056:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801105a:	f113 0f0f 	cmn.w	r3, #15
 801105e:	d101      	bne.n	8011064 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8011060:	2300      	movs	r3, #0
 8011062:	e022      	b.n	80110aa <netconn_recv_data+0x172>
      }
      return err;
 8011064:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011068:	e01f      	b.n	80110aa <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 801106a:	69bb      	ldr	r3, [r7, #24]
 801106c:	891b      	ldrh	r3, [r3, #8]
 801106e:	83fb      	strh	r3, [r7, #30]
 8011070:	e00d      	b.n	801108e <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8011072:	69bb      	ldr	r3, [r7, #24]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d106      	bne.n	8011086 <netconn_recv_data+0x14e>
 8011078:	4b0e      	ldr	r3, [pc, #56]	@ (80110b4 <netconn_recv_data+0x17c>)
 801107a:	f240 2291 	movw	r2, #657	@ 0x291
 801107e:	4911      	ldr	r1, [pc, #68]	@ (80110c4 <netconn_recv_data+0x18c>)
 8011080:	480e      	ldr	r0, [pc, #56]	@ (80110bc <netconn_recv_data+0x184>)
 8011082:	f00f fb89 	bl	8020798 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8011086:	69bb      	ldr	r3, [r7, #24]
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	891b      	ldrh	r3, [r3, #8]
 801108c:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011092:	2b00      	cmp	r3, #0
 8011094:	d005      	beq.n	80110a2 <netconn_recv_data+0x16a>
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801109a:	8bfa      	ldrh	r2, [r7, #30]
 801109c:	2101      	movs	r1, #1
 801109e:	68f8      	ldr	r0, [r7, #12]
 80110a0:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 80110a2:	69ba      	ldr	r2, [r7, #24]
 80110a4:	68bb      	ldr	r3, [r7, #8]
 80110a6:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80110a8:	2300      	movs	r3, #0
}
 80110aa:	4618      	mov	r0, r3
 80110ac:	3720      	adds	r7, #32
 80110ae:	46bd      	mov	sp, r7
 80110b0:	bd80      	pop	{r7, pc}
 80110b2:	bf00      	nop
 80110b4:	08021978 	.word	0x08021978
 80110b8:	08021b90 	.word	0x08021b90
 80110bc:	080219d0 	.word	0x080219d0
 80110c0:	08021bb0 	.word	0x08021bb0
 80110c4:	08021bcc 	.word	0x08021bcc

080110c8 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b084      	sub	sp, #16
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	60f8      	str	r0, [r7, #12]
 80110d0:	60b9      	str	r1, [r7, #8]
 80110d2:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d005      	beq.n	80110e6 <netconn_tcp_recvd_msg+0x1e>
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	781b      	ldrb	r3, [r3, #0]
 80110de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80110e2:	2b10      	cmp	r3, #16
 80110e4:	d009      	beq.n	80110fa <netconn_tcp_recvd_msg+0x32>
 80110e6:	4b0c      	ldr	r3, [pc, #48]	@ (8011118 <netconn_tcp_recvd_msg+0x50>)
 80110e8:	f240 22a7 	movw	r2, #679	@ 0x2a7
 80110ec:	490b      	ldr	r1, [pc, #44]	@ (801111c <netconn_tcp_recvd_msg+0x54>)
 80110ee:	480c      	ldr	r0, [pc, #48]	@ (8011120 <netconn_tcp_recvd_msg+0x58>)
 80110f0:	f00f fb52 	bl	8020798 <iprintf>
 80110f4:	f06f 030f 	mvn.w	r3, #15
 80110f8:	e00a      	b.n	8011110 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	68fa      	ldr	r2, [r7, #12]
 80110fe:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	68ba      	ldr	r2, [r7, #8]
 8011104:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8011106:	6879      	ldr	r1, [r7, #4]
 8011108:	4806      	ldr	r0, [pc, #24]	@ (8011124 <netconn_tcp_recvd_msg+0x5c>)
 801110a:	f7ff fe03 	bl	8010d14 <netconn_apimsg>
 801110e:	4603      	mov	r3, r0
}
 8011110:	4618      	mov	r0, r3
 8011112:	3710      	adds	r7, #16
 8011114:	46bd      	mov	sp, r7
 8011116:	bd80      	pop	{r7, pc}
 8011118:	08021978 	.word	0x08021978
 801111c:	08021bd8 	.word	0x08021bd8
 8011120:	080219d0 	.word	0x080219d0
 8011124:	080123c7 	.word	0x080123c7

08011128 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8011128:	b580      	push	{r7, lr}
 801112a:	b090      	sub	sp, #64	@ 0x40
 801112c:	af00      	add	r7, sp, #0
 801112e:	60f8      	str	r0, [r7, #12]
 8011130:	60b9      	str	r1, [r7, #8]
 8011132:	4613      	mov	r3, r2
 8011134:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	3310      	adds	r3, #16
 801113a:	4618      	mov	r0, r3
 801113c:	f00d ff36 	bl	801efac <sys_mbox_valid>
 8011140:	4603      	mov	r3, r0
 8011142:	2b00      	cmp	r3, #0
 8011144:	d102      	bne.n	801114c <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8011146:	f06f 030a 	mvn.w	r3, #10
 801114a:	e06d      	b.n	8011228 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	7f1b      	ldrb	r3, [r3, #28]
 8011150:	b25b      	sxtb	r3, r3
 8011152:	2b00      	cmp	r3, #0
 8011154:	da07      	bge.n	8011166 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	7f1b      	ldrb	r3, [r3, #28]
 801115a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801115e:	b2da      	uxtb	r2, r3
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8011164:	e039      	b.n	80111da <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8011166:	79fb      	ldrb	r3, [r7, #7]
 8011168:	461a      	mov	r2, r3
 801116a:	68b9      	ldr	r1, [r7, #8]
 801116c:	68f8      	ldr	r0, [r7, #12]
 801116e:	f7ff fee3 	bl	8010f38 <netconn_recv_data>
 8011172:	4603      	mov	r3, r0
 8011174:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 8011178:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 801117c:	2b00      	cmp	r3, #0
 801117e:	d002      	beq.n	8011186 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8011180:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8011184:	e050      	b.n	8011228 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8011186:	68bb      	ldr	r3, [r7, #8]
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 801118c:	79fb      	ldrb	r3, [r7, #7]
 801118e:	f003 0308 	and.w	r3, r3, #8
 8011192:	2b00      	cmp	r3, #0
 8011194:	d10e      	bne.n	80111b4 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8011196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011198:	2b00      	cmp	r3, #0
 801119a:	d002      	beq.n	80111a2 <netconn_recv_data_tcp+0x7a>
 801119c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801119e:	891b      	ldrh	r3, [r3, #8]
 80111a0:	e000      	b.n	80111a4 <netconn_recv_data_tcp+0x7c>
 80111a2:	2301      	movs	r3, #1
 80111a4:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 80111a6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80111a8:	f107 0214 	add.w	r2, r7, #20
 80111ac:	4619      	mov	r1, r3
 80111ae:	68f8      	ldr	r0, [r7, #12]
 80111b0:	f7ff ff8a 	bl	80110c8 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 80111b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d134      	bne.n	8011224 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 80111ba:	79fb      	ldrb	r3, [r7, #7]
 80111bc:	f003 0310 	and.w	r3, r3, #16
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d009      	beq.n	80111d8 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	7f1b      	ldrb	r3, [r3, #28]
 80111c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80111cc:	b2da      	uxtb	r2, r3
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 80111d2:	f06f 0306 	mvn.w	r3, #6
 80111d6:	e027      	b.n	8011228 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 80111d8:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d005      	beq.n	80111ee <netconn_recv_data_tcp+0xc6>
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111e6:	2200      	movs	r2, #0
 80111e8:	2101      	movs	r1, #1
 80111ea:	68f8      	ldr	r0, [r7, #12]
 80111ec:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	685b      	ldr	r3, [r3, #4]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d10f      	bne.n	8011216 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 80111f6:	68f8      	ldr	r0, [r7, #12]
 80111f8:	f000 f914 	bl	8011424 <netconn_err>
 80111fc:	4603      	mov	r3, r0
 80111fe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 8011202:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8011206:	2b00      	cmp	r3, #0
 8011208:	d002      	beq.n	8011210 <netconn_recv_data_tcp+0xe8>
          return err;
 801120a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 801120e:	e00b      	b.n	8011228 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8011210:	f06f 030d 	mvn.w	r3, #13
 8011214:	e008      	b.n	8011228 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8011216:	2101      	movs	r1, #1
 8011218:	68f8      	ldr	r0, [r7, #12]
 801121a:	f000 f8d3 	bl	80113c4 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 801121e:	f06f 030e 	mvn.w	r3, #14
 8011222:	e001      	b.n	8011228 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8011224:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8011228:	4618      	mov	r0, r3
 801122a:	3740      	adds	r7, #64	@ 0x40
 801122c:	46bd      	mov	sp, r7
 801122e:	bd80      	pop	{r7, pc}

08011230 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8011230:	b580      	push	{r7, lr}
 8011232:	b086      	sub	sp, #24
 8011234:	af00      	add	r7, sp, #0
 8011236:	6078      	str	r0, [r7, #4]
 8011238:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 801123a:	2300      	movs	r3, #0
 801123c:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 801123e:	683b      	ldr	r3, [r7, #0]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d109      	bne.n	8011258 <netconn_recv+0x28>
 8011244:	4b32      	ldr	r3, [pc, #200]	@ (8011310 <netconn_recv+0xe0>)
 8011246:	f240 3263 	movw	r2, #867	@ 0x363
 801124a:	4932      	ldr	r1, [pc, #200]	@ (8011314 <netconn_recv+0xe4>)
 801124c:	4832      	ldr	r0, [pc, #200]	@ (8011318 <netconn_recv+0xe8>)
 801124e:	f00f faa3 	bl	8020798 <iprintf>
 8011252:	f06f 030f 	mvn.w	r3, #15
 8011256:	e056      	b.n	8011306 <netconn_recv+0xd6>
  *new_buf = NULL;
 8011258:	683b      	ldr	r3, [r7, #0]
 801125a:	2200      	movs	r2, #0
 801125c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	2b00      	cmp	r3, #0
 8011262:	d109      	bne.n	8011278 <netconn_recv+0x48>
 8011264:	4b2a      	ldr	r3, [pc, #168]	@ (8011310 <netconn_recv+0xe0>)
 8011266:	f240 3265 	movw	r2, #869	@ 0x365
 801126a:	492c      	ldr	r1, [pc, #176]	@ (801131c <netconn_recv+0xec>)
 801126c:	482a      	ldr	r0, [pc, #168]	@ (8011318 <netconn_recv+0xe8>)
 801126e:	f00f fa93 	bl	8020798 <iprintf>
 8011272:	f06f 030f 	mvn.w	r3, #15
 8011276:	e046      	b.n	8011306 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	781b      	ldrb	r3, [r3, #0]
 801127c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011280:	2b10      	cmp	r3, #16
 8011282:	d13a      	bne.n	80112fa <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8011284:	2300      	movs	r3, #0
 8011286:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8011288:	2006      	movs	r0, #6
 801128a:	f002 fb95 	bl	80139b8 <memp_malloc>
 801128e:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8011290:	697b      	ldr	r3, [r7, #20]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d102      	bne.n	801129c <netconn_recv+0x6c>
      return ERR_MEM;
 8011296:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801129a:	e034      	b.n	8011306 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 801129c:	f107 030c 	add.w	r3, r7, #12
 80112a0:	2200      	movs	r2, #0
 80112a2:	4619      	mov	r1, r3
 80112a4:	6878      	ldr	r0, [r7, #4]
 80112a6:	f7ff ff3f 	bl	8011128 <netconn_recv_data_tcp>
 80112aa:	4603      	mov	r3, r0
 80112ac:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80112ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d006      	beq.n	80112c4 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 80112b6:	6979      	ldr	r1, [r7, #20]
 80112b8:	2006      	movs	r0, #6
 80112ba:	f002 fbf9 	bl	8013ab0 <memp_free>
      return err;
 80112be:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80112c2:	e020      	b.n	8011306 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d106      	bne.n	80112d8 <netconn_recv+0xa8>
 80112ca:	4b11      	ldr	r3, [pc, #68]	@ (8011310 <netconn_recv+0xe0>)
 80112cc:	f240 3279 	movw	r2, #889	@ 0x379
 80112d0:	4913      	ldr	r1, [pc, #76]	@ (8011320 <netconn_recv+0xf0>)
 80112d2:	4811      	ldr	r0, [pc, #68]	@ (8011318 <netconn_recv+0xe8>)
 80112d4:	f00f fa60 	bl	8020798 <iprintf>

    buf->p = p;
 80112d8:	68fa      	ldr	r2, [r7, #12]
 80112da:	697b      	ldr	r3, [r7, #20]
 80112dc:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80112de:	68fa      	ldr	r2, [r7, #12]
 80112e0:	697b      	ldr	r3, [r7, #20]
 80112e2:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 80112e4:	697b      	ldr	r3, [r7, #20]
 80112e6:	2200      	movs	r2, #0
 80112e8:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 80112ea:	697b      	ldr	r3, [r7, #20]
 80112ec:	2200      	movs	r2, #0
 80112ee:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 80112f0:	683b      	ldr	r3, [r7, #0]
 80112f2:	697a      	ldr	r2, [r7, #20]
 80112f4:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 80112f6:	2300      	movs	r3, #0
 80112f8:	e005      	b.n	8011306 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 80112fa:	2200      	movs	r2, #0
 80112fc:	6839      	ldr	r1, [r7, #0]
 80112fe:	6878      	ldr	r0, [r7, #4]
 8011300:	f7ff fe1a 	bl	8010f38 <netconn_recv_data>
 8011304:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8011306:	4618      	mov	r0, r3
 8011308:	3718      	adds	r7, #24
 801130a:	46bd      	mov	sp, r7
 801130c:	bd80      	pop	{r7, pc}
 801130e:	bf00      	nop
 8011310:	08021978 	.word	0x08021978
 8011314:	08021b90 	.word	0x08021b90
 8011318:	080219d0 	.word	0x080219d0
 801131c:	08021bb0 	.word	0x08021bb0
 8011320:	08021c28 	.word	0x08021c28

08011324 <netconn_sendto>:
 * @param port the remote port to which to send the data
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_sendto(struct netconn *conn, struct netbuf *buf, const ip_addr_t *addr, u16_t port)
{
 8011324:	b580      	push	{r7, lr}
 8011326:	b084      	sub	sp, #16
 8011328:	af00      	add	r7, sp, #0
 801132a:	60f8      	str	r0, [r7, #12]
 801132c:	60b9      	str	r1, [r7, #8]
 801132e:	607a      	str	r2, [r7, #4]
 8011330:	807b      	strh	r3, [r7, #2]
  if (buf != NULL) {
 8011332:	68bb      	ldr	r3, [r7, #8]
 8011334:	2b00      	cmp	r3, #0
 8011336:	d011      	beq.n	801135c <netconn_sendto+0x38>
    ip_addr_set(&buf->addr, addr);
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d002      	beq.n	8011344 <netconn_sendto+0x20>
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	e000      	b.n	8011346 <netconn_sendto+0x22>
 8011344:	2300      	movs	r3, #0
 8011346:	68ba      	ldr	r2, [r7, #8]
 8011348:	6093      	str	r3, [r2, #8]
    buf->port = port;
 801134a:	68bb      	ldr	r3, [r7, #8]
 801134c:	887a      	ldrh	r2, [r7, #2]
 801134e:	819a      	strh	r2, [r3, #12]
    return netconn_send(conn, buf);
 8011350:	68b9      	ldr	r1, [r7, #8]
 8011352:	68f8      	ldr	r0, [r7, #12]
 8011354:	f000 f808 	bl	8011368 <netconn_send>
 8011358:	4603      	mov	r3, r0
 801135a:	e001      	b.n	8011360 <netconn_sendto+0x3c>
  }
  return ERR_VAL;
 801135c:	f06f 0305 	mvn.w	r3, #5
}
 8011360:	4618      	mov	r0, r3
 8011362:	3710      	adds	r7, #16
 8011364:	46bd      	mov	sp, r7
 8011366:	bd80      	pop	{r7, pc}

08011368 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8011368:	b580      	push	{r7, lr}
 801136a:	b08c      	sub	sp, #48	@ 0x30
 801136c:	af00      	add	r7, sp, #0
 801136e:	6078      	str	r0, [r7, #4]
 8011370:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	2b00      	cmp	r3, #0
 8011376:	d109      	bne.n	801138c <netconn_send+0x24>
 8011378:	4b0e      	ldr	r3, [pc, #56]	@ (80113b4 <netconn_send+0x4c>)
 801137a:	f240 32b2 	movw	r2, #946	@ 0x3b2
 801137e:	490e      	ldr	r1, [pc, #56]	@ (80113b8 <netconn_send+0x50>)
 8011380:	480e      	ldr	r0, [pc, #56]	@ (80113bc <netconn_send+0x54>)
 8011382:	f00f fa09 	bl	8020798 <iprintf>
 8011386:	f06f 030f 	mvn.w	r3, #15
 801138a:	e00e      	b.n	80113aa <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8011390:	683b      	ldr	r3, [r7, #0]
 8011392:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8011394:	f107 030c 	add.w	r3, r7, #12
 8011398:	4619      	mov	r1, r3
 801139a:	4809      	ldr	r0, [pc, #36]	@ (80113c0 <netconn_send+0x58>)
 801139c:	f7ff fcba 	bl	8010d14 <netconn_apimsg>
 80113a0:	4603      	mov	r3, r0
 80113a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80113a6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80113aa:	4618      	mov	r0, r3
 80113ac:	3730      	adds	r7, #48	@ 0x30
 80113ae:	46bd      	mov	sp, r7
 80113b0:	bd80      	pop	{r7, pc}
 80113b2:	bf00      	nop
 80113b4:	08021978 	.word	0x08021978
 80113b8:	08021c34 	.word	0x08021c34
 80113bc:	080219d0 	.word	0x080219d0
 80113c0:	0801232d 	.word	0x0801232d

080113c4 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80113c4:	b580      	push	{r7, lr}
 80113c6:	b08c      	sub	sp, #48	@ 0x30
 80113c8:	af00      	add	r7, sp, #0
 80113ca:	6078      	str	r0, [r7, #4]
 80113cc:	460b      	mov	r3, r1
 80113ce:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d109      	bne.n	80113ea <netconn_close_shutdown+0x26>
 80113d6:	4b0f      	ldr	r3, [pc, #60]	@ (8011414 <netconn_close_shutdown+0x50>)
 80113d8:	f240 4247 	movw	r2, #1095	@ 0x447
 80113dc:	490e      	ldr	r1, [pc, #56]	@ (8011418 <netconn_close_shutdown+0x54>)
 80113de:	480f      	ldr	r0, [pc, #60]	@ (801141c <netconn_close_shutdown+0x58>)
 80113e0:	f00f f9da 	bl	8020798 <iprintf>
 80113e4:	f06f 030f 	mvn.w	r3, #15
 80113e8:	e010      	b.n	801140c <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80113ee:	78fb      	ldrb	r3, [r7, #3]
 80113f0:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80113f2:	2329      	movs	r3, #41	@ 0x29
 80113f4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80113f6:	f107 030c 	add.w	r3, r7, #12
 80113fa:	4619      	mov	r1, r3
 80113fc:	4808      	ldr	r0, [pc, #32]	@ (8011420 <netconn_close_shutdown+0x5c>)
 80113fe:	f7ff fc89 	bl	8010d14 <netconn_apimsg>
 8011402:	4603      	mov	r3, r0
 8011404:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8011408:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 801140c:	4618      	mov	r0, r3
 801140e:	3730      	adds	r7, #48	@ 0x30
 8011410:	46bd      	mov	sp, r7
 8011412:	bd80      	pop	{r7, pc}
 8011414:	08021978 	.word	0x08021978
 8011418:	08021cb4 	.word	0x08021cb4
 801141c:	080219d0 	.word	0x080219d0
 8011420:	080127c9 	.word	0x080127c9

08011424 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8011424:	b580      	push	{r7, lr}
 8011426:	b084      	sub	sp, #16
 8011428:	af00      	add	r7, sp, #0
 801142a:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	2b00      	cmp	r3, #0
 8011430:	d101      	bne.n	8011436 <netconn_err+0x12>
    return ERR_OK;
 8011432:	2300      	movs	r3, #0
 8011434:	e00d      	b.n	8011452 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8011436:	f00d ff0f 	bl	801f258 <sys_arch_protect>
 801143a:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	7a1b      	ldrb	r3, [r3, #8]
 8011440:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	2200      	movs	r2, #0
 8011446:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8011448:	68f8      	ldr	r0, [r7, #12]
 801144a:	f00d ff13 	bl	801f274 <sys_arch_unprotect>
  return err;
 801144e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011452:	4618      	mov	r0, r3
 8011454:	3710      	adds	r7, #16
 8011456:	46bd      	mov	sp, r7
 8011458:	bd80      	pop	{r7, pc}
	...

0801145c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 801145c:	b580      	push	{r7, lr}
 801145e:	b082      	sub	sp, #8
 8011460:	af00      	add	r7, sp, #0
 8011462:	4603      	mov	r3, r0
 8011464:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8011466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801146a:	f113 0f0d 	cmn.w	r3, #13
 801146e:	d009      	beq.n	8011484 <lwip_netconn_err_to_msg+0x28>
 8011470:	f113 0f0d 	cmn.w	r3, #13
 8011474:	dc0c      	bgt.n	8011490 <lwip_netconn_err_to_msg+0x34>
 8011476:	f113 0f0f 	cmn.w	r3, #15
 801147a:	d007      	beq.n	801148c <lwip_netconn_err_to_msg+0x30>
 801147c:	f113 0f0e 	cmn.w	r3, #14
 8011480:	d002      	beq.n	8011488 <lwip_netconn_err_to_msg+0x2c>
 8011482:	e005      	b.n	8011490 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8011484:	4b0a      	ldr	r3, [pc, #40]	@ (80114b0 <lwip_netconn_err_to_msg+0x54>)
 8011486:	e00e      	b.n	80114a6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8011488:	4b0a      	ldr	r3, [pc, #40]	@ (80114b4 <lwip_netconn_err_to_msg+0x58>)
 801148a:	e00c      	b.n	80114a6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 801148c:	4b0a      	ldr	r3, [pc, #40]	@ (80114b8 <lwip_netconn_err_to_msg+0x5c>)
 801148e:	e00a      	b.n	80114a6 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8011490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d005      	beq.n	80114a4 <lwip_netconn_err_to_msg+0x48>
 8011498:	4b08      	ldr	r3, [pc, #32]	@ (80114bc <lwip_netconn_err_to_msg+0x60>)
 801149a:	227d      	movs	r2, #125	@ 0x7d
 801149c:	4908      	ldr	r1, [pc, #32]	@ (80114c0 <lwip_netconn_err_to_msg+0x64>)
 801149e:	4809      	ldr	r0, [pc, #36]	@ (80114c4 <lwip_netconn_err_to_msg+0x68>)
 80114a0:	f00f f97a 	bl	8020798 <iprintf>
      return NULL;
 80114a4:	2300      	movs	r3, #0
  }
}
 80114a6:	4618      	mov	r0, r3
 80114a8:	3708      	adds	r7, #8
 80114aa:	46bd      	mov	sp, r7
 80114ac:	bd80      	pop	{r7, pc}
 80114ae:	bf00      	nop
 80114b0:	08026708 	.word	0x08026708
 80114b4:	08026709 	.word	0x08026709
 80114b8:	0802670a 	.word	0x0802670a
 80114bc:	08021cd0 	.word	0x08021cd0
 80114c0:	08021d04 	.word	0x08021d04
 80114c4:	08021d14 	.word	0x08021d14

080114c8 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b082      	sub	sp, #8
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
 80114d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 80114d2:	683b      	ldr	r3, [r7, #0]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d105      	bne.n	80114e4 <lwip_netconn_is_err_msg+0x1c>
 80114d8:	4b12      	ldr	r3, [pc, #72]	@ (8011524 <lwip_netconn_is_err_msg+0x5c>)
 80114da:	2285      	movs	r2, #133	@ 0x85
 80114dc:	4912      	ldr	r1, [pc, #72]	@ (8011528 <lwip_netconn_is_err_msg+0x60>)
 80114de:	4813      	ldr	r0, [pc, #76]	@ (801152c <lwip_netconn_is_err_msg+0x64>)
 80114e0:	f00f f95a 	bl	8020798 <iprintf>

  if (msg == &netconn_aborted) {
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	4a12      	ldr	r2, [pc, #72]	@ (8011530 <lwip_netconn_is_err_msg+0x68>)
 80114e8:	4293      	cmp	r3, r2
 80114ea:	d104      	bne.n	80114f6 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 80114ec:	683b      	ldr	r3, [r7, #0]
 80114ee:	22f3      	movs	r2, #243	@ 0xf3
 80114f0:	701a      	strb	r2, [r3, #0]
    return 1;
 80114f2:	2301      	movs	r3, #1
 80114f4:	e012      	b.n	801151c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	4a0e      	ldr	r2, [pc, #56]	@ (8011534 <lwip_netconn_is_err_msg+0x6c>)
 80114fa:	4293      	cmp	r3, r2
 80114fc:	d104      	bne.n	8011508 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 80114fe:	683b      	ldr	r3, [r7, #0]
 8011500:	22f2      	movs	r2, #242	@ 0xf2
 8011502:	701a      	strb	r2, [r3, #0]
    return 1;
 8011504:	2301      	movs	r3, #1
 8011506:	e009      	b.n	801151c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	4a0b      	ldr	r2, [pc, #44]	@ (8011538 <lwip_netconn_is_err_msg+0x70>)
 801150c:	4293      	cmp	r3, r2
 801150e:	d104      	bne.n	801151a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8011510:	683b      	ldr	r3, [r7, #0]
 8011512:	22f1      	movs	r2, #241	@ 0xf1
 8011514:	701a      	strb	r2, [r3, #0]
    return 1;
 8011516:	2301      	movs	r3, #1
 8011518:	e000      	b.n	801151c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 801151a:	2300      	movs	r3, #0
}
 801151c:	4618      	mov	r0, r3
 801151e:	3708      	adds	r7, #8
 8011520:	46bd      	mov	sp, r7
 8011522:	bd80      	pop	{r7, pc}
 8011524:	08021cd0 	.word	0x08021cd0
 8011528:	08021d3c 	.word	0x08021d3c
 801152c:	08021d14 	.word	0x08021d14
 8011530:	08026708 	.word	0x08026708
 8011534:	08026709 	.word	0x08026709
 8011538:	0802670a 	.word	0x0802670a

0801153c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 801153c:	b580      	push	{r7, lr}
 801153e:	b088      	sub	sp, #32
 8011540:	af00      	add	r7, sp, #0
 8011542:	60f8      	str	r0, [r7, #12]
 8011544:	60b9      	str	r1, [r7, #8]
 8011546:	607a      	str	r2, [r7, #4]
 8011548:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 801154a:	68bb      	ldr	r3, [r7, #8]
 801154c:	2b00      	cmp	r3, #0
 801154e:	d105      	bne.n	801155c <recv_udp+0x20>
 8011550:	4b34      	ldr	r3, [pc, #208]	@ (8011624 <recv_udp+0xe8>)
 8011552:	22e5      	movs	r2, #229	@ 0xe5
 8011554:	4934      	ldr	r1, [pc, #208]	@ (8011628 <recv_udp+0xec>)
 8011556:	4835      	ldr	r0, [pc, #212]	@ (801162c <recv_udp+0xf0>)
 8011558:	f00f f91e 	bl	8020798 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	2b00      	cmp	r3, #0
 8011560:	d105      	bne.n	801156e <recv_udp+0x32>
 8011562:	4b30      	ldr	r3, [pc, #192]	@ (8011624 <recv_udp+0xe8>)
 8011564:	22e6      	movs	r2, #230	@ 0xe6
 8011566:	4932      	ldr	r1, [pc, #200]	@ (8011630 <recv_udp+0xf4>)
 8011568:	4830      	ldr	r0, [pc, #192]	@ (801162c <recv_udp+0xf0>)
 801156a:	f00f f915 	bl	8020798 <iprintf>
  conn = (struct netconn *)arg;
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8011572:	69fb      	ldr	r3, [r7, #28]
 8011574:	2b00      	cmp	r3, #0
 8011576:	d103      	bne.n	8011580 <recv_udp+0x44>
    pbuf_free(p);
 8011578:	6878      	ldr	r0, [r7, #4]
 801157a:	f003 fa7f 	bl	8014a7c <pbuf_free>
    return;
 801157e:	e04d      	b.n	801161c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8011580:	69fb      	ldr	r3, [r7, #28]
 8011582:	685b      	ldr	r3, [r3, #4]
 8011584:	68ba      	ldr	r2, [r7, #8]
 8011586:	429a      	cmp	r2, r3
 8011588:	d005      	beq.n	8011596 <recv_udp+0x5a>
 801158a:	4b26      	ldr	r3, [pc, #152]	@ (8011624 <recv_udp+0xe8>)
 801158c:	22ee      	movs	r2, #238	@ 0xee
 801158e:	4929      	ldr	r1, [pc, #164]	@ (8011634 <recv_udp+0xf8>)
 8011590:	4826      	ldr	r0, [pc, #152]	@ (801162c <recv_udp+0xf0>)
 8011592:	f00f f901 	bl	8020798 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8011596:	69fb      	ldr	r3, [r7, #28]
 8011598:	3310      	adds	r3, #16
 801159a:	4618      	mov	r0, r3
 801159c:	f00d fd06 	bl	801efac <sys_mbox_valid>
 80115a0:	4603      	mov	r3, r0
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d103      	bne.n	80115ae <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80115a6:	6878      	ldr	r0, [r7, #4]
 80115a8:	f003 fa68 	bl	8014a7c <pbuf_free>
    return;
 80115ac:	e036      	b.n	801161c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80115ae:	2006      	movs	r0, #6
 80115b0:	f002 fa02 	bl	80139b8 <memp_malloc>
 80115b4:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 80115b6:	69bb      	ldr	r3, [r7, #24]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d103      	bne.n	80115c4 <recv_udp+0x88>
    pbuf_free(p);
 80115bc:	6878      	ldr	r0, [r7, #4]
 80115be:	f003 fa5d 	bl	8014a7c <pbuf_free>
    return;
 80115c2:	e02b      	b.n	801161c <recv_udp+0xe0>
  } else {
    buf->p = p;
 80115c4:	69bb      	ldr	r3, [r7, #24]
 80115c6:	687a      	ldr	r2, [r7, #4]
 80115c8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80115ca:	69bb      	ldr	r3, [r7, #24]
 80115cc:	687a      	ldr	r2, [r7, #4]
 80115ce:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 80115d0:	683b      	ldr	r3, [r7, #0]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d002      	beq.n	80115dc <recv_udp+0xa0>
 80115d6:	683b      	ldr	r3, [r7, #0]
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	e000      	b.n	80115de <recv_udp+0xa2>
 80115dc:	2300      	movs	r3, #0
 80115de:	69ba      	ldr	r2, [r7, #24]
 80115e0:	6093      	str	r3, [r2, #8]
    buf->port = port;
 80115e2:	69bb      	ldr	r3, [r7, #24]
 80115e4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80115e6:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	891b      	ldrh	r3, [r3, #8]
 80115ec:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80115ee:	69fb      	ldr	r3, [r7, #28]
 80115f0:	3310      	adds	r3, #16
 80115f2:	69b9      	ldr	r1, [r7, #24]
 80115f4:	4618      	mov	r0, r3
 80115f6:	f00d fc6d 	bl	801eed4 <sys_mbox_trypost>
 80115fa:	4603      	mov	r3, r0
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d003      	beq.n	8011608 <recv_udp+0xcc>
    netbuf_delete(buf);
 8011600:	69b8      	ldr	r0, [r7, #24]
 8011602:	f001 f9a1 	bl	8012948 <netbuf_delete>
    return;
 8011606:	e009      	b.n	801161c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8011608:	69fb      	ldr	r3, [r7, #28]
 801160a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801160c:	2b00      	cmp	r3, #0
 801160e:	d005      	beq.n	801161c <recv_udp+0xe0>
 8011610:	69fb      	ldr	r3, [r7, #28]
 8011612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011614:	8afa      	ldrh	r2, [r7, #22]
 8011616:	2100      	movs	r1, #0
 8011618:	69f8      	ldr	r0, [r7, #28]
 801161a:	4798      	blx	r3
  }
}
 801161c:	3720      	adds	r7, #32
 801161e:	46bd      	mov	sp, r7
 8011620:	bd80      	pop	{r7, pc}
 8011622:	bf00      	nop
 8011624:	08021cd0 	.word	0x08021cd0
 8011628:	08021d48 	.word	0x08021d48
 801162c:	08021d14 	.word	0x08021d14
 8011630:	08021d6c 	.word	0x08021d6c
 8011634:	08021d8c 	.word	0x08021d8c

08011638 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8011638:	b580      	push	{r7, lr}
 801163a:	b088      	sub	sp, #32
 801163c:	af00      	add	r7, sp, #0
 801163e:	60f8      	str	r0, [r7, #12]
 8011640:	60b9      	str	r1, [r7, #8]
 8011642:	607a      	str	r2, [r7, #4]
 8011644:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8011646:	68bb      	ldr	r3, [r7, #8]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d106      	bne.n	801165a <recv_tcp+0x22>
 801164c:	4b36      	ldr	r3, [pc, #216]	@ (8011728 <recv_tcp+0xf0>)
 801164e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8011652:	4936      	ldr	r1, [pc, #216]	@ (801172c <recv_tcp+0xf4>)
 8011654:	4836      	ldr	r0, [pc, #216]	@ (8011730 <recv_tcp+0xf8>)
 8011656:	f00f f89f 	bl	8020798 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d106      	bne.n	801166e <recv_tcp+0x36>
 8011660:	4b31      	ldr	r3, [pc, #196]	@ (8011728 <recv_tcp+0xf0>)
 8011662:	f240 122d 	movw	r2, #301	@ 0x12d
 8011666:	4933      	ldr	r1, [pc, #204]	@ (8011734 <recv_tcp+0xfc>)
 8011668:	4831      	ldr	r0, [pc, #196]	@ (8011730 <recv_tcp+0xf8>)
 801166a:	f00f f895 	bl	8020798 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 801166e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011672:	2b00      	cmp	r3, #0
 8011674:	d006      	beq.n	8011684 <recv_tcp+0x4c>
 8011676:	4b2c      	ldr	r3, [pc, #176]	@ (8011728 <recv_tcp+0xf0>)
 8011678:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 801167c:	492e      	ldr	r1, [pc, #184]	@ (8011738 <recv_tcp+0x100>)
 801167e:	482c      	ldr	r0, [pc, #176]	@ (8011730 <recv_tcp+0xf8>)
 8011680:	f00f f88a 	bl	8020798 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8011688:	697b      	ldr	r3, [r7, #20]
 801168a:	2b00      	cmp	r3, #0
 801168c:	d102      	bne.n	8011694 <recv_tcp+0x5c>
    return ERR_VAL;
 801168e:	f06f 0305 	mvn.w	r3, #5
 8011692:	e045      	b.n	8011720 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8011694:	697b      	ldr	r3, [r7, #20]
 8011696:	685b      	ldr	r3, [r3, #4]
 8011698:	68ba      	ldr	r2, [r7, #8]
 801169a:	429a      	cmp	r2, r3
 801169c:	d006      	beq.n	80116ac <recv_tcp+0x74>
 801169e:	4b22      	ldr	r3, [pc, #136]	@ (8011728 <recv_tcp+0xf0>)
 80116a0:	f240 1235 	movw	r2, #309	@ 0x135
 80116a4:	4925      	ldr	r1, [pc, #148]	@ (801173c <recv_tcp+0x104>)
 80116a6:	4822      	ldr	r0, [pc, #136]	@ (8011730 <recv_tcp+0xf8>)
 80116a8:	f00f f876 	bl	8020798 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80116ac:	697b      	ldr	r3, [r7, #20]
 80116ae:	3310      	adds	r3, #16
 80116b0:	4618      	mov	r0, r3
 80116b2:	f00d fc7b 	bl	801efac <sys_mbox_valid>
 80116b6:	4603      	mov	r3, r0
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d10d      	bne.n	80116d8 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d008      	beq.n	80116d4 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	891b      	ldrh	r3, [r3, #8]
 80116c6:	4619      	mov	r1, r3
 80116c8:	68b8      	ldr	r0, [r7, #8]
 80116ca:	f004 f911 	bl	80158f0 <tcp_recved>
      pbuf_free(p);
 80116ce:	6878      	ldr	r0, [r7, #4]
 80116d0:	f003 f9d4 	bl	8014a7c <pbuf_free>
    }
    return ERR_OK;
 80116d4:	2300      	movs	r3, #0
 80116d6:	e023      	b.n	8011720 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d005      	beq.n	80116ea <recv_tcp+0xb2>
    msg = p;
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	891b      	ldrh	r3, [r3, #8]
 80116e6:	83fb      	strh	r3, [r7, #30]
 80116e8:	e003      	b.n	80116f2 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 80116ea:	4b15      	ldr	r3, [pc, #84]	@ (8011740 <recv_tcp+0x108>)
 80116ec:	61bb      	str	r3, [r7, #24]
    len = 0;
 80116ee:	2300      	movs	r3, #0
 80116f0:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 80116f2:	697b      	ldr	r3, [r7, #20]
 80116f4:	3310      	adds	r3, #16
 80116f6:	69b9      	ldr	r1, [r7, #24]
 80116f8:	4618      	mov	r0, r3
 80116fa:	f00d fbeb 	bl	801eed4 <sys_mbox_trypost>
 80116fe:	4603      	mov	r3, r0
 8011700:	2b00      	cmp	r3, #0
 8011702:	d002      	beq.n	801170a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8011704:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011708:	e00a      	b.n	8011720 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 801170a:	697b      	ldr	r3, [r7, #20]
 801170c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801170e:	2b00      	cmp	r3, #0
 8011710:	d005      	beq.n	801171e <recv_tcp+0xe6>
 8011712:	697b      	ldr	r3, [r7, #20]
 8011714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011716:	8bfa      	ldrh	r2, [r7, #30]
 8011718:	2100      	movs	r1, #0
 801171a:	6978      	ldr	r0, [r7, #20]
 801171c:	4798      	blx	r3
  }

  return ERR_OK;
 801171e:	2300      	movs	r3, #0
}
 8011720:	4618      	mov	r0, r3
 8011722:	3720      	adds	r7, #32
 8011724:	46bd      	mov	sp, r7
 8011726:	bd80      	pop	{r7, pc}
 8011728:	08021cd0 	.word	0x08021cd0
 801172c:	08021dac 	.word	0x08021dac
 8011730:	08021d14 	.word	0x08021d14
 8011734:	08021dd0 	.word	0x08021dd0
 8011738:	08021df0 	.word	0x08021df0
 801173c:	08021e08 	.word	0x08021e08
 8011740:	0802670a 	.word	0x0802670a

08011744 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8011744:	b580      	push	{r7, lr}
 8011746:	b084      	sub	sp, #16
 8011748:	af00      	add	r7, sp, #0
 801174a:	6078      	str	r0, [r7, #4]
 801174c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d106      	bne.n	8011766 <poll_tcp+0x22>
 8011758:	4b29      	ldr	r3, [pc, #164]	@ (8011800 <poll_tcp+0xbc>)
 801175a:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 801175e:	4929      	ldr	r1, [pc, #164]	@ (8011804 <poll_tcp+0xc0>)
 8011760:	4829      	ldr	r0, [pc, #164]	@ (8011808 <poll_tcp+0xc4>)
 8011762:	f00f f819 	bl	8020798 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	785b      	ldrb	r3, [r3, #1]
 801176a:	2b01      	cmp	r3, #1
 801176c:	d104      	bne.n	8011778 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 801176e:	2101      	movs	r1, #1
 8011770:	68f8      	ldr	r0, [r7, #12]
 8011772:	f000 fe5d 	bl	8012430 <lwip_netconn_do_writemore>
 8011776:	e016      	b.n	80117a6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	785b      	ldrb	r3, [r3, #1]
 801177c:	2b04      	cmp	r3, #4
 801177e:	d112      	bne.n	80117a6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	6a1b      	ldr	r3, [r3, #32]
 8011784:	2b00      	cmp	r3, #0
 8011786:	d00a      	beq.n	801179e <poll_tcp+0x5a>
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	6a1b      	ldr	r3, [r3, #32]
 801178c:	7a5b      	ldrb	r3, [r3, #9]
 801178e:	2b00      	cmp	r3, #0
 8011790:	d005      	beq.n	801179e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	6a1b      	ldr	r3, [r3, #32]
 8011796:	7a5a      	ldrb	r2, [r3, #9]
 8011798:	3a01      	subs	r2, #1
 801179a:	b2d2      	uxtb	r2, r2
 801179c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 801179e:	2101      	movs	r1, #1
 80117a0:	68f8      	ldr	r0, [r7, #12]
 80117a2:	f000 fb3b 	bl	8011e1c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	7f1b      	ldrb	r3, [r3, #28]
 80117aa:	f003 0310 	and.w	r3, r3, #16
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d021      	beq.n	80117f6 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	685b      	ldr	r3, [r3, #4]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d01d      	beq.n	80117f6 <poll_tcp+0xb2>
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	685b      	ldr	r3, [r3, #4]
 80117be:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80117c2:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 80117c6:	d316      	bcc.n	80117f6 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	685b      	ldr	r3, [r3, #4]
 80117cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80117d0:	2b04      	cmp	r3, #4
 80117d2:	d810      	bhi.n	80117f6 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	7f1b      	ldrb	r3, [r3, #28]
 80117d8:	f023 0310 	bic.w	r3, r3, #16
 80117dc:	b2da      	uxtb	r2, r3
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d005      	beq.n	80117f6 <poll_tcp+0xb2>
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117ee:	2200      	movs	r2, #0
 80117f0:	2102      	movs	r1, #2
 80117f2:	68f8      	ldr	r0, [r7, #12]
 80117f4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80117f6:	2300      	movs	r3, #0
}
 80117f8:	4618      	mov	r0, r3
 80117fa:	3710      	adds	r7, #16
 80117fc:	46bd      	mov	sp, r7
 80117fe:	bd80      	pop	{r7, pc}
 8011800:	08021cd0 	.word	0x08021cd0
 8011804:	08021e28 	.word	0x08021e28
 8011808:	08021d14 	.word	0x08021d14

0801180c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 801180c:	b580      	push	{r7, lr}
 801180e:	b086      	sub	sp, #24
 8011810:	af00      	add	r7, sp, #0
 8011812:	60f8      	str	r0, [r7, #12]
 8011814:	60b9      	str	r1, [r7, #8]
 8011816:	4613      	mov	r3, r2
 8011818:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 801181e:	697b      	ldr	r3, [r7, #20]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d106      	bne.n	8011832 <sent_tcp+0x26>
 8011824:	4b20      	ldr	r3, [pc, #128]	@ (80118a8 <sent_tcp+0x9c>)
 8011826:	f240 1293 	movw	r2, #403	@ 0x193
 801182a:	4920      	ldr	r1, [pc, #128]	@ (80118ac <sent_tcp+0xa0>)
 801182c:	4820      	ldr	r0, [pc, #128]	@ (80118b0 <sent_tcp+0xa4>)
 801182e:	f00e ffb3 	bl	8020798 <iprintf>

  if (conn) {
 8011832:	697b      	ldr	r3, [r7, #20]
 8011834:	2b00      	cmp	r3, #0
 8011836:	d032      	beq.n	801189e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8011838:	697b      	ldr	r3, [r7, #20]
 801183a:	785b      	ldrb	r3, [r3, #1]
 801183c:	2b01      	cmp	r3, #1
 801183e:	d104      	bne.n	801184a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8011840:	2101      	movs	r1, #1
 8011842:	6978      	ldr	r0, [r7, #20]
 8011844:	f000 fdf4 	bl	8012430 <lwip_netconn_do_writemore>
 8011848:	e007      	b.n	801185a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 801184a:	697b      	ldr	r3, [r7, #20]
 801184c:	785b      	ldrb	r3, [r3, #1]
 801184e:	2b04      	cmp	r3, #4
 8011850:	d103      	bne.n	801185a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8011852:	2101      	movs	r1, #1
 8011854:	6978      	ldr	r0, [r7, #20]
 8011856:	f000 fae1 	bl	8011e1c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801185a:	697b      	ldr	r3, [r7, #20]
 801185c:	685b      	ldr	r3, [r3, #4]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d01d      	beq.n	801189e <sent_tcp+0x92>
 8011862:	697b      	ldr	r3, [r7, #20]
 8011864:	685b      	ldr	r3, [r3, #4]
 8011866:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801186a:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 801186e:	d316      	bcc.n	801189e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8011870:	697b      	ldr	r3, [r7, #20]
 8011872:	685b      	ldr	r3, [r3, #4]
 8011874:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011878:	2b04      	cmp	r3, #4
 801187a:	d810      	bhi.n	801189e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 801187c:	697b      	ldr	r3, [r7, #20]
 801187e:	7f1b      	ldrb	r3, [r3, #28]
 8011880:	f023 0310 	bic.w	r3, r3, #16
 8011884:	b2da      	uxtb	r2, r3
 8011886:	697b      	ldr	r3, [r7, #20]
 8011888:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 801188a:	697b      	ldr	r3, [r7, #20]
 801188c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801188e:	2b00      	cmp	r3, #0
 8011890:	d005      	beq.n	801189e <sent_tcp+0x92>
 8011892:	697b      	ldr	r3, [r7, #20]
 8011894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011896:	88fa      	ldrh	r2, [r7, #6]
 8011898:	2102      	movs	r1, #2
 801189a:	6978      	ldr	r0, [r7, #20]
 801189c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 801189e:	2300      	movs	r3, #0
}
 80118a0:	4618      	mov	r0, r3
 80118a2:	3718      	adds	r7, #24
 80118a4:	46bd      	mov	sp, r7
 80118a6:	bd80      	pop	{r7, pc}
 80118a8:	08021cd0 	.word	0x08021cd0
 80118ac:	08021e28 	.word	0x08021e28
 80118b0:	08021d14 	.word	0x08021d14

080118b4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b088      	sub	sp, #32
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	6078      	str	r0, [r7, #4]
 80118bc:	460b      	mov	r3, r1
 80118be:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80118c4:	69fb      	ldr	r3, [r7, #28]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d106      	bne.n	80118d8 <err_tcp+0x24>
 80118ca:	4b5f      	ldr	r3, [pc, #380]	@ (8011a48 <err_tcp+0x194>)
 80118cc:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 80118d0:	495e      	ldr	r1, [pc, #376]	@ (8011a4c <err_tcp+0x198>)
 80118d2:	485f      	ldr	r0, [pc, #380]	@ (8011a50 <err_tcp+0x19c>)
 80118d4:	f00e ff60 	bl	8020798 <iprintf>

  SYS_ARCH_PROTECT(lev);
 80118d8:	f00d fcbe 	bl	801f258 <sys_arch_protect>
 80118dc:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 80118de:	69fb      	ldr	r3, [r7, #28]
 80118e0:	2200      	movs	r2, #0
 80118e2:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 80118e4:	69fb      	ldr	r3, [r7, #28]
 80118e6:	78fa      	ldrb	r2, [r7, #3]
 80118e8:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80118ea:	69fb      	ldr	r3, [r7, #28]
 80118ec:	7f1b      	ldrb	r3, [r3, #28]
 80118ee:	f043 0301 	orr.w	r3, r3, #1
 80118f2:	b2da      	uxtb	r2, r3
 80118f4:	69fb      	ldr	r3, [r7, #28]
 80118f6:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 80118f8:	69fb      	ldr	r3, [r7, #28]
 80118fa:	785b      	ldrb	r3, [r3, #1]
 80118fc:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 80118fe:	69fb      	ldr	r3, [r7, #28]
 8011900:	2200      	movs	r2, #0
 8011902:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8011904:	69b8      	ldr	r0, [r7, #24]
 8011906:	f00d fcb5 	bl	801f274 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 801190a:	69fb      	ldr	r3, [r7, #28]
 801190c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801190e:	2b00      	cmp	r3, #0
 8011910:	d005      	beq.n	801191e <err_tcp+0x6a>
 8011912:	69fb      	ldr	r3, [r7, #28]
 8011914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011916:	2200      	movs	r2, #0
 8011918:	2104      	movs	r1, #4
 801191a:	69f8      	ldr	r0, [r7, #28]
 801191c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801191e:	69fb      	ldr	r3, [r7, #28]
 8011920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011922:	2b00      	cmp	r3, #0
 8011924:	d005      	beq.n	8011932 <err_tcp+0x7e>
 8011926:	69fb      	ldr	r3, [r7, #28]
 8011928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801192a:	2200      	movs	r2, #0
 801192c:	2100      	movs	r1, #0
 801192e:	69f8      	ldr	r0, [r7, #28]
 8011930:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8011932:	69fb      	ldr	r3, [r7, #28]
 8011934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011936:	2b00      	cmp	r3, #0
 8011938:	d005      	beq.n	8011946 <err_tcp+0x92>
 801193a:	69fb      	ldr	r3, [r7, #28]
 801193c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801193e:	2200      	movs	r2, #0
 8011940:	2102      	movs	r1, #2
 8011942:	69f8      	ldr	r0, [r7, #28]
 8011944:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8011946:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801194a:	4618      	mov	r0, r3
 801194c:	f7ff fd86 	bl	801145c <lwip_netconn_err_to_msg>
 8011950:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8011952:	69fb      	ldr	r3, [r7, #28]
 8011954:	3310      	adds	r3, #16
 8011956:	4618      	mov	r0, r3
 8011958:	f00d fb28 	bl	801efac <sys_mbox_valid>
 801195c:	4603      	mov	r3, r0
 801195e:	2b00      	cmp	r3, #0
 8011960:	d005      	beq.n	801196e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8011962:	69fb      	ldr	r3, [r7, #28]
 8011964:	3310      	adds	r3, #16
 8011966:	6939      	ldr	r1, [r7, #16]
 8011968:	4618      	mov	r0, r3
 801196a:	f00d fab3 	bl	801eed4 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 801196e:	69fb      	ldr	r3, [r7, #28]
 8011970:	3314      	adds	r3, #20
 8011972:	4618      	mov	r0, r3
 8011974:	f00d fb1a 	bl	801efac <sys_mbox_valid>
 8011978:	4603      	mov	r3, r0
 801197a:	2b00      	cmp	r3, #0
 801197c:	d005      	beq.n	801198a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 801197e:	69fb      	ldr	r3, [r7, #28]
 8011980:	3314      	adds	r3, #20
 8011982:	6939      	ldr	r1, [r7, #16]
 8011984:	4618      	mov	r0, r3
 8011986:	f00d faa5 	bl	801eed4 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 801198a:	7dfb      	ldrb	r3, [r7, #23]
 801198c:	2b01      	cmp	r3, #1
 801198e:	d005      	beq.n	801199c <err_tcp+0xe8>
 8011990:	7dfb      	ldrb	r3, [r7, #23]
 8011992:	2b04      	cmp	r3, #4
 8011994:	d002      	beq.n	801199c <err_tcp+0xe8>
 8011996:	7dfb      	ldrb	r3, [r7, #23]
 8011998:	2b03      	cmp	r3, #3
 801199a:	d143      	bne.n	8011a24 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 801199c:	69fb      	ldr	r3, [r7, #28]
 801199e:	7f1b      	ldrb	r3, [r3, #28]
 80119a0:	f003 0304 	and.w	r3, r3, #4
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	bf14      	ite	ne
 80119a8:	2301      	movne	r3, #1
 80119aa:	2300      	moveq	r3, #0
 80119ac:	b2db      	uxtb	r3, r3
 80119ae:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80119b0:	69fb      	ldr	r3, [r7, #28]
 80119b2:	7f1b      	ldrb	r3, [r3, #28]
 80119b4:	f023 0304 	bic.w	r3, r3, #4
 80119b8:	b2da      	uxtb	r2, r3
 80119ba:	69fb      	ldr	r3, [r7, #28]
 80119bc:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d13b      	bne.n	8011a3c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80119c4:	69fb      	ldr	r3, [r7, #28]
 80119c6:	6a1b      	ldr	r3, [r3, #32]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d106      	bne.n	80119da <err_tcp+0x126>
 80119cc:	4b1e      	ldr	r3, [pc, #120]	@ (8011a48 <err_tcp+0x194>)
 80119ce:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80119d2:	4920      	ldr	r1, [pc, #128]	@ (8011a54 <err_tcp+0x1a0>)
 80119d4:	481e      	ldr	r0, [pc, #120]	@ (8011a50 <err_tcp+0x19c>)
 80119d6:	f00e fedf 	bl	8020798 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 80119da:	7dfb      	ldrb	r3, [r7, #23]
 80119dc:	2b04      	cmp	r3, #4
 80119de:	d104      	bne.n	80119ea <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 80119e0:	69fb      	ldr	r3, [r7, #28]
 80119e2:	6a1b      	ldr	r3, [r3, #32]
 80119e4:	2200      	movs	r2, #0
 80119e6:	711a      	strb	r2, [r3, #4]
 80119e8:	e003      	b.n	80119f2 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 80119ea:	69fb      	ldr	r3, [r7, #28]
 80119ec:	6a1b      	ldr	r3, [r3, #32]
 80119ee:	78fa      	ldrb	r2, [r7, #3]
 80119f0:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80119f2:	69fb      	ldr	r3, [r7, #28]
 80119f4:	6a1b      	ldr	r3, [r3, #32]
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	330c      	adds	r3, #12
 80119fa:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80119fc:	68b8      	ldr	r0, [r7, #8]
 80119fe:	f00d fb8f 	bl	801f120 <sys_sem_valid>
 8011a02:	4603      	mov	r3, r0
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d106      	bne.n	8011a16 <err_tcp+0x162>
 8011a08:	4b0f      	ldr	r3, [pc, #60]	@ (8011a48 <err_tcp+0x194>)
 8011a0a:	f240 12ef 	movw	r2, #495	@ 0x1ef
 8011a0e:	4912      	ldr	r1, [pc, #72]	@ (8011a58 <err_tcp+0x1a4>)
 8011a10:	480f      	ldr	r0, [pc, #60]	@ (8011a50 <err_tcp+0x19c>)
 8011a12:	f00e fec1 	bl	8020798 <iprintf>
      conn->current_msg = NULL;
 8011a16:	69fb      	ldr	r3, [r7, #28]
 8011a18:	2200      	movs	r2, #0
 8011a1a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8011a1c:	68b8      	ldr	r0, [r7, #8]
 8011a1e:	f00d fb5a 	bl	801f0d6 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8011a22:	e00b      	b.n	8011a3c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8011a24:	69fb      	ldr	r3, [r7, #28]
 8011a26:	6a1b      	ldr	r3, [r3, #32]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d008      	beq.n	8011a3e <err_tcp+0x18a>
 8011a2c:	4b06      	ldr	r3, [pc, #24]	@ (8011a48 <err_tcp+0x194>)
 8011a2e:	f240 12f7 	movw	r2, #503	@ 0x1f7
 8011a32:	490a      	ldr	r1, [pc, #40]	@ (8011a5c <err_tcp+0x1a8>)
 8011a34:	4806      	ldr	r0, [pc, #24]	@ (8011a50 <err_tcp+0x19c>)
 8011a36:	f00e feaf 	bl	8020798 <iprintf>
  }
}
 8011a3a:	e000      	b.n	8011a3e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8011a3c:	bf00      	nop
}
 8011a3e:	bf00      	nop
 8011a40:	3720      	adds	r7, #32
 8011a42:	46bd      	mov	sp, r7
 8011a44:	bd80      	pop	{r7, pc}
 8011a46:	bf00      	nop
 8011a48:	08021cd0 	.word	0x08021cd0
 8011a4c:	08021e28 	.word	0x08021e28
 8011a50:	08021d14 	.word	0x08021d14
 8011a54:	08021e38 	.word	0x08021e38
 8011a58:	08021e54 	.word	0x08021e54
 8011a5c:	08021e70 	.word	0x08021e70

08011a60 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8011a60:	b580      	push	{r7, lr}
 8011a62:	b084      	sub	sp, #16
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	685b      	ldr	r3, [r3, #4]
 8011a6c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8011a6e:	6879      	ldr	r1, [r7, #4]
 8011a70:	68f8      	ldr	r0, [r7, #12]
 8011a72:	f004 fe2f 	bl	80166d4 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8011a76:	490a      	ldr	r1, [pc, #40]	@ (8011aa0 <setup_tcp+0x40>)
 8011a78:	68f8      	ldr	r0, [r7, #12]
 8011a7a:	f004 fe3d 	bl	80166f8 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8011a7e:	4909      	ldr	r1, [pc, #36]	@ (8011aa4 <setup_tcp+0x44>)
 8011a80:	68f8      	ldr	r0, [r7, #12]
 8011a82:	f004 fe5b 	bl	801673c <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8011a86:	2202      	movs	r2, #2
 8011a88:	4907      	ldr	r1, [pc, #28]	@ (8011aa8 <setup_tcp+0x48>)
 8011a8a:	68f8      	ldr	r0, [r7, #12]
 8011a8c:	f004 feb2 	bl	80167f4 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8011a90:	4906      	ldr	r1, [pc, #24]	@ (8011aac <setup_tcp+0x4c>)
 8011a92:	68f8      	ldr	r0, [r7, #12]
 8011a94:	f004 fe74 	bl	8016780 <tcp_err>
}
 8011a98:	bf00      	nop
 8011a9a:	3710      	adds	r7, #16
 8011a9c:	46bd      	mov	sp, r7
 8011a9e:	bd80      	pop	{r7, pc}
 8011aa0:	08011639 	.word	0x08011639
 8011aa4:	0801180d 	.word	0x0801180d
 8011aa8:	08011745 	.word	0x08011745
 8011aac:	080118b5 	.word	0x080118b5

08011ab0 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8011ab0:	b590      	push	{r4, r7, lr}
 8011ab2:	b085      	sub	sp, #20
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8011ab8:	2300      	movs	r3, #0
 8011aba:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	685b      	ldr	r3, [r3, #4]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d006      	beq.n	8011ad4 <pcb_new+0x24>
 8011ac6:	4b2b      	ldr	r3, [pc, #172]	@ (8011b74 <pcb_new+0xc4>)
 8011ac8:	f240 2265 	movw	r2, #613	@ 0x265
 8011acc:	492a      	ldr	r1, [pc, #168]	@ (8011b78 <pcb_new+0xc8>)
 8011ace:	482b      	ldr	r0, [pc, #172]	@ (8011b7c <pcb_new+0xcc>)
 8011ad0:	f00e fe62 	bl	8020798 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	781b      	ldrb	r3, [r3, #0]
 8011ada:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011ade:	2b10      	cmp	r3, #16
 8011ae0:	d022      	beq.n	8011b28 <pcb_new+0x78>
 8011ae2:	2b20      	cmp	r3, #32
 8011ae4:	d133      	bne.n	8011b4e <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	681c      	ldr	r4, [r3, #0]
 8011aea:	7bfb      	ldrb	r3, [r7, #15]
 8011aec:	4618      	mov	r0, r3
 8011aee:	f00a fbb6 	bl	801c25e <udp_new_ip_type>
 8011af2:	4603      	mov	r3, r0
 8011af4:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	685b      	ldr	r3, [r3, #4]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d02a      	beq.n	8011b56 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	781b      	ldrb	r3, [r3, #0]
 8011b06:	2b22      	cmp	r3, #34	@ 0x22
 8011b08:	d104      	bne.n	8011b14 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	685b      	ldr	r3, [r3, #4]
 8011b10:	2201      	movs	r2, #1
 8011b12:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	6858      	ldr	r0, [r3, #4]
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	461a      	mov	r2, r3
 8011b20:	4917      	ldr	r1, [pc, #92]	@ (8011b80 <pcb_new+0xd0>)
 8011b22:	f00a fb23 	bl	801c16c <udp_recv>
      }
      break;
 8011b26:	e016      	b.n	8011b56 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	681c      	ldr	r4, [r3, #0]
 8011b2c:	7bfb      	ldrb	r3, [r7, #15]
 8011b2e:	4618      	mov	r0, r3
 8011b30:	f004 fdc2 	bl	80166b8 <tcp_new_ip_type>
 8011b34:	4603      	mov	r3, r0
 8011b36:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	685b      	ldr	r3, [r3, #4]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d00b      	beq.n	8011b5a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	4618      	mov	r0, r3
 8011b48:	f7ff ff8a 	bl	8011a60 <setup_tcp>
      }
      break;
 8011b4c:	e005      	b.n	8011b5a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	22fa      	movs	r2, #250	@ 0xfa
 8011b52:	711a      	strb	r2, [r3, #4]
      return;
 8011b54:	e00a      	b.n	8011b6c <pcb_new+0xbc>
      break;
 8011b56:	bf00      	nop
 8011b58:	e000      	b.n	8011b5c <pcb_new+0xac>
      break;
 8011b5a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	685b      	ldr	r3, [r3, #4]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d102      	bne.n	8011b6c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	22ff      	movs	r2, #255	@ 0xff
 8011b6a:	711a      	strb	r2, [r3, #4]
  }
}
 8011b6c:	3714      	adds	r7, #20
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	bd90      	pop	{r4, r7, pc}
 8011b72:	bf00      	nop
 8011b74:	08021cd0 	.word	0x08021cd0
 8011b78:	08021eb4 	.word	0x08021eb4
 8011b7c:	08021d14 	.word	0x08021d14
 8011b80:	0801153d 	.word	0x0801153d

08011b84 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8011b84:	b580      	push	{r7, lr}
 8011b86:	b084      	sub	sp, #16
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	2200      	movs	r2, #0
 8011b94:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	685b      	ldr	r3, [r3, #4]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d102      	bne.n	8011ba6 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8011ba0:	68f8      	ldr	r0, [r7, #12]
 8011ba2:	f7ff ff85 	bl	8011ab0 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8011ba6:	bf00      	nop
 8011ba8:	3710      	adds	r7, #16
 8011baa:	46bd      	mov	sp, r7
 8011bac:	bd80      	pop	{r7, pc}
	...

08011bb0 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8011bb0:	b580      	push	{r7, lr}
 8011bb2:	b086      	sub	sp, #24
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	4603      	mov	r3, r0
 8011bb8:	6039      	str	r1, [r7, #0]
 8011bba:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8011bc0:	2007      	movs	r0, #7
 8011bc2:	f001 fef9 	bl	80139b8 <memp_malloc>
 8011bc6:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d101      	bne.n	8011bd2 <netconn_alloc+0x22>
    return NULL;
 8011bce:	2300      	movs	r3, #0
 8011bd0:	e052      	b.n	8011c78 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	2200      	movs	r2, #0
 8011bd6:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	79fa      	ldrb	r2, [r7, #7]
 8011bdc:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	2200      	movs	r2, #0
 8011be2:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8011be4:	79fb      	ldrb	r3, [r7, #7]
 8011be6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011bea:	2b10      	cmp	r3, #16
 8011bec:	d004      	beq.n	8011bf8 <netconn_alloc+0x48>
 8011bee:	2b20      	cmp	r3, #32
 8011bf0:	d105      	bne.n	8011bfe <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8011bf2:	2306      	movs	r3, #6
 8011bf4:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8011bf6:	e00a      	b.n	8011c0e <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8011bf8:	2306      	movs	r3, #6
 8011bfa:	617b      	str	r3, [r7, #20]
      break;
 8011bfc:	e007      	b.n	8011c0e <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8011bfe:	4b20      	ldr	r3, [pc, #128]	@ (8011c80 <netconn_alloc+0xd0>)
 8011c00:	f240 22e5 	movw	r2, #741	@ 0x2e5
 8011c04:	491f      	ldr	r1, [pc, #124]	@ (8011c84 <netconn_alloc+0xd4>)
 8011c06:	4820      	ldr	r0, [pc, #128]	@ (8011c88 <netconn_alloc+0xd8>)
 8011c08:	f00e fdc6 	bl	8020798 <iprintf>
      goto free_and_return;
 8011c0c:	e02f      	b.n	8011c6e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	3310      	adds	r3, #16
 8011c12:	6979      	ldr	r1, [r7, #20]
 8011c14:	4618      	mov	r0, r3
 8011c16:	f00d f903 	bl	801ee20 <sys_mbox_new>
 8011c1a:	4603      	mov	r3, r0
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d125      	bne.n	8011c6c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	330c      	adds	r3, #12
 8011c24:	2100      	movs	r1, #0
 8011c26:	4618      	mov	r0, r3
 8011c28:	f00d f9de 	bl	801efe8 <sys_sem_new>
 8011c2c:	4603      	mov	r3, r0
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d005      	beq.n	8011c3e <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	3310      	adds	r3, #16
 8011c36:	4618      	mov	r0, r3
 8011c38:	f00d f924 	bl	801ee84 <sys_mbox_free>
    goto free_and_return;
 8011c3c:	e017      	b.n	8011c6e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	3314      	adds	r3, #20
 8011c42:	4618      	mov	r0, r3
 8011c44:	f00d f9c3 	bl	801efce <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	2200      	movs	r2, #0
 8011c4c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011c54:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	683a      	ldr	r2, [r7, #0]
 8011c5a:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	2200      	movs	r2, #0
 8011c60:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	7cfa      	ldrb	r2, [r7, #19]
 8011c66:	771a      	strb	r2, [r3, #28]
  return conn;
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	e005      	b.n	8011c78 <netconn_alloc+0xc8>
    goto free_and_return;
 8011c6c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8011c6e:	68f9      	ldr	r1, [r7, #12]
 8011c70:	2007      	movs	r0, #7
 8011c72:	f001 ff1d 	bl	8013ab0 <memp_free>
  return NULL;
 8011c76:	2300      	movs	r3, #0
}
 8011c78:	4618      	mov	r0, r3
 8011c7a:	3718      	adds	r7, #24
 8011c7c:	46bd      	mov	sp, r7
 8011c7e:	bd80      	pop	{r7, pc}
 8011c80:	08021cd0 	.word	0x08021cd0
 8011c84:	08021ed4 	.word	0x08021ed4
 8011c88:	08021d14 	.word	0x08021d14

08011c8c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8011c8c:	b580      	push	{r7, lr}
 8011c8e:	b082      	sub	sp, #8
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	685b      	ldr	r3, [r3, #4]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d006      	beq.n	8011caa <netconn_free+0x1e>
 8011c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8011d0c <netconn_free+0x80>)
 8011c9e:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8011ca2:	491b      	ldr	r1, [pc, #108]	@ (8011d10 <netconn_free+0x84>)
 8011ca4:	481b      	ldr	r0, [pc, #108]	@ (8011d14 <netconn_free+0x88>)
 8011ca6:	f00e fd77 	bl	8020798 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	3310      	adds	r3, #16
 8011cae:	4618      	mov	r0, r3
 8011cb0:	f00d f97c 	bl	801efac <sys_mbox_valid>
 8011cb4:	4603      	mov	r3, r0
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d006      	beq.n	8011cc8 <netconn_free+0x3c>
 8011cba:	4b14      	ldr	r3, [pc, #80]	@ (8011d0c <netconn_free+0x80>)
 8011cbc:	f240 3223 	movw	r2, #803	@ 0x323
 8011cc0:	4915      	ldr	r1, [pc, #84]	@ (8011d18 <netconn_free+0x8c>)
 8011cc2:	4814      	ldr	r0, [pc, #80]	@ (8011d14 <netconn_free+0x88>)
 8011cc4:	f00e fd68 	bl	8020798 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	3314      	adds	r3, #20
 8011ccc:	4618      	mov	r0, r3
 8011cce:	f00d f96d 	bl	801efac <sys_mbox_valid>
 8011cd2:	4603      	mov	r3, r0
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d006      	beq.n	8011ce6 <netconn_free+0x5a>
 8011cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8011d0c <netconn_free+0x80>)
 8011cda:	f240 3226 	movw	r2, #806	@ 0x326
 8011cde:	490f      	ldr	r1, [pc, #60]	@ (8011d1c <netconn_free+0x90>)
 8011ce0:	480c      	ldr	r0, [pc, #48]	@ (8011d14 <netconn_free+0x88>)
 8011ce2:	f00e fd59 	bl	8020798 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	330c      	adds	r3, #12
 8011cea:	4618      	mov	r0, r3
 8011cec:	f00d fa00 	bl	801f0f0 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	330c      	adds	r3, #12
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	f00d fa24 	bl	801f142 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8011cfa:	6879      	ldr	r1, [r7, #4]
 8011cfc:	2007      	movs	r0, #7
 8011cfe:	f001 fed7 	bl	8013ab0 <memp_free>
}
 8011d02:	bf00      	nop
 8011d04:	3708      	adds	r7, #8
 8011d06:	46bd      	mov	sp, r7
 8011d08:	bd80      	pop	{r7, pc}
 8011d0a:	bf00      	nop
 8011d0c:	08021cd0 	.word	0x08021cd0
 8011d10:	08021efc 	.word	0x08021efc
 8011d14:	08021d14 	.word	0x08021d14
 8011d18:	08021f2c 	.word	0x08021f2c
 8011d1c:	08021f68 	.word	0x08021f68

08011d20 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b086      	sub	sp, #24
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	3310      	adds	r3, #16
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	f00d f93d 	bl	801efac <sys_mbox_valid>
 8011d32:	4603      	mov	r3, r0
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d02f      	beq.n	8011d98 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8011d38:	e018      	b.n	8011d6c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	781b      	ldrb	r3, [r3, #0]
 8011d3e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011d42:	2b10      	cmp	r3, #16
 8011d44:	d10e      	bne.n	8011d64 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8011d46:	693b      	ldr	r3, [r7, #16]
 8011d48:	f107 020f 	add.w	r2, r7, #15
 8011d4c:	4611      	mov	r1, r2
 8011d4e:	4618      	mov	r0, r3
 8011d50:	f7ff fbba 	bl	80114c8 <lwip_netconn_is_err_msg>
 8011d54:	4603      	mov	r3, r0
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d108      	bne.n	8011d6c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8011d5a:	693b      	ldr	r3, [r7, #16]
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	f002 fe8d 	bl	8014a7c <pbuf_free>
 8011d62:	e003      	b.n	8011d6c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8011d64:	693b      	ldr	r3, [r7, #16]
 8011d66:	4618      	mov	r0, r3
 8011d68:	f000 fdee 	bl	8012948 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	3310      	adds	r3, #16
 8011d70:	f107 0210 	add.w	r2, r7, #16
 8011d74:	4611      	mov	r1, r2
 8011d76:	4618      	mov	r0, r3
 8011d78:	f00d f901 	bl	801ef7e <sys_arch_mbox_tryfetch>
 8011d7c:	4603      	mov	r3, r0
 8011d7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011d82:	d1da      	bne.n	8011d3a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	3310      	adds	r3, #16
 8011d88:	4618      	mov	r0, r3
 8011d8a:	f00d f87b 	bl	801ee84 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	3310      	adds	r3, #16
 8011d92:	4618      	mov	r0, r3
 8011d94:	f00d f91b 	bl	801efce <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	3314      	adds	r3, #20
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	f00d f905 	bl	801efac <sys_mbox_valid>
 8011da2:	4603      	mov	r3, r0
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d034      	beq.n	8011e12 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8011da8:	e01d      	b.n	8011de6 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8011daa:	693b      	ldr	r3, [r7, #16]
 8011dac:	f107 020e 	add.w	r2, r7, #14
 8011db0:	4611      	mov	r1, r2
 8011db2:	4618      	mov	r0, r3
 8011db4:	f7ff fb88 	bl	80114c8 <lwip_netconn_is_err_msg>
 8011db8:	4603      	mov	r3, r0
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d113      	bne.n	8011de6 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8011dbe:	693b      	ldr	r3, [r7, #16]
 8011dc0:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8011dc2:	6978      	ldr	r0, [r7, #20]
 8011dc4:	f7ff ffac 	bl	8011d20 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8011dc8:	697b      	ldr	r3, [r7, #20]
 8011dca:	685b      	ldr	r3, [r3, #4]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d007      	beq.n	8011de0 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8011dd0:	697b      	ldr	r3, [r7, #20]
 8011dd2:	685b      	ldr	r3, [r3, #4]
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	f003 fc8d 	bl	80156f4 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8011dda:	697b      	ldr	r3, [r7, #20]
 8011ddc:	2200      	movs	r2, #0
 8011dde:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8011de0:	6978      	ldr	r0, [r7, #20]
 8011de2:	f7ff ff53 	bl	8011c8c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	3314      	adds	r3, #20
 8011dea:	f107 0210 	add.w	r2, r7, #16
 8011dee:	4611      	mov	r1, r2
 8011df0:	4618      	mov	r0, r3
 8011df2:	f00d f8c4 	bl	801ef7e <sys_arch_mbox_tryfetch>
 8011df6:	4603      	mov	r3, r0
 8011df8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011dfc:	d1d5      	bne.n	8011daa <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	3314      	adds	r3, #20
 8011e02:	4618      	mov	r0, r3
 8011e04:	f00d f83e 	bl	801ee84 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	3314      	adds	r3, #20
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	f00d f8de 	bl	801efce <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8011e12:	bf00      	nop
 8011e14:	3718      	adds	r7, #24
 8011e16:	46bd      	mov	sp, r7
 8011e18:	bd80      	pop	{r7, pc}
	...

08011e1c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8011e1c:	b580      	push	{r7, lr}
 8011e1e:	b086      	sub	sp, #24
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	6078      	str	r0, [r7, #4]
 8011e24:	460b      	mov	r3, r1
 8011e26:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8011e28:	2300      	movs	r3, #0
 8011e2a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d106      	bne.n	8011e40 <lwip_netconn_do_close_internal+0x24>
 8011e32:	4b87      	ldr	r3, [pc, #540]	@ (8012050 <lwip_netconn_do_close_internal+0x234>)
 8011e34:	f240 32a2 	movw	r2, #930	@ 0x3a2
 8011e38:	4986      	ldr	r1, [pc, #536]	@ (8012054 <lwip_netconn_do_close_internal+0x238>)
 8011e3a:	4887      	ldr	r0, [pc, #540]	@ (8012058 <lwip_netconn_do_close_internal+0x23c>)
 8011e3c:	f00e fcac 	bl	8020798 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	781b      	ldrb	r3, [r3, #0]
 8011e44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011e48:	2b10      	cmp	r3, #16
 8011e4a:	d006      	beq.n	8011e5a <lwip_netconn_do_close_internal+0x3e>
 8011e4c:	4b80      	ldr	r3, [pc, #512]	@ (8012050 <lwip_netconn_do_close_internal+0x234>)
 8011e4e:	f240 32a3 	movw	r2, #931	@ 0x3a3
 8011e52:	4982      	ldr	r1, [pc, #520]	@ (801205c <lwip_netconn_do_close_internal+0x240>)
 8011e54:	4880      	ldr	r0, [pc, #512]	@ (8012058 <lwip_netconn_do_close_internal+0x23c>)
 8011e56:	f00e fc9f 	bl	8020798 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	785b      	ldrb	r3, [r3, #1]
 8011e5e:	2b04      	cmp	r3, #4
 8011e60:	d006      	beq.n	8011e70 <lwip_netconn_do_close_internal+0x54>
 8011e62:	4b7b      	ldr	r3, [pc, #492]	@ (8012050 <lwip_netconn_do_close_internal+0x234>)
 8011e64:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 8011e68:	497d      	ldr	r1, [pc, #500]	@ (8012060 <lwip_netconn_do_close_internal+0x244>)
 8011e6a:	487b      	ldr	r0, [pc, #492]	@ (8012058 <lwip_netconn_do_close_internal+0x23c>)
 8011e6c:	f00e fc94 	bl	8020798 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	685b      	ldr	r3, [r3, #4]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d106      	bne.n	8011e86 <lwip_netconn_do_close_internal+0x6a>
 8011e78:	4b75      	ldr	r3, [pc, #468]	@ (8012050 <lwip_netconn_do_close_internal+0x234>)
 8011e7a:	f240 32a5 	movw	r2, #933	@ 0x3a5
 8011e7e:	4979      	ldr	r1, [pc, #484]	@ (8012064 <lwip_netconn_do_close_internal+0x248>)
 8011e80:	4875      	ldr	r0, [pc, #468]	@ (8012058 <lwip_netconn_do_close_internal+0x23c>)
 8011e82:	f00e fc89 	bl	8020798 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	6a1b      	ldr	r3, [r3, #32]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d106      	bne.n	8011e9c <lwip_netconn_do_close_internal+0x80>
 8011e8e:	4b70      	ldr	r3, [pc, #448]	@ (8012050 <lwip_netconn_do_close_internal+0x234>)
 8011e90:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8011e94:	4974      	ldr	r1, [pc, #464]	@ (8012068 <lwip_netconn_do_close_internal+0x24c>)
 8011e96:	4870      	ldr	r0, [pc, #448]	@ (8012058 <lwip_netconn_do_close_internal+0x23c>)
 8011e98:	f00e fc7e 	bl	8020798 <iprintf>

  tpcb = conn->pcb.tcp;
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	685b      	ldr	r3, [r3, #4]
 8011ea0:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	6a1b      	ldr	r3, [r3, #32]
 8011ea6:	7a1b      	ldrb	r3, [r3, #8]
 8011ea8:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8011eaa:	7bfb      	ldrb	r3, [r7, #15]
 8011eac:	f003 0301 	and.w	r3, r3, #1
 8011eb0:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8011eb2:	7bfb      	ldrb	r3, [r7, #15]
 8011eb4:	f003 0302 	and.w	r3, r3, #2
 8011eb8:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8011eba:	7bfb      	ldrb	r3, [r7, #15]
 8011ebc:	2b03      	cmp	r3, #3
 8011ebe:	d102      	bne.n	8011ec6 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8011ec0:	2301      	movs	r3, #1
 8011ec2:	75bb      	strb	r3, [r7, #22]
 8011ec4:	e01f      	b.n	8011f06 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8011ec6:	7bbb      	ldrb	r3, [r7, #14]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d00e      	beq.n	8011eea <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8011ecc:	693b      	ldr	r3, [r7, #16]
 8011ece:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8011ed0:	2b05      	cmp	r3, #5
 8011ed2:	d007      	beq.n	8011ee4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8011ed4:	693b      	ldr	r3, [r7, #16]
 8011ed6:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8011ed8:	2b06      	cmp	r3, #6
 8011eda:	d003      	beq.n	8011ee4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8011edc:	693b      	ldr	r3, [r7, #16]
 8011ede:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8011ee0:	2b08      	cmp	r3, #8
 8011ee2:	d102      	bne.n	8011eea <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8011ee4:	2301      	movs	r3, #1
 8011ee6:	75bb      	strb	r3, [r7, #22]
 8011ee8:	e00d      	b.n	8011f06 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8011eea:	7b7b      	ldrb	r3, [r7, #13]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d008      	beq.n	8011f02 <lwip_netconn_do_close_internal+0xe6>
 8011ef0:	693b      	ldr	r3, [r7, #16]
 8011ef2:	8b5b      	ldrh	r3, [r3, #26]
 8011ef4:	f003 0310 	and.w	r3, r3, #16
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d002      	beq.n	8011f02 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8011efc:	2301      	movs	r3, #1
 8011efe:	75bb      	strb	r3, [r7, #22]
 8011f00:	e001      	b.n	8011f06 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8011f02:	2300      	movs	r3, #0
 8011f04:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8011f06:	7dbb      	ldrb	r3, [r7, #22]
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d003      	beq.n	8011f14 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8011f0c:	2100      	movs	r1, #0
 8011f0e:	6938      	ldr	r0, [r7, #16]
 8011f10:	f004 fbe0 	bl	80166d4 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8011f14:	693b      	ldr	r3, [r7, #16]
 8011f16:	7d1b      	ldrb	r3, [r3, #20]
 8011f18:	2b01      	cmp	r3, #1
 8011f1a:	d104      	bne.n	8011f26 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8011f1c:	2100      	movs	r1, #0
 8011f1e:	6938      	ldr	r0, [r7, #16]
 8011f20:	f004 fc50 	bl	80167c4 <tcp_accept>
 8011f24:	e01d      	b.n	8011f62 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8011f26:	7bbb      	ldrb	r3, [r7, #14]
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d007      	beq.n	8011f3c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8011f2c:	2100      	movs	r1, #0
 8011f2e:	6938      	ldr	r0, [r7, #16]
 8011f30:	f004 fbe2 	bl	80166f8 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8011f34:	2100      	movs	r1, #0
 8011f36:	6938      	ldr	r0, [r7, #16]
 8011f38:	f004 fc44 	bl	80167c4 <tcp_accept>
    }
    if (shut_tx) {
 8011f3c:	7b7b      	ldrb	r3, [r7, #13]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d003      	beq.n	8011f4a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8011f42:	2100      	movs	r1, #0
 8011f44:	6938      	ldr	r0, [r7, #16]
 8011f46:	f004 fbf9 	bl	801673c <tcp_sent>
    }
    if (shut_close) {
 8011f4a:	7dbb      	ldrb	r3, [r7, #22]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d008      	beq.n	8011f62 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8011f50:	2200      	movs	r2, #0
 8011f52:	2100      	movs	r1, #0
 8011f54:	6938      	ldr	r0, [r7, #16]
 8011f56:	f004 fc4d 	bl	80167f4 <tcp_poll>
      tcp_err(tpcb, NULL);
 8011f5a:	2100      	movs	r1, #0
 8011f5c:	6938      	ldr	r0, [r7, #16]
 8011f5e:	f004 fc0f 	bl	8016780 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8011f62:	7dbb      	ldrb	r3, [r7, #22]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d005      	beq.n	8011f74 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8011f68:	6938      	ldr	r0, [r7, #16]
 8011f6a:	f003 fa7d 	bl	8015468 <tcp_close>
 8011f6e:	4603      	mov	r3, r0
 8011f70:	75fb      	strb	r3, [r7, #23]
 8011f72:	e007      	b.n	8011f84 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8011f74:	7bbb      	ldrb	r3, [r7, #14]
 8011f76:	7b7a      	ldrb	r2, [r7, #13]
 8011f78:	4619      	mov	r1, r3
 8011f7a:	6938      	ldr	r0, [r7, #16]
 8011f7c:	f003 faa0 	bl	80154c0 <tcp_shutdown>
 8011f80:	4603      	mov	r3, r0
 8011f82:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8011f84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d102      	bne.n	8011f92 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8011f8c:	2301      	movs	r3, #1
 8011f8e:	757b      	strb	r3, [r7, #21]
 8011f90:	e016      	b.n	8011fc0 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8011f92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011f96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011f9a:	d10f      	bne.n	8011fbc <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	6a1b      	ldr	r3, [r3, #32]
 8011fa0:	7a5b      	ldrb	r3, [r3, #9]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d10c      	bne.n	8011fc0 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8011fa6:	2301      	movs	r3, #1
 8011fa8:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8011faa:	7dbb      	ldrb	r3, [r7, #22]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d007      	beq.n	8011fc0 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8011fb0:	6938      	ldr	r0, [r7, #16]
 8011fb2:	f003 fb9f 	bl	80156f4 <tcp_abort>
          err = ERR_OK;
 8011fb6:	2300      	movs	r3, #0
 8011fb8:	75fb      	strb	r3, [r7, #23]
 8011fba:	e001      	b.n	8011fc0 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8011fbc:	2301      	movs	r3, #1
 8011fbe:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8011fc0:	7d7b      	ldrb	r3, [r7, #21]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d052      	beq.n	801206c <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	6a1b      	ldr	r3, [r3, #32]
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	330c      	adds	r3, #12
 8011fce:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	6a1b      	ldr	r3, [r3, #32]
 8011fd4:	7dfa      	ldrb	r2, [r7, #23]
 8011fd6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	2200      	movs	r2, #0
 8011fdc:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	2200      	movs	r2, #0
 8011fe2:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8011fe4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d129      	bne.n	8012040 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8011fec:	7dbb      	ldrb	r3, [r7, #22]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d00c      	beq.n	801200c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	2200      	movs	r2, #0
 8011ff6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d005      	beq.n	801200c <lwip_netconn_do_close_internal+0x1f0>
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012004:	2200      	movs	r2, #0
 8012006:	2104      	movs	r1, #4
 8012008:	6878      	ldr	r0, [r7, #4]
 801200a:	4798      	blx	r3
      }
      if (shut_rx) {
 801200c:	7bbb      	ldrb	r3, [r7, #14]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d009      	beq.n	8012026 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012016:	2b00      	cmp	r3, #0
 8012018:	d005      	beq.n	8012026 <lwip_netconn_do_close_internal+0x20a>
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801201e:	2200      	movs	r2, #0
 8012020:	2100      	movs	r1, #0
 8012022:	6878      	ldr	r0, [r7, #4]
 8012024:	4798      	blx	r3
      }
      if (shut_tx) {
 8012026:	7b7b      	ldrb	r3, [r7, #13]
 8012028:	2b00      	cmp	r3, #0
 801202a:	d009      	beq.n	8012040 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012030:	2b00      	cmp	r3, #0
 8012032:	d005      	beq.n	8012040 <lwip_netconn_do_close_internal+0x224>
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012038:	2200      	movs	r2, #0
 801203a:	2102      	movs	r1, #2
 801203c:	6878      	ldr	r0, [r7, #4]
 801203e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8012040:	78fb      	ldrb	r3, [r7, #3]
 8012042:	2b00      	cmp	r3, #0
 8012044:	d002      	beq.n	801204c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8012046:	68b8      	ldr	r0, [r7, #8]
 8012048:	f00d f845 	bl	801f0d6 <sys_sem_signal>
    }
    return ERR_OK;
 801204c:	2300      	movs	r3, #0
 801204e:	e03c      	b.n	80120ca <lwip_netconn_do_close_internal+0x2ae>
 8012050:	08021cd0 	.word	0x08021cd0
 8012054:	08021fa4 	.word	0x08021fa4
 8012058:	08021d14 	.word	0x08021d14
 801205c:	08021fb4 	.word	0x08021fb4
 8012060:	08021fd4 	.word	0x08021fd4
 8012064:	08021ff8 	.word	0x08021ff8
 8012068:	08021e38 	.word	0x08021e38
  }
  if (!close_finished) {
 801206c:	7d7b      	ldrb	r3, [r7, #21]
 801206e:	2b00      	cmp	r3, #0
 8012070:	d11e      	bne.n	80120b0 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8012072:	693b      	ldr	r3, [r7, #16]
 8012074:	7d1b      	ldrb	r3, [r3, #20]
 8012076:	2b01      	cmp	r3, #1
 8012078:	d106      	bne.n	8012088 <lwip_netconn_do_close_internal+0x26c>
 801207a:	4b16      	ldr	r3, [pc, #88]	@ (80120d4 <lwip_netconn_do_close_internal+0x2b8>)
 801207c:	f240 4241 	movw	r2, #1089	@ 0x441
 8012080:	4915      	ldr	r1, [pc, #84]	@ (80120d8 <lwip_netconn_do_close_internal+0x2bc>)
 8012082:	4816      	ldr	r0, [pc, #88]	@ (80120dc <lwip_netconn_do_close_internal+0x2c0>)
 8012084:	f00e fb88 	bl	8020798 <iprintf>
    if (shut_tx) {
 8012088:	7b7b      	ldrb	r3, [r7, #13]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d003      	beq.n	8012096 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 801208e:	4914      	ldr	r1, [pc, #80]	@ (80120e0 <lwip_netconn_do_close_internal+0x2c4>)
 8012090:	6938      	ldr	r0, [r7, #16]
 8012092:	f004 fb53 	bl	801673c <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8012096:	2201      	movs	r2, #1
 8012098:	4912      	ldr	r1, [pc, #72]	@ (80120e4 <lwip_netconn_do_close_internal+0x2c8>)
 801209a:	6938      	ldr	r0, [r7, #16]
 801209c:	f004 fbaa 	bl	80167f4 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80120a0:	4911      	ldr	r1, [pc, #68]	@ (80120e8 <lwip_netconn_do_close_internal+0x2cc>)
 80120a2:	6938      	ldr	r0, [r7, #16]
 80120a4:	f004 fb6c 	bl	8016780 <tcp_err>
    tcp_arg(tpcb, conn);
 80120a8:	6879      	ldr	r1, [r7, #4]
 80120aa:	6938      	ldr	r0, [r7, #16]
 80120ac:	f004 fb12 	bl	80166d4 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80120b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d106      	bne.n	80120c6 <lwip_netconn_do_close_internal+0x2aa>
 80120b8:	4b06      	ldr	r3, [pc, #24]	@ (80120d4 <lwip_netconn_do_close_internal+0x2b8>)
 80120ba:	f240 424d 	movw	r2, #1101	@ 0x44d
 80120be:	490b      	ldr	r1, [pc, #44]	@ (80120ec <lwip_netconn_do_close_internal+0x2d0>)
 80120c0:	4806      	ldr	r0, [pc, #24]	@ (80120dc <lwip_netconn_do_close_internal+0x2c0>)
 80120c2:	f00e fb69 	bl	8020798 <iprintf>
  return err;
 80120c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80120ca:	4618      	mov	r0, r3
 80120cc:	3718      	adds	r7, #24
 80120ce:	46bd      	mov	sp, r7
 80120d0:	bd80      	pop	{r7, pc}
 80120d2:	bf00      	nop
 80120d4:	08021cd0 	.word	0x08021cd0
 80120d8:	0802200c 	.word	0x0802200c
 80120dc:	08021d14 	.word	0x08021d14
 80120e0:	0801180d 	.word	0x0801180d
 80120e4:	08011745 	.word	0x08011745
 80120e8:	080118b5 	.word	0x080118b5
 80120ec:	08022030 	.word	0x08022030

080120f0 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 80120f0:	b580      	push	{r7, lr}
 80120f2:	b084      	sub	sp, #16
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	785b      	ldrb	r3, [r3, #1]
 8012102:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8012104:	7afb      	ldrb	r3, [r7, #11]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d00d      	beq.n	8012126 <lwip_netconn_do_delconn+0x36>
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	781b      	ldrb	r3, [r3, #0]
 8012110:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012114:	2b10      	cmp	r3, #16
 8012116:	d006      	beq.n	8012126 <lwip_netconn_do_delconn+0x36>
 8012118:	4b60      	ldr	r3, [pc, #384]	@ (801229c <lwip_netconn_do_delconn+0x1ac>)
 801211a:	f240 425e 	movw	r2, #1118	@ 0x45e
 801211e:	4960      	ldr	r1, [pc, #384]	@ (80122a0 <lwip_netconn_do_delconn+0x1b0>)
 8012120:	4860      	ldr	r0, [pc, #384]	@ (80122a4 <lwip_netconn_do_delconn+0x1b4>)
 8012122:	f00e fb39 	bl	8020798 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8012126:	7afb      	ldrb	r3, [r7, #11]
 8012128:	2b00      	cmp	r3, #0
 801212a:	d005      	beq.n	8012138 <lwip_netconn_do_delconn+0x48>
 801212c:	7afb      	ldrb	r3, [r7, #11]
 801212e:	2b02      	cmp	r3, #2
 8012130:	d002      	beq.n	8012138 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8012132:	7afb      	ldrb	r3, [r7, #11]
 8012134:	2b03      	cmp	r3, #3
 8012136:	d109      	bne.n	801214c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8012138:	7afb      	ldrb	r3, [r7, #11]
 801213a:	2b03      	cmp	r3, #3
 801213c:	d10a      	bne.n	8012154 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	7f1b      	ldrb	r3, [r3, #28]
 8012144:	f003 0304 	and.w	r3, r3, #4
 8012148:	2b00      	cmp	r3, #0
 801214a:	d103      	bne.n	8012154 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	22fb      	movs	r2, #251	@ 0xfb
 8012150:	711a      	strb	r2, [r3, #4]
 8012152:	e097      	b.n	8012284 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8012154:	7afb      	ldrb	r3, [r7, #11]
 8012156:	2b03      	cmp	r3, #3
 8012158:	d10d      	bne.n	8012176 <lwip_netconn_do_delconn+0x86>
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	7f1b      	ldrb	r3, [r3, #28]
 8012160:	f003 0304 	and.w	r3, r3, #4
 8012164:	2b00      	cmp	r3, #0
 8012166:	d106      	bne.n	8012176 <lwip_netconn_do_delconn+0x86>
 8012168:	4b4c      	ldr	r3, [pc, #304]	@ (801229c <lwip_netconn_do_delconn+0x1ac>)
 801216a:	f240 427a 	movw	r2, #1146	@ 0x47a
 801216e:	494e      	ldr	r1, [pc, #312]	@ (80122a8 <lwip_netconn_do_delconn+0x1b8>)
 8012170:	484c      	ldr	r0, [pc, #304]	@ (80122a4 <lwip_netconn_do_delconn+0x1b4>)
 8012172:	f00e fb11 	bl	8020798 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	2200      	movs	r2, #0
 801217a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	4618      	mov	r0, r3
 8012182:	f7ff fdcd 	bl	8011d20 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	685b      	ldr	r3, [r3, #4]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d05f      	beq.n	8012250 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	781b      	ldrb	r3, [r3, #0]
 8012196:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801219a:	2b10      	cmp	r3, #16
 801219c:	d00d      	beq.n	80121ba <lwip_netconn_do_delconn+0xca>
 801219e:	2b20      	cmp	r3, #32
 80121a0:	d151      	bne.n	8012246 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	685b      	ldr	r3, [r3, #4]
 80121a8:	2200      	movs	r2, #0
 80121aa:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	685b      	ldr	r3, [r3, #4]
 80121b2:	4618      	mov	r0, r3
 80121b4:	f009 fffa 	bl	801c1ac <udp_remove>
          break;
 80121b8:	e046      	b.n	8012248 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	6a1b      	ldr	r3, [r3, #32]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d006      	beq.n	80121d2 <lwip_netconn_do_delconn+0xe2>
 80121c4:	4b35      	ldr	r3, [pc, #212]	@ (801229c <lwip_netconn_do_delconn+0x1ac>)
 80121c6:	f240 4294 	movw	r2, #1172	@ 0x494
 80121ca:	4938      	ldr	r1, [pc, #224]	@ (80122ac <lwip_netconn_do_delconn+0x1bc>)
 80121cc:	4835      	ldr	r0, [pc, #212]	@ (80122a4 <lwip_netconn_do_delconn+0x1b4>)
 80121ce:	f00e fae3 	bl	8020798 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	2204      	movs	r2, #4
 80121d8:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	2203      	movs	r2, #3
 80121de:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	68fa      	ldr	r2, [r7, #12]
 80121e6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	2100      	movs	r1, #0
 80121ee:	4618      	mov	r0, r3
 80121f0:	f7ff fe14 	bl	8011e1c <lwip_netconn_do_close_internal>
 80121f4:	4603      	mov	r3, r0
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d04b      	beq.n	8012292 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	785b      	ldrb	r3, [r3, #1]
 8012200:	2b04      	cmp	r3, #4
 8012202:	d006      	beq.n	8012212 <lwip_netconn_do_delconn+0x122>
 8012204:	4b25      	ldr	r3, [pc, #148]	@ (801229c <lwip_netconn_do_delconn+0x1ac>)
 8012206:	f240 429a 	movw	r2, #1178	@ 0x49a
 801220a:	4929      	ldr	r1, [pc, #164]	@ (80122b0 <lwip_netconn_do_delconn+0x1c0>)
 801220c:	4825      	ldr	r0, [pc, #148]	@ (80122a4 <lwip_netconn_do_delconn+0x1b4>)
 801220e:	f00e fac3 	bl	8020798 <iprintf>
            UNLOCK_TCPIP_CORE();
 8012212:	4828      	ldr	r0, [pc, #160]	@ (80122b4 <lwip_netconn_do_delconn+0x1c4>)
 8012214:	f00c fff3 	bl	801f1fe <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	330c      	adds	r3, #12
 801221e:	2100      	movs	r1, #0
 8012220:	4618      	mov	r0, r3
 8012222:	f00c ff27 	bl	801f074 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8012226:	4823      	ldr	r0, [pc, #140]	@ (80122b4 <lwip_netconn_do_delconn+0x1c4>)
 8012228:	f00c ffda 	bl	801f1e0 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	785b      	ldrb	r3, [r3, #1]
 8012232:	2b00      	cmp	r3, #0
 8012234:	d02d      	beq.n	8012292 <lwip_netconn_do_delconn+0x1a2>
 8012236:	4b19      	ldr	r3, [pc, #100]	@ (801229c <lwip_netconn_do_delconn+0x1ac>)
 8012238:	f240 429e 	movw	r2, #1182	@ 0x49e
 801223c:	491c      	ldr	r1, [pc, #112]	@ (80122b0 <lwip_netconn_do_delconn+0x1c0>)
 801223e:	4819      	ldr	r0, [pc, #100]	@ (80122a4 <lwip_netconn_do_delconn+0x1b4>)
 8012240:	f00e faaa 	bl	8020798 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8012244:	e025      	b.n	8012292 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8012246:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	2200      	movs	r2, #0
 801224e:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012256:	2b00      	cmp	r3, #0
 8012258:	d007      	beq.n	801226a <lwip_netconn_do_delconn+0x17a>
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012260:	68fa      	ldr	r2, [r7, #12]
 8012262:	6810      	ldr	r0, [r2, #0]
 8012264:	2200      	movs	r2, #0
 8012266:	2100      	movs	r1, #0
 8012268:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012270:	2b00      	cmp	r3, #0
 8012272:	d007      	beq.n	8012284 <lwip_netconn_do_delconn+0x194>
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801227a:	68fa      	ldr	r2, [r7, #12]
 801227c:	6810      	ldr	r0, [r2, #0]
 801227e:	2200      	movs	r2, #0
 8012280:	2102      	movs	r1, #2
 8012282:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	330c      	adds	r3, #12
 801228a:	4618      	mov	r0, r3
 801228c:	f00c ff48 	bl	801f120 <sys_sem_valid>
 8012290:	e000      	b.n	8012294 <lwip_netconn_do_delconn+0x1a4>
          return;
 8012292:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8012294:	3710      	adds	r7, #16
 8012296:	46bd      	mov	sp, r7
 8012298:	bd80      	pop	{r7, pc}
 801229a:	bf00      	nop
 801229c:	08021cd0 	.word	0x08021cd0
 80122a0:	08022040 	.word	0x08022040
 80122a4:	08021d14 	.word	0x08021d14
 80122a8:	08022054 	.word	0x08022054
 80122ac:	08022074 	.word	0x08022074
 80122b0:	08022090 	.word	0x08022090
 80122b4:	200270f8 	.word	0x200270f8

080122b8 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 80122b8:	b580      	push	{r7, lr}
 80122ba:	b084      	sub	sp, #16
 80122bc:	af00      	add	r7, sp, #0
 80122be:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80122c4:	68bb      	ldr	r3, [r7, #8]
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	685b      	ldr	r3, [r3, #4]
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d025      	beq.n	801231a <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80122ce:	68bb      	ldr	r3, [r7, #8]
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	781b      	ldrb	r3, [r3, #0]
 80122d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80122d8:	2b10      	cmp	r3, #16
 80122da:	d00e      	beq.n	80122fa <lwip_netconn_do_bind+0x42>
 80122dc:	2b20      	cmp	r3, #32
 80122de:	d119      	bne.n	8012314 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80122e0:	68bb      	ldr	r3, [r7, #8]
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	6858      	ldr	r0, [r3, #4]
 80122e6:	68bb      	ldr	r3, [r7, #8]
 80122e8:	6899      	ldr	r1, [r3, #8]
 80122ea:	68bb      	ldr	r3, [r7, #8]
 80122ec:	899b      	ldrh	r3, [r3, #12]
 80122ee:	461a      	mov	r2, r3
 80122f0:	f009 fe4e 	bl	801bf90 <udp_bind>
 80122f4:	4603      	mov	r3, r0
 80122f6:	73fb      	strb	r3, [r7, #15]
        break;
 80122f8:	e011      	b.n	801231e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80122fa:	68bb      	ldr	r3, [r7, #8]
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	6858      	ldr	r0, [r3, #4]
 8012300:	68bb      	ldr	r3, [r7, #8]
 8012302:	6899      	ldr	r1, [r3, #8]
 8012304:	68bb      	ldr	r3, [r7, #8]
 8012306:	899b      	ldrh	r3, [r3, #12]
 8012308:	461a      	mov	r2, r3
 801230a:	f003 f9ff 	bl	801570c <tcp_bind>
 801230e:	4603      	mov	r3, r0
 8012310:	73fb      	strb	r3, [r7, #15]
        break;
 8012312:	e004      	b.n	801231e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8012314:	23fa      	movs	r3, #250	@ 0xfa
 8012316:	73fb      	strb	r3, [r7, #15]
        break;
 8012318:	e001      	b.n	801231e <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 801231a:	23fa      	movs	r3, #250	@ 0xfa
 801231c:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 801231e:	68bb      	ldr	r3, [r7, #8]
 8012320:	7bfa      	ldrb	r2, [r7, #15]
 8012322:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8012324:	bf00      	nop
 8012326:	3710      	adds	r7, #16
 8012328:	46bd      	mov	sp, r7
 801232a:	bd80      	pop	{r7, pc}

0801232c <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 801232c:	b580      	push	{r7, lr}
 801232e:	b084      	sub	sp, #16
 8012330:	af00      	add	r7, sp, #0
 8012332:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8012338:	68bb      	ldr	r3, [r7, #8]
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	4618      	mov	r0, r3
 801233e:	f7ff f871 	bl	8011424 <netconn_err>
 8012342:	4603      	mov	r3, r0
 8012344:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8012346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801234a:	2b00      	cmp	r3, #0
 801234c:	d134      	bne.n	80123b8 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 801234e:	68bb      	ldr	r3, [r7, #8]
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	685b      	ldr	r3, [r3, #4]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d02d      	beq.n	80123b4 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8012358:	68bb      	ldr	r3, [r7, #8]
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	781b      	ldrb	r3, [r3, #0]
 801235e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012362:	2b20      	cmp	r3, #32
 8012364:	d123      	bne.n	80123ae <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8012366:	68bb      	ldr	r3, [r7, #8]
 8012368:	689b      	ldr	r3, [r3, #8]
 801236a:	689b      	ldr	r3, [r3, #8]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d10c      	bne.n	801238a <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 8012370:	68bb      	ldr	r3, [r7, #8]
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	685a      	ldr	r2, [r3, #4]
 8012376:	68bb      	ldr	r3, [r7, #8]
 8012378:	689b      	ldr	r3, [r3, #8]
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	4619      	mov	r1, r3
 801237e:	4610      	mov	r0, r2
 8012380:	f009 fb96 	bl	801bab0 <udp_send>
 8012384:	4603      	mov	r3, r0
 8012386:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 8012388:	e016      	b.n	80123b8 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 801238a:	68bb      	ldr	r3, [r7, #8]
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	6858      	ldr	r0, [r3, #4]
 8012390:	68bb      	ldr	r3, [r7, #8]
 8012392:	689b      	ldr	r3, [r3, #8]
 8012394:	6819      	ldr	r1, [r3, #0]
 8012396:	68bb      	ldr	r3, [r7, #8]
 8012398:	689b      	ldr	r3, [r3, #8]
 801239a:	f103 0208 	add.w	r2, r3, #8
 801239e:	68bb      	ldr	r3, [r7, #8]
 80123a0:	689b      	ldr	r3, [r3, #8]
 80123a2:	899b      	ldrh	r3, [r3, #12]
 80123a4:	f009 fbb8 	bl	801bb18 <udp_sendto>
 80123a8:	4603      	mov	r3, r0
 80123aa:	73fb      	strb	r3, [r7, #15]
          break;
 80123ac:	e004      	b.n	80123b8 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 80123ae:	23f5      	movs	r3, #245	@ 0xf5
 80123b0:	73fb      	strb	r3, [r7, #15]
          break;
 80123b2:	e001      	b.n	80123b8 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 80123b4:	23f5      	movs	r3, #245	@ 0xf5
 80123b6:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 80123b8:	68bb      	ldr	r3, [r7, #8]
 80123ba:	7bfa      	ldrb	r2, [r7, #15]
 80123bc:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80123be:	bf00      	nop
 80123c0:	3710      	adds	r7, #16
 80123c2:	46bd      	mov	sp, r7
 80123c4:	bd80      	pop	{r7, pc}

080123c6 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 80123c6:	b580      	push	{r7, lr}
 80123c8:	b086      	sub	sp, #24
 80123ca:	af00      	add	r7, sp, #0
 80123cc:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 80123d2:	693b      	ldr	r3, [r7, #16]
 80123d4:	2200      	movs	r2, #0
 80123d6:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 80123d8:	693b      	ldr	r3, [r7, #16]
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	685b      	ldr	r3, [r3, #4]
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d022      	beq.n	8012428 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80123e2:	693b      	ldr	r3, [r7, #16]
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	781b      	ldrb	r3, [r3, #0]
 80123e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80123ec:	2b10      	cmp	r3, #16
 80123ee:	d11b      	bne.n	8012428 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 80123f0:	693b      	ldr	r3, [r7, #16]
 80123f2:	689b      	ldr	r3, [r3, #8]
 80123f4:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 80123f6:	697b      	ldr	r3, [r7, #20]
 80123f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80123fc:	d202      	bcs.n	8012404 <lwip_netconn_do_recv+0x3e>
 80123fe:	697b      	ldr	r3, [r7, #20]
 8012400:	b29b      	uxth	r3, r3
 8012402:	e001      	b.n	8012408 <lwip_netconn_do_recv+0x42>
 8012404:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012408:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 801240a:	693b      	ldr	r3, [r7, #16]
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	685b      	ldr	r3, [r3, #4]
 8012410:	89fa      	ldrh	r2, [r7, #14]
 8012412:	4611      	mov	r1, r2
 8012414:	4618      	mov	r0, r3
 8012416:	f003 fa6b 	bl	80158f0 <tcp_recved>
        remaining -= recved;
 801241a:	89fb      	ldrh	r3, [r7, #14]
 801241c:	697a      	ldr	r2, [r7, #20]
 801241e:	1ad3      	subs	r3, r2, r3
 8012420:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8012422:	697b      	ldr	r3, [r7, #20]
 8012424:	2b00      	cmp	r3, #0
 8012426:	d1e6      	bne.n	80123f6 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8012428:	bf00      	nop
 801242a:	3718      	adds	r7, #24
 801242c:	46bd      	mov	sp, r7
 801242e:	bd80      	pop	{r7, pc}

08012430 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8012430:	b580      	push	{r7, lr}
 8012432:	b088      	sub	sp, #32
 8012434:	af00      	add	r7, sp, #0
 8012436:	6078      	str	r0, [r7, #4]
 8012438:	460b      	mov	r3, r1
 801243a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 801243c:	2300      	movs	r3, #0
 801243e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d106      	bne.n	8012454 <lwip_netconn_do_writemore+0x24>
 8012446:	4b96      	ldr	r3, [pc, #600]	@ (80126a0 <lwip_netconn_do_writemore+0x270>)
 8012448:	f240 6273 	movw	r2, #1651	@ 0x673
 801244c:	4995      	ldr	r1, [pc, #596]	@ (80126a4 <lwip_netconn_do_writemore+0x274>)
 801244e:	4896      	ldr	r0, [pc, #600]	@ (80126a8 <lwip_netconn_do_writemore+0x278>)
 8012450:	f00e f9a2 	bl	8020798 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	785b      	ldrb	r3, [r3, #1]
 8012458:	2b01      	cmp	r3, #1
 801245a:	d006      	beq.n	801246a <lwip_netconn_do_writemore+0x3a>
 801245c:	4b90      	ldr	r3, [pc, #576]	@ (80126a0 <lwip_netconn_do_writemore+0x270>)
 801245e:	f240 6274 	movw	r2, #1652	@ 0x674
 8012462:	4992      	ldr	r1, [pc, #584]	@ (80126ac <lwip_netconn_do_writemore+0x27c>)
 8012464:	4890      	ldr	r0, [pc, #576]	@ (80126a8 <lwip_netconn_do_writemore+0x278>)
 8012466:	f00e f997 	bl	8020798 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	6a1b      	ldr	r3, [r3, #32]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d106      	bne.n	8012480 <lwip_netconn_do_writemore+0x50>
 8012472:	4b8b      	ldr	r3, [pc, #556]	@ (80126a0 <lwip_netconn_do_writemore+0x270>)
 8012474:	f240 6275 	movw	r2, #1653	@ 0x675
 8012478:	498d      	ldr	r1, [pc, #564]	@ (80126b0 <lwip_netconn_do_writemore+0x280>)
 801247a:	488b      	ldr	r0, [pc, #556]	@ (80126a8 <lwip_netconn_do_writemore+0x278>)
 801247c:	f00e f98c 	bl	8020798 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	685b      	ldr	r3, [r3, #4]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d106      	bne.n	8012496 <lwip_netconn_do_writemore+0x66>
 8012488:	4b85      	ldr	r3, [pc, #532]	@ (80126a0 <lwip_netconn_do_writemore+0x270>)
 801248a:	f240 6276 	movw	r2, #1654	@ 0x676
 801248e:	4989      	ldr	r1, [pc, #548]	@ (80126b4 <lwip_netconn_do_writemore+0x284>)
 8012490:	4885      	ldr	r0, [pc, #532]	@ (80126a8 <lwip_netconn_do_writemore+0x278>)
 8012492:	f00e f981 	bl	8020798 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	6a1b      	ldr	r3, [r3, #32]
 801249a:	699a      	ldr	r2, [r3, #24]
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	6a1b      	ldr	r3, [r3, #32]
 80124a0:	695b      	ldr	r3, [r3, #20]
 80124a2:	429a      	cmp	r2, r3
 80124a4:	d306      	bcc.n	80124b4 <lwip_netconn_do_writemore+0x84>
 80124a6:	4b7e      	ldr	r3, [pc, #504]	@ (80126a0 <lwip_netconn_do_writemore+0x270>)
 80124a8:	f240 6277 	movw	r2, #1655	@ 0x677
 80124ac:	4982      	ldr	r1, [pc, #520]	@ (80126b8 <lwip_netconn_do_writemore+0x288>)
 80124ae:	487e      	ldr	r0, [pc, #504]	@ (80126a8 <lwip_netconn_do_writemore+0x278>)
 80124b0:	f00e f972 	bl	8020798 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	6a1b      	ldr	r3, [r3, #32]
 80124b8:	899b      	ldrh	r3, [r3, #12]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d106      	bne.n	80124cc <lwip_netconn_do_writemore+0x9c>
 80124be:	4b78      	ldr	r3, [pc, #480]	@ (80126a0 <lwip_netconn_do_writemore+0x270>)
 80124c0:	f240 6279 	movw	r2, #1657	@ 0x679
 80124c4:	497d      	ldr	r1, [pc, #500]	@ (80126bc <lwip_netconn_do_writemore+0x28c>)
 80124c6:	4878      	ldr	r0, [pc, #480]	@ (80126a8 <lwip_netconn_do_writemore+0x278>)
 80124c8:	f00e f966 	bl	8020798 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	6a1b      	ldr	r3, [r3, #32]
 80124d0:	7f1b      	ldrb	r3, [r3, #28]
 80124d2:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	7f1b      	ldrb	r3, [r3, #28]
 80124d8:	f003 0302 	and.w	r3, r3, #2
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d104      	bne.n	80124ea <lwip_netconn_do_writemore+0xba>
 80124e0:	7ebb      	ldrb	r3, [r7, #26]
 80124e2:	f003 0304 	and.w	r3, r3, #4
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d001      	beq.n	80124ee <lwip_netconn_do_writemore+0xbe>
 80124ea:	2301      	movs	r3, #1
 80124ec:	e000      	b.n	80124f0 <lwip_netconn_do_writemore+0xc0>
 80124ee:	2300      	movs	r3, #0
 80124f0:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	6a1b      	ldr	r3, [r3, #32]
 80124f6:	689b      	ldr	r3, [r3, #8]
 80124f8:	681a      	ldr	r2, [r3, #0]
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	6a1b      	ldr	r3, [r3, #32]
 80124fe:	691b      	ldr	r3, [r3, #16]
 8012500:	4413      	add	r3, r2
 8012502:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	6a1b      	ldr	r3, [r3, #32]
 8012508:	689b      	ldr	r3, [r3, #8]
 801250a:	685a      	ldr	r2, [r3, #4]
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	6a1b      	ldr	r3, [r3, #32]
 8012510:	691b      	ldr	r3, [r3, #16]
 8012512:	1ad3      	subs	r3, r2, r3
 8012514:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8012516:	693b      	ldr	r3, [r7, #16]
 8012518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801251c:	d307      	bcc.n	801252e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 801251e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012522:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8012524:	7ebb      	ldrb	r3, [r7, #26]
 8012526:	f043 0302 	orr.w	r3, r3, #2
 801252a:	76bb      	strb	r3, [r7, #26]
 801252c:	e001      	b.n	8012532 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 801252e:	693b      	ldr	r3, [r7, #16]
 8012530:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	685b      	ldr	r3, [r3, #4]
 8012536:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801253a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 801253c:	89fa      	ldrh	r2, [r7, #14]
 801253e:	8bbb      	ldrh	r3, [r7, #28]
 8012540:	429a      	cmp	r2, r3
 8012542:	d216      	bcs.n	8012572 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8012544:	89fb      	ldrh	r3, [r7, #14]
 8012546:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8012548:	7e3b      	ldrb	r3, [r7, #24]
 801254a:	2b00      	cmp	r3, #0
 801254c:	d00d      	beq.n	801256a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 801254e:	8bbb      	ldrh	r3, [r7, #28]
 8012550:	2b00      	cmp	r3, #0
 8012552:	d10e      	bne.n	8012572 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	6a1b      	ldr	r3, [r3, #32]
 8012558:	699b      	ldr	r3, [r3, #24]
 801255a:	2b00      	cmp	r3, #0
 801255c:	d102      	bne.n	8012564 <lwip_netconn_do_writemore+0x134>
 801255e:	f06f 0306 	mvn.w	r3, #6
 8012562:	e000      	b.n	8012566 <lwip_netconn_do_writemore+0x136>
 8012564:	2300      	movs	r3, #0
 8012566:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8012568:	e07d      	b.n	8012666 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 801256a:	7ebb      	ldrb	r3, [r7, #26]
 801256c:	f043 0302 	orr.w	r3, r3, #2
 8012570:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	6a1b      	ldr	r3, [r3, #32]
 8012576:	691a      	ldr	r2, [r3, #16]
 8012578:	8bbb      	ldrh	r3, [r7, #28]
 801257a:	441a      	add	r2, r3
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	6a1b      	ldr	r3, [r3, #32]
 8012580:	689b      	ldr	r3, [r3, #8]
 8012582:	685b      	ldr	r3, [r3, #4]
 8012584:	429a      	cmp	r2, r3
 8012586:	d906      	bls.n	8012596 <lwip_netconn_do_writemore+0x166>
 8012588:	4b45      	ldr	r3, [pc, #276]	@ (80126a0 <lwip_netconn_do_writemore+0x270>)
 801258a:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 801258e:	494c      	ldr	r1, [pc, #304]	@ (80126c0 <lwip_netconn_do_writemore+0x290>)
 8012590:	4845      	ldr	r0, [pc, #276]	@ (80126a8 <lwip_netconn_do_writemore+0x278>)
 8012592:	f00e f901 	bl	8020798 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8012596:	8bbb      	ldrh	r3, [r7, #28]
 8012598:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801259c:	4293      	cmp	r3, r2
 801259e:	d103      	bne.n	80125a8 <lwip_netconn_do_writemore+0x178>
 80125a0:	693b      	ldr	r3, [r7, #16]
 80125a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80125a6:	d209      	bcs.n	80125bc <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80125a8:	693b      	ldr	r3, [r7, #16]
 80125aa:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 80125ac:	8bba      	ldrh	r2, [r7, #28]
 80125ae:	429a      	cmp	r2, r3
 80125b0:	d10b      	bne.n	80125ca <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	6a1b      	ldr	r3, [r3, #32]
 80125b6:	899b      	ldrh	r3, [r3, #12]
 80125b8:	2b01      	cmp	r3, #1
 80125ba:	d906      	bls.n	80125ca <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 80125bc:	2301      	movs	r3, #1
 80125be:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80125c0:	7ebb      	ldrb	r3, [r7, #26]
 80125c2:	f043 0302 	orr.w	r3, r3, #2
 80125c6:	76bb      	strb	r3, [r7, #26]
 80125c8:	e001      	b.n	80125ce <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 80125ca:	2300      	movs	r3, #0
 80125cc:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	6858      	ldr	r0, [r3, #4]
 80125d2:	7ebb      	ldrb	r3, [r7, #26]
 80125d4:	8bba      	ldrh	r2, [r7, #28]
 80125d6:	6979      	ldr	r1, [r7, #20]
 80125d8:	f007 f83c 	bl	8019654 <tcp_write>
 80125dc:	4603      	mov	r3, r0
 80125de:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 80125e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d12c      	bne.n	8012642 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	6a1b      	ldr	r3, [r3, #32]
 80125ec:	6999      	ldr	r1, [r3, #24]
 80125ee:	8bba      	ldrh	r2, [r7, #28]
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	6a1b      	ldr	r3, [r3, #32]
 80125f4:	440a      	add	r2, r1
 80125f6:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	6a1b      	ldr	r3, [r3, #32]
 80125fc:	6919      	ldr	r1, [r3, #16]
 80125fe:	8bba      	ldrh	r2, [r7, #28]
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	6a1b      	ldr	r3, [r3, #32]
 8012604:	440a      	add	r2, r1
 8012606:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	6a1b      	ldr	r3, [r3, #32]
 801260c:	691a      	ldr	r2, [r3, #16]
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	6a1b      	ldr	r3, [r3, #32]
 8012612:	689b      	ldr	r3, [r3, #8]
 8012614:	685b      	ldr	r3, [r3, #4]
 8012616:	429a      	cmp	r2, r3
 8012618:	d113      	bne.n	8012642 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	6a1b      	ldr	r3, [r3, #32]
 801261e:	899a      	ldrh	r2, [r3, #12]
 8012620:	3a01      	subs	r2, #1
 8012622:	b292      	uxth	r2, r2
 8012624:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	6a1b      	ldr	r3, [r3, #32]
 801262a:	899b      	ldrh	r3, [r3, #12]
 801262c:	2b00      	cmp	r3, #0
 801262e:	d008      	beq.n	8012642 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	6a1b      	ldr	r3, [r3, #32]
 8012634:	689a      	ldr	r2, [r3, #8]
 8012636:	3208      	adds	r2, #8
 8012638:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	6a1b      	ldr	r3, [r3, #32]
 801263e:	2200      	movs	r2, #0
 8012640:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8012642:	7e7b      	ldrb	r3, [r7, #25]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d004      	beq.n	8012652 <lwip_netconn_do_writemore+0x222>
 8012648:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801264c:	2b00      	cmp	r3, #0
 801264e:	f43f af50 	beq.w	80124f2 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8012652:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012656:	2b00      	cmp	r3, #0
 8012658:	d004      	beq.n	8012664 <lwip_netconn_do_writemore+0x234>
 801265a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801265e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012662:	d146      	bne.n	80126f2 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8012664:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8012666:	7e3b      	ldrb	r3, [r7, #24]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d02b      	beq.n	80126c4 <lwip_netconn_do_writemore+0x294>
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	6a1b      	ldr	r3, [r3, #32]
 8012670:	699a      	ldr	r2, [r3, #24]
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	6a1b      	ldr	r3, [r3, #32]
 8012676:	695b      	ldr	r3, [r3, #20]
 8012678:	429a      	cmp	r2, r3
 801267a:	d223      	bcs.n	80126c4 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012680:	2b00      	cmp	r3, #0
 8012682:	d005      	beq.n	8012690 <lwip_netconn_do_writemore+0x260>
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012688:	2200      	movs	r2, #0
 801268a:	2103      	movs	r1, #3
 801268c:	6878      	ldr	r0, [r7, #4]
 801268e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	7f1b      	ldrb	r3, [r3, #28]
 8012694:	f043 0310 	orr.w	r3, r3, #16
 8012698:	b2da      	uxtb	r2, r3
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	771a      	strb	r2, [r3, #28]
 801269e:	e028      	b.n	80126f2 <lwip_netconn_do_writemore+0x2c2>
 80126a0:	08021cd0 	.word	0x08021cd0
 80126a4:	08021e28 	.word	0x08021e28
 80126a8:	08021d14 	.word	0x08021d14
 80126ac:	08022130 	.word	0x08022130
 80126b0:	08021e38 	.word	0x08021e38
 80126b4:	08022150 	.word	0x08022150
 80126b8:	08022168 	.word	0x08022168
 80126bc:	080221a8 	.word	0x080221a8
 80126c0:	080221d0 	.word	0x080221d0
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	685b      	ldr	r3, [r3, #4]
 80126c8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80126cc:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 80126d0:	d305      	bcc.n	80126de <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	685b      	ldr	r3, [r3, #4]
 80126d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80126da:	2b04      	cmp	r3, #4
 80126dc:	d909      	bls.n	80126f2 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d005      	beq.n	80126f2 <lwip_netconn_do_writemore+0x2c2>
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80126ea:	2200      	movs	r2, #0
 80126ec:	2103      	movs	r1, #3
 80126ee:	6878      	ldr	r0, [r7, #4]
 80126f0:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 80126f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d11d      	bne.n	8012736 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	6a1b      	ldr	r3, [r3, #32]
 80126fe:	699a      	ldr	r2, [r3, #24]
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	6a1b      	ldr	r3, [r3, #32]
 8012704:	695b      	ldr	r3, [r3, #20]
 8012706:	429a      	cmp	r2, r3
 8012708:	d002      	beq.n	8012710 <lwip_netconn_do_writemore+0x2e0>
 801270a:	7e3b      	ldrb	r3, [r7, #24]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d001      	beq.n	8012714 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8012710:	2301      	movs	r3, #1
 8012712:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	685b      	ldr	r3, [r3, #4]
 8012718:	4618      	mov	r0, r3
 801271a:	f007 fe09 	bl	801a330 <tcp_output>
 801271e:	4603      	mov	r3, r0
 8012720:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8012722:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8012726:	f113 0f04 	cmn.w	r3, #4
 801272a:	d12c      	bne.n	8012786 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 801272c:	7b3b      	ldrb	r3, [r7, #12]
 801272e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8012730:	2301      	movs	r3, #1
 8012732:	76fb      	strb	r3, [r7, #27]
 8012734:	e027      	b.n	8012786 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8012736:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801273a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801273e:	d120      	bne.n	8012782 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	685b      	ldr	r3, [r3, #4]
 8012744:	4618      	mov	r0, r3
 8012746:	f007 fdf3 	bl	801a330 <tcp_output>
 801274a:	4603      	mov	r3, r0
 801274c:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 801274e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8012752:	f113 0f04 	cmn.w	r3, #4
 8012756:	d104      	bne.n	8012762 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8012758:	7b7b      	ldrb	r3, [r7, #13]
 801275a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 801275c:	2301      	movs	r3, #1
 801275e:	76fb      	strb	r3, [r7, #27]
 8012760:	e011      	b.n	8012786 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8012762:	7e3b      	ldrb	r3, [r7, #24]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d00e      	beq.n	8012786 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	6a1b      	ldr	r3, [r3, #32]
 801276c:	699b      	ldr	r3, [r3, #24]
 801276e:	2b00      	cmp	r3, #0
 8012770:	d102      	bne.n	8012778 <lwip_netconn_do_writemore+0x348>
 8012772:	f06f 0306 	mvn.w	r3, #6
 8012776:	e000      	b.n	801277a <lwip_netconn_do_writemore+0x34a>
 8012778:	2300      	movs	r3, #0
 801277a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 801277c:	2301      	movs	r3, #1
 801277e:	76fb      	strb	r3, [r7, #27]
 8012780:	e001      	b.n	8012786 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8012782:	2301      	movs	r3, #1
 8012784:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8012786:	7efb      	ldrb	r3, [r7, #27]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d015      	beq.n	80127b8 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	6a1b      	ldr	r3, [r3, #32]
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	330c      	adds	r3, #12
 8012794:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	6a1b      	ldr	r3, [r3, #32]
 801279a:	7ffa      	ldrb	r2, [r7, #31]
 801279c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	2200      	movs	r2, #0
 80127a2:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	2200      	movs	r2, #0
 80127a8:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80127aa:	78fb      	ldrb	r3, [r7, #3]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d006      	beq.n	80127be <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 80127b0:	68b8      	ldr	r0, [r7, #8]
 80127b2:	f00c fc90 	bl	801f0d6 <sys_sem_signal>
 80127b6:	e002      	b.n	80127be <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 80127b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80127bc:	e000      	b.n	80127c0 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 80127be:	2300      	movs	r3, #0
}
 80127c0:	4618      	mov	r0, r3
 80127c2:	3720      	adds	r7, #32
 80127c4:	46bd      	mov	sp, r7
 80127c6:	bd80      	pop	{r7, pc}

080127c8 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 80127c8:	b580      	push	{r7, lr}
 80127ca:	b084      	sub	sp, #16
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	785b      	ldrb	r3, [r3, #1]
 80127da:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	685b      	ldr	r3, [r3, #4]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d069      	beq.n	80128ba <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	781b      	ldrb	r3, [r3, #0]
 80127ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 80127f0:	2b10      	cmp	r3, #16
 80127f2:	d162      	bne.n	80128ba <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80127f8:	2b03      	cmp	r3, #3
 80127fa:	d002      	beq.n	8012802 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80127fc:	7afb      	ldrb	r3, [r7, #11]
 80127fe:	2b02      	cmp	r3, #2
 8012800:	d05b      	beq.n	80128ba <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8012802:	7afb      	ldrb	r3, [r7, #11]
 8012804:	2b03      	cmp	r3, #3
 8012806:	d103      	bne.n	8012810 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	22f5      	movs	r2, #245	@ 0xf5
 801280c:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 801280e:	e059      	b.n	80128c4 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8012810:	7afb      	ldrb	r3, [r7, #11]
 8012812:	2b01      	cmp	r3, #1
 8012814:	d103      	bne.n	801281e <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8012816:	68fb      	ldr	r3, [r7, #12]
 8012818:	22fb      	movs	r2, #251	@ 0xfb
 801281a:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 801281c:	e052      	b.n	80128c4 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	7a1b      	ldrb	r3, [r3, #8]
 8012822:	f003 0301 	and.w	r3, r3, #1
 8012826:	2b00      	cmp	r3, #0
 8012828:	d004      	beq.n	8012834 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	4618      	mov	r0, r3
 8012830:	f7ff fa76 	bl	8011d20 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	6a1b      	ldr	r3, [r3, #32]
 801283a:	2b00      	cmp	r3, #0
 801283c:	d006      	beq.n	801284c <lwip_netconn_do_close+0x84>
 801283e:	4b23      	ldr	r3, [pc, #140]	@ (80128cc <lwip_netconn_do_close+0x104>)
 8012840:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 8012844:	4922      	ldr	r1, [pc, #136]	@ (80128d0 <lwip_netconn_do_close+0x108>)
 8012846:	4823      	ldr	r0, [pc, #140]	@ (80128d4 <lwip_netconn_do_close+0x10c>)
 8012848:	f00d ffa6 	bl	8020798 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	2204      	movs	r2, #4
 8012852:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	68fa      	ldr	r2, [r7, #12]
 801285a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	2100      	movs	r1, #0
 8012862:	4618      	mov	r0, r3
 8012864:	f7ff fada 	bl	8011e1c <lwip_netconn_do_close_internal>
 8012868:	4603      	mov	r3, r0
 801286a:	2b00      	cmp	r3, #0
 801286c:	d029      	beq.n	80128c2 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	785b      	ldrb	r3, [r3, #1]
 8012874:	2b04      	cmp	r3, #4
 8012876:	d006      	beq.n	8012886 <lwip_netconn_do_close+0xbe>
 8012878:	4b14      	ldr	r3, [pc, #80]	@ (80128cc <lwip_netconn_do_close+0x104>)
 801287a:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 801287e:	4916      	ldr	r1, [pc, #88]	@ (80128d8 <lwip_netconn_do_close+0x110>)
 8012880:	4814      	ldr	r0, [pc, #80]	@ (80128d4 <lwip_netconn_do_close+0x10c>)
 8012882:	f00d ff89 	bl	8020798 <iprintf>
        UNLOCK_TCPIP_CORE();
 8012886:	4815      	ldr	r0, [pc, #84]	@ (80128dc <lwip_netconn_do_close+0x114>)
 8012888:	f00c fcb9 	bl	801f1fe <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	330c      	adds	r3, #12
 8012892:	2100      	movs	r1, #0
 8012894:	4618      	mov	r0, r3
 8012896:	f00c fbed 	bl	801f074 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 801289a:	4810      	ldr	r0, [pc, #64]	@ (80128dc <lwip_netconn_do_close+0x114>)
 801289c:	f00c fca0 	bl	801f1e0 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	785b      	ldrb	r3, [r3, #1]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d00b      	beq.n	80128c2 <lwip_netconn_do_close+0xfa>
 80128aa:	4b08      	ldr	r3, [pc, #32]	@ (80128cc <lwip_netconn_do_close+0x104>)
 80128ac:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 80128b0:	4909      	ldr	r1, [pc, #36]	@ (80128d8 <lwip_netconn_do_close+0x110>)
 80128b2:	4808      	ldr	r0, [pc, #32]	@ (80128d4 <lwip_netconn_do_close+0x10c>)
 80128b4:	f00d ff70 	bl	8020798 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 80128b8:	e003      	b.n	80128c2 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	22f5      	movs	r2, #245	@ 0xf5
 80128be:	711a      	strb	r2, [r3, #4]
 80128c0:	e000      	b.n	80128c4 <lwip_netconn_do_close+0xfc>
      return;
 80128c2:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 80128c4:	3710      	adds	r7, #16
 80128c6:	46bd      	mov	sp, r7
 80128c8:	bd80      	pop	{r7, pc}
 80128ca:	bf00      	nop
 80128cc:	08021cd0 	.word	0x08021cd0
 80128d0:	08022074 	.word	0x08022074
 80128d4:	08021d14 	.word	0x08021d14
 80128d8:	08022090 	.word	0x08022090
 80128dc:	200270f8 	.word	0x200270f8

080128e0 <lwip_strerr>:
 * @param err an lwip internal err_t
 * @return a string representation for err
 */
const char *
lwip_strerr(err_t err)
{
 80128e0:	b480      	push	{r7}
 80128e2:	b083      	sub	sp, #12
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	4603      	mov	r3, r0
 80128e8:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_strerr))) {
 80128ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	dc04      	bgt.n	80128fc <lwip_strerr+0x1c>
 80128f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80128f6:	f113 0f10 	cmn.w	r3, #16
 80128fa:	da01      	bge.n	8012900 <lwip_strerr+0x20>
    return "Unknown error.";
 80128fc:	4b06      	ldr	r3, [pc, #24]	@ (8012918 <lwip_strerr+0x38>)
 80128fe:	e005      	b.n	801290c <lwip_strerr+0x2c>
  }
  return err_strerr[-err];
 8012900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012904:	425b      	negs	r3, r3
 8012906:	4a05      	ldr	r2, [pc, #20]	@ (801291c <lwip_strerr+0x3c>)
 8012908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 801290c:	4618      	mov	r0, r3
 801290e:	370c      	adds	r7, #12
 8012910:	46bd      	mov	sp, r7
 8012912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012916:	4770      	bx	lr
 8012918:	08022364 	.word	0x08022364
 801291c:	20000024 	.word	0x20000024

08012920 <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
 8012920:	b580      	push	{r7, lr}
 8012922:	b082      	sub	sp, #8
 8012924:	af00      	add	r7, sp, #0
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8012926:	2006      	movs	r0, #6
 8012928:	f001 f846 	bl	80139b8 <memp_malloc>
 801292c:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	2b00      	cmp	r3, #0
 8012932:	d004      	beq.n	801293e <netbuf_new+0x1e>
    memset(buf, 0, sizeof(struct netbuf));
 8012934:	2210      	movs	r2, #16
 8012936:	2100      	movs	r1, #0
 8012938:	6878      	ldr	r0, [r7, #4]
 801293a:	f00e f88d 	bl	8020a58 <memset>
  }
  return buf;
 801293e:	687b      	ldr	r3, [r7, #4]
}
 8012940:	4618      	mov	r0, r3
 8012942:	3708      	adds	r7, #8
 8012944:	46bd      	mov	sp, r7
 8012946:	bd80      	pop	{r7, pc}

08012948 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8012948:	b580      	push	{r7, lr}
 801294a:	b082      	sub	sp, #8
 801294c:	af00      	add	r7, sp, #0
 801294e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	2b00      	cmp	r3, #0
 8012954:	d013      	beq.n	801297e <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d00b      	beq.n	8012976 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	4618      	mov	r0, r3
 8012964:	f002 f88a 	bl	8014a7c <pbuf_free>
      buf->p = buf->ptr = NULL;
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	2200      	movs	r2, #0
 801296c:	605a      	str	r2, [r3, #4]
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	685a      	ldr	r2, [r3, #4]
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8012976:	6879      	ldr	r1, [r7, #4]
 8012978:	2006      	movs	r0, #6
 801297a:	f001 f899 	bl	8013ab0 <memp_free>
  }
}
 801297e:	bf00      	nop
 8012980:	3708      	adds	r7, #8
 8012982:	46bd      	mov	sp, r7
 8012984:	bd80      	pop	{r7, pc}
	...

08012988 <netbuf_alloc>:
 * @return pointer to the allocated memory
 *         NULL if no memory could be allocated
 */
void *
netbuf_alloc(struct netbuf *buf, u16_t size)
{
 8012988:	b580      	push	{r7, lr}
 801298a:	b082      	sub	sp, #8
 801298c:	af00      	add	r7, sp, #0
 801298e:	6078      	str	r0, [r7, #4]
 8012990:	460b      	mov	r3, r1
 8012992:	807b      	strh	r3, [r7, #2]
  LWIP_ERROR("netbuf_alloc: invalid buf", (buf != NULL), return NULL;);
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	2b00      	cmp	r3, #0
 8012998:	d107      	bne.n	80129aa <netbuf_alloc+0x22>
 801299a:	4b1c      	ldr	r3, [pc, #112]	@ (8012a0c <netbuf_alloc+0x84>)
 801299c:	2268      	movs	r2, #104	@ 0x68
 801299e:	491c      	ldr	r1, [pc, #112]	@ (8012a10 <netbuf_alloc+0x88>)
 80129a0:	481c      	ldr	r0, [pc, #112]	@ (8012a14 <netbuf_alloc+0x8c>)
 80129a2:	f00d fef9 	bl	8020798 <iprintf>
 80129a6:	2300      	movs	r3, #0
 80129a8:	e02b      	b.n	8012a02 <netbuf_alloc+0x7a>

  /* Deallocate any previously allocated memory. */
  if (buf->p != NULL) {
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d004      	beq.n	80129bc <netbuf_alloc+0x34>
    pbuf_free(buf->p);
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	4618      	mov	r0, r3
 80129b8:	f002 f860 	bl	8014a7c <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, size, PBUF_RAM);
 80129bc:	887b      	ldrh	r3, [r7, #2]
 80129be:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80129c2:	4619      	mov	r1, r3
 80129c4:	2036      	movs	r0, #54	@ 0x36
 80129c6:	f001 fd2d 	bl	8014424 <pbuf_alloc>
 80129ca:	4602      	mov	r2, r0
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d101      	bne.n	80129dc <netbuf_alloc+0x54>
    return NULL;
 80129d8:	2300      	movs	r3, #0
 80129da:	e012      	b.n	8012a02 <netbuf_alloc+0x7a>
  }
  LWIP_ASSERT("check that first pbuf can hold size",
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	895b      	ldrh	r3, [r3, #10]
 80129e2:	887a      	ldrh	r2, [r7, #2]
 80129e4:	429a      	cmp	r2, r3
 80129e6:	d905      	bls.n	80129f4 <netbuf_alloc+0x6c>
 80129e8:	4b08      	ldr	r3, [pc, #32]	@ (8012a0c <netbuf_alloc+0x84>)
 80129ea:	2272      	movs	r2, #114	@ 0x72
 80129ec:	490a      	ldr	r1, [pc, #40]	@ (8012a18 <netbuf_alloc+0x90>)
 80129ee:	4809      	ldr	r0, [pc, #36]	@ (8012a14 <netbuf_alloc+0x8c>)
 80129f0:	f00d fed2 	bl	8020798 <iprintf>
              (buf->p->len >= size));
  buf->ptr = buf->p;
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	681a      	ldr	r2, [r3, #0]
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	605a      	str	r2, [r3, #4]
  return buf->p->payload;
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	685b      	ldr	r3, [r3, #4]
}
 8012a02:	4618      	mov	r0, r3
 8012a04:	3708      	adds	r7, #8
 8012a06:	46bd      	mov	sp, r7
 8012a08:	bd80      	pop	{r7, pc}
 8012a0a:	bf00      	nop
 8012a0c:	08022374 	.word	0x08022374
 8012a10:	080223a8 	.word	0x080223a8
 8012a14:	080223c4 	.word	0x080223c4
 8012a18:	080223ec 	.word	0x080223ec

08012a1c <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	b084      	sub	sp, #16
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	60f8      	str	r0, [r7, #12]
 8012a24:	60b9      	str	r1, [r7, #8]
 8012a26:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d108      	bne.n	8012a40 <netbuf_data+0x24>
 8012a2e:	4b1b      	ldr	r3, [pc, #108]	@ (8012a9c <netbuf_data+0x80>)
 8012a30:	22c6      	movs	r2, #198	@ 0xc6
 8012a32:	491b      	ldr	r1, [pc, #108]	@ (8012aa0 <netbuf_data+0x84>)
 8012a34:	481b      	ldr	r0, [pc, #108]	@ (8012aa4 <netbuf_data+0x88>)
 8012a36:	f00d feaf 	bl	8020798 <iprintf>
 8012a3a:	f06f 030f 	mvn.w	r3, #15
 8012a3e:	e029      	b.n	8012a94 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8012a40:	68bb      	ldr	r3, [r7, #8]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d108      	bne.n	8012a58 <netbuf_data+0x3c>
 8012a46:	4b15      	ldr	r3, [pc, #84]	@ (8012a9c <netbuf_data+0x80>)
 8012a48:	22c7      	movs	r2, #199	@ 0xc7
 8012a4a:	4917      	ldr	r1, [pc, #92]	@ (8012aa8 <netbuf_data+0x8c>)
 8012a4c:	4815      	ldr	r0, [pc, #84]	@ (8012aa4 <netbuf_data+0x88>)
 8012a4e:	f00d fea3 	bl	8020798 <iprintf>
 8012a52:	f06f 030f 	mvn.w	r3, #15
 8012a56:	e01d      	b.n	8012a94 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d108      	bne.n	8012a70 <netbuf_data+0x54>
 8012a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8012a9c <netbuf_data+0x80>)
 8012a60:	22c8      	movs	r2, #200	@ 0xc8
 8012a62:	4912      	ldr	r1, [pc, #72]	@ (8012aac <netbuf_data+0x90>)
 8012a64:	480f      	ldr	r0, [pc, #60]	@ (8012aa4 <netbuf_data+0x88>)
 8012a66:	f00d fe97 	bl	8020798 <iprintf>
 8012a6a:	f06f 030f 	mvn.w	r3, #15
 8012a6e:	e011      	b.n	8012a94 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	685b      	ldr	r3, [r3, #4]
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d102      	bne.n	8012a7e <netbuf_data+0x62>
    return ERR_BUF;
 8012a78:	f06f 0301 	mvn.w	r3, #1
 8012a7c:	e00a      	b.n	8012a94 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	685b      	ldr	r3, [r3, #4]
 8012a82:	685a      	ldr	r2, [r3, #4]
 8012a84:	68bb      	ldr	r3, [r7, #8]
 8012a86:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	685b      	ldr	r3, [r3, #4]
 8012a8c:	895a      	ldrh	r2, [r3, #10]
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8012a92:	2300      	movs	r3, #0
}
 8012a94:	4618      	mov	r0, r3
 8012a96:	3710      	adds	r7, #16
 8012a98:	46bd      	mov	sp, r7
 8012a9a:	bd80      	pop	{r7, pc}
 8012a9c:	08022374 	.word	0x08022374
 8012aa0:	0802247c 	.word	0x0802247c
 8012aa4:	080223c4 	.word	0x080223c4
 8012aa8:	08022498 	.word	0x08022498
 8012aac:	080224b8 	.word	0x080224b8

08012ab0 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8012ab0:	b580      	push	{r7, lr}
 8012ab2:	b084      	sub	sp, #16
 8012ab4:	af00      	add	r7, sp, #0
 8012ab6:	6078      	str	r0, [r7, #4]
 8012ab8:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8012aba:	f008 fd11 	bl	801b4e0 <sys_timeouts_sleeptime>
 8012abe:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8012ac0:	68fb      	ldr	r3, [r7, #12]
 8012ac2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012ac6:	d10b      	bne.n	8012ae0 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8012ac8:	4813      	ldr	r0, [pc, #76]	@ (8012b18 <tcpip_timeouts_mbox_fetch+0x68>)
 8012aca:	f00c fb98 	bl	801f1fe <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8012ace:	2200      	movs	r2, #0
 8012ad0:	6839      	ldr	r1, [r7, #0]
 8012ad2:	6878      	ldr	r0, [r7, #4]
 8012ad4:	f00c fa22 	bl	801ef1c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8012ad8:	480f      	ldr	r0, [pc, #60]	@ (8012b18 <tcpip_timeouts_mbox_fetch+0x68>)
 8012ada:	f00c fb81 	bl	801f1e0 <sys_mutex_lock>
    return;
 8012ade:	e018      	b.n	8012b12 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d102      	bne.n	8012aec <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8012ae6:	f008 fcc1 	bl	801b46c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012aea:	e7e6      	b.n	8012aba <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8012aec:	480a      	ldr	r0, [pc, #40]	@ (8012b18 <tcpip_timeouts_mbox_fetch+0x68>)
 8012aee:	f00c fb86 	bl	801f1fe <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8012af2:	68fa      	ldr	r2, [r7, #12]
 8012af4:	6839      	ldr	r1, [r7, #0]
 8012af6:	6878      	ldr	r0, [r7, #4]
 8012af8:	f00c fa10 	bl	801ef1c <sys_arch_mbox_fetch>
 8012afc:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8012afe:	4806      	ldr	r0, [pc, #24]	@ (8012b18 <tcpip_timeouts_mbox_fetch+0x68>)
 8012b00:	f00c fb6e 	bl	801f1e0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8012b04:	68bb      	ldr	r3, [r7, #8]
 8012b06:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012b0a:	d102      	bne.n	8012b12 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8012b0c:	f008 fcae 	bl	801b46c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012b10:	e7d3      	b.n	8012aba <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8012b12:	3710      	adds	r7, #16
 8012b14:	46bd      	mov	sp, r7
 8012b16:	bd80      	pop	{r7, pc}
 8012b18:	200270f8 	.word	0x200270f8

08012b1c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	b084      	sub	sp, #16
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8012b24:	4810      	ldr	r0, [pc, #64]	@ (8012b68 <tcpip_thread+0x4c>)
 8012b26:	f00c fb5b 	bl	801f1e0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8012b2a:	4b10      	ldr	r3, [pc, #64]	@ (8012b6c <tcpip_thread+0x50>)
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d005      	beq.n	8012b3e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8012b32:	4b0e      	ldr	r3, [pc, #56]	@ (8012b6c <tcpip_thread+0x50>)
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	4a0e      	ldr	r2, [pc, #56]	@ (8012b70 <tcpip_thread+0x54>)
 8012b38:	6812      	ldr	r2, [r2, #0]
 8012b3a:	4610      	mov	r0, r2
 8012b3c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8012b3e:	f107 030c 	add.w	r3, r7, #12
 8012b42:	4619      	mov	r1, r3
 8012b44:	480b      	ldr	r0, [pc, #44]	@ (8012b74 <tcpip_thread+0x58>)
 8012b46:	f7ff ffb3 	bl	8012ab0 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d106      	bne.n	8012b5e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012b50:	4b09      	ldr	r3, [pc, #36]	@ (8012b78 <tcpip_thread+0x5c>)
 8012b52:	2291      	movs	r2, #145	@ 0x91
 8012b54:	4909      	ldr	r1, [pc, #36]	@ (8012b7c <tcpip_thread+0x60>)
 8012b56:	480a      	ldr	r0, [pc, #40]	@ (8012b80 <tcpip_thread+0x64>)
 8012b58:	f00d fe1e 	bl	8020798 <iprintf>
      continue;
 8012b5c:	e003      	b.n	8012b66 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	4618      	mov	r0, r3
 8012b62:	f000 f80f 	bl	8012b84 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8012b66:	e7ea      	b.n	8012b3e <tcpip_thread+0x22>
 8012b68:	200270f8 	.word	0x200270f8
 8012b6c:	200270ec 	.word	0x200270ec
 8012b70:	200270f0 	.word	0x200270f0
 8012b74:	200270f4 	.word	0x200270f4
 8012b78:	0802250c 	.word	0x0802250c
 8012b7c:	0802253c 	.word	0x0802253c
 8012b80:	0802255c 	.word	0x0802255c

08012b84 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8012b84:	b580      	push	{r7, lr}
 8012b86:	b082      	sub	sp, #8
 8012b88:	af00      	add	r7, sp, #0
 8012b8a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	781b      	ldrb	r3, [r3, #0]
 8012b90:	2b02      	cmp	r3, #2
 8012b92:	d026      	beq.n	8012be2 <tcpip_thread_handle_msg+0x5e>
 8012b94:	2b02      	cmp	r3, #2
 8012b96:	dc2b      	bgt.n	8012bf0 <tcpip_thread_handle_msg+0x6c>
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d002      	beq.n	8012ba2 <tcpip_thread_handle_msg+0x1e>
 8012b9c:	2b01      	cmp	r3, #1
 8012b9e:	d015      	beq.n	8012bcc <tcpip_thread_handle_msg+0x48>
 8012ba0:	e026      	b.n	8012bf0 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	68db      	ldr	r3, [r3, #12]
 8012ba6:	687a      	ldr	r2, [r7, #4]
 8012ba8:	6850      	ldr	r0, [r2, #4]
 8012baa:	687a      	ldr	r2, [r7, #4]
 8012bac:	6892      	ldr	r2, [r2, #8]
 8012bae:	4611      	mov	r1, r2
 8012bb0:	4798      	blx	r3
 8012bb2:	4603      	mov	r3, r0
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d004      	beq.n	8012bc2 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	685b      	ldr	r3, [r3, #4]
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	f001 ff5d 	bl	8014a7c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8012bc2:	6879      	ldr	r1, [r7, #4]
 8012bc4:	2009      	movs	r0, #9
 8012bc6:	f000 ff73 	bl	8013ab0 <memp_free>
      break;
 8012bca:	e018      	b.n	8012bfe <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	685b      	ldr	r3, [r3, #4]
 8012bd0:	687a      	ldr	r2, [r7, #4]
 8012bd2:	6892      	ldr	r2, [r2, #8]
 8012bd4:	4610      	mov	r0, r2
 8012bd6:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8012bd8:	6879      	ldr	r1, [r7, #4]
 8012bda:	2008      	movs	r0, #8
 8012bdc:	f000 ff68 	bl	8013ab0 <memp_free>
      break;
 8012be0:	e00d      	b.n	8012bfe <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	685b      	ldr	r3, [r3, #4]
 8012be6:	687a      	ldr	r2, [r7, #4]
 8012be8:	6892      	ldr	r2, [r2, #8]
 8012bea:	4610      	mov	r0, r2
 8012bec:	4798      	blx	r3
      break;
 8012bee:	e006      	b.n	8012bfe <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012bf0:	4b05      	ldr	r3, [pc, #20]	@ (8012c08 <tcpip_thread_handle_msg+0x84>)
 8012bf2:	22cf      	movs	r2, #207	@ 0xcf
 8012bf4:	4905      	ldr	r1, [pc, #20]	@ (8012c0c <tcpip_thread_handle_msg+0x88>)
 8012bf6:	4806      	ldr	r0, [pc, #24]	@ (8012c10 <tcpip_thread_handle_msg+0x8c>)
 8012bf8:	f00d fdce 	bl	8020798 <iprintf>
      break;
 8012bfc:	bf00      	nop
  }
}
 8012bfe:	bf00      	nop
 8012c00:	3708      	adds	r7, #8
 8012c02:	46bd      	mov	sp, r7
 8012c04:	bd80      	pop	{r7, pc}
 8012c06:	bf00      	nop
 8012c08:	0802250c 	.word	0x0802250c
 8012c0c:	0802253c 	.word	0x0802253c
 8012c10:	0802255c 	.word	0x0802255c

08012c14 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8012c14:	b580      	push	{r7, lr}
 8012c16:	b086      	sub	sp, #24
 8012c18:	af00      	add	r7, sp, #0
 8012c1a:	60f8      	str	r0, [r7, #12]
 8012c1c:	60b9      	str	r1, [r7, #8]
 8012c1e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012c20:	481a      	ldr	r0, [pc, #104]	@ (8012c8c <tcpip_inpkt+0x78>)
 8012c22:	f00c f9c3 	bl	801efac <sys_mbox_valid>
 8012c26:	4603      	mov	r3, r0
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d105      	bne.n	8012c38 <tcpip_inpkt+0x24>
 8012c2c:	4b18      	ldr	r3, [pc, #96]	@ (8012c90 <tcpip_inpkt+0x7c>)
 8012c2e:	22fc      	movs	r2, #252	@ 0xfc
 8012c30:	4918      	ldr	r1, [pc, #96]	@ (8012c94 <tcpip_inpkt+0x80>)
 8012c32:	4819      	ldr	r0, [pc, #100]	@ (8012c98 <tcpip_inpkt+0x84>)
 8012c34:	f00d fdb0 	bl	8020798 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8012c38:	2009      	movs	r0, #9
 8012c3a:	f000 febd 	bl	80139b8 <memp_malloc>
 8012c3e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8012c40:	697b      	ldr	r3, [r7, #20]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d102      	bne.n	8012c4c <tcpip_inpkt+0x38>
    return ERR_MEM;
 8012c46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012c4a:	e01a      	b.n	8012c82 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8012c4c:	697b      	ldr	r3, [r7, #20]
 8012c4e:	2200      	movs	r2, #0
 8012c50:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8012c52:	697b      	ldr	r3, [r7, #20]
 8012c54:	68fa      	ldr	r2, [r7, #12]
 8012c56:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8012c58:	697b      	ldr	r3, [r7, #20]
 8012c5a:	68ba      	ldr	r2, [r7, #8]
 8012c5c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8012c5e:	697b      	ldr	r3, [r7, #20]
 8012c60:	687a      	ldr	r2, [r7, #4]
 8012c62:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012c64:	6979      	ldr	r1, [r7, #20]
 8012c66:	4809      	ldr	r0, [pc, #36]	@ (8012c8c <tcpip_inpkt+0x78>)
 8012c68:	f00c f934 	bl	801eed4 <sys_mbox_trypost>
 8012c6c:	4603      	mov	r3, r0
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d006      	beq.n	8012c80 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8012c72:	6979      	ldr	r1, [r7, #20]
 8012c74:	2009      	movs	r0, #9
 8012c76:	f000 ff1b 	bl	8013ab0 <memp_free>
    return ERR_MEM;
 8012c7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012c7e:	e000      	b.n	8012c82 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8012c80:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8012c82:	4618      	mov	r0, r3
 8012c84:	3718      	adds	r7, #24
 8012c86:	46bd      	mov	sp, r7
 8012c88:	bd80      	pop	{r7, pc}
 8012c8a:	bf00      	nop
 8012c8c:	200270f4 	.word	0x200270f4
 8012c90:	0802250c 	.word	0x0802250c
 8012c94:	08022584 	.word	0x08022584
 8012c98:	0802255c 	.word	0x0802255c

08012c9c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8012c9c:	b580      	push	{r7, lr}
 8012c9e:	b082      	sub	sp, #8
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	6078      	str	r0, [r7, #4]
 8012ca4:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8012ca6:	683b      	ldr	r3, [r7, #0]
 8012ca8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012cac:	f003 0318 	and.w	r3, r3, #24
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d006      	beq.n	8012cc2 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8012cb4:	4a08      	ldr	r2, [pc, #32]	@ (8012cd8 <tcpip_input+0x3c>)
 8012cb6:	6839      	ldr	r1, [r7, #0]
 8012cb8:	6878      	ldr	r0, [r7, #4]
 8012cba:	f7ff ffab 	bl	8012c14 <tcpip_inpkt>
 8012cbe:	4603      	mov	r3, r0
 8012cc0:	e005      	b.n	8012cce <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8012cc2:	4a06      	ldr	r2, [pc, #24]	@ (8012cdc <tcpip_input+0x40>)
 8012cc4:	6839      	ldr	r1, [r7, #0]
 8012cc6:	6878      	ldr	r0, [r7, #4]
 8012cc8:	f7ff ffa4 	bl	8012c14 <tcpip_inpkt>
 8012ccc:	4603      	mov	r3, r0
}
 8012cce:	4618      	mov	r0, r3
 8012cd0:	3708      	adds	r7, #8
 8012cd2:	46bd      	mov	sp, r7
 8012cd4:	bd80      	pop	{r7, pc}
 8012cd6:	bf00      	nop
 8012cd8:	0801ec1d 	.word	0x0801ec1d
 8012cdc:	0801d8d9 	.word	0x0801d8d9

08012ce0 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	b084      	sub	sp, #16
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	6078      	str	r0, [r7, #4]
 8012ce8:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012cea:	4819      	ldr	r0, [pc, #100]	@ (8012d50 <tcpip_try_callback+0x70>)
 8012cec:	f00c f95e 	bl	801efac <sys_mbox_valid>
 8012cf0:	4603      	mov	r3, r0
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d106      	bne.n	8012d04 <tcpip_try_callback+0x24>
 8012cf6:	4b17      	ldr	r3, [pc, #92]	@ (8012d54 <tcpip_try_callback+0x74>)
 8012cf8:	f240 125d 	movw	r2, #349	@ 0x15d
 8012cfc:	4916      	ldr	r1, [pc, #88]	@ (8012d58 <tcpip_try_callback+0x78>)
 8012cfe:	4817      	ldr	r0, [pc, #92]	@ (8012d5c <tcpip_try_callback+0x7c>)
 8012d00:	f00d fd4a 	bl	8020798 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8012d04:	2008      	movs	r0, #8
 8012d06:	f000 fe57 	bl	80139b8 <memp_malloc>
 8012d0a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d102      	bne.n	8012d18 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8012d12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012d16:	e017      	b.n	8012d48 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	2201      	movs	r2, #1
 8012d1c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	687a      	ldr	r2, [r7, #4]
 8012d22:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	683a      	ldr	r2, [r7, #0]
 8012d28:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012d2a:	68f9      	ldr	r1, [r7, #12]
 8012d2c:	4808      	ldr	r0, [pc, #32]	@ (8012d50 <tcpip_try_callback+0x70>)
 8012d2e:	f00c f8d1 	bl	801eed4 <sys_mbox_trypost>
 8012d32:	4603      	mov	r3, r0
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d006      	beq.n	8012d46 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8012d38:	68f9      	ldr	r1, [r7, #12]
 8012d3a:	2008      	movs	r0, #8
 8012d3c:	f000 feb8 	bl	8013ab0 <memp_free>
    return ERR_MEM;
 8012d40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012d44:	e000      	b.n	8012d48 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8012d46:	2300      	movs	r3, #0
}
 8012d48:	4618      	mov	r0, r3
 8012d4a:	3710      	adds	r7, #16
 8012d4c:	46bd      	mov	sp, r7
 8012d4e:	bd80      	pop	{r7, pc}
 8012d50:	200270f4 	.word	0x200270f4
 8012d54:	0802250c 	.word	0x0802250c
 8012d58:	08022584 	.word	0x08022584
 8012d5c:	0802255c 	.word	0x0802255c

08012d60 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b084      	sub	sp, #16
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	60f8      	str	r0, [r7, #12]
 8012d68:	60b9      	str	r1, [r7, #8]
 8012d6a:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8012d6c:	4806      	ldr	r0, [pc, #24]	@ (8012d88 <tcpip_send_msg_wait_sem+0x28>)
 8012d6e:	f00c fa37 	bl	801f1e0 <sys_mutex_lock>
  fn(apimsg);
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	68b8      	ldr	r0, [r7, #8]
 8012d76:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8012d78:	4803      	ldr	r0, [pc, #12]	@ (8012d88 <tcpip_send_msg_wait_sem+0x28>)
 8012d7a:	f00c fa40 	bl	801f1fe <sys_mutex_unlock>
  return ERR_OK;
 8012d7e:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8012d80:	4618      	mov	r0, r3
 8012d82:	3710      	adds	r7, #16
 8012d84:	46bd      	mov	sp, r7
 8012d86:	bd80      	pop	{r7, pc}
 8012d88:	200270f8 	.word	0x200270f8

08012d8c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8012d8c:	b580      	push	{r7, lr}
 8012d8e:	b084      	sub	sp, #16
 8012d90:	af02      	add	r7, sp, #8
 8012d92:	6078      	str	r0, [r7, #4]
 8012d94:	6039      	str	r1, [r7, #0]
  lwip_init();
 8012d96:	f000 f872 	bl	8012e7e <lwip_init>

  tcpip_init_done = initfunc;
 8012d9a:	4a17      	ldr	r2, [pc, #92]	@ (8012df8 <tcpip_init+0x6c>)
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8012da0:	4a16      	ldr	r2, [pc, #88]	@ (8012dfc <tcpip_init+0x70>)
 8012da2:	683b      	ldr	r3, [r7, #0]
 8012da4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8012da6:	2106      	movs	r1, #6
 8012da8:	4815      	ldr	r0, [pc, #84]	@ (8012e00 <tcpip_init+0x74>)
 8012daa:	f00c f839 	bl	801ee20 <sys_mbox_new>
 8012dae:	4603      	mov	r3, r0
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d006      	beq.n	8012dc2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8012db4:	4b13      	ldr	r3, [pc, #76]	@ (8012e04 <tcpip_init+0x78>)
 8012db6:	f240 2261 	movw	r2, #609	@ 0x261
 8012dba:	4913      	ldr	r1, [pc, #76]	@ (8012e08 <tcpip_init+0x7c>)
 8012dbc:	4813      	ldr	r0, [pc, #76]	@ (8012e0c <tcpip_init+0x80>)
 8012dbe:	f00d fceb 	bl	8020798 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8012dc2:	4813      	ldr	r0, [pc, #76]	@ (8012e10 <tcpip_init+0x84>)
 8012dc4:	f00c f9d6 	bl	801f174 <sys_mutex_new>
 8012dc8:	4603      	mov	r3, r0
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d006      	beq.n	8012ddc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8012dce:	4b0d      	ldr	r3, [pc, #52]	@ (8012e04 <tcpip_init+0x78>)
 8012dd0:	f240 2265 	movw	r2, #613	@ 0x265
 8012dd4:	490f      	ldr	r1, [pc, #60]	@ (8012e14 <tcpip_init+0x88>)
 8012dd6:	480d      	ldr	r0, [pc, #52]	@ (8012e0c <tcpip_init+0x80>)
 8012dd8:	f00d fcde 	bl	8020798 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8012ddc:	2318      	movs	r3, #24
 8012dde:	9300      	str	r3, [sp, #0]
 8012de0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012de4:	2200      	movs	r2, #0
 8012de6:	490c      	ldr	r1, [pc, #48]	@ (8012e18 <tcpip_init+0x8c>)
 8012de8:	480c      	ldr	r0, [pc, #48]	@ (8012e1c <tcpip_init+0x90>)
 8012dea:	f00c fa15 	bl	801f218 <sys_thread_new>
}
 8012dee:	bf00      	nop
 8012df0:	3708      	adds	r7, #8
 8012df2:	46bd      	mov	sp, r7
 8012df4:	bd80      	pop	{r7, pc}
 8012df6:	bf00      	nop
 8012df8:	200270ec 	.word	0x200270ec
 8012dfc:	200270f0 	.word	0x200270f0
 8012e00:	200270f4 	.word	0x200270f4
 8012e04:	0802250c 	.word	0x0802250c
 8012e08:	08022594 	.word	0x08022594
 8012e0c:	0802255c 	.word	0x0802255c
 8012e10:	200270f8 	.word	0x200270f8
 8012e14:	080225b8 	.word	0x080225b8
 8012e18:	08012b1d 	.word	0x08012b1d
 8012e1c:	080225dc 	.word	0x080225dc

08012e20 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8012e20:	b480      	push	{r7}
 8012e22:	b083      	sub	sp, #12
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	4603      	mov	r3, r0
 8012e28:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8012e2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012e2e:	021b      	lsls	r3, r3, #8
 8012e30:	b21a      	sxth	r2, r3
 8012e32:	88fb      	ldrh	r3, [r7, #6]
 8012e34:	0a1b      	lsrs	r3, r3, #8
 8012e36:	b29b      	uxth	r3, r3
 8012e38:	b21b      	sxth	r3, r3
 8012e3a:	4313      	orrs	r3, r2
 8012e3c:	b21b      	sxth	r3, r3
 8012e3e:	b29b      	uxth	r3, r3
}
 8012e40:	4618      	mov	r0, r3
 8012e42:	370c      	adds	r7, #12
 8012e44:	46bd      	mov	sp, r7
 8012e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e4a:	4770      	bx	lr

08012e4c <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8012e4c:	b480      	push	{r7}
 8012e4e:	b083      	sub	sp, #12
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	061a      	lsls	r2, r3, #24
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	021b      	lsls	r3, r3, #8
 8012e5c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012e60:	431a      	orrs	r2, r3
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	0a1b      	lsrs	r3, r3, #8
 8012e66:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012e6a:	431a      	orrs	r2, r3
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	0e1b      	lsrs	r3, r3, #24
 8012e70:	4313      	orrs	r3, r2
}
 8012e72:	4618      	mov	r0, r3
 8012e74:	370c      	adds	r7, #12
 8012e76:	46bd      	mov	sp, r7
 8012e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e7c:	4770      	bx	lr

08012e7e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8012e7e:	b580      	push	{r7, lr}
 8012e80:	b082      	sub	sp, #8
 8012e82:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8012e84:	2300      	movs	r3, #0
 8012e86:	607b      	str	r3, [r7, #4]
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 8012e88:	f002 f8ce 	bl	8015028 <stats_init>
#if !NO_SYS
  sys_init();
 8012e8c:	f00c f966 	bl	801f15c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8012e90:	f000 f8d4 	bl	801303c <mem_init>
  memp_init();
 8012e94:	f000 fcf4 	bl	8013880 <memp_init>
  pbuf_init();
  netif_init();
 8012e98:	f000 fe34 	bl	8013b04 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8012e9c:	f008 fb58 	bl	801b550 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8012ea0:	f002 f8d2 	bl	8015048 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8012ea4:	f008 fa9a 	bl	801b3dc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8012ea8:	bf00      	nop
 8012eaa:	3708      	adds	r7, #8
 8012eac:	46bd      	mov	sp, r7
 8012eae:	bd80      	pop	{r7, pc}

08012eb0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8012eb0:	b480      	push	{r7}
 8012eb2:	b083      	sub	sp, #12
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	4603      	mov	r3, r0
 8012eb8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8012eba:	4b05      	ldr	r3, [pc, #20]	@ (8012ed0 <ptr_to_mem+0x20>)
 8012ebc:	681a      	ldr	r2, [r3, #0]
 8012ebe:	88fb      	ldrh	r3, [r7, #6]
 8012ec0:	4413      	add	r3, r2
}
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	370c      	adds	r7, #12
 8012ec6:	46bd      	mov	sp, r7
 8012ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ecc:	4770      	bx	lr
 8012ece:	bf00      	nop
 8012ed0:	20027114 	.word	0x20027114

08012ed4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8012ed4:	b480      	push	{r7}
 8012ed6:	b083      	sub	sp, #12
 8012ed8:	af00      	add	r7, sp, #0
 8012eda:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8012edc:	4b05      	ldr	r3, [pc, #20]	@ (8012ef4 <mem_to_ptr+0x20>)
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	687a      	ldr	r2, [r7, #4]
 8012ee2:	1ad3      	subs	r3, r2, r3
 8012ee4:	b29b      	uxth	r3, r3
}
 8012ee6:	4618      	mov	r0, r3
 8012ee8:	370c      	adds	r7, #12
 8012eea:	46bd      	mov	sp, r7
 8012eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ef0:	4770      	bx	lr
 8012ef2:	bf00      	nop
 8012ef4:	20027114 	.word	0x20027114

08012ef8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8012ef8:	b590      	push	{r4, r7, lr}
 8012efa:	b085      	sub	sp, #20
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8012f00:	4b45      	ldr	r3, [pc, #276]	@ (8013018 <plug_holes+0x120>)
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	687a      	ldr	r2, [r7, #4]
 8012f06:	429a      	cmp	r2, r3
 8012f08:	d206      	bcs.n	8012f18 <plug_holes+0x20>
 8012f0a:	4b44      	ldr	r3, [pc, #272]	@ (801301c <plug_holes+0x124>)
 8012f0c:	f240 12df 	movw	r2, #479	@ 0x1df
 8012f10:	4943      	ldr	r1, [pc, #268]	@ (8013020 <plug_holes+0x128>)
 8012f12:	4844      	ldr	r0, [pc, #272]	@ (8013024 <plug_holes+0x12c>)
 8012f14:	f00d fc40 	bl	8020798 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8012f18:	4b43      	ldr	r3, [pc, #268]	@ (8013028 <plug_holes+0x130>)
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	687a      	ldr	r2, [r7, #4]
 8012f1e:	429a      	cmp	r2, r3
 8012f20:	d306      	bcc.n	8012f30 <plug_holes+0x38>
 8012f22:	4b3e      	ldr	r3, [pc, #248]	@ (801301c <plug_holes+0x124>)
 8012f24:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8012f28:	4940      	ldr	r1, [pc, #256]	@ (801302c <plug_holes+0x134>)
 8012f2a:	483e      	ldr	r0, [pc, #248]	@ (8013024 <plug_holes+0x12c>)
 8012f2c:	f00d fc34 	bl	8020798 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	791b      	ldrb	r3, [r3, #4]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d006      	beq.n	8012f46 <plug_holes+0x4e>
 8012f38:	4b38      	ldr	r3, [pc, #224]	@ (801301c <plug_holes+0x124>)
 8012f3a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8012f3e:	493c      	ldr	r1, [pc, #240]	@ (8013030 <plug_holes+0x138>)
 8012f40:	4838      	ldr	r0, [pc, #224]	@ (8013024 <plug_holes+0x12c>)
 8012f42:	f00d fc29 	bl	8020798 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	881b      	ldrh	r3, [r3, #0]
 8012f4a:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8012f4e:	d906      	bls.n	8012f5e <plug_holes+0x66>
 8012f50:	4b32      	ldr	r3, [pc, #200]	@ (801301c <plug_holes+0x124>)
 8012f52:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8012f56:	4937      	ldr	r1, [pc, #220]	@ (8013034 <plug_holes+0x13c>)
 8012f58:	4832      	ldr	r0, [pc, #200]	@ (8013024 <plug_holes+0x12c>)
 8012f5a:	f00d fc1d 	bl	8020798 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	881b      	ldrh	r3, [r3, #0]
 8012f62:	4618      	mov	r0, r3
 8012f64:	f7ff ffa4 	bl	8012eb0 <ptr_to_mem>
 8012f68:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8012f6a:	687a      	ldr	r2, [r7, #4]
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	429a      	cmp	r2, r3
 8012f70:	d024      	beq.n	8012fbc <plug_holes+0xc4>
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	791b      	ldrb	r3, [r3, #4]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d120      	bne.n	8012fbc <plug_holes+0xc4>
 8012f7a:	4b2b      	ldr	r3, [pc, #172]	@ (8013028 <plug_holes+0x130>)
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	68fa      	ldr	r2, [r7, #12]
 8012f80:	429a      	cmp	r2, r3
 8012f82:	d01b      	beq.n	8012fbc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8012f84:	4b2c      	ldr	r3, [pc, #176]	@ (8013038 <plug_holes+0x140>)
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	68fa      	ldr	r2, [r7, #12]
 8012f8a:	429a      	cmp	r2, r3
 8012f8c:	d102      	bne.n	8012f94 <plug_holes+0x9c>
      lfree = mem;
 8012f8e:	4a2a      	ldr	r2, [pc, #168]	@ (8013038 <plug_holes+0x140>)
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	881a      	ldrh	r2, [r3, #0]
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	881b      	ldrh	r3, [r3, #0]
 8012fa0:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8012fa4:	d00a      	beq.n	8012fbc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	881b      	ldrh	r3, [r3, #0]
 8012faa:	4618      	mov	r0, r3
 8012fac:	f7ff ff80 	bl	8012eb0 <ptr_to_mem>
 8012fb0:	4604      	mov	r4, r0
 8012fb2:	6878      	ldr	r0, [r7, #4]
 8012fb4:	f7ff ff8e 	bl	8012ed4 <mem_to_ptr>
 8012fb8:	4603      	mov	r3, r0
 8012fba:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	885b      	ldrh	r3, [r3, #2]
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	f7ff ff75 	bl	8012eb0 <ptr_to_mem>
 8012fc6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8012fc8:	68ba      	ldr	r2, [r7, #8]
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	429a      	cmp	r2, r3
 8012fce:	d01f      	beq.n	8013010 <plug_holes+0x118>
 8012fd0:	68bb      	ldr	r3, [r7, #8]
 8012fd2:	791b      	ldrb	r3, [r3, #4]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d11b      	bne.n	8013010 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8012fd8:	4b17      	ldr	r3, [pc, #92]	@ (8013038 <plug_holes+0x140>)
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	687a      	ldr	r2, [r7, #4]
 8012fde:	429a      	cmp	r2, r3
 8012fe0:	d102      	bne.n	8012fe8 <plug_holes+0xf0>
      lfree = pmem;
 8012fe2:	4a15      	ldr	r2, [pc, #84]	@ (8013038 <plug_holes+0x140>)
 8012fe4:	68bb      	ldr	r3, [r7, #8]
 8012fe6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	881a      	ldrh	r2, [r3, #0]
 8012fec:	68bb      	ldr	r3, [r7, #8]
 8012fee:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	881b      	ldrh	r3, [r3, #0]
 8012ff4:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8012ff8:	d00a      	beq.n	8013010 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	881b      	ldrh	r3, [r3, #0]
 8012ffe:	4618      	mov	r0, r3
 8013000:	f7ff ff56 	bl	8012eb0 <ptr_to_mem>
 8013004:	4604      	mov	r4, r0
 8013006:	68b8      	ldr	r0, [r7, #8]
 8013008:	f7ff ff64 	bl	8012ed4 <mem_to_ptr>
 801300c:	4603      	mov	r3, r0
 801300e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8013010:	bf00      	nop
 8013012:	3714      	adds	r7, #20
 8013014:	46bd      	mov	sp, r7
 8013016:	bd90      	pop	{r4, r7, pc}
 8013018:	20027114 	.word	0x20027114
 801301c:	080225ec 	.word	0x080225ec
 8013020:	0802261c 	.word	0x0802261c
 8013024:	08022634 	.word	0x08022634
 8013028:	20027118 	.word	0x20027118
 801302c:	0802265c 	.word	0x0802265c
 8013030:	08022678 	.word	0x08022678
 8013034:	08022694 	.word	0x08022694
 8013038:	20027120 	.word	0x20027120

0801303c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 801303c:	b580      	push	{r7, lr}
 801303e:	b082      	sub	sp, #8
 8013040:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8013042:	4b1f      	ldr	r3, [pc, #124]	@ (80130c0 <mem_init+0x84>)
 8013044:	4a1f      	ldr	r2, [pc, #124]	@ (80130c4 <mem_init+0x88>)
 8013046:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8013048:	4b1d      	ldr	r3, [pc, #116]	@ (80130c0 <mem_init+0x84>)
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8013054:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	2200      	movs	r2, #0
 801305a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	2200      	movs	r2, #0
 8013060:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8013062:	f44f 40c8 	mov.w	r0, #25600	@ 0x6400
 8013066:	f7ff ff23 	bl	8012eb0 <ptr_to_mem>
 801306a:	4603      	mov	r3, r0
 801306c:	4a16      	ldr	r2, [pc, #88]	@ (80130c8 <mem_init+0x8c>)
 801306e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8013070:	4b15      	ldr	r3, [pc, #84]	@ (80130c8 <mem_init+0x8c>)
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	2201      	movs	r2, #1
 8013076:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8013078:	4b13      	ldr	r3, [pc, #76]	@ (80130c8 <mem_init+0x8c>)
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8013080:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8013082:	4b11      	ldr	r3, [pc, #68]	@ (80130c8 <mem_init+0x8c>)
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 801308a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 801308c:	4b0c      	ldr	r3, [pc, #48]	@ (80130c0 <mem_init+0x84>)
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	4a0e      	ldr	r2, [pc, #56]	@ (80130cc <mem_init+0x90>)
 8013092:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 8013094:	4b0e      	ldr	r3, [pc, #56]	@ (80130d0 <mem_init+0x94>)
 8013096:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 801309a:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 801309e:	480d      	ldr	r0, [pc, #52]	@ (80130d4 <mem_init+0x98>)
 80130a0:	f00c f868 	bl	801f174 <sys_mutex_new>
 80130a4:	4603      	mov	r3, r0
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d006      	beq.n	80130b8 <mem_init+0x7c>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80130aa:	4b0b      	ldr	r3, [pc, #44]	@ (80130d8 <mem_init+0x9c>)
 80130ac:	f240 221f 	movw	r2, #543	@ 0x21f
 80130b0:	490a      	ldr	r1, [pc, #40]	@ (80130dc <mem_init+0xa0>)
 80130b2:	480b      	ldr	r0, [pc, #44]	@ (80130e0 <mem_init+0xa4>)
 80130b4:	f00d fb70 	bl	8020798 <iprintf>
  }
}
 80130b8:	bf00      	nop
 80130ba:	3708      	adds	r7, #8
 80130bc:	46bd      	mov	sp, r7
 80130be:	bd80      	pop	{r7, pc}
 80130c0:	20027114 	.word	0x20027114
 80130c4:	20048000 	.word	0x20048000
 80130c8:	20027118 	.word	0x20027118
 80130cc:	20027120 	.word	0x20027120
 80130d0:	2002d36c 	.word	0x2002d36c
 80130d4:	2002711c 	.word	0x2002711c
 80130d8:	080225ec 	.word	0x080225ec
 80130dc:	080226c0 	.word	0x080226c0
 80130e0:	08022634 	.word	0x08022634

080130e4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80130e4:	b580      	push	{r7, lr}
 80130e6:	b086      	sub	sp, #24
 80130e8:	af00      	add	r7, sp, #0
 80130ea:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80130ec:	6878      	ldr	r0, [r7, #4]
 80130ee:	f7ff fef1 	bl	8012ed4 <mem_to_ptr>
 80130f2:	4603      	mov	r3, r0
 80130f4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	881b      	ldrh	r3, [r3, #0]
 80130fa:	4618      	mov	r0, r3
 80130fc:	f7ff fed8 	bl	8012eb0 <ptr_to_mem>
 8013100:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	885b      	ldrh	r3, [r3, #2]
 8013106:	4618      	mov	r0, r3
 8013108:	f7ff fed2 	bl	8012eb0 <ptr_to_mem>
 801310c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	881b      	ldrh	r3, [r3, #0]
 8013112:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013116:	d818      	bhi.n	801314a <mem_link_valid+0x66>
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	885b      	ldrh	r3, [r3, #2]
 801311c:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013120:	d813      	bhi.n	801314a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8013126:	8afa      	ldrh	r2, [r7, #22]
 8013128:	429a      	cmp	r2, r3
 801312a:	d004      	beq.n	8013136 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	881b      	ldrh	r3, [r3, #0]
 8013130:	8afa      	ldrh	r2, [r7, #22]
 8013132:	429a      	cmp	r2, r3
 8013134:	d109      	bne.n	801314a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8013136:	4b08      	ldr	r3, [pc, #32]	@ (8013158 <mem_link_valid+0x74>)
 8013138:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801313a:	693a      	ldr	r2, [r7, #16]
 801313c:	429a      	cmp	r2, r3
 801313e:	d006      	beq.n	801314e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8013140:	693b      	ldr	r3, [r7, #16]
 8013142:	885b      	ldrh	r3, [r3, #2]
 8013144:	8afa      	ldrh	r2, [r7, #22]
 8013146:	429a      	cmp	r2, r3
 8013148:	d001      	beq.n	801314e <mem_link_valid+0x6a>
    return 0;
 801314a:	2300      	movs	r3, #0
 801314c:	e000      	b.n	8013150 <mem_link_valid+0x6c>
  }
  return 1;
 801314e:	2301      	movs	r3, #1
}
 8013150:	4618      	mov	r0, r3
 8013152:	3718      	adds	r7, #24
 8013154:	46bd      	mov	sp, r7
 8013156:	bd80      	pop	{r7, pc}
 8013158:	20027118 	.word	0x20027118

0801315c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801315c:	b580      	push	{r7, lr}
 801315e:	b088      	sub	sp, #32
 8013160:	af00      	add	r7, sp, #0
 8013162:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d103      	bne.n	8013172 <mem_free+0x16>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
 801316a:	485a      	ldr	r0, [pc, #360]	@ (80132d4 <mem_free+0x178>)
 801316c:	f00d fb84 	bl	8020878 <puts>
    return;
 8013170:	e0ac      	b.n	80132cc <mem_free+0x170>
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	f003 0303 	and.w	r3, r3, #3
 8013178:	2b00      	cmp	r3, #0
 801317a:	d018      	beq.n	80131ae <mem_free+0x52>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801317c:	4b56      	ldr	r3, [pc, #344]	@ (80132d8 <mem_free+0x17c>)
 801317e:	f240 2273 	movw	r2, #627	@ 0x273
 8013182:	4956      	ldr	r1, [pc, #344]	@ (80132dc <mem_free+0x180>)
 8013184:	4856      	ldr	r0, [pc, #344]	@ (80132e0 <mem_free+0x184>)
 8013186:	f00d fb07 	bl	8020798 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
 801318a:	4854      	ldr	r0, [pc, #336]	@ (80132dc <mem_free+0x180>)
 801318c:	f00d fb74 	bl	8020878 <puts>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013190:	f00c f862 	bl	801f258 <sys_arch_protect>
 8013194:	60f8      	str	r0, [r7, #12]
 8013196:	4b53      	ldr	r3, [pc, #332]	@ (80132e4 <mem_free+0x188>)
 8013198:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	@ 0xb4
 801319c:	3301      	adds	r3, #1
 801319e:	b29a      	uxth	r2, r3
 80131a0:	4b50      	ldr	r3, [pc, #320]	@ (80132e4 <mem_free+0x188>)
 80131a2:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
 80131a6:	68f8      	ldr	r0, [r7, #12]
 80131a8:	f00c f864 	bl	801f274 <sys_arch_unprotect>
    return;
 80131ac:	e08e      	b.n	80132cc <mem_free+0x170>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	3b08      	subs	r3, #8
 80131b2:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80131b4:	4b4c      	ldr	r3, [pc, #304]	@ (80132e8 <mem_free+0x18c>)
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	69fa      	ldr	r2, [r7, #28]
 80131ba:	429a      	cmp	r2, r3
 80131bc:	d306      	bcc.n	80131cc <mem_free+0x70>
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	f103 020c 	add.w	r2, r3, #12
 80131c4:	4b49      	ldr	r3, [pc, #292]	@ (80132ec <mem_free+0x190>)
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	429a      	cmp	r2, r3
 80131ca:	d918      	bls.n	80131fe <mem_free+0xa2>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80131cc:	4b42      	ldr	r3, [pc, #264]	@ (80132d8 <mem_free+0x17c>)
 80131ce:	f240 227f 	movw	r2, #639	@ 0x27f
 80131d2:	4947      	ldr	r1, [pc, #284]	@ (80132f0 <mem_free+0x194>)
 80131d4:	4842      	ldr	r0, [pc, #264]	@ (80132e0 <mem_free+0x184>)
 80131d6:	f00d fadf 	bl	8020798 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
 80131da:	4845      	ldr	r0, [pc, #276]	@ (80132f0 <mem_free+0x194>)
 80131dc:	f00d fb4c 	bl	8020878 <puts>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80131e0:	f00c f83a 	bl	801f258 <sys_arch_protect>
 80131e4:	6138      	str	r0, [r7, #16]
 80131e6:	4b3f      	ldr	r3, [pc, #252]	@ (80132e4 <mem_free+0x188>)
 80131e8:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	@ 0xb4
 80131ec:	3301      	adds	r3, #1
 80131ee:	b29a      	uxth	r2, r3
 80131f0:	4b3c      	ldr	r3, [pc, #240]	@ (80132e4 <mem_free+0x188>)
 80131f2:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
 80131f6:	6938      	ldr	r0, [r7, #16]
 80131f8:	f00c f83c 	bl	801f274 <sys_arch_unprotect>
    return;
 80131fc:	e066      	b.n	80132cc <mem_free+0x170>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80131fe:	483d      	ldr	r0, [pc, #244]	@ (80132f4 <mem_free+0x198>)
 8013200:	f00b ffee 	bl	801f1e0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8013204:	69fb      	ldr	r3, [r7, #28]
 8013206:	791b      	ldrb	r3, [r3, #4]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d11b      	bne.n	8013244 <mem_free+0xe8>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801320c:	4b32      	ldr	r3, [pc, #200]	@ (80132d8 <mem_free+0x17c>)
 801320e:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8013212:	4939      	ldr	r1, [pc, #228]	@ (80132f8 <mem_free+0x19c>)
 8013214:	4832      	ldr	r0, [pc, #200]	@ (80132e0 <mem_free+0x184>)
 8013216:	f00d fabf 	bl	8020798 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801321a:	4836      	ldr	r0, [pc, #216]	@ (80132f4 <mem_free+0x198>)
 801321c:	f00b ffef 	bl	801f1fe <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
 8013220:	4836      	ldr	r0, [pc, #216]	@ (80132fc <mem_free+0x1a0>)
 8013222:	f00d fb29 	bl	8020878 <puts>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013226:	f00c f817 	bl	801f258 <sys_arch_protect>
 801322a:	6178      	str	r0, [r7, #20]
 801322c:	4b2d      	ldr	r3, [pc, #180]	@ (80132e4 <mem_free+0x188>)
 801322e:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	@ 0xb4
 8013232:	3301      	adds	r3, #1
 8013234:	b29a      	uxth	r2, r3
 8013236:	4b2b      	ldr	r3, [pc, #172]	@ (80132e4 <mem_free+0x188>)
 8013238:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
 801323c:	6978      	ldr	r0, [r7, #20]
 801323e:	f00c f819 	bl	801f274 <sys_arch_unprotect>
    return;
 8013242:	e043      	b.n	80132cc <mem_free+0x170>
  }

  if (!mem_link_valid(mem)) {
 8013244:	69f8      	ldr	r0, [r7, #28]
 8013246:	f7ff ff4d 	bl	80130e4 <mem_link_valid>
 801324a:	4603      	mov	r3, r0
 801324c:	2b00      	cmp	r3, #0
 801324e:	d11b      	bne.n	8013288 <mem_free+0x12c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8013250:	4b21      	ldr	r3, [pc, #132]	@ (80132d8 <mem_free+0x17c>)
 8013252:	f240 2295 	movw	r2, #661	@ 0x295
 8013256:	492a      	ldr	r1, [pc, #168]	@ (8013300 <mem_free+0x1a4>)
 8013258:	4821      	ldr	r0, [pc, #132]	@ (80132e0 <mem_free+0x184>)
 801325a:	f00d fa9d 	bl	8020798 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801325e:	4825      	ldr	r0, [pc, #148]	@ (80132f4 <mem_free+0x198>)
 8013260:	f00b ffcd 	bl	801f1fe <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
 8013264:	4827      	ldr	r0, [pc, #156]	@ (8013304 <mem_free+0x1a8>)
 8013266:	f00d fb07 	bl	8020878 <puts>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801326a:	f00b fff5 	bl	801f258 <sys_arch_protect>
 801326e:	61b8      	str	r0, [r7, #24]
 8013270:	4b1c      	ldr	r3, [pc, #112]	@ (80132e4 <mem_free+0x188>)
 8013272:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	@ 0xb4
 8013276:	3301      	adds	r3, #1
 8013278:	b29a      	uxth	r2, r3
 801327a:	4b1a      	ldr	r3, [pc, #104]	@ (80132e4 <mem_free+0x188>)
 801327c:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
 8013280:	69b8      	ldr	r0, [r7, #24]
 8013282:	f00b fff7 	bl	801f274 <sys_arch_unprotect>
    return;
 8013286:	e021      	b.n	80132cc <mem_free+0x170>
  }

  /* mem is now unused. */
  mem->used = 0;
 8013288:	69fb      	ldr	r3, [r7, #28]
 801328a:	2200      	movs	r2, #0
 801328c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801328e:	4b1e      	ldr	r3, [pc, #120]	@ (8013308 <mem_free+0x1ac>)
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	69fa      	ldr	r2, [r7, #28]
 8013294:	429a      	cmp	r2, r3
 8013296:	d202      	bcs.n	801329e <mem_free+0x142>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8013298:	4a1b      	ldr	r2, [pc, #108]	@ (8013308 <mem_free+0x1ac>)
 801329a:	69fb      	ldr	r3, [r7, #28]
 801329c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 801329e:	4b11      	ldr	r3, [pc, #68]	@ (80132e4 <mem_free+0x188>)
 80132a0:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	@ 0xb0
 80132a4:	4b10      	ldr	r3, [pc, #64]	@ (80132e8 <mem_free+0x18c>)
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	69f9      	ldr	r1, [r7, #28]
 80132aa:	1acb      	subs	r3, r1, r3
 80132ac:	b299      	uxth	r1, r3
 80132ae:	69fb      	ldr	r3, [r7, #28]
 80132b0:	881b      	ldrh	r3, [r3, #0]
 80132b2:	1acb      	subs	r3, r1, r3
 80132b4:	b29b      	uxth	r3, r3
 80132b6:	4413      	add	r3, r2
 80132b8:	b29a      	uxth	r2, r3
 80132ba:	4b0a      	ldr	r3, [pc, #40]	@ (80132e4 <mem_free+0x188>)
 80132bc:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80132c0:	69f8      	ldr	r0, [r7, #28]
 80132c2:	f7ff fe19 	bl	8012ef8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80132c6:	480b      	ldr	r0, [pc, #44]	@ (80132f4 <mem_free+0x198>)
 80132c8:	f00b ff99 	bl	801f1fe <sys_mutex_unlock>
}
 80132cc:	3720      	adds	r7, #32
 80132ce:	46bd      	mov	sp, r7
 80132d0:	bd80      	pop	{r7, pc}
 80132d2:	bf00      	nop
 80132d4:	080226dc 	.word	0x080226dc
 80132d8:	080225ec 	.word	0x080225ec
 80132dc:	080226fc 	.word	0x080226fc
 80132e0:	08022634 	.word	0x08022634
 80132e4:	2002d36c 	.word	0x2002d36c
 80132e8:	20027114 	.word	0x20027114
 80132ec:	20027118 	.word	0x20027118
 80132f0:	08022720 	.word	0x08022720
 80132f4:	2002711c 	.word	0x2002711c
 80132f8:	0802273c 	.word	0x0802273c
 80132fc:	08022764 	.word	0x08022764
 8013300:	0802278c 	.word	0x0802278c
 8013304:	080227c0 	.word	0x080227c0
 8013308:	20027120 	.word	0x20027120

0801330c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 801330c:	b580      	push	{r7, lr}
 801330e:	b088      	sub	sp, #32
 8013310:	af00      	add	r7, sp, #0
 8013312:	6078      	str	r0, [r7, #4]
 8013314:	460b      	mov	r3, r1
 8013316:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8013318:	887b      	ldrh	r3, [r7, #2]
 801331a:	3303      	adds	r3, #3
 801331c:	b29b      	uxth	r3, r3
 801331e:	f023 0303 	bic.w	r3, r3, #3
 8013322:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8013324:	8bfb      	ldrh	r3, [r7, #30]
 8013326:	2b0b      	cmp	r3, #11
 8013328:	d801      	bhi.n	801332e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801332a:	230c      	movs	r3, #12
 801332c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801332e:	8bfb      	ldrh	r3, [r7, #30]
 8013330:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013334:	d803      	bhi.n	801333e <mem_trim+0x32>
 8013336:	8bfa      	ldrh	r2, [r7, #30]
 8013338:	887b      	ldrh	r3, [r7, #2]
 801333a:	429a      	cmp	r2, r3
 801333c:	d201      	bcs.n	8013342 <mem_trim+0x36>
    return NULL;
 801333e:	2300      	movs	r3, #0
 8013340:	e0fb      	b.n	801353a <mem_trim+0x22e>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8013342:	4b80      	ldr	r3, [pc, #512]	@ (8013544 <mem_trim+0x238>)
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	687a      	ldr	r2, [r7, #4]
 8013348:	429a      	cmp	r2, r3
 801334a:	d304      	bcc.n	8013356 <mem_trim+0x4a>
 801334c:	4b7e      	ldr	r3, [pc, #504]	@ (8013548 <mem_trim+0x23c>)
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	687a      	ldr	r2, [r7, #4]
 8013352:	429a      	cmp	r2, r3
 8013354:	d306      	bcc.n	8013364 <mem_trim+0x58>
 8013356:	4b7d      	ldr	r3, [pc, #500]	@ (801354c <mem_trim+0x240>)
 8013358:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801335c:	497c      	ldr	r1, [pc, #496]	@ (8013550 <mem_trim+0x244>)
 801335e:	487d      	ldr	r0, [pc, #500]	@ (8013554 <mem_trim+0x248>)
 8013360:	f00d fa1a 	bl	8020798 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8013364:	4b77      	ldr	r3, [pc, #476]	@ (8013544 <mem_trim+0x238>)
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	687a      	ldr	r2, [r7, #4]
 801336a:	429a      	cmp	r2, r3
 801336c:	d304      	bcc.n	8013378 <mem_trim+0x6c>
 801336e:	4b76      	ldr	r3, [pc, #472]	@ (8013548 <mem_trim+0x23c>)
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	687a      	ldr	r2, [r7, #4]
 8013374:	429a      	cmp	r2, r3
 8013376:	d312      	bcc.n	801339e <mem_trim+0x92>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
 8013378:	4877      	ldr	r0, [pc, #476]	@ (8013558 <mem_trim+0x24c>)
 801337a:	f00d fa7d 	bl	8020878 <puts>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801337e:	f00b ff6b 	bl	801f258 <sys_arch_protect>
 8013382:	60b8      	str	r0, [r7, #8]
 8013384:	4b75      	ldr	r3, [pc, #468]	@ (801355c <mem_trim+0x250>)
 8013386:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	@ 0xb4
 801338a:	3301      	adds	r3, #1
 801338c:	b29a      	uxth	r2, r3
 801338e:	4b73      	ldr	r3, [pc, #460]	@ (801355c <mem_trim+0x250>)
 8013390:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
 8013394:	68b8      	ldr	r0, [r7, #8]
 8013396:	f00b ff6d 	bl	801f274 <sys_arch_unprotect>
    return rmem;
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	e0cd      	b.n	801353a <mem_trim+0x22e>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	3b08      	subs	r3, #8
 80133a2:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80133a4:	69b8      	ldr	r0, [r7, #24]
 80133a6:	f7ff fd95 	bl	8012ed4 <mem_to_ptr>
 80133aa:	4603      	mov	r3, r0
 80133ac:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80133ae:	69bb      	ldr	r3, [r7, #24]
 80133b0:	881a      	ldrh	r2, [r3, #0]
 80133b2:	8afb      	ldrh	r3, [r7, #22]
 80133b4:	1ad3      	subs	r3, r2, r3
 80133b6:	b29b      	uxth	r3, r3
 80133b8:	3b08      	subs	r3, #8
 80133ba:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80133bc:	8bfa      	ldrh	r2, [r7, #30]
 80133be:	8abb      	ldrh	r3, [r7, #20]
 80133c0:	429a      	cmp	r2, r3
 80133c2:	d906      	bls.n	80133d2 <mem_trim+0xc6>
 80133c4:	4b61      	ldr	r3, [pc, #388]	@ (801354c <mem_trim+0x240>)
 80133c6:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80133ca:	4965      	ldr	r1, [pc, #404]	@ (8013560 <mem_trim+0x254>)
 80133cc:	4861      	ldr	r0, [pc, #388]	@ (8013554 <mem_trim+0x248>)
 80133ce:	f00d f9e3 	bl	8020798 <iprintf>
  if (newsize > size) {
 80133d2:	8bfa      	ldrh	r2, [r7, #30]
 80133d4:	8abb      	ldrh	r3, [r7, #20]
 80133d6:	429a      	cmp	r2, r3
 80133d8:	d901      	bls.n	80133de <mem_trim+0xd2>
    /* not supported */
    return NULL;
 80133da:	2300      	movs	r3, #0
 80133dc:	e0ad      	b.n	801353a <mem_trim+0x22e>
  }
  if (newsize == size) {
 80133de:	8bfa      	ldrh	r2, [r7, #30]
 80133e0:	8abb      	ldrh	r3, [r7, #20]
 80133e2:	429a      	cmp	r2, r3
 80133e4:	d101      	bne.n	80133ea <mem_trim+0xde>
    /* No change in size, simply return */
    return rmem;
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	e0a7      	b.n	801353a <mem_trim+0x22e>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80133ea:	485e      	ldr	r0, [pc, #376]	@ (8013564 <mem_trim+0x258>)
 80133ec:	f00b fef8 	bl	801f1e0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80133f0:	69bb      	ldr	r3, [r7, #24]
 80133f2:	881b      	ldrh	r3, [r3, #0]
 80133f4:	4618      	mov	r0, r3
 80133f6:	f7ff fd5b 	bl	8012eb0 <ptr_to_mem>
 80133fa:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80133fc:	693b      	ldr	r3, [r7, #16]
 80133fe:	791b      	ldrb	r3, [r3, #4]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d14b      	bne.n	801349c <mem_trim+0x190>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8013404:	69bb      	ldr	r3, [r7, #24]
 8013406:	881b      	ldrh	r3, [r3, #0]
 8013408:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 801340c:	d106      	bne.n	801341c <mem_trim+0x110>
 801340e:	4b4f      	ldr	r3, [pc, #316]	@ (801354c <mem_trim+0x240>)
 8013410:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8013414:	4954      	ldr	r1, [pc, #336]	@ (8013568 <mem_trim+0x25c>)
 8013416:	484f      	ldr	r0, [pc, #316]	@ (8013554 <mem_trim+0x248>)
 8013418:	f00d f9be 	bl	8020798 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801341c:	693b      	ldr	r3, [r7, #16]
 801341e:	881b      	ldrh	r3, [r3, #0]
 8013420:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8013422:	8afa      	ldrh	r2, [r7, #22]
 8013424:	8bfb      	ldrh	r3, [r7, #30]
 8013426:	4413      	add	r3, r2
 8013428:	b29b      	uxth	r3, r3
 801342a:	3308      	adds	r3, #8
 801342c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 801342e:	4b4f      	ldr	r3, [pc, #316]	@ (801356c <mem_trim+0x260>)
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	693a      	ldr	r2, [r7, #16]
 8013434:	429a      	cmp	r2, r3
 8013436:	d106      	bne.n	8013446 <mem_trim+0x13a>
      lfree = ptr_to_mem(ptr2);
 8013438:	89fb      	ldrh	r3, [r7, #14]
 801343a:	4618      	mov	r0, r3
 801343c:	f7ff fd38 	bl	8012eb0 <ptr_to_mem>
 8013440:	4603      	mov	r3, r0
 8013442:	4a4a      	ldr	r2, [pc, #296]	@ (801356c <mem_trim+0x260>)
 8013444:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8013446:	89fb      	ldrh	r3, [r7, #14]
 8013448:	4618      	mov	r0, r3
 801344a:	f7ff fd31 	bl	8012eb0 <ptr_to_mem>
 801344e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8013450:	693b      	ldr	r3, [r7, #16]
 8013452:	2200      	movs	r2, #0
 8013454:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8013456:	693b      	ldr	r3, [r7, #16]
 8013458:	89ba      	ldrh	r2, [r7, #12]
 801345a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801345c:	693b      	ldr	r3, [r7, #16]
 801345e:	8afa      	ldrh	r2, [r7, #22]
 8013460:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8013462:	69bb      	ldr	r3, [r7, #24]
 8013464:	89fa      	ldrh	r2, [r7, #14]
 8013466:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013468:	693b      	ldr	r3, [r7, #16]
 801346a:	881b      	ldrh	r3, [r3, #0]
 801346c:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013470:	d007      	beq.n	8013482 <mem_trim+0x176>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8013472:	693b      	ldr	r3, [r7, #16]
 8013474:	881b      	ldrh	r3, [r3, #0]
 8013476:	4618      	mov	r0, r3
 8013478:	f7ff fd1a 	bl	8012eb0 <ptr_to_mem>
 801347c:	4602      	mov	r2, r0
 801347e:	89fb      	ldrh	r3, [r7, #14]
 8013480:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 8013482:	4b36      	ldr	r3, [pc, #216]	@ (801355c <mem_trim+0x250>)
 8013484:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	@ 0xb0
 8013488:	8bf9      	ldrh	r1, [r7, #30]
 801348a:	8abb      	ldrh	r3, [r7, #20]
 801348c:	1acb      	subs	r3, r1, r3
 801348e:	b29b      	uxth	r3, r3
 8013490:	4413      	add	r3, r2
 8013492:	b29a      	uxth	r2, r3
 8013494:	4b31      	ldr	r3, [pc, #196]	@ (801355c <mem_trim+0x250>)
 8013496:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
 801349a:	e04a      	b.n	8013532 <mem_trim+0x226>
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801349c:	8bfb      	ldrh	r3, [r7, #30]
 801349e:	f103 0214 	add.w	r2, r3, #20
 80134a2:	8abb      	ldrh	r3, [r7, #20]
 80134a4:	429a      	cmp	r2, r3
 80134a6:	d844      	bhi.n	8013532 <mem_trim+0x226>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80134a8:	8afa      	ldrh	r2, [r7, #22]
 80134aa:	8bfb      	ldrh	r3, [r7, #30]
 80134ac:	4413      	add	r3, r2
 80134ae:	b29b      	uxth	r3, r3
 80134b0:	3308      	adds	r3, #8
 80134b2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80134b4:	69bb      	ldr	r3, [r7, #24]
 80134b6:	881b      	ldrh	r3, [r3, #0]
 80134b8:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 80134bc:	d106      	bne.n	80134cc <mem_trim+0x1c0>
 80134be:	4b23      	ldr	r3, [pc, #140]	@ (801354c <mem_trim+0x240>)
 80134c0:	f240 3216 	movw	r2, #790	@ 0x316
 80134c4:	4928      	ldr	r1, [pc, #160]	@ (8013568 <mem_trim+0x25c>)
 80134c6:	4823      	ldr	r0, [pc, #140]	@ (8013554 <mem_trim+0x248>)
 80134c8:	f00d f966 	bl	8020798 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80134cc:	89fb      	ldrh	r3, [r7, #14]
 80134ce:	4618      	mov	r0, r3
 80134d0:	f7ff fcee 	bl	8012eb0 <ptr_to_mem>
 80134d4:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80134d6:	4b25      	ldr	r3, [pc, #148]	@ (801356c <mem_trim+0x260>)
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	693a      	ldr	r2, [r7, #16]
 80134dc:	429a      	cmp	r2, r3
 80134de:	d202      	bcs.n	80134e6 <mem_trim+0x1da>
      lfree = mem2;
 80134e0:	4a22      	ldr	r2, [pc, #136]	@ (801356c <mem_trim+0x260>)
 80134e2:	693b      	ldr	r3, [r7, #16]
 80134e4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80134e6:	693b      	ldr	r3, [r7, #16]
 80134e8:	2200      	movs	r2, #0
 80134ea:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80134ec:	69bb      	ldr	r3, [r7, #24]
 80134ee:	881a      	ldrh	r2, [r3, #0]
 80134f0:	693b      	ldr	r3, [r7, #16]
 80134f2:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80134f4:	693b      	ldr	r3, [r7, #16]
 80134f6:	8afa      	ldrh	r2, [r7, #22]
 80134f8:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80134fa:	69bb      	ldr	r3, [r7, #24]
 80134fc:	89fa      	ldrh	r2, [r7, #14]
 80134fe:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013500:	693b      	ldr	r3, [r7, #16]
 8013502:	881b      	ldrh	r3, [r3, #0]
 8013504:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013508:	d007      	beq.n	801351a <mem_trim+0x20e>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801350a:	693b      	ldr	r3, [r7, #16]
 801350c:	881b      	ldrh	r3, [r3, #0]
 801350e:	4618      	mov	r0, r3
 8013510:	f7ff fcce 	bl	8012eb0 <ptr_to_mem>
 8013514:	4602      	mov	r2, r0
 8013516:	89fb      	ldrh	r3, [r7, #14]
 8013518:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 801351a:	4b10      	ldr	r3, [pc, #64]	@ (801355c <mem_trim+0x250>)
 801351c:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	@ 0xb0
 8013520:	8bf9      	ldrh	r1, [r7, #30]
 8013522:	8abb      	ldrh	r3, [r7, #20]
 8013524:	1acb      	subs	r3, r1, r3
 8013526:	b29b      	uxth	r3, r3
 8013528:	4413      	add	r3, r2
 801352a:	b29a      	uxth	r2, r3
 801352c:	4b0b      	ldr	r3, [pc, #44]	@ (801355c <mem_trim+0x250>)
 801352e:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8013532:	480c      	ldr	r0, [pc, #48]	@ (8013564 <mem_trim+0x258>)
 8013534:	f00b fe63 	bl	801f1fe <sys_mutex_unlock>
  return rmem;
 8013538:	687b      	ldr	r3, [r7, #4]
}
 801353a:	4618      	mov	r0, r3
 801353c:	3720      	adds	r7, #32
 801353e:	46bd      	mov	sp, r7
 8013540:	bd80      	pop	{r7, pc}
 8013542:	bf00      	nop
 8013544:	20027114 	.word	0x20027114
 8013548:	20027118 	.word	0x20027118
 801354c:	080225ec 	.word	0x080225ec
 8013550:	080227f4 	.word	0x080227f4
 8013554:	08022634 	.word	0x08022634
 8013558:	0802280c 	.word	0x0802280c
 801355c:	2002d36c 	.word	0x2002d36c
 8013560:	08022828 	.word	0x08022828
 8013564:	2002711c 	.word	0x2002711c
 8013568:	08022848 	.word	0x08022848
 801356c:	20027120 	.word	0x20027120

08013570 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8013570:	b590      	push	{r4, r7, lr}
 8013572:	b089      	sub	sp, #36	@ 0x24
 8013574:	af00      	add	r7, sp, #0
 8013576:	4603      	mov	r3, r0
 8013578:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801357a:	88fb      	ldrh	r3, [r7, #6]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d101      	bne.n	8013584 <mem_malloc+0x14>
    return NULL;
 8013580:	2300      	movs	r3, #0
 8013582:	e127      	b.n	80137d4 <mem_malloc+0x264>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8013584:	88fb      	ldrh	r3, [r7, #6]
 8013586:	3303      	adds	r3, #3
 8013588:	b29b      	uxth	r3, r3
 801358a:	f023 0303 	bic.w	r3, r3, #3
 801358e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8013590:	8bbb      	ldrh	r3, [r7, #28]
 8013592:	2b0b      	cmp	r3, #11
 8013594:	d801      	bhi.n	801359a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8013596:	230c      	movs	r3, #12
 8013598:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801359a:	8bbb      	ldrh	r3, [r7, #28]
 801359c:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 80135a0:	d803      	bhi.n	80135aa <mem_malloc+0x3a>
 80135a2:	8bba      	ldrh	r2, [r7, #28]
 80135a4:	88fb      	ldrh	r3, [r7, #6]
 80135a6:	429a      	cmp	r2, r3
 80135a8:	d201      	bcs.n	80135ae <mem_malloc+0x3e>
    return NULL;
 80135aa:	2300      	movs	r3, #0
 80135ac:	e112      	b.n	80137d4 <mem_malloc+0x264>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80135ae:	488b      	ldr	r0, [pc, #556]	@ (80137dc <mem_malloc+0x26c>)
 80135b0:	f00b fe16 	bl	801f1e0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80135b4:	4b8a      	ldr	r3, [pc, #552]	@ (80137e0 <mem_malloc+0x270>)
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	4618      	mov	r0, r3
 80135ba:	f7ff fc8b 	bl	8012ed4 <mem_to_ptr>
 80135be:	4603      	mov	r3, r0
 80135c0:	83fb      	strh	r3, [r7, #30]
 80135c2:	e0ee      	b.n	80137a2 <mem_malloc+0x232>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80135c4:	8bfb      	ldrh	r3, [r7, #30]
 80135c6:	4618      	mov	r0, r3
 80135c8:	f7ff fc72 	bl	8012eb0 <ptr_to_mem>
 80135cc:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80135ce:	697b      	ldr	r3, [r7, #20]
 80135d0:	791b      	ldrb	r3, [r3, #4]
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	f040 80de 	bne.w	8013794 <mem_malloc+0x224>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80135d8:	697b      	ldr	r3, [r7, #20]
 80135da:	881b      	ldrh	r3, [r3, #0]
 80135dc:	461a      	mov	r2, r3
 80135de:	8bfb      	ldrh	r3, [r7, #30]
 80135e0:	1ad3      	subs	r3, r2, r3
 80135e2:	f1a3 0208 	sub.w	r2, r3, #8
 80135e6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80135e8:	429a      	cmp	r2, r3
 80135ea:	f0c0 80d3 	bcc.w	8013794 <mem_malloc+0x224>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80135ee:	697b      	ldr	r3, [r7, #20]
 80135f0:	881b      	ldrh	r3, [r3, #0]
 80135f2:	461a      	mov	r2, r3
 80135f4:	8bfb      	ldrh	r3, [r7, #30]
 80135f6:	1ad3      	subs	r3, r2, r3
 80135f8:	f1a3 0208 	sub.w	r2, r3, #8
 80135fc:	8bbb      	ldrh	r3, [r7, #28]
 80135fe:	3314      	adds	r3, #20
 8013600:	429a      	cmp	r2, r3
 8013602:	d34c      	bcc.n	801369e <mem_malloc+0x12e>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8013604:	8bfa      	ldrh	r2, [r7, #30]
 8013606:	8bbb      	ldrh	r3, [r7, #28]
 8013608:	4413      	add	r3, r2
 801360a:	b29b      	uxth	r3, r3
 801360c:	3308      	adds	r3, #8
 801360e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8013610:	8a7b      	ldrh	r3, [r7, #18]
 8013612:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013616:	d106      	bne.n	8013626 <mem_malloc+0xb6>
 8013618:	4b72      	ldr	r3, [pc, #456]	@ (80137e4 <mem_malloc+0x274>)
 801361a:	f240 3287 	movw	r2, #903	@ 0x387
 801361e:	4972      	ldr	r1, [pc, #456]	@ (80137e8 <mem_malloc+0x278>)
 8013620:	4872      	ldr	r0, [pc, #456]	@ (80137ec <mem_malloc+0x27c>)
 8013622:	f00d f8b9 	bl	8020798 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8013626:	8a7b      	ldrh	r3, [r7, #18]
 8013628:	4618      	mov	r0, r3
 801362a:	f7ff fc41 	bl	8012eb0 <ptr_to_mem>
 801362e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	2200      	movs	r2, #0
 8013634:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8013636:	697b      	ldr	r3, [r7, #20]
 8013638:	881a      	ldrh	r2, [r3, #0]
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	8bfa      	ldrh	r2, [r7, #30]
 8013642:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8013644:	697b      	ldr	r3, [r7, #20]
 8013646:	8a7a      	ldrh	r2, [r7, #18]
 8013648:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801364a:	697b      	ldr	r3, [r7, #20]
 801364c:	2201      	movs	r2, #1
 801364e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	881b      	ldrh	r3, [r3, #0]
 8013654:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013658:	d007      	beq.n	801366a <mem_malloc+0xfa>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	881b      	ldrh	r3, [r3, #0]
 801365e:	4618      	mov	r0, r3
 8013660:	f7ff fc26 	bl	8012eb0 <ptr_to_mem>
 8013664:	4602      	mov	r2, r0
 8013666:	8a7b      	ldrh	r3, [r7, #18]
 8013668:	8053      	strh	r3, [r2, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 801366a:	4b61      	ldr	r3, [pc, #388]	@ (80137f0 <mem_malloc+0x280>)
 801366c:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	@ 0xb0
 8013670:	8bbb      	ldrh	r3, [r7, #28]
 8013672:	4413      	add	r3, r2
 8013674:	b29b      	uxth	r3, r3
 8013676:	3308      	adds	r3, #8
 8013678:	b29a      	uxth	r2, r3
 801367a:	4b5d      	ldr	r3, [pc, #372]	@ (80137f0 <mem_malloc+0x280>)
 801367c:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
 8013680:	4b5b      	ldr	r3, [pc, #364]	@ (80137f0 <mem_malloc+0x280>)
 8013682:	f8b3 20b2 	ldrh.w	r2, [r3, #178]	@ 0xb2
 8013686:	4b5a      	ldr	r3, [pc, #360]	@ (80137f0 <mem_malloc+0x280>)
 8013688:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 801368c:	429a      	cmp	r2, r3
 801368e:	d227      	bcs.n	80136e0 <mem_malloc+0x170>
 8013690:	4b57      	ldr	r3, [pc, #348]	@ (80137f0 <mem_malloc+0x280>)
 8013692:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	@ 0xb0
 8013696:	4b56      	ldr	r3, [pc, #344]	@ (80137f0 <mem_malloc+0x280>)
 8013698:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
 801369c:	e020      	b.n	80136e0 <mem_malloc+0x170>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801369e:	697b      	ldr	r3, [r7, #20]
 80136a0:	2201      	movs	r2, #1
 80136a2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 80136a4:	4b52      	ldr	r3, [pc, #328]	@ (80137f0 <mem_malloc+0x280>)
 80136a6:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	@ 0xb0
 80136aa:	697b      	ldr	r3, [r7, #20]
 80136ac:	881b      	ldrh	r3, [r3, #0]
 80136ae:	4413      	add	r3, r2
 80136b0:	b29c      	uxth	r4, r3
 80136b2:	6978      	ldr	r0, [r7, #20]
 80136b4:	f7ff fc0e 	bl	8012ed4 <mem_to_ptr>
 80136b8:	4603      	mov	r3, r0
 80136ba:	1ae3      	subs	r3, r4, r3
 80136bc:	b29a      	uxth	r2, r3
 80136be:	4b4c      	ldr	r3, [pc, #304]	@ (80137f0 <mem_malloc+0x280>)
 80136c0:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
 80136c4:	4b4a      	ldr	r3, [pc, #296]	@ (80137f0 <mem_malloc+0x280>)
 80136c6:	f8b3 20b2 	ldrh.w	r2, [r3, #178]	@ 0xb2
 80136ca:	4b49      	ldr	r3, [pc, #292]	@ (80137f0 <mem_malloc+0x280>)
 80136cc:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 80136d0:	429a      	cmp	r2, r3
 80136d2:	d205      	bcs.n	80136e0 <mem_malloc+0x170>
 80136d4:	4b46      	ldr	r3, [pc, #280]	@ (80137f0 <mem_malloc+0x280>)
 80136d6:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	@ 0xb0
 80136da:	4b45      	ldr	r3, [pc, #276]	@ (80137f0 <mem_malloc+0x280>)
 80136dc:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80136e0:	4b3f      	ldr	r3, [pc, #252]	@ (80137e0 <mem_malloc+0x270>)
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	697a      	ldr	r2, [r7, #20]
 80136e6:	429a      	cmp	r2, r3
 80136e8:	d127      	bne.n	801373a <mem_malloc+0x1ca>
          struct mem *cur = lfree;
 80136ea:	4b3d      	ldr	r3, [pc, #244]	@ (80137e0 <mem_malloc+0x270>)
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80136f0:	e005      	b.n	80136fe <mem_malloc+0x18e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80136f2:	69bb      	ldr	r3, [r7, #24]
 80136f4:	881b      	ldrh	r3, [r3, #0]
 80136f6:	4618      	mov	r0, r3
 80136f8:	f7ff fbda 	bl	8012eb0 <ptr_to_mem>
 80136fc:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80136fe:	69bb      	ldr	r3, [r7, #24]
 8013700:	791b      	ldrb	r3, [r3, #4]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d004      	beq.n	8013710 <mem_malloc+0x1a0>
 8013706:	4b3b      	ldr	r3, [pc, #236]	@ (80137f4 <mem_malloc+0x284>)
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	69ba      	ldr	r2, [r7, #24]
 801370c:	429a      	cmp	r2, r3
 801370e:	d1f0      	bne.n	80136f2 <mem_malloc+0x182>
          }
          lfree = cur;
 8013710:	4a33      	ldr	r2, [pc, #204]	@ (80137e0 <mem_malloc+0x270>)
 8013712:	69bb      	ldr	r3, [r7, #24]
 8013714:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8013716:	4b32      	ldr	r3, [pc, #200]	@ (80137e0 <mem_malloc+0x270>)
 8013718:	681a      	ldr	r2, [r3, #0]
 801371a:	4b36      	ldr	r3, [pc, #216]	@ (80137f4 <mem_malloc+0x284>)
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	429a      	cmp	r2, r3
 8013720:	d00b      	beq.n	801373a <mem_malloc+0x1ca>
 8013722:	4b2f      	ldr	r3, [pc, #188]	@ (80137e0 <mem_malloc+0x270>)
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	791b      	ldrb	r3, [r3, #4]
 8013728:	2b00      	cmp	r3, #0
 801372a:	d006      	beq.n	801373a <mem_malloc+0x1ca>
 801372c:	4b2d      	ldr	r3, [pc, #180]	@ (80137e4 <mem_malloc+0x274>)
 801372e:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8013732:	4931      	ldr	r1, [pc, #196]	@ (80137f8 <mem_malloc+0x288>)
 8013734:	482d      	ldr	r0, [pc, #180]	@ (80137ec <mem_malloc+0x27c>)
 8013736:	f00d f82f 	bl	8020798 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 801373a:	4828      	ldr	r0, [pc, #160]	@ (80137dc <mem_malloc+0x26c>)
 801373c:	f00b fd5f 	bl	801f1fe <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8013740:	8bba      	ldrh	r2, [r7, #28]
 8013742:	697b      	ldr	r3, [r7, #20]
 8013744:	4413      	add	r3, r2
 8013746:	3308      	adds	r3, #8
 8013748:	4a2a      	ldr	r2, [pc, #168]	@ (80137f4 <mem_malloc+0x284>)
 801374a:	6812      	ldr	r2, [r2, #0]
 801374c:	4293      	cmp	r3, r2
 801374e:	d906      	bls.n	801375e <mem_malloc+0x1ee>
 8013750:	4b24      	ldr	r3, [pc, #144]	@ (80137e4 <mem_malloc+0x274>)
 8013752:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8013756:	4929      	ldr	r1, [pc, #164]	@ (80137fc <mem_malloc+0x28c>)
 8013758:	4824      	ldr	r0, [pc, #144]	@ (80137ec <mem_malloc+0x27c>)
 801375a:	f00d f81d 	bl	8020798 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801375e:	697b      	ldr	r3, [r7, #20]
 8013760:	f003 0303 	and.w	r3, r3, #3
 8013764:	2b00      	cmp	r3, #0
 8013766:	d006      	beq.n	8013776 <mem_malloc+0x206>
 8013768:	4b1e      	ldr	r3, [pc, #120]	@ (80137e4 <mem_malloc+0x274>)
 801376a:	f240 32bb 	movw	r2, #955	@ 0x3bb
 801376e:	4924      	ldr	r1, [pc, #144]	@ (8013800 <mem_malloc+0x290>)
 8013770:	481e      	ldr	r0, [pc, #120]	@ (80137ec <mem_malloc+0x27c>)
 8013772:	f00d f811 	bl	8020798 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8013776:	697b      	ldr	r3, [r7, #20]
 8013778:	f003 0303 	and.w	r3, r3, #3
 801377c:	2b00      	cmp	r3, #0
 801377e:	d006      	beq.n	801378e <mem_malloc+0x21e>
 8013780:	4b18      	ldr	r3, [pc, #96]	@ (80137e4 <mem_malloc+0x274>)
 8013782:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8013786:	491f      	ldr	r1, [pc, #124]	@ (8013804 <mem_malloc+0x294>)
 8013788:	4818      	ldr	r0, [pc, #96]	@ (80137ec <mem_malloc+0x27c>)
 801378a:	f00d f805 	bl	8020798 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 801378e:	697b      	ldr	r3, [r7, #20]
 8013790:	3308      	adds	r3, #8
 8013792:	e01f      	b.n	80137d4 <mem_malloc+0x264>
         ptr = ptr_to_mem(ptr)->next) {
 8013794:	8bfb      	ldrh	r3, [r7, #30]
 8013796:	4618      	mov	r0, r3
 8013798:	f7ff fb8a 	bl	8012eb0 <ptr_to_mem>
 801379c:	4603      	mov	r3, r0
 801379e:	881b      	ldrh	r3, [r3, #0]
 80137a0:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80137a2:	8bfa      	ldrh	r2, [r7, #30]
 80137a4:	8bbb      	ldrh	r3, [r7, #28]
 80137a6:	f5c3 43c8 	rsb	r3, r3, #25600	@ 0x6400
 80137aa:	429a      	cmp	r2, r3
 80137ac:	f4ff af0a 	bcc.w	80135c4 <mem_malloc+0x54>
    }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
 80137b0:	4b0f      	ldr	r3, [pc, #60]	@ (80137f0 <mem_malloc+0x280>)
 80137b2:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80137b6:	3301      	adds	r3, #1
 80137b8:	b29a      	uxth	r2, r3
 80137ba:	4b0d      	ldr	r3, [pc, #52]	@ (80137f0 <mem_malloc+0x280>)
 80137bc:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80137c0:	4806      	ldr	r0, [pc, #24]	@ (80137dc <mem_malloc+0x26c>)
 80137c2:	f00b fd1c 	bl	801f1fe <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
 80137c6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80137ca:	4619      	mov	r1, r3
 80137cc:	480e      	ldr	r0, [pc, #56]	@ (8013808 <mem_malloc+0x298>)
 80137ce:	f00c ffe3 	bl	8020798 <iprintf>
  return NULL;
 80137d2:	2300      	movs	r3, #0
}
 80137d4:	4618      	mov	r0, r3
 80137d6:	3724      	adds	r7, #36	@ 0x24
 80137d8:	46bd      	mov	sp, r7
 80137da:	bd90      	pop	{r4, r7, pc}
 80137dc:	2002711c 	.word	0x2002711c
 80137e0:	20027120 	.word	0x20027120
 80137e4:	080225ec 	.word	0x080225ec
 80137e8:	08022848 	.word	0x08022848
 80137ec:	08022634 	.word	0x08022634
 80137f0:	2002d36c 	.word	0x2002d36c
 80137f4:	20027118 	.word	0x20027118
 80137f8:	0802285c 	.word	0x0802285c
 80137fc:	08022878 	.word	0x08022878
 8013800:	080228a8 	.word	0x080228a8
 8013804:	080228d8 	.word	0x080228d8
 8013808:	080228fc 	.word	0x080228fc

0801380c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 801380c:	b480      	push	{r7}
 801380e:	b085      	sub	sp, #20
 8013810:	af00      	add	r7, sp, #0
 8013812:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	691b      	ldr	r3, [r3, #16]
 8013818:	2200      	movs	r2, #0
 801381a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	68db      	ldr	r3, [r3, #12]
 8013820:	3303      	adds	r3, #3
 8013822:	f023 0303 	bic.w	r3, r3, #3
 8013826:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8013828:	2300      	movs	r3, #0
 801382a:	60fb      	str	r3, [r7, #12]
 801382c:	e011      	b.n	8013852 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	691b      	ldr	r3, [r3, #16]
 8013832:	681a      	ldr	r2, [r3, #0]
 8013834:	68bb      	ldr	r3, [r7, #8]
 8013836:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	691b      	ldr	r3, [r3, #16]
 801383c:	68ba      	ldr	r2, [r7, #8]
 801383e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	891b      	ldrh	r3, [r3, #8]
 8013844:	461a      	mov	r2, r3
 8013846:	68bb      	ldr	r3, [r7, #8]
 8013848:	4413      	add	r3, r2
 801384a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	3301      	adds	r3, #1
 8013850:	60fb      	str	r3, [r7, #12]
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	895b      	ldrh	r3, [r3, #10]
 8013856:	461a      	mov	r2, r3
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	4293      	cmp	r3, r2
 801385c:	dbe7      	blt.n	801382e <memp_init_pool+0x22>
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                  );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	685b      	ldr	r3, [r3, #4]
 8013862:	687a      	ldr	r2, [r7, #4]
 8013864:	8952      	ldrh	r2, [r2, #10]
 8013866:	80da      	strh	r2, [r3, #6]
#endif /* MEMP_STATS */
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	685b      	ldr	r3, [r3, #4]
 801386c:	687a      	ldr	r2, [r7, #4]
 801386e:	6812      	ldr	r2, [r2, #0]
 8013870:	601a      	str	r2, [r3, #0]
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8013872:	bf00      	nop
 8013874:	3714      	adds	r7, #20
 8013876:	46bd      	mov	sp, r7
 8013878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801387c:	4770      	bx	lr
	...

08013880 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8013880:	b580      	push	{r7, lr}
 8013882:	b082      	sub	sp, #8
 8013884:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8013886:	2300      	movs	r3, #0
 8013888:	80fb      	strh	r3, [r7, #6]
 801388a:	e013      	b.n	80138b4 <memp_init+0x34>
    memp_init_pool(memp_pools[i]);
 801388c:	88fb      	ldrh	r3, [r7, #6]
 801388e:	4a0d      	ldr	r2, [pc, #52]	@ (80138c4 <memp_init+0x44>)
 8013890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013894:	4618      	mov	r0, r3
 8013896:	f7ff ffb9 	bl	801380c <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
 801389a:	88fb      	ldrh	r3, [r7, #6]
 801389c:	4a09      	ldr	r2, [pc, #36]	@ (80138c4 <memp_init+0x44>)
 801389e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80138a2:	88fb      	ldrh	r3, [r7, #6]
 80138a4:	6852      	ldr	r2, [r2, #4]
 80138a6:	4908      	ldr	r1, [pc, #32]	@ (80138c8 <memp_init+0x48>)
 80138a8:	332e      	adds	r3, #46	@ 0x2e
 80138aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80138ae:	88fb      	ldrh	r3, [r7, #6]
 80138b0:	3301      	adds	r3, #1
 80138b2:	80fb      	strh	r3, [r7, #6]
 80138b4:	88fb      	ldrh	r3, [r7, #6]
 80138b6:	2b0c      	cmp	r3, #12
 80138b8:	d9e8      	bls.n	801388c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80138ba:	bf00      	nop
 80138bc:	bf00      	nop
 80138be:	3708      	adds	r7, #8
 80138c0:	46bd      	mov	sp, r7
 80138c2:	bd80      	pop	{r7, pc}
 80138c4:	08026810 	.word	0x08026810
 80138c8:	2002d36c 	.word	0x2002d36c

080138cc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80138cc:	b580      	push	{r7, lr}
 80138ce:	b084      	sub	sp, #16
 80138d0:	af00      	add	r7, sp, #0
 80138d2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80138d4:	f00b fcc0 	bl	801f258 <sys_arch_protect>
 80138d8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	691b      	ldr	r3, [r3, #16]
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80138e2:	68bb      	ldr	r3, [r7, #8]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d029      	beq.n	801393c <do_memp_malloc_pool+0x70>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	691b      	ldr	r3, [r3, #16]
 80138ec:	68ba      	ldr	r2, [r7, #8]
 80138ee:	6812      	ldr	r2, [r2, #0]
 80138f0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80138f2:	68bb      	ldr	r3, [r7, #8]
 80138f4:	f003 0303 	and.w	r3, r3, #3
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d006      	beq.n	801390a <do_memp_malloc_pool+0x3e>
 80138fc:	4b19      	ldr	r3, [pc, #100]	@ (8013964 <do_memp_malloc_pool+0x98>)
 80138fe:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8013902:	4919      	ldr	r1, [pc, #100]	@ (8013968 <do_memp_malloc_pool+0x9c>)
 8013904:	4819      	ldr	r0, [pc, #100]	@ (801396c <do_memp_malloc_pool+0xa0>)
 8013906:	f00c ff47 	bl	8020798 <iprintf>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	685b      	ldr	r3, [r3, #4]
 801390e:	891a      	ldrh	r2, [r3, #8]
 8013910:	3201      	adds	r2, #1
 8013912:	b292      	uxth	r2, r2
 8013914:	811a      	strh	r2, [r3, #8]
    if (desc->stats->used > desc->stats->max) {
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	685b      	ldr	r3, [r3, #4]
 801391a:	891a      	ldrh	r2, [r3, #8]
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	685b      	ldr	r3, [r3, #4]
 8013920:	895b      	ldrh	r3, [r3, #10]
 8013922:	429a      	cmp	r2, r3
 8013924:	d905      	bls.n	8013932 <do_memp_malloc_pool+0x66>
      desc->stats->max = desc->stats->used;
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	685a      	ldr	r2, [r3, #4]
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	685b      	ldr	r3, [r3, #4]
 801392e:	8912      	ldrh	r2, [r2, #8]
 8013930:	815a      	strh	r2, [r3, #10]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013932:	68f8      	ldr	r0, [r7, #12]
 8013934:	f00b fc9e 	bl	801f274 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8013938:	68bb      	ldr	r3, [r7, #8]
 801393a:	e00f      	b.n	801395c <do_memp_malloc_pool+0x90>
  } else {
#if MEMP_STATS
    desc->stats->err++;
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	685b      	ldr	r3, [r3, #4]
 8013940:	889a      	ldrh	r2, [r3, #4]
 8013942:	3201      	adds	r2, #1
 8013944:	b292      	uxth	r2, r2
 8013946:	809a      	strh	r2, [r3, #4]
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013948:	68f8      	ldr	r0, [r7, #12]
 801394a:	f00b fc93 	bl	801f274 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	4619      	mov	r1, r3
 8013954:	4806      	ldr	r0, [pc, #24]	@ (8013970 <do_memp_malloc_pool+0xa4>)
 8013956:	f00c ff1f 	bl	8020798 <iprintf>
  }

  return NULL;
 801395a:	2300      	movs	r3, #0
}
 801395c:	4618      	mov	r0, r3
 801395e:	3710      	adds	r7, #16
 8013960:	46bd      	mov	sp, r7
 8013962:	bd80      	pop	{r7, pc}
 8013964:	080229ec 	.word	0x080229ec
 8013968:	08022a1c 	.word	0x08022a1c
 801396c:	08022a40 	.word	0x08022a40
 8013970:	08022a68 	.word	0x08022a68

08013974 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8013974:	b580      	push	{r7, lr}
 8013976:	b082      	sub	sp, #8
 8013978:	af00      	add	r7, sp, #0
 801397a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	2b00      	cmp	r3, #0
 8013980:	d106      	bne.n	8013990 <memp_malloc_pool+0x1c>
 8013982:	4b0a      	ldr	r3, [pc, #40]	@ (80139ac <memp_malloc_pool+0x38>)
 8013984:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8013988:	4909      	ldr	r1, [pc, #36]	@ (80139b0 <memp_malloc_pool+0x3c>)
 801398a:	480a      	ldr	r0, [pc, #40]	@ (80139b4 <memp_malloc_pool+0x40>)
 801398c:	f00c ff04 	bl	8020798 <iprintf>
  if (desc == NULL) {
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	2b00      	cmp	r3, #0
 8013994:	d101      	bne.n	801399a <memp_malloc_pool+0x26>
    return NULL;
 8013996:	2300      	movs	r3, #0
 8013998:	e003      	b.n	80139a2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 801399a:	6878      	ldr	r0, [r7, #4]
 801399c:	f7ff ff96 	bl	80138cc <do_memp_malloc_pool>
 80139a0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80139a2:	4618      	mov	r0, r3
 80139a4:	3708      	adds	r7, #8
 80139a6:	46bd      	mov	sp, r7
 80139a8:	bd80      	pop	{r7, pc}
 80139aa:	bf00      	nop
 80139ac:	080229ec 	.word	0x080229ec
 80139b0:	08022a90 	.word	0x08022a90
 80139b4:	08022a40 	.word	0x08022a40

080139b8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80139b8:	b580      	push	{r7, lr}
 80139ba:	b084      	sub	sp, #16
 80139bc:	af00      	add	r7, sp, #0
 80139be:	4603      	mov	r3, r0
 80139c0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80139c2:	79fb      	ldrb	r3, [r7, #7]
 80139c4:	2b0c      	cmp	r3, #12
 80139c6:	d908      	bls.n	80139da <memp_malloc+0x22>
 80139c8:	4b0a      	ldr	r3, [pc, #40]	@ (80139f4 <memp_malloc+0x3c>)
 80139ca:	f240 1257 	movw	r2, #343	@ 0x157
 80139ce:	490a      	ldr	r1, [pc, #40]	@ (80139f8 <memp_malloc+0x40>)
 80139d0:	480a      	ldr	r0, [pc, #40]	@ (80139fc <memp_malloc+0x44>)
 80139d2:	f00c fee1 	bl	8020798 <iprintf>
 80139d6:	2300      	movs	r3, #0
 80139d8:	e008      	b.n	80139ec <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80139da:	79fb      	ldrb	r3, [r7, #7]
 80139dc:	4a08      	ldr	r2, [pc, #32]	@ (8013a00 <memp_malloc+0x48>)
 80139de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80139e2:	4618      	mov	r0, r3
 80139e4:	f7ff ff72 	bl	80138cc <do_memp_malloc_pool>
 80139e8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80139ea:	68fb      	ldr	r3, [r7, #12]
}
 80139ec:	4618      	mov	r0, r3
 80139ee:	3710      	adds	r7, #16
 80139f0:	46bd      	mov	sp, r7
 80139f2:	bd80      	pop	{r7, pc}
 80139f4:	080229ec 	.word	0x080229ec
 80139f8:	08022aa4 	.word	0x08022aa4
 80139fc:	08022a40 	.word	0x08022a40
 8013a00:	08026810 	.word	0x08026810

08013a04 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8013a04:	b580      	push	{r7, lr}
 8013a06:	b084      	sub	sp, #16
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	6078      	str	r0, [r7, #4]
 8013a0c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8013a0e:	683b      	ldr	r3, [r7, #0]
 8013a10:	f003 0303 	and.w	r3, r3, #3
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d006      	beq.n	8013a26 <do_memp_free_pool+0x22>
 8013a18:	4b10      	ldr	r3, [pc, #64]	@ (8013a5c <do_memp_free_pool+0x58>)
 8013a1a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8013a1e:	4910      	ldr	r1, [pc, #64]	@ (8013a60 <do_memp_free_pool+0x5c>)
 8013a20:	4810      	ldr	r0, [pc, #64]	@ (8013a64 <do_memp_free_pool+0x60>)
 8013a22:	f00c feb9 	bl	8020798 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8013a26:	683b      	ldr	r3, [r7, #0]
 8013a28:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8013a2a:	f00b fc15 	bl	801f258 <sys_arch_protect>
 8013a2e:	60b8      	str	r0, [r7, #8]
#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	685b      	ldr	r3, [r3, #4]
 8013a34:	891a      	ldrh	r2, [r3, #8]
 8013a36:	3a01      	subs	r2, #1
 8013a38:	b292      	uxth	r2, r2
 8013a3a:	811a      	strh	r2, [r3, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	691b      	ldr	r3, [r3, #16]
 8013a40:	681a      	ldr	r2, [r3, #0]
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	691b      	ldr	r3, [r3, #16]
 8013a4a:	68fa      	ldr	r2, [r7, #12]
 8013a4c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8013a4e:	68b8      	ldr	r0, [r7, #8]
 8013a50:	f00b fc10 	bl	801f274 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8013a54:	bf00      	nop
 8013a56:	3710      	adds	r7, #16
 8013a58:	46bd      	mov	sp, r7
 8013a5a:	bd80      	pop	{r7, pc}
 8013a5c:	080229ec 	.word	0x080229ec
 8013a60:	08022ac4 	.word	0x08022ac4
 8013a64:	08022a40 	.word	0x08022a40

08013a68 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8013a68:	b580      	push	{r7, lr}
 8013a6a:	b082      	sub	sp, #8
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	6078      	str	r0, [r7, #4]
 8013a70:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d106      	bne.n	8013a86 <memp_free_pool+0x1e>
 8013a78:	4b0a      	ldr	r3, [pc, #40]	@ (8013aa4 <memp_free_pool+0x3c>)
 8013a7a:	f240 1295 	movw	r2, #405	@ 0x195
 8013a7e:	490a      	ldr	r1, [pc, #40]	@ (8013aa8 <memp_free_pool+0x40>)
 8013a80:	480a      	ldr	r0, [pc, #40]	@ (8013aac <memp_free_pool+0x44>)
 8013a82:	f00c fe89 	bl	8020798 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d007      	beq.n	8013a9c <memp_free_pool+0x34>
 8013a8c:	683b      	ldr	r3, [r7, #0]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d004      	beq.n	8013a9c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8013a92:	6839      	ldr	r1, [r7, #0]
 8013a94:	6878      	ldr	r0, [r7, #4]
 8013a96:	f7ff ffb5 	bl	8013a04 <do_memp_free_pool>
 8013a9a:	e000      	b.n	8013a9e <memp_free_pool+0x36>
    return;
 8013a9c:	bf00      	nop
}
 8013a9e:	3708      	adds	r7, #8
 8013aa0:	46bd      	mov	sp, r7
 8013aa2:	bd80      	pop	{r7, pc}
 8013aa4:	080229ec 	.word	0x080229ec
 8013aa8:	08022a90 	.word	0x08022a90
 8013aac:	08022a40 	.word	0x08022a40

08013ab0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8013ab0:	b580      	push	{r7, lr}
 8013ab2:	b082      	sub	sp, #8
 8013ab4:	af00      	add	r7, sp, #0
 8013ab6:	4603      	mov	r3, r0
 8013ab8:	6039      	str	r1, [r7, #0]
 8013aba:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8013abc:	79fb      	ldrb	r3, [r7, #7]
 8013abe:	2b0c      	cmp	r3, #12
 8013ac0:	d907      	bls.n	8013ad2 <memp_free+0x22>
 8013ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8013af4 <memp_free+0x44>)
 8013ac4:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8013ac8:	490b      	ldr	r1, [pc, #44]	@ (8013af8 <memp_free+0x48>)
 8013aca:	480c      	ldr	r0, [pc, #48]	@ (8013afc <memp_free+0x4c>)
 8013acc:	f00c fe64 	bl	8020798 <iprintf>
 8013ad0:	e00c      	b.n	8013aec <memp_free+0x3c>

  if (mem == NULL) {
 8013ad2:	683b      	ldr	r3, [r7, #0]
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d008      	beq.n	8013aea <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8013ad8:	79fb      	ldrb	r3, [r7, #7]
 8013ada:	4a09      	ldr	r2, [pc, #36]	@ (8013b00 <memp_free+0x50>)
 8013adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013ae0:	6839      	ldr	r1, [r7, #0]
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	f7ff ff8e 	bl	8013a04 <do_memp_free_pool>
 8013ae8:	e000      	b.n	8013aec <memp_free+0x3c>
    return;
 8013aea:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8013aec:	3708      	adds	r7, #8
 8013aee:	46bd      	mov	sp, r7
 8013af0:	bd80      	pop	{r7, pc}
 8013af2:	bf00      	nop
 8013af4:	080229ec 	.word	0x080229ec
 8013af8:	08022ae4 	.word	0x08022ae4
 8013afc:	08022a40 	.word	0x08022a40
 8013b00:	08026810 	.word	0x08026810

08013b04 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8013b04:	b480      	push	{r7}
 8013b06:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8013b08:	bf00      	nop
 8013b0a:	46bd      	mov	sp, r7
 8013b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b10:	4770      	bx	lr
	...

08013b14 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8013b14:	b580      	push	{r7, lr}
 8013b16:	b088      	sub	sp, #32
 8013b18:	af02      	add	r7, sp, #8
 8013b1a:	60f8      	str	r0, [r7, #12]
 8013b1c:	60b9      	str	r1, [r7, #8]
 8013b1e:	607a      	str	r2, [r7, #4]
 8013b20:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d108      	bne.n	8013b3a <netif_add+0x26>
 8013b28:	4b96      	ldr	r3, [pc, #600]	@ (8013d84 <netif_add+0x270>)
 8013b2a:	f240 1227 	movw	r2, #295	@ 0x127
 8013b2e:	4996      	ldr	r1, [pc, #600]	@ (8013d88 <netif_add+0x274>)
 8013b30:	4896      	ldr	r0, [pc, #600]	@ (8013d8c <netif_add+0x278>)
 8013b32:	f00c fe31 	bl	8020798 <iprintf>
 8013b36:	2300      	movs	r3, #0
 8013b38:	e14c      	b.n	8013dd4 <netif_add+0x2c0>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8013b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d108      	bne.n	8013b52 <netif_add+0x3e>
 8013b40:	4b90      	ldr	r3, [pc, #576]	@ (8013d84 <netif_add+0x270>)
 8013b42:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8013b46:	4992      	ldr	r1, [pc, #584]	@ (8013d90 <netif_add+0x27c>)
 8013b48:	4890      	ldr	r0, [pc, #576]	@ (8013d8c <netif_add+0x278>)
 8013b4a:	f00c fe25 	bl	8020798 <iprintf>
 8013b4e:	2300      	movs	r3, #0
 8013b50:	e140      	b.n	8013dd4 <netif_add+0x2c0>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8013b52:	68bb      	ldr	r3, [r7, #8]
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d101      	bne.n	8013b5c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8013b58:	4b8e      	ldr	r3, [pc, #568]	@ (8013d94 <netif_add+0x280>)
 8013b5a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d101      	bne.n	8013b66 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8013b62:	4b8c      	ldr	r3, [pc, #560]	@ (8013d94 <netif_add+0x280>)
 8013b64:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8013b66:	683b      	ldr	r3, [r7, #0]
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d101      	bne.n	8013b70 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8013b6c:	4b89      	ldr	r3, [pc, #548]	@ (8013d94 <netif_add+0x280>)
 8013b6e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	2200      	movs	r2, #0
 8013b74:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	2200      	movs	r2, #0
 8013b7a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	2200      	movs	r2, #0
 8013b80:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	4a84      	ldr	r2, [pc, #528]	@ (8013d98 <netif_add+0x284>)
 8013b86:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	2200      	movs	r2, #0
 8013b8c:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	2200      	movs	r2, #0
 8013b92:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	2200      	movs	r2, #0
 8013b9a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	6a3a      	ldr	r2, [r7, #32]
 8013ba0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8013ba2:	4b7e      	ldr	r3, [pc, #504]	@ (8013d9c <netif_add+0x288>)
 8013ba4:	781a      	ldrb	r2, [r3, #0]
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013bb0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8013bb2:	683b      	ldr	r3, [r7, #0]
 8013bb4:	687a      	ldr	r2, [r7, #4]
 8013bb6:	68b9      	ldr	r1, [r7, #8]
 8013bb8:	68f8      	ldr	r0, [r7, #12]
 8013bba:	f000 f9f5 	bl	8013fa8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8013bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bc0:	68f8      	ldr	r0, [r7, #12]
 8013bc2:	4798      	blx	r3
 8013bc4:	4603      	mov	r3, r0
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d001      	beq.n	8013bce <netif_add+0xba>
    return NULL;
 8013bca:	2300      	movs	r3, #0
 8013bcc:	e102      	b.n	8013dd4 <netif_add+0x2c0>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013bd4:	2bff      	cmp	r3, #255	@ 0xff
 8013bd6:	d103      	bne.n	8013be0 <netif_add+0xcc>
        netif->num = 0;
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	2200      	movs	r2, #0
 8013bdc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8013be0:	2300      	movs	r3, #0
 8013be2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8013be4:	4b6e      	ldr	r3, [pc, #440]	@ (8013da0 <netif_add+0x28c>)
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	617b      	str	r3, [r7, #20]
 8013bea:	e02b      	b.n	8013c44 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8013bec:	697a      	ldr	r2, [r7, #20]
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	429a      	cmp	r2, r3
 8013bf2:	d106      	bne.n	8013c02 <netif_add+0xee>
 8013bf4:	4b63      	ldr	r3, [pc, #396]	@ (8013d84 <netif_add+0x270>)
 8013bf6:	f240 128b 	movw	r2, #395	@ 0x18b
 8013bfa:	496a      	ldr	r1, [pc, #424]	@ (8013da4 <netif_add+0x290>)
 8013bfc:	4863      	ldr	r0, [pc, #396]	@ (8013d8c <netif_add+0x278>)
 8013bfe:	f00c fdcb 	bl	8020798 <iprintf>
        num_netifs++;
 8013c02:	693b      	ldr	r3, [r7, #16]
 8013c04:	3301      	adds	r3, #1
 8013c06:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8013c08:	693b      	ldr	r3, [r7, #16]
 8013c0a:	2bff      	cmp	r3, #255	@ 0xff
 8013c0c:	dd06      	ble.n	8013c1c <netif_add+0x108>
 8013c0e:	4b5d      	ldr	r3, [pc, #372]	@ (8013d84 <netif_add+0x270>)
 8013c10:	f240 128d 	movw	r2, #397	@ 0x18d
 8013c14:	4964      	ldr	r1, [pc, #400]	@ (8013da8 <netif_add+0x294>)
 8013c16:	485d      	ldr	r0, [pc, #372]	@ (8013d8c <netif_add+0x278>)
 8013c18:	f00c fdbe 	bl	8020798 <iprintf>
        if (netif2->num == netif->num) {
 8013c1c:	697b      	ldr	r3, [r7, #20]
 8013c1e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013c28:	429a      	cmp	r2, r3
 8013c2a:	d108      	bne.n	8013c3e <netif_add+0x12a>
          netif->num++;
 8013c2c:	68fb      	ldr	r3, [r7, #12]
 8013c2e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013c32:	3301      	adds	r3, #1
 8013c34:	b2da      	uxtb	r2, r3
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8013c3c:	e005      	b.n	8013c4a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8013c3e:	697b      	ldr	r3, [r7, #20]
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	617b      	str	r3, [r7, #20]
 8013c44:	697b      	ldr	r3, [r7, #20]
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d1d0      	bne.n	8013bec <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8013c4a:	697b      	ldr	r3, [r7, #20]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d1be      	bne.n	8013bce <netif_add+0xba>
  }
  if (netif->num == 254) {
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013c56:	2bfe      	cmp	r3, #254	@ 0xfe
 8013c58:	d103      	bne.n	8013c62 <netif_add+0x14e>
    netif_num = 0;
 8013c5a:	4b50      	ldr	r3, [pc, #320]	@ (8013d9c <netif_add+0x288>)
 8013c5c:	2200      	movs	r2, #0
 8013c5e:	701a      	strb	r2, [r3, #0]
 8013c60:	e006      	b.n	8013c70 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013c68:	3301      	adds	r3, #1
 8013c6a:	b2da      	uxtb	r2, r3
 8013c6c:	4b4b      	ldr	r3, [pc, #300]	@ (8013d9c <netif_add+0x288>)
 8013c6e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8013c70:	4b4b      	ldr	r3, [pc, #300]	@ (8013da0 <netif_add+0x28c>)
 8013c72:	681a      	ldr	r2, [r3, #0]
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8013c78:	4a49      	ldr	r2, [pc, #292]	@ (8013da0 <netif_add+0x28c>)
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	6013      	str	r3, [r2, #0]
  if (netif->flags & NETIF_FLAG_IGMP) {
    igmp_start(netif);
  }
#endif /* LWIP_IGMP */

  LWIP_DEBUGF(NETIF_DEBUG, ("netif: added interface %c%c IP",
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8013c84:	4619      	mov	r1, r3
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8013c8c:	461a      	mov	r2, r3
 8013c8e:	4847      	ldr	r0, [pc, #284]	@ (8013dac <netif_add+0x298>)
 8013c90:	f00c fd82 	bl	8020798 <iprintf>
                            netif->name[0], netif->name[1]));
#if LWIP_IPV4
  LWIP_DEBUGF(NETIF_DEBUG, (" addr "));
 8013c94:	4846      	ldr	r0, [pc, #280]	@ (8013db0 <netif_add+0x29c>)
 8013c96:	f00c fd7f 	bl	8020798 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, ipaddr);
 8013c9a:	68bb      	ldr	r3, [r7, #8]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d003      	beq.n	8013ca8 <netif_add+0x194>
 8013ca0:	68bb      	ldr	r3, [r7, #8]
 8013ca2:	781b      	ldrb	r3, [r3, #0]
 8013ca4:	4619      	mov	r1, r3
 8013ca6:	e000      	b.n	8013caa <netif_add+0x196>
 8013ca8:	2100      	movs	r1, #0
 8013caa:	68bb      	ldr	r3, [r7, #8]
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d004      	beq.n	8013cba <netif_add+0x1a6>
 8013cb0:	68bb      	ldr	r3, [r7, #8]
 8013cb2:	3301      	adds	r3, #1
 8013cb4:	781b      	ldrb	r3, [r3, #0]
 8013cb6:	461a      	mov	r2, r3
 8013cb8:	e000      	b.n	8013cbc <netif_add+0x1a8>
 8013cba:	2200      	movs	r2, #0
 8013cbc:	68bb      	ldr	r3, [r7, #8]
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d004      	beq.n	8013ccc <netif_add+0x1b8>
 8013cc2:	68bb      	ldr	r3, [r7, #8]
 8013cc4:	3302      	adds	r3, #2
 8013cc6:	781b      	ldrb	r3, [r3, #0]
 8013cc8:	4618      	mov	r0, r3
 8013cca:	e000      	b.n	8013cce <netif_add+0x1ba>
 8013ccc:	2000      	movs	r0, #0
 8013cce:	68bb      	ldr	r3, [r7, #8]
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d003      	beq.n	8013cdc <netif_add+0x1c8>
 8013cd4:	68bb      	ldr	r3, [r7, #8]
 8013cd6:	3303      	adds	r3, #3
 8013cd8:	781b      	ldrb	r3, [r3, #0]
 8013cda:	e000      	b.n	8013cde <netif_add+0x1ca>
 8013cdc:	2300      	movs	r3, #0
 8013cde:	9300      	str	r3, [sp, #0]
 8013ce0:	4603      	mov	r3, r0
 8013ce2:	4834      	ldr	r0, [pc, #208]	@ (8013db4 <netif_add+0x2a0>)
 8013ce4:	f00c fd58 	bl	8020798 <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
 8013ce8:	4833      	ldr	r0, [pc, #204]	@ (8013db8 <netif_add+0x2a4>)
 8013cea:	f00c fd55 	bl	8020798 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d003      	beq.n	8013cfc <netif_add+0x1e8>
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	781b      	ldrb	r3, [r3, #0]
 8013cf8:	4619      	mov	r1, r3
 8013cfa:	e000      	b.n	8013cfe <netif_add+0x1ea>
 8013cfc:	2100      	movs	r1, #0
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d004      	beq.n	8013d0e <netif_add+0x1fa>
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	3301      	adds	r3, #1
 8013d08:	781b      	ldrb	r3, [r3, #0]
 8013d0a:	461a      	mov	r2, r3
 8013d0c:	e000      	b.n	8013d10 <netif_add+0x1fc>
 8013d0e:	2200      	movs	r2, #0
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d004      	beq.n	8013d20 <netif_add+0x20c>
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	3302      	adds	r3, #2
 8013d1a:	781b      	ldrb	r3, [r3, #0]
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	e000      	b.n	8013d22 <netif_add+0x20e>
 8013d20:	2000      	movs	r0, #0
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d003      	beq.n	8013d30 <netif_add+0x21c>
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	3303      	adds	r3, #3
 8013d2c:	781b      	ldrb	r3, [r3, #0]
 8013d2e:	e000      	b.n	8013d32 <netif_add+0x21e>
 8013d30:	2300      	movs	r3, #0
 8013d32:	9300      	str	r3, [sp, #0]
 8013d34:	4603      	mov	r3, r0
 8013d36:	481f      	ldr	r0, [pc, #124]	@ (8013db4 <netif_add+0x2a0>)
 8013d38:	f00c fd2e 	bl	8020798 <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
 8013d3c:	481f      	ldr	r0, [pc, #124]	@ (8013dbc <netif_add+0x2a8>)
 8013d3e:	f00c fd2b 	bl	8020798 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, gw);
 8013d42:	683b      	ldr	r3, [r7, #0]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d003      	beq.n	8013d50 <netif_add+0x23c>
 8013d48:	683b      	ldr	r3, [r7, #0]
 8013d4a:	781b      	ldrb	r3, [r3, #0]
 8013d4c:	4619      	mov	r1, r3
 8013d4e:	e000      	b.n	8013d52 <netif_add+0x23e>
 8013d50:	2100      	movs	r1, #0
 8013d52:	683b      	ldr	r3, [r7, #0]
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d004      	beq.n	8013d62 <netif_add+0x24e>
 8013d58:	683b      	ldr	r3, [r7, #0]
 8013d5a:	3301      	adds	r3, #1
 8013d5c:	781b      	ldrb	r3, [r3, #0]
 8013d5e:	461a      	mov	r2, r3
 8013d60:	e000      	b.n	8013d64 <netif_add+0x250>
 8013d62:	2200      	movs	r2, #0
 8013d64:	683b      	ldr	r3, [r7, #0]
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d004      	beq.n	8013d74 <netif_add+0x260>
 8013d6a:	683b      	ldr	r3, [r7, #0]
 8013d6c:	3302      	adds	r3, #2
 8013d6e:	781b      	ldrb	r3, [r3, #0]
 8013d70:	4618      	mov	r0, r3
 8013d72:	e000      	b.n	8013d76 <netif_add+0x262>
 8013d74:	2000      	movs	r0, #0
 8013d76:	683b      	ldr	r3, [r7, #0]
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d021      	beq.n	8013dc0 <netif_add+0x2ac>
 8013d7c:	683b      	ldr	r3, [r7, #0]
 8013d7e:	3303      	adds	r3, #3
 8013d80:	781b      	ldrb	r3, [r3, #0]
 8013d82:	e01e      	b.n	8013dc2 <netif_add+0x2ae>
 8013d84:	08022b00 	.word	0x08022b00
 8013d88:	08022b94 	.word	0x08022b94
 8013d8c:	08022b50 	.word	0x08022b50
 8013d90:	08022bb0 	.word	0x08022bb0
 8013d94:	08026884 	.word	0x08026884
 8013d98:	080142ab 	.word	0x080142ab
 8013d9c:	2002d368 	.word	0x2002d368
 8013da0:	2002d360 	.word	0x2002d360
 8013da4:	08022bd4 	.word	0x08022bd4
 8013da8:	08022be8 	.word	0x08022be8
 8013dac:	08022c18 	.word	0x08022c18
 8013db0:	08022c38 	.word	0x08022c38
 8013db4:	08022c40 	.word	0x08022c40
 8013db8:	08022c50 	.word	0x08022c50
 8013dbc:	08022c5c 	.word	0x08022c5c
 8013dc0:	2300      	movs	r3, #0
 8013dc2:	9300      	str	r3, [sp, #0]
 8013dc4:	4603      	mov	r3, r0
 8013dc6:	4805      	ldr	r0, [pc, #20]	@ (8013ddc <netif_add+0x2c8>)
 8013dc8:	f00c fce6 	bl	8020798 <iprintf>
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
 8013dcc:	200a      	movs	r0, #10
 8013dce:	f00c fcf5 	bl	80207bc <putchar>

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8013dd2:	68fb      	ldr	r3, [r7, #12]
}
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	3718      	adds	r7, #24
 8013dd8:	46bd      	mov	sp, r7
 8013dda:	bd80      	pop	{r7, pc}
 8013ddc:	08022c40 	.word	0x08022c40

08013de0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b082      	sub	sp, #8
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	6078      	str	r0, [r7, #4]
 8013de8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8013dea:	6839      	ldr	r1, [r7, #0]
 8013dec:	6878      	ldr	r0, [r7, #4]
 8013dee:	f002 fead 	bl	8016b4c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8013df2:	6839      	ldr	r1, [r7, #0]
 8013df4:	6878      	ldr	r0, [r7, #4]
 8013df6:	f008 fa3f 	bl	801c278 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8013dfa:	bf00      	nop
 8013dfc:	3708      	adds	r7, #8
 8013dfe:	46bd      	mov	sp, r7
 8013e00:	bd80      	pop	{r7, pc}
	...

08013e04 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8013e04:	b580      	push	{r7, lr}
 8013e06:	b086      	sub	sp, #24
 8013e08:	af00      	add	r7, sp, #0
 8013e0a:	60f8      	str	r0, [r7, #12]
 8013e0c:	60b9      	str	r1, [r7, #8]
 8013e0e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8013e10:	68bb      	ldr	r3, [r7, #8]
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d106      	bne.n	8013e24 <netif_do_set_ipaddr+0x20>
 8013e16:	4b1e      	ldr	r3, [pc, #120]	@ (8013e90 <netif_do_set_ipaddr+0x8c>)
 8013e18:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8013e1c:	491d      	ldr	r1, [pc, #116]	@ (8013e94 <netif_do_set_ipaddr+0x90>)
 8013e1e:	481e      	ldr	r0, [pc, #120]	@ (8013e98 <netif_do_set_ipaddr+0x94>)
 8013e20:	f00c fcba 	bl	8020798 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d106      	bne.n	8013e38 <netif_do_set_ipaddr+0x34>
 8013e2a:	4b19      	ldr	r3, [pc, #100]	@ (8013e90 <netif_do_set_ipaddr+0x8c>)
 8013e2c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8013e30:	4918      	ldr	r1, [pc, #96]	@ (8013e94 <netif_do_set_ipaddr+0x90>)
 8013e32:	4819      	ldr	r0, [pc, #100]	@ (8013e98 <netif_do_set_ipaddr+0x94>)
 8013e34:	f00c fcb0 	bl	8020798 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8013e38:	68bb      	ldr	r3, [r7, #8]
 8013e3a:	681a      	ldr	r2, [r3, #0]
 8013e3c:	68fb      	ldr	r3, [r7, #12]
 8013e3e:	3304      	adds	r3, #4
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	429a      	cmp	r2, r3
 8013e44:	d01f      	beq.n	8013e86 <netif_do_set_ipaddr+0x82>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8013e46:	68bb      	ldr	r3, [r7, #8]
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	3304      	adds	r3, #4
 8013e50:	681a      	ldr	r2, [r3, #0]
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
 8013e56:	4811      	ldr	r0, [pc, #68]	@ (8013e9c <netif_do_set_ipaddr+0x98>)
 8013e58:	f00c fd0e 	bl	8020878 <puts>
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8013e5c:	f107 0314 	add.w	r3, r7, #20
 8013e60:	4619      	mov	r1, r3
 8013e62:	6878      	ldr	r0, [r7, #4]
 8013e64:	f7ff ffbc 	bl	8013de0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8013e68:	68bb      	ldr	r3, [r7, #8]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d002      	beq.n	8013e74 <netif_do_set_ipaddr+0x70>
 8013e6e:	68bb      	ldr	r3, [r7, #8]
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	e000      	b.n	8013e76 <netif_do_set_ipaddr+0x72>
 8013e74:	2300      	movs	r3, #0
 8013e76:	68fa      	ldr	r2, [r7, #12]
 8013e78:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8013e7a:	2101      	movs	r1, #1
 8013e7c:	68f8      	ldr	r0, [r7, #12]
 8013e7e:	f000 f92d 	bl	80140dc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8013e82:	2301      	movs	r3, #1
 8013e84:	e000      	b.n	8013e88 <netif_do_set_ipaddr+0x84>
  }
  return 0; /* address unchanged */
 8013e86:	2300      	movs	r3, #0
}
 8013e88:	4618      	mov	r0, r3
 8013e8a:	3718      	adds	r7, #24
 8013e8c:	46bd      	mov	sp, r7
 8013e8e:	bd80      	pop	{r7, pc}
 8013e90:	08022b00 	.word	0x08022b00
 8013e94:	08022c64 	.word	0x08022c64
 8013e98:	08022b50 	.word	0x08022b50
 8013e9c:	08022c74 	.word	0x08022c74

08013ea0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8013ea0:	b5b0      	push	{r4, r5, r7, lr}
 8013ea2:	b088      	sub	sp, #32
 8013ea4:	af04      	add	r7, sp, #16
 8013ea6:	60f8      	str	r0, [r7, #12]
 8013ea8:	60b9      	str	r1, [r7, #8]
 8013eaa:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8013eac:	68bb      	ldr	r3, [r7, #8]
 8013eae:	681a      	ldr	r2, [r3, #0]
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	3308      	adds	r3, #8
 8013eb4:	681b      	ldr	r3, [r3, #0]
 8013eb6:	429a      	cmp	r2, r3
 8013eb8:	d02d      	beq.n	8013f16 <netif_do_set_netmask+0x76>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8013eba:	68bb      	ldr	r3, [r7, #8]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d002      	beq.n	8013ec6 <netif_do_set_netmask+0x26>
 8013ec0:	68bb      	ldr	r3, [r7, #8]
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	e000      	b.n	8013ec8 <netif_do_set_netmask+0x28>
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	68fa      	ldr	r2, [r7, #12]
 8013eca:	6093      	str	r3, [r2, #8]
    IP_SET_TYPE_VAL(netif->netmask, IPADDR_TYPE_V4);
    mib2_add_route_ip4(0, netif);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: netmask of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8013ed2:	4618      	mov	r0, r3
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8013eda:	461c      	mov	r4, r3
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	3308      	adds	r3, #8
 8013ee0:	781b      	ldrb	r3, [r3, #0]
 8013ee2:	461d      	mov	r5, r3
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	3308      	adds	r3, #8
 8013ee8:	3301      	adds	r3, #1
 8013eea:	781b      	ldrb	r3, [r3, #0]
 8013eec:	461a      	mov	r2, r3
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	3308      	adds	r3, #8
 8013ef2:	3302      	adds	r3, #2
 8013ef4:	781b      	ldrb	r3, [r3, #0]
 8013ef6:	4619      	mov	r1, r3
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	3308      	adds	r3, #8
 8013efc:	3303      	adds	r3, #3
 8013efe:	781b      	ldrb	r3, [r3, #0]
 8013f00:	9302      	str	r3, [sp, #8]
 8013f02:	9101      	str	r1, [sp, #4]
 8013f04:	9200      	str	r2, [sp, #0]
 8013f06:	462b      	mov	r3, r5
 8013f08:	4622      	mov	r2, r4
 8013f0a:	4601      	mov	r1, r0
 8013f0c:	4804      	ldr	r0, [pc, #16]	@ (8013f20 <netif_do_set_netmask+0x80>)
 8013f0e:	f00c fc43 	bl	8020798 <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8013f12:	2301      	movs	r3, #1
 8013f14:	e000      	b.n	8013f18 <netif_do_set_netmask+0x78>
  }
  return 0; /* netmask unchanged */
 8013f16:	2300      	movs	r3, #0
}
 8013f18:	4618      	mov	r0, r3
 8013f1a:	3710      	adds	r7, #16
 8013f1c:	46bd      	mov	sp, r7
 8013f1e:	bdb0      	pop	{r4, r5, r7, pc}
 8013f20:	08022cc4 	.word	0x08022cc4

08013f24 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8013f24:	b5b0      	push	{r4, r5, r7, lr}
 8013f26:	b088      	sub	sp, #32
 8013f28:	af04      	add	r7, sp, #16
 8013f2a:	60f8      	str	r0, [r7, #12]
 8013f2c:	60b9      	str	r1, [r7, #8]
 8013f2e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8013f30:	68bb      	ldr	r3, [r7, #8]
 8013f32:	681a      	ldr	r2, [r3, #0]
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	330c      	adds	r3, #12
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	429a      	cmp	r2, r3
 8013f3c:	d02d      	beq.n	8013f9a <netif_do_set_gw+0x76>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8013f3e:	68bb      	ldr	r3, [r7, #8]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d002      	beq.n	8013f4a <netif_do_set_gw+0x26>
 8013f44:	68bb      	ldr	r3, [r7, #8]
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	e000      	b.n	8013f4c <netif_do_set_gw+0x28>
 8013f4a:	2300      	movs	r3, #0
 8013f4c:	68fa      	ldr	r2, [r7, #12]
 8013f4e:	60d3      	str	r3, [r2, #12]
    IP_SET_TYPE_VAL(netif->gw, IPADDR_TYPE_V4);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: GW address of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8013f56:	4618      	mov	r0, r3
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8013f5e:	461c      	mov	r4, r3
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	330c      	adds	r3, #12
 8013f64:	781b      	ldrb	r3, [r3, #0]
 8013f66:	461d      	mov	r5, r3
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	330c      	adds	r3, #12
 8013f6c:	3301      	adds	r3, #1
 8013f6e:	781b      	ldrb	r3, [r3, #0]
 8013f70:	461a      	mov	r2, r3
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	330c      	adds	r3, #12
 8013f76:	3302      	adds	r3, #2
 8013f78:	781b      	ldrb	r3, [r3, #0]
 8013f7a:	4619      	mov	r1, r3
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	330c      	adds	r3, #12
 8013f80:	3303      	adds	r3, #3
 8013f82:	781b      	ldrb	r3, [r3, #0]
 8013f84:	9302      	str	r3, [sp, #8]
 8013f86:	9101      	str	r1, [sp, #4]
 8013f88:	9200      	str	r2, [sp, #0]
 8013f8a:	462b      	mov	r3, r5
 8013f8c:	4622      	mov	r2, r4
 8013f8e:	4601      	mov	r1, r0
 8013f90:	4804      	ldr	r0, [pc, #16]	@ (8013fa4 <netif_do_set_gw+0x80>)
 8013f92:	f00c fc01 	bl	8020798 <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8013f96:	2301      	movs	r3, #1
 8013f98:	e000      	b.n	8013f9c <netif_do_set_gw+0x78>
  }
  return 0; /* gateway unchanged */
 8013f9a:	2300      	movs	r3, #0
}
 8013f9c:	4618      	mov	r0, r3
 8013f9e:	3710      	adds	r7, #16
 8013fa0:	46bd      	mov	sp, r7
 8013fa2:	bdb0      	pop	{r4, r5, r7, pc}
 8013fa4:	08022d24 	.word	0x08022d24

08013fa8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8013fa8:	b580      	push	{r7, lr}
 8013faa:	b088      	sub	sp, #32
 8013fac:	af00      	add	r7, sp, #0
 8013fae:	60f8      	str	r0, [r7, #12]
 8013fb0:	60b9      	str	r1, [r7, #8]
 8013fb2:	607a      	str	r2, [r7, #4]
 8013fb4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8013fb6:	2300      	movs	r3, #0
 8013fb8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8013fba:	2300      	movs	r3, #0
 8013fbc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013fbe:	68bb      	ldr	r3, [r7, #8]
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d101      	bne.n	8013fc8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8013fc4:	4b1c      	ldr	r3, [pc, #112]	@ (8014038 <netif_set_addr+0x90>)
 8013fc6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d101      	bne.n	8013fd2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8013fce:	4b1a      	ldr	r3, [pc, #104]	@ (8014038 <netif_set_addr+0x90>)
 8013fd0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8013fd2:	683b      	ldr	r3, [r7, #0]
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d101      	bne.n	8013fdc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8013fd8:	4b17      	ldr	r3, [pc, #92]	@ (8014038 <netif_set_addr+0x90>)
 8013fda:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8013fdc:	68bb      	ldr	r3, [r7, #8]
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d003      	beq.n	8013fea <netif_set_addr+0x42>
 8013fe2:	68bb      	ldr	r3, [r7, #8]
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d101      	bne.n	8013fee <netif_set_addr+0x46>
 8013fea:	2301      	movs	r3, #1
 8013fec:	e000      	b.n	8013ff0 <netif_set_addr+0x48>
 8013fee:	2300      	movs	r3, #0
 8013ff0:	617b      	str	r3, [r7, #20]
  if (remove) {
 8013ff2:	697b      	ldr	r3, [r7, #20]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d006      	beq.n	8014006 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013ff8:	f107 0310 	add.w	r3, r7, #16
 8013ffc:	461a      	mov	r2, r3
 8013ffe:	68b9      	ldr	r1, [r7, #8]
 8014000:	68f8      	ldr	r0, [r7, #12]
 8014002:	f7ff feff 	bl	8013e04 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8014006:	69fa      	ldr	r2, [r7, #28]
 8014008:	6879      	ldr	r1, [r7, #4]
 801400a:	68f8      	ldr	r0, [r7, #12]
 801400c:	f7ff ff48 	bl	8013ea0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8014010:	69ba      	ldr	r2, [r7, #24]
 8014012:	6839      	ldr	r1, [r7, #0]
 8014014:	68f8      	ldr	r0, [r7, #12]
 8014016:	f7ff ff85 	bl	8013f24 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801401a:	697b      	ldr	r3, [r7, #20]
 801401c:	2b00      	cmp	r3, #0
 801401e:	d106      	bne.n	801402e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8014020:	f107 0310 	add.w	r3, r7, #16
 8014024:	461a      	mov	r2, r3
 8014026:	68b9      	ldr	r1, [r7, #8]
 8014028:	68f8      	ldr	r0, [r7, #12]
 801402a:	f7ff feeb 	bl	8013e04 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801402e:	bf00      	nop
 8014030:	3720      	adds	r7, #32
 8014032:	46bd      	mov	sp, r7
 8014034:	bd80      	pop	{r7, pc}
 8014036:	bf00      	nop
 8014038:	08026884 	.word	0x08026884

0801403c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 801403c:	b580      	push	{r7, lr}
 801403e:	b082      	sub	sp, #8
 8014040:	af00      	add	r7, sp, #0
 8014042:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8014044:	4a0d      	ldr	r2, [pc, #52]	@ (801407c <netif_set_default+0x40>)
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	2b00      	cmp	r3, #0
 801404e:	d004      	beq.n	801405a <netif_set_default+0x1e>
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8014056:	4619      	mov	r1, r3
 8014058:	e000      	b.n	801405c <netif_set_default+0x20>
 801405a:	2127      	movs	r1, #39	@ 0x27
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	2b00      	cmp	r3, #0
 8014060:	d003      	beq.n	801406a <netif_set_default+0x2e>
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8014068:	e000      	b.n	801406c <netif_set_default+0x30>
 801406a:	2327      	movs	r3, #39	@ 0x27
 801406c:	461a      	mov	r2, r3
 801406e:	4804      	ldr	r0, [pc, #16]	@ (8014080 <netif_set_default+0x44>)
 8014070:	f00c fb92 	bl	8020798 <iprintf>
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8014074:	bf00      	nop
 8014076:	3708      	adds	r7, #8
 8014078:	46bd      	mov	sp, r7
 801407a:	bd80      	pop	{r7, pc}
 801407c:	2002d364 	.word	0x2002d364
 8014080:	08022d98 	.word	0x08022d98

08014084 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8014084:	b580      	push	{r7, lr}
 8014086:	b082      	sub	sp, #8
 8014088:	af00      	add	r7, sp, #0
 801408a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	2b00      	cmp	r3, #0
 8014090:	d107      	bne.n	80140a2 <netif_set_up+0x1e>
 8014092:	4b0f      	ldr	r3, [pc, #60]	@ (80140d0 <netif_set_up+0x4c>)
 8014094:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8014098:	490e      	ldr	r1, [pc, #56]	@ (80140d4 <netif_set_up+0x50>)
 801409a:	480f      	ldr	r0, [pc, #60]	@ (80140d8 <netif_set_up+0x54>)
 801409c:	f00c fb7c 	bl	8020798 <iprintf>
 80140a0:	e013      	b.n	80140ca <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80140a8:	f003 0301 	and.w	r3, r3, #1
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d10c      	bne.n	80140ca <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80140b6:	f043 0301 	orr.w	r3, r3, #1
 80140ba:	b2da      	uxtb	r2, r3
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80140c2:	2103      	movs	r1, #3
 80140c4:	6878      	ldr	r0, [r7, #4]
 80140c6:	f000 f809 	bl	80140dc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80140ca:	3708      	adds	r7, #8
 80140cc:	46bd      	mov	sp, r7
 80140ce:	bd80      	pop	{r7, pc}
 80140d0:	08022b00 	.word	0x08022b00
 80140d4:	08022dc0 	.word	0x08022dc0
 80140d8:	08022b50 	.word	0x08022b50

080140dc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80140dc:	b580      	push	{r7, lr}
 80140de:	b082      	sub	sp, #8
 80140e0:	af00      	add	r7, sp, #0
 80140e2:	6078      	str	r0, [r7, #4]
 80140e4:	460b      	mov	r3, r1
 80140e6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d106      	bne.n	80140fc <netif_issue_reports+0x20>
 80140ee:	4b18      	ldr	r3, [pc, #96]	@ (8014150 <netif_issue_reports+0x74>)
 80140f0:	f240 326d 	movw	r2, #877	@ 0x36d
 80140f4:	4917      	ldr	r1, [pc, #92]	@ (8014154 <netif_issue_reports+0x78>)
 80140f6:	4818      	ldr	r0, [pc, #96]	@ (8014158 <netif_issue_reports+0x7c>)
 80140f8:	f00c fb4e 	bl	8020798 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014102:	f003 0304 	and.w	r3, r3, #4
 8014106:	2b00      	cmp	r3, #0
 8014108:	d01e      	beq.n	8014148 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014110:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8014114:	2b00      	cmp	r3, #0
 8014116:	d017      	beq.n	8014148 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8014118:	78fb      	ldrb	r3, [r7, #3]
 801411a:	f003 0301 	and.w	r3, r3, #1
 801411e:	2b00      	cmp	r3, #0
 8014120:	d013      	beq.n	801414a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	3304      	adds	r3, #4
 8014126:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8014128:	2b00      	cmp	r3, #0
 801412a:	d00e      	beq.n	801414a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014132:	f003 0308 	and.w	r3, r3, #8
 8014136:	2b00      	cmp	r3, #0
 8014138:	d007      	beq.n	801414a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	3304      	adds	r3, #4
 801413e:	4619      	mov	r1, r3
 8014140:	6878      	ldr	r0, [r7, #4]
 8014142:	f009 f8b5 	bl	801d2b0 <etharp_request>
 8014146:	e000      	b.n	801414a <netif_issue_reports+0x6e>
    return;
 8014148:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801414a:	3708      	adds	r7, #8
 801414c:	46bd      	mov	sp, r7
 801414e:	bd80      	pop	{r7, pc}
 8014150:	08022b00 	.word	0x08022b00
 8014154:	08022ddc 	.word	0x08022ddc
 8014158:	08022b50 	.word	0x08022b50

0801415c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 801415c:	b580      	push	{r7, lr}
 801415e:	b082      	sub	sp, #8
 8014160:	af00      	add	r7, sp, #0
 8014162:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	2b00      	cmp	r3, #0
 8014168:	d107      	bne.n	801417a <netif_set_down+0x1e>
 801416a:	4b12      	ldr	r3, [pc, #72]	@ (80141b4 <netif_set_down+0x58>)
 801416c:	f240 329b 	movw	r2, #923	@ 0x39b
 8014170:	4911      	ldr	r1, [pc, #68]	@ (80141b8 <netif_set_down+0x5c>)
 8014172:	4812      	ldr	r0, [pc, #72]	@ (80141bc <netif_set_down+0x60>)
 8014174:	f00c fb10 	bl	8020798 <iprintf>
 8014178:	e019      	b.n	80141ae <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014180:	f003 0301 	and.w	r3, r3, #1
 8014184:	2b00      	cmp	r3, #0
 8014186:	d012      	beq.n	80141ae <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801418e:	f023 0301 	bic.w	r3, r3, #1
 8014192:	b2da      	uxtb	r2, r3
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80141a0:	f003 0308 	and.w	r3, r3, #8
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d002      	beq.n	80141ae <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80141a8:	6878      	ldr	r0, [r7, #4]
 80141aa:	f008 fbff 	bl	801c9ac <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80141ae:	3708      	adds	r7, #8
 80141b0:	46bd      	mov	sp, r7
 80141b2:	bd80      	pop	{r7, pc}
 80141b4:	08022b00 	.word	0x08022b00
 80141b8:	08022e00 	.word	0x08022e00
 80141bc:	08022b50 	.word	0x08022b50

080141c0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80141c0:	b580      	push	{r7, lr}
 80141c2:	b082      	sub	sp, #8
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d107      	bne.n	80141de <netif_set_link_up+0x1e>
 80141ce:	4b13      	ldr	r3, [pc, #76]	@ (801421c <netif_set_link_up+0x5c>)
 80141d0:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80141d4:	4912      	ldr	r1, [pc, #72]	@ (8014220 <netif_set_link_up+0x60>)
 80141d6:	4813      	ldr	r0, [pc, #76]	@ (8014224 <netif_set_link_up+0x64>)
 80141d8:	f00c fade 	bl	8020798 <iprintf>
 80141dc:	e01b      	b.n	8014216 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80141e4:	f003 0304 	and.w	r3, r3, #4
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d114      	bne.n	8014216 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80141f2:	f043 0304 	orr.w	r3, r3, #4
 80141f6:	b2da      	uxtb	r2, r3
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80141fe:	2103      	movs	r1, #3
 8014200:	6878      	ldr	r0, [r7, #4]
 8014202:	f7ff ff6b 	bl	80140dc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	69db      	ldr	r3, [r3, #28]
 801420a:	2b00      	cmp	r3, #0
 801420c:	d003      	beq.n	8014216 <netif_set_link_up+0x56>
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	69db      	ldr	r3, [r3, #28]
 8014212:	6878      	ldr	r0, [r7, #4]
 8014214:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8014216:	3708      	adds	r7, #8
 8014218:	46bd      	mov	sp, r7
 801421a:	bd80      	pop	{r7, pc}
 801421c:	08022b00 	.word	0x08022b00
 8014220:	08022e20 	.word	0x08022e20
 8014224:	08022b50 	.word	0x08022b50

08014228 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8014228:	b580      	push	{r7, lr}
 801422a:	b082      	sub	sp, #8
 801422c:	af00      	add	r7, sp, #0
 801422e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	2b00      	cmp	r3, #0
 8014234:	d107      	bne.n	8014246 <netif_set_link_down+0x1e>
 8014236:	4b11      	ldr	r3, [pc, #68]	@ (801427c <netif_set_link_down+0x54>)
 8014238:	f240 4206 	movw	r2, #1030	@ 0x406
 801423c:	4910      	ldr	r1, [pc, #64]	@ (8014280 <netif_set_link_down+0x58>)
 801423e:	4811      	ldr	r0, [pc, #68]	@ (8014284 <netif_set_link_down+0x5c>)
 8014240:	f00c faaa 	bl	8020798 <iprintf>
 8014244:	e017      	b.n	8014276 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801424c:	f003 0304 	and.w	r3, r3, #4
 8014250:	2b00      	cmp	r3, #0
 8014252:	d010      	beq.n	8014276 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801425a:	f023 0304 	bic.w	r3, r3, #4
 801425e:	b2da      	uxtb	r2, r3
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	69db      	ldr	r3, [r3, #28]
 801426a:	2b00      	cmp	r3, #0
 801426c:	d003      	beq.n	8014276 <netif_set_link_down+0x4e>
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	69db      	ldr	r3, [r3, #28]
 8014272:	6878      	ldr	r0, [r7, #4]
 8014274:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8014276:	3708      	adds	r7, #8
 8014278:	46bd      	mov	sp, r7
 801427a:	bd80      	pop	{r7, pc}
 801427c:	08022b00 	.word	0x08022b00
 8014280:	08022e44 	.word	0x08022e44
 8014284:	08022b50 	.word	0x08022b50

08014288 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8014288:	b480      	push	{r7}
 801428a:	b083      	sub	sp, #12
 801428c:	af00      	add	r7, sp, #0
 801428e:	6078      	str	r0, [r7, #4]
 8014290:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	2b00      	cmp	r3, #0
 8014296:	d002      	beq.n	801429e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	683a      	ldr	r2, [r7, #0]
 801429c:	61da      	str	r2, [r3, #28]
  }
}
 801429e:	bf00      	nop
 80142a0:	370c      	adds	r7, #12
 80142a2:	46bd      	mov	sp, r7
 80142a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142a8:	4770      	bx	lr

080142aa <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80142aa:	b480      	push	{r7}
 80142ac:	b085      	sub	sp, #20
 80142ae:	af00      	add	r7, sp, #0
 80142b0:	60f8      	str	r0, [r7, #12]
 80142b2:	60b9      	str	r1, [r7, #8]
 80142b4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80142b6:	f06f 030b 	mvn.w	r3, #11
}
 80142ba:	4618      	mov	r0, r3
 80142bc:	3714      	adds	r7, #20
 80142be:	46bd      	mov	sp, r7
 80142c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142c4:	4770      	bx	lr
	...

080142c8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80142c8:	b480      	push	{r7}
 80142ca:	b085      	sub	sp, #20
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	4603      	mov	r3, r0
 80142d0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80142d2:	79fb      	ldrb	r3, [r7, #7]
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d013      	beq.n	8014300 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80142d8:	4b0d      	ldr	r3, [pc, #52]	@ (8014310 <netif_get_by_index+0x48>)
 80142da:	681b      	ldr	r3, [r3, #0]
 80142dc:	60fb      	str	r3, [r7, #12]
 80142de:	e00c      	b.n	80142fa <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80142e0:	68fb      	ldr	r3, [r7, #12]
 80142e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80142e6:	3301      	adds	r3, #1
 80142e8:	b2db      	uxtb	r3, r3
 80142ea:	79fa      	ldrb	r2, [r7, #7]
 80142ec:	429a      	cmp	r2, r3
 80142ee:	d101      	bne.n	80142f4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80142f0:	68fb      	ldr	r3, [r7, #12]
 80142f2:	e006      	b.n	8014302 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80142f4:	68fb      	ldr	r3, [r7, #12]
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	60fb      	str	r3, [r7, #12]
 80142fa:	68fb      	ldr	r3, [r7, #12]
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d1ef      	bne.n	80142e0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8014300:	2300      	movs	r3, #0
}
 8014302:	4618      	mov	r0, r3
 8014304:	3714      	adds	r7, #20
 8014306:	46bd      	mov	sp, r7
 8014308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801430c:	4770      	bx	lr
 801430e:	bf00      	nop
 8014310:	2002d360 	.word	0x2002d360

08014314 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8014314:	b580      	push	{r7, lr}
 8014316:	b082      	sub	sp, #8
 8014318:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801431a:	f00a ff9d 	bl	801f258 <sys_arch_protect>
 801431e:	6038      	str	r0, [r7, #0]
 8014320:	4b0e      	ldr	r3, [pc, #56]	@ (801435c <pbuf_free_ooseq+0x48>)
 8014322:	2200      	movs	r2, #0
 8014324:	701a      	strb	r2, [r3, #0]
 8014326:	6838      	ldr	r0, [r7, #0]
 8014328:	f00a ffa4 	bl	801f274 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801432c:	4b0c      	ldr	r3, [pc, #48]	@ (8014360 <pbuf_free_ooseq+0x4c>)
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	607b      	str	r3, [r7, #4]
 8014332:	e00d      	b.n	8014350 <pbuf_free_ooseq+0x3c>
    if (pcb->ooseq != NULL) {
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014338:	2b00      	cmp	r3, #0
 801433a:	d006      	beq.n	801434a <pbuf_free_ooseq+0x36>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
 801433c:	4809      	ldr	r0, [pc, #36]	@ (8014364 <pbuf_free_ooseq+0x50>)
 801433e:	f00c fa9b 	bl	8020878 <puts>
      tcp_free_ooseq(pcb);
 8014342:	6878      	ldr	r0, [r7, #4]
 8014344:	f002 fc40 	bl	8016bc8 <tcp_free_ooseq>
      return;
 8014348:	e005      	b.n	8014356 <pbuf_free_ooseq+0x42>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	68db      	ldr	r3, [r3, #12]
 801434e:	607b      	str	r3, [r7, #4]
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	2b00      	cmp	r3, #0
 8014354:	d1ee      	bne.n	8014334 <pbuf_free_ooseq+0x20>
    }
  }
}
 8014356:	3708      	adds	r7, #8
 8014358:	46bd      	mov	sp, r7
 801435a:	bd80      	pop	{r7, pc}
 801435c:	2002d369 	.word	0x2002d369
 8014360:	2002d478 	.word	0x2002d478
 8014364:	08022ea0 	.word	0x08022ea0

08014368 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8014368:	b580      	push	{r7, lr}
 801436a:	b082      	sub	sp, #8
 801436c:	af00      	add	r7, sp, #0
 801436e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8014370:	f7ff ffd0 	bl	8014314 <pbuf_free_ooseq>
}
 8014374:	bf00      	nop
 8014376:	3708      	adds	r7, #8
 8014378:	46bd      	mov	sp, r7
 801437a:	bd80      	pop	{r7, pc}

0801437c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 801437c:	b580      	push	{r7, lr}
 801437e:	b082      	sub	sp, #8
 8014380:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8014382:	f00a ff69 	bl	801f258 <sys_arch_protect>
 8014386:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8014388:	4b0f      	ldr	r3, [pc, #60]	@ (80143c8 <pbuf_pool_is_empty+0x4c>)
 801438a:	781b      	ldrb	r3, [r3, #0]
 801438c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801438e:	4b0e      	ldr	r3, [pc, #56]	@ (80143c8 <pbuf_pool_is_empty+0x4c>)
 8014390:	2201      	movs	r2, #1
 8014392:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8014394:	6878      	ldr	r0, [r7, #4]
 8014396:	f00a ff6d 	bl	801f274 <sys_arch_unprotect>

  if (!queued) {
 801439a:	78fb      	ldrb	r3, [r7, #3]
 801439c:	2b00      	cmp	r3, #0
 801439e:	d10f      	bne.n	80143c0 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80143a0:	2100      	movs	r1, #0
 80143a2:	480a      	ldr	r0, [pc, #40]	@ (80143cc <pbuf_pool_is_empty+0x50>)
 80143a4:	f7fe fc9c 	bl	8012ce0 <tcpip_try_callback>
 80143a8:	4603      	mov	r3, r0
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d008      	beq.n	80143c0 <pbuf_pool_is_empty+0x44>
 80143ae:	f00a ff53 	bl	801f258 <sys_arch_protect>
 80143b2:	6078      	str	r0, [r7, #4]
 80143b4:	4b04      	ldr	r3, [pc, #16]	@ (80143c8 <pbuf_pool_is_empty+0x4c>)
 80143b6:	2200      	movs	r2, #0
 80143b8:	701a      	strb	r2, [r3, #0]
 80143ba:	6878      	ldr	r0, [r7, #4]
 80143bc:	f00a ff5a 	bl	801f274 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80143c0:	bf00      	nop
 80143c2:	3708      	adds	r7, #8
 80143c4:	46bd      	mov	sp, r7
 80143c6:	bd80      	pop	{r7, pc}
 80143c8:	2002d369 	.word	0x2002d369
 80143cc:	08014369 	.word	0x08014369

080143d0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80143d0:	b480      	push	{r7}
 80143d2:	b085      	sub	sp, #20
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	60f8      	str	r0, [r7, #12]
 80143d8:	60b9      	str	r1, [r7, #8]
 80143da:	4611      	mov	r1, r2
 80143dc:	461a      	mov	r2, r3
 80143de:	460b      	mov	r3, r1
 80143e0:	80fb      	strh	r3, [r7, #6]
 80143e2:	4613      	mov	r3, r2
 80143e4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	2200      	movs	r2, #0
 80143ea:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	68ba      	ldr	r2, [r7, #8]
 80143f0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	88fa      	ldrh	r2, [r7, #6]
 80143f6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	88ba      	ldrh	r2, [r7, #4]
 80143fc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80143fe:	8b3b      	ldrh	r3, [r7, #24]
 8014400:	b2da      	uxtb	r2, r3
 8014402:	68fb      	ldr	r3, [r7, #12]
 8014404:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	7f3a      	ldrb	r2, [r7, #28]
 801440a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	2201      	movs	r2, #1
 8014410:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	2200      	movs	r2, #0
 8014416:	73da      	strb	r2, [r3, #15]
}
 8014418:	bf00      	nop
 801441a:	3714      	adds	r7, #20
 801441c:	46bd      	mov	sp, r7
 801441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014422:	4770      	bx	lr

08014424 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8014424:	b580      	push	{r7, lr}
 8014426:	b08c      	sub	sp, #48	@ 0x30
 8014428:	af02      	add	r7, sp, #8
 801442a:	4603      	mov	r3, r0
 801442c:	71fb      	strb	r3, [r7, #7]
 801442e:	460b      	mov	r3, r1
 8014430:	80bb      	strh	r3, [r7, #4]
 8014432:	4613      	mov	r3, r2
 8014434:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8014436:	79fb      	ldrb	r3, [r7, #7]
 8014438:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));
 801443a:	88bb      	ldrh	r3, [r7, #4]
 801443c:	4619      	mov	r1, r3
 801443e:	4874      	ldr	r0, [pc, #464]	@ (8014610 <pbuf_alloc+0x1ec>)
 8014440:	f00c f9aa 	bl	8020798 <iprintf>

  switch (type) {
 8014444:	887b      	ldrh	r3, [r7, #2]
 8014446:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 801444a:	d07f      	beq.n	801454c <pbuf_alloc+0x128>
 801444c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8014450:	f300 80c8 	bgt.w	80145e4 <pbuf_alloc+0x1c0>
 8014454:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8014458:	d010      	beq.n	801447c <pbuf_alloc+0x58>
 801445a:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 801445e:	f300 80c1 	bgt.w	80145e4 <pbuf_alloc+0x1c0>
 8014462:	2b01      	cmp	r3, #1
 8014464:	d002      	beq.n	801446c <pbuf_alloc+0x48>
 8014466:	2b41      	cmp	r3, #65	@ 0x41
 8014468:	f040 80bc 	bne.w	80145e4 <pbuf_alloc+0x1c0>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801446c:	887a      	ldrh	r2, [r7, #2]
 801446e:	88bb      	ldrh	r3, [r7, #4]
 8014470:	4619      	mov	r1, r3
 8014472:	2000      	movs	r0, #0
 8014474:	f000 f8dc 	bl	8014630 <pbuf_alloc_reference>
 8014478:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 801447a:	e0bd      	b.n	80145f8 <pbuf_alloc+0x1d4>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801447c:	2300      	movs	r3, #0
 801447e:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8014480:	2300      	movs	r3, #0
 8014482:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8014484:	88bb      	ldrh	r3, [r7, #4]
 8014486:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8014488:	200c      	movs	r0, #12
 801448a:	f7ff fa95 	bl	80139b8 <memp_malloc>
 801448e:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8014490:	693b      	ldr	r3, [r7, #16]
 8014492:	2b00      	cmp	r3, #0
 8014494:	d109      	bne.n	80144aa <pbuf_alloc+0x86>
          PBUF_POOL_IS_EMPTY();
 8014496:	f7ff ff71 	bl	801437c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801449a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801449c:	2b00      	cmp	r3, #0
 801449e:	d002      	beq.n	80144a6 <pbuf_alloc+0x82>
            pbuf_free(p);
 80144a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80144a2:	f000 faeb 	bl	8014a7c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80144a6:	2300      	movs	r3, #0
 80144a8:	e0ad      	b.n	8014606 <pbuf_alloc+0x1e2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80144aa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80144ac:	3303      	adds	r3, #3
 80144ae:	b29b      	uxth	r3, r3
 80144b0:	f023 0303 	bic.w	r3, r3, #3
 80144b4:	b29b      	uxth	r3, r3
 80144b6:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 80144ba:	b29b      	uxth	r3, r3
 80144bc:	8b7a      	ldrh	r2, [r7, #26]
 80144be:	4293      	cmp	r3, r2
 80144c0:	bf28      	it	cs
 80144c2:	4613      	movcs	r3, r2
 80144c4:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80144c6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80144c8:	3310      	adds	r3, #16
 80144ca:	693a      	ldr	r2, [r7, #16]
 80144cc:	4413      	add	r3, r2
 80144ce:	3303      	adds	r3, #3
 80144d0:	f023 0303 	bic.w	r3, r3, #3
 80144d4:	4618      	mov	r0, r3
 80144d6:	89f9      	ldrh	r1, [r7, #14]
 80144d8:	8b7a      	ldrh	r2, [r7, #26]
 80144da:	2300      	movs	r3, #0
 80144dc:	9301      	str	r3, [sp, #4]
 80144de:	887b      	ldrh	r3, [r7, #2]
 80144e0:	9300      	str	r3, [sp, #0]
 80144e2:	460b      	mov	r3, r1
 80144e4:	4601      	mov	r1, r0
 80144e6:	6938      	ldr	r0, [r7, #16]
 80144e8:	f7ff ff72 	bl	80143d0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80144ec:	693b      	ldr	r3, [r7, #16]
 80144ee:	685b      	ldr	r3, [r3, #4]
 80144f0:	f003 0303 	and.w	r3, r3, #3
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d006      	beq.n	8014506 <pbuf_alloc+0xe2>
 80144f8:	4b46      	ldr	r3, [pc, #280]	@ (8014614 <pbuf_alloc+0x1f0>)
 80144fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80144fe:	4946      	ldr	r1, [pc, #280]	@ (8014618 <pbuf_alloc+0x1f4>)
 8014500:	4846      	ldr	r0, [pc, #280]	@ (801461c <pbuf_alloc+0x1f8>)
 8014502:	f00c f949 	bl	8020798 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8014506:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014508:	3303      	adds	r3, #3
 801450a:	f023 0303 	bic.w	r3, r3, #3
 801450e:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8014512:	d106      	bne.n	8014522 <pbuf_alloc+0xfe>
 8014514:	4b3f      	ldr	r3, [pc, #252]	@ (8014614 <pbuf_alloc+0x1f0>)
 8014516:	f44f 7281 	mov.w	r2, #258	@ 0x102
 801451a:	4941      	ldr	r1, [pc, #260]	@ (8014620 <pbuf_alloc+0x1fc>)
 801451c:	483f      	ldr	r0, [pc, #252]	@ (801461c <pbuf_alloc+0x1f8>)
 801451e:	f00c f93b 	bl	8020798 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8014522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014524:	2b00      	cmp	r3, #0
 8014526:	d102      	bne.n	801452e <pbuf_alloc+0x10a>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8014528:	693b      	ldr	r3, [r7, #16]
 801452a:	627b      	str	r3, [r7, #36]	@ 0x24
 801452c:	e002      	b.n	8014534 <pbuf_alloc+0x110>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 801452e:	69fb      	ldr	r3, [r7, #28]
 8014530:	693a      	ldr	r2, [r7, #16]
 8014532:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8014534:	693b      	ldr	r3, [r7, #16]
 8014536:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8014538:	8b7a      	ldrh	r2, [r7, #26]
 801453a:	89fb      	ldrh	r3, [r7, #14]
 801453c:	1ad3      	subs	r3, r2, r3
 801453e:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8014540:	2300      	movs	r3, #0
 8014542:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8014544:	8b7b      	ldrh	r3, [r7, #26]
 8014546:	2b00      	cmp	r3, #0
 8014548:	d19e      	bne.n	8014488 <pbuf_alloc+0x64>
      break;
 801454a:	e055      	b.n	80145f8 <pbuf_alloc+0x1d4>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801454c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801454e:	3303      	adds	r3, #3
 8014550:	b29b      	uxth	r3, r3
 8014552:	f023 0303 	bic.w	r3, r3, #3
 8014556:	b29a      	uxth	r2, r3
 8014558:	88bb      	ldrh	r3, [r7, #4]
 801455a:	3303      	adds	r3, #3
 801455c:	b29b      	uxth	r3, r3
 801455e:	f023 0303 	bic.w	r3, r3, #3
 8014562:	b29b      	uxth	r3, r3
 8014564:	4413      	add	r3, r2
 8014566:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8014568:	8b3b      	ldrh	r3, [r7, #24]
 801456a:	3310      	adds	r3, #16
 801456c:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801456e:	8b3a      	ldrh	r2, [r7, #24]
 8014570:	88bb      	ldrh	r3, [r7, #4]
 8014572:	3303      	adds	r3, #3
 8014574:	f023 0303 	bic.w	r3, r3, #3
 8014578:	429a      	cmp	r2, r3
 801457a:	d306      	bcc.n	801458a <pbuf_alloc+0x166>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801457c:	8afa      	ldrh	r2, [r7, #22]
 801457e:	88bb      	ldrh	r3, [r7, #4]
 8014580:	3303      	adds	r3, #3
 8014582:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8014586:	429a      	cmp	r2, r3
 8014588:	d201      	bcs.n	801458e <pbuf_alloc+0x16a>
        return NULL;
 801458a:	2300      	movs	r3, #0
 801458c:	e03b      	b.n	8014606 <pbuf_alloc+0x1e2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 801458e:	8afb      	ldrh	r3, [r7, #22]
 8014590:	4618      	mov	r0, r3
 8014592:	f7fe ffed 	bl	8013570 <mem_malloc>
 8014596:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8014598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801459a:	2b00      	cmp	r3, #0
 801459c:	d101      	bne.n	80145a2 <pbuf_alloc+0x17e>
        return NULL;
 801459e:	2300      	movs	r3, #0
 80145a0:	e031      	b.n	8014606 <pbuf_alloc+0x1e2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80145a2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80145a4:	3310      	adds	r3, #16
 80145a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80145a8:	4413      	add	r3, r2
 80145aa:	3303      	adds	r3, #3
 80145ac:	f023 0303 	bic.w	r3, r3, #3
 80145b0:	4618      	mov	r0, r3
 80145b2:	88b9      	ldrh	r1, [r7, #4]
 80145b4:	88ba      	ldrh	r2, [r7, #4]
 80145b6:	2300      	movs	r3, #0
 80145b8:	9301      	str	r3, [sp, #4]
 80145ba:	887b      	ldrh	r3, [r7, #2]
 80145bc:	9300      	str	r3, [sp, #0]
 80145be:	460b      	mov	r3, r1
 80145c0:	4601      	mov	r1, r0
 80145c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80145c4:	f7ff ff04 	bl	80143d0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80145c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145ca:	685b      	ldr	r3, [r3, #4]
 80145cc:	f003 0303 	and.w	r3, r3, #3
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d010      	beq.n	80145f6 <pbuf_alloc+0x1d2>
 80145d4:	4b0f      	ldr	r3, [pc, #60]	@ (8014614 <pbuf_alloc+0x1f0>)
 80145d6:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80145da:	4912      	ldr	r1, [pc, #72]	@ (8014624 <pbuf_alloc+0x200>)
 80145dc:	480f      	ldr	r0, [pc, #60]	@ (801461c <pbuf_alloc+0x1f8>)
 80145de:	f00c f8db 	bl	8020798 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80145e2:	e008      	b.n	80145f6 <pbuf_alloc+0x1d2>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80145e4:	4b0b      	ldr	r3, [pc, #44]	@ (8014614 <pbuf_alloc+0x1f0>)
 80145e6:	f240 1227 	movw	r2, #295	@ 0x127
 80145ea:	490f      	ldr	r1, [pc, #60]	@ (8014628 <pbuf_alloc+0x204>)
 80145ec:	480b      	ldr	r0, [pc, #44]	@ (801461c <pbuf_alloc+0x1f8>)
 80145ee:	f00c f8d3 	bl	8020798 <iprintf>
      return NULL;
 80145f2:	2300      	movs	r3, #0
 80145f4:	e007      	b.n	8014606 <pbuf_alloc+0x1e2>
      break;
 80145f6:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
 80145f8:	88bb      	ldrh	r3, [r7, #4]
 80145fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80145fc:	4619      	mov	r1, r3
 80145fe:	480b      	ldr	r0, [pc, #44]	@ (801462c <pbuf_alloc+0x208>)
 8014600:	f00c f8ca 	bl	8020798 <iprintf>
  return p;
 8014604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8014606:	4618      	mov	r0, r3
 8014608:	3728      	adds	r7, #40	@ 0x28
 801460a:	46bd      	mov	sp, r7
 801460c:	bd80      	pop	{r7, pc}
 801460e:	bf00      	nop
 8014610:	08022ed0 	.word	0x08022ed0
 8014614:	08022ee8 	.word	0x08022ee8
 8014618:	08022f18 	.word	0x08022f18
 801461c:	08022f48 	.word	0x08022f48
 8014620:	08022f70 	.word	0x08022f70
 8014624:	08022fa4 	.word	0x08022fa4
 8014628:	08022fd0 	.word	0x08022fd0
 801462c:	08022fec 	.word	0x08022fec

08014630 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8014630:	b580      	push	{r7, lr}
 8014632:	b086      	sub	sp, #24
 8014634:	af02      	add	r7, sp, #8
 8014636:	6078      	str	r0, [r7, #4]
 8014638:	460b      	mov	r3, r1
 801463a:	807b      	strh	r3, [r7, #2]
 801463c:	4613      	mov	r3, r2
 801463e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8014640:	883b      	ldrh	r3, [r7, #0]
 8014642:	2b41      	cmp	r3, #65	@ 0x41
 8014644:	d009      	beq.n	801465a <pbuf_alloc_reference+0x2a>
 8014646:	883b      	ldrh	r3, [r7, #0]
 8014648:	2b01      	cmp	r3, #1
 801464a:	d006      	beq.n	801465a <pbuf_alloc_reference+0x2a>
 801464c:	4b14      	ldr	r3, [pc, #80]	@ (80146a0 <pbuf_alloc_reference+0x70>)
 801464e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8014652:	4914      	ldr	r1, [pc, #80]	@ (80146a4 <pbuf_alloc_reference+0x74>)
 8014654:	4814      	ldr	r0, [pc, #80]	@ (80146a8 <pbuf_alloc_reference+0x78>)
 8014656:	f00c f89f 	bl	8020798 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801465a:	200b      	movs	r0, #11
 801465c:	f7ff f9ac 	bl	80139b8 <memp_malloc>
 8014660:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8014662:	68fb      	ldr	r3, [r7, #12]
 8014664:	2b00      	cmp	r3, #0
 8014666:	d10b      	bne.n	8014680 <pbuf_alloc_reference+0x50>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 8014668:	883b      	ldrh	r3, [r7, #0]
 801466a:	2b01      	cmp	r3, #1
 801466c:	d101      	bne.n	8014672 <pbuf_alloc_reference+0x42>
 801466e:	4b0f      	ldr	r3, [pc, #60]	@ (80146ac <pbuf_alloc_reference+0x7c>)
 8014670:	e000      	b.n	8014674 <pbuf_alloc_reference+0x44>
 8014672:	4b0f      	ldr	r3, [pc, #60]	@ (80146b0 <pbuf_alloc_reference+0x80>)
 8014674:	4619      	mov	r1, r3
 8014676:	480f      	ldr	r0, [pc, #60]	@ (80146b4 <pbuf_alloc_reference+0x84>)
 8014678:	f00c f88e 	bl	8020798 <iprintf>
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 801467c:	2300      	movs	r3, #0
 801467e:	e00b      	b.n	8014698 <pbuf_alloc_reference+0x68>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8014680:	8879      	ldrh	r1, [r7, #2]
 8014682:	887a      	ldrh	r2, [r7, #2]
 8014684:	2300      	movs	r3, #0
 8014686:	9301      	str	r3, [sp, #4]
 8014688:	883b      	ldrh	r3, [r7, #0]
 801468a:	9300      	str	r3, [sp, #0]
 801468c:	460b      	mov	r3, r1
 801468e:	6879      	ldr	r1, [r7, #4]
 8014690:	68f8      	ldr	r0, [r7, #12]
 8014692:	f7ff fe9d 	bl	80143d0 <pbuf_init_alloced_pbuf>
  return p;
 8014696:	68fb      	ldr	r3, [r7, #12]
}
 8014698:	4618      	mov	r0, r3
 801469a:	3710      	adds	r7, #16
 801469c:	46bd      	mov	sp, r7
 801469e:	bd80      	pop	{r7, pc}
 80146a0:	08022ee8 	.word	0x08022ee8
 80146a4:	0802300c 	.word	0x0802300c
 80146a8:	08022f48 	.word	0x08022f48
 80146ac:	08023020 	.word	0x08023020
 80146b0:	08023024 	.word	0x08023024
 80146b4:	08023028 	.word	0x08023028

080146b8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80146b8:	b580      	push	{r7, lr}
 80146ba:	b088      	sub	sp, #32
 80146bc:	af02      	add	r7, sp, #8
 80146be:	607b      	str	r3, [r7, #4]
 80146c0:	4603      	mov	r3, r0
 80146c2:	73fb      	strb	r3, [r7, #15]
 80146c4:	460b      	mov	r3, r1
 80146c6:	81bb      	strh	r3, [r7, #12]
 80146c8:	4613      	mov	r3, r2
 80146ca:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80146cc:	7bfb      	ldrb	r3, [r7, #15]
 80146ce:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));
 80146d0:	89bb      	ldrh	r3, [r7, #12]
 80146d2:	4619      	mov	r1, r3
 80146d4:	4817      	ldr	r0, [pc, #92]	@ (8014734 <pbuf_alloced_custom+0x7c>)
 80146d6:	f00c f85f 	bl	8020798 <iprintf>

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80146da:	8a7b      	ldrh	r3, [r7, #18]
 80146dc:	3303      	adds	r3, #3
 80146de:	f023 0203 	bic.w	r2, r3, #3
 80146e2:	89bb      	ldrh	r3, [r7, #12]
 80146e4:	441a      	add	r2, r3
 80146e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80146e8:	429a      	cmp	r2, r3
 80146ea:	d906      	bls.n	80146fa <pbuf_alloced_custom+0x42>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
 80146ec:	89bb      	ldrh	r3, [r7, #12]
 80146ee:	4619      	mov	r1, r3
 80146f0:	4811      	ldr	r0, [pc, #68]	@ (8014738 <pbuf_alloced_custom+0x80>)
 80146f2:	f00c f851 	bl	8020798 <iprintf>
    return NULL;
 80146f6:	2300      	movs	r3, #0
 80146f8:	e018      	b.n	801472c <pbuf_alloced_custom+0x74>
  }

  if (payload_mem != NULL) {
 80146fa:	6a3b      	ldr	r3, [r7, #32]
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d007      	beq.n	8014710 <pbuf_alloced_custom+0x58>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8014700:	8a7b      	ldrh	r3, [r7, #18]
 8014702:	3303      	adds	r3, #3
 8014704:	f023 0303 	bic.w	r3, r3, #3
 8014708:	6a3a      	ldr	r2, [r7, #32]
 801470a:	4413      	add	r3, r2
 801470c:	617b      	str	r3, [r7, #20]
 801470e:	e001      	b.n	8014714 <pbuf_alloced_custom+0x5c>
  } else {
    payload = NULL;
 8014710:	2300      	movs	r3, #0
 8014712:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8014714:	6878      	ldr	r0, [r7, #4]
 8014716:	89b9      	ldrh	r1, [r7, #12]
 8014718:	89ba      	ldrh	r2, [r7, #12]
 801471a:	2302      	movs	r3, #2
 801471c:	9301      	str	r3, [sp, #4]
 801471e:	897b      	ldrh	r3, [r7, #10]
 8014720:	9300      	str	r3, [sp, #0]
 8014722:	460b      	mov	r3, r1
 8014724:	6979      	ldr	r1, [r7, #20]
 8014726:	f7ff fe53 	bl	80143d0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801472a:	687b      	ldr	r3, [r7, #4]
}
 801472c:	4618      	mov	r0, r3
 801472e:	3718      	adds	r7, #24
 8014730:	46bd      	mov	sp, r7
 8014732:	bd80      	pop	{r7, pc}
 8014734:	0802306c 	.word	0x0802306c
 8014738:	08023090 	.word	0x08023090

0801473c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801473c:	b580      	push	{r7, lr}
 801473e:	b084      	sub	sp, #16
 8014740:	af00      	add	r7, sp, #0
 8014742:	6078      	str	r0, [r7, #4]
 8014744:	460b      	mov	r3, r1
 8014746:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d106      	bne.n	801475c <pbuf_realloc+0x20>
 801474e:	4b3a      	ldr	r3, [pc, #232]	@ (8014838 <pbuf_realloc+0xfc>)
 8014750:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8014754:	4939      	ldr	r1, [pc, #228]	@ (801483c <pbuf_realloc+0x100>)
 8014756:	483a      	ldr	r0, [pc, #232]	@ (8014840 <pbuf_realloc+0x104>)
 8014758:	f00c f81e 	bl	8020798 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	891b      	ldrh	r3, [r3, #8]
 8014760:	887a      	ldrh	r2, [r7, #2]
 8014762:	429a      	cmp	r2, r3
 8014764:	d263      	bcs.n	801482e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	891a      	ldrh	r2, [r3, #8]
 801476a:	887b      	ldrh	r3, [r7, #2]
 801476c:	1ad3      	subs	r3, r2, r3
 801476e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8014770:	887b      	ldrh	r3, [r7, #2]
 8014772:	817b      	strh	r3, [r7, #10]
  q = p;
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8014778:	e018      	b.n	80147ac <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801477a:	68fb      	ldr	r3, [r7, #12]
 801477c:	895b      	ldrh	r3, [r3, #10]
 801477e:	897a      	ldrh	r2, [r7, #10]
 8014780:	1ad3      	subs	r3, r2, r3
 8014782:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8014784:	68fb      	ldr	r3, [r7, #12]
 8014786:	891a      	ldrh	r2, [r3, #8]
 8014788:	893b      	ldrh	r3, [r7, #8]
 801478a:	1ad3      	subs	r3, r2, r3
 801478c:	b29a      	uxth	r2, r3
 801478e:	68fb      	ldr	r3, [r7, #12]
 8014790:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8014798:	68fb      	ldr	r3, [r7, #12]
 801479a:	2b00      	cmp	r3, #0
 801479c:	d106      	bne.n	80147ac <pbuf_realloc+0x70>
 801479e:	4b26      	ldr	r3, [pc, #152]	@ (8014838 <pbuf_realloc+0xfc>)
 80147a0:	f240 12af 	movw	r2, #431	@ 0x1af
 80147a4:	4927      	ldr	r1, [pc, #156]	@ (8014844 <pbuf_realloc+0x108>)
 80147a6:	4826      	ldr	r0, [pc, #152]	@ (8014840 <pbuf_realloc+0x104>)
 80147a8:	f00b fff6 	bl	8020798 <iprintf>
  while (rem_len > q->len) {
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	895b      	ldrh	r3, [r3, #10]
 80147b0:	897a      	ldrh	r2, [r7, #10]
 80147b2:	429a      	cmp	r2, r3
 80147b4:	d8e1      	bhi.n	801477a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	7b1b      	ldrb	r3, [r3, #12]
 80147ba:	f003 030f 	and.w	r3, r3, #15
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d121      	bne.n	8014806 <pbuf_realloc+0xca>
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	895b      	ldrh	r3, [r3, #10]
 80147c6:	897a      	ldrh	r2, [r7, #10]
 80147c8:	429a      	cmp	r2, r3
 80147ca:	d01c      	beq.n	8014806 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	7b5b      	ldrb	r3, [r3, #13]
 80147d0:	f003 0302 	and.w	r3, r3, #2
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d116      	bne.n	8014806 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	685a      	ldr	r2, [r3, #4]
 80147dc:	68fb      	ldr	r3, [r7, #12]
 80147de:	1ad3      	subs	r3, r2, r3
 80147e0:	b29a      	uxth	r2, r3
 80147e2:	897b      	ldrh	r3, [r7, #10]
 80147e4:	4413      	add	r3, r2
 80147e6:	b29b      	uxth	r3, r3
 80147e8:	4619      	mov	r1, r3
 80147ea:	68f8      	ldr	r0, [r7, #12]
 80147ec:	f7fe fd8e 	bl	801330c <mem_trim>
 80147f0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80147f2:	68fb      	ldr	r3, [r7, #12]
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d106      	bne.n	8014806 <pbuf_realloc+0xca>
 80147f8:	4b0f      	ldr	r3, [pc, #60]	@ (8014838 <pbuf_realloc+0xfc>)
 80147fa:	f240 12bd 	movw	r2, #445	@ 0x1bd
 80147fe:	4912      	ldr	r1, [pc, #72]	@ (8014848 <pbuf_realloc+0x10c>)
 8014800:	480f      	ldr	r0, [pc, #60]	@ (8014840 <pbuf_realloc+0x104>)
 8014802:	f00b ffc9 	bl	8020798 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	897a      	ldrh	r2, [r7, #10]
 801480a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	895a      	ldrh	r2, [r3, #10]
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	2b00      	cmp	r3, #0
 801481a:	d004      	beq.n	8014826 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	4618      	mov	r0, r3
 8014822:	f000 f92b 	bl	8014a7c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8014826:	68fb      	ldr	r3, [r7, #12]
 8014828:	2200      	movs	r2, #0
 801482a:	601a      	str	r2, [r3, #0]
 801482c:	e000      	b.n	8014830 <pbuf_realloc+0xf4>
    return;
 801482e:	bf00      	nop

}
 8014830:	3710      	adds	r7, #16
 8014832:	46bd      	mov	sp, r7
 8014834:	bd80      	pop	{r7, pc}
 8014836:	bf00      	nop
 8014838:	08022ee8 	.word	0x08022ee8
 801483c:	080230c4 	.word	0x080230c4
 8014840:	08022f48 	.word	0x08022f48
 8014844:	080230dc 	.word	0x080230dc
 8014848:	080230f4 	.word	0x080230f4

0801484c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 801484c:	b580      	push	{r7, lr}
 801484e:	b086      	sub	sp, #24
 8014850:	af00      	add	r7, sp, #0
 8014852:	60f8      	str	r0, [r7, #12]
 8014854:	60b9      	str	r1, [r7, #8]
 8014856:	4613      	mov	r3, r2
 8014858:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	2b00      	cmp	r3, #0
 801485e:	d106      	bne.n	801486e <pbuf_add_header_impl+0x22>
 8014860:	4b32      	ldr	r3, [pc, #200]	@ (801492c <pbuf_add_header_impl+0xe0>)
 8014862:	f240 12df 	movw	r2, #479	@ 0x1df
 8014866:	4932      	ldr	r1, [pc, #200]	@ (8014930 <pbuf_add_header_impl+0xe4>)
 8014868:	4832      	ldr	r0, [pc, #200]	@ (8014934 <pbuf_add_header_impl+0xe8>)
 801486a:	f00b ff95 	bl	8020798 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	2b00      	cmp	r3, #0
 8014872:	d003      	beq.n	801487c <pbuf_add_header_impl+0x30>
 8014874:	68bb      	ldr	r3, [r7, #8]
 8014876:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801487a:	d301      	bcc.n	8014880 <pbuf_add_header_impl+0x34>
    return 1;
 801487c:	2301      	movs	r3, #1
 801487e:	e051      	b.n	8014924 <pbuf_add_header_impl+0xd8>
  }
  if (header_size_increment == 0) {
 8014880:	68bb      	ldr	r3, [r7, #8]
 8014882:	2b00      	cmp	r3, #0
 8014884:	d101      	bne.n	801488a <pbuf_add_header_impl+0x3e>
    return 0;
 8014886:	2300      	movs	r3, #0
 8014888:	e04c      	b.n	8014924 <pbuf_add_header_impl+0xd8>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801488a:	68bb      	ldr	r3, [r7, #8]
 801488c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801488e:	68fb      	ldr	r3, [r7, #12]
 8014890:	891a      	ldrh	r2, [r3, #8]
 8014892:	8a7b      	ldrh	r3, [r7, #18]
 8014894:	4413      	add	r3, r2
 8014896:	b29b      	uxth	r3, r3
 8014898:	8a7a      	ldrh	r2, [r7, #18]
 801489a:	429a      	cmp	r2, r3
 801489c:	d901      	bls.n	80148a2 <pbuf_add_header_impl+0x56>
    return 1;
 801489e:	2301      	movs	r3, #1
 80148a0:	e040      	b.n	8014924 <pbuf_add_header_impl+0xd8>
  }

  type_internal = p->type_internal;
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	7b1b      	ldrb	r3, [r3, #12]
 80148a6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80148a8:	8a3b      	ldrh	r3, [r7, #16]
 80148aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d013      	beq.n	80148da <pbuf_add_header_impl+0x8e>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	685a      	ldr	r2, [r3, #4]
 80148b6:	68bb      	ldr	r3, [r7, #8]
 80148b8:	425b      	negs	r3, r3
 80148ba:	4413      	add	r3, r2
 80148bc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	3310      	adds	r3, #16
 80148c2:	697a      	ldr	r2, [r7, #20]
 80148c4:	429a      	cmp	r2, r3
 80148c6:	d214      	bcs.n	80148f2 <pbuf_add_header_impl+0xa6>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	3310      	adds	r3, #16
 80148cc:	461a      	mov	r2, r3
 80148ce:	6979      	ldr	r1, [r7, #20]
 80148d0:	4819      	ldr	r0, [pc, #100]	@ (8014938 <pbuf_add_header_impl+0xec>)
 80148d2:	f00b ff61 	bl	8020798 <iprintf>
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80148d6:	2301      	movs	r3, #1
 80148d8:	e024      	b.n	8014924 <pbuf_add_header_impl+0xd8>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80148da:	79fb      	ldrb	r3, [r7, #7]
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d006      	beq.n	80148ee <pbuf_add_header_impl+0xa2>
      payload = (u8_t *)p->payload - header_size_increment;
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	685a      	ldr	r2, [r3, #4]
 80148e4:	68bb      	ldr	r3, [r7, #8]
 80148e6:	425b      	negs	r3, r3
 80148e8:	4413      	add	r3, r2
 80148ea:	617b      	str	r3, [r7, #20]
 80148ec:	e001      	b.n	80148f2 <pbuf_add_header_impl+0xa6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80148ee:	2301      	movs	r3, #1
 80148f0:	e018      	b.n	8014924 <pbuf_add_header_impl+0xd8>
    }
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	6859      	ldr	r1, [r3, #4]
 80148f6:	8a7b      	ldrh	r3, [r7, #18]
 80148f8:	697a      	ldr	r2, [r7, #20]
 80148fa:	4810      	ldr	r0, [pc, #64]	@ (801493c <pbuf_add_header_impl+0xf0>)
 80148fc:	f00b ff4c 	bl	8020798 <iprintf>
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	697a      	ldr	r2, [r7, #20]
 8014904:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	895a      	ldrh	r2, [r3, #10]
 801490a:	8a7b      	ldrh	r3, [r7, #18]
 801490c:	4413      	add	r3, r2
 801490e:	b29a      	uxth	r2, r3
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	891a      	ldrh	r2, [r3, #8]
 8014918:	8a7b      	ldrh	r3, [r7, #18]
 801491a:	4413      	add	r3, r2
 801491c:	b29a      	uxth	r2, r3
 801491e:	68fb      	ldr	r3, [r7, #12]
 8014920:	811a      	strh	r2, [r3, #8]


  return 0;
 8014922:	2300      	movs	r3, #0
}
 8014924:	4618      	mov	r0, r3
 8014926:	3718      	adds	r7, #24
 8014928:	46bd      	mov	sp, r7
 801492a:	bd80      	pop	{r7, pc}
 801492c:	08022ee8 	.word	0x08022ee8
 8014930:	08023110 	.word	0x08023110
 8014934:	08022f48 	.word	0x08022f48
 8014938:	0802311c 	.word	0x0802311c
 801493c:	08023168 	.word	0x08023168

08014940 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8014940:	b580      	push	{r7, lr}
 8014942:	b082      	sub	sp, #8
 8014944:	af00      	add	r7, sp, #0
 8014946:	6078      	str	r0, [r7, #4]
 8014948:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801494a:	2200      	movs	r2, #0
 801494c:	6839      	ldr	r1, [r7, #0]
 801494e:	6878      	ldr	r0, [r7, #4]
 8014950:	f7ff ff7c 	bl	801484c <pbuf_add_header_impl>
 8014954:	4603      	mov	r3, r0
}
 8014956:	4618      	mov	r0, r3
 8014958:	3708      	adds	r7, #8
 801495a:	46bd      	mov	sp, r7
 801495c:	bd80      	pop	{r7, pc}
	...

08014960 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8014960:	b580      	push	{r7, lr}
 8014962:	b084      	sub	sp, #16
 8014964:	af00      	add	r7, sp, #0
 8014966:	6078      	str	r0, [r7, #4]
 8014968:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	2b00      	cmp	r3, #0
 801496e:	d106      	bne.n	801497e <pbuf_remove_header+0x1e>
 8014970:	4b23      	ldr	r3, [pc, #140]	@ (8014a00 <pbuf_remove_header+0xa0>)
 8014972:	f240 224b 	movw	r2, #587	@ 0x24b
 8014976:	4923      	ldr	r1, [pc, #140]	@ (8014a04 <pbuf_remove_header+0xa4>)
 8014978:	4823      	ldr	r0, [pc, #140]	@ (8014a08 <pbuf_remove_header+0xa8>)
 801497a:	f00b ff0d 	bl	8020798 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	2b00      	cmp	r3, #0
 8014982:	d003      	beq.n	801498c <pbuf_remove_header+0x2c>
 8014984:	683b      	ldr	r3, [r7, #0]
 8014986:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801498a:	d301      	bcc.n	8014990 <pbuf_remove_header+0x30>
    return 1;
 801498c:	2301      	movs	r3, #1
 801498e:	e033      	b.n	80149f8 <pbuf_remove_header+0x98>
  }
  if (header_size_decrement == 0) {
 8014990:	683b      	ldr	r3, [r7, #0]
 8014992:	2b00      	cmp	r3, #0
 8014994:	d101      	bne.n	801499a <pbuf_remove_header+0x3a>
    return 0;
 8014996:	2300      	movs	r3, #0
 8014998:	e02e      	b.n	80149f8 <pbuf_remove_header+0x98>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801499a:	683b      	ldr	r3, [r7, #0]
 801499c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	895b      	ldrh	r3, [r3, #10]
 80149a2:	89fa      	ldrh	r2, [r7, #14]
 80149a4:	429a      	cmp	r2, r3
 80149a6:	d908      	bls.n	80149ba <pbuf_remove_header+0x5a>
 80149a8:	4b15      	ldr	r3, [pc, #84]	@ (8014a00 <pbuf_remove_header+0xa0>)
 80149aa:	f240 2255 	movw	r2, #597	@ 0x255
 80149ae:	4917      	ldr	r1, [pc, #92]	@ (8014a0c <pbuf_remove_header+0xac>)
 80149b0:	4815      	ldr	r0, [pc, #84]	@ (8014a08 <pbuf_remove_header+0xa8>)
 80149b2:	f00b fef1 	bl	8020798 <iprintf>
 80149b6:	2301      	movs	r3, #1
 80149b8:	e01e      	b.n	80149f8 <pbuf_remove_header+0x98>

  /* remember current payload pointer */
  payload = p->payload;
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	685b      	ldr	r3, [r3, #4]
 80149be:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	685a      	ldr	r2, [r3, #4]
 80149c4:	683b      	ldr	r3, [r7, #0]
 80149c6:	441a      	add	r2, r3
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	895a      	ldrh	r2, [r3, #10]
 80149d0:	89fb      	ldrh	r3, [r7, #14]
 80149d2:	1ad3      	subs	r3, r2, r3
 80149d4:	b29a      	uxth	r2, r3
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	891a      	ldrh	r2, [r3, #8]
 80149de:	89fb      	ldrh	r3, [r7, #14]
 80149e0:	1ad3      	subs	r3, r2, r3
 80149e2:	b29a      	uxth	r2, r3
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	685a      	ldr	r2, [r3, #4]
 80149ec:	89fb      	ldrh	r3, [r7, #14]
 80149ee:	68b9      	ldr	r1, [r7, #8]
 80149f0:	4807      	ldr	r0, [pc, #28]	@ (8014a10 <pbuf_remove_header+0xb0>)
 80149f2:	f00b fed1 	bl	8020798 <iprintf>
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80149f6:	2300      	movs	r3, #0
}
 80149f8:	4618      	mov	r0, r3
 80149fa:	3710      	adds	r7, #16
 80149fc:	46bd      	mov	sp, r7
 80149fe:	bd80      	pop	{r7, pc}
 8014a00:	08022ee8 	.word	0x08022ee8
 8014a04:	08023110 	.word	0x08023110
 8014a08:	08022f48 	.word	0x08022f48
 8014a0c:	08023190 	.word	0x08023190
 8014a10:	080231b0 	.word	0x080231b0

08014a14 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8014a14:	b580      	push	{r7, lr}
 8014a16:	b082      	sub	sp, #8
 8014a18:	af00      	add	r7, sp, #0
 8014a1a:	6078      	str	r0, [r7, #4]
 8014a1c:	460b      	mov	r3, r1
 8014a1e:	807b      	strh	r3, [r7, #2]
 8014a20:	4613      	mov	r3, r2
 8014a22:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8014a24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	da08      	bge.n	8014a3e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8014a2c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014a30:	425b      	negs	r3, r3
 8014a32:	4619      	mov	r1, r3
 8014a34:	6878      	ldr	r0, [r7, #4]
 8014a36:	f7ff ff93 	bl	8014960 <pbuf_remove_header>
 8014a3a:	4603      	mov	r3, r0
 8014a3c:	e007      	b.n	8014a4e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8014a3e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014a42:	787a      	ldrb	r2, [r7, #1]
 8014a44:	4619      	mov	r1, r3
 8014a46:	6878      	ldr	r0, [r7, #4]
 8014a48:	f7ff ff00 	bl	801484c <pbuf_add_header_impl>
 8014a4c:	4603      	mov	r3, r0
  }
}
 8014a4e:	4618      	mov	r0, r3
 8014a50:	3708      	adds	r7, #8
 8014a52:	46bd      	mov	sp, r7
 8014a54:	bd80      	pop	{r7, pc}

08014a56 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8014a56:	b580      	push	{r7, lr}
 8014a58:	b082      	sub	sp, #8
 8014a5a:	af00      	add	r7, sp, #0
 8014a5c:	6078      	str	r0, [r7, #4]
 8014a5e:	460b      	mov	r3, r1
 8014a60:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8014a62:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014a66:	2201      	movs	r2, #1
 8014a68:	4619      	mov	r1, r3
 8014a6a:	6878      	ldr	r0, [r7, #4]
 8014a6c:	f7ff ffd2 	bl	8014a14 <pbuf_header_impl>
 8014a70:	4603      	mov	r3, r0
}
 8014a72:	4618      	mov	r0, r3
 8014a74:	3708      	adds	r7, #8
 8014a76:	46bd      	mov	sp, r7
 8014a78:	bd80      	pop	{r7, pc}
	...

08014a7c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8014a7c:	b580      	push	{r7, lr}
 8014a7e:	b088      	sub	sp, #32
 8014a80:	af00      	add	r7, sp, #0
 8014a82:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d10e      	bne.n	8014aa8 <pbuf_free+0x2c>
    LWIP_ASSERT("p != NULL", p != NULL);
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d106      	bne.n	8014a9e <pbuf_free+0x22>
 8014a90:	4b43      	ldr	r3, [pc, #268]	@ (8014ba0 <pbuf_free+0x124>)
 8014a92:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8014a96:	4943      	ldr	r1, [pc, #268]	@ (8014ba4 <pbuf_free+0x128>)
 8014a98:	4843      	ldr	r0, [pc, #268]	@ (8014ba8 <pbuf_free+0x12c>)
 8014a9a:	f00b fe7d 	bl	8020798 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 8014a9e:	4843      	ldr	r0, [pc, #268]	@ (8014bac <pbuf_free+0x130>)
 8014aa0:	f00b feea 	bl	8020878 <puts>
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8014aa4:	2300      	movs	r3, #0
 8014aa6:	e077      	b.n	8014b98 <pbuf_free+0x11c>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));
 8014aa8:	6879      	ldr	r1, [r7, #4]
 8014aaa:	4841      	ldr	r0, [pc, #260]	@ (8014bb0 <pbuf_free+0x134>)
 8014aac:	f00b fe74 	bl	8020798 <iprintf>

  PERF_START;

  count = 0;
 8014ab0:	2300      	movs	r3, #0
 8014ab2:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8014ab4:	e06c      	b.n	8014b90 <pbuf_free+0x114>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8014ab6:	f00a fbcf 	bl	801f258 <sys_arch_protect>
 8014aba:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	7b9b      	ldrb	r3, [r3, #14]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d106      	bne.n	8014ad2 <pbuf_free+0x56>
 8014ac4:	4b36      	ldr	r3, [pc, #216]	@ (8014ba0 <pbuf_free+0x124>)
 8014ac6:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8014aca:	493a      	ldr	r1, [pc, #232]	@ (8014bb4 <pbuf_free+0x138>)
 8014acc:	4836      	ldr	r0, [pc, #216]	@ (8014ba8 <pbuf_free+0x12c>)
 8014ace:	f00b fe63 	bl	8020798 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	7b9b      	ldrb	r3, [r3, #14]
 8014ad6:	3b01      	subs	r3, #1
 8014ad8:	b2da      	uxtb	r2, r3
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	739a      	strb	r2, [r3, #14]
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	7b9b      	ldrb	r3, [r3, #14]
 8014ae2:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8014ae4:	69b8      	ldr	r0, [r7, #24]
 8014ae6:	f00a fbc5 	bl	801f274 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8014aea:	7dfb      	ldrb	r3, [r7, #23]
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d147      	bne.n	8014b80 <pbuf_free+0x104>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
 8014af6:	6879      	ldr	r1, [r7, #4]
 8014af8:	482f      	ldr	r0, [pc, #188]	@ (8014bb8 <pbuf_free+0x13c>)
 8014afa:	f00b fe4d 	bl	8020798 <iprintf>
      alloc_src = pbuf_get_allocsrc(p);
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	7b1b      	ldrb	r3, [r3, #12]
 8014b02:	f003 030f 	and.w	r3, r3, #15
 8014b06:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	7b5b      	ldrb	r3, [r3, #13]
 8014b0c:	f003 0302 	and.w	r3, r3, #2
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d011      	beq.n	8014b38 <pbuf_free+0xbc>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8014b18:	68bb      	ldr	r3, [r7, #8]
 8014b1a:	691b      	ldr	r3, [r3, #16]
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d106      	bne.n	8014b2e <pbuf_free+0xb2>
 8014b20:	4b1f      	ldr	r3, [pc, #124]	@ (8014ba0 <pbuf_free+0x124>)
 8014b22:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8014b26:	4925      	ldr	r1, [pc, #148]	@ (8014bbc <pbuf_free+0x140>)
 8014b28:	481f      	ldr	r0, [pc, #124]	@ (8014ba8 <pbuf_free+0x12c>)
 8014b2a:	f00b fe35 	bl	8020798 <iprintf>
        pc->custom_free_function(p);
 8014b2e:	68bb      	ldr	r3, [r7, #8]
 8014b30:	691b      	ldr	r3, [r3, #16]
 8014b32:	6878      	ldr	r0, [r7, #4]
 8014b34:	4798      	blx	r3
 8014b36:	e01d      	b.n	8014b74 <pbuf_free+0xf8>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8014b38:	7bfb      	ldrb	r3, [r7, #15]
 8014b3a:	2b02      	cmp	r3, #2
 8014b3c:	d104      	bne.n	8014b48 <pbuf_free+0xcc>
          memp_free(MEMP_PBUF_POOL, p);
 8014b3e:	6879      	ldr	r1, [r7, #4]
 8014b40:	200c      	movs	r0, #12
 8014b42:	f7fe ffb5 	bl	8013ab0 <memp_free>
 8014b46:	e015      	b.n	8014b74 <pbuf_free+0xf8>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8014b48:	7bfb      	ldrb	r3, [r7, #15]
 8014b4a:	2b01      	cmp	r3, #1
 8014b4c:	d104      	bne.n	8014b58 <pbuf_free+0xdc>
          memp_free(MEMP_PBUF, p);
 8014b4e:	6879      	ldr	r1, [r7, #4]
 8014b50:	200b      	movs	r0, #11
 8014b52:	f7fe ffad 	bl	8013ab0 <memp_free>
 8014b56:	e00d      	b.n	8014b74 <pbuf_free+0xf8>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8014b58:	7bfb      	ldrb	r3, [r7, #15]
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d103      	bne.n	8014b66 <pbuf_free+0xea>
          mem_free(p);
 8014b5e:	6878      	ldr	r0, [r7, #4]
 8014b60:	f7fe fafc 	bl	801315c <mem_free>
 8014b64:	e006      	b.n	8014b74 <pbuf_free+0xf8>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8014b66:	4b0e      	ldr	r3, [pc, #56]	@ (8014ba0 <pbuf_free+0x124>)
 8014b68:	f240 320f 	movw	r2, #783	@ 0x30f
 8014b6c:	4914      	ldr	r1, [pc, #80]	@ (8014bc0 <pbuf_free+0x144>)
 8014b6e:	480e      	ldr	r0, [pc, #56]	@ (8014ba8 <pbuf_free+0x12c>)
 8014b70:	f00b fe12 	bl	8020798 <iprintf>
        }
      }
      count++;
 8014b74:	7ffb      	ldrb	r3, [r7, #31]
 8014b76:	3301      	adds	r3, #1
 8014b78:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8014b7a:	693b      	ldr	r3, [r7, #16]
 8014b7c:	607b      	str	r3, [r7, #4]
 8014b7e:	e007      	b.n	8014b90 <pbuf_free+0x114>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
 8014b80:	7dfb      	ldrb	r3, [r7, #23]
 8014b82:	461a      	mov	r2, r3
 8014b84:	6879      	ldr	r1, [r7, #4]
 8014b86:	480f      	ldr	r0, [pc, #60]	@ (8014bc4 <pbuf_free+0x148>)
 8014b88:	f00b fe06 	bl	8020798 <iprintf>
      /* stop walking through the chain */
      p = NULL;
 8014b8c:	2300      	movs	r3, #0
 8014b8e:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d18f      	bne.n	8014ab6 <pbuf_free+0x3a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8014b96:	7ffb      	ldrb	r3, [r7, #31]
}
 8014b98:	4618      	mov	r0, r3
 8014b9a:	3720      	adds	r7, #32
 8014b9c:	46bd      	mov	sp, r7
 8014b9e:	bd80      	pop	{r7, pc}
 8014ba0:	08022ee8 	.word	0x08022ee8
 8014ba4:	08023110 	.word	0x08023110
 8014ba8:	08022f48 	.word	0x08022f48
 8014bac:	080231dc 	.word	0x080231dc
 8014bb0:	08023200 	.word	0x08023200
 8014bb4:	08023210 	.word	0x08023210
 8014bb8:	08023228 	.word	0x08023228
 8014bbc:	08023244 	.word	0x08023244
 8014bc0:	08023268 	.word	0x08023268
 8014bc4:	0802327c 	.word	0x0802327c

08014bc8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8014bc8:	b480      	push	{r7}
 8014bca:	b085      	sub	sp, #20
 8014bcc:	af00      	add	r7, sp, #0
 8014bce:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8014bd0:	2300      	movs	r3, #0
 8014bd2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8014bd4:	e005      	b.n	8014be2 <pbuf_clen+0x1a>
    ++len;
 8014bd6:	89fb      	ldrh	r3, [r7, #14]
 8014bd8:	3301      	adds	r3, #1
 8014bda:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d1f6      	bne.n	8014bd6 <pbuf_clen+0xe>
  }
  return len;
 8014be8:	89fb      	ldrh	r3, [r7, #14]
}
 8014bea:	4618      	mov	r0, r3
 8014bec:	3714      	adds	r7, #20
 8014bee:	46bd      	mov	sp, r7
 8014bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bf4:	4770      	bx	lr
	...

08014bf8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8014bf8:	b580      	push	{r7, lr}
 8014bfa:	b084      	sub	sp, #16
 8014bfc:	af00      	add	r7, sp, #0
 8014bfe:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d016      	beq.n	8014c34 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8014c06:	f00a fb27 	bl	801f258 <sys_arch_protect>
 8014c0a:	60f8      	str	r0, [r7, #12]
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	7b9b      	ldrb	r3, [r3, #14]
 8014c10:	3301      	adds	r3, #1
 8014c12:	b2da      	uxtb	r2, r3
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	739a      	strb	r2, [r3, #14]
 8014c18:	68f8      	ldr	r0, [r7, #12]
 8014c1a:	f00a fb2b 	bl	801f274 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	7b9b      	ldrb	r3, [r3, #14]
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d106      	bne.n	8014c34 <pbuf_ref+0x3c>
 8014c26:	4b05      	ldr	r3, [pc, #20]	@ (8014c3c <pbuf_ref+0x44>)
 8014c28:	f240 3242 	movw	r2, #834	@ 0x342
 8014c2c:	4904      	ldr	r1, [pc, #16]	@ (8014c40 <pbuf_ref+0x48>)
 8014c2e:	4805      	ldr	r0, [pc, #20]	@ (8014c44 <pbuf_ref+0x4c>)
 8014c30:	f00b fdb2 	bl	8020798 <iprintf>
  }
}
 8014c34:	bf00      	nop
 8014c36:	3710      	adds	r7, #16
 8014c38:	46bd      	mov	sp, r7
 8014c3a:	bd80      	pop	{r7, pc}
 8014c3c:	08022ee8 	.word	0x08022ee8
 8014c40:	080232a8 	.word	0x080232a8
 8014c44:	08022f48 	.word	0x08022f48

08014c48 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8014c48:	b580      	push	{r7, lr}
 8014c4a:	b084      	sub	sp, #16
 8014c4c:	af00      	add	r7, sp, #0
 8014c4e:	6078      	str	r0, [r7, #4]
 8014c50:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d002      	beq.n	8014c5e <pbuf_cat+0x16>
 8014c58:	683b      	ldr	r3, [r7, #0]
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d107      	bne.n	8014c6e <pbuf_cat+0x26>
 8014c5e:	4b20      	ldr	r3, [pc, #128]	@ (8014ce0 <pbuf_cat+0x98>)
 8014c60:	f240 3259 	movw	r2, #857	@ 0x359
 8014c64:	491f      	ldr	r1, [pc, #124]	@ (8014ce4 <pbuf_cat+0x9c>)
 8014c66:	4820      	ldr	r0, [pc, #128]	@ (8014ce8 <pbuf_cat+0xa0>)
 8014c68:	f00b fd96 	bl	8020798 <iprintf>
 8014c6c:	e034      	b.n	8014cd8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	60fb      	str	r3, [r7, #12]
 8014c72:	e00a      	b.n	8014c8a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	891a      	ldrh	r2, [r3, #8]
 8014c78:	683b      	ldr	r3, [r7, #0]
 8014c7a:	891b      	ldrh	r3, [r3, #8]
 8014c7c:	4413      	add	r3, r2
 8014c7e:	b29a      	uxth	r2, r3
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8014c84:	68fb      	ldr	r3, [r7, #12]
 8014c86:	681b      	ldr	r3, [r3, #0]
 8014c88:	60fb      	str	r3, [r7, #12]
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d1f0      	bne.n	8014c74 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	891a      	ldrh	r2, [r3, #8]
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	895b      	ldrh	r3, [r3, #10]
 8014c9a:	429a      	cmp	r2, r3
 8014c9c:	d006      	beq.n	8014cac <pbuf_cat+0x64>
 8014c9e:	4b10      	ldr	r3, [pc, #64]	@ (8014ce0 <pbuf_cat+0x98>)
 8014ca0:	f240 3262 	movw	r2, #866	@ 0x362
 8014ca4:	4911      	ldr	r1, [pc, #68]	@ (8014cec <pbuf_cat+0xa4>)
 8014ca6:	4810      	ldr	r0, [pc, #64]	@ (8014ce8 <pbuf_cat+0xa0>)
 8014ca8:	f00b fd76 	bl	8020798 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d006      	beq.n	8014cc2 <pbuf_cat+0x7a>
 8014cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8014ce0 <pbuf_cat+0x98>)
 8014cb6:	f240 3263 	movw	r2, #867	@ 0x363
 8014cba:	490d      	ldr	r1, [pc, #52]	@ (8014cf0 <pbuf_cat+0xa8>)
 8014cbc:	480a      	ldr	r0, [pc, #40]	@ (8014ce8 <pbuf_cat+0xa0>)
 8014cbe:	f00b fd6b 	bl	8020798 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	891a      	ldrh	r2, [r3, #8]
 8014cc6:	683b      	ldr	r3, [r7, #0]
 8014cc8:	891b      	ldrh	r3, [r3, #8]
 8014cca:	4413      	add	r3, r2
 8014ccc:	b29a      	uxth	r2, r3
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	683a      	ldr	r2, [r7, #0]
 8014cd6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8014cd8:	3710      	adds	r7, #16
 8014cda:	46bd      	mov	sp, r7
 8014cdc:	bd80      	pop	{r7, pc}
 8014cde:	bf00      	nop
 8014ce0:	08022ee8 	.word	0x08022ee8
 8014ce4:	080232bc 	.word	0x080232bc
 8014ce8:	08022f48 	.word	0x08022f48
 8014cec:	080232f4 	.word	0x080232f4
 8014cf0:	08023324 	.word	0x08023324

08014cf4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8014cf4:	b580      	push	{r7, lr}
 8014cf6:	b082      	sub	sp, #8
 8014cf8:	af00      	add	r7, sp, #0
 8014cfa:	6078      	str	r0, [r7, #4]
 8014cfc:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8014cfe:	6839      	ldr	r1, [r7, #0]
 8014d00:	6878      	ldr	r0, [r7, #4]
 8014d02:	f7ff ffa1 	bl	8014c48 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8014d06:	6838      	ldr	r0, [r7, #0]
 8014d08:	f7ff ff76 	bl	8014bf8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
 8014d0c:	683a      	ldr	r2, [r7, #0]
 8014d0e:	6879      	ldr	r1, [r7, #4]
 8014d10:	4803      	ldr	r0, [pc, #12]	@ (8014d20 <pbuf_chain+0x2c>)
 8014d12:	f00b fd41 	bl	8020798 <iprintf>
}
 8014d16:	bf00      	nop
 8014d18:	3708      	adds	r7, #8
 8014d1a:	46bd      	mov	sp, r7
 8014d1c:	bd80      	pop	{r7, pc}
 8014d1e:	bf00      	nop
 8014d20:	08023334 	.word	0x08023334

08014d24 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8014d24:	b580      	push	{r7, lr}
 8014d26:	b086      	sub	sp, #24
 8014d28:	af00      	add	r7, sp, #0
 8014d2a:	6078      	str	r0, [r7, #4]
 8014d2c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8014d2e:	2300      	movs	r3, #0
 8014d30:	617b      	str	r3, [r7, #20]
 8014d32:	2300      	movs	r3, #0
 8014d34:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
 8014d36:	683a      	ldr	r2, [r7, #0]
 8014d38:	6879      	ldr	r1, [r7, #4]
 8014d3a:	4860      	ldr	r0, [pc, #384]	@ (8014ebc <pbuf_copy+0x198>)
 8014d3c:	f00b fd2c 	bl	8020798 <iprintf>
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d008      	beq.n	8014d58 <pbuf_copy+0x34>
 8014d46:	683b      	ldr	r3, [r7, #0]
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d005      	beq.n	8014d58 <pbuf_copy+0x34>
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	891a      	ldrh	r2, [r3, #8]
 8014d50:	683b      	ldr	r3, [r7, #0]
 8014d52:	891b      	ldrh	r3, [r3, #8]
 8014d54:	429a      	cmp	r2, r3
 8014d56:	d209      	bcs.n	8014d6c <pbuf_copy+0x48>
 8014d58:	4b59      	ldr	r3, [pc, #356]	@ (8014ec0 <pbuf_copy+0x19c>)
 8014d5a:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8014d5e:	4959      	ldr	r1, [pc, #356]	@ (8014ec4 <pbuf_copy+0x1a0>)
 8014d60:	4859      	ldr	r0, [pc, #356]	@ (8014ec8 <pbuf_copy+0x1a4>)
 8014d62:	f00b fd19 	bl	8020798 <iprintf>
 8014d66:	f06f 030f 	mvn.w	r3, #15
 8014d6a:	e0a2      	b.n	8014eb2 <pbuf_copy+0x18e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	895b      	ldrh	r3, [r3, #10]
 8014d70:	461a      	mov	r2, r3
 8014d72:	697b      	ldr	r3, [r7, #20]
 8014d74:	1ad2      	subs	r2, r2, r3
 8014d76:	683b      	ldr	r3, [r7, #0]
 8014d78:	895b      	ldrh	r3, [r3, #10]
 8014d7a:	4619      	mov	r1, r3
 8014d7c:	693b      	ldr	r3, [r7, #16]
 8014d7e:	1acb      	subs	r3, r1, r3
 8014d80:	429a      	cmp	r2, r3
 8014d82:	d306      	bcc.n	8014d92 <pbuf_copy+0x6e>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8014d84:	683b      	ldr	r3, [r7, #0]
 8014d86:	895b      	ldrh	r3, [r3, #10]
 8014d88:	461a      	mov	r2, r3
 8014d8a:	693b      	ldr	r3, [r7, #16]
 8014d8c:	1ad3      	subs	r3, r2, r3
 8014d8e:	60fb      	str	r3, [r7, #12]
 8014d90:	e005      	b.n	8014d9e <pbuf_copy+0x7a>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	895b      	ldrh	r3, [r3, #10]
 8014d96:	461a      	mov	r2, r3
 8014d98:	697b      	ldr	r3, [r7, #20]
 8014d9a:	1ad3      	subs	r3, r2, r3
 8014d9c:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	685a      	ldr	r2, [r3, #4]
 8014da2:	697b      	ldr	r3, [r7, #20]
 8014da4:	18d0      	adds	r0, r2, r3
 8014da6:	683b      	ldr	r3, [r7, #0]
 8014da8:	685a      	ldr	r2, [r3, #4]
 8014daa:	693b      	ldr	r3, [r7, #16]
 8014dac:	4413      	add	r3, r2
 8014dae:	68fa      	ldr	r2, [r7, #12]
 8014db0:	4619      	mov	r1, r3
 8014db2:	f00b ff24 	bl	8020bfe <memcpy>
    offset_to += len;
 8014db6:	697a      	ldr	r2, [r7, #20]
 8014db8:	68fb      	ldr	r3, [r7, #12]
 8014dba:	4413      	add	r3, r2
 8014dbc:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8014dbe:	693a      	ldr	r2, [r7, #16]
 8014dc0:	68fb      	ldr	r3, [r7, #12]
 8014dc2:	4413      	add	r3, r2
 8014dc4:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	895b      	ldrh	r3, [r3, #10]
 8014dca:	461a      	mov	r2, r3
 8014dcc:	697b      	ldr	r3, [r7, #20]
 8014dce:	4293      	cmp	r3, r2
 8014dd0:	d906      	bls.n	8014de0 <pbuf_copy+0xbc>
 8014dd2:	4b3b      	ldr	r3, [pc, #236]	@ (8014ec0 <pbuf_copy+0x19c>)
 8014dd4:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8014dd8:	493c      	ldr	r1, [pc, #240]	@ (8014ecc <pbuf_copy+0x1a8>)
 8014dda:	483b      	ldr	r0, [pc, #236]	@ (8014ec8 <pbuf_copy+0x1a4>)
 8014ddc:	f00b fcdc 	bl	8020798 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8014de0:	683b      	ldr	r3, [r7, #0]
 8014de2:	895b      	ldrh	r3, [r3, #10]
 8014de4:	461a      	mov	r2, r3
 8014de6:	693b      	ldr	r3, [r7, #16]
 8014de8:	4293      	cmp	r3, r2
 8014dea:	d906      	bls.n	8014dfa <pbuf_copy+0xd6>
 8014dec:	4b34      	ldr	r3, [pc, #208]	@ (8014ec0 <pbuf_copy+0x19c>)
 8014dee:	f240 32da 	movw	r2, #986	@ 0x3da
 8014df2:	4937      	ldr	r1, [pc, #220]	@ (8014ed0 <pbuf_copy+0x1ac>)
 8014df4:	4834      	ldr	r0, [pc, #208]	@ (8014ec8 <pbuf_copy+0x1a4>)
 8014df6:	f00b fccf 	bl	8020798 <iprintf>
    if (offset_from >= p_from->len) {
 8014dfa:	683b      	ldr	r3, [r7, #0]
 8014dfc:	895b      	ldrh	r3, [r3, #10]
 8014dfe:	461a      	mov	r2, r3
 8014e00:	693b      	ldr	r3, [r7, #16]
 8014e02:	4293      	cmp	r3, r2
 8014e04:	d304      	bcc.n	8014e10 <pbuf_copy+0xec>
      /* on to next p_from (if any) */
      offset_from = 0;
 8014e06:	2300      	movs	r3, #0
 8014e08:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8014e0a:	683b      	ldr	r3, [r7, #0]
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	895b      	ldrh	r3, [r3, #10]
 8014e14:	461a      	mov	r2, r3
 8014e16:	697b      	ldr	r3, [r7, #20]
 8014e18:	4293      	cmp	r3, r2
 8014e1a:	d114      	bne.n	8014e46 <pbuf_copy+0x122>
      /* on to next p_to (if any) */
      offset_to = 0;
 8014e1c:	2300      	movs	r3, #0
 8014e1e:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	681b      	ldr	r3, [r3, #0]
 8014e24:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d10c      	bne.n	8014e46 <pbuf_copy+0x122>
 8014e2c:	683b      	ldr	r3, [r7, #0]
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d009      	beq.n	8014e46 <pbuf_copy+0x122>
 8014e32:	4b23      	ldr	r3, [pc, #140]	@ (8014ec0 <pbuf_copy+0x19c>)
 8014e34:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8014e38:	4926      	ldr	r1, [pc, #152]	@ (8014ed4 <pbuf_copy+0x1b0>)
 8014e3a:	4823      	ldr	r0, [pc, #140]	@ (8014ec8 <pbuf_copy+0x1a4>)
 8014e3c:	f00b fcac 	bl	8020798 <iprintf>
 8014e40:	f06f 030f 	mvn.w	r3, #15
 8014e44:	e035      	b.n	8014eb2 <pbuf_copy+0x18e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8014e46:	683b      	ldr	r3, [r7, #0]
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d013      	beq.n	8014e74 <pbuf_copy+0x150>
 8014e4c:	683b      	ldr	r3, [r7, #0]
 8014e4e:	895a      	ldrh	r2, [r3, #10]
 8014e50:	683b      	ldr	r3, [r7, #0]
 8014e52:	891b      	ldrh	r3, [r3, #8]
 8014e54:	429a      	cmp	r2, r3
 8014e56:	d10d      	bne.n	8014e74 <pbuf_copy+0x150>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014e58:	683b      	ldr	r3, [r7, #0]
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d009      	beq.n	8014e74 <pbuf_copy+0x150>
 8014e60:	4b17      	ldr	r3, [pc, #92]	@ (8014ec0 <pbuf_copy+0x19c>)
 8014e62:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8014e66:	491c      	ldr	r1, [pc, #112]	@ (8014ed8 <pbuf_copy+0x1b4>)
 8014e68:	4817      	ldr	r0, [pc, #92]	@ (8014ec8 <pbuf_copy+0x1a4>)
 8014e6a:	f00b fc95 	bl	8020798 <iprintf>
 8014e6e:	f06f 0305 	mvn.w	r3, #5
 8014e72:	e01e      	b.n	8014eb2 <pbuf_copy+0x18e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d013      	beq.n	8014ea2 <pbuf_copy+0x17e>
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	895a      	ldrh	r2, [r3, #10]
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	891b      	ldrh	r3, [r3, #8]
 8014e82:	429a      	cmp	r2, r3
 8014e84:	d10d      	bne.n	8014ea2 <pbuf_copy+0x17e>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	681b      	ldr	r3, [r3, #0]
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d009      	beq.n	8014ea2 <pbuf_copy+0x17e>
 8014e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8014ec0 <pbuf_copy+0x19c>)
 8014e90:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8014e94:	4910      	ldr	r1, [pc, #64]	@ (8014ed8 <pbuf_copy+0x1b4>)
 8014e96:	480c      	ldr	r0, [pc, #48]	@ (8014ec8 <pbuf_copy+0x1a4>)
 8014e98:	f00b fc7e 	bl	8020798 <iprintf>
 8014e9c:	f06f 0305 	mvn.w	r3, #5
 8014ea0:	e007      	b.n	8014eb2 <pbuf_copy+0x18e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8014ea2:	683b      	ldr	r3, [r7, #0]
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	f47f af61 	bne.w	8014d6c <pbuf_copy+0x48>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
 8014eaa:	480c      	ldr	r0, [pc, #48]	@ (8014edc <pbuf_copy+0x1b8>)
 8014eac:	f00b fce4 	bl	8020878 <puts>
  return ERR_OK;
 8014eb0:	2300      	movs	r3, #0
}
 8014eb2:	4618      	mov	r0, r3
 8014eb4:	3718      	adds	r7, #24
 8014eb6:	46bd      	mov	sp, r7
 8014eb8:	bd80      	pop	{r7, pc}
 8014eba:	bf00      	nop
 8014ebc:	080233f0 	.word	0x080233f0
 8014ec0:	08022ee8 	.word	0x08022ee8
 8014ec4:	08023404 	.word	0x08023404
 8014ec8:	08022f48 	.word	0x08022f48
 8014ecc:	08023434 	.word	0x08023434
 8014ed0:	0802344c 	.word	0x0802344c
 8014ed4:	08023468 	.word	0x08023468
 8014ed8:	08023478 	.word	0x08023478
 8014edc:	080234a4 	.word	0x080234a4

08014ee0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8014ee0:	b580      	push	{r7, lr}
 8014ee2:	b088      	sub	sp, #32
 8014ee4:	af00      	add	r7, sp, #0
 8014ee6:	60f8      	str	r0, [r7, #12]
 8014ee8:	60b9      	str	r1, [r7, #8]
 8014eea:	4611      	mov	r1, r2
 8014eec:	461a      	mov	r2, r3
 8014eee:	460b      	mov	r3, r1
 8014ef0:	80fb      	strh	r3, [r7, #6]
 8014ef2:	4613      	mov	r3, r2
 8014ef4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8014ef6:	2300      	movs	r3, #0
 8014ef8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8014efa:	2300      	movs	r3, #0
 8014efc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d108      	bne.n	8014f16 <pbuf_copy_partial+0x36>
 8014f04:	4b2b      	ldr	r3, [pc, #172]	@ (8014fb4 <pbuf_copy_partial+0xd4>)
 8014f06:	f240 420a 	movw	r2, #1034	@ 0x40a
 8014f0a:	492b      	ldr	r1, [pc, #172]	@ (8014fb8 <pbuf_copy_partial+0xd8>)
 8014f0c:	482b      	ldr	r0, [pc, #172]	@ (8014fbc <pbuf_copy_partial+0xdc>)
 8014f0e:	f00b fc43 	bl	8020798 <iprintf>
 8014f12:	2300      	movs	r3, #0
 8014f14:	e04a      	b.n	8014fac <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8014f16:	68bb      	ldr	r3, [r7, #8]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d108      	bne.n	8014f2e <pbuf_copy_partial+0x4e>
 8014f1c:	4b25      	ldr	r3, [pc, #148]	@ (8014fb4 <pbuf_copy_partial+0xd4>)
 8014f1e:	f240 420b 	movw	r2, #1035	@ 0x40b
 8014f22:	4927      	ldr	r1, [pc, #156]	@ (8014fc0 <pbuf_copy_partial+0xe0>)
 8014f24:	4825      	ldr	r0, [pc, #148]	@ (8014fbc <pbuf_copy_partial+0xdc>)
 8014f26:	f00b fc37 	bl	8020798 <iprintf>
 8014f2a:	2300      	movs	r3, #0
 8014f2c:	e03e      	b.n	8014fac <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8014f2e:	68fb      	ldr	r3, [r7, #12]
 8014f30:	61fb      	str	r3, [r7, #28]
 8014f32:	e034      	b.n	8014f9e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8014f34:	88bb      	ldrh	r3, [r7, #4]
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d00a      	beq.n	8014f50 <pbuf_copy_partial+0x70>
 8014f3a:	69fb      	ldr	r3, [r7, #28]
 8014f3c:	895b      	ldrh	r3, [r3, #10]
 8014f3e:	88ba      	ldrh	r2, [r7, #4]
 8014f40:	429a      	cmp	r2, r3
 8014f42:	d305      	bcc.n	8014f50 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8014f44:	69fb      	ldr	r3, [r7, #28]
 8014f46:	895b      	ldrh	r3, [r3, #10]
 8014f48:	88ba      	ldrh	r2, [r7, #4]
 8014f4a:	1ad3      	subs	r3, r2, r3
 8014f4c:	80bb      	strh	r3, [r7, #4]
 8014f4e:	e023      	b.n	8014f98 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8014f50:	69fb      	ldr	r3, [r7, #28]
 8014f52:	895a      	ldrh	r2, [r3, #10]
 8014f54:	88bb      	ldrh	r3, [r7, #4]
 8014f56:	1ad3      	subs	r3, r2, r3
 8014f58:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8014f5a:	8b3a      	ldrh	r2, [r7, #24]
 8014f5c:	88fb      	ldrh	r3, [r7, #6]
 8014f5e:	429a      	cmp	r2, r3
 8014f60:	d901      	bls.n	8014f66 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8014f62:	88fb      	ldrh	r3, [r7, #6]
 8014f64:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8014f66:	8b7b      	ldrh	r3, [r7, #26]
 8014f68:	68ba      	ldr	r2, [r7, #8]
 8014f6a:	18d0      	adds	r0, r2, r3
 8014f6c:	69fb      	ldr	r3, [r7, #28]
 8014f6e:	685a      	ldr	r2, [r3, #4]
 8014f70:	88bb      	ldrh	r3, [r7, #4]
 8014f72:	4413      	add	r3, r2
 8014f74:	8b3a      	ldrh	r2, [r7, #24]
 8014f76:	4619      	mov	r1, r3
 8014f78:	f00b fe41 	bl	8020bfe <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8014f7c:	8afa      	ldrh	r2, [r7, #22]
 8014f7e:	8b3b      	ldrh	r3, [r7, #24]
 8014f80:	4413      	add	r3, r2
 8014f82:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8014f84:	8b7a      	ldrh	r2, [r7, #26]
 8014f86:	8b3b      	ldrh	r3, [r7, #24]
 8014f88:	4413      	add	r3, r2
 8014f8a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8014f8c:	88fa      	ldrh	r2, [r7, #6]
 8014f8e:	8b3b      	ldrh	r3, [r7, #24]
 8014f90:	1ad3      	subs	r3, r2, r3
 8014f92:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8014f94:	2300      	movs	r3, #0
 8014f96:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8014f98:	69fb      	ldr	r3, [r7, #28]
 8014f9a:	681b      	ldr	r3, [r3, #0]
 8014f9c:	61fb      	str	r3, [r7, #28]
 8014f9e:	88fb      	ldrh	r3, [r7, #6]
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d002      	beq.n	8014faa <pbuf_copy_partial+0xca>
 8014fa4:	69fb      	ldr	r3, [r7, #28]
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d1c4      	bne.n	8014f34 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8014faa:	8afb      	ldrh	r3, [r7, #22]
}
 8014fac:	4618      	mov	r0, r3
 8014fae:	3720      	adds	r7, #32
 8014fb0:	46bd      	mov	sp, r7
 8014fb2:	bd80      	pop	{r7, pc}
 8014fb4:	08022ee8 	.word	0x08022ee8
 8014fb8:	080234c8 	.word	0x080234c8
 8014fbc:	08022f48 	.word	0x08022f48
 8014fc0:	080234e8 	.word	0x080234e8

08014fc4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8014fc4:	b580      	push	{r7, lr}
 8014fc6:	b084      	sub	sp, #16
 8014fc8:	af00      	add	r7, sp, #0
 8014fca:	4603      	mov	r3, r0
 8014fcc:	603a      	str	r2, [r7, #0]
 8014fce:	71fb      	strb	r3, [r7, #7]
 8014fd0:	460b      	mov	r3, r1
 8014fd2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8014fd4:	683b      	ldr	r3, [r7, #0]
 8014fd6:	8919      	ldrh	r1, [r3, #8]
 8014fd8:	88ba      	ldrh	r2, [r7, #4]
 8014fda:	79fb      	ldrb	r3, [r7, #7]
 8014fdc:	4618      	mov	r0, r3
 8014fde:	f7ff fa21 	bl	8014424 <pbuf_alloc>
 8014fe2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d101      	bne.n	8014fee <pbuf_clone+0x2a>
    return NULL;
 8014fea:	2300      	movs	r3, #0
 8014fec:	e011      	b.n	8015012 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8014fee:	6839      	ldr	r1, [r7, #0]
 8014ff0:	68f8      	ldr	r0, [r7, #12]
 8014ff2:	f7ff fe97 	bl	8014d24 <pbuf_copy>
 8014ff6:	4603      	mov	r3, r0
 8014ff8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8014ffa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d006      	beq.n	8015010 <pbuf_clone+0x4c>
 8015002:	4b06      	ldr	r3, [pc, #24]	@ (801501c <pbuf_clone+0x58>)
 8015004:	f240 5224 	movw	r2, #1316	@ 0x524
 8015008:	4905      	ldr	r1, [pc, #20]	@ (8015020 <pbuf_clone+0x5c>)
 801500a:	4806      	ldr	r0, [pc, #24]	@ (8015024 <pbuf_clone+0x60>)
 801500c:	f00b fbc4 	bl	8020798 <iprintf>
  return q;
 8015010:	68fb      	ldr	r3, [r7, #12]
}
 8015012:	4618      	mov	r0, r3
 8015014:	3710      	adds	r7, #16
 8015016:	46bd      	mov	sp, r7
 8015018:	bd80      	pop	{r7, pc}
 801501a:	bf00      	nop
 801501c:	08022ee8 	.word	0x08022ee8
 8015020:	080235f4 	.word	0x080235f4
 8015024:	08022f48 	.word	0x08022f48

08015028 <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
 8015028:	b480      	push	{r7}
 801502a:	af00      	add	r7, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
 801502c:	4b04      	ldr	r3, [pc, #16]	@ (8015040 <stats_init+0x18>)
 801502e:	4a05      	ldr	r2, [pc, #20]	@ (8015044 <stats_init+0x1c>)
 8015030:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 8015034:	bf00      	nop
 8015036:	46bd      	mov	sp, r7
 8015038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801503c:	4770      	bx	lr
 801503e:	bf00      	nop
 8015040:	2002d36c 	.word	0x2002d36c
 8015044:	08023608 	.word	0x08023608

08015048 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8015048:	b580      	push	{r7, lr}
 801504a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801504c:	f00b faa4 	bl	8020598 <rand>
 8015050:	4603      	mov	r3, r0
 8015052:	b29b      	uxth	r3, r3
 8015054:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015058:	b29b      	uxth	r3, r3
 801505a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801505e:	b29a      	uxth	r2, r3
 8015060:	4b01      	ldr	r3, [pc, #4]	@ (8015068 <tcp_init+0x20>)
 8015062:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015064:	bf00      	nop
 8015066:	bd80      	pop	{r7, pc}
 8015068:	20000068 	.word	0x20000068

0801506c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 801506c:	b580      	push	{r7, lr}
 801506e:	b082      	sub	sp, #8
 8015070:	af00      	add	r7, sp, #0
 8015072:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	7d1b      	ldrb	r3, [r3, #20]
 8015078:	2b01      	cmp	r3, #1
 801507a:	d105      	bne.n	8015088 <tcp_free+0x1c>
 801507c:	4b06      	ldr	r3, [pc, #24]	@ (8015098 <tcp_free+0x2c>)
 801507e:	22d4      	movs	r2, #212	@ 0xd4
 8015080:	4906      	ldr	r1, [pc, #24]	@ (801509c <tcp_free+0x30>)
 8015082:	4807      	ldr	r0, [pc, #28]	@ (80150a0 <tcp_free+0x34>)
 8015084:	f00b fb88 	bl	8020798 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8015088:	6879      	ldr	r1, [r7, #4]
 801508a:	2001      	movs	r0, #1
 801508c:	f7fe fd10 	bl	8013ab0 <memp_free>
}
 8015090:	bf00      	nop
 8015092:	3708      	adds	r7, #8
 8015094:	46bd      	mov	sp, r7
 8015096:	bd80      	pop	{r7, pc}
 8015098:	08023868 	.word	0x08023868
 801509c:	08023898 	.word	0x08023898
 80150a0:	080238ac 	.word	0x080238ac

080150a4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80150a4:	b580      	push	{r7, lr}
 80150a6:	b082      	sub	sp, #8
 80150a8:	af00      	add	r7, sp, #0
 80150aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	7d1b      	ldrb	r3, [r3, #20]
 80150b0:	2b01      	cmp	r3, #1
 80150b2:	d105      	bne.n	80150c0 <tcp_free_listen+0x1c>
 80150b4:	4b06      	ldr	r3, [pc, #24]	@ (80150d0 <tcp_free_listen+0x2c>)
 80150b6:	22df      	movs	r2, #223	@ 0xdf
 80150b8:	4906      	ldr	r1, [pc, #24]	@ (80150d4 <tcp_free_listen+0x30>)
 80150ba:	4807      	ldr	r0, [pc, #28]	@ (80150d8 <tcp_free_listen+0x34>)
 80150bc:	f00b fb6c 	bl	8020798 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80150c0:	6879      	ldr	r1, [r7, #4]
 80150c2:	2002      	movs	r0, #2
 80150c4:	f7fe fcf4 	bl	8013ab0 <memp_free>
}
 80150c8:	bf00      	nop
 80150ca:	3708      	adds	r7, #8
 80150cc:	46bd      	mov	sp, r7
 80150ce:	bd80      	pop	{r7, pc}
 80150d0:	08023868 	.word	0x08023868
 80150d4:	080238d4 	.word	0x080238d4
 80150d8:	080238ac 	.word	0x080238ac

080150dc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80150dc:	b580      	push	{r7, lr}
 80150de:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80150e0:	f000 ffde 	bl	80160a0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80150e4:	4b07      	ldr	r3, [pc, #28]	@ (8015104 <tcp_tmr+0x28>)
 80150e6:	781b      	ldrb	r3, [r3, #0]
 80150e8:	3301      	adds	r3, #1
 80150ea:	b2da      	uxtb	r2, r3
 80150ec:	4b05      	ldr	r3, [pc, #20]	@ (8015104 <tcp_tmr+0x28>)
 80150ee:	701a      	strb	r2, [r3, #0]
 80150f0:	4b04      	ldr	r3, [pc, #16]	@ (8015104 <tcp_tmr+0x28>)
 80150f2:	781b      	ldrb	r3, [r3, #0]
 80150f4:	f003 0301 	and.w	r3, r3, #1
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d001      	beq.n	8015100 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80150fc:	f000 fc8e 	bl	8015a1c <tcp_slowtmr>
  }
}
 8015100:	bf00      	nop
 8015102:	bd80      	pop	{r7, pc}
 8015104:	2002d481 	.word	0x2002d481

08015108 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8015108:	b580      	push	{r7, lr}
 801510a:	b084      	sub	sp, #16
 801510c:	af00      	add	r7, sp, #0
 801510e:	6078      	str	r0, [r7, #4]
 8015110:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8015112:	683b      	ldr	r3, [r7, #0]
 8015114:	2b00      	cmp	r3, #0
 8015116:	d105      	bne.n	8015124 <tcp_remove_listener+0x1c>
 8015118:	4b0d      	ldr	r3, [pc, #52]	@ (8015150 <tcp_remove_listener+0x48>)
 801511a:	22ff      	movs	r2, #255	@ 0xff
 801511c:	490d      	ldr	r1, [pc, #52]	@ (8015154 <tcp_remove_listener+0x4c>)
 801511e:	480e      	ldr	r0, [pc, #56]	@ (8015158 <tcp_remove_listener+0x50>)
 8015120:	f00b fb3a 	bl	8020798 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	60fb      	str	r3, [r7, #12]
 8015128:	e00a      	b.n	8015140 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801512e:	683a      	ldr	r2, [r7, #0]
 8015130:	429a      	cmp	r2, r3
 8015132:	d102      	bne.n	801513a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	2200      	movs	r2, #0
 8015138:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	68db      	ldr	r3, [r3, #12]
 801513e:	60fb      	str	r3, [r7, #12]
 8015140:	68fb      	ldr	r3, [r7, #12]
 8015142:	2b00      	cmp	r3, #0
 8015144:	d1f1      	bne.n	801512a <tcp_remove_listener+0x22>
    }
  }
}
 8015146:	bf00      	nop
 8015148:	bf00      	nop
 801514a:	3710      	adds	r7, #16
 801514c:	46bd      	mov	sp, r7
 801514e:	bd80      	pop	{r7, pc}
 8015150:	08023868 	.word	0x08023868
 8015154:	080238f0 	.word	0x080238f0
 8015158:	080238ac 	.word	0x080238ac

0801515c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 801515c:	b580      	push	{r7, lr}
 801515e:	b084      	sub	sp, #16
 8015160:	af00      	add	r7, sp, #0
 8015162:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	2b00      	cmp	r3, #0
 8015168:	d106      	bne.n	8015178 <tcp_listen_closed+0x1c>
 801516a:	4b14      	ldr	r3, [pc, #80]	@ (80151bc <tcp_listen_closed+0x60>)
 801516c:	f240 1211 	movw	r2, #273	@ 0x111
 8015170:	4913      	ldr	r1, [pc, #76]	@ (80151c0 <tcp_listen_closed+0x64>)
 8015172:	4814      	ldr	r0, [pc, #80]	@ (80151c4 <tcp_listen_closed+0x68>)
 8015174:	f00b fb10 	bl	8020798 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	7d1b      	ldrb	r3, [r3, #20]
 801517c:	2b01      	cmp	r3, #1
 801517e:	d006      	beq.n	801518e <tcp_listen_closed+0x32>
 8015180:	4b0e      	ldr	r3, [pc, #56]	@ (80151bc <tcp_listen_closed+0x60>)
 8015182:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8015186:	4910      	ldr	r1, [pc, #64]	@ (80151c8 <tcp_listen_closed+0x6c>)
 8015188:	480e      	ldr	r0, [pc, #56]	@ (80151c4 <tcp_listen_closed+0x68>)
 801518a:	f00b fb05 	bl	8020798 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801518e:	2301      	movs	r3, #1
 8015190:	60fb      	str	r3, [r7, #12]
 8015192:	e00b      	b.n	80151ac <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8015194:	4a0d      	ldr	r2, [pc, #52]	@ (80151cc <tcp_listen_closed+0x70>)
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801519c:	681b      	ldr	r3, [r3, #0]
 801519e:	6879      	ldr	r1, [r7, #4]
 80151a0:	4618      	mov	r0, r3
 80151a2:	f7ff ffb1 	bl	8015108 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80151a6:	68fb      	ldr	r3, [r7, #12]
 80151a8:	3301      	adds	r3, #1
 80151aa:	60fb      	str	r3, [r7, #12]
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	2b03      	cmp	r3, #3
 80151b0:	d9f0      	bls.n	8015194 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80151b2:	bf00      	nop
 80151b4:	bf00      	nop
 80151b6:	3710      	adds	r7, #16
 80151b8:	46bd      	mov	sp, r7
 80151ba:	bd80      	pop	{r7, pc}
 80151bc:	08023868 	.word	0x08023868
 80151c0:	08023918 	.word	0x08023918
 80151c4:	080238ac 	.word	0x080238ac
 80151c8:	08023924 	.word	0x08023924
 80151cc:	0802685c 	.word	0x0802685c

080151d0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80151d0:	b5b0      	push	{r4, r5, r7, lr}
 80151d2:	b088      	sub	sp, #32
 80151d4:	af04      	add	r7, sp, #16
 80151d6:	6078      	str	r0, [r7, #4]
 80151d8:	460b      	mov	r3, r1
 80151da:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d106      	bne.n	80151f0 <tcp_close_shutdown+0x20>
 80151e2:	4b63      	ldr	r3, [pc, #396]	@ (8015370 <tcp_close_shutdown+0x1a0>)
 80151e4:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80151e8:	4962      	ldr	r1, [pc, #392]	@ (8015374 <tcp_close_shutdown+0x1a4>)
 80151ea:	4863      	ldr	r0, [pc, #396]	@ (8015378 <tcp_close_shutdown+0x1a8>)
 80151ec:	f00b fad4 	bl	8020798 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80151f0:	78fb      	ldrb	r3, [r7, #3]
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d066      	beq.n	80152c4 <tcp_close_shutdown+0xf4>
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	7d1b      	ldrb	r3, [r3, #20]
 80151fa:	2b04      	cmp	r3, #4
 80151fc:	d003      	beq.n	8015206 <tcp_close_shutdown+0x36>
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	7d1b      	ldrb	r3, [r3, #20]
 8015202:	2b07      	cmp	r3, #7
 8015204:	d15e      	bne.n	80152c4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801520a:	2b00      	cmp	r3, #0
 801520c:	d104      	bne.n	8015218 <tcp_close_shutdown+0x48>
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015212:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8015216:	d055      	beq.n	80152c4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	8b5b      	ldrh	r3, [r3, #26]
 801521c:	f003 0310 	and.w	r3, r3, #16
 8015220:	2b00      	cmp	r3, #0
 8015222:	d106      	bne.n	8015232 <tcp_close_shutdown+0x62>
 8015224:	4b52      	ldr	r3, [pc, #328]	@ (8015370 <tcp_close_shutdown+0x1a0>)
 8015226:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 801522a:	4954      	ldr	r1, [pc, #336]	@ (801537c <tcp_close_shutdown+0x1ac>)
 801522c:	4852      	ldr	r0, [pc, #328]	@ (8015378 <tcp_close_shutdown+0x1a8>)
 801522e:	f00b fab3 	bl	8020798 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801523a:	687d      	ldr	r5, [r7, #4]
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	3304      	adds	r3, #4
 8015240:	687a      	ldr	r2, [r7, #4]
 8015242:	8ad2      	ldrh	r2, [r2, #22]
 8015244:	6879      	ldr	r1, [r7, #4]
 8015246:	8b09      	ldrh	r1, [r1, #24]
 8015248:	9102      	str	r1, [sp, #8]
 801524a:	9201      	str	r2, [sp, #4]
 801524c:	9300      	str	r3, [sp, #0]
 801524e:	462b      	mov	r3, r5
 8015250:	4622      	mov	r2, r4
 8015252:	4601      	mov	r1, r0
 8015254:	6878      	ldr	r0, [r7, #4]
 8015256:	f005 fe3f 	bl	801aed8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801525a:	6878      	ldr	r0, [r7, #4]
 801525c:	f001 fafa 	bl	8016854 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8015260:	4b47      	ldr	r3, [pc, #284]	@ (8015380 <tcp_close_shutdown+0x1b0>)
 8015262:	681b      	ldr	r3, [r3, #0]
 8015264:	687a      	ldr	r2, [r7, #4]
 8015266:	429a      	cmp	r2, r3
 8015268:	d105      	bne.n	8015276 <tcp_close_shutdown+0xa6>
 801526a:	4b45      	ldr	r3, [pc, #276]	@ (8015380 <tcp_close_shutdown+0x1b0>)
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	68db      	ldr	r3, [r3, #12]
 8015270:	4a43      	ldr	r2, [pc, #268]	@ (8015380 <tcp_close_shutdown+0x1b0>)
 8015272:	6013      	str	r3, [r2, #0]
 8015274:	e013      	b.n	801529e <tcp_close_shutdown+0xce>
 8015276:	4b42      	ldr	r3, [pc, #264]	@ (8015380 <tcp_close_shutdown+0x1b0>)
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	60fb      	str	r3, [r7, #12]
 801527c:	e00c      	b.n	8015298 <tcp_close_shutdown+0xc8>
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	68db      	ldr	r3, [r3, #12]
 8015282:	687a      	ldr	r2, [r7, #4]
 8015284:	429a      	cmp	r2, r3
 8015286:	d104      	bne.n	8015292 <tcp_close_shutdown+0xc2>
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	68da      	ldr	r2, [r3, #12]
 801528c:	68fb      	ldr	r3, [r7, #12]
 801528e:	60da      	str	r2, [r3, #12]
 8015290:	e005      	b.n	801529e <tcp_close_shutdown+0xce>
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	68db      	ldr	r3, [r3, #12]
 8015296:	60fb      	str	r3, [r7, #12]
 8015298:	68fb      	ldr	r3, [r7, #12]
 801529a:	2b00      	cmp	r3, #0
 801529c:	d1ef      	bne.n	801527e <tcp_close_shutdown+0xae>
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	2200      	movs	r2, #0
 80152a2:	60da      	str	r2, [r3, #12]
 80152a4:	4b37      	ldr	r3, [pc, #220]	@ (8015384 <tcp_close_shutdown+0x1b4>)
 80152a6:	2201      	movs	r2, #1
 80152a8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80152aa:	4b37      	ldr	r3, [pc, #220]	@ (8015388 <tcp_close_shutdown+0x1b8>)
 80152ac:	681b      	ldr	r3, [r3, #0]
 80152ae:	687a      	ldr	r2, [r7, #4]
 80152b0:	429a      	cmp	r2, r3
 80152b2:	d102      	bne.n	80152ba <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80152b4:	f003 fffa 	bl	80192ac <tcp_trigger_input_pcb_close>
 80152b8:	e002      	b.n	80152c0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80152ba:	6878      	ldr	r0, [r7, #4]
 80152bc:	f7ff fed6 	bl	801506c <tcp_free>
      }
      return ERR_OK;
 80152c0:	2300      	movs	r3, #0
 80152c2:	e050      	b.n	8015366 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	7d1b      	ldrb	r3, [r3, #20]
 80152c8:	2b02      	cmp	r3, #2
 80152ca:	d03b      	beq.n	8015344 <tcp_close_shutdown+0x174>
 80152cc:	2b02      	cmp	r3, #2
 80152ce:	dc44      	bgt.n	801535a <tcp_close_shutdown+0x18a>
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d002      	beq.n	80152da <tcp_close_shutdown+0x10a>
 80152d4:	2b01      	cmp	r3, #1
 80152d6:	d02a      	beq.n	801532e <tcp_close_shutdown+0x15e>
 80152d8:	e03f      	b.n	801535a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	8adb      	ldrh	r3, [r3, #22]
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d021      	beq.n	8015326 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80152e2:	4b2a      	ldr	r3, [pc, #168]	@ (801538c <tcp_close_shutdown+0x1bc>)
 80152e4:	681b      	ldr	r3, [r3, #0]
 80152e6:	687a      	ldr	r2, [r7, #4]
 80152e8:	429a      	cmp	r2, r3
 80152ea:	d105      	bne.n	80152f8 <tcp_close_shutdown+0x128>
 80152ec:	4b27      	ldr	r3, [pc, #156]	@ (801538c <tcp_close_shutdown+0x1bc>)
 80152ee:	681b      	ldr	r3, [r3, #0]
 80152f0:	68db      	ldr	r3, [r3, #12]
 80152f2:	4a26      	ldr	r2, [pc, #152]	@ (801538c <tcp_close_shutdown+0x1bc>)
 80152f4:	6013      	str	r3, [r2, #0]
 80152f6:	e013      	b.n	8015320 <tcp_close_shutdown+0x150>
 80152f8:	4b24      	ldr	r3, [pc, #144]	@ (801538c <tcp_close_shutdown+0x1bc>)
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	60bb      	str	r3, [r7, #8]
 80152fe:	e00c      	b.n	801531a <tcp_close_shutdown+0x14a>
 8015300:	68bb      	ldr	r3, [r7, #8]
 8015302:	68db      	ldr	r3, [r3, #12]
 8015304:	687a      	ldr	r2, [r7, #4]
 8015306:	429a      	cmp	r2, r3
 8015308:	d104      	bne.n	8015314 <tcp_close_shutdown+0x144>
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	68da      	ldr	r2, [r3, #12]
 801530e:	68bb      	ldr	r3, [r7, #8]
 8015310:	60da      	str	r2, [r3, #12]
 8015312:	e005      	b.n	8015320 <tcp_close_shutdown+0x150>
 8015314:	68bb      	ldr	r3, [r7, #8]
 8015316:	68db      	ldr	r3, [r3, #12]
 8015318:	60bb      	str	r3, [r7, #8]
 801531a:	68bb      	ldr	r3, [r7, #8]
 801531c:	2b00      	cmp	r3, #0
 801531e:	d1ef      	bne.n	8015300 <tcp_close_shutdown+0x130>
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	2200      	movs	r2, #0
 8015324:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8015326:	6878      	ldr	r0, [r7, #4]
 8015328:	f7ff fea0 	bl	801506c <tcp_free>
      break;
 801532c:	e01a      	b.n	8015364 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 801532e:	6878      	ldr	r0, [r7, #4]
 8015330:	f7ff ff14 	bl	801515c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8015334:	6879      	ldr	r1, [r7, #4]
 8015336:	4816      	ldr	r0, [pc, #88]	@ (8015390 <tcp_close_shutdown+0x1c0>)
 8015338:	f001 fadc 	bl	80168f4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801533c:	6878      	ldr	r0, [r7, #4]
 801533e:	f7ff feb1 	bl	80150a4 <tcp_free_listen>
      break;
 8015342:	e00f      	b.n	8015364 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8015344:	6879      	ldr	r1, [r7, #4]
 8015346:	480e      	ldr	r0, [pc, #56]	@ (8015380 <tcp_close_shutdown+0x1b0>)
 8015348:	f001 fad4 	bl	80168f4 <tcp_pcb_remove>
 801534c:	4b0d      	ldr	r3, [pc, #52]	@ (8015384 <tcp_close_shutdown+0x1b4>)
 801534e:	2201      	movs	r2, #1
 8015350:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8015352:	6878      	ldr	r0, [r7, #4]
 8015354:	f7ff fe8a 	bl	801506c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8015358:	e004      	b.n	8015364 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 801535a:	6878      	ldr	r0, [r7, #4]
 801535c:	f000 f81a 	bl	8015394 <tcp_close_shutdown_fin>
 8015360:	4603      	mov	r3, r0
 8015362:	e000      	b.n	8015366 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8015364:	2300      	movs	r3, #0
}
 8015366:	4618      	mov	r0, r3
 8015368:	3710      	adds	r7, #16
 801536a:	46bd      	mov	sp, r7
 801536c:	bdb0      	pop	{r4, r5, r7, pc}
 801536e:	bf00      	nop
 8015370:	08023868 	.word	0x08023868
 8015374:	0802393c 	.word	0x0802393c
 8015378:	080238ac 	.word	0x080238ac
 801537c:	0802395c 	.word	0x0802395c
 8015380:	2002d478 	.word	0x2002d478
 8015384:	2002d480 	.word	0x2002d480
 8015388:	2002d4bc 	.word	0x2002d4bc
 801538c:	2002d470 	.word	0x2002d470
 8015390:	2002d474 	.word	0x2002d474

08015394 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8015394:	b580      	push	{r7, lr}
 8015396:	b084      	sub	sp, #16
 8015398:	af00      	add	r7, sp, #0
 801539a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d106      	bne.n	80153b0 <tcp_close_shutdown_fin+0x1c>
 80153a2:	4b2e      	ldr	r3, [pc, #184]	@ (801545c <tcp_close_shutdown_fin+0xc8>)
 80153a4:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 80153a8:	492d      	ldr	r1, [pc, #180]	@ (8015460 <tcp_close_shutdown_fin+0xcc>)
 80153aa:	482e      	ldr	r0, [pc, #184]	@ (8015464 <tcp_close_shutdown_fin+0xd0>)
 80153ac:	f00b f9f4 	bl	8020798 <iprintf>

  switch (pcb->state) {
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	7d1b      	ldrb	r3, [r3, #20]
 80153b4:	2b07      	cmp	r3, #7
 80153b6:	d020      	beq.n	80153fa <tcp_close_shutdown_fin+0x66>
 80153b8:	2b07      	cmp	r3, #7
 80153ba:	dc2b      	bgt.n	8015414 <tcp_close_shutdown_fin+0x80>
 80153bc:	2b03      	cmp	r3, #3
 80153be:	d002      	beq.n	80153c6 <tcp_close_shutdown_fin+0x32>
 80153c0:	2b04      	cmp	r3, #4
 80153c2:	d00d      	beq.n	80153e0 <tcp_close_shutdown_fin+0x4c>
 80153c4:	e026      	b.n	8015414 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80153c6:	6878      	ldr	r0, [r7, #4]
 80153c8:	f004 fe62 	bl	801a090 <tcp_send_fin>
 80153cc:	4603      	mov	r3, r0
 80153ce:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80153d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d11f      	bne.n	8015418 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	2205      	movs	r2, #5
 80153dc:	751a      	strb	r2, [r3, #20]
      }
      break;
 80153de:	e01b      	b.n	8015418 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80153e0:	6878      	ldr	r0, [r7, #4]
 80153e2:	f004 fe55 	bl	801a090 <tcp_send_fin>
 80153e6:	4603      	mov	r3, r0
 80153e8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80153ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d114      	bne.n	801541c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	2205      	movs	r2, #5
 80153f6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80153f8:	e010      	b.n	801541c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80153fa:	6878      	ldr	r0, [r7, #4]
 80153fc:	f004 fe48 	bl	801a090 <tcp_send_fin>
 8015400:	4603      	mov	r3, r0
 8015402:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8015404:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015408:	2b00      	cmp	r3, #0
 801540a:	d109      	bne.n	8015420 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	2209      	movs	r2, #9
 8015410:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015412:	e005      	b.n	8015420 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8015414:	2300      	movs	r3, #0
 8015416:	e01c      	b.n	8015452 <tcp_close_shutdown_fin+0xbe>
      break;
 8015418:	bf00      	nop
 801541a:	e002      	b.n	8015422 <tcp_close_shutdown_fin+0x8e>
      break;
 801541c:	bf00      	nop
 801541e:	e000      	b.n	8015422 <tcp_close_shutdown_fin+0x8e>
      break;
 8015420:	bf00      	nop
  }

  if (err == ERR_OK) {
 8015422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015426:	2b00      	cmp	r3, #0
 8015428:	d103      	bne.n	8015432 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801542a:	6878      	ldr	r0, [r7, #4]
 801542c:	f004 ff80 	bl	801a330 <tcp_output>
 8015430:	e00d      	b.n	801544e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8015432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015436:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801543a:	d108      	bne.n	801544e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	8b5b      	ldrh	r3, [r3, #26]
 8015440:	f043 0308 	orr.w	r3, r3, #8
 8015444:	b29a      	uxth	r2, r3
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801544a:	2300      	movs	r3, #0
 801544c:	e001      	b.n	8015452 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801544e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015452:	4618      	mov	r0, r3
 8015454:	3710      	adds	r7, #16
 8015456:	46bd      	mov	sp, r7
 8015458:	bd80      	pop	{r7, pc}
 801545a:	bf00      	nop
 801545c:	08023868 	.word	0x08023868
 8015460:	08023918 	.word	0x08023918
 8015464:	080238ac 	.word	0x080238ac

08015468 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8015468:	b580      	push	{r7, lr}
 801546a:	b082      	sub	sp, #8
 801546c:	af00      	add	r7, sp, #0
 801546e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	2b00      	cmp	r3, #0
 8015474:	d109      	bne.n	801548a <tcp_close+0x22>
 8015476:	4b0f      	ldr	r3, [pc, #60]	@ (80154b4 <tcp_close+0x4c>)
 8015478:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 801547c:	490e      	ldr	r1, [pc, #56]	@ (80154b8 <tcp_close+0x50>)
 801547e:	480f      	ldr	r0, [pc, #60]	@ (80154bc <tcp_close+0x54>)
 8015480:	f00b f98a 	bl	8020798 <iprintf>
 8015484:	f06f 030f 	mvn.w	r3, #15
 8015488:	e00f      	b.n	80154aa <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	7d1b      	ldrb	r3, [r3, #20]
 801548e:	2b01      	cmp	r3, #1
 8015490:	d006      	beq.n	80154a0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	8b5b      	ldrh	r3, [r3, #26]
 8015496:	f043 0310 	orr.w	r3, r3, #16
 801549a:	b29a      	uxth	r2, r3
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80154a0:	2101      	movs	r1, #1
 80154a2:	6878      	ldr	r0, [r7, #4]
 80154a4:	f7ff fe94 	bl	80151d0 <tcp_close_shutdown>
 80154a8:	4603      	mov	r3, r0
}
 80154aa:	4618      	mov	r0, r3
 80154ac:	3708      	adds	r7, #8
 80154ae:	46bd      	mov	sp, r7
 80154b0:	bd80      	pop	{r7, pc}
 80154b2:	bf00      	nop
 80154b4:	08023868 	.word	0x08023868
 80154b8:	08023978 	.word	0x08023978
 80154bc:	080238ac 	.word	0x080238ac

080154c0 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 80154c0:	b580      	push	{r7, lr}
 80154c2:	b084      	sub	sp, #16
 80154c4:	af00      	add	r7, sp, #0
 80154c6:	60f8      	str	r0, [r7, #12]
 80154c8:	60b9      	str	r1, [r7, #8]
 80154ca:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 80154cc:	68fb      	ldr	r3, [r7, #12]
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d109      	bne.n	80154e6 <tcp_shutdown+0x26>
 80154d2:	4b26      	ldr	r3, [pc, #152]	@ (801556c <tcp_shutdown+0xac>)
 80154d4:	f240 2207 	movw	r2, #519	@ 0x207
 80154d8:	4925      	ldr	r1, [pc, #148]	@ (8015570 <tcp_shutdown+0xb0>)
 80154da:	4826      	ldr	r0, [pc, #152]	@ (8015574 <tcp_shutdown+0xb4>)
 80154dc:	f00b f95c 	bl	8020798 <iprintf>
 80154e0:	f06f 030f 	mvn.w	r3, #15
 80154e4:	e03d      	b.n	8015562 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 80154e6:	68fb      	ldr	r3, [r7, #12]
 80154e8:	7d1b      	ldrb	r3, [r3, #20]
 80154ea:	2b01      	cmp	r3, #1
 80154ec:	d102      	bne.n	80154f4 <tcp_shutdown+0x34>
    return ERR_CONN;
 80154ee:	f06f 030a 	mvn.w	r3, #10
 80154f2:	e036      	b.n	8015562 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 80154f4:	68bb      	ldr	r3, [r7, #8]
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d01b      	beq.n	8015532 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80154fa:	68fb      	ldr	r3, [r7, #12]
 80154fc:	8b5b      	ldrh	r3, [r3, #26]
 80154fe:	f043 0310 	orr.w	r3, r3, #16
 8015502:	b29a      	uxth	r2, r3
 8015504:	68fb      	ldr	r3, [r7, #12]
 8015506:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	2b00      	cmp	r3, #0
 801550c:	d005      	beq.n	801551a <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 801550e:	2101      	movs	r1, #1
 8015510:	68f8      	ldr	r0, [r7, #12]
 8015512:	f7ff fe5d 	bl	80151d0 <tcp_close_shutdown>
 8015516:	4603      	mov	r3, r0
 8015518:	e023      	b.n	8015562 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801551e:	2b00      	cmp	r3, #0
 8015520:	d007      	beq.n	8015532 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8015522:	68fb      	ldr	r3, [r7, #12]
 8015524:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015526:	4618      	mov	r0, r3
 8015528:	f7ff faa8 	bl	8014a7c <pbuf_free>
      pcb->refused_data = NULL;
 801552c:	68fb      	ldr	r3, [r7, #12]
 801552e:	2200      	movs	r2, #0
 8015530:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	2b00      	cmp	r3, #0
 8015536:	d013      	beq.n	8015560 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8015538:	68fb      	ldr	r3, [r7, #12]
 801553a:	7d1b      	ldrb	r3, [r3, #20]
 801553c:	2b04      	cmp	r3, #4
 801553e:	dc02      	bgt.n	8015546 <tcp_shutdown+0x86>
 8015540:	2b03      	cmp	r3, #3
 8015542:	da02      	bge.n	801554a <tcp_shutdown+0x8a>
 8015544:	e009      	b.n	801555a <tcp_shutdown+0x9a>
 8015546:	2b07      	cmp	r3, #7
 8015548:	d107      	bne.n	801555a <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 801554a:	68bb      	ldr	r3, [r7, #8]
 801554c:	b2db      	uxtb	r3, r3
 801554e:	4619      	mov	r1, r3
 8015550:	68f8      	ldr	r0, [r7, #12]
 8015552:	f7ff fe3d 	bl	80151d0 <tcp_close_shutdown>
 8015556:	4603      	mov	r3, r0
 8015558:	e003      	b.n	8015562 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 801555a:	f06f 030a 	mvn.w	r3, #10
 801555e:	e000      	b.n	8015562 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8015560:	2300      	movs	r3, #0
}
 8015562:	4618      	mov	r0, r3
 8015564:	3710      	adds	r7, #16
 8015566:	46bd      	mov	sp, r7
 8015568:	bd80      	pop	{r7, pc}
 801556a:	bf00      	nop
 801556c:	08023868 	.word	0x08023868
 8015570:	08023990 	.word	0x08023990
 8015574:	080238ac 	.word	0x080238ac

08015578 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8015578:	b580      	push	{r7, lr}
 801557a:	b08e      	sub	sp, #56	@ 0x38
 801557c:	af04      	add	r7, sp, #16
 801557e:	6078      	str	r0, [r7, #4]
 8015580:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	2b00      	cmp	r3, #0
 8015586:	d107      	bne.n	8015598 <tcp_abandon+0x20>
 8015588:	4b52      	ldr	r3, [pc, #328]	@ (80156d4 <tcp_abandon+0x15c>)
 801558a:	f240 223d 	movw	r2, #573	@ 0x23d
 801558e:	4952      	ldr	r1, [pc, #328]	@ (80156d8 <tcp_abandon+0x160>)
 8015590:	4852      	ldr	r0, [pc, #328]	@ (80156dc <tcp_abandon+0x164>)
 8015592:	f00b f901 	bl	8020798 <iprintf>
 8015596:	e099      	b.n	80156cc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	7d1b      	ldrb	r3, [r3, #20]
 801559c:	2b01      	cmp	r3, #1
 801559e:	d106      	bne.n	80155ae <tcp_abandon+0x36>
 80155a0:	4b4c      	ldr	r3, [pc, #304]	@ (80156d4 <tcp_abandon+0x15c>)
 80155a2:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80155a6:	494e      	ldr	r1, [pc, #312]	@ (80156e0 <tcp_abandon+0x168>)
 80155a8:	484c      	ldr	r0, [pc, #304]	@ (80156dc <tcp_abandon+0x164>)
 80155aa:	f00b f8f5 	bl	8020798 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	7d1b      	ldrb	r3, [r3, #20]
 80155b2:	2b0a      	cmp	r3, #10
 80155b4:	d107      	bne.n	80155c6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80155b6:	6879      	ldr	r1, [r7, #4]
 80155b8:	484a      	ldr	r0, [pc, #296]	@ (80156e4 <tcp_abandon+0x16c>)
 80155ba:	f001 f99b 	bl	80168f4 <tcp_pcb_remove>
    tcp_free(pcb);
 80155be:	6878      	ldr	r0, [r7, #4]
 80155c0:	f7ff fd54 	bl	801506c <tcp_free>
 80155c4:	e082      	b.n	80156cc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80155c6:	2300      	movs	r3, #0
 80155c8:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 80155ca:	2300      	movs	r3, #0
 80155cc:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80155d2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80155d8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80155e0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	691b      	ldr	r3, [r3, #16]
 80155e6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	7d1b      	ldrb	r3, [r3, #20]
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d126      	bne.n	801563e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	8adb      	ldrh	r3, [r3, #22]
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d02e      	beq.n	8015656 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80155f8:	4b3b      	ldr	r3, [pc, #236]	@ (80156e8 <tcp_abandon+0x170>)
 80155fa:	681b      	ldr	r3, [r3, #0]
 80155fc:	687a      	ldr	r2, [r7, #4]
 80155fe:	429a      	cmp	r2, r3
 8015600:	d105      	bne.n	801560e <tcp_abandon+0x96>
 8015602:	4b39      	ldr	r3, [pc, #228]	@ (80156e8 <tcp_abandon+0x170>)
 8015604:	681b      	ldr	r3, [r3, #0]
 8015606:	68db      	ldr	r3, [r3, #12]
 8015608:	4a37      	ldr	r2, [pc, #220]	@ (80156e8 <tcp_abandon+0x170>)
 801560a:	6013      	str	r3, [r2, #0]
 801560c:	e013      	b.n	8015636 <tcp_abandon+0xbe>
 801560e:	4b36      	ldr	r3, [pc, #216]	@ (80156e8 <tcp_abandon+0x170>)
 8015610:	681b      	ldr	r3, [r3, #0]
 8015612:	61fb      	str	r3, [r7, #28]
 8015614:	e00c      	b.n	8015630 <tcp_abandon+0xb8>
 8015616:	69fb      	ldr	r3, [r7, #28]
 8015618:	68db      	ldr	r3, [r3, #12]
 801561a:	687a      	ldr	r2, [r7, #4]
 801561c:	429a      	cmp	r2, r3
 801561e:	d104      	bne.n	801562a <tcp_abandon+0xb2>
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	68da      	ldr	r2, [r3, #12]
 8015624:	69fb      	ldr	r3, [r7, #28]
 8015626:	60da      	str	r2, [r3, #12]
 8015628:	e005      	b.n	8015636 <tcp_abandon+0xbe>
 801562a:	69fb      	ldr	r3, [r7, #28]
 801562c:	68db      	ldr	r3, [r3, #12]
 801562e:	61fb      	str	r3, [r7, #28]
 8015630:	69fb      	ldr	r3, [r7, #28]
 8015632:	2b00      	cmp	r3, #0
 8015634:	d1ef      	bne.n	8015616 <tcp_abandon+0x9e>
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	2200      	movs	r2, #0
 801563a:	60da      	str	r2, [r3, #12]
 801563c:	e00b      	b.n	8015656 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801563e:	683b      	ldr	r3, [r7, #0]
 8015640:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	8adb      	ldrh	r3, [r3, #22]
 8015646:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8015648:	6879      	ldr	r1, [r7, #4]
 801564a:	4828      	ldr	r0, [pc, #160]	@ (80156ec <tcp_abandon+0x174>)
 801564c:	f001 f952 	bl	80168f4 <tcp_pcb_remove>
 8015650:	4b27      	ldr	r3, [pc, #156]	@ (80156f0 <tcp_abandon+0x178>)
 8015652:	2201      	movs	r2, #1
 8015654:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801565a:	2b00      	cmp	r3, #0
 801565c:	d004      	beq.n	8015668 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015662:	4618      	mov	r0, r3
 8015664:	f000 fdfc 	bl	8016260 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801566c:	2b00      	cmp	r3, #0
 801566e:	d004      	beq.n	801567a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015674:	4618      	mov	r0, r3
 8015676:	f000 fdf3 	bl	8016260 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801567e:	2b00      	cmp	r3, #0
 8015680:	d004      	beq.n	801568c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015686:	4618      	mov	r0, r3
 8015688:	f000 fdea 	bl	8016260 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 801568c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801568e:	2b00      	cmp	r3, #0
 8015690:	d00e      	beq.n	80156b0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8015692:	6879      	ldr	r1, [r7, #4]
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	3304      	adds	r3, #4
 8015698:	687a      	ldr	r2, [r7, #4]
 801569a:	8b12      	ldrh	r2, [r2, #24]
 801569c:	9202      	str	r2, [sp, #8]
 801569e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80156a0:	9201      	str	r2, [sp, #4]
 80156a2:	9300      	str	r3, [sp, #0]
 80156a4:	460b      	mov	r3, r1
 80156a6:	697a      	ldr	r2, [r7, #20]
 80156a8:	69b9      	ldr	r1, [r7, #24]
 80156aa:	6878      	ldr	r0, [r7, #4]
 80156ac:	f005 fc14 	bl	801aed8 <tcp_rst>
    }
    last_state = pcb->state;
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	7d1b      	ldrb	r3, [r3, #20]
 80156b4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80156b6:	6878      	ldr	r0, [r7, #4]
 80156b8:	f7ff fcd8 	bl	801506c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80156bc:	693b      	ldr	r3, [r7, #16]
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d004      	beq.n	80156cc <tcp_abandon+0x154>
 80156c2:	693b      	ldr	r3, [r7, #16]
 80156c4:	f06f 010c 	mvn.w	r1, #12
 80156c8:	68f8      	ldr	r0, [r7, #12]
 80156ca:	4798      	blx	r3
  }
}
 80156cc:	3728      	adds	r7, #40	@ 0x28
 80156ce:	46bd      	mov	sp, r7
 80156d0:	bd80      	pop	{r7, pc}
 80156d2:	bf00      	nop
 80156d4:	08023868 	.word	0x08023868
 80156d8:	080239ac 	.word	0x080239ac
 80156dc:	080238ac 	.word	0x080238ac
 80156e0:	080239c8 	.word	0x080239c8
 80156e4:	2002d47c 	.word	0x2002d47c
 80156e8:	2002d470 	.word	0x2002d470
 80156ec:	2002d478 	.word	0x2002d478
 80156f0:	2002d480 	.word	0x2002d480

080156f4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80156f4:	b580      	push	{r7, lr}
 80156f6:	b082      	sub	sp, #8
 80156f8:	af00      	add	r7, sp, #0
 80156fa:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80156fc:	2101      	movs	r1, #1
 80156fe:	6878      	ldr	r0, [r7, #4]
 8015700:	f7ff ff3a 	bl	8015578 <tcp_abandon>
}
 8015704:	bf00      	nop
 8015706:	3708      	adds	r7, #8
 8015708:	46bd      	mov	sp, r7
 801570a:	bd80      	pop	{r7, pc}

0801570c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801570c:	b580      	push	{r7, lr}
 801570e:	b088      	sub	sp, #32
 8015710:	af00      	add	r7, sp, #0
 8015712:	60f8      	str	r0, [r7, #12]
 8015714:	60b9      	str	r1, [r7, #8]
 8015716:	4613      	mov	r3, r2
 8015718:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801571a:	2304      	movs	r3, #4
 801571c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801571e:	68bb      	ldr	r3, [r7, #8]
 8015720:	2b00      	cmp	r3, #0
 8015722:	d101      	bne.n	8015728 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8015724:	4b3e      	ldr	r3, [pc, #248]	@ (8015820 <tcp_bind+0x114>)
 8015726:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8015728:	68fb      	ldr	r3, [r7, #12]
 801572a:	2b00      	cmp	r3, #0
 801572c:	d109      	bne.n	8015742 <tcp_bind+0x36>
 801572e:	4b3d      	ldr	r3, [pc, #244]	@ (8015824 <tcp_bind+0x118>)
 8015730:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8015734:	493c      	ldr	r1, [pc, #240]	@ (8015828 <tcp_bind+0x11c>)
 8015736:	483d      	ldr	r0, [pc, #244]	@ (801582c <tcp_bind+0x120>)
 8015738:	f00b f82e 	bl	8020798 <iprintf>
 801573c:	f06f 030f 	mvn.w	r3, #15
 8015740:	e06a      	b.n	8015818 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8015742:	68fb      	ldr	r3, [r7, #12]
 8015744:	7d1b      	ldrb	r3, [r3, #20]
 8015746:	2b00      	cmp	r3, #0
 8015748:	d009      	beq.n	801575e <tcp_bind+0x52>
 801574a:	4b36      	ldr	r3, [pc, #216]	@ (8015824 <tcp_bind+0x118>)
 801574c:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8015750:	4937      	ldr	r1, [pc, #220]	@ (8015830 <tcp_bind+0x124>)
 8015752:	4836      	ldr	r0, [pc, #216]	@ (801582c <tcp_bind+0x120>)
 8015754:	f00b f820 	bl	8020798 <iprintf>
 8015758:	f06f 0305 	mvn.w	r3, #5
 801575c:	e05c      	b.n	8015818 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 801575e:	88fb      	ldrh	r3, [r7, #6]
 8015760:	2b00      	cmp	r3, #0
 8015762:	d109      	bne.n	8015778 <tcp_bind+0x6c>
    port = tcp_new_port();
 8015764:	f000 f914 	bl	8015990 <tcp_new_port>
 8015768:	4603      	mov	r3, r0
 801576a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801576c:	88fb      	ldrh	r3, [r7, #6]
 801576e:	2b00      	cmp	r3, #0
 8015770:	d135      	bne.n	80157de <tcp_bind+0xd2>
      return ERR_BUF;
 8015772:	f06f 0301 	mvn.w	r3, #1
 8015776:	e04f      	b.n	8015818 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8015778:	2300      	movs	r3, #0
 801577a:	61fb      	str	r3, [r7, #28]
 801577c:	e02b      	b.n	80157d6 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801577e:	4a2d      	ldr	r2, [pc, #180]	@ (8015834 <tcp_bind+0x128>)
 8015780:	69fb      	ldr	r3, [r7, #28]
 8015782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015786:	681b      	ldr	r3, [r3, #0]
 8015788:	61bb      	str	r3, [r7, #24]
 801578a:	e01e      	b.n	80157ca <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 801578c:	69bb      	ldr	r3, [r7, #24]
 801578e:	8adb      	ldrh	r3, [r3, #22]
 8015790:	88fa      	ldrh	r2, [r7, #6]
 8015792:	429a      	cmp	r2, r3
 8015794:	d116      	bne.n	80157c4 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8015796:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8015798:	2b00      	cmp	r3, #0
 801579a:	d010      	beq.n	80157be <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 801579c:	69bb      	ldr	r3, [r7, #24]
 801579e:	681b      	ldr	r3, [r3, #0]
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d00c      	beq.n	80157be <tcp_bind+0xb2>
 80157a4:	68bb      	ldr	r3, [r7, #8]
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d009      	beq.n	80157be <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80157aa:	68bb      	ldr	r3, [r7, #8]
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d005      	beq.n	80157be <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80157b2:	69bb      	ldr	r3, [r7, #24]
 80157b4:	681a      	ldr	r2, [r3, #0]
 80157b6:	68bb      	ldr	r3, [r7, #8]
 80157b8:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80157ba:	429a      	cmp	r2, r3
 80157bc:	d102      	bne.n	80157c4 <tcp_bind+0xb8>
              return ERR_USE;
 80157be:	f06f 0307 	mvn.w	r3, #7
 80157c2:	e029      	b.n	8015818 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80157c4:	69bb      	ldr	r3, [r7, #24]
 80157c6:	68db      	ldr	r3, [r3, #12]
 80157c8:	61bb      	str	r3, [r7, #24]
 80157ca:	69bb      	ldr	r3, [r7, #24]
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d1dd      	bne.n	801578c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 80157d0:	69fb      	ldr	r3, [r7, #28]
 80157d2:	3301      	adds	r3, #1
 80157d4:	61fb      	str	r3, [r7, #28]
 80157d6:	69fa      	ldr	r2, [r7, #28]
 80157d8:	697b      	ldr	r3, [r7, #20]
 80157da:	429a      	cmp	r2, r3
 80157dc:	dbcf      	blt.n	801577e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 80157de:	68bb      	ldr	r3, [r7, #8]
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d00c      	beq.n	80157fe <tcp_bind+0xf2>
 80157e4:	68bb      	ldr	r3, [r7, #8]
 80157e6:	681b      	ldr	r3, [r3, #0]
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d008      	beq.n	80157fe <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80157ec:	68bb      	ldr	r3, [r7, #8]
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d002      	beq.n	80157f8 <tcp_bind+0xec>
 80157f2:	68bb      	ldr	r3, [r7, #8]
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	e000      	b.n	80157fa <tcp_bind+0xee>
 80157f8:	2300      	movs	r3, #0
 80157fa:	68fa      	ldr	r2, [r7, #12]
 80157fc:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	88fa      	ldrh	r2, [r7, #6]
 8015802:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8015804:	4b0c      	ldr	r3, [pc, #48]	@ (8015838 <tcp_bind+0x12c>)
 8015806:	681a      	ldr	r2, [r3, #0]
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	60da      	str	r2, [r3, #12]
 801580c:	4a0a      	ldr	r2, [pc, #40]	@ (8015838 <tcp_bind+0x12c>)
 801580e:	68fb      	ldr	r3, [r7, #12]
 8015810:	6013      	str	r3, [r2, #0]
 8015812:	f005 fd23 	bl	801b25c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8015816:	2300      	movs	r3, #0
}
 8015818:	4618      	mov	r0, r3
 801581a:	3720      	adds	r7, #32
 801581c:	46bd      	mov	sp, r7
 801581e:	bd80      	pop	{r7, pc}
 8015820:	08026884 	.word	0x08026884
 8015824:	08023868 	.word	0x08023868
 8015828:	080239fc 	.word	0x080239fc
 801582c:	080238ac 	.word	0x080238ac
 8015830:	08023a14 	.word	0x08023a14
 8015834:	0802685c 	.word	0x0802685c
 8015838:	2002d470 	.word	0x2002d470

0801583c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801583c:	b580      	push	{r7, lr}
 801583e:	b084      	sub	sp, #16
 8015840:	af00      	add	r7, sp, #0
 8015842:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	2b00      	cmp	r3, #0
 8015848:	d106      	bne.n	8015858 <tcp_update_rcv_ann_wnd+0x1c>
 801584a:	4b25      	ldr	r3, [pc, #148]	@ (80158e0 <tcp_update_rcv_ann_wnd+0xa4>)
 801584c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8015850:	4924      	ldr	r1, [pc, #144]	@ (80158e4 <tcp_update_rcv_ann_wnd+0xa8>)
 8015852:	4825      	ldr	r0, [pc, #148]	@ (80158e8 <tcp_update_rcv_ann_wnd+0xac>)
 8015854:	f00a ffa0 	bl	8020798 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801585c:	687a      	ldr	r2, [r7, #4]
 801585e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8015860:	4413      	add	r3, r2
 8015862:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015868:	687a      	ldr	r2, [r7, #4]
 801586a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 801586c:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8015870:	bf28      	it	cs
 8015872:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8015876:	b292      	uxth	r2, r2
 8015878:	4413      	add	r3, r2
 801587a:	68fa      	ldr	r2, [r7, #12]
 801587c:	1ad3      	subs	r3, r2, r3
 801587e:	2b00      	cmp	r3, #0
 8015880:	db08      	blt.n	8015894 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801588e:	68fa      	ldr	r2, [r7, #12]
 8015890:	1ad3      	subs	r3, r2, r3
 8015892:	e020      	b.n	80158d6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801589c:	1ad3      	subs	r3, r2, r3
 801589e:	2b00      	cmp	r3, #0
 80158a0:	dd03      	ble.n	80158aa <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	2200      	movs	r2, #0
 80158a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80158a8:	e014      	b.n	80158d4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80158b2:	1ad3      	subs	r3, r2, r3
 80158b4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80158b6:	68bb      	ldr	r3, [r7, #8]
 80158b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80158bc:	d306      	bcc.n	80158cc <tcp_update_rcv_ann_wnd+0x90>
 80158be:	4b08      	ldr	r3, [pc, #32]	@ (80158e0 <tcp_update_rcv_ann_wnd+0xa4>)
 80158c0:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80158c4:	4909      	ldr	r1, [pc, #36]	@ (80158ec <tcp_update_rcv_ann_wnd+0xb0>)
 80158c6:	4808      	ldr	r0, [pc, #32]	@ (80158e8 <tcp_update_rcv_ann_wnd+0xac>)
 80158c8:	f00a ff66 	bl	8020798 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80158cc:	68bb      	ldr	r3, [r7, #8]
 80158ce:	b29a      	uxth	r2, r3
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80158d4:	2300      	movs	r3, #0
  }
}
 80158d6:	4618      	mov	r0, r3
 80158d8:	3710      	adds	r7, #16
 80158da:	46bd      	mov	sp, r7
 80158dc:	bd80      	pop	{r7, pc}
 80158de:	bf00      	nop
 80158e0:	08023868 	.word	0x08023868
 80158e4:	08023ac4 	.word	0x08023ac4
 80158e8:	080238ac 	.word	0x080238ac
 80158ec:	08023ae8 	.word	0x08023ae8

080158f0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80158f0:	b580      	push	{r7, lr}
 80158f2:	b084      	sub	sp, #16
 80158f4:	af00      	add	r7, sp, #0
 80158f6:	6078      	str	r0, [r7, #4]
 80158f8:	460b      	mov	r3, r1
 80158fa:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d107      	bne.n	8015912 <tcp_recved+0x22>
 8015902:	4b1f      	ldr	r3, [pc, #124]	@ (8015980 <tcp_recved+0x90>)
 8015904:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8015908:	491e      	ldr	r1, [pc, #120]	@ (8015984 <tcp_recved+0x94>)
 801590a:	481f      	ldr	r0, [pc, #124]	@ (8015988 <tcp_recved+0x98>)
 801590c:	f00a ff44 	bl	8020798 <iprintf>
 8015910:	e032      	b.n	8015978 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	7d1b      	ldrb	r3, [r3, #20]
 8015916:	2b01      	cmp	r3, #1
 8015918:	d106      	bne.n	8015928 <tcp_recved+0x38>
 801591a:	4b19      	ldr	r3, [pc, #100]	@ (8015980 <tcp_recved+0x90>)
 801591c:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8015920:	491a      	ldr	r1, [pc, #104]	@ (801598c <tcp_recved+0x9c>)
 8015922:	4819      	ldr	r0, [pc, #100]	@ (8015988 <tcp_recved+0x98>)
 8015924:	f00a ff38 	bl	8020798 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801592c:	887b      	ldrh	r3, [r7, #2]
 801592e:	4413      	add	r3, r2
 8015930:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8015932:	89fb      	ldrh	r3, [r7, #14]
 8015934:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8015938:	d804      	bhi.n	8015944 <tcp_recved+0x54>
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801593e:	89fa      	ldrh	r2, [r7, #14]
 8015940:	429a      	cmp	r2, r3
 8015942:	d204      	bcs.n	801594e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 801594a:	851a      	strh	r2, [r3, #40]	@ 0x28
 801594c:	e002      	b.n	8015954 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	89fa      	ldrh	r2, [r7, #14]
 8015952:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8015954:	6878      	ldr	r0, [r7, #4]
 8015956:	f7ff ff71 	bl	801583c <tcp_update_rcv_ann_wnd>
 801595a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801595c:	68bb      	ldr	r3, [r7, #8]
 801595e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8015962:	d309      	bcc.n	8015978 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	8b5b      	ldrh	r3, [r3, #26]
 8015968:	f043 0302 	orr.w	r3, r3, #2
 801596c:	b29a      	uxth	r2, r3
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015972:	6878      	ldr	r0, [r7, #4]
 8015974:	f004 fcdc 	bl	801a330 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8015978:	3710      	adds	r7, #16
 801597a:	46bd      	mov	sp, r7
 801597c:	bd80      	pop	{r7, pc}
 801597e:	bf00      	nop
 8015980:	08023868 	.word	0x08023868
 8015984:	08023b04 	.word	0x08023b04
 8015988:	080238ac 	.word	0x080238ac
 801598c:	08023b1c 	.word	0x08023b1c

08015990 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8015990:	b480      	push	{r7}
 8015992:	b083      	sub	sp, #12
 8015994:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8015996:	2300      	movs	r3, #0
 8015998:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801599a:	4b1e      	ldr	r3, [pc, #120]	@ (8015a14 <tcp_new_port+0x84>)
 801599c:	881b      	ldrh	r3, [r3, #0]
 801599e:	3301      	adds	r3, #1
 80159a0:	b29a      	uxth	r2, r3
 80159a2:	4b1c      	ldr	r3, [pc, #112]	@ (8015a14 <tcp_new_port+0x84>)
 80159a4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80159a6:	4b1b      	ldr	r3, [pc, #108]	@ (8015a14 <tcp_new_port+0x84>)
 80159a8:	881b      	ldrh	r3, [r3, #0]
 80159aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80159ae:	4293      	cmp	r3, r2
 80159b0:	d103      	bne.n	80159ba <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80159b2:	4b18      	ldr	r3, [pc, #96]	@ (8015a14 <tcp_new_port+0x84>)
 80159b4:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80159b8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80159ba:	2300      	movs	r3, #0
 80159bc:	71fb      	strb	r3, [r7, #7]
 80159be:	e01e      	b.n	80159fe <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80159c0:	79fb      	ldrb	r3, [r7, #7]
 80159c2:	4a15      	ldr	r2, [pc, #84]	@ (8015a18 <tcp_new_port+0x88>)
 80159c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80159c8:	681b      	ldr	r3, [r3, #0]
 80159ca:	603b      	str	r3, [r7, #0]
 80159cc:	e011      	b.n	80159f2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80159ce:	683b      	ldr	r3, [r7, #0]
 80159d0:	8ada      	ldrh	r2, [r3, #22]
 80159d2:	4b10      	ldr	r3, [pc, #64]	@ (8015a14 <tcp_new_port+0x84>)
 80159d4:	881b      	ldrh	r3, [r3, #0]
 80159d6:	429a      	cmp	r2, r3
 80159d8:	d108      	bne.n	80159ec <tcp_new_port+0x5c>
        n++;
 80159da:	88bb      	ldrh	r3, [r7, #4]
 80159dc:	3301      	adds	r3, #1
 80159de:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80159e0:	88bb      	ldrh	r3, [r7, #4]
 80159e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80159e6:	d3d8      	bcc.n	801599a <tcp_new_port+0xa>
          return 0;
 80159e8:	2300      	movs	r3, #0
 80159ea:	e00d      	b.n	8015a08 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80159ec:	683b      	ldr	r3, [r7, #0]
 80159ee:	68db      	ldr	r3, [r3, #12]
 80159f0:	603b      	str	r3, [r7, #0]
 80159f2:	683b      	ldr	r3, [r7, #0]
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d1ea      	bne.n	80159ce <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80159f8:	79fb      	ldrb	r3, [r7, #7]
 80159fa:	3301      	adds	r3, #1
 80159fc:	71fb      	strb	r3, [r7, #7]
 80159fe:	79fb      	ldrb	r3, [r7, #7]
 8015a00:	2b03      	cmp	r3, #3
 8015a02:	d9dd      	bls.n	80159c0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8015a04:	4b03      	ldr	r3, [pc, #12]	@ (8015a14 <tcp_new_port+0x84>)
 8015a06:	881b      	ldrh	r3, [r3, #0]
}
 8015a08:	4618      	mov	r0, r3
 8015a0a:	370c      	adds	r7, #12
 8015a0c:	46bd      	mov	sp, r7
 8015a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a12:	4770      	bx	lr
 8015a14:	20000068 	.word	0x20000068
 8015a18:	0802685c 	.word	0x0802685c

08015a1c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8015a1c:	b5b0      	push	{r4, r5, r7, lr}
 8015a1e:	b090      	sub	sp, #64	@ 0x40
 8015a20:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8015a22:	2300      	movs	r3, #0
 8015a24:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8015a28:	4b95      	ldr	r3, [pc, #596]	@ (8015c80 <tcp_slowtmr+0x264>)
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	3301      	adds	r3, #1
 8015a2e:	4a94      	ldr	r2, [pc, #592]	@ (8015c80 <tcp_slowtmr+0x264>)
 8015a30:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8015a32:	4b94      	ldr	r3, [pc, #592]	@ (8015c84 <tcp_slowtmr+0x268>)
 8015a34:	781b      	ldrb	r3, [r3, #0]
 8015a36:	3301      	adds	r3, #1
 8015a38:	b2da      	uxtb	r2, r3
 8015a3a:	4b92      	ldr	r3, [pc, #584]	@ (8015c84 <tcp_slowtmr+0x268>)
 8015a3c:	701a      	strb	r2, [r3, #0]
 8015a3e:	e000      	b.n	8015a42 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8015a40:	bf00      	nop
  prev = NULL;
 8015a42:	2300      	movs	r3, #0
 8015a44:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8015a46:	4b90      	ldr	r3, [pc, #576]	@ (8015c88 <tcp_slowtmr+0x26c>)
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8015a4c:	e29d      	b.n	8015f8a <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8015a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a50:	7d1b      	ldrb	r3, [r3, #20]
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d106      	bne.n	8015a64 <tcp_slowtmr+0x48>
 8015a56:	4b8d      	ldr	r3, [pc, #564]	@ (8015c8c <tcp_slowtmr+0x270>)
 8015a58:	f240 42be 	movw	r2, #1214	@ 0x4be
 8015a5c:	498c      	ldr	r1, [pc, #560]	@ (8015c90 <tcp_slowtmr+0x274>)
 8015a5e:	488d      	ldr	r0, [pc, #564]	@ (8015c94 <tcp_slowtmr+0x278>)
 8015a60:	f00a fe9a 	bl	8020798 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8015a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a66:	7d1b      	ldrb	r3, [r3, #20]
 8015a68:	2b01      	cmp	r3, #1
 8015a6a:	d106      	bne.n	8015a7a <tcp_slowtmr+0x5e>
 8015a6c:	4b87      	ldr	r3, [pc, #540]	@ (8015c8c <tcp_slowtmr+0x270>)
 8015a6e:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8015a72:	4989      	ldr	r1, [pc, #548]	@ (8015c98 <tcp_slowtmr+0x27c>)
 8015a74:	4887      	ldr	r0, [pc, #540]	@ (8015c94 <tcp_slowtmr+0x278>)
 8015a76:	f00a fe8f 	bl	8020798 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8015a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a7c:	7d1b      	ldrb	r3, [r3, #20]
 8015a7e:	2b0a      	cmp	r3, #10
 8015a80:	d106      	bne.n	8015a90 <tcp_slowtmr+0x74>
 8015a82:	4b82      	ldr	r3, [pc, #520]	@ (8015c8c <tcp_slowtmr+0x270>)
 8015a84:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8015a88:	4984      	ldr	r1, [pc, #528]	@ (8015c9c <tcp_slowtmr+0x280>)
 8015a8a:	4882      	ldr	r0, [pc, #520]	@ (8015c94 <tcp_slowtmr+0x278>)
 8015a8c:	f00a fe84 	bl	8020798 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8015a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a92:	7f9a      	ldrb	r2, [r3, #30]
 8015a94:	4b7b      	ldr	r3, [pc, #492]	@ (8015c84 <tcp_slowtmr+0x268>)
 8015a96:	781b      	ldrb	r3, [r3, #0]
 8015a98:	429a      	cmp	r2, r3
 8015a9a:	d105      	bne.n	8015aa8 <tcp_slowtmr+0x8c>
      prev = pcb;
 8015a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8015aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015aa2:	68db      	ldr	r3, [r3, #12]
 8015aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8015aa6:	e270      	b.n	8015f8a <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8015aa8:	4b76      	ldr	r3, [pc, #472]	@ (8015c84 <tcp_slowtmr+0x268>)
 8015aaa:	781a      	ldrb	r2, [r3, #0]
 8015aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015aae:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8015ab0:	2300      	movs	r3, #0
 8015ab2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8015ab6:	2300      	movs	r3, #0
 8015ab8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8015abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015abe:	7d1b      	ldrb	r3, [r3, #20]
 8015ac0:	2b02      	cmp	r3, #2
 8015ac2:	d10a      	bne.n	8015ada <tcp_slowtmr+0xbe>
 8015ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ac6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015aca:	2b05      	cmp	r3, #5
 8015acc:	d905      	bls.n	8015ada <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8015ace:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015ad2:	3301      	adds	r3, #1
 8015ad4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 8015ad8:	e11e      	b.n	8015d18 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8015ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015adc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015ae0:	2b0b      	cmp	r3, #11
 8015ae2:	d905      	bls.n	8015af0 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8015ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015ae8:	3301      	adds	r3, #1
 8015aea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015aee:	e113      	b.n	8015d18 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8015af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015af2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d075      	beq.n	8015be6 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8015afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	d006      	beq.n	8015b10 <tcp_slowtmr+0xf4>
 8015b02:	4b62      	ldr	r3, [pc, #392]	@ (8015c8c <tcp_slowtmr+0x270>)
 8015b04:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8015b08:	4965      	ldr	r1, [pc, #404]	@ (8015ca0 <tcp_slowtmr+0x284>)
 8015b0a:	4862      	ldr	r0, [pc, #392]	@ (8015c94 <tcp_slowtmr+0x278>)
 8015b0c:	f00a fe44 	bl	8020798 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8015b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d106      	bne.n	8015b26 <tcp_slowtmr+0x10a>
 8015b18:	4b5c      	ldr	r3, [pc, #368]	@ (8015c8c <tcp_slowtmr+0x270>)
 8015b1a:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8015b1e:	4961      	ldr	r1, [pc, #388]	@ (8015ca4 <tcp_slowtmr+0x288>)
 8015b20:	485c      	ldr	r0, [pc, #368]	@ (8015c94 <tcp_slowtmr+0x278>)
 8015b22:	f00a fe39 	bl	8020798 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8015b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b28:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8015b2c:	2b0b      	cmp	r3, #11
 8015b2e:	d905      	bls.n	8015b3c <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8015b30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015b34:	3301      	adds	r3, #1
 8015b36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015b3a:	e0ed      	b.n	8015d18 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8015b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b3e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8015b42:	3b01      	subs	r3, #1
 8015b44:	4a58      	ldr	r2, [pc, #352]	@ (8015ca8 <tcp_slowtmr+0x28c>)
 8015b46:	5cd3      	ldrb	r3, [r2, r3]
 8015b48:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8015b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b4c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8015b50:	7c7a      	ldrb	r2, [r7, #17]
 8015b52:	429a      	cmp	r2, r3
 8015b54:	d907      	bls.n	8015b66 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8015b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b58:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8015b5c:	3301      	adds	r3, #1
 8015b5e:	b2da      	uxtb	r2, r3
 8015b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b62:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8015b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b68:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8015b6c:	7c7a      	ldrb	r2, [r7, #17]
 8015b6e:	429a      	cmp	r2, r3
 8015b70:	f200 80d2 	bhi.w	8015d18 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8015b74:	2301      	movs	r3, #1
 8015b76:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8015b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d108      	bne.n	8015b94 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8015b82:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015b84:	f005 fa9c 	bl	801b0c0 <tcp_zero_window_probe>
 8015b88:	4603      	mov	r3, r0
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d014      	beq.n	8015bb8 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8015b8e:	2300      	movs	r3, #0
 8015b90:	623b      	str	r3, [r7, #32]
 8015b92:	e011      	b.n	8015bb8 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8015b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015b9a:	4619      	mov	r1, r3
 8015b9c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015b9e:	f004 f921 	bl	8019de4 <tcp_split_unsent_seg>
 8015ba2:	4603      	mov	r3, r0
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d107      	bne.n	8015bb8 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8015ba8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015baa:	f004 fbc1 	bl	801a330 <tcp_output>
 8015bae:	4603      	mov	r3, r0
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d101      	bne.n	8015bb8 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8015bb4:	2300      	movs	r3, #0
 8015bb6:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8015bb8:	6a3b      	ldr	r3, [r7, #32]
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	f000 80ac 	beq.w	8015d18 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8015bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015bc2:	2200      	movs	r2, #0
 8015bc4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8015bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015bca:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8015bce:	2b06      	cmp	r3, #6
 8015bd0:	f200 80a2 	bhi.w	8015d18 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8015bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015bd6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8015bda:	3301      	adds	r3, #1
 8015bdc:	b2da      	uxtb	r2, r3
 8015bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015be0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8015be4:	e098      	b.n	8015d18 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8015be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015be8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	db0f      	blt.n	8015c10 <tcp_slowtmr+0x1f4>
 8015bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015bf2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015bf6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8015bfa:	4293      	cmp	r3, r2
 8015bfc:	d008      	beq.n	8015c10 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8015bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c00:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015c04:	b29b      	uxth	r3, r3
 8015c06:	3301      	adds	r3, #1
 8015c08:	b29b      	uxth	r3, r3
 8015c0a:	b21a      	sxth	r2, r3
 8015c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c0e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8015c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c12:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8015c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c18:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8015c1c:	429a      	cmp	r2, r3
 8015c1e:	db7b      	blt.n	8015d18 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8015c20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015c22:	f004 fe85 	bl	801a930 <tcp_rexmit_rto_prepare>
 8015c26:	4603      	mov	r3, r0
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	d007      	beq.n	8015c3c <tcp_slowtmr+0x220>
 8015c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d171      	bne.n	8015d18 <tcp_slowtmr+0x2fc>
 8015c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d06d      	beq.n	8015d18 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8015c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c3e:	7d1b      	ldrb	r3, [r3, #20]
 8015c40:	2b02      	cmp	r3, #2
 8015c42:	d03a      	beq.n	8015cba <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8015c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015c4a:	2b0c      	cmp	r3, #12
 8015c4c:	bf28      	it	cs
 8015c4e:	230c      	movcs	r3, #12
 8015c50:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8015c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c54:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015c58:	10db      	asrs	r3, r3, #3
 8015c5a:	b21b      	sxth	r3, r3
 8015c5c:	461a      	mov	r2, r3
 8015c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c60:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015c64:	4413      	add	r3, r2
 8015c66:	7efa      	ldrb	r2, [r7, #27]
 8015c68:	4910      	ldr	r1, [pc, #64]	@ (8015cac <tcp_slowtmr+0x290>)
 8015c6a:	5c8a      	ldrb	r2, [r1, r2]
 8015c6c:	4093      	lsls	r3, r2
 8015c6e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8015c70:	697b      	ldr	r3, [r7, #20]
 8015c72:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8015c76:	4293      	cmp	r3, r2
 8015c78:	dc1a      	bgt.n	8015cb0 <tcp_slowtmr+0x294>
 8015c7a:	697b      	ldr	r3, [r7, #20]
 8015c7c:	b21a      	sxth	r2, r3
 8015c7e:	e019      	b.n	8015cb4 <tcp_slowtmr+0x298>
 8015c80:	2002d46c 	.word	0x2002d46c
 8015c84:	2002d482 	.word	0x2002d482
 8015c88:	2002d478 	.word	0x2002d478
 8015c8c:	08023868 	.word	0x08023868
 8015c90:	08023bac 	.word	0x08023bac
 8015c94:	080238ac 	.word	0x080238ac
 8015c98:	08023bd8 	.word	0x08023bd8
 8015c9c:	08023c04 	.word	0x08023c04
 8015ca0:	08023c34 	.word	0x08023c34
 8015ca4:	08023c68 	.word	0x08023c68
 8015ca8:	08026854 	.word	0x08026854
 8015cac:	08026844 	.word	0x08026844
 8015cb0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8015cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cb6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8015cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cbc:	2200      	movs	r2, #0
 8015cbe:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8015cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cc2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8015cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cc8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015ccc:	4293      	cmp	r3, r2
 8015cce:	bf28      	it	cs
 8015cd0:	4613      	movcs	r3, r2
 8015cd2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8015cd4:	8a7b      	ldrh	r3, [r7, #18]
 8015cd6:	085b      	lsrs	r3, r3, #1
 8015cd8:	b29a      	uxth	r2, r3
 8015cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cdc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8015ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ce2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8015ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ce8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015cea:	005b      	lsls	r3, r3, #1
 8015cec:	b29b      	uxth	r3, r3
 8015cee:	429a      	cmp	r2, r3
 8015cf0:	d206      	bcs.n	8015d00 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8015cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cf4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015cf6:	005b      	lsls	r3, r3, #1
 8015cf8:	b29a      	uxth	r2, r3
 8015cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cfc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8015d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d02:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8015d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d06:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8015d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d0c:	2200      	movs	r2, #0
 8015d0e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8015d12:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015d14:	f004 fe86 	bl	801aa24 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8015d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d1a:	7d1b      	ldrb	r3, [r3, #20]
 8015d1c:	2b06      	cmp	r3, #6
 8015d1e:	d111      	bne.n	8015d44 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8015d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d22:	8b5b      	ldrh	r3, [r3, #26]
 8015d24:	f003 0310 	and.w	r3, r3, #16
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d00b      	beq.n	8015d44 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015d2c:	4b9c      	ldr	r3, [pc, #624]	@ (8015fa0 <tcp_slowtmr+0x584>)
 8015d2e:	681a      	ldr	r2, [r3, #0]
 8015d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d32:	6a1b      	ldr	r3, [r3, #32]
 8015d34:	1ad3      	subs	r3, r2, r3
 8015d36:	2b28      	cmp	r3, #40	@ 0x28
 8015d38:	d904      	bls.n	8015d44 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8015d3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015d3e:	3301      	adds	r3, #1
 8015d40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8015d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d46:	7a5b      	ldrb	r3, [r3, #9]
 8015d48:	f003 0308 	and.w	r3, r3, #8
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d04a      	beq.n	8015de6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8015d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d52:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8015d54:	2b04      	cmp	r3, #4
 8015d56:	d003      	beq.n	8015d60 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8015d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d5a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8015d5c:	2b07      	cmp	r3, #7
 8015d5e:	d142      	bne.n	8015de6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015d60:	4b8f      	ldr	r3, [pc, #572]	@ (8015fa0 <tcp_slowtmr+0x584>)
 8015d62:	681a      	ldr	r2, [r3, #0]
 8015d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d66:	6a1b      	ldr	r3, [r3, #32]
 8015d68:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8015d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d6c:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8015d70:	4b8c      	ldr	r3, [pc, #560]	@ (8015fa4 <tcp_slowtmr+0x588>)
 8015d72:	440b      	add	r3, r1
 8015d74:	498c      	ldr	r1, [pc, #560]	@ (8015fa8 <tcp_slowtmr+0x58c>)
 8015d76:	fba1 1303 	umull	r1, r3, r1, r3
 8015d7a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015d7c:	429a      	cmp	r2, r3
 8015d7e:	d90a      	bls.n	8015d96 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8015d80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015d84:	3301      	adds	r3, #1
 8015d86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8015d8a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015d8e:	3301      	adds	r3, #1
 8015d90:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8015d94:	e027      	b.n	8015de6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015d96:	4b82      	ldr	r3, [pc, #520]	@ (8015fa0 <tcp_slowtmr+0x584>)
 8015d98:	681a      	ldr	r2, [r3, #0]
 8015d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d9c:	6a1b      	ldr	r3, [r3, #32]
 8015d9e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8015da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015da2:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8015da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015da8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8015dac:	4618      	mov	r0, r3
 8015dae:	4b7f      	ldr	r3, [pc, #508]	@ (8015fac <tcp_slowtmr+0x590>)
 8015db0:	fb00 f303 	mul.w	r3, r0, r3
 8015db4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8015db6:	497c      	ldr	r1, [pc, #496]	@ (8015fa8 <tcp_slowtmr+0x58c>)
 8015db8:	fba1 1303 	umull	r1, r3, r1, r3
 8015dbc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015dbe:	429a      	cmp	r2, r3
 8015dc0:	d911      	bls.n	8015de6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8015dc2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015dc4:	f005 f93c 	bl	801b040 <tcp_keepalive>
 8015dc8:	4603      	mov	r3, r0
 8015dca:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8015dce:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d107      	bne.n	8015de6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8015dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dd8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8015ddc:	3301      	adds	r3, #1
 8015dde:	b2da      	uxtb	r2, r3
 8015de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015de2:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8015de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015de8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d011      	beq.n	8015e12 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8015dee:	4b6c      	ldr	r3, [pc, #432]	@ (8015fa0 <tcp_slowtmr+0x584>)
 8015df0:	681a      	ldr	r2, [r3, #0]
 8015df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015df4:	6a1b      	ldr	r3, [r3, #32]
 8015df6:	1ad2      	subs	r2, r2, r3
 8015df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dfa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8015dfe:	4619      	mov	r1, r3
 8015e00:	460b      	mov	r3, r1
 8015e02:	005b      	lsls	r3, r3, #1
 8015e04:	440b      	add	r3, r1
 8015e06:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8015e08:	429a      	cmp	r2, r3
 8015e0a:	d302      	bcc.n	8015e12 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8015e0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015e0e:	f000 fedb 	bl	8016bc8 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8015e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e14:	7d1b      	ldrb	r3, [r3, #20]
 8015e16:	2b03      	cmp	r3, #3
 8015e18:	d10b      	bne.n	8015e32 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015e1a:	4b61      	ldr	r3, [pc, #388]	@ (8015fa0 <tcp_slowtmr+0x584>)
 8015e1c:	681a      	ldr	r2, [r3, #0]
 8015e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e20:	6a1b      	ldr	r3, [r3, #32]
 8015e22:	1ad3      	subs	r3, r2, r3
 8015e24:	2b28      	cmp	r3, #40	@ 0x28
 8015e26:	d904      	bls.n	8015e32 <tcp_slowtmr+0x416>
        ++pcb_remove;
 8015e28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015e2c:	3301      	adds	r3, #1
 8015e2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8015e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e34:	7d1b      	ldrb	r3, [r3, #20]
 8015e36:	2b09      	cmp	r3, #9
 8015e38:	d10b      	bne.n	8015e52 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8015e3a:	4b59      	ldr	r3, [pc, #356]	@ (8015fa0 <tcp_slowtmr+0x584>)
 8015e3c:	681a      	ldr	r2, [r3, #0]
 8015e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e40:	6a1b      	ldr	r3, [r3, #32]
 8015e42:	1ad3      	subs	r3, r2, r3
 8015e44:	2bf0      	cmp	r3, #240	@ 0xf0
 8015e46:	d904      	bls.n	8015e52 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8015e48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015e4c:	3301      	adds	r3, #1
 8015e4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8015e52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d060      	beq.n	8015f1c <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8015e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015e60:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8015e62:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015e64:	f000 fcf6 	bl	8016854 <tcp_pcb_purge>
      if (prev != NULL) {
 8015e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d010      	beq.n	8015e90 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8015e6e:	4b50      	ldr	r3, [pc, #320]	@ (8015fb0 <tcp_slowtmr+0x594>)
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015e74:	429a      	cmp	r2, r3
 8015e76:	d106      	bne.n	8015e86 <tcp_slowtmr+0x46a>
 8015e78:	4b4e      	ldr	r3, [pc, #312]	@ (8015fb4 <tcp_slowtmr+0x598>)
 8015e7a:	f240 526d 	movw	r2, #1389	@ 0x56d
 8015e7e:	494e      	ldr	r1, [pc, #312]	@ (8015fb8 <tcp_slowtmr+0x59c>)
 8015e80:	484e      	ldr	r0, [pc, #312]	@ (8015fbc <tcp_slowtmr+0x5a0>)
 8015e82:	f00a fc89 	bl	8020798 <iprintf>
        prev->next = pcb->next;
 8015e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e88:	68da      	ldr	r2, [r3, #12]
 8015e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e8c:	60da      	str	r2, [r3, #12]
 8015e8e:	e00f      	b.n	8015eb0 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8015e90:	4b47      	ldr	r3, [pc, #284]	@ (8015fb0 <tcp_slowtmr+0x594>)
 8015e92:	681b      	ldr	r3, [r3, #0]
 8015e94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015e96:	429a      	cmp	r2, r3
 8015e98:	d006      	beq.n	8015ea8 <tcp_slowtmr+0x48c>
 8015e9a:	4b46      	ldr	r3, [pc, #280]	@ (8015fb4 <tcp_slowtmr+0x598>)
 8015e9c:	f240 5271 	movw	r2, #1393	@ 0x571
 8015ea0:	4947      	ldr	r1, [pc, #284]	@ (8015fc0 <tcp_slowtmr+0x5a4>)
 8015ea2:	4846      	ldr	r0, [pc, #280]	@ (8015fbc <tcp_slowtmr+0x5a0>)
 8015ea4:	f00a fc78 	bl	8020798 <iprintf>
        tcp_active_pcbs = pcb->next;
 8015ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015eaa:	68db      	ldr	r3, [r3, #12]
 8015eac:	4a40      	ldr	r2, [pc, #256]	@ (8015fb0 <tcp_slowtmr+0x594>)
 8015eae:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8015eb0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d013      	beq.n	8015ee0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8015eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015eba:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8015ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ebe:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8015ec0:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8015ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ec4:	3304      	adds	r3, #4
 8015ec6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015ec8:	8ad2      	ldrh	r2, [r2, #22]
 8015eca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015ecc:	8b09      	ldrh	r1, [r1, #24]
 8015ece:	9102      	str	r1, [sp, #8]
 8015ed0:	9201      	str	r2, [sp, #4]
 8015ed2:	9300      	str	r3, [sp, #0]
 8015ed4:	462b      	mov	r3, r5
 8015ed6:	4622      	mov	r2, r4
 8015ed8:	4601      	mov	r1, r0
 8015eda:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015edc:	f004 fffc 	bl	801aed8 <tcp_rst>
      err_arg = pcb->callback_arg;
 8015ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ee2:	691b      	ldr	r3, [r3, #16]
 8015ee4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8015ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ee8:	7d1b      	ldrb	r3, [r3, #20]
 8015eea:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8015eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015eee:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8015ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ef2:	68db      	ldr	r3, [r3, #12]
 8015ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8015ef6:	6838      	ldr	r0, [r7, #0]
 8015ef8:	f7ff f8b8 	bl	801506c <tcp_free>
      tcp_active_pcbs_changed = 0;
 8015efc:	4b31      	ldr	r3, [pc, #196]	@ (8015fc4 <tcp_slowtmr+0x5a8>)
 8015efe:	2200      	movs	r2, #0
 8015f00:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8015f02:	68fb      	ldr	r3, [r7, #12]
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d004      	beq.n	8015f12 <tcp_slowtmr+0x4f6>
 8015f08:	68fb      	ldr	r3, [r7, #12]
 8015f0a:	f06f 010c 	mvn.w	r1, #12
 8015f0e:	68b8      	ldr	r0, [r7, #8]
 8015f10:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8015f12:	4b2c      	ldr	r3, [pc, #176]	@ (8015fc4 <tcp_slowtmr+0x5a8>)
 8015f14:	781b      	ldrb	r3, [r3, #0]
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d037      	beq.n	8015f8a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8015f1a:	e592      	b.n	8015a42 <tcp_slowtmr+0x26>
      prev = pcb;
 8015f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8015f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f22:	68db      	ldr	r3, [r3, #12]
 8015f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8015f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f28:	7f1b      	ldrb	r3, [r3, #28]
 8015f2a:	3301      	adds	r3, #1
 8015f2c:	b2da      	uxtb	r2, r3
 8015f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f30:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8015f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f34:	7f1a      	ldrb	r2, [r3, #28]
 8015f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f38:	7f5b      	ldrb	r3, [r3, #29]
 8015f3a:	429a      	cmp	r2, r3
 8015f3c:	d325      	bcc.n	8015f8a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8015f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f40:	2200      	movs	r2, #0
 8015f42:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8015f44:	4b1f      	ldr	r3, [pc, #124]	@ (8015fc4 <tcp_slowtmr+0x5a8>)
 8015f46:	2200      	movs	r2, #0
 8015f48:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8015f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	d00b      	beq.n	8015f6c <tcp_slowtmr+0x550>
 8015f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015f5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015f5c:	6912      	ldr	r2, [r2, #16]
 8015f5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015f60:	4610      	mov	r0, r2
 8015f62:	4798      	blx	r3
 8015f64:	4603      	mov	r3, r0
 8015f66:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8015f6a:	e002      	b.n	8015f72 <tcp_slowtmr+0x556>
 8015f6c:	2300      	movs	r3, #0
 8015f6e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8015f72:	4b14      	ldr	r3, [pc, #80]	@ (8015fc4 <tcp_slowtmr+0x5a8>)
 8015f74:	781b      	ldrb	r3, [r3, #0]
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	f47f ad62 	bne.w	8015a40 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8015f7c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d102      	bne.n	8015f8a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8015f84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015f86:	f004 f9d3 	bl	801a330 <tcp_output>
  while (pcb != NULL) {
 8015f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	f47f ad5e 	bne.w	8015a4e <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8015f92:	2300      	movs	r3, #0
 8015f94:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8015f96:	4b0c      	ldr	r3, [pc, #48]	@ (8015fc8 <tcp_slowtmr+0x5ac>)
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8015f9c:	e069      	b.n	8016072 <tcp_slowtmr+0x656>
 8015f9e:	bf00      	nop
 8015fa0:	2002d46c 	.word	0x2002d46c
 8015fa4:	000a4cb8 	.word	0x000a4cb8
 8015fa8:	10624dd3 	.word	0x10624dd3
 8015fac:	000124f8 	.word	0x000124f8
 8015fb0:	2002d478 	.word	0x2002d478
 8015fb4:	08023868 	.word	0x08023868
 8015fb8:	08023ca0 	.word	0x08023ca0
 8015fbc:	080238ac 	.word	0x080238ac
 8015fc0:	08023ccc 	.word	0x08023ccc
 8015fc4:	2002d480 	.word	0x2002d480
 8015fc8:	2002d47c 	.word	0x2002d47c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8015fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fce:	7d1b      	ldrb	r3, [r3, #20]
 8015fd0:	2b0a      	cmp	r3, #10
 8015fd2:	d006      	beq.n	8015fe2 <tcp_slowtmr+0x5c6>
 8015fd4:	4b2b      	ldr	r3, [pc, #172]	@ (8016084 <tcp_slowtmr+0x668>)
 8015fd6:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8015fda:	492b      	ldr	r1, [pc, #172]	@ (8016088 <tcp_slowtmr+0x66c>)
 8015fdc:	482b      	ldr	r0, [pc, #172]	@ (801608c <tcp_slowtmr+0x670>)
 8015fde:	f00a fbdb 	bl	8020798 <iprintf>
    pcb_remove = 0;
 8015fe2:	2300      	movs	r3, #0
 8015fe4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8015fe8:	4b29      	ldr	r3, [pc, #164]	@ (8016090 <tcp_slowtmr+0x674>)
 8015fea:	681a      	ldr	r2, [r3, #0]
 8015fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fee:	6a1b      	ldr	r3, [r3, #32]
 8015ff0:	1ad3      	subs	r3, r2, r3
 8015ff2:	2bf0      	cmp	r3, #240	@ 0xf0
 8015ff4:	d904      	bls.n	8016000 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8015ff6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015ffa:	3301      	adds	r3, #1
 8015ffc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8016000:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016004:	2b00      	cmp	r3, #0
 8016006:	d02f      	beq.n	8016068 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8016008:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801600a:	f000 fc23 	bl	8016854 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801600e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016010:	2b00      	cmp	r3, #0
 8016012:	d010      	beq.n	8016036 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8016014:	4b1f      	ldr	r3, [pc, #124]	@ (8016094 <tcp_slowtmr+0x678>)
 8016016:	681b      	ldr	r3, [r3, #0]
 8016018:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801601a:	429a      	cmp	r2, r3
 801601c:	d106      	bne.n	801602c <tcp_slowtmr+0x610>
 801601e:	4b19      	ldr	r3, [pc, #100]	@ (8016084 <tcp_slowtmr+0x668>)
 8016020:	f240 52af 	movw	r2, #1455	@ 0x5af
 8016024:	491c      	ldr	r1, [pc, #112]	@ (8016098 <tcp_slowtmr+0x67c>)
 8016026:	4819      	ldr	r0, [pc, #100]	@ (801608c <tcp_slowtmr+0x670>)
 8016028:	f00a fbb6 	bl	8020798 <iprintf>
        prev->next = pcb->next;
 801602c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801602e:	68da      	ldr	r2, [r3, #12]
 8016030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016032:	60da      	str	r2, [r3, #12]
 8016034:	e00f      	b.n	8016056 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8016036:	4b17      	ldr	r3, [pc, #92]	@ (8016094 <tcp_slowtmr+0x678>)
 8016038:	681b      	ldr	r3, [r3, #0]
 801603a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801603c:	429a      	cmp	r2, r3
 801603e:	d006      	beq.n	801604e <tcp_slowtmr+0x632>
 8016040:	4b10      	ldr	r3, [pc, #64]	@ (8016084 <tcp_slowtmr+0x668>)
 8016042:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8016046:	4915      	ldr	r1, [pc, #84]	@ (801609c <tcp_slowtmr+0x680>)
 8016048:	4810      	ldr	r0, [pc, #64]	@ (801608c <tcp_slowtmr+0x670>)
 801604a:	f00a fba5 	bl	8020798 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801604e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016050:	68db      	ldr	r3, [r3, #12]
 8016052:	4a10      	ldr	r2, [pc, #64]	@ (8016094 <tcp_slowtmr+0x678>)
 8016054:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8016056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016058:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801605a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801605c:	68db      	ldr	r3, [r3, #12]
 801605e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8016060:	69f8      	ldr	r0, [r7, #28]
 8016062:	f7ff f803 	bl	801506c <tcp_free>
 8016066:	e004      	b.n	8016072 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8016068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801606a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801606c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801606e:	68db      	ldr	r3, [r3, #12]
 8016070:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8016072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016074:	2b00      	cmp	r3, #0
 8016076:	d1a9      	bne.n	8015fcc <tcp_slowtmr+0x5b0>
    }
  }
}
 8016078:	bf00      	nop
 801607a:	bf00      	nop
 801607c:	3730      	adds	r7, #48	@ 0x30
 801607e:	46bd      	mov	sp, r7
 8016080:	bdb0      	pop	{r4, r5, r7, pc}
 8016082:	bf00      	nop
 8016084:	08023868 	.word	0x08023868
 8016088:	08023cf8 	.word	0x08023cf8
 801608c:	080238ac 	.word	0x080238ac
 8016090:	2002d46c 	.word	0x2002d46c
 8016094:	2002d47c 	.word	0x2002d47c
 8016098:	08023d28 	.word	0x08023d28
 801609c:	08023d50 	.word	0x08023d50

080160a0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80160a0:	b580      	push	{r7, lr}
 80160a2:	b082      	sub	sp, #8
 80160a4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80160a6:	4b2d      	ldr	r3, [pc, #180]	@ (801615c <tcp_fasttmr+0xbc>)
 80160a8:	781b      	ldrb	r3, [r3, #0]
 80160aa:	3301      	adds	r3, #1
 80160ac:	b2da      	uxtb	r2, r3
 80160ae:	4b2b      	ldr	r3, [pc, #172]	@ (801615c <tcp_fasttmr+0xbc>)
 80160b0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80160b2:	4b2b      	ldr	r3, [pc, #172]	@ (8016160 <tcp_fasttmr+0xc0>)
 80160b4:	681b      	ldr	r3, [r3, #0]
 80160b6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80160b8:	e048      	b.n	801614c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	7f9a      	ldrb	r2, [r3, #30]
 80160be:	4b27      	ldr	r3, [pc, #156]	@ (801615c <tcp_fasttmr+0xbc>)
 80160c0:	781b      	ldrb	r3, [r3, #0]
 80160c2:	429a      	cmp	r2, r3
 80160c4:	d03f      	beq.n	8016146 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80160c6:	4b25      	ldr	r3, [pc, #148]	@ (801615c <tcp_fasttmr+0xbc>)
 80160c8:	781a      	ldrb	r2, [r3, #0]
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	8b5b      	ldrh	r3, [r3, #26]
 80160d2:	f003 0301 	and.w	r3, r3, #1
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d010      	beq.n	80160fc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	8b5b      	ldrh	r3, [r3, #26]
 80160de:	f043 0302 	orr.w	r3, r3, #2
 80160e2:	b29a      	uxth	r2, r3
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80160e8:	6878      	ldr	r0, [r7, #4]
 80160ea:	f004 f921 	bl	801a330 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	8b5b      	ldrh	r3, [r3, #26]
 80160f2:	f023 0303 	bic.w	r3, r3, #3
 80160f6:	b29a      	uxth	r2, r3
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	8b5b      	ldrh	r3, [r3, #26]
 8016100:	f003 0308 	and.w	r3, r3, #8
 8016104:	2b00      	cmp	r3, #0
 8016106:	d009      	beq.n	801611c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	8b5b      	ldrh	r3, [r3, #26]
 801610c:	f023 0308 	bic.w	r3, r3, #8
 8016110:	b29a      	uxth	r2, r3
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8016116:	6878      	ldr	r0, [r7, #4]
 8016118:	f7ff f93c 	bl	8015394 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	68db      	ldr	r3, [r3, #12]
 8016120:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016126:	2b00      	cmp	r3, #0
 8016128:	d00a      	beq.n	8016140 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801612a:	4b0e      	ldr	r3, [pc, #56]	@ (8016164 <tcp_fasttmr+0xc4>)
 801612c:	2200      	movs	r2, #0
 801612e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8016130:	6878      	ldr	r0, [r7, #4]
 8016132:	f000 f819 	bl	8016168 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8016136:	4b0b      	ldr	r3, [pc, #44]	@ (8016164 <tcp_fasttmr+0xc4>)
 8016138:	781b      	ldrb	r3, [r3, #0]
 801613a:	2b00      	cmp	r3, #0
 801613c:	d000      	beq.n	8016140 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801613e:	e7b8      	b.n	80160b2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8016140:	683b      	ldr	r3, [r7, #0]
 8016142:	607b      	str	r3, [r7, #4]
 8016144:	e002      	b.n	801614c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	68db      	ldr	r3, [r3, #12]
 801614a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	2b00      	cmp	r3, #0
 8016150:	d1b3      	bne.n	80160ba <tcp_fasttmr+0x1a>
    }
  }
}
 8016152:	bf00      	nop
 8016154:	bf00      	nop
 8016156:	3708      	adds	r7, #8
 8016158:	46bd      	mov	sp, r7
 801615a:	bd80      	pop	{r7, pc}
 801615c:	2002d482 	.word	0x2002d482
 8016160:	2002d478 	.word	0x2002d478
 8016164:	2002d480 	.word	0x2002d480

08016168 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8016168:	b590      	push	{r4, r7, lr}
 801616a:	b085      	sub	sp, #20
 801616c:	af00      	add	r7, sp, #0
 801616e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	2b00      	cmp	r3, #0
 8016174:	d109      	bne.n	801618a <tcp_process_refused_data+0x22>
 8016176:	4b37      	ldr	r3, [pc, #220]	@ (8016254 <tcp_process_refused_data+0xec>)
 8016178:	f240 6209 	movw	r2, #1545	@ 0x609
 801617c:	4936      	ldr	r1, [pc, #216]	@ (8016258 <tcp_process_refused_data+0xf0>)
 801617e:	4837      	ldr	r0, [pc, #220]	@ (801625c <tcp_process_refused_data+0xf4>)
 8016180:	f00a fb0a 	bl	8020798 <iprintf>
 8016184:	f06f 030f 	mvn.w	r3, #15
 8016188:	e060      	b.n	801624c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801618e:	7b5b      	ldrb	r3, [r3, #13]
 8016190:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016196:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	2200      	movs	r2, #0
 801619c:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	d00b      	beq.n	80161c0 <tcp_process_refused_data+0x58>
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	6918      	ldr	r0, [r3, #16]
 80161b2:	2300      	movs	r3, #0
 80161b4:	68ba      	ldr	r2, [r7, #8]
 80161b6:	6879      	ldr	r1, [r7, #4]
 80161b8:	47a0      	blx	r4
 80161ba:	4603      	mov	r3, r0
 80161bc:	73fb      	strb	r3, [r7, #15]
 80161be:	e007      	b.n	80161d0 <tcp_process_refused_data+0x68>
 80161c0:	2300      	movs	r3, #0
 80161c2:	68ba      	ldr	r2, [r7, #8]
 80161c4:	6879      	ldr	r1, [r7, #4]
 80161c6:	2000      	movs	r0, #0
 80161c8:	f000 f8a4 	bl	8016314 <tcp_recv_null>
 80161cc:	4603      	mov	r3, r0
 80161ce:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80161d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d12a      	bne.n	801622e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80161d8:	7bbb      	ldrb	r3, [r7, #14]
 80161da:	f003 0320 	and.w	r3, r3, #32
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d033      	beq.n	801624a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80161e6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80161ea:	d005      	beq.n	80161f8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80161f0:	3301      	adds	r3, #1
 80161f2:	b29a      	uxth	r2, r3
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d00b      	beq.n	801621a <tcp_process_refused_data+0xb2>
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	6918      	ldr	r0, [r3, #16]
 801620c:	2300      	movs	r3, #0
 801620e:	2200      	movs	r2, #0
 8016210:	6879      	ldr	r1, [r7, #4]
 8016212:	47a0      	blx	r4
 8016214:	4603      	mov	r3, r0
 8016216:	73fb      	strb	r3, [r7, #15]
 8016218:	e001      	b.n	801621e <tcp_process_refused_data+0xb6>
 801621a:	2300      	movs	r3, #0
 801621c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801621e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016222:	f113 0f0d 	cmn.w	r3, #13
 8016226:	d110      	bne.n	801624a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8016228:	f06f 030c 	mvn.w	r3, #12
 801622c:	e00e      	b.n	801624c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801622e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016232:	f113 0f0d 	cmn.w	r3, #13
 8016236:	d102      	bne.n	801623e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8016238:	f06f 030c 	mvn.w	r3, #12
 801623c:	e006      	b.n	801624c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	68ba      	ldr	r2, [r7, #8]
 8016242:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8016244:	f06f 0304 	mvn.w	r3, #4
 8016248:	e000      	b.n	801624c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801624a:	2300      	movs	r3, #0
}
 801624c:	4618      	mov	r0, r3
 801624e:	3714      	adds	r7, #20
 8016250:	46bd      	mov	sp, r7
 8016252:	bd90      	pop	{r4, r7, pc}
 8016254:	08023868 	.word	0x08023868
 8016258:	08023d78 	.word	0x08023d78
 801625c:	080238ac 	.word	0x080238ac

08016260 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8016260:	b580      	push	{r7, lr}
 8016262:	b084      	sub	sp, #16
 8016264:	af00      	add	r7, sp, #0
 8016266:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8016268:	e007      	b.n	801627a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	681b      	ldr	r3, [r3, #0]
 801626e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8016270:	6878      	ldr	r0, [r7, #4]
 8016272:	f000 f80a 	bl	801628a <tcp_seg_free>
    seg = next;
 8016276:	68fb      	ldr	r3, [r7, #12]
 8016278:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	2b00      	cmp	r3, #0
 801627e:	d1f4      	bne.n	801626a <tcp_segs_free+0xa>
  }
}
 8016280:	bf00      	nop
 8016282:	bf00      	nop
 8016284:	3710      	adds	r7, #16
 8016286:	46bd      	mov	sp, r7
 8016288:	bd80      	pop	{r7, pc}

0801628a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801628a:	b580      	push	{r7, lr}
 801628c:	b082      	sub	sp, #8
 801628e:	af00      	add	r7, sp, #0
 8016290:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	2b00      	cmp	r3, #0
 8016296:	d00c      	beq.n	80162b2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	685b      	ldr	r3, [r3, #4]
 801629c:	2b00      	cmp	r3, #0
 801629e:	d004      	beq.n	80162aa <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	685b      	ldr	r3, [r3, #4]
 80162a4:	4618      	mov	r0, r3
 80162a6:	f7fe fbe9 	bl	8014a7c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80162aa:	6879      	ldr	r1, [r7, #4]
 80162ac:	2003      	movs	r0, #3
 80162ae:	f7fd fbff 	bl	8013ab0 <memp_free>
  }
}
 80162b2:	bf00      	nop
 80162b4:	3708      	adds	r7, #8
 80162b6:	46bd      	mov	sp, r7
 80162b8:	bd80      	pop	{r7, pc}
	...

080162bc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80162bc:	b580      	push	{r7, lr}
 80162be:	b084      	sub	sp, #16
 80162c0:	af00      	add	r7, sp, #0
 80162c2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d106      	bne.n	80162d8 <tcp_seg_copy+0x1c>
 80162ca:	4b0f      	ldr	r3, [pc, #60]	@ (8016308 <tcp_seg_copy+0x4c>)
 80162cc:	f240 6282 	movw	r2, #1666	@ 0x682
 80162d0:	490e      	ldr	r1, [pc, #56]	@ (801630c <tcp_seg_copy+0x50>)
 80162d2:	480f      	ldr	r0, [pc, #60]	@ (8016310 <tcp_seg_copy+0x54>)
 80162d4:	f00a fa60 	bl	8020798 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80162d8:	2003      	movs	r0, #3
 80162da:	f7fd fb6d 	bl	80139b8 <memp_malloc>
 80162de:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d101      	bne.n	80162ea <tcp_seg_copy+0x2e>
    return NULL;
 80162e6:	2300      	movs	r3, #0
 80162e8:	e00a      	b.n	8016300 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80162ea:	2214      	movs	r2, #20
 80162ec:	6879      	ldr	r1, [r7, #4]
 80162ee:	68f8      	ldr	r0, [r7, #12]
 80162f0:	f00a fc85 	bl	8020bfe <memcpy>
  pbuf_ref(cseg->p);
 80162f4:	68fb      	ldr	r3, [r7, #12]
 80162f6:	685b      	ldr	r3, [r3, #4]
 80162f8:	4618      	mov	r0, r3
 80162fa:	f7fe fc7d 	bl	8014bf8 <pbuf_ref>
  return cseg;
 80162fe:	68fb      	ldr	r3, [r7, #12]
}
 8016300:	4618      	mov	r0, r3
 8016302:	3710      	adds	r7, #16
 8016304:	46bd      	mov	sp, r7
 8016306:	bd80      	pop	{r7, pc}
 8016308:	08023868 	.word	0x08023868
 801630c:	08023dbc 	.word	0x08023dbc
 8016310:	080238ac 	.word	0x080238ac

08016314 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8016314:	b580      	push	{r7, lr}
 8016316:	b084      	sub	sp, #16
 8016318:	af00      	add	r7, sp, #0
 801631a:	60f8      	str	r0, [r7, #12]
 801631c:	60b9      	str	r1, [r7, #8]
 801631e:	607a      	str	r2, [r7, #4]
 8016320:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8016322:	68bb      	ldr	r3, [r7, #8]
 8016324:	2b00      	cmp	r3, #0
 8016326:	d109      	bne.n	801633c <tcp_recv_null+0x28>
 8016328:	4b12      	ldr	r3, [pc, #72]	@ (8016374 <tcp_recv_null+0x60>)
 801632a:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801632e:	4912      	ldr	r1, [pc, #72]	@ (8016378 <tcp_recv_null+0x64>)
 8016330:	4812      	ldr	r0, [pc, #72]	@ (801637c <tcp_recv_null+0x68>)
 8016332:	f00a fa31 	bl	8020798 <iprintf>
 8016336:	f06f 030f 	mvn.w	r3, #15
 801633a:	e016      	b.n	801636a <tcp_recv_null+0x56>

  if (p != NULL) {
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	2b00      	cmp	r3, #0
 8016340:	d009      	beq.n	8016356 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	891b      	ldrh	r3, [r3, #8]
 8016346:	4619      	mov	r1, r3
 8016348:	68b8      	ldr	r0, [r7, #8]
 801634a:	f7ff fad1 	bl	80158f0 <tcp_recved>
    pbuf_free(p);
 801634e:	6878      	ldr	r0, [r7, #4]
 8016350:	f7fe fb94 	bl	8014a7c <pbuf_free>
 8016354:	e008      	b.n	8016368 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8016356:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801635a:	2b00      	cmp	r3, #0
 801635c:	d104      	bne.n	8016368 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801635e:	68b8      	ldr	r0, [r7, #8]
 8016360:	f7ff f882 	bl	8015468 <tcp_close>
 8016364:	4603      	mov	r3, r0
 8016366:	e000      	b.n	801636a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8016368:	2300      	movs	r3, #0
}
 801636a:	4618      	mov	r0, r3
 801636c:	3710      	adds	r7, #16
 801636e:	46bd      	mov	sp, r7
 8016370:	bd80      	pop	{r7, pc}
 8016372:	bf00      	nop
 8016374:	08023868 	.word	0x08023868
 8016378:	08023dd8 	.word	0x08023dd8
 801637c:	080238ac 	.word	0x080238ac

08016380 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8016380:	b580      	push	{r7, lr}
 8016382:	b086      	sub	sp, #24
 8016384:	af00      	add	r7, sp, #0
 8016386:	4603      	mov	r3, r0
 8016388:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801638a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801638e:	2b00      	cmp	r3, #0
 8016390:	db01      	blt.n	8016396 <tcp_kill_prio+0x16>
 8016392:	79fb      	ldrb	r3, [r7, #7]
 8016394:	e000      	b.n	8016398 <tcp_kill_prio+0x18>
 8016396:	237f      	movs	r3, #127	@ 0x7f
 8016398:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801639a:	7afb      	ldrb	r3, [r7, #11]
 801639c:	2b00      	cmp	r3, #0
 801639e:	d034      	beq.n	801640a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80163a0:	7afb      	ldrb	r3, [r7, #11]
 80163a2:	3b01      	subs	r3, #1
 80163a4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80163a6:	2300      	movs	r3, #0
 80163a8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80163aa:	2300      	movs	r3, #0
 80163ac:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80163ae:	4b19      	ldr	r3, [pc, #100]	@ (8016414 <tcp_kill_prio+0x94>)
 80163b0:	681b      	ldr	r3, [r3, #0]
 80163b2:	617b      	str	r3, [r7, #20]
 80163b4:	e01f      	b.n	80163f6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80163b6:	697b      	ldr	r3, [r7, #20]
 80163b8:	7d5b      	ldrb	r3, [r3, #21]
 80163ba:	7afa      	ldrb	r2, [r7, #11]
 80163bc:	429a      	cmp	r2, r3
 80163be:	d80c      	bhi.n	80163da <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80163c0:	697b      	ldr	r3, [r7, #20]
 80163c2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80163c4:	7afa      	ldrb	r2, [r7, #11]
 80163c6:	429a      	cmp	r2, r3
 80163c8:	d112      	bne.n	80163f0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80163ca:	4b13      	ldr	r3, [pc, #76]	@ (8016418 <tcp_kill_prio+0x98>)
 80163cc:	681a      	ldr	r2, [r3, #0]
 80163ce:	697b      	ldr	r3, [r7, #20]
 80163d0:	6a1b      	ldr	r3, [r3, #32]
 80163d2:	1ad3      	subs	r3, r2, r3
 80163d4:	68fa      	ldr	r2, [r7, #12]
 80163d6:	429a      	cmp	r2, r3
 80163d8:	d80a      	bhi.n	80163f0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80163da:	4b0f      	ldr	r3, [pc, #60]	@ (8016418 <tcp_kill_prio+0x98>)
 80163dc:	681a      	ldr	r2, [r3, #0]
 80163de:	697b      	ldr	r3, [r7, #20]
 80163e0:	6a1b      	ldr	r3, [r3, #32]
 80163e2:	1ad3      	subs	r3, r2, r3
 80163e4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80163e6:	697b      	ldr	r3, [r7, #20]
 80163e8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80163ea:	697b      	ldr	r3, [r7, #20]
 80163ec:	7d5b      	ldrb	r3, [r3, #21]
 80163ee:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80163f0:	697b      	ldr	r3, [r7, #20]
 80163f2:	68db      	ldr	r3, [r3, #12]
 80163f4:	617b      	str	r3, [r7, #20]
 80163f6:	697b      	ldr	r3, [r7, #20]
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d1dc      	bne.n	80163b6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80163fc:	693b      	ldr	r3, [r7, #16]
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d004      	beq.n	801640c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8016402:	6938      	ldr	r0, [r7, #16]
 8016404:	f7ff f976 	bl	80156f4 <tcp_abort>
 8016408:	e000      	b.n	801640c <tcp_kill_prio+0x8c>
    return;
 801640a:	bf00      	nop
  }
}
 801640c:	3718      	adds	r7, #24
 801640e:	46bd      	mov	sp, r7
 8016410:	bd80      	pop	{r7, pc}
 8016412:	bf00      	nop
 8016414:	2002d478 	.word	0x2002d478
 8016418:	2002d46c 	.word	0x2002d46c

0801641c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801641c:	b580      	push	{r7, lr}
 801641e:	b086      	sub	sp, #24
 8016420:	af00      	add	r7, sp, #0
 8016422:	4603      	mov	r3, r0
 8016424:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8016426:	79fb      	ldrb	r3, [r7, #7]
 8016428:	2b08      	cmp	r3, #8
 801642a:	d009      	beq.n	8016440 <tcp_kill_state+0x24>
 801642c:	79fb      	ldrb	r3, [r7, #7]
 801642e:	2b09      	cmp	r3, #9
 8016430:	d006      	beq.n	8016440 <tcp_kill_state+0x24>
 8016432:	4b1a      	ldr	r3, [pc, #104]	@ (801649c <tcp_kill_state+0x80>)
 8016434:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8016438:	4919      	ldr	r1, [pc, #100]	@ (80164a0 <tcp_kill_state+0x84>)
 801643a:	481a      	ldr	r0, [pc, #104]	@ (80164a4 <tcp_kill_state+0x88>)
 801643c:	f00a f9ac 	bl	8020798 <iprintf>

  inactivity = 0;
 8016440:	2300      	movs	r3, #0
 8016442:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8016444:	2300      	movs	r3, #0
 8016446:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016448:	4b17      	ldr	r3, [pc, #92]	@ (80164a8 <tcp_kill_state+0x8c>)
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	617b      	str	r3, [r7, #20]
 801644e:	e017      	b.n	8016480 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8016450:	697b      	ldr	r3, [r7, #20]
 8016452:	7d1b      	ldrb	r3, [r3, #20]
 8016454:	79fa      	ldrb	r2, [r7, #7]
 8016456:	429a      	cmp	r2, r3
 8016458:	d10f      	bne.n	801647a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801645a:	4b14      	ldr	r3, [pc, #80]	@ (80164ac <tcp_kill_state+0x90>)
 801645c:	681a      	ldr	r2, [r3, #0]
 801645e:	697b      	ldr	r3, [r7, #20]
 8016460:	6a1b      	ldr	r3, [r3, #32]
 8016462:	1ad3      	subs	r3, r2, r3
 8016464:	68fa      	ldr	r2, [r7, #12]
 8016466:	429a      	cmp	r2, r3
 8016468:	d807      	bhi.n	801647a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801646a:	4b10      	ldr	r3, [pc, #64]	@ (80164ac <tcp_kill_state+0x90>)
 801646c:	681a      	ldr	r2, [r3, #0]
 801646e:	697b      	ldr	r3, [r7, #20]
 8016470:	6a1b      	ldr	r3, [r3, #32]
 8016472:	1ad3      	subs	r3, r2, r3
 8016474:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8016476:	697b      	ldr	r3, [r7, #20]
 8016478:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801647a:	697b      	ldr	r3, [r7, #20]
 801647c:	68db      	ldr	r3, [r3, #12]
 801647e:	617b      	str	r3, [r7, #20]
 8016480:	697b      	ldr	r3, [r7, #20]
 8016482:	2b00      	cmp	r3, #0
 8016484:	d1e4      	bne.n	8016450 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8016486:	693b      	ldr	r3, [r7, #16]
 8016488:	2b00      	cmp	r3, #0
 801648a:	d003      	beq.n	8016494 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801648c:	2100      	movs	r1, #0
 801648e:	6938      	ldr	r0, [r7, #16]
 8016490:	f7ff f872 	bl	8015578 <tcp_abandon>
  }
}
 8016494:	bf00      	nop
 8016496:	3718      	adds	r7, #24
 8016498:	46bd      	mov	sp, r7
 801649a:	bd80      	pop	{r7, pc}
 801649c:	08023868 	.word	0x08023868
 80164a0:	08023df4 	.word	0x08023df4
 80164a4:	080238ac 	.word	0x080238ac
 80164a8:	2002d478 	.word	0x2002d478
 80164ac:	2002d46c 	.word	0x2002d46c

080164b0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80164b0:	b580      	push	{r7, lr}
 80164b2:	b084      	sub	sp, #16
 80164b4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80164b6:	2300      	movs	r3, #0
 80164b8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80164ba:	2300      	movs	r3, #0
 80164bc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80164be:	4b12      	ldr	r3, [pc, #72]	@ (8016508 <tcp_kill_timewait+0x58>)
 80164c0:	681b      	ldr	r3, [r3, #0]
 80164c2:	60fb      	str	r3, [r7, #12]
 80164c4:	e012      	b.n	80164ec <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80164c6:	4b11      	ldr	r3, [pc, #68]	@ (801650c <tcp_kill_timewait+0x5c>)
 80164c8:	681a      	ldr	r2, [r3, #0]
 80164ca:	68fb      	ldr	r3, [r7, #12]
 80164cc:	6a1b      	ldr	r3, [r3, #32]
 80164ce:	1ad3      	subs	r3, r2, r3
 80164d0:	687a      	ldr	r2, [r7, #4]
 80164d2:	429a      	cmp	r2, r3
 80164d4:	d807      	bhi.n	80164e6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80164d6:	4b0d      	ldr	r3, [pc, #52]	@ (801650c <tcp_kill_timewait+0x5c>)
 80164d8:	681a      	ldr	r2, [r3, #0]
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	6a1b      	ldr	r3, [r3, #32]
 80164de:	1ad3      	subs	r3, r2, r3
 80164e0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80164e2:	68fb      	ldr	r3, [r7, #12]
 80164e4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80164e6:	68fb      	ldr	r3, [r7, #12]
 80164e8:	68db      	ldr	r3, [r3, #12]
 80164ea:	60fb      	str	r3, [r7, #12]
 80164ec:	68fb      	ldr	r3, [r7, #12]
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d1e9      	bne.n	80164c6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80164f2:	68bb      	ldr	r3, [r7, #8]
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d002      	beq.n	80164fe <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80164f8:	68b8      	ldr	r0, [r7, #8]
 80164fa:	f7ff f8fb 	bl	80156f4 <tcp_abort>
  }
}
 80164fe:	bf00      	nop
 8016500:	3710      	adds	r7, #16
 8016502:	46bd      	mov	sp, r7
 8016504:	bd80      	pop	{r7, pc}
 8016506:	bf00      	nop
 8016508:	2002d47c 	.word	0x2002d47c
 801650c:	2002d46c 	.word	0x2002d46c

08016510 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8016510:	b580      	push	{r7, lr}
 8016512:	b082      	sub	sp, #8
 8016514:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8016516:	4b10      	ldr	r3, [pc, #64]	@ (8016558 <tcp_handle_closepend+0x48>)
 8016518:	681b      	ldr	r3, [r3, #0]
 801651a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801651c:	e014      	b.n	8016548 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	68db      	ldr	r3, [r3, #12]
 8016522:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	8b5b      	ldrh	r3, [r3, #26]
 8016528:	f003 0308 	and.w	r3, r3, #8
 801652c:	2b00      	cmp	r3, #0
 801652e:	d009      	beq.n	8016544 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	8b5b      	ldrh	r3, [r3, #26]
 8016534:	f023 0308 	bic.w	r3, r3, #8
 8016538:	b29a      	uxth	r2, r3
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801653e:	6878      	ldr	r0, [r7, #4]
 8016540:	f7fe ff28 	bl	8015394 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8016544:	683b      	ldr	r3, [r7, #0]
 8016546:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	2b00      	cmp	r3, #0
 801654c:	d1e7      	bne.n	801651e <tcp_handle_closepend+0xe>
  }
}
 801654e:	bf00      	nop
 8016550:	bf00      	nop
 8016552:	3708      	adds	r7, #8
 8016554:	46bd      	mov	sp, r7
 8016556:	bd80      	pop	{r7, pc}
 8016558:	2002d478 	.word	0x2002d478

0801655c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801655c:	b580      	push	{r7, lr}
 801655e:	b084      	sub	sp, #16
 8016560:	af00      	add	r7, sp, #0
 8016562:	4603      	mov	r3, r0
 8016564:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016566:	2001      	movs	r0, #1
 8016568:	f7fd fa26 	bl	80139b8 <memp_malloc>
 801656c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801656e:	68fb      	ldr	r3, [r7, #12]
 8016570:	2b00      	cmp	r3, #0
 8016572:	d14e      	bne.n	8016612 <tcp_alloc+0xb6>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8016574:	f7ff ffcc 	bl	8016510 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8016578:	f7ff ff9a 	bl	80164b0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801657c:	2001      	movs	r0, #1
 801657e:	f7fd fa1b 	bl	80139b8 <memp_malloc>
 8016582:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8016584:	68fb      	ldr	r3, [r7, #12]
 8016586:	2b00      	cmp	r3, #0
 8016588:	d139      	bne.n	80165fe <tcp_alloc+0xa2>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801658a:	2009      	movs	r0, #9
 801658c:	f7ff ff46 	bl	801641c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016590:	2001      	movs	r0, #1
 8016592:	f7fd fa11 	bl	80139b8 <memp_malloc>
 8016596:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8016598:	68fb      	ldr	r3, [r7, #12]
 801659a:	2b00      	cmp	r3, #0
 801659c:	d125      	bne.n	80165ea <tcp_alloc+0x8e>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801659e:	2008      	movs	r0, #8
 80165a0:	f7ff ff3c 	bl	801641c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80165a4:	2001      	movs	r0, #1
 80165a6:	f7fd fa07 	bl	80139b8 <memp_malloc>
 80165aa:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80165ac:	68fb      	ldr	r3, [r7, #12]
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d111      	bne.n	80165d6 <tcp_alloc+0x7a>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80165b2:	79fb      	ldrb	r3, [r7, #7]
 80165b4:	4618      	mov	r0, r3
 80165b6:	f7ff fee3 	bl	8016380 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80165ba:	2001      	movs	r0, #1
 80165bc:	f7fd f9fc 	bl	80139b8 <memp_malloc>
 80165c0:	60f8      	str	r0, [r7, #12]
          if (pcb != NULL) {
 80165c2:	68fb      	ldr	r3, [r7, #12]
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d006      	beq.n	80165d6 <tcp_alloc+0x7a>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80165c8:	4b36      	ldr	r3, [pc, #216]	@ (80166a4 <tcp_alloc+0x148>)
 80165ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80165ce:	889a      	ldrh	r2, [r3, #4]
 80165d0:	3a01      	subs	r2, #1
 80165d2:	b292      	uxth	r2, r2
 80165d4:	809a      	strh	r2, [r3, #4]
          }
        }
        if (pcb != NULL) {
 80165d6:	68fb      	ldr	r3, [r7, #12]
 80165d8:	2b00      	cmp	r3, #0
 80165da:	d006      	beq.n	80165ea <tcp_alloc+0x8e>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80165dc:	4b31      	ldr	r3, [pc, #196]	@ (80166a4 <tcp_alloc+0x148>)
 80165de:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80165e2:	889a      	ldrh	r2, [r3, #4]
 80165e4:	3a01      	subs	r2, #1
 80165e6:	b292      	uxth	r2, r2
 80165e8:	809a      	strh	r2, [r3, #4]
        }
      }
      if (pcb != NULL) {
 80165ea:	68fb      	ldr	r3, [r7, #12]
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d006      	beq.n	80165fe <tcp_alloc+0xa2>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80165f0:	4b2c      	ldr	r3, [pc, #176]	@ (80166a4 <tcp_alloc+0x148>)
 80165f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80165f6:	889a      	ldrh	r2, [r3, #4]
 80165f8:	3a01      	subs	r2, #1
 80165fa:	b292      	uxth	r2, r2
 80165fc:	809a      	strh	r2, [r3, #4]
      }
    }
    if (pcb != NULL) {
 80165fe:	68fb      	ldr	r3, [r7, #12]
 8016600:	2b00      	cmp	r3, #0
 8016602:	d006      	beq.n	8016612 <tcp_alloc+0xb6>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8016604:	4b27      	ldr	r3, [pc, #156]	@ (80166a4 <tcp_alloc+0x148>)
 8016606:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801660a:	889a      	ldrh	r2, [r3, #4]
 801660c:	3a01      	subs	r2, #1
 801660e:	b292      	uxth	r2, r2
 8016610:	809a      	strh	r2, [r3, #4]
    }
  }
  if (pcb != NULL) {
 8016612:	68fb      	ldr	r3, [r7, #12]
 8016614:	2b00      	cmp	r3, #0
 8016616:	d03f      	beq.n	8016698 <tcp_alloc+0x13c>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8016618:	229c      	movs	r2, #156	@ 0x9c
 801661a:	2100      	movs	r1, #0
 801661c:	68f8      	ldr	r0, [r7, #12]
 801661e:	f00a fa1b 	bl	8020a58 <memset>
    pcb->prio = prio;
 8016622:	68fb      	ldr	r3, [r7, #12]
 8016624:	79fa      	ldrb	r2, [r7, #7]
 8016626:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8016628:	68fb      	ldr	r3, [r7, #12]
 801662a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 801662e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8016632:	68fb      	ldr	r3, [r7, #12]
 8016634:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8016638:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801663a:	68fb      	ldr	r3, [r7, #12]
 801663c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801663e:	68fb      	ldr	r3, [r7, #12]
 8016640:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8016642:	68fb      	ldr	r3, [r7, #12]
 8016644:	22ff      	movs	r2, #255	@ 0xff
 8016646:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8016648:	68fb      	ldr	r3, [r7, #12]
 801664a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801664e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8016650:	68fb      	ldr	r3, [r7, #12]
 8016652:	2206      	movs	r2, #6
 8016654:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8016658:	68fb      	ldr	r3, [r7, #12]
 801665a:	2206      	movs	r2, #6
 801665c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 801665e:	68fb      	ldr	r3, [r7, #12]
 8016660:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016664:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8016666:	68fb      	ldr	r3, [r7, #12]
 8016668:	2201      	movs	r2, #1
 801666a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 801666e:	4b0e      	ldr	r3, [pc, #56]	@ (80166a8 <tcp_alloc+0x14c>)
 8016670:	681a      	ldr	r2, [r3, #0]
 8016672:	68fb      	ldr	r3, [r7, #12]
 8016674:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8016676:	4b0d      	ldr	r3, [pc, #52]	@ (80166ac <tcp_alloc+0x150>)
 8016678:	781a      	ldrb	r2, [r3, #0]
 801667a:	68fb      	ldr	r3, [r7, #12]
 801667c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801667e:	68fb      	ldr	r3, [r7, #12]
 8016680:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8016684:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8016688:	68fb      	ldr	r3, [r7, #12]
 801668a:	4a09      	ldr	r2, [pc, #36]	@ (80166b0 <tcp_alloc+0x154>)
 801668c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8016690:	68fb      	ldr	r3, [r7, #12]
 8016692:	4a08      	ldr	r2, [pc, #32]	@ (80166b4 <tcp_alloc+0x158>)
 8016694:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8016698:	68fb      	ldr	r3, [r7, #12]
}
 801669a:	4618      	mov	r0, r3
 801669c:	3710      	adds	r7, #16
 801669e:	46bd      	mov	sp, r7
 80166a0:	bd80      	pop	{r7, pc}
 80166a2:	bf00      	nop
 80166a4:	2002d36c 	.word	0x2002d36c
 80166a8:	2002d46c 	.word	0x2002d46c
 80166ac:	2002d482 	.word	0x2002d482
 80166b0:	08016315 	.word	0x08016315
 80166b4:	006ddd00 	.word	0x006ddd00

080166b8 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80166b8:	b580      	push	{r7, lr}
 80166ba:	b084      	sub	sp, #16
 80166bc:	af00      	add	r7, sp, #0
 80166be:	4603      	mov	r3, r0
 80166c0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80166c2:	2040      	movs	r0, #64	@ 0x40
 80166c4:	f7ff ff4a 	bl	801655c <tcp_alloc>
 80166c8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80166ca:	68fb      	ldr	r3, [r7, #12]
}
 80166cc:	4618      	mov	r0, r3
 80166ce:	3710      	adds	r7, #16
 80166d0:	46bd      	mov	sp, r7
 80166d2:	bd80      	pop	{r7, pc}

080166d4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80166d4:	b480      	push	{r7}
 80166d6:	b083      	sub	sp, #12
 80166d8:	af00      	add	r7, sp, #0
 80166da:	6078      	str	r0, [r7, #4]
 80166dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d002      	beq.n	80166ea <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	683a      	ldr	r2, [r7, #0]
 80166e8:	611a      	str	r2, [r3, #16]
  }
}
 80166ea:	bf00      	nop
 80166ec:	370c      	adds	r7, #12
 80166ee:	46bd      	mov	sp, r7
 80166f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166f4:	4770      	bx	lr
	...

080166f8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80166f8:	b580      	push	{r7, lr}
 80166fa:	b082      	sub	sp, #8
 80166fc:	af00      	add	r7, sp, #0
 80166fe:	6078      	str	r0, [r7, #4]
 8016700:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	2b00      	cmp	r3, #0
 8016706:	d00e      	beq.n	8016726 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	7d1b      	ldrb	r3, [r3, #20]
 801670c:	2b01      	cmp	r3, #1
 801670e:	d106      	bne.n	801671e <tcp_recv+0x26>
 8016710:	4b07      	ldr	r3, [pc, #28]	@ (8016730 <tcp_recv+0x38>)
 8016712:	f240 72df 	movw	r2, #2015	@ 0x7df
 8016716:	4907      	ldr	r1, [pc, #28]	@ (8016734 <tcp_recv+0x3c>)
 8016718:	4807      	ldr	r0, [pc, #28]	@ (8016738 <tcp_recv+0x40>)
 801671a:	f00a f83d 	bl	8020798 <iprintf>
    pcb->recv = recv;
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	683a      	ldr	r2, [r7, #0]
 8016722:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 8016726:	bf00      	nop
 8016728:	3708      	adds	r7, #8
 801672a:	46bd      	mov	sp, r7
 801672c:	bd80      	pop	{r7, pc}
 801672e:	bf00      	nop
 8016730:	08023868 	.word	0x08023868
 8016734:	08023e04 	.word	0x08023e04
 8016738:	080238ac 	.word	0x080238ac

0801673c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801673c:	b580      	push	{r7, lr}
 801673e:	b082      	sub	sp, #8
 8016740:	af00      	add	r7, sp, #0
 8016742:	6078      	str	r0, [r7, #4]
 8016744:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	2b00      	cmp	r3, #0
 801674a:	d00e      	beq.n	801676a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	7d1b      	ldrb	r3, [r3, #20]
 8016750:	2b01      	cmp	r3, #1
 8016752:	d106      	bne.n	8016762 <tcp_sent+0x26>
 8016754:	4b07      	ldr	r3, [pc, #28]	@ (8016774 <tcp_sent+0x38>)
 8016756:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 801675a:	4907      	ldr	r1, [pc, #28]	@ (8016778 <tcp_sent+0x3c>)
 801675c:	4807      	ldr	r0, [pc, #28]	@ (801677c <tcp_sent+0x40>)
 801675e:	f00a f81b 	bl	8020798 <iprintf>
    pcb->sent = sent;
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	683a      	ldr	r2, [r7, #0]
 8016766:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 801676a:	bf00      	nop
 801676c:	3708      	adds	r7, #8
 801676e:	46bd      	mov	sp, r7
 8016770:	bd80      	pop	{r7, pc}
 8016772:	bf00      	nop
 8016774:	08023868 	.word	0x08023868
 8016778:	08023e2c 	.word	0x08023e2c
 801677c:	080238ac 	.word	0x080238ac

08016780 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8016780:	b580      	push	{r7, lr}
 8016782:	b082      	sub	sp, #8
 8016784:	af00      	add	r7, sp, #0
 8016786:	6078      	str	r0, [r7, #4]
 8016788:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	2b00      	cmp	r3, #0
 801678e:	d00e      	beq.n	80167ae <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	7d1b      	ldrb	r3, [r3, #20]
 8016794:	2b01      	cmp	r3, #1
 8016796:	d106      	bne.n	80167a6 <tcp_err+0x26>
 8016798:	4b07      	ldr	r3, [pc, #28]	@ (80167b8 <tcp_err+0x38>)
 801679a:	f640 020d 	movw	r2, #2061	@ 0x80d
 801679e:	4907      	ldr	r1, [pc, #28]	@ (80167bc <tcp_err+0x3c>)
 80167a0:	4807      	ldr	r0, [pc, #28]	@ (80167c0 <tcp_err+0x40>)
 80167a2:	f009 fff9 	bl	8020798 <iprintf>
    pcb->errf = err;
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	683a      	ldr	r2, [r7, #0]
 80167aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 80167ae:	bf00      	nop
 80167b0:	3708      	adds	r7, #8
 80167b2:	46bd      	mov	sp, r7
 80167b4:	bd80      	pop	{r7, pc}
 80167b6:	bf00      	nop
 80167b8:	08023868 	.word	0x08023868
 80167bc:	08023e54 	.word	0x08023e54
 80167c0:	080238ac 	.word	0x080238ac

080167c4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80167c4:	b480      	push	{r7}
 80167c6:	b085      	sub	sp, #20
 80167c8:	af00      	add	r7, sp, #0
 80167ca:	6078      	str	r0, [r7, #4]
 80167cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	d008      	beq.n	80167e6 <tcp_accept+0x22>
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	7d1b      	ldrb	r3, [r3, #20]
 80167d8:	2b01      	cmp	r3, #1
 80167da:	d104      	bne.n	80167e6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80167e0:	68fb      	ldr	r3, [r7, #12]
 80167e2:	683a      	ldr	r2, [r7, #0]
 80167e4:	619a      	str	r2, [r3, #24]
  }
}
 80167e6:	bf00      	nop
 80167e8:	3714      	adds	r7, #20
 80167ea:	46bd      	mov	sp, r7
 80167ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167f0:	4770      	bx	lr
	...

080167f4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80167f4:	b580      	push	{r7, lr}
 80167f6:	b084      	sub	sp, #16
 80167f8:	af00      	add	r7, sp, #0
 80167fa:	60f8      	str	r0, [r7, #12]
 80167fc:	60b9      	str	r1, [r7, #8]
 80167fe:	4613      	mov	r3, r2
 8016800:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8016802:	68fb      	ldr	r3, [r7, #12]
 8016804:	2b00      	cmp	r3, #0
 8016806:	d107      	bne.n	8016818 <tcp_poll+0x24>
 8016808:	4b0e      	ldr	r3, [pc, #56]	@ (8016844 <tcp_poll+0x50>)
 801680a:	f640 023d 	movw	r2, #2109	@ 0x83d
 801680e:	490e      	ldr	r1, [pc, #56]	@ (8016848 <tcp_poll+0x54>)
 8016810:	480e      	ldr	r0, [pc, #56]	@ (801684c <tcp_poll+0x58>)
 8016812:	f009 ffc1 	bl	8020798 <iprintf>
 8016816:	e011      	b.n	801683c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8016818:	68fb      	ldr	r3, [r7, #12]
 801681a:	7d1b      	ldrb	r3, [r3, #20]
 801681c:	2b01      	cmp	r3, #1
 801681e:	d106      	bne.n	801682e <tcp_poll+0x3a>
 8016820:	4b08      	ldr	r3, [pc, #32]	@ (8016844 <tcp_poll+0x50>)
 8016822:	f640 023e 	movw	r2, #2110	@ 0x83e
 8016826:	490a      	ldr	r1, [pc, #40]	@ (8016850 <tcp_poll+0x5c>)
 8016828:	4808      	ldr	r0, [pc, #32]	@ (801684c <tcp_poll+0x58>)
 801682a:	f009 ffb5 	bl	8020798 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801682e:	68fb      	ldr	r3, [r7, #12]
 8016830:	68ba      	ldr	r2, [r7, #8]
 8016832:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8016836:	68fb      	ldr	r3, [r7, #12]
 8016838:	79fa      	ldrb	r2, [r7, #7]
 801683a:	775a      	strb	r2, [r3, #29]
}
 801683c:	3710      	adds	r7, #16
 801683e:	46bd      	mov	sp, r7
 8016840:	bd80      	pop	{r7, pc}
 8016842:	bf00      	nop
 8016844:	08023868 	.word	0x08023868
 8016848:	08023e7c 	.word	0x08023e7c
 801684c:	080238ac 	.word	0x080238ac
 8016850:	08023e94 	.word	0x08023e94

08016854 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8016854:	b580      	push	{r7, lr}
 8016856:	b082      	sub	sp, #8
 8016858:	af00      	add	r7, sp, #0
 801685a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	2b00      	cmp	r3, #0
 8016860:	d107      	bne.n	8016872 <tcp_pcb_purge+0x1e>
 8016862:	4b21      	ldr	r3, [pc, #132]	@ (80168e8 <tcp_pcb_purge+0x94>)
 8016864:	f640 0251 	movw	r2, #2129	@ 0x851
 8016868:	4920      	ldr	r1, [pc, #128]	@ (80168ec <tcp_pcb_purge+0x98>)
 801686a:	4821      	ldr	r0, [pc, #132]	@ (80168f0 <tcp_pcb_purge+0x9c>)
 801686c:	f009 ff94 	bl	8020798 <iprintf>
 8016870:	e037      	b.n	80168e2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	7d1b      	ldrb	r3, [r3, #20]
 8016876:	2b00      	cmp	r3, #0
 8016878:	d033      	beq.n	80168e2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801687e:	2b0a      	cmp	r3, #10
 8016880:	d02f      	beq.n	80168e2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8016886:	2b01      	cmp	r3, #1
 8016888:	d02b      	beq.n	80168e2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801688e:	2b00      	cmp	r3, #0
 8016890:	d007      	beq.n	80168a2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016896:	4618      	mov	r0, r3
 8016898:	f7fe f8f0 	bl	8014a7c <pbuf_free>
      pcb->refused_data = NULL;
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	2200      	movs	r2, #0
 80168a0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	d002      	beq.n	80168b0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80168aa:	6878      	ldr	r0, [r7, #4]
 80168ac:	f000 f98c 	bl	8016bc8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80168b6:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80168bc:	4618      	mov	r0, r3
 80168be:	f7ff fccf 	bl	8016260 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80168c6:	4618      	mov	r0, r3
 80168c8:	f7ff fcca 	bl	8016260 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	2200      	movs	r2, #0
 80168d0:	66da      	str	r2, [r3, #108]	@ 0x6c
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	2200      	movs	r2, #0
 80168de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80168e2:	3708      	adds	r7, #8
 80168e4:	46bd      	mov	sp, r7
 80168e6:	bd80      	pop	{r7, pc}
 80168e8:	08023868 	.word	0x08023868
 80168ec:	08023eb4 	.word	0x08023eb4
 80168f0:	080238ac 	.word	0x080238ac

080168f4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80168f4:	b580      	push	{r7, lr}
 80168f6:	b084      	sub	sp, #16
 80168f8:	af00      	add	r7, sp, #0
 80168fa:	6078      	str	r0, [r7, #4]
 80168fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80168fe:	683b      	ldr	r3, [r7, #0]
 8016900:	2b00      	cmp	r3, #0
 8016902:	d106      	bne.n	8016912 <tcp_pcb_remove+0x1e>
 8016904:	4b3e      	ldr	r3, [pc, #248]	@ (8016a00 <tcp_pcb_remove+0x10c>)
 8016906:	f640 0283 	movw	r2, #2179	@ 0x883
 801690a:	493e      	ldr	r1, [pc, #248]	@ (8016a04 <tcp_pcb_remove+0x110>)
 801690c:	483e      	ldr	r0, [pc, #248]	@ (8016a08 <tcp_pcb_remove+0x114>)
 801690e:	f009 ff43 	bl	8020798 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	2b00      	cmp	r3, #0
 8016916:	d106      	bne.n	8016926 <tcp_pcb_remove+0x32>
 8016918:	4b39      	ldr	r3, [pc, #228]	@ (8016a00 <tcp_pcb_remove+0x10c>)
 801691a:	f640 0284 	movw	r2, #2180	@ 0x884
 801691e:	493b      	ldr	r1, [pc, #236]	@ (8016a0c <tcp_pcb_remove+0x118>)
 8016920:	4839      	ldr	r0, [pc, #228]	@ (8016a08 <tcp_pcb_remove+0x114>)
 8016922:	f009 ff39 	bl	8020798 <iprintf>

  TCP_RMV(pcblist, pcb);
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	683a      	ldr	r2, [r7, #0]
 801692c:	429a      	cmp	r2, r3
 801692e:	d105      	bne.n	801693c <tcp_pcb_remove+0x48>
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	681b      	ldr	r3, [r3, #0]
 8016934:	68da      	ldr	r2, [r3, #12]
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	601a      	str	r2, [r3, #0]
 801693a:	e013      	b.n	8016964 <tcp_pcb_remove+0x70>
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	681b      	ldr	r3, [r3, #0]
 8016940:	60fb      	str	r3, [r7, #12]
 8016942:	e00c      	b.n	801695e <tcp_pcb_remove+0x6a>
 8016944:	68fb      	ldr	r3, [r7, #12]
 8016946:	68db      	ldr	r3, [r3, #12]
 8016948:	683a      	ldr	r2, [r7, #0]
 801694a:	429a      	cmp	r2, r3
 801694c:	d104      	bne.n	8016958 <tcp_pcb_remove+0x64>
 801694e:	683b      	ldr	r3, [r7, #0]
 8016950:	68da      	ldr	r2, [r3, #12]
 8016952:	68fb      	ldr	r3, [r7, #12]
 8016954:	60da      	str	r2, [r3, #12]
 8016956:	e005      	b.n	8016964 <tcp_pcb_remove+0x70>
 8016958:	68fb      	ldr	r3, [r7, #12]
 801695a:	68db      	ldr	r3, [r3, #12]
 801695c:	60fb      	str	r3, [r7, #12]
 801695e:	68fb      	ldr	r3, [r7, #12]
 8016960:	2b00      	cmp	r3, #0
 8016962:	d1ef      	bne.n	8016944 <tcp_pcb_remove+0x50>
 8016964:	683b      	ldr	r3, [r7, #0]
 8016966:	2200      	movs	r2, #0
 8016968:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801696a:	6838      	ldr	r0, [r7, #0]
 801696c:	f7ff ff72 	bl	8016854 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8016970:	683b      	ldr	r3, [r7, #0]
 8016972:	7d1b      	ldrb	r3, [r3, #20]
 8016974:	2b0a      	cmp	r3, #10
 8016976:	d013      	beq.n	80169a0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8016978:	683b      	ldr	r3, [r7, #0]
 801697a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801697c:	2b01      	cmp	r3, #1
 801697e:	d00f      	beq.n	80169a0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8016980:	683b      	ldr	r3, [r7, #0]
 8016982:	8b5b      	ldrh	r3, [r3, #26]
 8016984:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8016988:	2b00      	cmp	r3, #0
 801698a:	d009      	beq.n	80169a0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801698c:	683b      	ldr	r3, [r7, #0]
 801698e:	8b5b      	ldrh	r3, [r3, #26]
 8016990:	f043 0302 	orr.w	r3, r3, #2
 8016994:	b29a      	uxth	r2, r3
 8016996:	683b      	ldr	r3, [r7, #0]
 8016998:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801699a:	6838      	ldr	r0, [r7, #0]
 801699c:	f003 fcc8 	bl	801a330 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80169a0:	683b      	ldr	r3, [r7, #0]
 80169a2:	7d1b      	ldrb	r3, [r3, #20]
 80169a4:	2b01      	cmp	r3, #1
 80169a6:	d020      	beq.n	80169ea <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80169a8:	683b      	ldr	r3, [r7, #0]
 80169aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d006      	beq.n	80169be <tcp_pcb_remove+0xca>
 80169b0:	4b13      	ldr	r3, [pc, #76]	@ (8016a00 <tcp_pcb_remove+0x10c>)
 80169b2:	f640 0293 	movw	r2, #2195	@ 0x893
 80169b6:	4916      	ldr	r1, [pc, #88]	@ (8016a10 <tcp_pcb_remove+0x11c>)
 80169b8:	4813      	ldr	r0, [pc, #76]	@ (8016a08 <tcp_pcb_remove+0x114>)
 80169ba:	f009 feed 	bl	8020798 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80169be:	683b      	ldr	r3, [r7, #0]
 80169c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d006      	beq.n	80169d4 <tcp_pcb_remove+0xe0>
 80169c6:	4b0e      	ldr	r3, [pc, #56]	@ (8016a00 <tcp_pcb_remove+0x10c>)
 80169c8:	f640 0294 	movw	r2, #2196	@ 0x894
 80169cc:	4911      	ldr	r1, [pc, #68]	@ (8016a14 <tcp_pcb_remove+0x120>)
 80169ce:	480e      	ldr	r0, [pc, #56]	@ (8016a08 <tcp_pcb_remove+0x114>)
 80169d0:	f009 fee2 	bl	8020798 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80169d4:	683b      	ldr	r3, [r7, #0]
 80169d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d006      	beq.n	80169ea <tcp_pcb_remove+0xf6>
 80169dc:	4b08      	ldr	r3, [pc, #32]	@ (8016a00 <tcp_pcb_remove+0x10c>)
 80169de:	f640 0296 	movw	r2, #2198	@ 0x896
 80169e2:	490d      	ldr	r1, [pc, #52]	@ (8016a18 <tcp_pcb_remove+0x124>)
 80169e4:	4808      	ldr	r0, [pc, #32]	@ (8016a08 <tcp_pcb_remove+0x114>)
 80169e6:	f009 fed7 	bl	8020798 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80169ea:	683b      	ldr	r3, [r7, #0]
 80169ec:	2200      	movs	r2, #0
 80169ee:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80169f0:	683b      	ldr	r3, [r7, #0]
 80169f2:	2200      	movs	r2, #0
 80169f4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80169f6:	bf00      	nop
 80169f8:	3710      	adds	r7, #16
 80169fa:	46bd      	mov	sp, r7
 80169fc:	bd80      	pop	{r7, pc}
 80169fe:	bf00      	nop
 8016a00:	08023868 	.word	0x08023868
 8016a04:	08023ed0 	.word	0x08023ed0
 8016a08:	080238ac 	.word	0x080238ac
 8016a0c:	08023eec 	.word	0x08023eec
 8016a10:	08023f0c 	.word	0x08023f0c
 8016a14:	08023f24 	.word	0x08023f24
 8016a18:	08023f40 	.word	0x08023f40

08016a1c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8016a1c:	b580      	push	{r7, lr}
 8016a1e:	b082      	sub	sp, #8
 8016a20:	af00      	add	r7, sp, #0
 8016a22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d106      	bne.n	8016a38 <tcp_next_iss+0x1c>
 8016a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8016a54 <tcp_next_iss+0x38>)
 8016a2c:	f640 02af 	movw	r2, #2223	@ 0x8af
 8016a30:	4909      	ldr	r1, [pc, #36]	@ (8016a58 <tcp_next_iss+0x3c>)
 8016a32:	480a      	ldr	r0, [pc, #40]	@ (8016a5c <tcp_next_iss+0x40>)
 8016a34:	f009 feb0 	bl	8020798 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8016a38:	4b09      	ldr	r3, [pc, #36]	@ (8016a60 <tcp_next_iss+0x44>)
 8016a3a:	681a      	ldr	r2, [r3, #0]
 8016a3c:	4b09      	ldr	r3, [pc, #36]	@ (8016a64 <tcp_next_iss+0x48>)
 8016a3e:	681b      	ldr	r3, [r3, #0]
 8016a40:	4413      	add	r3, r2
 8016a42:	4a07      	ldr	r2, [pc, #28]	@ (8016a60 <tcp_next_iss+0x44>)
 8016a44:	6013      	str	r3, [r2, #0]
  return iss;
 8016a46:	4b06      	ldr	r3, [pc, #24]	@ (8016a60 <tcp_next_iss+0x44>)
 8016a48:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8016a4a:	4618      	mov	r0, r3
 8016a4c:	3708      	adds	r7, #8
 8016a4e:	46bd      	mov	sp, r7
 8016a50:	bd80      	pop	{r7, pc}
 8016a52:	bf00      	nop
 8016a54:	08023868 	.word	0x08023868
 8016a58:	08023f58 	.word	0x08023f58
 8016a5c:	080238ac 	.word	0x080238ac
 8016a60:	2000006c 	.word	0x2000006c
 8016a64:	2002d46c 	.word	0x2002d46c

08016a68 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8016a68:	b580      	push	{r7, lr}
 8016a6a:	b086      	sub	sp, #24
 8016a6c:	af00      	add	r7, sp, #0
 8016a6e:	4603      	mov	r3, r0
 8016a70:	60b9      	str	r1, [r7, #8]
 8016a72:	607a      	str	r2, [r7, #4]
 8016a74:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	d106      	bne.n	8016a8a <tcp_eff_send_mss_netif+0x22>
 8016a7c:	4b14      	ldr	r3, [pc, #80]	@ (8016ad0 <tcp_eff_send_mss_netif+0x68>)
 8016a7e:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8016a82:	4914      	ldr	r1, [pc, #80]	@ (8016ad4 <tcp_eff_send_mss_netif+0x6c>)
 8016a84:	4814      	ldr	r0, [pc, #80]	@ (8016ad8 <tcp_eff_send_mss_netif+0x70>)
 8016a86:	f009 fe87 	bl	8020798 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8016a8a:	68bb      	ldr	r3, [r7, #8]
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	d101      	bne.n	8016a94 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8016a90:	89fb      	ldrh	r3, [r7, #14]
 8016a92:	e019      	b.n	8016ac8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8016a94:	68bb      	ldr	r3, [r7, #8]
 8016a96:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8016a98:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8016a9a:	8afb      	ldrh	r3, [r7, #22]
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	d012      	beq.n	8016ac6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8016aa0:	2328      	movs	r3, #40	@ 0x28
 8016aa2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8016aa4:	8afa      	ldrh	r2, [r7, #22]
 8016aa6:	8abb      	ldrh	r3, [r7, #20]
 8016aa8:	429a      	cmp	r2, r3
 8016aaa:	d904      	bls.n	8016ab6 <tcp_eff_send_mss_netif+0x4e>
 8016aac:	8afa      	ldrh	r2, [r7, #22]
 8016aae:	8abb      	ldrh	r3, [r7, #20]
 8016ab0:	1ad3      	subs	r3, r2, r3
 8016ab2:	b29b      	uxth	r3, r3
 8016ab4:	e000      	b.n	8016ab8 <tcp_eff_send_mss_netif+0x50>
 8016ab6:	2300      	movs	r3, #0
 8016ab8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8016aba:	8a7a      	ldrh	r2, [r7, #18]
 8016abc:	89fb      	ldrh	r3, [r7, #14]
 8016abe:	4293      	cmp	r3, r2
 8016ac0:	bf28      	it	cs
 8016ac2:	4613      	movcs	r3, r2
 8016ac4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8016ac6:	89fb      	ldrh	r3, [r7, #14]
}
 8016ac8:	4618      	mov	r0, r3
 8016aca:	3718      	adds	r7, #24
 8016acc:	46bd      	mov	sp, r7
 8016ace:	bd80      	pop	{r7, pc}
 8016ad0:	08023868 	.word	0x08023868
 8016ad4:	08023f74 	.word	0x08023f74
 8016ad8:	080238ac 	.word	0x080238ac

08016adc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8016adc:	b580      	push	{r7, lr}
 8016ade:	b084      	sub	sp, #16
 8016ae0:	af00      	add	r7, sp, #0
 8016ae2:	6078      	str	r0, [r7, #4]
 8016ae4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8016ae6:	683b      	ldr	r3, [r7, #0]
 8016ae8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d11d      	bne.n	8016b2c <tcp_netif_ip_addr_changed_pcblist+0x50>
 8016af0:	4b12      	ldr	r3, [pc, #72]	@ (8016b3c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8016af2:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8016af6:	4912      	ldr	r1, [pc, #72]	@ (8016b40 <tcp_netif_ip_addr_changed_pcblist+0x64>)
 8016af8:	4812      	ldr	r0, [pc, #72]	@ (8016b44 <tcp_netif_ip_addr_changed_pcblist+0x68>)
 8016afa:	f009 fe4d 	bl	8020798 <iprintf>

  while (pcb != NULL) {
 8016afe:	e015      	b.n	8016b2c <tcp_netif_ip_addr_changed_pcblist+0x50>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8016b00:	68fb      	ldr	r3, [r7, #12]
 8016b02:	681a      	ldr	r2, [r3, #0]
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	681b      	ldr	r3, [r3, #0]
 8016b08:	429a      	cmp	r2, r3
 8016b0a:	d10c      	bne.n	8016b26 <tcp_netif_ip_addr_changed_pcblist+0x4a>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8016b0c:	68fb      	ldr	r3, [r7, #12]
 8016b0e:	68db      	ldr	r3, [r3, #12]
 8016b10:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
 8016b12:	68f9      	ldr	r1, [r7, #12]
 8016b14:	480c      	ldr	r0, [pc, #48]	@ (8016b48 <tcp_netif_ip_addr_changed_pcblist+0x6c>)
 8016b16:	f009 fe3f 	bl	8020798 <iprintf>
      tcp_abort(pcb);
 8016b1a:	68f8      	ldr	r0, [r7, #12]
 8016b1c:	f7fe fdea 	bl	80156f4 <tcp_abort>
      pcb = next;
 8016b20:	68bb      	ldr	r3, [r7, #8]
 8016b22:	60fb      	str	r3, [r7, #12]
 8016b24:	e002      	b.n	8016b2c <tcp_netif_ip_addr_changed_pcblist+0x50>
    } else {
      pcb = pcb->next;
 8016b26:	68fb      	ldr	r3, [r7, #12]
 8016b28:	68db      	ldr	r3, [r3, #12]
 8016b2a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8016b2c:	68fb      	ldr	r3, [r7, #12]
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	d1e6      	bne.n	8016b00 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8016b32:	bf00      	nop
 8016b34:	bf00      	nop
 8016b36:	3710      	adds	r7, #16
 8016b38:	46bd      	mov	sp, r7
 8016b3a:	bd80      	pop	{r7, pc}
 8016b3c:	08023868 	.word	0x08023868
 8016b40:	08023f9c 	.word	0x08023f9c
 8016b44:	080238ac 	.word	0x080238ac
 8016b48:	08023fd0 	.word	0x08023fd0

08016b4c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016b4c:	b580      	push	{r7, lr}
 8016b4e:	b084      	sub	sp, #16
 8016b50:	af00      	add	r7, sp, #0
 8016b52:	6078      	str	r0, [r7, #4]
 8016b54:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	d02a      	beq.n	8016bb2 <tcp_netif_ip_addr_changed+0x66>
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	681b      	ldr	r3, [r3, #0]
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d026      	beq.n	8016bb2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8016b64:	4b15      	ldr	r3, [pc, #84]	@ (8016bbc <tcp_netif_ip_addr_changed+0x70>)
 8016b66:	681b      	ldr	r3, [r3, #0]
 8016b68:	4619      	mov	r1, r3
 8016b6a:	6878      	ldr	r0, [r7, #4]
 8016b6c:	f7ff ffb6 	bl	8016adc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8016b70:	4b13      	ldr	r3, [pc, #76]	@ (8016bc0 <tcp_netif_ip_addr_changed+0x74>)
 8016b72:	681b      	ldr	r3, [r3, #0]
 8016b74:	4619      	mov	r1, r3
 8016b76:	6878      	ldr	r0, [r7, #4]
 8016b78:	f7ff ffb0 	bl	8016adc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8016b7c:	683b      	ldr	r3, [r7, #0]
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d017      	beq.n	8016bb2 <tcp_netif_ip_addr_changed+0x66>
 8016b82:	683b      	ldr	r3, [r7, #0]
 8016b84:	681b      	ldr	r3, [r3, #0]
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	d013      	beq.n	8016bb2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8016bc4 <tcp_netif_ip_addr_changed+0x78>)
 8016b8c:	681b      	ldr	r3, [r3, #0]
 8016b8e:	60fb      	str	r3, [r7, #12]
 8016b90:	e00c      	b.n	8016bac <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8016b92:	68fb      	ldr	r3, [r7, #12]
 8016b94:	681a      	ldr	r2, [r3, #0]
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	681b      	ldr	r3, [r3, #0]
 8016b9a:	429a      	cmp	r2, r3
 8016b9c:	d103      	bne.n	8016ba6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8016b9e:	683b      	ldr	r3, [r7, #0]
 8016ba0:	681a      	ldr	r2, [r3, #0]
 8016ba2:	68fb      	ldr	r3, [r7, #12]
 8016ba4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016ba6:	68fb      	ldr	r3, [r7, #12]
 8016ba8:	68db      	ldr	r3, [r3, #12]
 8016baa:	60fb      	str	r3, [r7, #12]
 8016bac:	68fb      	ldr	r3, [r7, #12]
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d1ef      	bne.n	8016b92 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8016bb2:	bf00      	nop
 8016bb4:	3710      	adds	r7, #16
 8016bb6:	46bd      	mov	sp, r7
 8016bb8:	bd80      	pop	{r7, pc}
 8016bba:	bf00      	nop
 8016bbc:	2002d478 	.word	0x2002d478
 8016bc0:	2002d470 	.word	0x2002d470
 8016bc4:	2002d474 	.word	0x2002d474

08016bc8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8016bc8:	b580      	push	{r7, lr}
 8016bca:	b082      	sub	sp, #8
 8016bcc:	af00      	add	r7, sp, #0
 8016bce:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	d007      	beq.n	8016be8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016bdc:	4618      	mov	r0, r3
 8016bde:	f7ff fb3f 	bl	8016260 <tcp_segs_free>
    pcb->ooseq = NULL;
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	2200      	movs	r2, #0
 8016be6:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8016be8:	bf00      	nop
 8016bea:	3708      	adds	r7, #8
 8016bec:	46bd      	mov	sp, r7
 8016bee:	bd80      	pop	{r7, pc}

08016bf0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8016bf0:	b590      	push	{r4, r7, lr}
 8016bf2:	b08d      	sub	sp, #52	@ 0x34
 8016bf4:	af04      	add	r7, sp, #16
 8016bf6:	6078      	str	r0, [r7, #4]
 8016bf8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	d105      	bne.n	8016c0c <tcp_input+0x1c>
 8016c00:	4b9b      	ldr	r3, [pc, #620]	@ (8016e70 <tcp_input+0x280>)
 8016c02:	2283      	movs	r2, #131	@ 0x83
 8016c04:	499b      	ldr	r1, [pc, #620]	@ (8016e74 <tcp_input+0x284>)
 8016c06:	489c      	ldr	r0, [pc, #624]	@ (8016e78 <tcp_input+0x288>)
 8016c08:	f009 fdc6 	bl	8020798 <iprintf>

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 8016c0c:	4b9b      	ldr	r3, [pc, #620]	@ (8016e7c <tcp_input+0x28c>)
 8016c0e:	f8b3 3092 	ldrh.w	r3, [r3, #146]	@ 0x92
 8016c12:	3301      	adds	r3, #1
 8016c14:	b29a      	uxth	r2, r3
 8016c16:	4b99      	ldr	r3, [pc, #612]	@ (8016e7c <tcp_input+0x28c>)
 8016c18:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	685b      	ldr	r3, [r3, #4]
 8016c20:	4a97      	ldr	r2, [pc, #604]	@ (8016e80 <tcp_input+0x290>)
 8016c22:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	895b      	ldrh	r3, [r3, #10]
 8016c28:	2b13      	cmp	r3, #19
 8016c2a:	d809      	bhi.n	8016c40 <tcp_input+0x50>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 8016c2c:	4b93      	ldr	r3, [pc, #588]	@ (8016e7c <tcp_input+0x28c>)
 8016c2e:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8016c32:	3301      	adds	r3, #1
 8016c34:	b29a      	uxth	r2, r3
 8016c36:	4b91      	ldr	r3, [pc, #580]	@ (8016e7c <tcp_input+0x28c>)
 8016c38:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
    goto dropped;
 8016c3c:	f000 bc1c 	b.w	8017478 <tcp_input+0x888>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8016c40:	4b90      	ldr	r3, [pc, #576]	@ (8016e84 <tcp_input+0x294>)
 8016c42:	695b      	ldr	r3, [r3, #20]
 8016c44:	4a8f      	ldr	r2, [pc, #572]	@ (8016e84 <tcp_input+0x294>)
 8016c46:	6812      	ldr	r2, [r2, #0]
 8016c48:	4611      	mov	r1, r2
 8016c4a:	4618      	mov	r0, r3
 8016c4c:	f007 f8a8 	bl	801dda0 <ip4_addr_isbroadcast_u32>
 8016c50:	4603      	mov	r3, r0
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d105      	bne.n	8016c62 <tcp_input+0x72>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8016c56:	4b8b      	ldr	r3, [pc, #556]	@ (8016e84 <tcp_input+0x294>)
 8016c58:	695b      	ldr	r3, [r3, #20]
 8016c5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8016c5e:	2be0      	cmp	r3, #224	@ 0xe0
 8016c60:	d109      	bne.n	8016c76 <tcp_input+0x86>
    TCP_STATS_INC(tcp.proterr);
 8016c62:	4b86      	ldr	r3, [pc, #536]	@ (8016e7c <tcp_input+0x28c>)
 8016c64:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8016c68:	3301      	adds	r3, #1
 8016c6a:	b29a      	uxth	r2, r3
 8016c6c:	4b83      	ldr	r3, [pc, #524]	@ (8016e7c <tcp_input+0x28c>)
 8016c6e:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
    goto dropped;
 8016c72:	f000 bc01 	b.w	8017478 <tcp_input+0x888>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8016c76:	4b82      	ldr	r3, [pc, #520]	@ (8016e80 <tcp_input+0x290>)
 8016c78:	681b      	ldr	r3, [r3, #0]
 8016c7a:	899b      	ldrh	r3, [r3, #12]
 8016c7c:	b29b      	uxth	r3, r3
 8016c7e:	4618      	mov	r0, r3
 8016c80:	f7fc f8ce 	bl	8012e20 <lwip_htons>
 8016c84:	4603      	mov	r3, r0
 8016c86:	0b1b      	lsrs	r3, r3, #12
 8016c88:	b29b      	uxth	r3, r3
 8016c8a:	b2db      	uxtb	r3, r3
 8016c8c:	009b      	lsls	r3, r3, #2
 8016c8e:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8016c90:	7cbb      	ldrb	r3, [r7, #18]
 8016c92:	2b13      	cmp	r3, #19
 8016c94:	d905      	bls.n	8016ca2 <tcp_input+0xb2>
 8016c96:	7cbb      	ldrb	r3, [r7, #18]
 8016c98:	b29a      	uxth	r2, r3
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	891b      	ldrh	r3, [r3, #8]
 8016c9e:	429a      	cmp	r2, r3
 8016ca0:	d908      	bls.n	8016cb4 <tcp_input+0xc4>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
 8016ca2:	4b76      	ldr	r3, [pc, #472]	@ (8016e7c <tcp_input+0x28c>)
 8016ca4:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8016ca8:	3301      	adds	r3, #1
 8016caa:	b29a      	uxth	r2, r3
 8016cac:	4b73      	ldr	r3, [pc, #460]	@ (8016e7c <tcp_input+0x28c>)
 8016cae:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
    goto dropped;
 8016cb2:	e3e1      	b.n	8017478 <tcp_input+0x888>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8016cb4:	7cbb      	ldrb	r3, [r7, #18]
 8016cb6:	b29b      	uxth	r3, r3
 8016cb8:	3b14      	subs	r3, #20
 8016cba:	b29a      	uxth	r2, r3
 8016cbc:	4b72      	ldr	r3, [pc, #456]	@ (8016e88 <tcp_input+0x298>)
 8016cbe:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8016cc0:	4b72      	ldr	r3, [pc, #456]	@ (8016e8c <tcp_input+0x29c>)
 8016cc2:	2200      	movs	r2, #0
 8016cc4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	895a      	ldrh	r2, [r3, #10]
 8016cca:	7cbb      	ldrb	r3, [r7, #18]
 8016ccc:	b29b      	uxth	r3, r3
 8016cce:	429a      	cmp	r2, r3
 8016cd0:	d309      	bcc.n	8016ce6 <tcp_input+0xf6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8016cd2:	4b6d      	ldr	r3, [pc, #436]	@ (8016e88 <tcp_input+0x298>)
 8016cd4:	881a      	ldrh	r2, [r3, #0]
 8016cd6:	4b6e      	ldr	r3, [pc, #440]	@ (8016e90 <tcp_input+0x2a0>)
 8016cd8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8016cda:	7cbb      	ldrb	r3, [r7, #18]
 8016cdc:	4619      	mov	r1, r3
 8016cde:	6878      	ldr	r0, [r7, #4]
 8016ce0:	f7fd fe3e 	bl	8014960 <pbuf_remove_header>
 8016ce4:	e056      	b.n	8016d94 <tcp_input+0x1a4>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	681b      	ldr	r3, [r3, #0]
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d105      	bne.n	8016cfa <tcp_input+0x10a>
 8016cee:	4b60      	ldr	r3, [pc, #384]	@ (8016e70 <tcp_input+0x280>)
 8016cf0:	22c2      	movs	r2, #194	@ 0xc2
 8016cf2:	4968      	ldr	r1, [pc, #416]	@ (8016e94 <tcp_input+0x2a4>)
 8016cf4:	4860      	ldr	r0, [pc, #384]	@ (8016e78 <tcp_input+0x288>)
 8016cf6:	f009 fd4f 	bl	8020798 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8016cfa:	2114      	movs	r1, #20
 8016cfc:	6878      	ldr	r0, [r7, #4]
 8016cfe:	f7fd fe2f 	bl	8014960 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	895a      	ldrh	r2, [r3, #10]
 8016d06:	4b62      	ldr	r3, [pc, #392]	@ (8016e90 <tcp_input+0x2a0>)
 8016d08:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8016d0a:	4b5f      	ldr	r3, [pc, #380]	@ (8016e88 <tcp_input+0x298>)
 8016d0c:	881a      	ldrh	r2, [r3, #0]
 8016d0e:	4b60      	ldr	r3, [pc, #384]	@ (8016e90 <tcp_input+0x2a0>)
 8016d10:	881b      	ldrh	r3, [r3, #0]
 8016d12:	1ad3      	subs	r3, r2, r3
 8016d14:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8016d16:	4b5e      	ldr	r3, [pc, #376]	@ (8016e90 <tcp_input+0x2a0>)
 8016d18:	881b      	ldrh	r3, [r3, #0]
 8016d1a:	4619      	mov	r1, r3
 8016d1c:	6878      	ldr	r0, [r7, #4]
 8016d1e:	f7fd fe1f 	bl	8014960 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	681b      	ldr	r3, [r3, #0]
 8016d26:	895b      	ldrh	r3, [r3, #10]
 8016d28:	8a3a      	ldrh	r2, [r7, #16]
 8016d2a:	429a      	cmp	r2, r3
 8016d2c:	d908      	bls.n	8016d40 <tcp_input+0x150>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
 8016d2e:	4b53      	ldr	r3, [pc, #332]	@ (8016e7c <tcp_input+0x28c>)
 8016d30:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8016d34:	3301      	adds	r3, #1
 8016d36:	b29a      	uxth	r2, r3
 8016d38:	4b50      	ldr	r3, [pc, #320]	@ (8016e7c <tcp_input+0x28c>)
 8016d3a:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
      goto dropped;
 8016d3e:	e39b      	b.n	8017478 <tcp_input+0x888>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	681b      	ldr	r3, [r3, #0]
 8016d44:	685b      	ldr	r3, [r3, #4]
 8016d46:	4a51      	ldr	r2, [pc, #324]	@ (8016e8c <tcp_input+0x29c>)
 8016d48:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	681b      	ldr	r3, [r3, #0]
 8016d4e:	8a3a      	ldrh	r2, [r7, #16]
 8016d50:	4611      	mov	r1, r2
 8016d52:	4618      	mov	r0, r3
 8016d54:	f7fd fe04 	bl	8014960 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	891a      	ldrh	r2, [r3, #8]
 8016d5c:	8a3b      	ldrh	r3, [r7, #16]
 8016d5e:	1ad3      	subs	r3, r2, r3
 8016d60:	b29a      	uxth	r2, r3
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	895b      	ldrh	r3, [r3, #10]
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d005      	beq.n	8016d7a <tcp_input+0x18a>
 8016d6e:	4b40      	ldr	r3, [pc, #256]	@ (8016e70 <tcp_input+0x280>)
 8016d70:	22df      	movs	r2, #223	@ 0xdf
 8016d72:	4949      	ldr	r1, [pc, #292]	@ (8016e98 <tcp_input+0x2a8>)
 8016d74:	4840      	ldr	r0, [pc, #256]	@ (8016e78 <tcp_input+0x288>)
 8016d76:	f009 fd0f 	bl	8020798 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	891a      	ldrh	r2, [r3, #8]
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	681b      	ldr	r3, [r3, #0]
 8016d82:	891b      	ldrh	r3, [r3, #8]
 8016d84:	429a      	cmp	r2, r3
 8016d86:	d005      	beq.n	8016d94 <tcp_input+0x1a4>
 8016d88:	4b39      	ldr	r3, [pc, #228]	@ (8016e70 <tcp_input+0x280>)
 8016d8a:	22e0      	movs	r2, #224	@ 0xe0
 8016d8c:	4943      	ldr	r1, [pc, #268]	@ (8016e9c <tcp_input+0x2ac>)
 8016d8e:	483a      	ldr	r0, [pc, #232]	@ (8016e78 <tcp_input+0x288>)
 8016d90:	f009 fd02 	bl	8020798 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8016d94:	4b3a      	ldr	r3, [pc, #232]	@ (8016e80 <tcp_input+0x290>)
 8016d96:	681b      	ldr	r3, [r3, #0]
 8016d98:	881b      	ldrh	r3, [r3, #0]
 8016d9a:	b29b      	uxth	r3, r3
 8016d9c:	4a38      	ldr	r2, [pc, #224]	@ (8016e80 <tcp_input+0x290>)
 8016d9e:	6814      	ldr	r4, [r2, #0]
 8016da0:	4618      	mov	r0, r3
 8016da2:	f7fc f83d 	bl	8012e20 <lwip_htons>
 8016da6:	4603      	mov	r3, r0
 8016da8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8016daa:	4b35      	ldr	r3, [pc, #212]	@ (8016e80 <tcp_input+0x290>)
 8016dac:	681b      	ldr	r3, [r3, #0]
 8016dae:	885b      	ldrh	r3, [r3, #2]
 8016db0:	b29b      	uxth	r3, r3
 8016db2:	4a33      	ldr	r2, [pc, #204]	@ (8016e80 <tcp_input+0x290>)
 8016db4:	6814      	ldr	r4, [r2, #0]
 8016db6:	4618      	mov	r0, r3
 8016db8:	f7fc f832 	bl	8012e20 <lwip_htons>
 8016dbc:	4603      	mov	r3, r0
 8016dbe:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8016dc0:	4b2f      	ldr	r3, [pc, #188]	@ (8016e80 <tcp_input+0x290>)
 8016dc2:	681b      	ldr	r3, [r3, #0]
 8016dc4:	685b      	ldr	r3, [r3, #4]
 8016dc6:	4a2e      	ldr	r2, [pc, #184]	@ (8016e80 <tcp_input+0x290>)
 8016dc8:	6814      	ldr	r4, [r2, #0]
 8016dca:	4618      	mov	r0, r3
 8016dcc:	f7fc f83e 	bl	8012e4c <lwip_htonl>
 8016dd0:	4603      	mov	r3, r0
 8016dd2:	6063      	str	r3, [r4, #4]
 8016dd4:	6863      	ldr	r3, [r4, #4]
 8016dd6:	4a32      	ldr	r2, [pc, #200]	@ (8016ea0 <tcp_input+0x2b0>)
 8016dd8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8016dda:	4b29      	ldr	r3, [pc, #164]	@ (8016e80 <tcp_input+0x290>)
 8016ddc:	681b      	ldr	r3, [r3, #0]
 8016dde:	689b      	ldr	r3, [r3, #8]
 8016de0:	4a27      	ldr	r2, [pc, #156]	@ (8016e80 <tcp_input+0x290>)
 8016de2:	6814      	ldr	r4, [r2, #0]
 8016de4:	4618      	mov	r0, r3
 8016de6:	f7fc f831 	bl	8012e4c <lwip_htonl>
 8016dea:	4603      	mov	r3, r0
 8016dec:	60a3      	str	r3, [r4, #8]
 8016dee:	68a3      	ldr	r3, [r4, #8]
 8016df0:	4a2c      	ldr	r2, [pc, #176]	@ (8016ea4 <tcp_input+0x2b4>)
 8016df2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8016df4:	4b22      	ldr	r3, [pc, #136]	@ (8016e80 <tcp_input+0x290>)
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	89db      	ldrh	r3, [r3, #14]
 8016dfa:	b29b      	uxth	r3, r3
 8016dfc:	4a20      	ldr	r2, [pc, #128]	@ (8016e80 <tcp_input+0x290>)
 8016dfe:	6814      	ldr	r4, [r2, #0]
 8016e00:	4618      	mov	r0, r3
 8016e02:	f7fc f80d 	bl	8012e20 <lwip_htons>
 8016e06:	4603      	mov	r3, r0
 8016e08:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8016e0a:	4b1d      	ldr	r3, [pc, #116]	@ (8016e80 <tcp_input+0x290>)
 8016e0c:	681b      	ldr	r3, [r3, #0]
 8016e0e:	899b      	ldrh	r3, [r3, #12]
 8016e10:	b29b      	uxth	r3, r3
 8016e12:	4618      	mov	r0, r3
 8016e14:	f7fc f804 	bl	8012e20 <lwip_htons>
 8016e18:	4603      	mov	r3, r0
 8016e1a:	b2db      	uxtb	r3, r3
 8016e1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8016e20:	b2da      	uxtb	r2, r3
 8016e22:	4b21      	ldr	r3, [pc, #132]	@ (8016ea8 <tcp_input+0x2b8>)
 8016e24:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	891a      	ldrh	r2, [r3, #8]
 8016e2a:	4b20      	ldr	r3, [pc, #128]	@ (8016eac <tcp_input+0x2bc>)
 8016e2c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8016e2e:	4b1e      	ldr	r3, [pc, #120]	@ (8016ea8 <tcp_input+0x2b8>)
 8016e30:	781b      	ldrb	r3, [r3, #0]
 8016e32:	f003 0303 	and.w	r3, r3, #3
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d014      	beq.n	8016e64 <tcp_input+0x274>
    tcplen++;
 8016e3a:	4b1c      	ldr	r3, [pc, #112]	@ (8016eac <tcp_input+0x2bc>)
 8016e3c:	881b      	ldrh	r3, [r3, #0]
 8016e3e:	3301      	adds	r3, #1
 8016e40:	b29a      	uxth	r2, r3
 8016e42:	4b1a      	ldr	r3, [pc, #104]	@ (8016eac <tcp_input+0x2bc>)
 8016e44:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	891a      	ldrh	r2, [r3, #8]
 8016e4a:	4b18      	ldr	r3, [pc, #96]	@ (8016eac <tcp_input+0x2bc>)
 8016e4c:	881b      	ldrh	r3, [r3, #0]
 8016e4e:	429a      	cmp	r2, r3
 8016e50:	d908      	bls.n	8016e64 <tcp_input+0x274>
      /* u16_t overflow, cannot handle this */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: length u16_t overflow, cannot handle this\n"));
      TCP_STATS_INC(tcp.lenerr);
 8016e52:	4b0a      	ldr	r3, [pc, #40]	@ (8016e7c <tcp_input+0x28c>)
 8016e54:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8016e58:	3301      	adds	r3, #1
 8016e5a:	b29a      	uxth	r2, r3
 8016e5c:	4b07      	ldr	r3, [pc, #28]	@ (8016e7c <tcp_input+0x28c>)
 8016e5e:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
      goto dropped;
 8016e62:	e309      	b.n	8017478 <tcp_input+0x888>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8016e64:	2300      	movs	r3, #0
 8016e66:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016e68:	4b11      	ldr	r3, [pc, #68]	@ (8016eb0 <tcp_input+0x2c0>)
 8016e6a:	681b      	ldr	r3, [r3, #0]
 8016e6c:	61bb      	str	r3, [r7, #24]
 8016e6e:	e0a1      	b.n	8016fb4 <tcp_input+0x3c4>
 8016e70:	08023ff8 	.word	0x08023ff8
 8016e74:	0802402c 	.word	0x0802402c
 8016e78:	08024044 	.word	0x08024044
 8016e7c:	2002d36c 	.word	0x2002d36c
 8016e80:	2002d498 	.word	0x2002d498
 8016e84:	200270fc 	.word	0x200270fc
 8016e88:	2002d49c 	.word	0x2002d49c
 8016e8c:	2002d4a0 	.word	0x2002d4a0
 8016e90:	2002d49e 	.word	0x2002d49e
 8016e94:	0802406c 	.word	0x0802406c
 8016e98:	0802407c 	.word	0x0802407c
 8016e9c:	08024088 	.word	0x08024088
 8016ea0:	2002d4a8 	.word	0x2002d4a8
 8016ea4:	2002d4ac 	.word	0x2002d4ac
 8016ea8:	2002d4b4 	.word	0x2002d4b4
 8016eac:	2002d4b2 	.word	0x2002d4b2
 8016eb0:	2002d478 	.word	0x2002d478
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8016eb4:	69bb      	ldr	r3, [r7, #24]
 8016eb6:	7d1b      	ldrb	r3, [r3, #20]
 8016eb8:	2b00      	cmp	r3, #0
 8016eba:	d105      	bne.n	8016ec8 <tcp_input+0x2d8>
 8016ebc:	4b8a      	ldr	r3, [pc, #552]	@ (80170e8 <tcp_input+0x4f8>)
 8016ebe:	22fb      	movs	r2, #251	@ 0xfb
 8016ec0:	498a      	ldr	r1, [pc, #552]	@ (80170ec <tcp_input+0x4fc>)
 8016ec2:	488b      	ldr	r0, [pc, #556]	@ (80170f0 <tcp_input+0x500>)
 8016ec4:	f009 fc68 	bl	8020798 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8016ec8:	69bb      	ldr	r3, [r7, #24]
 8016eca:	7d1b      	ldrb	r3, [r3, #20]
 8016ecc:	2b0a      	cmp	r3, #10
 8016ece:	d105      	bne.n	8016edc <tcp_input+0x2ec>
 8016ed0:	4b85      	ldr	r3, [pc, #532]	@ (80170e8 <tcp_input+0x4f8>)
 8016ed2:	22fc      	movs	r2, #252	@ 0xfc
 8016ed4:	4987      	ldr	r1, [pc, #540]	@ (80170f4 <tcp_input+0x504>)
 8016ed6:	4886      	ldr	r0, [pc, #536]	@ (80170f0 <tcp_input+0x500>)
 8016ed8:	f009 fc5e 	bl	8020798 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8016edc:	69bb      	ldr	r3, [r7, #24]
 8016ede:	7d1b      	ldrb	r3, [r3, #20]
 8016ee0:	2b01      	cmp	r3, #1
 8016ee2:	d105      	bne.n	8016ef0 <tcp_input+0x300>
 8016ee4:	4b80      	ldr	r3, [pc, #512]	@ (80170e8 <tcp_input+0x4f8>)
 8016ee6:	22fd      	movs	r2, #253	@ 0xfd
 8016ee8:	4983      	ldr	r1, [pc, #524]	@ (80170f8 <tcp_input+0x508>)
 8016eea:	4881      	ldr	r0, [pc, #516]	@ (80170f0 <tcp_input+0x500>)
 8016eec:	f009 fc54 	bl	8020798 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016ef0:	69bb      	ldr	r3, [r7, #24]
 8016ef2:	7a1b      	ldrb	r3, [r3, #8]
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	d00c      	beq.n	8016f12 <tcp_input+0x322>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016ef8:	69bb      	ldr	r3, [r7, #24]
 8016efa:	7a1a      	ldrb	r2, [r3, #8]
 8016efc:	4b7f      	ldr	r3, [pc, #508]	@ (80170fc <tcp_input+0x50c>)
 8016efe:	685b      	ldr	r3, [r3, #4]
 8016f00:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016f04:	3301      	adds	r3, #1
 8016f06:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016f08:	429a      	cmp	r2, r3
 8016f0a:	d002      	beq.n	8016f12 <tcp_input+0x322>
      prev = pcb;
 8016f0c:	69bb      	ldr	r3, [r7, #24]
 8016f0e:	61fb      	str	r3, [r7, #28]
      continue;
 8016f10:	e04d      	b.n	8016fae <tcp_input+0x3be>
    }

    if (pcb->remote_port == tcphdr->src &&
 8016f12:	69bb      	ldr	r3, [r7, #24]
 8016f14:	8b1a      	ldrh	r2, [r3, #24]
 8016f16:	4b7a      	ldr	r3, [pc, #488]	@ (8017100 <tcp_input+0x510>)
 8016f18:	681b      	ldr	r3, [r3, #0]
 8016f1a:	881b      	ldrh	r3, [r3, #0]
 8016f1c:	b29b      	uxth	r3, r3
 8016f1e:	429a      	cmp	r2, r3
 8016f20:	d143      	bne.n	8016faa <tcp_input+0x3ba>
        pcb->local_port == tcphdr->dest &&
 8016f22:	69bb      	ldr	r3, [r7, #24]
 8016f24:	8ada      	ldrh	r2, [r3, #22]
 8016f26:	4b76      	ldr	r3, [pc, #472]	@ (8017100 <tcp_input+0x510>)
 8016f28:	681b      	ldr	r3, [r3, #0]
 8016f2a:	885b      	ldrh	r3, [r3, #2]
 8016f2c:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8016f2e:	429a      	cmp	r2, r3
 8016f30:	d13b      	bne.n	8016faa <tcp_input+0x3ba>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016f32:	69bb      	ldr	r3, [r7, #24]
 8016f34:	685a      	ldr	r2, [r3, #4]
 8016f36:	4b71      	ldr	r3, [pc, #452]	@ (80170fc <tcp_input+0x50c>)
 8016f38:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8016f3a:	429a      	cmp	r2, r3
 8016f3c:	d135      	bne.n	8016faa <tcp_input+0x3ba>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016f3e:	69bb      	ldr	r3, [r7, #24]
 8016f40:	681a      	ldr	r2, [r3, #0]
 8016f42:	4b6e      	ldr	r3, [pc, #440]	@ (80170fc <tcp_input+0x50c>)
 8016f44:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016f46:	429a      	cmp	r2, r3
 8016f48:	d12f      	bne.n	8016faa <tcp_input+0x3ba>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8016f4a:	69bb      	ldr	r3, [r7, #24]
 8016f4c:	68db      	ldr	r3, [r3, #12]
 8016f4e:	69ba      	ldr	r2, [r7, #24]
 8016f50:	429a      	cmp	r2, r3
 8016f52:	d106      	bne.n	8016f62 <tcp_input+0x372>
 8016f54:	4b64      	ldr	r3, [pc, #400]	@ (80170e8 <tcp_input+0x4f8>)
 8016f56:	f240 120d 	movw	r2, #269	@ 0x10d
 8016f5a:	496a      	ldr	r1, [pc, #424]	@ (8017104 <tcp_input+0x514>)
 8016f5c:	4864      	ldr	r0, [pc, #400]	@ (80170f0 <tcp_input+0x500>)
 8016f5e:	f009 fc1b 	bl	8020798 <iprintf>
      if (prev != NULL) {
 8016f62:	69fb      	ldr	r3, [r7, #28]
 8016f64:	2b00      	cmp	r3, #0
 8016f66:	d00b      	beq.n	8016f80 <tcp_input+0x390>
        prev->next = pcb->next;
 8016f68:	69bb      	ldr	r3, [r7, #24]
 8016f6a:	68da      	ldr	r2, [r3, #12]
 8016f6c:	69fb      	ldr	r3, [r7, #28]
 8016f6e:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8016f70:	4b65      	ldr	r3, [pc, #404]	@ (8017108 <tcp_input+0x518>)
 8016f72:	681a      	ldr	r2, [r3, #0]
 8016f74:	69bb      	ldr	r3, [r7, #24]
 8016f76:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8016f78:	4a63      	ldr	r2, [pc, #396]	@ (8017108 <tcp_input+0x518>)
 8016f7a:	69bb      	ldr	r3, [r7, #24]
 8016f7c:	6013      	str	r3, [r2, #0]
 8016f7e:	e007      	b.n	8016f90 <tcp_input+0x3a0>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8016f80:	4b62      	ldr	r3, [pc, #392]	@ (801710c <tcp_input+0x51c>)
 8016f82:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 8016f86:	3301      	adds	r3, #1
 8016f88:	b29a      	uxth	r2, r3
 8016f8a:	4b60      	ldr	r3, [pc, #384]	@ (801710c <tcp_input+0x51c>)
 8016f8c:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8016f90:	69bb      	ldr	r3, [r7, #24]
 8016f92:	68db      	ldr	r3, [r3, #12]
 8016f94:	69ba      	ldr	r2, [r7, #24]
 8016f96:	429a      	cmp	r2, r3
 8016f98:	d111      	bne.n	8016fbe <tcp_input+0x3ce>
 8016f9a:	4b53      	ldr	r3, [pc, #332]	@ (80170e8 <tcp_input+0x4f8>)
 8016f9c:	f240 1215 	movw	r2, #277	@ 0x115
 8016fa0:	495b      	ldr	r1, [pc, #364]	@ (8017110 <tcp_input+0x520>)
 8016fa2:	4853      	ldr	r0, [pc, #332]	@ (80170f0 <tcp_input+0x500>)
 8016fa4:	f009 fbf8 	bl	8020798 <iprintf>
      break;
 8016fa8:	e009      	b.n	8016fbe <tcp_input+0x3ce>
    }
    prev = pcb;
 8016faa:	69bb      	ldr	r3, [r7, #24]
 8016fac:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016fae:	69bb      	ldr	r3, [r7, #24]
 8016fb0:	68db      	ldr	r3, [r3, #12]
 8016fb2:	61bb      	str	r3, [r7, #24]
 8016fb4:	69bb      	ldr	r3, [r7, #24]
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	f47f af7c 	bne.w	8016eb4 <tcp_input+0x2c4>
 8016fbc:	e000      	b.n	8016fc0 <tcp_input+0x3d0>
      break;
 8016fbe:	bf00      	nop
  }

  if (pcb == NULL) {
 8016fc0:	69bb      	ldr	r3, [r7, #24]
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	f040 80bb 	bne.w	801713e <tcp_input+0x54e>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016fc8:	4b52      	ldr	r3, [pc, #328]	@ (8017114 <tcp_input+0x524>)
 8016fca:	681b      	ldr	r3, [r3, #0]
 8016fcc:	61bb      	str	r3, [r7, #24]
 8016fce:	e03f      	b.n	8017050 <tcp_input+0x460>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8016fd0:	69bb      	ldr	r3, [r7, #24]
 8016fd2:	7d1b      	ldrb	r3, [r3, #20]
 8016fd4:	2b0a      	cmp	r3, #10
 8016fd6:	d006      	beq.n	8016fe6 <tcp_input+0x3f6>
 8016fd8:	4b43      	ldr	r3, [pc, #268]	@ (80170e8 <tcp_input+0x4f8>)
 8016fda:	f240 121f 	movw	r2, #287	@ 0x11f
 8016fde:	494e      	ldr	r1, [pc, #312]	@ (8017118 <tcp_input+0x528>)
 8016fe0:	4843      	ldr	r0, [pc, #268]	@ (80170f0 <tcp_input+0x500>)
 8016fe2:	f009 fbd9 	bl	8020798 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016fe6:	69bb      	ldr	r3, [r7, #24]
 8016fe8:	7a1b      	ldrb	r3, [r3, #8]
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d009      	beq.n	8017002 <tcp_input+0x412>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016fee:	69bb      	ldr	r3, [r7, #24]
 8016ff0:	7a1a      	ldrb	r2, [r3, #8]
 8016ff2:	4b42      	ldr	r3, [pc, #264]	@ (80170fc <tcp_input+0x50c>)
 8016ff4:	685b      	ldr	r3, [r3, #4]
 8016ff6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016ffa:	3301      	adds	r3, #1
 8016ffc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016ffe:	429a      	cmp	r2, r3
 8017000:	d122      	bne.n	8017048 <tcp_input+0x458>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8017002:	69bb      	ldr	r3, [r7, #24]
 8017004:	8b1a      	ldrh	r2, [r3, #24]
 8017006:	4b3e      	ldr	r3, [pc, #248]	@ (8017100 <tcp_input+0x510>)
 8017008:	681b      	ldr	r3, [r3, #0]
 801700a:	881b      	ldrh	r3, [r3, #0]
 801700c:	b29b      	uxth	r3, r3
 801700e:	429a      	cmp	r2, r3
 8017010:	d11b      	bne.n	801704a <tcp_input+0x45a>
          pcb->local_port == tcphdr->dest &&
 8017012:	69bb      	ldr	r3, [r7, #24]
 8017014:	8ada      	ldrh	r2, [r3, #22]
 8017016:	4b3a      	ldr	r3, [pc, #232]	@ (8017100 <tcp_input+0x510>)
 8017018:	681b      	ldr	r3, [r3, #0]
 801701a:	885b      	ldrh	r3, [r3, #2]
 801701c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801701e:	429a      	cmp	r2, r3
 8017020:	d113      	bne.n	801704a <tcp_input+0x45a>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017022:	69bb      	ldr	r3, [r7, #24]
 8017024:	685a      	ldr	r2, [r3, #4]
 8017026:	4b35      	ldr	r3, [pc, #212]	@ (80170fc <tcp_input+0x50c>)
 8017028:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801702a:	429a      	cmp	r2, r3
 801702c:	d10d      	bne.n	801704a <tcp_input+0x45a>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801702e:	69bb      	ldr	r3, [r7, #24]
 8017030:	681a      	ldr	r2, [r3, #0]
 8017032:	4b32      	ldr	r3, [pc, #200]	@ (80170fc <tcp_input+0x50c>)
 8017034:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017036:	429a      	cmp	r2, r3
 8017038:	d107      	bne.n	801704a <tcp_input+0x45a>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801703a:	69b8      	ldr	r0, [r7, #24]
 801703c:	f000 fb88 	bl	8017750 <tcp_timewait_input>
        }
        pbuf_free(p);
 8017040:	6878      	ldr	r0, [r7, #4]
 8017042:	f7fd fd1b 	bl	8014a7c <pbuf_free>
        return;
 8017046:	e224      	b.n	8017492 <tcp_input+0x8a2>
        continue;
 8017048:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801704a:	69bb      	ldr	r3, [r7, #24]
 801704c:	68db      	ldr	r3, [r3, #12]
 801704e:	61bb      	str	r3, [r7, #24]
 8017050:	69bb      	ldr	r3, [r7, #24]
 8017052:	2b00      	cmp	r3, #0
 8017054:	d1bc      	bne.n	8016fd0 <tcp_input+0x3e0>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8017056:	2300      	movs	r3, #0
 8017058:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801705a:	4b30      	ldr	r3, [pc, #192]	@ (801711c <tcp_input+0x52c>)
 801705c:	681b      	ldr	r3, [r3, #0]
 801705e:	617b      	str	r3, [r7, #20]
 8017060:	e02a      	b.n	80170b8 <tcp_input+0x4c8>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8017062:	697b      	ldr	r3, [r7, #20]
 8017064:	7a1b      	ldrb	r3, [r3, #8]
 8017066:	2b00      	cmp	r3, #0
 8017068:	d00c      	beq.n	8017084 <tcp_input+0x494>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801706a:	697b      	ldr	r3, [r7, #20]
 801706c:	7a1a      	ldrb	r2, [r3, #8]
 801706e:	4b23      	ldr	r3, [pc, #140]	@ (80170fc <tcp_input+0x50c>)
 8017070:	685b      	ldr	r3, [r3, #4]
 8017072:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8017076:	3301      	adds	r3, #1
 8017078:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801707a:	429a      	cmp	r2, r3
 801707c:	d002      	beq.n	8017084 <tcp_input+0x494>
        prev = (struct tcp_pcb *)lpcb;
 801707e:	697b      	ldr	r3, [r7, #20]
 8017080:	61fb      	str	r3, [r7, #28]
        continue;
 8017082:	e016      	b.n	80170b2 <tcp_input+0x4c2>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8017084:	697b      	ldr	r3, [r7, #20]
 8017086:	8ada      	ldrh	r2, [r3, #22]
 8017088:	4b1d      	ldr	r3, [pc, #116]	@ (8017100 <tcp_input+0x510>)
 801708a:	681b      	ldr	r3, [r3, #0]
 801708c:	885b      	ldrh	r3, [r3, #2]
 801708e:	b29b      	uxth	r3, r3
 8017090:	429a      	cmp	r2, r3
 8017092:	d10c      	bne.n	80170ae <tcp_input+0x4be>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8017094:	697b      	ldr	r3, [r7, #20]
 8017096:	681a      	ldr	r2, [r3, #0]
 8017098:	4b18      	ldr	r3, [pc, #96]	@ (80170fc <tcp_input+0x50c>)
 801709a:	695b      	ldr	r3, [r3, #20]
 801709c:	429a      	cmp	r2, r3
 801709e:	d00f      	beq.n	80170c0 <tcp_input+0x4d0>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80170a0:	697b      	ldr	r3, [r7, #20]
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	d00d      	beq.n	80170c2 <tcp_input+0x4d2>
 80170a6:	697b      	ldr	r3, [r7, #20]
 80170a8:	681b      	ldr	r3, [r3, #0]
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d009      	beq.n	80170c2 <tcp_input+0x4d2>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80170ae:	697b      	ldr	r3, [r7, #20]
 80170b0:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80170b2:	697b      	ldr	r3, [r7, #20]
 80170b4:	68db      	ldr	r3, [r3, #12]
 80170b6:	617b      	str	r3, [r7, #20]
 80170b8:	697b      	ldr	r3, [r7, #20]
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	d1d1      	bne.n	8017062 <tcp_input+0x472>
 80170be:	e000      	b.n	80170c2 <tcp_input+0x4d2>
            break;
 80170c0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80170c2:	697b      	ldr	r3, [r7, #20]
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d03a      	beq.n	801713e <tcp_input+0x54e>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80170c8:	69fb      	ldr	r3, [r7, #28]
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	d028      	beq.n	8017120 <tcp_input+0x530>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80170ce:	697b      	ldr	r3, [r7, #20]
 80170d0:	68da      	ldr	r2, [r3, #12]
 80170d2:	69fb      	ldr	r3, [r7, #28]
 80170d4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80170d6:	4b11      	ldr	r3, [pc, #68]	@ (801711c <tcp_input+0x52c>)
 80170d8:	681a      	ldr	r2, [r3, #0]
 80170da:	697b      	ldr	r3, [r7, #20]
 80170dc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80170de:	4a0f      	ldr	r2, [pc, #60]	@ (801711c <tcp_input+0x52c>)
 80170e0:	697b      	ldr	r3, [r7, #20]
 80170e2:	6013      	str	r3, [r2, #0]
 80170e4:	e024      	b.n	8017130 <tcp_input+0x540>
 80170e6:	bf00      	nop
 80170e8:	08023ff8 	.word	0x08023ff8
 80170ec:	080240a8 	.word	0x080240a8
 80170f0:	08024044 	.word	0x08024044
 80170f4:	080240d0 	.word	0x080240d0
 80170f8:	080240fc 	.word	0x080240fc
 80170fc:	200270fc 	.word	0x200270fc
 8017100:	2002d498 	.word	0x2002d498
 8017104:	08024124 	.word	0x08024124
 8017108:	2002d478 	.word	0x2002d478
 801710c:	2002d36c 	.word	0x2002d36c
 8017110:	08024150 	.word	0x08024150
 8017114:	2002d47c 	.word	0x2002d47c
 8017118:	0802417c 	.word	0x0802417c
 801711c:	2002d474 	.word	0x2002d474
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8017120:	4ba0      	ldr	r3, [pc, #640]	@ (80173a4 <tcp_input+0x7b4>)
 8017122:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 8017126:	3301      	adds	r3, #1
 8017128:	b29a      	uxth	r2, r3
 801712a:	4b9e      	ldr	r3, [pc, #632]	@ (80173a4 <tcp_input+0x7b4>)
 801712c:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8017130:	6978      	ldr	r0, [r7, #20]
 8017132:	f000 fa05 	bl	8017540 <tcp_listen_input>
      }
      pbuf_free(p);
 8017136:	6878      	ldr	r0, [r7, #4]
 8017138:	f7fd fca0 	bl	8014a7c <pbuf_free>
      return;
 801713c:	e1a9      	b.n	8017492 <tcp_input+0x8a2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801713e:	69bb      	ldr	r3, [r7, #24]
 8017140:	2b00      	cmp	r3, #0
 8017142:	f000 815f 	beq.w	8017404 <tcp_input+0x814>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8017146:	4b98      	ldr	r3, [pc, #608]	@ (80173a8 <tcp_input+0x7b8>)
 8017148:	2200      	movs	r2, #0
 801714a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	891a      	ldrh	r2, [r3, #8]
 8017150:	4b95      	ldr	r3, [pc, #596]	@ (80173a8 <tcp_input+0x7b8>)
 8017152:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8017154:	4a94      	ldr	r2, [pc, #592]	@ (80173a8 <tcp_input+0x7b8>)
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801715a:	4b94      	ldr	r3, [pc, #592]	@ (80173ac <tcp_input+0x7bc>)
 801715c:	681b      	ldr	r3, [r3, #0]
 801715e:	4a92      	ldr	r2, [pc, #584]	@ (80173a8 <tcp_input+0x7b8>)
 8017160:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 8017162:	4b93      	ldr	r3, [pc, #588]	@ (80173b0 <tcp_input+0x7c0>)
 8017164:	2200      	movs	r2, #0
 8017166:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8017168:	4b92      	ldr	r3, [pc, #584]	@ (80173b4 <tcp_input+0x7c4>)
 801716a:	2200      	movs	r2, #0
 801716c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801716e:	4b92      	ldr	r3, [pc, #584]	@ (80173b8 <tcp_input+0x7c8>)
 8017170:	2200      	movs	r2, #0
 8017172:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8017174:	4b91      	ldr	r3, [pc, #580]	@ (80173bc <tcp_input+0x7cc>)
 8017176:	781b      	ldrb	r3, [r3, #0]
 8017178:	f003 0308 	and.w	r3, r3, #8
 801717c:	2b00      	cmp	r3, #0
 801717e:	d006      	beq.n	801718e <tcp_input+0x59e>
      p->flags |= PBUF_FLAG_PUSH;
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	7b5b      	ldrb	r3, [r3, #13]
 8017184:	f043 0301 	orr.w	r3, r3, #1
 8017188:	b2da      	uxtb	r2, r3
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801718e:	69bb      	ldr	r3, [r7, #24]
 8017190:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017192:	2b00      	cmp	r3, #0
 8017194:	d01e      	beq.n	80171d4 <tcp_input+0x5e4>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8017196:	69b8      	ldr	r0, [r7, #24]
 8017198:	f7fe ffe6 	bl	8016168 <tcp_process_refused_data>
 801719c:	4603      	mov	r3, r0
 801719e:	f113 0f0d 	cmn.w	r3, #13
 80171a2:	d007      	beq.n	80171b4 <tcp_input+0x5c4>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80171a4:	69bb      	ldr	r3, [r7, #24]
 80171a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	d013      	beq.n	80171d4 <tcp_input+0x5e4>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80171ac:	4b84      	ldr	r3, [pc, #528]	@ (80173c0 <tcp_input+0x7d0>)
 80171ae:	881b      	ldrh	r3, [r3, #0]
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	d00f      	beq.n	80171d4 <tcp_input+0x5e4>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80171b4:	69bb      	ldr	r3, [r7, #24]
 80171b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	d102      	bne.n	80171c2 <tcp_input+0x5d2>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80171bc:	69b8      	ldr	r0, [r7, #24]
 80171be:	f003 fedd 	bl	801af7c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
 80171c2:	4b78      	ldr	r3, [pc, #480]	@ (80173a4 <tcp_input+0x7b4>)
 80171c4:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 80171c8:	3301      	adds	r3, #1
 80171ca:	b29a      	uxth	r2, r3
 80171cc:	4b75      	ldr	r3, [pc, #468]	@ (80173a4 <tcp_input+0x7b4>)
 80171ce:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80171d2:	e104      	b.n	80173de <tcp_input+0x7ee>
      }
    }
    tcp_input_pcb = pcb;
 80171d4:	4a7b      	ldr	r2, [pc, #492]	@ (80173c4 <tcp_input+0x7d4>)
 80171d6:	69bb      	ldr	r3, [r7, #24]
 80171d8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80171da:	69b8      	ldr	r0, [r7, #24]
 80171dc:	f000 fb32 	bl	8017844 <tcp_process>
 80171e0:	4603      	mov	r3, r0
 80171e2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80171e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80171e8:	f113 0f0d 	cmn.w	r3, #13
 80171ec:	f000 80d1 	beq.w	8017392 <tcp_input+0x7a2>
      if (recv_flags & TF_RESET) {
 80171f0:	4b70      	ldr	r3, [pc, #448]	@ (80173b4 <tcp_input+0x7c4>)
 80171f2:	781b      	ldrb	r3, [r3, #0]
 80171f4:	f003 0308 	and.w	r3, r3, #8
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d015      	beq.n	8017228 <tcp_input+0x638>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80171fc:	69bb      	ldr	r3, [r7, #24]
 80171fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017202:	2b00      	cmp	r3, #0
 8017204:	d008      	beq.n	8017218 <tcp_input+0x628>
 8017206:	69bb      	ldr	r3, [r7, #24]
 8017208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801720c:	69ba      	ldr	r2, [r7, #24]
 801720e:	6912      	ldr	r2, [r2, #16]
 8017210:	f06f 010d 	mvn.w	r1, #13
 8017214:	4610      	mov	r0, r2
 8017216:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8017218:	69b9      	ldr	r1, [r7, #24]
 801721a:	486b      	ldr	r0, [pc, #428]	@ (80173c8 <tcp_input+0x7d8>)
 801721c:	f7ff fb6a 	bl	80168f4 <tcp_pcb_remove>
        tcp_free(pcb);
 8017220:	69b8      	ldr	r0, [r7, #24]
 8017222:	f7fd ff23 	bl	801506c <tcp_free>
 8017226:	e0da      	b.n	80173de <tcp_input+0x7ee>
      } else {
        err = ERR_OK;
 8017228:	2300      	movs	r3, #0
 801722a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801722c:	4b62      	ldr	r3, [pc, #392]	@ (80173b8 <tcp_input+0x7c8>)
 801722e:	881b      	ldrh	r3, [r3, #0]
 8017230:	2b00      	cmp	r3, #0
 8017232:	d01d      	beq.n	8017270 <tcp_input+0x680>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8017234:	4b60      	ldr	r3, [pc, #384]	@ (80173b8 <tcp_input+0x7c8>)
 8017236:	881b      	ldrh	r3, [r3, #0]
 8017238:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801723a:	69bb      	ldr	r3, [r7, #24]
 801723c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017240:	2b00      	cmp	r3, #0
 8017242:	d00a      	beq.n	801725a <tcp_input+0x66a>
 8017244:	69bb      	ldr	r3, [r7, #24]
 8017246:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801724a:	69ba      	ldr	r2, [r7, #24]
 801724c:	6910      	ldr	r0, [r2, #16]
 801724e:	89fa      	ldrh	r2, [r7, #14]
 8017250:	69b9      	ldr	r1, [r7, #24]
 8017252:	4798      	blx	r3
 8017254:	4603      	mov	r3, r0
 8017256:	74fb      	strb	r3, [r7, #19]
 8017258:	e001      	b.n	801725e <tcp_input+0x66e>
 801725a:	2300      	movs	r3, #0
 801725c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801725e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017262:	f113 0f0d 	cmn.w	r3, #13
 8017266:	f000 8096 	beq.w	8017396 <tcp_input+0x7a6>
              goto aborted;
            }
          }
          recv_acked = 0;
 801726a:	4b53      	ldr	r3, [pc, #332]	@ (80173b8 <tcp_input+0x7c8>)
 801726c:	2200      	movs	r2, #0
 801726e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8017270:	69b8      	ldr	r0, [r7, #24]
 8017272:	f000 f925 	bl	80174c0 <tcp_input_delayed_close>
 8017276:	4603      	mov	r3, r0
 8017278:	2b00      	cmp	r3, #0
 801727a:	f040 808e 	bne.w	801739a <tcp_input+0x7aa>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801727e:	4b4c      	ldr	r3, [pc, #304]	@ (80173b0 <tcp_input+0x7c0>)
 8017280:	681b      	ldr	r3, [r3, #0]
 8017282:	2b00      	cmp	r3, #0
 8017284:	d041      	beq.n	801730a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8017286:	69bb      	ldr	r3, [r7, #24]
 8017288:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801728a:	2b00      	cmp	r3, #0
 801728c:	d006      	beq.n	801729c <tcp_input+0x6ac>
 801728e:	4b4f      	ldr	r3, [pc, #316]	@ (80173cc <tcp_input+0x7dc>)
 8017290:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8017294:	494e      	ldr	r1, [pc, #312]	@ (80173d0 <tcp_input+0x7e0>)
 8017296:	484f      	ldr	r0, [pc, #316]	@ (80173d4 <tcp_input+0x7e4>)
 8017298:	f009 fa7e 	bl	8020798 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801729c:	69bb      	ldr	r3, [r7, #24]
 801729e:	8b5b      	ldrh	r3, [r3, #26]
 80172a0:	f003 0310 	and.w	r3, r3, #16
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	d008      	beq.n	80172ba <tcp_input+0x6ca>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80172a8:	4b41      	ldr	r3, [pc, #260]	@ (80173b0 <tcp_input+0x7c0>)
 80172aa:	681b      	ldr	r3, [r3, #0]
 80172ac:	4618      	mov	r0, r3
 80172ae:	f7fd fbe5 	bl	8014a7c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80172b2:	69b8      	ldr	r0, [r7, #24]
 80172b4:	f7fe fa1e 	bl	80156f4 <tcp_abort>
            goto aborted;
 80172b8:	e091      	b.n	80173de <tcp_input+0x7ee>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80172ba:	69bb      	ldr	r3, [r7, #24]
 80172bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	d00c      	beq.n	80172de <tcp_input+0x6ee>
 80172c4:	69bb      	ldr	r3, [r7, #24]
 80172c6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80172ca:	69bb      	ldr	r3, [r7, #24]
 80172cc:	6918      	ldr	r0, [r3, #16]
 80172ce:	4b38      	ldr	r3, [pc, #224]	@ (80173b0 <tcp_input+0x7c0>)
 80172d0:	681a      	ldr	r2, [r3, #0]
 80172d2:	2300      	movs	r3, #0
 80172d4:	69b9      	ldr	r1, [r7, #24]
 80172d6:	47a0      	blx	r4
 80172d8:	4603      	mov	r3, r0
 80172da:	74fb      	strb	r3, [r7, #19]
 80172dc:	e008      	b.n	80172f0 <tcp_input+0x700>
 80172de:	4b34      	ldr	r3, [pc, #208]	@ (80173b0 <tcp_input+0x7c0>)
 80172e0:	681a      	ldr	r2, [r3, #0]
 80172e2:	2300      	movs	r3, #0
 80172e4:	69b9      	ldr	r1, [r7, #24]
 80172e6:	2000      	movs	r0, #0
 80172e8:	f7ff f814 	bl	8016314 <tcp_recv_null>
 80172ec:	4603      	mov	r3, r0
 80172ee:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80172f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80172f4:	f113 0f0d 	cmn.w	r3, #13
 80172f8:	d051      	beq.n	801739e <tcp_input+0x7ae>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80172fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d003      	beq.n	801730a <tcp_input+0x71a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8017302:	4b2b      	ldr	r3, [pc, #172]	@ (80173b0 <tcp_input+0x7c0>)
 8017304:	681a      	ldr	r2, [r3, #0]
 8017306:	69bb      	ldr	r3, [r7, #24]
 8017308:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801730a:	4b2a      	ldr	r3, [pc, #168]	@ (80173b4 <tcp_input+0x7c4>)
 801730c:	781b      	ldrb	r3, [r3, #0]
 801730e:	f003 0320 	and.w	r3, r3, #32
 8017312:	2b00      	cmp	r3, #0
 8017314:	d030      	beq.n	8017378 <tcp_input+0x788>
          if (pcb->refused_data != NULL) {
 8017316:	69bb      	ldr	r3, [r7, #24]
 8017318:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801731a:	2b00      	cmp	r3, #0
 801731c:	d009      	beq.n	8017332 <tcp_input+0x742>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801731e:	69bb      	ldr	r3, [r7, #24]
 8017320:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017322:	7b5a      	ldrb	r2, [r3, #13]
 8017324:	69bb      	ldr	r3, [r7, #24]
 8017326:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017328:	f042 0220 	orr.w	r2, r2, #32
 801732c:	b2d2      	uxtb	r2, r2
 801732e:	735a      	strb	r2, [r3, #13]
 8017330:	e022      	b.n	8017378 <tcp_input+0x788>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8017332:	69bb      	ldr	r3, [r7, #24]
 8017334:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017336:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801733a:	d005      	beq.n	8017348 <tcp_input+0x758>
              pcb->rcv_wnd++;
 801733c:	69bb      	ldr	r3, [r7, #24]
 801733e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017340:	3301      	adds	r3, #1
 8017342:	b29a      	uxth	r2, r3
 8017344:	69bb      	ldr	r3, [r7, #24]
 8017346:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8017348:	69bb      	ldr	r3, [r7, #24]
 801734a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801734e:	2b00      	cmp	r3, #0
 8017350:	d00b      	beq.n	801736a <tcp_input+0x77a>
 8017352:	69bb      	ldr	r3, [r7, #24]
 8017354:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8017358:	69bb      	ldr	r3, [r7, #24]
 801735a:	6918      	ldr	r0, [r3, #16]
 801735c:	2300      	movs	r3, #0
 801735e:	2200      	movs	r2, #0
 8017360:	69b9      	ldr	r1, [r7, #24]
 8017362:	47a0      	blx	r4
 8017364:	4603      	mov	r3, r0
 8017366:	74fb      	strb	r3, [r7, #19]
 8017368:	e001      	b.n	801736e <tcp_input+0x77e>
 801736a:	2300      	movs	r3, #0
 801736c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801736e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017372:	f113 0f0d 	cmn.w	r3, #13
 8017376:	d02f      	beq.n	80173d8 <tcp_input+0x7e8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8017378:	4b12      	ldr	r3, [pc, #72]	@ (80173c4 <tcp_input+0x7d4>)
 801737a:	2200      	movs	r2, #0
 801737c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801737e:	69b8      	ldr	r0, [r7, #24]
 8017380:	f000 f89e 	bl	80174c0 <tcp_input_delayed_close>
 8017384:	4603      	mov	r3, r0
 8017386:	2b00      	cmp	r3, #0
 8017388:	d128      	bne.n	80173dc <tcp_input+0x7ec>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801738a:	69b8      	ldr	r0, [r7, #24]
 801738c:	f002 ffd0 	bl	801a330 <tcp_output>
 8017390:	e025      	b.n	80173de <tcp_input+0x7ee>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8017392:	bf00      	nop
 8017394:	e023      	b.n	80173de <tcp_input+0x7ee>
              goto aborted;
 8017396:	bf00      	nop
 8017398:	e021      	b.n	80173de <tcp_input+0x7ee>
          goto aborted;
 801739a:	bf00      	nop
 801739c:	e01f      	b.n	80173de <tcp_input+0x7ee>
            goto aborted;
 801739e:	bf00      	nop
 80173a0:	e01d      	b.n	80173de <tcp_input+0x7ee>
 80173a2:	bf00      	nop
 80173a4:	2002d36c 	.word	0x2002d36c
 80173a8:	2002d484 	.word	0x2002d484
 80173ac:	2002d498 	.word	0x2002d498
 80173b0:	2002d4b8 	.word	0x2002d4b8
 80173b4:	2002d4b5 	.word	0x2002d4b5
 80173b8:	2002d4b0 	.word	0x2002d4b0
 80173bc:	2002d4b4 	.word	0x2002d4b4
 80173c0:	2002d4b2 	.word	0x2002d4b2
 80173c4:	2002d4bc 	.word	0x2002d4bc
 80173c8:	2002d478 	.word	0x2002d478
 80173cc:	08023ff8 	.word	0x08023ff8
 80173d0:	080241ac 	.word	0x080241ac
 80173d4:	08024044 	.word	0x08024044
              goto aborted;
 80173d8:	bf00      	nop
 80173da:	e000      	b.n	80173de <tcp_input+0x7ee>
          goto aborted;
 80173dc:	bf00      	nop
    tcp_input_pcb = NULL;
 80173de:	4b2e      	ldr	r3, [pc, #184]	@ (8017498 <tcp_input+0x8a8>)
 80173e0:	2200      	movs	r2, #0
 80173e2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80173e4:	4b2d      	ldr	r3, [pc, #180]	@ (801749c <tcp_input+0x8ac>)
 80173e6:	2200      	movs	r2, #0
 80173e8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80173ea:	4b2d      	ldr	r3, [pc, #180]	@ (80174a0 <tcp_input+0x8b0>)
 80173ec:	685b      	ldr	r3, [r3, #4]
 80173ee:	2b00      	cmp	r3, #0
 80173f0:	d04e      	beq.n	8017490 <tcp_input+0x8a0>
      pbuf_free(inseg.p);
 80173f2:	4b2b      	ldr	r3, [pc, #172]	@ (80174a0 <tcp_input+0x8b0>)
 80173f4:	685b      	ldr	r3, [r3, #4]
 80173f6:	4618      	mov	r0, r3
 80173f8:	f7fd fb40 	bl	8014a7c <pbuf_free>
      inseg.p = NULL;
 80173fc:	4b28      	ldr	r3, [pc, #160]	@ (80174a0 <tcp_input+0x8b0>)
 80173fe:	2200      	movs	r2, #0
 8017400:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8017402:	e045      	b.n	8017490 <tcp_input+0x8a0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8017404:	4b27      	ldr	r3, [pc, #156]	@ (80174a4 <tcp_input+0x8b4>)
 8017406:	681b      	ldr	r3, [r3, #0]
 8017408:	899b      	ldrh	r3, [r3, #12]
 801740a:	b29b      	uxth	r3, r3
 801740c:	4618      	mov	r0, r3
 801740e:	f7fb fd07 	bl	8012e20 <lwip_htons>
 8017412:	4603      	mov	r3, r0
 8017414:	b2db      	uxtb	r3, r3
 8017416:	f003 0304 	and.w	r3, r3, #4
 801741a:	2b00      	cmp	r3, #0
 801741c:	d128      	bne.n	8017470 <tcp_input+0x880>
      TCP_STATS_INC(tcp.proterr);
 801741e:	4b22      	ldr	r3, [pc, #136]	@ (80174a8 <tcp_input+0x8b8>)
 8017420:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8017424:	3301      	adds	r3, #1
 8017426:	b29a      	uxth	r2, r3
 8017428:	4b1f      	ldr	r3, [pc, #124]	@ (80174a8 <tcp_input+0x8b8>)
 801742a:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
      TCP_STATS_INC(tcp.drop);
 801742e:	4b1e      	ldr	r3, [pc, #120]	@ (80174a8 <tcp_input+0x8b8>)
 8017430:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 8017434:	3301      	adds	r3, #1
 8017436:	b29a      	uxth	r2, r3
 8017438:	4b1b      	ldr	r3, [pc, #108]	@ (80174a8 <tcp_input+0x8b8>)
 801743a:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801743e:	4b1b      	ldr	r3, [pc, #108]	@ (80174ac <tcp_input+0x8bc>)
 8017440:	6819      	ldr	r1, [r3, #0]
 8017442:	4b1b      	ldr	r3, [pc, #108]	@ (80174b0 <tcp_input+0x8c0>)
 8017444:	881b      	ldrh	r3, [r3, #0]
 8017446:	461a      	mov	r2, r3
 8017448:	4b1a      	ldr	r3, [pc, #104]	@ (80174b4 <tcp_input+0x8c4>)
 801744a:	681b      	ldr	r3, [r3, #0]
 801744c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801744e:	4b15      	ldr	r3, [pc, #84]	@ (80174a4 <tcp_input+0x8b4>)
 8017450:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017452:	885b      	ldrh	r3, [r3, #2]
 8017454:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017456:	4a13      	ldr	r2, [pc, #76]	@ (80174a4 <tcp_input+0x8b4>)
 8017458:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801745a:	8812      	ldrh	r2, [r2, #0]
 801745c:	b292      	uxth	r2, r2
 801745e:	9202      	str	r2, [sp, #8]
 8017460:	9301      	str	r3, [sp, #4]
 8017462:	4b15      	ldr	r3, [pc, #84]	@ (80174b8 <tcp_input+0x8c8>)
 8017464:	9300      	str	r3, [sp, #0]
 8017466:	4b15      	ldr	r3, [pc, #84]	@ (80174bc <tcp_input+0x8cc>)
 8017468:	4602      	mov	r2, r0
 801746a:	2000      	movs	r0, #0
 801746c:	f003 fd34 	bl	801aed8 <tcp_rst>
    pbuf_free(p);
 8017470:	6878      	ldr	r0, [r7, #4]
 8017472:	f7fd fb03 	bl	8014a7c <pbuf_free>
  return;
 8017476:	e00b      	b.n	8017490 <tcp_input+0x8a0>
dropped:
  TCP_STATS_INC(tcp.drop);
 8017478:	4b0b      	ldr	r3, [pc, #44]	@ (80174a8 <tcp_input+0x8b8>)
 801747a:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 801747e:	3301      	adds	r3, #1
 8017480:	b29a      	uxth	r2, r3
 8017482:	4b09      	ldr	r3, [pc, #36]	@ (80174a8 <tcp_input+0x8b8>)
 8017484:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8017488:	6878      	ldr	r0, [r7, #4]
 801748a:	f7fd faf7 	bl	8014a7c <pbuf_free>
 801748e:	e000      	b.n	8017492 <tcp_input+0x8a2>
  return;
 8017490:	bf00      	nop
}
 8017492:	3724      	adds	r7, #36	@ 0x24
 8017494:	46bd      	mov	sp, r7
 8017496:	bd90      	pop	{r4, r7, pc}
 8017498:	2002d4bc 	.word	0x2002d4bc
 801749c:	2002d4b8 	.word	0x2002d4b8
 80174a0:	2002d484 	.word	0x2002d484
 80174a4:	2002d498 	.word	0x2002d498
 80174a8:	2002d36c 	.word	0x2002d36c
 80174ac:	2002d4ac 	.word	0x2002d4ac
 80174b0:	2002d4b2 	.word	0x2002d4b2
 80174b4:	2002d4a8 	.word	0x2002d4a8
 80174b8:	2002710c 	.word	0x2002710c
 80174bc:	20027110 	.word	0x20027110

080174c0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80174c0:	b580      	push	{r7, lr}
 80174c2:	b082      	sub	sp, #8
 80174c4:	af00      	add	r7, sp, #0
 80174c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d106      	bne.n	80174dc <tcp_input_delayed_close+0x1c>
 80174ce:	4b17      	ldr	r3, [pc, #92]	@ (801752c <tcp_input_delayed_close+0x6c>)
 80174d0:	f240 225a 	movw	r2, #602	@ 0x25a
 80174d4:	4916      	ldr	r1, [pc, #88]	@ (8017530 <tcp_input_delayed_close+0x70>)
 80174d6:	4817      	ldr	r0, [pc, #92]	@ (8017534 <tcp_input_delayed_close+0x74>)
 80174d8:	f009 f95e 	bl	8020798 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80174dc:	4b16      	ldr	r3, [pc, #88]	@ (8017538 <tcp_input_delayed_close+0x78>)
 80174de:	781b      	ldrb	r3, [r3, #0]
 80174e0:	f003 0310 	and.w	r3, r3, #16
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	d01c      	beq.n	8017522 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	8b5b      	ldrh	r3, [r3, #26]
 80174ec:	f003 0310 	and.w	r3, r3, #16
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	d10d      	bne.n	8017510 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80174fa:	2b00      	cmp	r3, #0
 80174fc:	d008      	beq.n	8017510 <tcp_input_delayed_close+0x50>
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017504:	687a      	ldr	r2, [r7, #4]
 8017506:	6912      	ldr	r2, [r2, #16]
 8017508:	f06f 010e 	mvn.w	r1, #14
 801750c:	4610      	mov	r0, r2
 801750e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8017510:	6879      	ldr	r1, [r7, #4]
 8017512:	480a      	ldr	r0, [pc, #40]	@ (801753c <tcp_input_delayed_close+0x7c>)
 8017514:	f7ff f9ee 	bl	80168f4 <tcp_pcb_remove>
    tcp_free(pcb);
 8017518:	6878      	ldr	r0, [r7, #4]
 801751a:	f7fd fda7 	bl	801506c <tcp_free>
    return 1;
 801751e:	2301      	movs	r3, #1
 8017520:	e000      	b.n	8017524 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8017522:	2300      	movs	r3, #0
}
 8017524:	4618      	mov	r0, r3
 8017526:	3708      	adds	r7, #8
 8017528:	46bd      	mov	sp, r7
 801752a:	bd80      	pop	{r7, pc}
 801752c:	08023ff8 	.word	0x08023ff8
 8017530:	080241c8 	.word	0x080241c8
 8017534:	08024044 	.word	0x08024044
 8017538:	2002d4b5 	.word	0x2002d4b5
 801753c:	2002d478 	.word	0x2002d478

08017540 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8017540:	b590      	push	{r4, r7, lr}
 8017542:	b08b      	sub	sp, #44	@ 0x2c
 8017544:	af04      	add	r7, sp, #16
 8017546:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8017548:	4b73      	ldr	r3, [pc, #460]	@ (8017718 <tcp_listen_input+0x1d8>)
 801754a:	781b      	ldrb	r3, [r3, #0]
 801754c:	f003 0304 	and.w	r3, r3, #4
 8017550:	2b00      	cmp	r3, #0
 8017552:	f040 80da 	bne.w	801770a <tcp_listen_input+0x1ca>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	2b00      	cmp	r3, #0
 801755a:	d106      	bne.n	801756a <tcp_listen_input+0x2a>
 801755c:	4b6f      	ldr	r3, [pc, #444]	@ (801771c <tcp_listen_input+0x1dc>)
 801755e:	f240 2281 	movw	r2, #641	@ 0x281
 8017562:	496f      	ldr	r1, [pc, #444]	@ (8017720 <tcp_listen_input+0x1e0>)
 8017564:	486f      	ldr	r0, [pc, #444]	@ (8017724 <tcp_listen_input+0x1e4>)
 8017566:	f009 f917 	bl	8020798 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801756a:	4b6b      	ldr	r3, [pc, #428]	@ (8017718 <tcp_listen_input+0x1d8>)
 801756c:	781b      	ldrb	r3, [r3, #0]
 801756e:	f003 0310 	and.w	r3, r3, #16
 8017572:	2b00      	cmp	r3, #0
 8017574:	d019      	beq.n	80175aa <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017576:	4b6c      	ldr	r3, [pc, #432]	@ (8017728 <tcp_listen_input+0x1e8>)
 8017578:	6819      	ldr	r1, [r3, #0]
 801757a:	4b6c      	ldr	r3, [pc, #432]	@ (801772c <tcp_listen_input+0x1ec>)
 801757c:	881b      	ldrh	r3, [r3, #0]
 801757e:	461a      	mov	r2, r3
 8017580:	4b6b      	ldr	r3, [pc, #428]	@ (8017730 <tcp_listen_input+0x1f0>)
 8017582:	681b      	ldr	r3, [r3, #0]
 8017584:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017586:	4b6b      	ldr	r3, [pc, #428]	@ (8017734 <tcp_listen_input+0x1f4>)
 8017588:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801758a:	885b      	ldrh	r3, [r3, #2]
 801758c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801758e:	4a69      	ldr	r2, [pc, #420]	@ (8017734 <tcp_listen_input+0x1f4>)
 8017590:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017592:	8812      	ldrh	r2, [r2, #0]
 8017594:	b292      	uxth	r2, r2
 8017596:	9202      	str	r2, [sp, #8]
 8017598:	9301      	str	r3, [sp, #4]
 801759a:	4b67      	ldr	r3, [pc, #412]	@ (8017738 <tcp_listen_input+0x1f8>)
 801759c:	9300      	str	r3, [sp, #0]
 801759e:	4b67      	ldr	r3, [pc, #412]	@ (801773c <tcp_listen_input+0x1fc>)
 80175a0:	4602      	mov	r2, r0
 80175a2:	6878      	ldr	r0, [r7, #4]
 80175a4:	f003 fc98 	bl	801aed8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80175a8:	e0b1      	b.n	801770e <tcp_listen_input+0x1ce>
  } else if (flags & TCP_SYN) {
 80175aa:	4b5b      	ldr	r3, [pc, #364]	@ (8017718 <tcp_listen_input+0x1d8>)
 80175ac:	781b      	ldrb	r3, [r3, #0]
 80175ae:	f003 0302 	and.w	r3, r3, #2
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	f000 80ab 	beq.w	801770e <tcp_listen_input+0x1ce>
    npcb = tcp_alloc(pcb->prio);
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	7d5b      	ldrb	r3, [r3, #21]
 80175bc:	4618      	mov	r0, r3
 80175be:	f7fe ffcd 	bl	801655c <tcp_alloc>
 80175c2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80175c4:	697b      	ldr	r3, [r7, #20]
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d119      	bne.n	80175fe <tcp_listen_input+0xbe>
      TCP_STATS_INC(tcp.memerr);
 80175ca:	4b5d      	ldr	r3, [pc, #372]	@ (8017740 <tcp_listen_input+0x200>)
 80175cc:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 80175d0:	3301      	adds	r3, #1
 80175d2:	b29a      	uxth	r2, r3
 80175d4:	4b5a      	ldr	r3, [pc, #360]	@ (8017740 <tcp_listen_input+0x200>)
 80175d6:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	699b      	ldr	r3, [r3, #24]
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d00a      	beq.n	80175f8 <tcp_listen_input+0xb8>
 80175e2:	687b      	ldr	r3, [r7, #4]
 80175e4:	699b      	ldr	r3, [r3, #24]
 80175e6:	687a      	ldr	r2, [r7, #4]
 80175e8:	6910      	ldr	r0, [r2, #16]
 80175ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80175ee:	2100      	movs	r1, #0
 80175f0:	4798      	blx	r3
 80175f2:	4603      	mov	r3, r0
 80175f4:	73bb      	strb	r3, [r7, #14]
      return;
 80175f6:	e08b      	b.n	8017710 <tcp_listen_input+0x1d0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80175f8:	23f0      	movs	r3, #240	@ 0xf0
 80175fa:	73bb      	strb	r3, [r7, #14]
      return;
 80175fc:	e088      	b.n	8017710 <tcp_listen_input+0x1d0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80175fe:	4b51      	ldr	r3, [pc, #324]	@ (8017744 <tcp_listen_input+0x204>)
 8017600:	695a      	ldr	r2, [r3, #20]
 8017602:	697b      	ldr	r3, [r7, #20]
 8017604:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8017606:	4b4f      	ldr	r3, [pc, #316]	@ (8017744 <tcp_listen_input+0x204>)
 8017608:	691a      	ldr	r2, [r3, #16]
 801760a:	697b      	ldr	r3, [r7, #20]
 801760c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	8ada      	ldrh	r2, [r3, #22]
 8017612:	697b      	ldr	r3, [r7, #20]
 8017614:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8017616:	4b47      	ldr	r3, [pc, #284]	@ (8017734 <tcp_listen_input+0x1f4>)
 8017618:	681b      	ldr	r3, [r3, #0]
 801761a:	881b      	ldrh	r3, [r3, #0]
 801761c:	b29a      	uxth	r2, r3
 801761e:	697b      	ldr	r3, [r7, #20]
 8017620:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8017622:	697b      	ldr	r3, [r7, #20]
 8017624:	2203      	movs	r2, #3
 8017626:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8017628:	4b41      	ldr	r3, [pc, #260]	@ (8017730 <tcp_listen_input+0x1f0>)
 801762a:	681b      	ldr	r3, [r3, #0]
 801762c:	1c5a      	adds	r2, r3, #1
 801762e:	697b      	ldr	r3, [r7, #20]
 8017630:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8017632:	697b      	ldr	r3, [r7, #20]
 8017634:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017636:	697b      	ldr	r3, [r7, #20]
 8017638:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 801763a:	6978      	ldr	r0, [r7, #20]
 801763c:	f7ff f9ee 	bl	8016a1c <tcp_next_iss>
 8017640:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8017642:	697b      	ldr	r3, [r7, #20]
 8017644:	693a      	ldr	r2, [r7, #16]
 8017646:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8017648:	697b      	ldr	r3, [r7, #20]
 801764a:	693a      	ldr	r2, [r7, #16]
 801764c:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 801764e:	697b      	ldr	r3, [r7, #20]
 8017650:	693a      	ldr	r2, [r7, #16]
 8017652:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8017654:	697b      	ldr	r3, [r7, #20]
 8017656:	693a      	ldr	r2, [r7, #16]
 8017658:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801765a:	4b35      	ldr	r3, [pc, #212]	@ (8017730 <tcp_listen_input+0x1f0>)
 801765c:	681b      	ldr	r3, [r3, #0]
 801765e:	1e5a      	subs	r2, r3, #1
 8017660:	697b      	ldr	r3, [r7, #20]
 8017662:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	691a      	ldr	r2, [r3, #16]
 8017668:	697b      	ldr	r3, [r7, #20]
 801766a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801766c:	697b      	ldr	r3, [r7, #20]
 801766e:	687a      	ldr	r2, [r7, #4]
 8017670:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	7a5b      	ldrb	r3, [r3, #9]
 8017676:	f003 030c 	and.w	r3, r3, #12
 801767a:	b2da      	uxtb	r2, r3
 801767c:	697b      	ldr	r3, [r7, #20]
 801767e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	7a1a      	ldrb	r2, [r3, #8]
 8017684:	697b      	ldr	r3, [r7, #20]
 8017686:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8017688:	4b2f      	ldr	r3, [pc, #188]	@ (8017748 <tcp_listen_input+0x208>)
 801768a:	681a      	ldr	r2, [r3, #0]
 801768c:	697b      	ldr	r3, [r7, #20]
 801768e:	60da      	str	r2, [r3, #12]
 8017690:	4a2d      	ldr	r2, [pc, #180]	@ (8017748 <tcp_listen_input+0x208>)
 8017692:	697b      	ldr	r3, [r7, #20]
 8017694:	6013      	str	r3, [r2, #0]
 8017696:	f003 fde1 	bl	801b25c <tcp_timer_needed>
 801769a:	4b2c      	ldr	r3, [pc, #176]	@ (801774c <tcp_listen_input+0x20c>)
 801769c:	2201      	movs	r2, #1
 801769e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80176a0:	6978      	ldr	r0, [r7, #20]
 80176a2:	f001 fd8d 	bl	80191c0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80176a6:	4b23      	ldr	r3, [pc, #140]	@ (8017734 <tcp_listen_input+0x1f4>)
 80176a8:	681b      	ldr	r3, [r3, #0]
 80176aa:	89db      	ldrh	r3, [r3, #14]
 80176ac:	b29a      	uxth	r2, r3
 80176ae:	697b      	ldr	r3, [r7, #20]
 80176b0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80176b4:	697b      	ldr	r3, [r7, #20]
 80176b6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80176ba:	697b      	ldr	r3, [r7, #20]
 80176bc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80176c0:	697b      	ldr	r3, [r7, #20]
 80176c2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80176c4:	697b      	ldr	r3, [r7, #20]
 80176c6:	3304      	adds	r3, #4
 80176c8:	4618      	mov	r0, r3
 80176ca:	f006 f861 	bl	801d790 <ip4_route>
 80176ce:	4601      	mov	r1, r0
 80176d0:	697b      	ldr	r3, [r7, #20]
 80176d2:	3304      	adds	r3, #4
 80176d4:	461a      	mov	r2, r3
 80176d6:	4620      	mov	r0, r4
 80176d8:	f7ff f9c6 	bl	8016a68 <tcp_eff_send_mss_netif>
 80176dc:	4603      	mov	r3, r0
 80176de:	461a      	mov	r2, r3
 80176e0:	697b      	ldr	r3, [r7, #20]
 80176e2:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80176e4:	2112      	movs	r1, #18
 80176e6:	6978      	ldr	r0, [r7, #20]
 80176e8:	f002 fd22 	bl	801a130 <tcp_enqueue_flags>
 80176ec:	4603      	mov	r3, r0
 80176ee:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80176f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	d004      	beq.n	8017702 <tcp_listen_input+0x1c2>
      tcp_abandon(npcb, 0);
 80176f8:	2100      	movs	r1, #0
 80176fa:	6978      	ldr	r0, [r7, #20]
 80176fc:	f7fd ff3c 	bl	8015578 <tcp_abandon>
      return;
 8017700:	e006      	b.n	8017710 <tcp_listen_input+0x1d0>
    tcp_output(npcb);
 8017702:	6978      	ldr	r0, [r7, #20]
 8017704:	f002 fe14 	bl	801a330 <tcp_output>
  return;
 8017708:	e001      	b.n	801770e <tcp_listen_input+0x1ce>
    return;
 801770a:	bf00      	nop
 801770c:	e000      	b.n	8017710 <tcp_listen_input+0x1d0>
  return;
 801770e:	bf00      	nop
}
 8017710:	371c      	adds	r7, #28
 8017712:	46bd      	mov	sp, r7
 8017714:	bd90      	pop	{r4, r7, pc}
 8017716:	bf00      	nop
 8017718:	2002d4b4 	.word	0x2002d4b4
 801771c:	08023ff8 	.word	0x08023ff8
 8017720:	080241f0 	.word	0x080241f0
 8017724:	08024044 	.word	0x08024044
 8017728:	2002d4ac 	.word	0x2002d4ac
 801772c:	2002d4b2 	.word	0x2002d4b2
 8017730:	2002d4a8 	.word	0x2002d4a8
 8017734:	2002d498 	.word	0x2002d498
 8017738:	2002710c 	.word	0x2002710c
 801773c:	20027110 	.word	0x20027110
 8017740:	2002d36c 	.word	0x2002d36c
 8017744:	200270fc 	.word	0x200270fc
 8017748:	2002d478 	.word	0x2002d478
 801774c:	2002d480 	.word	0x2002d480

08017750 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8017750:	b580      	push	{r7, lr}
 8017752:	b086      	sub	sp, #24
 8017754:	af04      	add	r7, sp, #16
 8017756:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8017758:	4b2f      	ldr	r3, [pc, #188]	@ (8017818 <tcp_timewait_input+0xc8>)
 801775a:	781b      	ldrb	r3, [r3, #0]
 801775c:	f003 0304 	and.w	r3, r3, #4
 8017760:	2b00      	cmp	r3, #0
 8017762:	d153      	bne.n	801780c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	2b00      	cmp	r3, #0
 8017768:	d106      	bne.n	8017778 <tcp_timewait_input+0x28>
 801776a:	4b2c      	ldr	r3, [pc, #176]	@ (801781c <tcp_timewait_input+0xcc>)
 801776c:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8017770:	492b      	ldr	r1, [pc, #172]	@ (8017820 <tcp_timewait_input+0xd0>)
 8017772:	482c      	ldr	r0, [pc, #176]	@ (8017824 <tcp_timewait_input+0xd4>)
 8017774:	f009 f810 	bl	8020798 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8017778:	4b27      	ldr	r3, [pc, #156]	@ (8017818 <tcp_timewait_input+0xc8>)
 801777a:	781b      	ldrb	r3, [r3, #0]
 801777c:	f003 0302 	and.w	r3, r3, #2
 8017780:	2b00      	cmp	r3, #0
 8017782:	d02a      	beq.n	80177da <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8017784:	4b28      	ldr	r3, [pc, #160]	@ (8017828 <tcp_timewait_input+0xd8>)
 8017786:	681a      	ldr	r2, [r3, #0]
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801778c:	1ad3      	subs	r3, r2, r3
 801778e:	2b00      	cmp	r3, #0
 8017790:	db2d      	blt.n	80177ee <tcp_timewait_input+0x9e>
 8017792:	4b25      	ldr	r3, [pc, #148]	@ (8017828 <tcp_timewait_input+0xd8>)
 8017794:	681a      	ldr	r2, [r3, #0]
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801779a:	6879      	ldr	r1, [r7, #4]
 801779c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801779e:	440b      	add	r3, r1
 80177a0:	1ad3      	subs	r3, r2, r3
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	dc23      	bgt.n	80177ee <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80177a6:	4b21      	ldr	r3, [pc, #132]	@ (801782c <tcp_timewait_input+0xdc>)
 80177a8:	6819      	ldr	r1, [r3, #0]
 80177aa:	4b21      	ldr	r3, [pc, #132]	@ (8017830 <tcp_timewait_input+0xe0>)
 80177ac:	881b      	ldrh	r3, [r3, #0]
 80177ae:	461a      	mov	r2, r3
 80177b0:	4b1d      	ldr	r3, [pc, #116]	@ (8017828 <tcp_timewait_input+0xd8>)
 80177b2:	681b      	ldr	r3, [r3, #0]
 80177b4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80177b6:	4b1f      	ldr	r3, [pc, #124]	@ (8017834 <tcp_timewait_input+0xe4>)
 80177b8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80177ba:	885b      	ldrh	r3, [r3, #2]
 80177bc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80177be:	4a1d      	ldr	r2, [pc, #116]	@ (8017834 <tcp_timewait_input+0xe4>)
 80177c0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80177c2:	8812      	ldrh	r2, [r2, #0]
 80177c4:	b292      	uxth	r2, r2
 80177c6:	9202      	str	r2, [sp, #8]
 80177c8:	9301      	str	r3, [sp, #4]
 80177ca:	4b1b      	ldr	r3, [pc, #108]	@ (8017838 <tcp_timewait_input+0xe8>)
 80177cc:	9300      	str	r3, [sp, #0]
 80177ce:	4b1b      	ldr	r3, [pc, #108]	@ (801783c <tcp_timewait_input+0xec>)
 80177d0:	4602      	mov	r2, r0
 80177d2:	6878      	ldr	r0, [r7, #4]
 80177d4:	f003 fb80 	bl	801aed8 <tcp_rst>
      return;
 80177d8:	e01b      	b.n	8017812 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80177da:	4b0f      	ldr	r3, [pc, #60]	@ (8017818 <tcp_timewait_input+0xc8>)
 80177dc:	781b      	ldrb	r3, [r3, #0]
 80177de:	f003 0301 	and.w	r3, r3, #1
 80177e2:	2b00      	cmp	r3, #0
 80177e4:	d003      	beq.n	80177ee <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80177e6:	4b16      	ldr	r3, [pc, #88]	@ (8017840 <tcp_timewait_input+0xf0>)
 80177e8:	681a      	ldr	r2, [r3, #0]
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80177ee:	4b10      	ldr	r3, [pc, #64]	@ (8017830 <tcp_timewait_input+0xe0>)
 80177f0:	881b      	ldrh	r3, [r3, #0]
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	d00c      	beq.n	8017810 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	8b5b      	ldrh	r3, [r3, #26]
 80177fa:	f043 0302 	orr.w	r3, r3, #2
 80177fe:	b29a      	uxth	r2, r3
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8017804:	6878      	ldr	r0, [r7, #4]
 8017806:	f002 fd93 	bl	801a330 <tcp_output>
  }
  return;
 801780a:	e001      	b.n	8017810 <tcp_timewait_input+0xc0>
    return;
 801780c:	bf00      	nop
 801780e:	e000      	b.n	8017812 <tcp_timewait_input+0xc2>
  return;
 8017810:	bf00      	nop
}
 8017812:	3708      	adds	r7, #8
 8017814:	46bd      	mov	sp, r7
 8017816:	bd80      	pop	{r7, pc}
 8017818:	2002d4b4 	.word	0x2002d4b4
 801781c:	08023ff8 	.word	0x08023ff8
 8017820:	08024210 	.word	0x08024210
 8017824:	08024044 	.word	0x08024044
 8017828:	2002d4a8 	.word	0x2002d4a8
 801782c:	2002d4ac 	.word	0x2002d4ac
 8017830:	2002d4b2 	.word	0x2002d4b2
 8017834:	2002d498 	.word	0x2002d498
 8017838:	2002710c 	.word	0x2002710c
 801783c:	20027110 	.word	0x20027110
 8017840:	2002d46c 	.word	0x2002d46c

08017844 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8017844:	b590      	push	{r4, r7, lr}
 8017846:	b08d      	sub	sp, #52	@ 0x34
 8017848:	af04      	add	r7, sp, #16
 801784a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801784c:	2300      	movs	r3, #0
 801784e:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 8017850:	2300      	movs	r3, #0
 8017852:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	2b00      	cmp	r3, #0
 8017858:	d106      	bne.n	8017868 <tcp_process+0x24>
 801785a:	4b9d      	ldr	r3, [pc, #628]	@ (8017ad0 <tcp_process+0x28c>)
 801785c:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8017860:	499c      	ldr	r1, [pc, #624]	@ (8017ad4 <tcp_process+0x290>)
 8017862:	489d      	ldr	r0, [pc, #628]	@ (8017ad8 <tcp_process+0x294>)
 8017864:	f008 ff98 	bl	8020798 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8017868:	4b9c      	ldr	r3, [pc, #624]	@ (8017adc <tcp_process+0x298>)
 801786a:	781b      	ldrb	r3, [r3, #0]
 801786c:	f003 0304 	and.w	r3, r3, #4
 8017870:	2b00      	cmp	r3, #0
 8017872:	d04e      	beq.n	8017912 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	7d1b      	ldrb	r3, [r3, #20]
 8017878:	2b02      	cmp	r3, #2
 801787a:	d108      	bne.n	801788e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017880:	4b97      	ldr	r3, [pc, #604]	@ (8017ae0 <tcp_process+0x29c>)
 8017882:	681b      	ldr	r3, [r3, #0]
 8017884:	429a      	cmp	r2, r3
 8017886:	d123      	bne.n	80178d0 <tcp_process+0x8c>
        acceptable = 1;
 8017888:	2301      	movs	r3, #1
 801788a:	77fb      	strb	r3, [r7, #31]
 801788c:	e020      	b.n	80178d0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017892:	4b94      	ldr	r3, [pc, #592]	@ (8017ae4 <tcp_process+0x2a0>)
 8017894:	681b      	ldr	r3, [r3, #0]
 8017896:	429a      	cmp	r2, r3
 8017898:	d102      	bne.n	80178a0 <tcp_process+0x5c>
        acceptable = 1;
 801789a:	2301      	movs	r3, #1
 801789c:	77fb      	strb	r3, [r7, #31]
 801789e:	e017      	b.n	80178d0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80178a0:	4b90      	ldr	r3, [pc, #576]	@ (8017ae4 <tcp_process+0x2a0>)
 80178a2:	681a      	ldr	r2, [r3, #0]
 80178a4:	687b      	ldr	r3, [r7, #4]
 80178a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80178a8:	1ad3      	subs	r3, r2, r3
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	db10      	blt.n	80178d0 <tcp_process+0x8c>
 80178ae:	4b8d      	ldr	r3, [pc, #564]	@ (8017ae4 <tcp_process+0x2a0>)
 80178b0:	681a      	ldr	r2, [r3, #0]
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80178b6:	6879      	ldr	r1, [r7, #4]
 80178b8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80178ba:	440b      	add	r3, r1
 80178bc:	1ad3      	subs	r3, r2, r3
 80178be:	2b00      	cmp	r3, #0
 80178c0:	dc06      	bgt.n	80178d0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80178c2:	687b      	ldr	r3, [r7, #4]
 80178c4:	8b5b      	ldrh	r3, [r3, #26]
 80178c6:	f043 0302 	orr.w	r3, r3, #2
 80178ca:	b29a      	uxth	r2, r3
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80178d0:	7ffb      	ldrb	r3, [r7, #31]
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d01b      	beq.n	801790e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	7d1b      	ldrb	r3, [r3, #20]
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d106      	bne.n	80178ec <tcp_process+0xa8>
 80178de:	4b7c      	ldr	r3, [pc, #496]	@ (8017ad0 <tcp_process+0x28c>)
 80178e0:	f44f 724e 	mov.w	r2, #824	@ 0x338
 80178e4:	4980      	ldr	r1, [pc, #512]	@ (8017ae8 <tcp_process+0x2a4>)
 80178e6:	487c      	ldr	r0, [pc, #496]	@ (8017ad8 <tcp_process+0x294>)
 80178e8:	f008 ff56 	bl	8020798 <iprintf>
      recv_flags |= TF_RESET;
 80178ec:	4b7f      	ldr	r3, [pc, #508]	@ (8017aec <tcp_process+0x2a8>)
 80178ee:	781b      	ldrb	r3, [r3, #0]
 80178f0:	f043 0308 	orr.w	r3, r3, #8
 80178f4:	b2da      	uxtb	r2, r3
 80178f6:	4b7d      	ldr	r3, [pc, #500]	@ (8017aec <tcp_process+0x2a8>)
 80178f8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	8b5b      	ldrh	r3, [r3, #26]
 80178fe:	f023 0301 	bic.w	r3, r3, #1
 8017902:	b29a      	uxth	r2, r3
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8017908:	f06f 030d 	mvn.w	r3, #13
 801790c:	e37a      	b.n	8018004 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801790e:	2300      	movs	r3, #0
 8017910:	e378      	b.n	8018004 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8017912:	4b72      	ldr	r3, [pc, #456]	@ (8017adc <tcp_process+0x298>)
 8017914:	781b      	ldrb	r3, [r3, #0]
 8017916:	f003 0302 	and.w	r3, r3, #2
 801791a:	2b00      	cmp	r3, #0
 801791c:	d010      	beq.n	8017940 <tcp_process+0xfc>
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	7d1b      	ldrb	r3, [r3, #20]
 8017922:	2b02      	cmp	r3, #2
 8017924:	d00c      	beq.n	8017940 <tcp_process+0xfc>
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	7d1b      	ldrb	r3, [r3, #20]
 801792a:	2b03      	cmp	r3, #3
 801792c:	d008      	beq.n	8017940 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	8b5b      	ldrh	r3, [r3, #26]
 8017932:	f043 0302 	orr.w	r3, r3, #2
 8017936:	b29a      	uxth	r2, r3
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801793c:	2300      	movs	r3, #0
 801793e:	e361      	b.n	8018004 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	8b5b      	ldrh	r3, [r3, #26]
 8017944:	f003 0310 	and.w	r3, r3, #16
 8017948:	2b00      	cmp	r3, #0
 801794a:	d103      	bne.n	8017954 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801794c:	4b68      	ldr	r3, [pc, #416]	@ (8017af0 <tcp_process+0x2ac>)
 801794e:	681a      	ldr	r2, [r3, #0]
 8017950:	687b      	ldr	r3, [r7, #4]
 8017952:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	2200      	movs	r2, #0
 8017958:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	2200      	movs	r2, #0
 8017960:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8017964:	6878      	ldr	r0, [r7, #4]
 8017966:	f001 fc2b 	bl	80191c0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801796a:	687b      	ldr	r3, [r7, #4]
 801796c:	7d1b      	ldrb	r3, [r3, #20]
 801796e:	3b02      	subs	r3, #2
 8017970:	2b07      	cmp	r3, #7
 8017972:	f200 8337 	bhi.w	8017fe4 <tcp_process+0x7a0>
 8017976:	a201      	add	r2, pc, #4	@ (adr r2, 801797c <tcp_process+0x138>)
 8017978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801797c:	0801799d 	.word	0x0801799d
 8017980:	08017bcd 	.word	0x08017bcd
 8017984:	08017d45 	.word	0x08017d45
 8017988:	08017d6f 	.word	0x08017d6f
 801798c:	08017e93 	.word	0x08017e93
 8017990:	08017d45 	.word	0x08017d45
 8017994:	08017f1f 	.word	0x08017f1f
 8017998:	08017faf 	.word	0x08017faf
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801799c:	4b4f      	ldr	r3, [pc, #316]	@ (8017adc <tcp_process+0x298>)
 801799e:	781b      	ldrb	r3, [r3, #0]
 80179a0:	f003 0310 	and.w	r3, r3, #16
 80179a4:	2b00      	cmp	r3, #0
 80179a6:	f000 80e4 	beq.w	8017b72 <tcp_process+0x32e>
 80179aa:	4b4c      	ldr	r3, [pc, #304]	@ (8017adc <tcp_process+0x298>)
 80179ac:	781b      	ldrb	r3, [r3, #0]
 80179ae:	f003 0302 	and.w	r3, r3, #2
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	f000 80dd 	beq.w	8017b72 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80179bc:	1c5a      	adds	r2, r3, #1
 80179be:	4b48      	ldr	r3, [pc, #288]	@ (8017ae0 <tcp_process+0x29c>)
 80179c0:	681b      	ldr	r3, [r3, #0]
 80179c2:	429a      	cmp	r2, r3
 80179c4:	f040 80d5 	bne.w	8017b72 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80179c8:	4b46      	ldr	r3, [pc, #280]	@ (8017ae4 <tcp_process+0x2a0>)
 80179ca:	681b      	ldr	r3, [r3, #0]
 80179cc:	1c5a      	adds	r2, r3, #1
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 80179da:	4b41      	ldr	r3, [pc, #260]	@ (8017ae0 <tcp_process+0x29c>)
 80179dc:	681a      	ldr	r2, [r3, #0]
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80179e2:	4b44      	ldr	r3, [pc, #272]	@ (8017af4 <tcp_process+0x2b0>)
 80179e4:	681b      	ldr	r3, [r3, #0]
 80179e6:	89db      	ldrh	r3, [r3, #14]
 80179e8:	b29a      	uxth	r2, r3
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80179fc:	4b39      	ldr	r3, [pc, #228]	@ (8017ae4 <tcp_process+0x2a0>)
 80179fe:	681b      	ldr	r3, [r3, #0]
 8017a00:	1e5a      	subs	r2, r3, #1
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8017a06:	687b      	ldr	r3, [r7, #4]
 8017a08:	2204      	movs	r2, #4
 8017a0a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	3304      	adds	r3, #4
 8017a14:	4618      	mov	r0, r3
 8017a16:	f005 febb 	bl	801d790 <ip4_route>
 8017a1a:	4601      	mov	r1, r0
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	3304      	adds	r3, #4
 8017a20:	461a      	mov	r2, r3
 8017a22:	4620      	mov	r0, r4
 8017a24:	f7ff f820 	bl	8016a68 <tcp_eff_send_mss_netif>
 8017a28:	4603      	mov	r3, r0
 8017a2a:	461a      	mov	r2, r3
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017a34:	009a      	lsls	r2, r3, #2
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017a3a:	005b      	lsls	r3, r3, #1
 8017a3c:	f241 111c 	movw	r1, #4380	@ 0x111c
 8017a40:	428b      	cmp	r3, r1
 8017a42:	bf38      	it	cc
 8017a44:	460b      	movcc	r3, r1
 8017a46:	429a      	cmp	r2, r3
 8017a48:	d204      	bcs.n	8017a54 <tcp_process+0x210>
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017a4e:	009b      	lsls	r3, r3, #2
 8017a50:	b29b      	uxth	r3, r3
 8017a52:	e00d      	b.n	8017a70 <tcp_process+0x22c>
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017a58:	005b      	lsls	r3, r3, #1
 8017a5a:	f241 121c 	movw	r2, #4380	@ 0x111c
 8017a5e:	4293      	cmp	r3, r2
 8017a60:	d904      	bls.n	8017a6c <tcp_process+0x228>
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017a66:	005b      	lsls	r3, r3, #1
 8017a68:	b29b      	uxth	r3, r3
 8017a6a:	e001      	b.n	8017a70 <tcp_process+0x22c>
 8017a6c:	f241 131c 	movw	r3, #4380	@ 0x111c
 8017a70:	687a      	ldr	r2, [r7, #4]
 8017a72:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d106      	bne.n	8017a8e <tcp_process+0x24a>
 8017a80:	4b13      	ldr	r3, [pc, #76]	@ (8017ad0 <tcp_process+0x28c>)
 8017a82:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8017a86:	491c      	ldr	r1, [pc, #112]	@ (8017af8 <tcp_process+0x2b4>)
 8017a88:	4813      	ldr	r0, [pc, #76]	@ (8017ad8 <tcp_process+0x294>)
 8017a8a:	f008 fe85 	bl	8020798 <iprintf>
        --pcb->snd_queuelen;
 8017a8e:	687b      	ldr	r3, [r7, #4]
 8017a90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017a94:	3b01      	subs	r3, #1
 8017a96:	b29a      	uxth	r2, r3
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017aa2:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 8017aa4:	697b      	ldr	r3, [r7, #20]
 8017aa6:	2b00      	cmp	r3, #0
 8017aa8:	d12a      	bne.n	8017b00 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017aae:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8017ab0:	697b      	ldr	r3, [r7, #20]
 8017ab2:	2b00      	cmp	r3, #0
 8017ab4:	d106      	bne.n	8017ac4 <tcp_process+0x280>
 8017ab6:	4b06      	ldr	r3, [pc, #24]	@ (8017ad0 <tcp_process+0x28c>)
 8017ab8:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8017abc:	490f      	ldr	r1, [pc, #60]	@ (8017afc <tcp_process+0x2b8>)
 8017abe:	4806      	ldr	r0, [pc, #24]	@ (8017ad8 <tcp_process+0x294>)
 8017ac0:	f008 fe6a 	bl	8020798 <iprintf>
          pcb->unsent = rseg->next;
 8017ac4:	697b      	ldr	r3, [r7, #20]
 8017ac6:	681a      	ldr	r2, [r3, #0]
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	66da      	str	r2, [r3, #108]	@ 0x6c
 8017acc:	e01c      	b.n	8017b08 <tcp_process+0x2c4>
 8017ace:	bf00      	nop
 8017ad0:	08023ff8 	.word	0x08023ff8
 8017ad4:	08024230 	.word	0x08024230
 8017ad8:	08024044 	.word	0x08024044
 8017adc:	2002d4b4 	.word	0x2002d4b4
 8017ae0:	2002d4ac 	.word	0x2002d4ac
 8017ae4:	2002d4a8 	.word	0x2002d4a8
 8017ae8:	0802424c 	.word	0x0802424c
 8017aec:	2002d4b5 	.word	0x2002d4b5
 8017af0:	2002d46c 	.word	0x2002d46c
 8017af4:	2002d498 	.word	0x2002d498
 8017af8:	0802426c 	.word	0x0802426c
 8017afc:	08024284 	.word	0x08024284
        } else {
          pcb->unacked = rseg->next;
 8017b00:	697b      	ldr	r3, [r7, #20]
 8017b02:	681a      	ldr	r2, [r3, #0]
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8017b08:	6978      	ldr	r0, [r7, #20]
 8017b0a:	f7fe fbbe 	bl	801628a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017b12:	2b00      	cmp	r3, #0
 8017b14:	d104      	bne.n	8017b20 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017b1c:	861a      	strh	r2, [r3, #48]	@ 0x30
 8017b1e:	e006      	b.n	8017b2e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	2200      	movs	r2, #0
 8017b24:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	2200      	movs	r2, #0
 8017b2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	d00a      	beq.n	8017b4e <tcp_process+0x30a>
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017b3e:	687a      	ldr	r2, [r7, #4]
 8017b40:	6910      	ldr	r0, [r2, #16]
 8017b42:	2200      	movs	r2, #0
 8017b44:	6879      	ldr	r1, [r7, #4]
 8017b46:	4798      	blx	r3
 8017b48:	4603      	mov	r3, r0
 8017b4a:	77bb      	strb	r3, [r7, #30]
 8017b4c:	e001      	b.n	8017b52 <tcp_process+0x30e>
 8017b4e:	2300      	movs	r3, #0
 8017b50:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 8017b52:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8017b56:	f113 0f0d 	cmn.w	r3, #13
 8017b5a:	d102      	bne.n	8017b62 <tcp_process+0x31e>
          return ERR_ABRT;
 8017b5c:	f06f 030c 	mvn.w	r3, #12
 8017b60:	e250      	b.n	8018004 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8017b62:	687b      	ldr	r3, [r7, #4]
 8017b64:	8b5b      	ldrh	r3, [r3, #26]
 8017b66:	f043 0302 	orr.w	r3, r3, #2
 8017b6a:	b29a      	uxth	r2, r3
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8017b70:	e23a      	b.n	8017fe8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8017b72:	4b98      	ldr	r3, [pc, #608]	@ (8017dd4 <tcp_process+0x590>)
 8017b74:	781b      	ldrb	r3, [r3, #0]
 8017b76:	f003 0310 	and.w	r3, r3, #16
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	f000 8234 	beq.w	8017fe8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017b80:	4b95      	ldr	r3, [pc, #596]	@ (8017dd8 <tcp_process+0x594>)
 8017b82:	6819      	ldr	r1, [r3, #0]
 8017b84:	4b95      	ldr	r3, [pc, #596]	@ (8017ddc <tcp_process+0x598>)
 8017b86:	881b      	ldrh	r3, [r3, #0]
 8017b88:	461a      	mov	r2, r3
 8017b8a:	4b95      	ldr	r3, [pc, #596]	@ (8017de0 <tcp_process+0x59c>)
 8017b8c:	681b      	ldr	r3, [r3, #0]
 8017b8e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017b90:	4b94      	ldr	r3, [pc, #592]	@ (8017de4 <tcp_process+0x5a0>)
 8017b92:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017b94:	885b      	ldrh	r3, [r3, #2]
 8017b96:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017b98:	4a92      	ldr	r2, [pc, #584]	@ (8017de4 <tcp_process+0x5a0>)
 8017b9a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017b9c:	8812      	ldrh	r2, [r2, #0]
 8017b9e:	b292      	uxth	r2, r2
 8017ba0:	9202      	str	r2, [sp, #8]
 8017ba2:	9301      	str	r3, [sp, #4]
 8017ba4:	4b90      	ldr	r3, [pc, #576]	@ (8017de8 <tcp_process+0x5a4>)
 8017ba6:	9300      	str	r3, [sp, #0]
 8017ba8:	4b90      	ldr	r3, [pc, #576]	@ (8017dec <tcp_process+0x5a8>)
 8017baa:	4602      	mov	r2, r0
 8017bac:	6878      	ldr	r0, [r7, #4]
 8017bae:	f003 f993 	bl	801aed8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8017bb2:	687b      	ldr	r3, [r7, #4]
 8017bb4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017bb8:	2b05      	cmp	r3, #5
 8017bba:	f200 8215 	bhi.w	8017fe8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	2200      	movs	r2, #0
 8017bc2:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8017bc4:	6878      	ldr	r0, [r7, #4]
 8017bc6:	f002 ff55 	bl	801aa74 <tcp_rexmit_rto>
      break;
 8017bca:	e20d      	b.n	8017fe8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8017bcc:	4b81      	ldr	r3, [pc, #516]	@ (8017dd4 <tcp_process+0x590>)
 8017bce:	781b      	ldrb	r3, [r3, #0]
 8017bd0:	f003 0310 	and.w	r3, r3, #16
 8017bd4:	2b00      	cmp	r3, #0
 8017bd6:	f000 80a1 	beq.w	8017d1c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017bda:	4b7f      	ldr	r3, [pc, #508]	@ (8017dd8 <tcp_process+0x594>)
 8017bdc:	681a      	ldr	r2, [r3, #0]
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017be2:	1ad3      	subs	r3, r2, r3
 8017be4:	3b01      	subs	r3, #1
 8017be6:	2b00      	cmp	r3, #0
 8017be8:	db7e      	blt.n	8017ce8 <tcp_process+0x4a4>
 8017bea:	4b7b      	ldr	r3, [pc, #492]	@ (8017dd8 <tcp_process+0x594>)
 8017bec:	681a      	ldr	r2, [r3, #0]
 8017bee:	687b      	ldr	r3, [r7, #4]
 8017bf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017bf2:	1ad3      	subs	r3, r2, r3
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	dc77      	bgt.n	8017ce8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8017bf8:	687b      	ldr	r3, [r7, #4]
 8017bfa:	2204      	movs	r2, #4
 8017bfc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	d102      	bne.n	8017c0c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8017c06:	23fa      	movs	r3, #250	@ 0xfa
 8017c08:	77bb      	strb	r3, [r7, #30]
 8017c0a:	e01d      	b.n	8017c48 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8017c0c:	687b      	ldr	r3, [r7, #4]
 8017c0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017c10:	699b      	ldr	r3, [r3, #24]
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	d106      	bne.n	8017c24 <tcp_process+0x3e0>
 8017c16:	4b76      	ldr	r3, [pc, #472]	@ (8017df0 <tcp_process+0x5ac>)
 8017c18:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8017c1c:	4975      	ldr	r1, [pc, #468]	@ (8017df4 <tcp_process+0x5b0>)
 8017c1e:	4876      	ldr	r0, [pc, #472]	@ (8017df8 <tcp_process+0x5b4>)
 8017c20:	f008 fdba 	bl	8020798 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017c28:	699b      	ldr	r3, [r3, #24]
 8017c2a:	2b00      	cmp	r3, #0
 8017c2c:	d00a      	beq.n	8017c44 <tcp_process+0x400>
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017c32:	699b      	ldr	r3, [r3, #24]
 8017c34:	687a      	ldr	r2, [r7, #4]
 8017c36:	6910      	ldr	r0, [r2, #16]
 8017c38:	2200      	movs	r2, #0
 8017c3a:	6879      	ldr	r1, [r7, #4]
 8017c3c:	4798      	blx	r3
 8017c3e:	4603      	mov	r3, r0
 8017c40:	77bb      	strb	r3, [r7, #30]
 8017c42:	e001      	b.n	8017c48 <tcp_process+0x404>
 8017c44:	23f0      	movs	r3, #240	@ 0xf0
 8017c46:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 8017c48:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	d00a      	beq.n	8017c66 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8017c50:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8017c54:	f113 0f0d 	cmn.w	r3, #13
 8017c58:	d002      	beq.n	8017c60 <tcp_process+0x41c>
              tcp_abort(pcb);
 8017c5a:	6878      	ldr	r0, [r7, #4]
 8017c5c:	f7fd fd4a 	bl	80156f4 <tcp_abort>
            }
            return ERR_ABRT;
 8017c60:	f06f 030c 	mvn.w	r3, #12
 8017c64:	e1ce      	b.n	8018004 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8017c66:	6878      	ldr	r0, [r7, #4]
 8017c68:	f000 fae0 	bl	801822c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8017c6c:	4b63      	ldr	r3, [pc, #396]	@ (8017dfc <tcp_process+0x5b8>)
 8017c6e:	881b      	ldrh	r3, [r3, #0]
 8017c70:	2b00      	cmp	r3, #0
 8017c72:	d005      	beq.n	8017c80 <tcp_process+0x43c>
            recv_acked--;
 8017c74:	4b61      	ldr	r3, [pc, #388]	@ (8017dfc <tcp_process+0x5b8>)
 8017c76:	881b      	ldrh	r3, [r3, #0]
 8017c78:	3b01      	subs	r3, #1
 8017c7a:	b29a      	uxth	r2, r3
 8017c7c:	4b5f      	ldr	r3, [pc, #380]	@ (8017dfc <tcp_process+0x5b8>)
 8017c7e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017c84:	009a      	lsls	r2, r3, #2
 8017c86:	687b      	ldr	r3, [r7, #4]
 8017c88:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017c8a:	005b      	lsls	r3, r3, #1
 8017c8c:	f241 111c 	movw	r1, #4380	@ 0x111c
 8017c90:	428b      	cmp	r3, r1
 8017c92:	bf38      	it	cc
 8017c94:	460b      	movcc	r3, r1
 8017c96:	429a      	cmp	r2, r3
 8017c98:	d204      	bcs.n	8017ca4 <tcp_process+0x460>
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017c9e:	009b      	lsls	r3, r3, #2
 8017ca0:	b29b      	uxth	r3, r3
 8017ca2:	e00d      	b.n	8017cc0 <tcp_process+0x47c>
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017ca8:	005b      	lsls	r3, r3, #1
 8017caa:	f241 121c 	movw	r2, #4380	@ 0x111c
 8017cae:	4293      	cmp	r3, r2
 8017cb0:	d904      	bls.n	8017cbc <tcp_process+0x478>
 8017cb2:	687b      	ldr	r3, [r7, #4]
 8017cb4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017cb6:	005b      	lsls	r3, r3, #1
 8017cb8:	b29b      	uxth	r3, r3
 8017cba:	e001      	b.n	8017cc0 <tcp_process+0x47c>
 8017cbc:	f241 131c 	movw	r3, #4380	@ 0x111c
 8017cc0:	687a      	ldr	r2, [r7, #4]
 8017cc2:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8017cc6:	4b4e      	ldr	r3, [pc, #312]	@ (8017e00 <tcp_process+0x5bc>)
 8017cc8:	781b      	ldrb	r3, [r3, #0]
 8017cca:	f003 0320 	and.w	r3, r3, #32
 8017cce:	2b00      	cmp	r3, #0
 8017cd0:	d037      	beq.n	8017d42 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8017cd2:	687b      	ldr	r3, [r7, #4]
 8017cd4:	8b5b      	ldrh	r3, [r3, #26]
 8017cd6:	f043 0302 	orr.w	r3, r3, #2
 8017cda:	b29a      	uxth	r2, r3
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	2207      	movs	r2, #7
 8017ce4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8017ce6:	e02c      	b.n	8017d42 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017ce8:	4b3b      	ldr	r3, [pc, #236]	@ (8017dd8 <tcp_process+0x594>)
 8017cea:	6819      	ldr	r1, [r3, #0]
 8017cec:	4b3b      	ldr	r3, [pc, #236]	@ (8017ddc <tcp_process+0x598>)
 8017cee:	881b      	ldrh	r3, [r3, #0]
 8017cf0:	461a      	mov	r2, r3
 8017cf2:	4b3b      	ldr	r3, [pc, #236]	@ (8017de0 <tcp_process+0x59c>)
 8017cf4:	681b      	ldr	r3, [r3, #0]
 8017cf6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017cf8:	4b3a      	ldr	r3, [pc, #232]	@ (8017de4 <tcp_process+0x5a0>)
 8017cfa:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017cfc:	885b      	ldrh	r3, [r3, #2]
 8017cfe:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017d00:	4a38      	ldr	r2, [pc, #224]	@ (8017de4 <tcp_process+0x5a0>)
 8017d02:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017d04:	8812      	ldrh	r2, [r2, #0]
 8017d06:	b292      	uxth	r2, r2
 8017d08:	9202      	str	r2, [sp, #8]
 8017d0a:	9301      	str	r3, [sp, #4]
 8017d0c:	4b36      	ldr	r3, [pc, #216]	@ (8017de8 <tcp_process+0x5a4>)
 8017d0e:	9300      	str	r3, [sp, #0]
 8017d10:	4b36      	ldr	r3, [pc, #216]	@ (8017dec <tcp_process+0x5a8>)
 8017d12:	4602      	mov	r2, r0
 8017d14:	6878      	ldr	r0, [r7, #4]
 8017d16:	f003 f8df 	bl	801aed8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8017d1a:	e167      	b.n	8017fec <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8017d1c:	4b2d      	ldr	r3, [pc, #180]	@ (8017dd4 <tcp_process+0x590>)
 8017d1e:	781b      	ldrb	r3, [r3, #0]
 8017d20:	f003 0302 	and.w	r3, r3, #2
 8017d24:	2b00      	cmp	r3, #0
 8017d26:	f000 8161 	beq.w	8017fec <tcp_process+0x7a8>
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017d2e:	1e5a      	subs	r2, r3, #1
 8017d30:	4b2b      	ldr	r3, [pc, #172]	@ (8017de0 <tcp_process+0x59c>)
 8017d32:	681b      	ldr	r3, [r3, #0]
 8017d34:	429a      	cmp	r2, r3
 8017d36:	f040 8159 	bne.w	8017fec <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8017d3a:	6878      	ldr	r0, [r7, #4]
 8017d3c:	f002 febc 	bl	801aab8 <tcp_rexmit>
      break;
 8017d40:	e154      	b.n	8017fec <tcp_process+0x7a8>
 8017d42:	e153      	b.n	8017fec <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8017d44:	6878      	ldr	r0, [r7, #4]
 8017d46:	f000 fa71 	bl	801822c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8017d4a:	4b2d      	ldr	r3, [pc, #180]	@ (8017e00 <tcp_process+0x5bc>)
 8017d4c:	781b      	ldrb	r3, [r3, #0]
 8017d4e:	f003 0320 	and.w	r3, r3, #32
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	f000 814c 	beq.w	8017ff0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	8b5b      	ldrh	r3, [r3, #26]
 8017d5c:	f043 0302 	orr.w	r3, r3, #2
 8017d60:	b29a      	uxth	r2, r3
 8017d62:	687b      	ldr	r3, [r7, #4]
 8017d64:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8017d66:	687b      	ldr	r3, [r7, #4]
 8017d68:	2207      	movs	r2, #7
 8017d6a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8017d6c:	e140      	b.n	8017ff0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8017d6e:	6878      	ldr	r0, [r7, #4]
 8017d70:	f000 fa5c 	bl	801822c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017d74:	4b22      	ldr	r3, [pc, #136]	@ (8017e00 <tcp_process+0x5bc>)
 8017d76:	781b      	ldrb	r3, [r3, #0]
 8017d78:	f003 0320 	and.w	r3, r3, #32
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	d071      	beq.n	8017e64 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017d80:	4b14      	ldr	r3, [pc, #80]	@ (8017dd4 <tcp_process+0x590>)
 8017d82:	781b      	ldrb	r3, [r3, #0]
 8017d84:	f003 0310 	and.w	r3, r3, #16
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d060      	beq.n	8017e4e <tcp_process+0x60a>
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017d90:	4b11      	ldr	r3, [pc, #68]	@ (8017dd8 <tcp_process+0x594>)
 8017d92:	681b      	ldr	r3, [r3, #0]
 8017d94:	429a      	cmp	r2, r3
 8017d96:	d15a      	bne.n	8017e4e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	d156      	bne.n	8017e4e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8017da0:	687b      	ldr	r3, [r7, #4]
 8017da2:	8b5b      	ldrh	r3, [r3, #26]
 8017da4:	f043 0302 	orr.w	r3, r3, #2
 8017da8:	b29a      	uxth	r2, r3
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8017dae:	6878      	ldr	r0, [r7, #4]
 8017db0:	f7fe fd50 	bl	8016854 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8017db4:	4b13      	ldr	r3, [pc, #76]	@ (8017e04 <tcp_process+0x5c0>)
 8017db6:	681b      	ldr	r3, [r3, #0]
 8017db8:	687a      	ldr	r2, [r7, #4]
 8017dba:	429a      	cmp	r2, r3
 8017dbc:	d105      	bne.n	8017dca <tcp_process+0x586>
 8017dbe:	4b11      	ldr	r3, [pc, #68]	@ (8017e04 <tcp_process+0x5c0>)
 8017dc0:	681b      	ldr	r3, [r3, #0]
 8017dc2:	68db      	ldr	r3, [r3, #12]
 8017dc4:	4a0f      	ldr	r2, [pc, #60]	@ (8017e04 <tcp_process+0x5c0>)
 8017dc6:	6013      	str	r3, [r2, #0]
 8017dc8:	e02e      	b.n	8017e28 <tcp_process+0x5e4>
 8017dca:	4b0e      	ldr	r3, [pc, #56]	@ (8017e04 <tcp_process+0x5c0>)
 8017dcc:	681b      	ldr	r3, [r3, #0]
 8017dce:	613b      	str	r3, [r7, #16]
 8017dd0:	e027      	b.n	8017e22 <tcp_process+0x5de>
 8017dd2:	bf00      	nop
 8017dd4:	2002d4b4 	.word	0x2002d4b4
 8017dd8:	2002d4ac 	.word	0x2002d4ac
 8017ddc:	2002d4b2 	.word	0x2002d4b2
 8017de0:	2002d4a8 	.word	0x2002d4a8
 8017de4:	2002d498 	.word	0x2002d498
 8017de8:	2002710c 	.word	0x2002710c
 8017dec:	20027110 	.word	0x20027110
 8017df0:	08023ff8 	.word	0x08023ff8
 8017df4:	08024298 	.word	0x08024298
 8017df8:	08024044 	.word	0x08024044
 8017dfc:	2002d4b0 	.word	0x2002d4b0
 8017e00:	2002d4b5 	.word	0x2002d4b5
 8017e04:	2002d478 	.word	0x2002d478
 8017e08:	693b      	ldr	r3, [r7, #16]
 8017e0a:	68db      	ldr	r3, [r3, #12]
 8017e0c:	687a      	ldr	r2, [r7, #4]
 8017e0e:	429a      	cmp	r2, r3
 8017e10:	d104      	bne.n	8017e1c <tcp_process+0x5d8>
 8017e12:	687b      	ldr	r3, [r7, #4]
 8017e14:	68da      	ldr	r2, [r3, #12]
 8017e16:	693b      	ldr	r3, [r7, #16]
 8017e18:	60da      	str	r2, [r3, #12]
 8017e1a:	e005      	b.n	8017e28 <tcp_process+0x5e4>
 8017e1c:	693b      	ldr	r3, [r7, #16]
 8017e1e:	68db      	ldr	r3, [r3, #12]
 8017e20:	613b      	str	r3, [r7, #16]
 8017e22:	693b      	ldr	r3, [r7, #16]
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	d1ef      	bne.n	8017e08 <tcp_process+0x5c4>
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	2200      	movs	r2, #0
 8017e2c:	60da      	str	r2, [r3, #12]
 8017e2e:	4b77      	ldr	r3, [pc, #476]	@ (801800c <tcp_process+0x7c8>)
 8017e30:	2201      	movs	r2, #1
 8017e32:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8017e34:	687b      	ldr	r3, [r7, #4]
 8017e36:	220a      	movs	r2, #10
 8017e38:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8017e3a:	4b75      	ldr	r3, [pc, #468]	@ (8018010 <tcp_process+0x7cc>)
 8017e3c:	681a      	ldr	r2, [r3, #0]
 8017e3e:	687b      	ldr	r3, [r7, #4]
 8017e40:	60da      	str	r2, [r3, #12]
 8017e42:	4a73      	ldr	r2, [pc, #460]	@ (8018010 <tcp_process+0x7cc>)
 8017e44:	687b      	ldr	r3, [r7, #4]
 8017e46:	6013      	str	r3, [r2, #0]
 8017e48:	f003 fa08 	bl	801b25c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8017e4c:	e0d2      	b.n	8017ff4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	8b5b      	ldrh	r3, [r3, #26]
 8017e52:	f043 0302 	orr.w	r3, r3, #2
 8017e56:	b29a      	uxth	r2, r3
 8017e58:	687b      	ldr	r3, [r7, #4]
 8017e5a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8017e5c:	687b      	ldr	r3, [r7, #4]
 8017e5e:	2208      	movs	r2, #8
 8017e60:	751a      	strb	r2, [r3, #20]
      break;
 8017e62:	e0c7      	b.n	8017ff4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017e64:	4b6b      	ldr	r3, [pc, #428]	@ (8018014 <tcp_process+0x7d0>)
 8017e66:	781b      	ldrb	r3, [r3, #0]
 8017e68:	f003 0310 	and.w	r3, r3, #16
 8017e6c:	2b00      	cmp	r3, #0
 8017e6e:	f000 80c1 	beq.w	8017ff4 <tcp_process+0x7b0>
 8017e72:	687b      	ldr	r3, [r7, #4]
 8017e74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017e76:	4b68      	ldr	r3, [pc, #416]	@ (8018018 <tcp_process+0x7d4>)
 8017e78:	681b      	ldr	r3, [r3, #0]
 8017e7a:	429a      	cmp	r2, r3
 8017e7c:	f040 80ba 	bne.w	8017ff4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	f040 80b5 	bne.w	8017ff4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	2206      	movs	r2, #6
 8017e8e:	751a      	strb	r2, [r3, #20]
      break;
 8017e90:	e0b0      	b.n	8017ff4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8017e92:	6878      	ldr	r0, [r7, #4]
 8017e94:	f000 f9ca 	bl	801822c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017e98:	4b60      	ldr	r3, [pc, #384]	@ (801801c <tcp_process+0x7d8>)
 8017e9a:	781b      	ldrb	r3, [r3, #0]
 8017e9c:	f003 0320 	and.w	r3, r3, #32
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	f000 80a9 	beq.w	8017ff8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	8b5b      	ldrh	r3, [r3, #26]
 8017eaa:	f043 0302 	orr.w	r3, r3, #2
 8017eae:	b29a      	uxth	r2, r3
 8017eb0:	687b      	ldr	r3, [r7, #4]
 8017eb2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8017eb4:	6878      	ldr	r0, [r7, #4]
 8017eb6:	f7fe fccd 	bl	8016854 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8017eba:	4b59      	ldr	r3, [pc, #356]	@ (8018020 <tcp_process+0x7dc>)
 8017ebc:	681b      	ldr	r3, [r3, #0]
 8017ebe:	687a      	ldr	r2, [r7, #4]
 8017ec0:	429a      	cmp	r2, r3
 8017ec2:	d105      	bne.n	8017ed0 <tcp_process+0x68c>
 8017ec4:	4b56      	ldr	r3, [pc, #344]	@ (8018020 <tcp_process+0x7dc>)
 8017ec6:	681b      	ldr	r3, [r3, #0]
 8017ec8:	68db      	ldr	r3, [r3, #12]
 8017eca:	4a55      	ldr	r2, [pc, #340]	@ (8018020 <tcp_process+0x7dc>)
 8017ecc:	6013      	str	r3, [r2, #0]
 8017ece:	e013      	b.n	8017ef8 <tcp_process+0x6b4>
 8017ed0:	4b53      	ldr	r3, [pc, #332]	@ (8018020 <tcp_process+0x7dc>)
 8017ed2:	681b      	ldr	r3, [r3, #0]
 8017ed4:	60fb      	str	r3, [r7, #12]
 8017ed6:	e00c      	b.n	8017ef2 <tcp_process+0x6ae>
 8017ed8:	68fb      	ldr	r3, [r7, #12]
 8017eda:	68db      	ldr	r3, [r3, #12]
 8017edc:	687a      	ldr	r2, [r7, #4]
 8017ede:	429a      	cmp	r2, r3
 8017ee0:	d104      	bne.n	8017eec <tcp_process+0x6a8>
 8017ee2:	687b      	ldr	r3, [r7, #4]
 8017ee4:	68da      	ldr	r2, [r3, #12]
 8017ee6:	68fb      	ldr	r3, [r7, #12]
 8017ee8:	60da      	str	r2, [r3, #12]
 8017eea:	e005      	b.n	8017ef8 <tcp_process+0x6b4>
 8017eec:	68fb      	ldr	r3, [r7, #12]
 8017eee:	68db      	ldr	r3, [r3, #12]
 8017ef0:	60fb      	str	r3, [r7, #12]
 8017ef2:	68fb      	ldr	r3, [r7, #12]
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d1ef      	bne.n	8017ed8 <tcp_process+0x694>
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	2200      	movs	r2, #0
 8017efc:	60da      	str	r2, [r3, #12]
 8017efe:	4b43      	ldr	r3, [pc, #268]	@ (801800c <tcp_process+0x7c8>)
 8017f00:	2201      	movs	r2, #1
 8017f02:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	220a      	movs	r2, #10
 8017f08:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8017f0a:	4b41      	ldr	r3, [pc, #260]	@ (8018010 <tcp_process+0x7cc>)
 8017f0c:	681a      	ldr	r2, [r3, #0]
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	60da      	str	r2, [r3, #12]
 8017f12:	4a3f      	ldr	r2, [pc, #252]	@ (8018010 <tcp_process+0x7cc>)
 8017f14:	687b      	ldr	r3, [r7, #4]
 8017f16:	6013      	str	r3, [r2, #0]
 8017f18:	f003 f9a0 	bl	801b25c <tcp_timer_needed>
      }
      break;
 8017f1c:	e06c      	b.n	8017ff8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8017f1e:	6878      	ldr	r0, [r7, #4]
 8017f20:	f000 f984 	bl	801822c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8017f24:	4b3b      	ldr	r3, [pc, #236]	@ (8018014 <tcp_process+0x7d0>)
 8017f26:	781b      	ldrb	r3, [r3, #0]
 8017f28:	f003 0310 	and.w	r3, r3, #16
 8017f2c:	2b00      	cmp	r3, #0
 8017f2e:	d065      	beq.n	8017ffc <tcp_process+0x7b8>
 8017f30:	687b      	ldr	r3, [r7, #4]
 8017f32:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017f34:	4b38      	ldr	r3, [pc, #224]	@ (8018018 <tcp_process+0x7d4>)
 8017f36:	681b      	ldr	r3, [r3, #0]
 8017f38:	429a      	cmp	r2, r3
 8017f3a:	d15f      	bne.n	8017ffc <tcp_process+0x7b8>
 8017f3c:	687b      	ldr	r3, [r7, #4]
 8017f3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017f40:	2b00      	cmp	r3, #0
 8017f42:	d15b      	bne.n	8017ffc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8017f44:	6878      	ldr	r0, [r7, #4]
 8017f46:	f7fe fc85 	bl	8016854 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8017f4a:	4b35      	ldr	r3, [pc, #212]	@ (8018020 <tcp_process+0x7dc>)
 8017f4c:	681b      	ldr	r3, [r3, #0]
 8017f4e:	687a      	ldr	r2, [r7, #4]
 8017f50:	429a      	cmp	r2, r3
 8017f52:	d105      	bne.n	8017f60 <tcp_process+0x71c>
 8017f54:	4b32      	ldr	r3, [pc, #200]	@ (8018020 <tcp_process+0x7dc>)
 8017f56:	681b      	ldr	r3, [r3, #0]
 8017f58:	68db      	ldr	r3, [r3, #12]
 8017f5a:	4a31      	ldr	r2, [pc, #196]	@ (8018020 <tcp_process+0x7dc>)
 8017f5c:	6013      	str	r3, [r2, #0]
 8017f5e:	e013      	b.n	8017f88 <tcp_process+0x744>
 8017f60:	4b2f      	ldr	r3, [pc, #188]	@ (8018020 <tcp_process+0x7dc>)
 8017f62:	681b      	ldr	r3, [r3, #0]
 8017f64:	61bb      	str	r3, [r7, #24]
 8017f66:	e00c      	b.n	8017f82 <tcp_process+0x73e>
 8017f68:	69bb      	ldr	r3, [r7, #24]
 8017f6a:	68db      	ldr	r3, [r3, #12]
 8017f6c:	687a      	ldr	r2, [r7, #4]
 8017f6e:	429a      	cmp	r2, r3
 8017f70:	d104      	bne.n	8017f7c <tcp_process+0x738>
 8017f72:	687b      	ldr	r3, [r7, #4]
 8017f74:	68da      	ldr	r2, [r3, #12]
 8017f76:	69bb      	ldr	r3, [r7, #24]
 8017f78:	60da      	str	r2, [r3, #12]
 8017f7a:	e005      	b.n	8017f88 <tcp_process+0x744>
 8017f7c:	69bb      	ldr	r3, [r7, #24]
 8017f7e:	68db      	ldr	r3, [r3, #12]
 8017f80:	61bb      	str	r3, [r7, #24]
 8017f82:	69bb      	ldr	r3, [r7, #24]
 8017f84:	2b00      	cmp	r3, #0
 8017f86:	d1ef      	bne.n	8017f68 <tcp_process+0x724>
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	2200      	movs	r2, #0
 8017f8c:	60da      	str	r2, [r3, #12]
 8017f8e:	4b1f      	ldr	r3, [pc, #124]	@ (801800c <tcp_process+0x7c8>)
 8017f90:	2201      	movs	r2, #1
 8017f92:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	220a      	movs	r2, #10
 8017f98:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8017f9a:	4b1d      	ldr	r3, [pc, #116]	@ (8018010 <tcp_process+0x7cc>)
 8017f9c:	681a      	ldr	r2, [r3, #0]
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	60da      	str	r2, [r3, #12]
 8017fa2:	4a1b      	ldr	r2, [pc, #108]	@ (8018010 <tcp_process+0x7cc>)
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	6013      	str	r3, [r2, #0]
 8017fa8:	f003 f958 	bl	801b25c <tcp_timer_needed>
      }
      break;
 8017fac:	e026      	b.n	8017ffc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8017fae:	6878      	ldr	r0, [r7, #4]
 8017fb0:	f000 f93c 	bl	801822c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8017fb4:	4b17      	ldr	r3, [pc, #92]	@ (8018014 <tcp_process+0x7d0>)
 8017fb6:	781b      	ldrb	r3, [r3, #0]
 8017fb8:	f003 0310 	and.w	r3, r3, #16
 8017fbc:	2b00      	cmp	r3, #0
 8017fbe:	d01f      	beq.n	8018000 <tcp_process+0x7bc>
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017fc4:	4b14      	ldr	r3, [pc, #80]	@ (8018018 <tcp_process+0x7d4>)
 8017fc6:	681b      	ldr	r3, [r3, #0]
 8017fc8:	429a      	cmp	r2, r3
 8017fca:	d119      	bne.n	8018000 <tcp_process+0x7bc>
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017fd0:	2b00      	cmp	r3, #0
 8017fd2:	d115      	bne.n	8018000 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8017fd4:	4b11      	ldr	r3, [pc, #68]	@ (801801c <tcp_process+0x7d8>)
 8017fd6:	781b      	ldrb	r3, [r3, #0]
 8017fd8:	f043 0310 	orr.w	r3, r3, #16
 8017fdc:	b2da      	uxtb	r2, r3
 8017fde:	4b0f      	ldr	r3, [pc, #60]	@ (801801c <tcp_process+0x7d8>)
 8017fe0:	701a      	strb	r2, [r3, #0]
      }
      break;
 8017fe2:	e00d      	b.n	8018000 <tcp_process+0x7bc>
    default:
      break;
 8017fe4:	bf00      	nop
 8017fe6:	e00c      	b.n	8018002 <tcp_process+0x7be>
      break;
 8017fe8:	bf00      	nop
 8017fea:	e00a      	b.n	8018002 <tcp_process+0x7be>
      break;
 8017fec:	bf00      	nop
 8017fee:	e008      	b.n	8018002 <tcp_process+0x7be>
      break;
 8017ff0:	bf00      	nop
 8017ff2:	e006      	b.n	8018002 <tcp_process+0x7be>
      break;
 8017ff4:	bf00      	nop
 8017ff6:	e004      	b.n	8018002 <tcp_process+0x7be>
      break;
 8017ff8:	bf00      	nop
 8017ffa:	e002      	b.n	8018002 <tcp_process+0x7be>
      break;
 8017ffc:	bf00      	nop
 8017ffe:	e000      	b.n	8018002 <tcp_process+0x7be>
      break;
 8018000:	bf00      	nop
  }
  return ERR_OK;
 8018002:	2300      	movs	r3, #0
}
 8018004:	4618      	mov	r0, r3
 8018006:	3724      	adds	r7, #36	@ 0x24
 8018008:	46bd      	mov	sp, r7
 801800a:	bd90      	pop	{r4, r7, pc}
 801800c:	2002d480 	.word	0x2002d480
 8018010:	2002d47c 	.word	0x2002d47c
 8018014:	2002d4b4 	.word	0x2002d4b4
 8018018:	2002d4ac 	.word	0x2002d4ac
 801801c:	2002d4b5 	.word	0x2002d4b5
 8018020:	2002d478 	.word	0x2002d478

08018024 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8018024:	b590      	push	{r4, r7, lr}
 8018026:	b085      	sub	sp, #20
 8018028:	af00      	add	r7, sp, #0
 801802a:	6078      	str	r0, [r7, #4]
 801802c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	2b00      	cmp	r3, #0
 8018032:	d106      	bne.n	8018042 <tcp_oos_insert_segment+0x1e>
 8018034:	4b3b      	ldr	r3, [pc, #236]	@ (8018124 <tcp_oos_insert_segment+0x100>)
 8018036:	f240 421f 	movw	r2, #1055	@ 0x41f
 801803a:	493b      	ldr	r1, [pc, #236]	@ (8018128 <tcp_oos_insert_segment+0x104>)
 801803c:	483b      	ldr	r0, [pc, #236]	@ (801812c <tcp_oos_insert_segment+0x108>)
 801803e:	f008 fbab 	bl	8020798 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	691b      	ldr	r3, [r3, #16]
 8018046:	899b      	ldrh	r3, [r3, #12]
 8018048:	b29b      	uxth	r3, r3
 801804a:	4618      	mov	r0, r3
 801804c:	f7fa fee8 	bl	8012e20 <lwip_htons>
 8018050:	4603      	mov	r3, r0
 8018052:	b2db      	uxtb	r3, r3
 8018054:	f003 0301 	and.w	r3, r3, #1
 8018058:	2b00      	cmp	r3, #0
 801805a:	d028      	beq.n	80180ae <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801805c:	6838      	ldr	r0, [r7, #0]
 801805e:	f7fe f8ff 	bl	8016260 <tcp_segs_free>
    next = NULL;
 8018062:	2300      	movs	r3, #0
 8018064:	603b      	str	r3, [r7, #0]
 8018066:	e056      	b.n	8018116 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8018068:	683b      	ldr	r3, [r7, #0]
 801806a:	691b      	ldr	r3, [r3, #16]
 801806c:	899b      	ldrh	r3, [r3, #12]
 801806e:	b29b      	uxth	r3, r3
 8018070:	4618      	mov	r0, r3
 8018072:	f7fa fed5 	bl	8012e20 <lwip_htons>
 8018076:	4603      	mov	r3, r0
 8018078:	b2db      	uxtb	r3, r3
 801807a:	f003 0301 	and.w	r3, r3, #1
 801807e:	2b00      	cmp	r3, #0
 8018080:	d00d      	beq.n	801809e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	691b      	ldr	r3, [r3, #16]
 8018086:	899b      	ldrh	r3, [r3, #12]
 8018088:	b29c      	uxth	r4, r3
 801808a:	2001      	movs	r0, #1
 801808c:	f7fa fec8 	bl	8012e20 <lwip_htons>
 8018090:	4603      	mov	r3, r0
 8018092:	461a      	mov	r2, r3
 8018094:	687b      	ldr	r3, [r7, #4]
 8018096:	691b      	ldr	r3, [r3, #16]
 8018098:	4322      	orrs	r2, r4
 801809a:	b292      	uxth	r2, r2
 801809c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801809e:	683b      	ldr	r3, [r7, #0]
 80180a0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80180a2:	683b      	ldr	r3, [r7, #0]
 80180a4:	681b      	ldr	r3, [r3, #0]
 80180a6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80180a8:	68f8      	ldr	r0, [r7, #12]
 80180aa:	f7fe f8ee 	bl	801628a <tcp_seg_free>
    while (next &&
 80180ae:	683b      	ldr	r3, [r7, #0]
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	d00e      	beq.n	80180d2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	891b      	ldrh	r3, [r3, #8]
 80180b8:	461a      	mov	r2, r3
 80180ba:	4b1d      	ldr	r3, [pc, #116]	@ (8018130 <tcp_oos_insert_segment+0x10c>)
 80180bc:	681b      	ldr	r3, [r3, #0]
 80180be:	441a      	add	r2, r3
 80180c0:	683b      	ldr	r3, [r7, #0]
 80180c2:	691b      	ldr	r3, [r3, #16]
 80180c4:	685b      	ldr	r3, [r3, #4]
 80180c6:	6839      	ldr	r1, [r7, #0]
 80180c8:	8909      	ldrh	r1, [r1, #8]
 80180ca:	440b      	add	r3, r1
 80180cc:	1ad3      	subs	r3, r2, r3
    while (next &&
 80180ce:	2b00      	cmp	r3, #0
 80180d0:	daca      	bge.n	8018068 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80180d2:	683b      	ldr	r3, [r7, #0]
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	d01e      	beq.n	8018116 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	891b      	ldrh	r3, [r3, #8]
 80180dc:	461a      	mov	r2, r3
 80180de:	4b14      	ldr	r3, [pc, #80]	@ (8018130 <tcp_oos_insert_segment+0x10c>)
 80180e0:	681b      	ldr	r3, [r3, #0]
 80180e2:	441a      	add	r2, r3
 80180e4:	683b      	ldr	r3, [r7, #0]
 80180e6:	691b      	ldr	r3, [r3, #16]
 80180e8:	685b      	ldr	r3, [r3, #4]
 80180ea:	1ad3      	subs	r3, r2, r3
    if (next &&
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	dd12      	ble.n	8018116 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80180f0:	683b      	ldr	r3, [r7, #0]
 80180f2:	691b      	ldr	r3, [r3, #16]
 80180f4:	685b      	ldr	r3, [r3, #4]
 80180f6:	b29a      	uxth	r2, r3
 80180f8:	4b0d      	ldr	r3, [pc, #52]	@ (8018130 <tcp_oos_insert_segment+0x10c>)
 80180fa:	681b      	ldr	r3, [r3, #0]
 80180fc:	b29b      	uxth	r3, r3
 80180fe:	1ad3      	subs	r3, r2, r3
 8018100:	b29a      	uxth	r2, r3
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	685a      	ldr	r2, [r3, #4]
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	891b      	ldrh	r3, [r3, #8]
 801810e:	4619      	mov	r1, r3
 8018110:	4610      	mov	r0, r2
 8018112:	f7fc fb13 	bl	801473c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	683a      	ldr	r2, [r7, #0]
 801811a:	601a      	str	r2, [r3, #0]
}
 801811c:	bf00      	nop
 801811e:	3714      	adds	r7, #20
 8018120:	46bd      	mov	sp, r7
 8018122:	bd90      	pop	{r4, r7, pc}
 8018124:	08023ff8 	.word	0x08023ff8
 8018128:	080242b8 	.word	0x080242b8
 801812c:	08024044 	.word	0x08024044
 8018130:	2002d4a8 	.word	0x2002d4a8

08018134 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8018134:	b5b0      	push	{r4, r5, r7, lr}
 8018136:	b086      	sub	sp, #24
 8018138:	af00      	add	r7, sp, #0
 801813a:	60f8      	str	r0, [r7, #12]
 801813c:	60b9      	str	r1, [r7, #8]
 801813e:	607a      	str	r2, [r7, #4]
 8018140:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8018142:	e03e      	b.n	80181c2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8018144:	68bb      	ldr	r3, [r7, #8]
 8018146:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8018148:	68bb      	ldr	r3, [r7, #8]
 801814a:	681b      	ldr	r3, [r3, #0]
 801814c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801814e:	697b      	ldr	r3, [r7, #20]
 8018150:	685b      	ldr	r3, [r3, #4]
 8018152:	4618      	mov	r0, r3
 8018154:	f7fc fd38 	bl	8014bc8 <pbuf_clen>
 8018158:	4603      	mov	r3, r0
 801815a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801815c:	68fb      	ldr	r3, [r7, #12]
 801815e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018162:	8a7a      	ldrh	r2, [r7, #18]
 8018164:	429a      	cmp	r2, r3
 8018166:	d906      	bls.n	8018176 <tcp_free_acked_segments+0x42>
 8018168:	4b2a      	ldr	r3, [pc, #168]	@ (8018214 <tcp_free_acked_segments+0xe0>)
 801816a:	f240 4257 	movw	r2, #1111	@ 0x457
 801816e:	492a      	ldr	r1, [pc, #168]	@ (8018218 <tcp_free_acked_segments+0xe4>)
 8018170:	482a      	ldr	r0, [pc, #168]	@ (801821c <tcp_free_acked_segments+0xe8>)
 8018172:	f008 fb11 	bl	8020798 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8018176:	68fb      	ldr	r3, [r7, #12]
 8018178:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 801817c:	8a7b      	ldrh	r3, [r7, #18]
 801817e:	1ad3      	subs	r3, r2, r3
 8018180:	b29a      	uxth	r2, r3
 8018182:	68fb      	ldr	r3, [r7, #12]
 8018184:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8018188:	697b      	ldr	r3, [r7, #20]
 801818a:	891a      	ldrh	r2, [r3, #8]
 801818c:	4b24      	ldr	r3, [pc, #144]	@ (8018220 <tcp_free_acked_segments+0xec>)
 801818e:	881b      	ldrh	r3, [r3, #0]
 8018190:	4413      	add	r3, r2
 8018192:	b29a      	uxth	r2, r3
 8018194:	4b22      	ldr	r3, [pc, #136]	@ (8018220 <tcp_free_acked_segments+0xec>)
 8018196:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8018198:	6978      	ldr	r0, [r7, #20]
 801819a:	f7fe f876 	bl	801628a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801819e:	68fb      	ldr	r3, [r7, #12]
 80181a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80181a4:	2b00      	cmp	r3, #0
 80181a6:	d00c      	beq.n	80181c2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80181a8:	68bb      	ldr	r3, [r7, #8]
 80181aa:	2b00      	cmp	r3, #0
 80181ac:	d109      	bne.n	80181c2 <tcp_free_acked_segments+0x8e>
 80181ae:	683b      	ldr	r3, [r7, #0]
 80181b0:	2b00      	cmp	r3, #0
 80181b2:	d106      	bne.n	80181c2 <tcp_free_acked_segments+0x8e>
 80181b4:	4b17      	ldr	r3, [pc, #92]	@ (8018214 <tcp_free_acked_segments+0xe0>)
 80181b6:	f240 4261 	movw	r2, #1121	@ 0x461
 80181ba:	491a      	ldr	r1, [pc, #104]	@ (8018224 <tcp_free_acked_segments+0xf0>)
 80181bc:	4817      	ldr	r0, [pc, #92]	@ (801821c <tcp_free_acked_segments+0xe8>)
 80181be:	f008 faeb 	bl	8020798 <iprintf>
  while (seg_list != NULL &&
 80181c2:	68bb      	ldr	r3, [r7, #8]
 80181c4:	2b00      	cmp	r3, #0
 80181c6:	d020      	beq.n	801820a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80181c8:	68bb      	ldr	r3, [r7, #8]
 80181ca:	691b      	ldr	r3, [r3, #16]
 80181cc:	685b      	ldr	r3, [r3, #4]
 80181ce:	4618      	mov	r0, r3
 80181d0:	f7fa fe3c 	bl	8012e4c <lwip_htonl>
 80181d4:	4604      	mov	r4, r0
 80181d6:	68bb      	ldr	r3, [r7, #8]
 80181d8:	891b      	ldrh	r3, [r3, #8]
 80181da:	461d      	mov	r5, r3
 80181dc:	68bb      	ldr	r3, [r7, #8]
 80181de:	691b      	ldr	r3, [r3, #16]
 80181e0:	899b      	ldrh	r3, [r3, #12]
 80181e2:	b29b      	uxth	r3, r3
 80181e4:	4618      	mov	r0, r3
 80181e6:	f7fa fe1b 	bl	8012e20 <lwip_htons>
 80181ea:	4603      	mov	r3, r0
 80181ec:	b2db      	uxtb	r3, r3
 80181ee:	f003 0303 	and.w	r3, r3, #3
 80181f2:	2b00      	cmp	r3, #0
 80181f4:	d001      	beq.n	80181fa <tcp_free_acked_segments+0xc6>
 80181f6:	2301      	movs	r3, #1
 80181f8:	e000      	b.n	80181fc <tcp_free_acked_segments+0xc8>
 80181fa:	2300      	movs	r3, #0
 80181fc:	442b      	add	r3, r5
 80181fe:	18e2      	adds	r2, r4, r3
 8018200:	4b09      	ldr	r3, [pc, #36]	@ (8018228 <tcp_free_acked_segments+0xf4>)
 8018202:	681b      	ldr	r3, [r3, #0]
 8018204:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8018206:	2b00      	cmp	r3, #0
 8018208:	dd9c      	ble.n	8018144 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801820a:	68bb      	ldr	r3, [r7, #8]
}
 801820c:	4618      	mov	r0, r3
 801820e:	3718      	adds	r7, #24
 8018210:	46bd      	mov	sp, r7
 8018212:	bdb0      	pop	{r4, r5, r7, pc}
 8018214:	08023ff8 	.word	0x08023ff8
 8018218:	080242e0 	.word	0x080242e0
 801821c:	08024044 	.word	0x08024044
 8018220:	2002d4b0 	.word	0x2002d4b0
 8018224:	08024308 	.word	0x08024308
 8018228:	2002d4ac 	.word	0x2002d4ac

0801822c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801822c:	b5b0      	push	{r4, r5, r7, lr}
 801822e:	b094      	sub	sp, #80	@ 0x50
 8018230:	af00      	add	r7, sp, #0
 8018232:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8018234:	2300      	movs	r3, #0
 8018236:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	2b00      	cmp	r3, #0
 801823c:	d106      	bne.n	801824c <tcp_receive+0x20>
 801823e:	4b91      	ldr	r3, [pc, #580]	@ (8018484 <tcp_receive+0x258>)
 8018240:	f240 427b 	movw	r2, #1147	@ 0x47b
 8018244:	4990      	ldr	r1, [pc, #576]	@ (8018488 <tcp_receive+0x25c>)
 8018246:	4891      	ldr	r0, [pc, #580]	@ (801848c <tcp_receive+0x260>)
 8018248:	f008 faa6 	bl	8020798 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	7d1b      	ldrb	r3, [r3, #20]
 8018250:	2b03      	cmp	r3, #3
 8018252:	d806      	bhi.n	8018262 <tcp_receive+0x36>
 8018254:	4b8b      	ldr	r3, [pc, #556]	@ (8018484 <tcp_receive+0x258>)
 8018256:	f240 427c 	movw	r2, #1148	@ 0x47c
 801825a:	498d      	ldr	r1, [pc, #564]	@ (8018490 <tcp_receive+0x264>)
 801825c:	488b      	ldr	r0, [pc, #556]	@ (801848c <tcp_receive+0x260>)
 801825e:	f008 fa9b 	bl	8020798 <iprintf>

  if (flags & TCP_ACK) {
 8018262:	4b8c      	ldr	r3, [pc, #560]	@ (8018494 <tcp_receive+0x268>)
 8018264:	781b      	ldrb	r3, [r3, #0]
 8018266:	f003 0310 	and.w	r3, r3, #16
 801826a:	2b00      	cmp	r3, #0
 801826c:	f000 8264 	beq.w	8018738 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8018276:	461a      	mov	r2, r3
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801827c:	4413      	add	r3, r2
 801827e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8018284:	4b84      	ldr	r3, [pc, #528]	@ (8018498 <tcp_receive+0x26c>)
 8018286:	681b      	ldr	r3, [r3, #0]
 8018288:	1ad3      	subs	r3, r2, r3
 801828a:	2b00      	cmp	r3, #0
 801828c:	db1b      	blt.n	80182c6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8018292:	4b81      	ldr	r3, [pc, #516]	@ (8018498 <tcp_receive+0x26c>)
 8018294:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8018296:	429a      	cmp	r2, r3
 8018298:	d106      	bne.n	80182a8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801829a:	687b      	ldr	r3, [r7, #4]
 801829c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801829e:	4b7f      	ldr	r3, [pc, #508]	@ (801849c <tcp_receive+0x270>)
 80182a0:	681b      	ldr	r3, [r3, #0]
 80182a2:	1ad3      	subs	r3, r2, r3
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	db0e      	blt.n	80182c6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80182a8:	687b      	ldr	r3, [r7, #4]
 80182aa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80182ac:	4b7b      	ldr	r3, [pc, #492]	@ (801849c <tcp_receive+0x270>)
 80182ae:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80182b0:	429a      	cmp	r2, r3
 80182b2:	d125      	bne.n	8018300 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80182b4:	4b7a      	ldr	r3, [pc, #488]	@ (80184a0 <tcp_receive+0x274>)
 80182b6:	681b      	ldr	r3, [r3, #0]
 80182b8:	89db      	ldrh	r3, [r3, #14]
 80182ba:	b29a      	uxth	r2, r3
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80182c2:	429a      	cmp	r2, r3
 80182c4:	d91c      	bls.n	8018300 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80182c6:	4b76      	ldr	r3, [pc, #472]	@ (80184a0 <tcp_receive+0x274>)
 80182c8:	681b      	ldr	r3, [r3, #0]
 80182ca:	89db      	ldrh	r3, [r3, #14]
 80182cc:	b29a      	uxth	r2, r3
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80182e0:	429a      	cmp	r2, r3
 80182e2:	d205      	bcs.n	80182f0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 80182f0:	4b69      	ldr	r3, [pc, #420]	@ (8018498 <tcp_receive+0x26c>)
 80182f2:	681a      	ldr	r2, [r3, #0]
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 80182f8:	4b68      	ldr	r3, [pc, #416]	@ (801849c <tcp_receive+0x270>)
 80182fa:	681a      	ldr	r2, [r3, #0]
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8018300:	4b66      	ldr	r3, [pc, #408]	@ (801849c <tcp_receive+0x270>)
 8018302:	681a      	ldr	r2, [r3, #0]
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018308:	1ad3      	subs	r3, r2, r3
 801830a:	2b00      	cmp	r3, #0
 801830c:	dc58      	bgt.n	80183c0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801830e:	4b65      	ldr	r3, [pc, #404]	@ (80184a4 <tcp_receive+0x278>)
 8018310:	881b      	ldrh	r3, [r3, #0]
 8018312:	2b00      	cmp	r3, #0
 8018314:	d14b      	bne.n	80183ae <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801831a:	687a      	ldr	r2, [r7, #4]
 801831c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8018320:	4413      	add	r3, r2
 8018322:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018324:	429a      	cmp	r2, r3
 8018326:	d142      	bne.n	80183ae <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801832e:	2b00      	cmp	r3, #0
 8018330:	db3d      	blt.n	80183ae <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018336:	4b59      	ldr	r3, [pc, #356]	@ (801849c <tcp_receive+0x270>)
 8018338:	681b      	ldr	r3, [r3, #0]
 801833a:	429a      	cmp	r2, r3
 801833c:	d137      	bne.n	80183ae <tcp_receive+0x182>
              found_dupack = 1;
 801833e:	2301      	movs	r3, #1
 8018340:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8018348:	2bff      	cmp	r3, #255	@ 0xff
 801834a:	d007      	beq.n	801835c <tcp_receive+0x130>
                ++pcb->dupacks;
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8018352:	3301      	adds	r3, #1
 8018354:	b2da      	uxtb	r2, r3
 8018356:	687b      	ldr	r3, [r7, #4]
 8018358:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8018362:	2b03      	cmp	r3, #3
 8018364:	d91b      	bls.n	801839e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8018366:	687b      	ldr	r3, [r7, #4]
 8018368:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018370:	4413      	add	r3, r2
 8018372:	b29a      	uxth	r2, r3
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801837a:	429a      	cmp	r2, r3
 801837c:	d30a      	bcc.n	8018394 <tcp_receive+0x168>
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018384:	687b      	ldr	r3, [r7, #4]
 8018386:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018388:	4413      	add	r3, r2
 801838a:	b29a      	uxth	r2, r3
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8018392:	e004      	b.n	801839e <tcp_receive+0x172>
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801839a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80183a4:	2b02      	cmp	r3, #2
 80183a6:	d902      	bls.n	80183ae <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80183a8:	6878      	ldr	r0, [r7, #4]
 80183aa:	f002 fbf1 	bl	801ab90 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80183ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80183b0:	2b00      	cmp	r3, #0
 80183b2:	f040 8161 	bne.w	8018678 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	2200      	movs	r2, #0
 80183ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80183be:	e15b      	b.n	8018678 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80183c0:	4b36      	ldr	r3, [pc, #216]	@ (801849c <tcp_receive+0x270>)
 80183c2:	681a      	ldr	r2, [r3, #0]
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80183c8:	1ad3      	subs	r3, r2, r3
 80183ca:	3b01      	subs	r3, #1
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	f2c0 814e 	blt.w	801866e <tcp_receive+0x442>
 80183d2:	4b32      	ldr	r3, [pc, #200]	@ (801849c <tcp_receive+0x270>)
 80183d4:	681a      	ldr	r2, [r3, #0]
 80183d6:	687b      	ldr	r3, [r7, #4]
 80183d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80183da:	1ad3      	subs	r3, r2, r3
 80183dc:	2b00      	cmp	r3, #0
 80183de:	f300 8146 	bgt.w	801866e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	8b5b      	ldrh	r3, [r3, #26]
 80183e6:	f003 0304 	and.w	r3, r3, #4
 80183ea:	2b00      	cmp	r3, #0
 80183ec:	d010      	beq.n	8018410 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	8b5b      	ldrh	r3, [r3, #26]
 80183f2:	f023 0304 	bic.w	r3, r3, #4
 80183f6:	b29a      	uxth	r2, r3
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8018402:	687b      	ldr	r3, [r7, #4]
 8018404:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	2200      	movs	r2, #0
 801840c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	2200      	movs	r2, #0
 8018414:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801841e:	10db      	asrs	r3, r3, #3
 8018420:	b21b      	sxth	r3, r3
 8018422:	b29a      	uxth	r2, r3
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801842a:	b29b      	uxth	r3, r3
 801842c:	4413      	add	r3, r2
 801842e:	b29b      	uxth	r3, r3
 8018430:	b21a      	sxth	r2, r3
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8018438:	4b18      	ldr	r3, [pc, #96]	@ (801849c <tcp_receive+0x270>)
 801843a:	681b      	ldr	r3, [r3, #0]
 801843c:	b29a      	uxth	r2, r3
 801843e:	687b      	ldr	r3, [r7, #4]
 8018440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018442:	b29b      	uxth	r3, r3
 8018444:	1ad3      	subs	r3, r2, r3
 8018446:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	2200      	movs	r2, #0
 801844c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8018450:	4b12      	ldr	r3, [pc, #72]	@ (801849c <tcp_receive+0x270>)
 8018452:	681a      	ldr	r2, [r3, #0]
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	7d1b      	ldrb	r3, [r3, #20]
 801845c:	2b03      	cmp	r3, #3
 801845e:	f240 8097 	bls.w	8018590 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018468:	687b      	ldr	r3, [r7, #4]
 801846a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801846e:	429a      	cmp	r2, r3
 8018470:	d245      	bcs.n	80184fe <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	8b5b      	ldrh	r3, [r3, #26]
 8018476:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801847a:	2b00      	cmp	r3, #0
 801847c:	d014      	beq.n	80184a8 <tcp_receive+0x27c>
 801847e:	2301      	movs	r3, #1
 8018480:	e013      	b.n	80184aa <tcp_receive+0x27e>
 8018482:	bf00      	nop
 8018484:	08023ff8 	.word	0x08023ff8
 8018488:	08024328 	.word	0x08024328
 801848c:	08024044 	.word	0x08024044
 8018490:	08024344 	.word	0x08024344
 8018494:	2002d4b4 	.word	0x2002d4b4
 8018498:	2002d4a8 	.word	0x2002d4a8
 801849c:	2002d4ac 	.word	0x2002d4ac
 80184a0:	2002d498 	.word	0x2002d498
 80184a4:	2002d4b2 	.word	0x2002d4b2
 80184a8:	2302      	movs	r3, #2
 80184aa:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80184ae:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80184b2:	b29a      	uxth	r2, r3
 80184b4:	687b      	ldr	r3, [r7, #4]
 80184b6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80184b8:	fb12 f303 	smulbb	r3, r2, r3
 80184bc:	b29b      	uxth	r3, r3
 80184be:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80184c0:	4293      	cmp	r3, r2
 80184c2:	bf28      	it	cs
 80184c4:	4613      	movcs	r3, r2
 80184c6:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80184ce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80184d0:	4413      	add	r3, r2
 80184d2:	b29a      	uxth	r2, r3
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80184da:	429a      	cmp	r2, r3
 80184dc:	d309      	bcc.n	80184f2 <tcp_receive+0x2c6>
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80184e4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80184e6:	4413      	add	r3, r2
 80184e8:	b29a      	uxth	r2, r3
 80184ea:	687b      	ldr	r3, [r7, #4]
 80184ec:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80184f0:	e04e      	b.n	8018590 <tcp_receive+0x364>
 80184f2:	687b      	ldr	r3, [r7, #4]
 80184f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80184f8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80184fc:	e048      	b.n	8018590 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8018504:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8018506:	4413      	add	r3, r2
 8018508:	b29a      	uxth	r2, r3
 801850a:	687b      	ldr	r3, [r7, #4]
 801850c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8018510:	429a      	cmp	r2, r3
 8018512:	d309      	bcc.n	8018528 <tcp_receive+0x2fc>
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801851a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801851c:	4413      	add	r3, r2
 801851e:	b29a      	uxth	r2, r3
 8018520:	687b      	ldr	r3, [r7, #4]
 8018522:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8018526:	e004      	b.n	8018532 <tcp_receive+0x306>
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801852e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8018532:	687b      	ldr	r3, [r7, #4]
 8018534:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801853e:	429a      	cmp	r2, r3
 8018540:	d326      	bcc.n	8018590 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8018542:	687b      	ldr	r3, [r7, #4]
 8018544:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8018548:	687b      	ldr	r3, [r7, #4]
 801854a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801854e:	1ad3      	subs	r3, r2, r3
 8018550:	b29a      	uxth	r2, r3
 8018552:	687b      	ldr	r3, [r7, #4]
 8018554:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018562:	4413      	add	r3, r2
 8018564:	b29a      	uxth	r2, r3
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801856c:	429a      	cmp	r2, r3
 801856e:	d30a      	bcc.n	8018586 <tcp_receive+0x35a>
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801857a:	4413      	add	r3, r2
 801857c:	b29a      	uxth	r2, r3
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8018584:	e004      	b.n	8018590 <tcp_receive+0x364>
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801858c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8018590:	687b      	ldr	r3, [r7, #4]
 8018592:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018598:	4a98      	ldr	r2, [pc, #608]	@ (80187fc <tcp_receive+0x5d0>)
 801859a:	6878      	ldr	r0, [r7, #4]
 801859c:	f7ff fdca 	bl	8018134 <tcp_free_acked_segments>
 80185a0:	4602      	mov	r2, r0
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80185a6:	687b      	ldr	r3, [r7, #4]
 80185a8:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80185ae:	4a94      	ldr	r2, [pc, #592]	@ (8018800 <tcp_receive+0x5d4>)
 80185b0:	6878      	ldr	r0, [r7, #4]
 80185b2:	f7ff fdbf 	bl	8018134 <tcp_free_acked_segments>
 80185b6:	4602      	mov	r2, r0
 80185b8:	687b      	ldr	r3, [r7, #4]
 80185ba:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80185c0:	2b00      	cmp	r3, #0
 80185c2:	d104      	bne.n	80185ce <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80185ca:	861a      	strh	r2, [r3, #48]	@ 0x30
 80185cc:	e002      	b.n	80185d4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80185ce:	687b      	ldr	r3, [r7, #4]
 80185d0:	2200      	movs	r2, #0
 80185d2:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 80185d4:	687b      	ldr	r3, [r7, #4]
 80185d6:	2200      	movs	r2, #0
 80185d8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80185de:	2b00      	cmp	r3, #0
 80185e0:	d103      	bne.n	80185ea <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80185e2:	687b      	ldr	r3, [r7, #4]
 80185e4:	2200      	movs	r2, #0
 80185e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80185ea:	687b      	ldr	r3, [r7, #4]
 80185ec:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80185f0:	4b84      	ldr	r3, [pc, #528]	@ (8018804 <tcp_receive+0x5d8>)
 80185f2:	881b      	ldrh	r3, [r3, #0]
 80185f4:	4413      	add	r3, r2
 80185f6:	b29a      	uxth	r2, r3
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80185fe:	687b      	ldr	r3, [r7, #4]
 8018600:	8b5b      	ldrh	r3, [r3, #26]
 8018602:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8018606:	2b00      	cmp	r3, #0
 8018608:	d035      	beq.n	8018676 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801860a:	687b      	ldr	r3, [r7, #4]
 801860c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801860e:	2b00      	cmp	r3, #0
 8018610:	d118      	bne.n	8018644 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018616:	2b00      	cmp	r3, #0
 8018618:	d00c      	beq.n	8018634 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801861e:	687b      	ldr	r3, [r7, #4]
 8018620:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018622:	691b      	ldr	r3, [r3, #16]
 8018624:	685b      	ldr	r3, [r3, #4]
 8018626:	4618      	mov	r0, r3
 8018628:	f7fa fc10 	bl	8012e4c <lwip_htonl>
 801862c:	4603      	mov	r3, r0
 801862e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8018630:	2b00      	cmp	r3, #0
 8018632:	dc20      	bgt.n	8018676 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8018634:	687b      	ldr	r3, [r7, #4]
 8018636:	8b5b      	ldrh	r3, [r3, #26]
 8018638:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801863c:	b29a      	uxth	r2, r3
 801863e:	687b      	ldr	r3, [r7, #4]
 8018640:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018642:	e018      	b.n	8018676 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8018648:	687b      	ldr	r3, [r7, #4]
 801864a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801864c:	691b      	ldr	r3, [r3, #16]
 801864e:	685b      	ldr	r3, [r3, #4]
 8018650:	4618      	mov	r0, r3
 8018652:	f7fa fbfb 	bl	8012e4c <lwip_htonl>
 8018656:	4603      	mov	r3, r0
 8018658:	1ae3      	subs	r3, r4, r3
 801865a:	2b00      	cmp	r3, #0
 801865c:	dc0b      	bgt.n	8018676 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801865e:	687b      	ldr	r3, [r7, #4]
 8018660:	8b5b      	ldrh	r3, [r3, #26]
 8018662:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8018666:	b29a      	uxth	r2, r3
 8018668:	687b      	ldr	r3, [r7, #4]
 801866a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801866c:	e003      	b.n	8018676 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801866e:	6878      	ldr	r0, [r7, #4]
 8018670:	f002 fc84 	bl	801af7c <tcp_send_empty_ack>
 8018674:	e000      	b.n	8018678 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018676:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801867c:	2b00      	cmp	r3, #0
 801867e:	d05b      	beq.n	8018738 <tcp_receive+0x50c>
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018684:	4b60      	ldr	r3, [pc, #384]	@ (8018808 <tcp_receive+0x5dc>)
 8018686:	681b      	ldr	r3, [r3, #0]
 8018688:	1ad3      	subs	r3, r2, r3
 801868a:	2b00      	cmp	r3, #0
 801868c:	da54      	bge.n	8018738 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801868e:	4b5f      	ldr	r3, [pc, #380]	@ (801880c <tcp_receive+0x5e0>)
 8018690:	681b      	ldr	r3, [r3, #0]
 8018692:	b29a      	uxth	r2, r3
 8018694:	687b      	ldr	r3, [r7, #4]
 8018696:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018698:	b29b      	uxth	r3, r3
 801869a:	1ad3      	subs	r3, r2, r3
 801869c:	b29b      	uxth	r3, r3
 801869e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80186a2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80186a6:	687b      	ldr	r3, [r7, #4]
 80186a8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80186ac:	10db      	asrs	r3, r3, #3
 80186ae:	b21b      	sxth	r3, r3
 80186b0:	b29b      	uxth	r3, r3
 80186b2:	1ad3      	subs	r3, r2, r3
 80186b4:	b29b      	uxth	r3, r3
 80186b6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80186c0:	b29a      	uxth	r2, r3
 80186c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80186c6:	4413      	add	r3, r2
 80186c8:	b29b      	uxth	r3, r3
 80186ca:	b21a      	sxth	r2, r3
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 80186d0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 80186d4:	2b00      	cmp	r3, #0
 80186d6:	da05      	bge.n	80186e4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80186d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80186dc:	425b      	negs	r3, r3
 80186de:	b29b      	uxth	r3, r3
 80186e0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80186e4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80186ee:	109b      	asrs	r3, r3, #2
 80186f0:	b21b      	sxth	r3, r3
 80186f2:	b29b      	uxth	r3, r3
 80186f4:	1ad3      	subs	r3, r2, r3
 80186f6:	b29b      	uxth	r3, r3
 80186f8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80186fc:	687b      	ldr	r3, [r7, #4]
 80186fe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8018702:	b29a      	uxth	r2, r3
 8018704:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8018708:	4413      	add	r3, r2
 801870a:	b29b      	uxth	r3, r3
 801870c:	b21a      	sxth	r2, r3
 801870e:	687b      	ldr	r3, [r7, #4]
 8018710:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8018712:	687b      	ldr	r3, [r7, #4]
 8018714:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8018718:	10db      	asrs	r3, r3, #3
 801871a:	b21b      	sxth	r3, r3
 801871c:	b29a      	uxth	r2, r3
 801871e:	687b      	ldr	r3, [r7, #4]
 8018720:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8018724:	b29b      	uxth	r3, r3
 8018726:	4413      	add	r3, r2
 8018728:	b29b      	uxth	r3, r3
 801872a:	b21a      	sxth	r2, r3
 801872c:	687b      	ldr	r3, [r7, #4]
 801872e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	2200      	movs	r2, #0
 8018736:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8018738:	4b35      	ldr	r3, [pc, #212]	@ (8018810 <tcp_receive+0x5e4>)
 801873a:	881b      	ldrh	r3, [r3, #0]
 801873c:	2b00      	cmp	r3, #0
 801873e:	f000 84df 	beq.w	8019100 <tcp_receive+0xed4>
 8018742:	687b      	ldr	r3, [r7, #4]
 8018744:	7d1b      	ldrb	r3, [r3, #20]
 8018746:	2b06      	cmp	r3, #6
 8018748:	f200 84da 	bhi.w	8019100 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018750:	4b30      	ldr	r3, [pc, #192]	@ (8018814 <tcp_receive+0x5e8>)
 8018752:	681b      	ldr	r3, [r3, #0]
 8018754:	1ad3      	subs	r3, r2, r3
 8018756:	3b01      	subs	r3, #1
 8018758:	2b00      	cmp	r3, #0
 801875a:	f2c0 808f 	blt.w	801887c <tcp_receive+0x650>
 801875e:	687b      	ldr	r3, [r7, #4]
 8018760:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018762:	4b2b      	ldr	r3, [pc, #172]	@ (8018810 <tcp_receive+0x5e4>)
 8018764:	881b      	ldrh	r3, [r3, #0]
 8018766:	4619      	mov	r1, r3
 8018768:	4b2a      	ldr	r3, [pc, #168]	@ (8018814 <tcp_receive+0x5e8>)
 801876a:	681b      	ldr	r3, [r3, #0]
 801876c:	440b      	add	r3, r1
 801876e:	1ad3      	subs	r3, r2, r3
 8018770:	3301      	adds	r3, #1
 8018772:	2b00      	cmp	r3, #0
 8018774:	f300 8082 	bgt.w	801887c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8018778:	4b27      	ldr	r3, [pc, #156]	@ (8018818 <tcp_receive+0x5ec>)
 801877a:	685b      	ldr	r3, [r3, #4]
 801877c:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801877e:	687b      	ldr	r3, [r7, #4]
 8018780:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018782:	4b24      	ldr	r3, [pc, #144]	@ (8018814 <tcp_receive+0x5e8>)
 8018784:	681b      	ldr	r3, [r3, #0]
 8018786:	1ad3      	subs	r3, r2, r3
 8018788:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801878a:	4b23      	ldr	r3, [pc, #140]	@ (8018818 <tcp_receive+0x5ec>)
 801878c:	685b      	ldr	r3, [r3, #4]
 801878e:	2b00      	cmp	r3, #0
 8018790:	d106      	bne.n	80187a0 <tcp_receive+0x574>
 8018792:	4b22      	ldr	r3, [pc, #136]	@ (801881c <tcp_receive+0x5f0>)
 8018794:	f240 5294 	movw	r2, #1428	@ 0x594
 8018798:	4921      	ldr	r1, [pc, #132]	@ (8018820 <tcp_receive+0x5f4>)
 801879a:	4822      	ldr	r0, [pc, #136]	@ (8018824 <tcp_receive+0x5f8>)
 801879c:	f007 fffc 	bl	8020798 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80187a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187a2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80187a6:	4293      	cmp	r3, r2
 80187a8:	d906      	bls.n	80187b8 <tcp_receive+0x58c>
 80187aa:	4b1c      	ldr	r3, [pc, #112]	@ (801881c <tcp_receive+0x5f0>)
 80187ac:	f240 5295 	movw	r2, #1429	@ 0x595
 80187b0:	491d      	ldr	r1, [pc, #116]	@ (8018828 <tcp_receive+0x5fc>)
 80187b2:	481c      	ldr	r0, [pc, #112]	@ (8018824 <tcp_receive+0x5f8>)
 80187b4:	f007 fff0 	bl	8020798 <iprintf>
      off = (u16_t)off32;
 80187b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187ba:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80187be:	4b16      	ldr	r3, [pc, #88]	@ (8018818 <tcp_receive+0x5ec>)
 80187c0:	685b      	ldr	r3, [r3, #4]
 80187c2:	891b      	ldrh	r3, [r3, #8]
 80187c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80187c8:	429a      	cmp	r2, r3
 80187ca:	d906      	bls.n	80187da <tcp_receive+0x5ae>
 80187cc:	4b13      	ldr	r3, [pc, #76]	@ (801881c <tcp_receive+0x5f0>)
 80187ce:	f240 5297 	movw	r2, #1431	@ 0x597
 80187d2:	4916      	ldr	r1, [pc, #88]	@ (801882c <tcp_receive+0x600>)
 80187d4:	4813      	ldr	r0, [pc, #76]	@ (8018824 <tcp_receive+0x5f8>)
 80187d6:	f007 ffdf 	bl	8020798 <iprintf>
      inseg.len -= off;
 80187da:	4b0f      	ldr	r3, [pc, #60]	@ (8018818 <tcp_receive+0x5ec>)
 80187dc:	891a      	ldrh	r2, [r3, #8]
 80187de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80187e2:	1ad3      	subs	r3, r2, r3
 80187e4:	b29a      	uxth	r2, r3
 80187e6:	4b0c      	ldr	r3, [pc, #48]	@ (8018818 <tcp_receive+0x5ec>)
 80187e8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80187ea:	4b0b      	ldr	r3, [pc, #44]	@ (8018818 <tcp_receive+0x5ec>)
 80187ec:	685b      	ldr	r3, [r3, #4]
 80187ee:	891a      	ldrh	r2, [r3, #8]
 80187f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80187f4:	1ad3      	subs	r3, r2, r3
 80187f6:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 80187f8:	e02a      	b.n	8018850 <tcp_receive+0x624>
 80187fa:	bf00      	nop
 80187fc:	08024360 	.word	0x08024360
 8018800:	08024368 	.word	0x08024368
 8018804:	2002d4b0 	.word	0x2002d4b0
 8018808:	2002d4ac 	.word	0x2002d4ac
 801880c:	2002d46c 	.word	0x2002d46c
 8018810:	2002d4b2 	.word	0x2002d4b2
 8018814:	2002d4a8 	.word	0x2002d4a8
 8018818:	2002d484 	.word	0x2002d484
 801881c:	08023ff8 	.word	0x08023ff8
 8018820:	08024370 	.word	0x08024370
 8018824:	08024044 	.word	0x08024044
 8018828:	08024380 	.word	0x08024380
 801882c:	08024390 	.word	0x08024390
        off -= p->len;
 8018830:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018832:	895b      	ldrh	r3, [r3, #10]
 8018834:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018838:	1ad3      	subs	r3, r2, r3
 801883a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801883e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018840:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8018842:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8018844:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018846:	2200      	movs	r2, #0
 8018848:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801884a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801884c:	681b      	ldr	r3, [r3, #0]
 801884e:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8018850:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018852:	895b      	ldrh	r3, [r3, #10]
 8018854:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018858:	429a      	cmp	r2, r3
 801885a:	d8e9      	bhi.n	8018830 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801885c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018860:	4619      	mov	r1, r3
 8018862:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8018864:	f7fc f87c 	bl	8014960 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8018868:	687b      	ldr	r3, [r7, #4]
 801886a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801886c:	4a90      	ldr	r2, [pc, #576]	@ (8018ab0 <tcp_receive+0x884>)
 801886e:	6013      	str	r3, [r2, #0]
 8018870:	4b90      	ldr	r3, [pc, #576]	@ (8018ab4 <tcp_receive+0x888>)
 8018872:	691b      	ldr	r3, [r3, #16]
 8018874:	4a8e      	ldr	r2, [pc, #568]	@ (8018ab0 <tcp_receive+0x884>)
 8018876:	6812      	ldr	r2, [r2, #0]
 8018878:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801887a:	e00d      	b.n	8018898 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801887c:	4b8c      	ldr	r3, [pc, #560]	@ (8018ab0 <tcp_receive+0x884>)
 801887e:	681a      	ldr	r2, [r3, #0]
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018884:	1ad3      	subs	r3, r2, r3
 8018886:	2b00      	cmp	r3, #0
 8018888:	da06      	bge.n	8018898 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	8b5b      	ldrh	r3, [r3, #26]
 801888e:	f043 0302 	orr.w	r3, r3, #2
 8018892:	b29a      	uxth	r2, r3
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018898:	4b85      	ldr	r3, [pc, #532]	@ (8018ab0 <tcp_receive+0x884>)
 801889a:	681a      	ldr	r2, [r3, #0]
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80188a0:	1ad3      	subs	r3, r2, r3
 80188a2:	2b00      	cmp	r3, #0
 80188a4:	f2c0 8427 	blt.w	80190f6 <tcp_receive+0xeca>
 80188a8:	4b81      	ldr	r3, [pc, #516]	@ (8018ab0 <tcp_receive+0x884>)
 80188aa:	681a      	ldr	r2, [r3, #0]
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80188b0:	6879      	ldr	r1, [r7, #4]
 80188b2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80188b4:	440b      	add	r3, r1
 80188b6:	1ad3      	subs	r3, r2, r3
 80188b8:	3301      	adds	r3, #1
 80188ba:	2b00      	cmp	r3, #0
 80188bc:	f300 841b 	bgt.w	80190f6 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80188c4:	4b7a      	ldr	r3, [pc, #488]	@ (8018ab0 <tcp_receive+0x884>)
 80188c6:	681b      	ldr	r3, [r3, #0]
 80188c8:	429a      	cmp	r2, r3
 80188ca:	f040 8298 	bne.w	8018dfe <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80188ce:	4b79      	ldr	r3, [pc, #484]	@ (8018ab4 <tcp_receive+0x888>)
 80188d0:	891c      	ldrh	r4, [r3, #8]
 80188d2:	4b78      	ldr	r3, [pc, #480]	@ (8018ab4 <tcp_receive+0x888>)
 80188d4:	691b      	ldr	r3, [r3, #16]
 80188d6:	899b      	ldrh	r3, [r3, #12]
 80188d8:	b29b      	uxth	r3, r3
 80188da:	4618      	mov	r0, r3
 80188dc:	f7fa faa0 	bl	8012e20 <lwip_htons>
 80188e0:	4603      	mov	r3, r0
 80188e2:	b2db      	uxtb	r3, r3
 80188e4:	f003 0303 	and.w	r3, r3, #3
 80188e8:	2b00      	cmp	r3, #0
 80188ea:	d001      	beq.n	80188f0 <tcp_receive+0x6c4>
 80188ec:	2301      	movs	r3, #1
 80188ee:	e000      	b.n	80188f2 <tcp_receive+0x6c6>
 80188f0:	2300      	movs	r3, #0
 80188f2:	4423      	add	r3, r4
 80188f4:	b29a      	uxth	r2, r3
 80188f6:	4b70      	ldr	r3, [pc, #448]	@ (8018ab8 <tcp_receive+0x88c>)
 80188f8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80188fa:	687b      	ldr	r3, [r7, #4]
 80188fc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80188fe:	4b6e      	ldr	r3, [pc, #440]	@ (8018ab8 <tcp_receive+0x88c>)
 8018900:	881b      	ldrh	r3, [r3, #0]
 8018902:	429a      	cmp	r2, r3
 8018904:	d274      	bcs.n	80189f0 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018906:	4b6b      	ldr	r3, [pc, #428]	@ (8018ab4 <tcp_receive+0x888>)
 8018908:	691b      	ldr	r3, [r3, #16]
 801890a:	899b      	ldrh	r3, [r3, #12]
 801890c:	b29b      	uxth	r3, r3
 801890e:	4618      	mov	r0, r3
 8018910:	f7fa fa86 	bl	8012e20 <lwip_htons>
 8018914:	4603      	mov	r3, r0
 8018916:	b2db      	uxtb	r3, r3
 8018918:	f003 0301 	and.w	r3, r3, #1
 801891c:	2b00      	cmp	r3, #0
 801891e:	d01e      	beq.n	801895e <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8018920:	4b64      	ldr	r3, [pc, #400]	@ (8018ab4 <tcp_receive+0x888>)
 8018922:	691b      	ldr	r3, [r3, #16]
 8018924:	899b      	ldrh	r3, [r3, #12]
 8018926:	b29b      	uxth	r3, r3
 8018928:	b21b      	sxth	r3, r3
 801892a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801892e:	b21c      	sxth	r4, r3
 8018930:	4b60      	ldr	r3, [pc, #384]	@ (8018ab4 <tcp_receive+0x888>)
 8018932:	691b      	ldr	r3, [r3, #16]
 8018934:	899b      	ldrh	r3, [r3, #12]
 8018936:	b29b      	uxth	r3, r3
 8018938:	4618      	mov	r0, r3
 801893a:	f7fa fa71 	bl	8012e20 <lwip_htons>
 801893e:	4603      	mov	r3, r0
 8018940:	b2db      	uxtb	r3, r3
 8018942:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8018946:	b29b      	uxth	r3, r3
 8018948:	4618      	mov	r0, r3
 801894a:	f7fa fa69 	bl	8012e20 <lwip_htons>
 801894e:	4603      	mov	r3, r0
 8018950:	b21b      	sxth	r3, r3
 8018952:	4323      	orrs	r3, r4
 8018954:	b21a      	sxth	r2, r3
 8018956:	4b57      	ldr	r3, [pc, #348]	@ (8018ab4 <tcp_receive+0x888>)
 8018958:	691b      	ldr	r3, [r3, #16]
 801895a:	b292      	uxth	r2, r2
 801895c:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801895e:	687b      	ldr	r3, [r7, #4]
 8018960:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018962:	4b54      	ldr	r3, [pc, #336]	@ (8018ab4 <tcp_receive+0x888>)
 8018964:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8018966:	4b53      	ldr	r3, [pc, #332]	@ (8018ab4 <tcp_receive+0x888>)
 8018968:	691b      	ldr	r3, [r3, #16]
 801896a:	899b      	ldrh	r3, [r3, #12]
 801896c:	b29b      	uxth	r3, r3
 801896e:	4618      	mov	r0, r3
 8018970:	f7fa fa56 	bl	8012e20 <lwip_htons>
 8018974:	4603      	mov	r3, r0
 8018976:	b2db      	uxtb	r3, r3
 8018978:	f003 0302 	and.w	r3, r3, #2
 801897c:	2b00      	cmp	r3, #0
 801897e:	d005      	beq.n	801898c <tcp_receive+0x760>
            inseg.len -= 1;
 8018980:	4b4c      	ldr	r3, [pc, #304]	@ (8018ab4 <tcp_receive+0x888>)
 8018982:	891b      	ldrh	r3, [r3, #8]
 8018984:	3b01      	subs	r3, #1
 8018986:	b29a      	uxth	r2, r3
 8018988:	4b4a      	ldr	r3, [pc, #296]	@ (8018ab4 <tcp_receive+0x888>)
 801898a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801898c:	4b49      	ldr	r3, [pc, #292]	@ (8018ab4 <tcp_receive+0x888>)
 801898e:	685b      	ldr	r3, [r3, #4]
 8018990:	4a48      	ldr	r2, [pc, #288]	@ (8018ab4 <tcp_receive+0x888>)
 8018992:	8912      	ldrh	r2, [r2, #8]
 8018994:	4611      	mov	r1, r2
 8018996:	4618      	mov	r0, r3
 8018998:	f7fb fed0 	bl	801473c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801899c:	4b45      	ldr	r3, [pc, #276]	@ (8018ab4 <tcp_receive+0x888>)
 801899e:	891c      	ldrh	r4, [r3, #8]
 80189a0:	4b44      	ldr	r3, [pc, #272]	@ (8018ab4 <tcp_receive+0x888>)
 80189a2:	691b      	ldr	r3, [r3, #16]
 80189a4:	899b      	ldrh	r3, [r3, #12]
 80189a6:	b29b      	uxth	r3, r3
 80189a8:	4618      	mov	r0, r3
 80189aa:	f7fa fa39 	bl	8012e20 <lwip_htons>
 80189ae:	4603      	mov	r3, r0
 80189b0:	b2db      	uxtb	r3, r3
 80189b2:	f003 0303 	and.w	r3, r3, #3
 80189b6:	2b00      	cmp	r3, #0
 80189b8:	d001      	beq.n	80189be <tcp_receive+0x792>
 80189ba:	2301      	movs	r3, #1
 80189bc:	e000      	b.n	80189c0 <tcp_receive+0x794>
 80189be:	2300      	movs	r3, #0
 80189c0:	4423      	add	r3, r4
 80189c2:	b29a      	uxth	r2, r3
 80189c4:	4b3c      	ldr	r3, [pc, #240]	@ (8018ab8 <tcp_receive+0x88c>)
 80189c6:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80189c8:	4b3b      	ldr	r3, [pc, #236]	@ (8018ab8 <tcp_receive+0x88c>)
 80189ca:	881b      	ldrh	r3, [r3, #0]
 80189cc:	461a      	mov	r2, r3
 80189ce:	4b38      	ldr	r3, [pc, #224]	@ (8018ab0 <tcp_receive+0x884>)
 80189d0:	681b      	ldr	r3, [r3, #0]
 80189d2:	441a      	add	r2, r3
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80189d8:	6879      	ldr	r1, [r7, #4]
 80189da:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80189dc:	440b      	add	r3, r1
 80189de:	429a      	cmp	r2, r3
 80189e0:	d006      	beq.n	80189f0 <tcp_receive+0x7c4>
 80189e2:	4b36      	ldr	r3, [pc, #216]	@ (8018abc <tcp_receive+0x890>)
 80189e4:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 80189e8:	4935      	ldr	r1, [pc, #212]	@ (8018ac0 <tcp_receive+0x894>)
 80189ea:	4836      	ldr	r0, [pc, #216]	@ (8018ac4 <tcp_receive+0x898>)
 80189ec:	f007 fed4 	bl	8020798 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	f000 80e6 	beq.w	8018bc6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80189fa:	4b2e      	ldr	r3, [pc, #184]	@ (8018ab4 <tcp_receive+0x888>)
 80189fc:	691b      	ldr	r3, [r3, #16]
 80189fe:	899b      	ldrh	r3, [r3, #12]
 8018a00:	b29b      	uxth	r3, r3
 8018a02:	4618      	mov	r0, r3
 8018a04:	f7fa fa0c 	bl	8012e20 <lwip_htons>
 8018a08:	4603      	mov	r3, r0
 8018a0a:	b2db      	uxtb	r3, r3
 8018a0c:	f003 0301 	and.w	r3, r3, #1
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	d010      	beq.n	8018a36 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8018a14:	e00a      	b.n	8018a2c <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8018a16:	687b      	ldr	r3, [r7, #4]
 8018a18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018a1a:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8018a1c:	687b      	ldr	r3, [r7, #4]
 8018a1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018a20:	681a      	ldr	r2, [r3, #0]
 8018a22:	687b      	ldr	r3, [r7, #4]
 8018a24:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8018a26:	68f8      	ldr	r0, [r7, #12]
 8018a28:	f7fd fc2f 	bl	801628a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8018a2c:	687b      	ldr	r3, [r7, #4]
 8018a2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	d1f0      	bne.n	8018a16 <tcp_receive+0x7ea>
 8018a34:	e0c7      	b.n	8018bc6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8018a36:	687b      	ldr	r3, [r7, #4]
 8018a38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8018a3c:	e051      	b.n	8018ae2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8018a3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018a40:	691b      	ldr	r3, [r3, #16]
 8018a42:	899b      	ldrh	r3, [r3, #12]
 8018a44:	b29b      	uxth	r3, r3
 8018a46:	4618      	mov	r0, r3
 8018a48:	f7fa f9ea 	bl	8012e20 <lwip_htons>
 8018a4c:	4603      	mov	r3, r0
 8018a4e:	b2db      	uxtb	r3, r3
 8018a50:	f003 0301 	and.w	r3, r3, #1
 8018a54:	2b00      	cmp	r3, #0
 8018a56:	d03c      	beq.n	8018ad2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8018a58:	4b16      	ldr	r3, [pc, #88]	@ (8018ab4 <tcp_receive+0x888>)
 8018a5a:	691b      	ldr	r3, [r3, #16]
 8018a5c:	899b      	ldrh	r3, [r3, #12]
 8018a5e:	b29b      	uxth	r3, r3
 8018a60:	4618      	mov	r0, r3
 8018a62:	f7fa f9dd 	bl	8012e20 <lwip_htons>
 8018a66:	4603      	mov	r3, r0
 8018a68:	b2db      	uxtb	r3, r3
 8018a6a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8018a6e:	2b00      	cmp	r3, #0
 8018a70:	d12f      	bne.n	8018ad2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8018a72:	4b10      	ldr	r3, [pc, #64]	@ (8018ab4 <tcp_receive+0x888>)
 8018a74:	691b      	ldr	r3, [r3, #16]
 8018a76:	899b      	ldrh	r3, [r3, #12]
 8018a78:	b29c      	uxth	r4, r3
 8018a7a:	2001      	movs	r0, #1
 8018a7c:	f7fa f9d0 	bl	8012e20 <lwip_htons>
 8018a80:	4603      	mov	r3, r0
 8018a82:	461a      	mov	r2, r3
 8018a84:	4b0b      	ldr	r3, [pc, #44]	@ (8018ab4 <tcp_receive+0x888>)
 8018a86:	691b      	ldr	r3, [r3, #16]
 8018a88:	4322      	orrs	r2, r4
 8018a8a:	b292      	uxth	r2, r2
 8018a8c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8018a8e:	4b09      	ldr	r3, [pc, #36]	@ (8018ab4 <tcp_receive+0x888>)
 8018a90:	891c      	ldrh	r4, [r3, #8]
 8018a92:	4b08      	ldr	r3, [pc, #32]	@ (8018ab4 <tcp_receive+0x888>)
 8018a94:	691b      	ldr	r3, [r3, #16]
 8018a96:	899b      	ldrh	r3, [r3, #12]
 8018a98:	b29b      	uxth	r3, r3
 8018a9a:	4618      	mov	r0, r3
 8018a9c:	f7fa f9c0 	bl	8012e20 <lwip_htons>
 8018aa0:	4603      	mov	r3, r0
 8018aa2:	b2db      	uxtb	r3, r3
 8018aa4:	f003 0303 	and.w	r3, r3, #3
 8018aa8:	2b00      	cmp	r3, #0
 8018aaa:	d00d      	beq.n	8018ac8 <tcp_receive+0x89c>
 8018aac:	2301      	movs	r3, #1
 8018aae:	e00c      	b.n	8018aca <tcp_receive+0x89e>
 8018ab0:	2002d4a8 	.word	0x2002d4a8
 8018ab4:	2002d484 	.word	0x2002d484
 8018ab8:	2002d4b2 	.word	0x2002d4b2
 8018abc:	08023ff8 	.word	0x08023ff8
 8018ac0:	080243a0 	.word	0x080243a0
 8018ac4:	08024044 	.word	0x08024044
 8018ac8:	2300      	movs	r3, #0
 8018aca:	4423      	add	r3, r4
 8018acc:	b29a      	uxth	r2, r3
 8018ace:	4b98      	ldr	r3, [pc, #608]	@ (8018d30 <tcp_receive+0xb04>)
 8018ad0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8018ad2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018ad4:	613b      	str	r3, [r7, #16]
              next = next->next;
 8018ad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018ad8:	681b      	ldr	r3, [r3, #0]
 8018ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8018adc:	6938      	ldr	r0, [r7, #16]
 8018ade:	f7fd fbd4 	bl	801628a <tcp_seg_free>
            while (next &&
 8018ae2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018ae4:	2b00      	cmp	r3, #0
 8018ae6:	d00e      	beq.n	8018b06 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8018ae8:	4b91      	ldr	r3, [pc, #580]	@ (8018d30 <tcp_receive+0xb04>)
 8018aea:	881b      	ldrh	r3, [r3, #0]
 8018aec:	461a      	mov	r2, r3
 8018aee:	4b91      	ldr	r3, [pc, #580]	@ (8018d34 <tcp_receive+0xb08>)
 8018af0:	681b      	ldr	r3, [r3, #0]
 8018af2:	441a      	add	r2, r3
 8018af4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018af6:	691b      	ldr	r3, [r3, #16]
 8018af8:	685b      	ldr	r3, [r3, #4]
 8018afa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8018afc:	8909      	ldrh	r1, [r1, #8]
 8018afe:	440b      	add	r3, r1
 8018b00:	1ad3      	subs	r3, r2, r3
            while (next &&
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	da9b      	bge.n	8018a3e <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8018b06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018b08:	2b00      	cmp	r3, #0
 8018b0a:	d059      	beq.n	8018bc0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8018b0c:	4b88      	ldr	r3, [pc, #544]	@ (8018d30 <tcp_receive+0xb04>)
 8018b0e:	881b      	ldrh	r3, [r3, #0]
 8018b10:	461a      	mov	r2, r3
 8018b12:	4b88      	ldr	r3, [pc, #544]	@ (8018d34 <tcp_receive+0xb08>)
 8018b14:	681b      	ldr	r3, [r3, #0]
 8018b16:	441a      	add	r2, r3
 8018b18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018b1a:	691b      	ldr	r3, [r3, #16]
 8018b1c:	685b      	ldr	r3, [r3, #4]
 8018b1e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	dd4d      	ble.n	8018bc0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8018b24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018b26:	691b      	ldr	r3, [r3, #16]
 8018b28:	685b      	ldr	r3, [r3, #4]
 8018b2a:	b29a      	uxth	r2, r3
 8018b2c:	4b81      	ldr	r3, [pc, #516]	@ (8018d34 <tcp_receive+0xb08>)
 8018b2e:	681b      	ldr	r3, [r3, #0]
 8018b30:	b29b      	uxth	r3, r3
 8018b32:	1ad3      	subs	r3, r2, r3
 8018b34:	b29a      	uxth	r2, r3
 8018b36:	4b80      	ldr	r3, [pc, #512]	@ (8018d38 <tcp_receive+0xb0c>)
 8018b38:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8018b3a:	4b7f      	ldr	r3, [pc, #508]	@ (8018d38 <tcp_receive+0xb0c>)
 8018b3c:	691b      	ldr	r3, [r3, #16]
 8018b3e:	899b      	ldrh	r3, [r3, #12]
 8018b40:	b29b      	uxth	r3, r3
 8018b42:	4618      	mov	r0, r3
 8018b44:	f7fa f96c 	bl	8012e20 <lwip_htons>
 8018b48:	4603      	mov	r3, r0
 8018b4a:	b2db      	uxtb	r3, r3
 8018b4c:	f003 0302 	and.w	r3, r3, #2
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	d005      	beq.n	8018b60 <tcp_receive+0x934>
                inseg.len -= 1;
 8018b54:	4b78      	ldr	r3, [pc, #480]	@ (8018d38 <tcp_receive+0xb0c>)
 8018b56:	891b      	ldrh	r3, [r3, #8]
 8018b58:	3b01      	subs	r3, #1
 8018b5a:	b29a      	uxth	r2, r3
 8018b5c:	4b76      	ldr	r3, [pc, #472]	@ (8018d38 <tcp_receive+0xb0c>)
 8018b5e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8018b60:	4b75      	ldr	r3, [pc, #468]	@ (8018d38 <tcp_receive+0xb0c>)
 8018b62:	685b      	ldr	r3, [r3, #4]
 8018b64:	4a74      	ldr	r2, [pc, #464]	@ (8018d38 <tcp_receive+0xb0c>)
 8018b66:	8912      	ldrh	r2, [r2, #8]
 8018b68:	4611      	mov	r1, r2
 8018b6a:	4618      	mov	r0, r3
 8018b6c:	f7fb fde6 	bl	801473c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8018b70:	4b71      	ldr	r3, [pc, #452]	@ (8018d38 <tcp_receive+0xb0c>)
 8018b72:	891c      	ldrh	r4, [r3, #8]
 8018b74:	4b70      	ldr	r3, [pc, #448]	@ (8018d38 <tcp_receive+0xb0c>)
 8018b76:	691b      	ldr	r3, [r3, #16]
 8018b78:	899b      	ldrh	r3, [r3, #12]
 8018b7a:	b29b      	uxth	r3, r3
 8018b7c:	4618      	mov	r0, r3
 8018b7e:	f7fa f94f 	bl	8012e20 <lwip_htons>
 8018b82:	4603      	mov	r3, r0
 8018b84:	b2db      	uxtb	r3, r3
 8018b86:	f003 0303 	and.w	r3, r3, #3
 8018b8a:	2b00      	cmp	r3, #0
 8018b8c:	d001      	beq.n	8018b92 <tcp_receive+0x966>
 8018b8e:	2301      	movs	r3, #1
 8018b90:	e000      	b.n	8018b94 <tcp_receive+0x968>
 8018b92:	2300      	movs	r3, #0
 8018b94:	4423      	add	r3, r4
 8018b96:	b29a      	uxth	r2, r3
 8018b98:	4b65      	ldr	r3, [pc, #404]	@ (8018d30 <tcp_receive+0xb04>)
 8018b9a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8018b9c:	4b64      	ldr	r3, [pc, #400]	@ (8018d30 <tcp_receive+0xb04>)
 8018b9e:	881b      	ldrh	r3, [r3, #0]
 8018ba0:	461a      	mov	r2, r3
 8018ba2:	4b64      	ldr	r3, [pc, #400]	@ (8018d34 <tcp_receive+0xb08>)
 8018ba4:	681b      	ldr	r3, [r3, #0]
 8018ba6:	441a      	add	r2, r3
 8018ba8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018baa:	691b      	ldr	r3, [r3, #16]
 8018bac:	685b      	ldr	r3, [r3, #4]
 8018bae:	429a      	cmp	r2, r3
 8018bb0:	d006      	beq.n	8018bc0 <tcp_receive+0x994>
 8018bb2:	4b62      	ldr	r3, [pc, #392]	@ (8018d3c <tcp_receive+0xb10>)
 8018bb4:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8018bb8:	4961      	ldr	r1, [pc, #388]	@ (8018d40 <tcp_receive+0xb14>)
 8018bba:	4862      	ldr	r0, [pc, #392]	@ (8018d44 <tcp_receive+0xb18>)
 8018bbc:	f007 fdec 	bl	8020798 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8018bc4:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8018bc6:	4b5a      	ldr	r3, [pc, #360]	@ (8018d30 <tcp_receive+0xb04>)
 8018bc8:	881b      	ldrh	r3, [r3, #0]
 8018bca:	461a      	mov	r2, r3
 8018bcc:	4b59      	ldr	r3, [pc, #356]	@ (8018d34 <tcp_receive+0xb08>)
 8018bce:	681b      	ldr	r3, [r3, #0]
 8018bd0:	441a      	add	r2, r3
 8018bd2:	687b      	ldr	r3, [r7, #4]
 8018bd4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018bda:	4b55      	ldr	r3, [pc, #340]	@ (8018d30 <tcp_receive+0xb04>)
 8018bdc:	881b      	ldrh	r3, [r3, #0]
 8018bde:	429a      	cmp	r2, r3
 8018be0:	d206      	bcs.n	8018bf0 <tcp_receive+0x9c4>
 8018be2:	4b56      	ldr	r3, [pc, #344]	@ (8018d3c <tcp_receive+0xb10>)
 8018be4:	f240 6207 	movw	r2, #1543	@ 0x607
 8018be8:	4957      	ldr	r1, [pc, #348]	@ (8018d48 <tcp_receive+0xb1c>)
 8018bea:	4856      	ldr	r0, [pc, #344]	@ (8018d44 <tcp_receive+0xb18>)
 8018bec:	f007 fdd4 	bl	8020798 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018bf4:	4b4e      	ldr	r3, [pc, #312]	@ (8018d30 <tcp_receive+0xb04>)
 8018bf6:	881b      	ldrh	r3, [r3, #0]
 8018bf8:	1ad3      	subs	r3, r2, r3
 8018bfa:	b29a      	uxth	r2, r3
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8018c00:	6878      	ldr	r0, [r7, #4]
 8018c02:	f7fc fe1b 	bl	801583c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8018c06:	4b4c      	ldr	r3, [pc, #304]	@ (8018d38 <tcp_receive+0xb0c>)
 8018c08:	685b      	ldr	r3, [r3, #4]
 8018c0a:	891b      	ldrh	r3, [r3, #8]
 8018c0c:	2b00      	cmp	r3, #0
 8018c0e:	d006      	beq.n	8018c1e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8018c10:	4b49      	ldr	r3, [pc, #292]	@ (8018d38 <tcp_receive+0xb0c>)
 8018c12:	685b      	ldr	r3, [r3, #4]
 8018c14:	4a4d      	ldr	r2, [pc, #308]	@ (8018d4c <tcp_receive+0xb20>)
 8018c16:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8018c18:	4b47      	ldr	r3, [pc, #284]	@ (8018d38 <tcp_receive+0xb0c>)
 8018c1a:	2200      	movs	r2, #0
 8018c1c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018c1e:	4b46      	ldr	r3, [pc, #280]	@ (8018d38 <tcp_receive+0xb0c>)
 8018c20:	691b      	ldr	r3, [r3, #16]
 8018c22:	899b      	ldrh	r3, [r3, #12]
 8018c24:	b29b      	uxth	r3, r3
 8018c26:	4618      	mov	r0, r3
 8018c28:	f7fa f8fa 	bl	8012e20 <lwip_htons>
 8018c2c:	4603      	mov	r3, r0
 8018c2e:	b2db      	uxtb	r3, r3
 8018c30:	f003 0301 	and.w	r3, r3, #1
 8018c34:	2b00      	cmp	r3, #0
 8018c36:	f000 80b8 	beq.w	8018daa <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8018c3a:	4b45      	ldr	r3, [pc, #276]	@ (8018d50 <tcp_receive+0xb24>)
 8018c3c:	781b      	ldrb	r3, [r3, #0]
 8018c3e:	f043 0320 	orr.w	r3, r3, #32
 8018c42:	b2da      	uxtb	r2, r3
 8018c44:	4b42      	ldr	r3, [pc, #264]	@ (8018d50 <tcp_receive+0xb24>)
 8018c46:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8018c48:	e0af      	b.n	8018daa <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8018c4a:	687b      	ldr	r3, [r7, #4]
 8018c4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018c4e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018c54:	691b      	ldr	r3, [r3, #16]
 8018c56:	685b      	ldr	r3, [r3, #4]
 8018c58:	4a36      	ldr	r2, [pc, #216]	@ (8018d34 <tcp_receive+0xb08>)
 8018c5a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8018c5c:	68bb      	ldr	r3, [r7, #8]
 8018c5e:	891b      	ldrh	r3, [r3, #8]
 8018c60:	461c      	mov	r4, r3
 8018c62:	68bb      	ldr	r3, [r7, #8]
 8018c64:	691b      	ldr	r3, [r3, #16]
 8018c66:	899b      	ldrh	r3, [r3, #12]
 8018c68:	b29b      	uxth	r3, r3
 8018c6a:	4618      	mov	r0, r3
 8018c6c:	f7fa f8d8 	bl	8012e20 <lwip_htons>
 8018c70:	4603      	mov	r3, r0
 8018c72:	b2db      	uxtb	r3, r3
 8018c74:	f003 0303 	and.w	r3, r3, #3
 8018c78:	2b00      	cmp	r3, #0
 8018c7a:	d001      	beq.n	8018c80 <tcp_receive+0xa54>
 8018c7c:	2301      	movs	r3, #1
 8018c7e:	e000      	b.n	8018c82 <tcp_receive+0xa56>
 8018c80:	2300      	movs	r3, #0
 8018c82:	191a      	adds	r2, r3, r4
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018c88:	441a      	add	r2, r3
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018c92:	461c      	mov	r4, r3
 8018c94:	68bb      	ldr	r3, [r7, #8]
 8018c96:	891b      	ldrh	r3, [r3, #8]
 8018c98:	461d      	mov	r5, r3
 8018c9a:	68bb      	ldr	r3, [r7, #8]
 8018c9c:	691b      	ldr	r3, [r3, #16]
 8018c9e:	899b      	ldrh	r3, [r3, #12]
 8018ca0:	b29b      	uxth	r3, r3
 8018ca2:	4618      	mov	r0, r3
 8018ca4:	f7fa f8bc 	bl	8012e20 <lwip_htons>
 8018ca8:	4603      	mov	r3, r0
 8018caa:	b2db      	uxtb	r3, r3
 8018cac:	f003 0303 	and.w	r3, r3, #3
 8018cb0:	2b00      	cmp	r3, #0
 8018cb2:	d001      	beq.n	8018cb8 <tcp_receive+0xa8c>
 8018cb4:	2301      	movs	r3, #1
 8018cb6:	e000      	b.n	8018cba <tcp_receive+0xa8e>
 8018cb8:	2300      	movs	r3, #0
 8018cba:	442b      	add	r3, r5
 8018cbc:	429c      	cmp	r4, r3
 8018cbe:	d206      	bcs.n	8018cce <tcp_receive+0xaa2>
 8018cc0:	4b1e      	ldr	r3, [pc, #120]	@ (8018d3c <tcp_receive+0xb10>)
 8018cc2:	f240 622b 	movw	r2, #1579	@ 0x62b
 8018cc6:	4923      	ldr	r1, [pc, #140]	@ (8018d54 <tcp_receive+0xb28>)
 8018cc8:	481e      	ldr	r0, [pc, #120]	@ (8018d44 <tcp_receive+0xb18>)
 8018cca:	f007 fd65 	bl	8020798 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8018cce:	68bb      	ldr	r3, [r7, #8]
 8018cd0:	891b      	ldrh	r3, [r3, #8]
 8018cd2:	461c      	mov	r4, r3
 8018cd4:	68bb      	ldr	r3, [r7, #8]
 8018cd6:	691b      	ldr	r3, [r3, #16]
 8018cd8:	899b      	ldrh	r3, [r3, #12]
 8018cda:	b29b      	uxth	r3, r3
 8018cdc:	4618      	mov	r0, r3
 8018cde:	f7fa f89f 	bl	8012e20 <lwip_htons>
 8018ce2:	4603      	mov	r3, r0
 8018ce4:	b2db      	uxtb	r3, r3
 8018ce6:	f003 0303 	and.w	r3, r3, #3
 8018cea:	2b00      	cmp	r3, #0
 8018cec:	d001      	beq.n	8018cf2 <tcp_receive+0xac6>
 8018cee:	2301      	movs	r3, #1
 8018cf0:	e000      	b.n	8018cf4 <tcp_receive+0xac8>
 8018cf2:	2300      	movs	r3, #0
 8018cf4:	1919      	adds	r1, r3, r4
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018cfa:	b28b      	uxth	r3, r1
 8018cfc:	1ad3      	subs	r3, r2, r3
 8018cfe:	b29a      	uxth	r2, r3
 8018d00:	687b      	ldr	r3, [r7, #4]
 8018d02:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8018d04:	6878      	ldr	r0, [r7, #4]
 8018d06:	f7fc fd99 	bl	801583c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8018d0a:	68bb      	ldr	r3, [r7, #8]
 8018d0c:	685b      	ldr	r3, [r3, #4]
 8018d0e:	891b      	ldrh	r3, [r3, #8]
 8018d10:	2b00      	cmp	r3, #0
 8018d12:	d028      	beq.n	8018d66 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8018d14:	4b0d      	ldr	r3, [pc, #52]	@ (8018d4c <tcp_receive+0xb20>)
 8018d16:	681b      	ldr	r3, [r3, #0]
 8018d18:	2b00      	cmp	r3, #0
 8018d1a:	d01d      	beq.n	8018d58 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8018d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8018d4c <tcp_receive+0xb20>)
 8018d1e:	681a      	ldr	r2, [r3, #0]
 8018d20:	68bb      	ldr	r3, [r7, #8]
 8018d22:	685b      	ldr	r3, [r3, #4]
 8018d24:	4619      	mov	r1, r3
 8018d26:	4610      	mov	r0, r2
 8018d28:	f7fb ff8e 	bl	8014c48 <pbuf_cat>
 8018d2c:	e018      	b.n	8018d60 <tcp_receive+0xb34>
 8018d2e:	bf00      	nop
 8018d30:	2002d4b2 	.word	0x2002d4b2
 8018d34:	2002d4a8 	.word	0x2002d4a8
 8018d38:	2002d484 	.word	0x2002d484
 8018d3c:	08023ff8 	.word	0x08023ff8
 8018d40:	080243d8 	.word	0x080243d8
 8018d44:	08024044 	.word	0x08024044
 8018d48:	08024414 	.word	0x08024414
 8018d4c:	2002d4b8 	.word	0x2002d4b8
 8018d50:	2002d4b5 	.word	0x2002d4b5
 8018d54:	08024434 	.word	0x08024434
            } else {
              recv_data = cseg->p;
 8018d58:	68bb      	ldr	r3, [r7, #8]
 8018d5a:	685b      	ldr	r3, [r3, #4]
 8018d5c:	4a70      	ldr	r2, [pc, #448]	@ (8018f20 <tcp_receive+0xcf4>)
 8018d5e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8018d60:	68bb      	ldr	r3, [r7, #8]
 8018d62:	2200      	movs	r2, #0
 8018d64:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8018d66:	68bb      	ldr	r3, [r7, #8]
 8018d68:	691b      	ldr	r3, [r3, #16]
 8018d6a:	899b      	ldrh	r3, [r3, #12]
 8018d6c:	b29b      	uxth	r3, r3
 8018d6e:	4618      	mov	r0, r3
 8018d70:	f7fa f856 	bl	8012e20 <lwip_htons>
 8018d74:	4603      	mov	r3, r0
 8018d76:	b2db      	uxtb	r3, r3
 8018d78:	f003 0301 	and.w	r3, r3, #1
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	d00d      	beq.n	8018d9c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8018d80:	4b68      	ldr	r3, [pc, #416]	@ (8018f24 <tcp_receive+0xcf8>)
 8018d82:	781b      	ldrb	r3, [r3, #0]
 8018d84:	f043 0320 	orr.w	r3, r3, #32
 8018d88:	b2da      	uxtb	r2, r3
 8018d8a:	4b66      	ldr	r3, [pc, #408]	@ (8018f24 <tcp_receive+0xcf8>)
 8018d8c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	7d1b      	ldrb	r3, [r3, #20]
 8018d92:	2b04      	cmp	r3, #4
 8018d94:	d102      	bne.n	8018d9c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8018d96:	687b      	ldr	r3, [r7, #4]
 8018d98:	2207      	movs	r2, #7
 8018d9a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8018d9c:	68bb      	ldr	r3, [r7, #8]
 8018d9e:	681a      	ldr	r2, [r3, #0]
 8018da0:	687b      	ldr	r3, [r7, #4]
 8018da2:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8018da4:	68b8      	ldr	r0, [r7, #8]
 8018da6:	f7fd fa70 	bl	801628a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018dae:	2b00      	cmp	r3, #0
 8018db0:	d008      	beq.n	8018dc4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018db6:	691b      	ldr	r3, [r3, #16]
 8018db8:	685a      	ldr	r2, [r3, #4]
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8018dbe:	429a      	cmp	r2, r3
 8018dc0:	f43f af43 	beq.w	8018c4a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	8b5b      	ldrh	r3, [r3, #26]
 8018dc8:	f003 0301 	and.w	r3, r3, #1
 8018dcc:	2b00      	cmp	r3, #0
 8018dce:	d00e      	beq.n	8018dee <tcp_receive+0xbc2>
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	8b5b      	ldrh	r3, [r3, #26]
 8018dd4:	f023 0301 	bic.w	r3, r3, #1
 8018dd8:	b29a      	uxth	r2, r3
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	835a      	strh	r2, [r3, #26]
 8018dde:	687b      	ldr	r3, [r7, #4]
 8018de0:	8b5b      	ldrh	r3, [r3, #26]
 8018de2:	f043 0302 	orr.w	r3, r3, #2
 8018de6:	b29a      	uxth	r2, r3
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8018dec:	e187      	b.n	80190fe <tcp_receive+0xed2>
        tcp_ack(pcb);
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	8b5b      	ldrh	r3, [r3, #26]
 8018df2:	f043 0301 	orr.w	r3, r3, #1
 8018df6:	b29a      	uxth	r2, r3
 8018df8:	687b      	ldr	r3, [r7, #4]
 8018dfa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8018dfc:	e17f      	b.n	80190fe <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018e02:	2b00      	cmp	r3, #0
 8018e04:	d106      	bne.n	8018e14 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8018e06:	4848      	ldr	r0, [pc, #288]	@ (8018f28 <tcp_receive+0xcfc>)
 8018e08:	f7fd fa58 	bl	80162bc <tcp_seg_copy>
 8018e0c:	4602      	mov	r2, r0
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	675a      	str	r2, [r3, #116]	@ 0x74
 8018e12:	e16c      	b.n	80190ee <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8018e14:	2300      	movs	r3, #0
 8018e16:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018e1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018e1e:	e156      	b.n	80190ce <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8018e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018e22:	691b      	ldr	r3, [r3, #16]
 8018e24:	685a      	ldr	r2, [r3, #4]
 8018e26:	4b41      	ldr	r3, [pc, #260]	@ (8018f2c <tcp_receive+0xd00>)
 8018e28:	681b      	ldr	r3, [r3, #0]
 8018e2a:	429a      	cmp	r2, r3
 8018e2c:	d11d      	bne.n	8018e6a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8018e2e:	4b3e      	ldr	r3, [pc, #248]	@ (8018f28 <tcp_receive+0xcfc>)
 8018e30:	891a      	ldrh	r2, [r3, #8]
 8018e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018e34:	891b      	ldrh	r3, [r3, #8]
 8018e36:	429a      	cmp	r2, r3
 8018e38:	f240 814e 	bls.w	80190d8 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018e3c:	483a      	ldr	r0, [pc, #232]	@ (8018f28 <tcp_receive+0xcfc>)
 8018e3e:	f7fd fa3d 	bl	80162bc <tcp_seg_copy>
 8018e42:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8018e44:	697b      	ldr	r3, [r7, #20]
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	f000 8148 	beq.w	80190dc <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8018e4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018e4e:	2b00      	cmp	r3, #0
 8018e50:	d003      	beq.n	8018e5a <tcp_receive+0xc2e>
                    prev->next = cseg;
 8018e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018e54:	697a      	ldr	r2, [r7, #20]
 8018e56:	601a      	str	r2, [r3, #0]
 8018e58:	e002      	b.n	8018e60 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	697a      	ldr	r2, [r7, #20]
 8018e5e:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8018e60:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8018e62:	6978      	ldr	r0, [r7, #20]
 8018e64:	f7ff f8de 	bl	8018024 <tcp_oos_insert_segment>
                }
                break;
 8018e68:	e138      	b.n	80190dc <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8018e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018e6c:	2b00      	cmp	r3, #0
 8018e6e:	d117      	bne.n	8018ea0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8018e70:	4b2e      	ldr	r3, [pc, #184]	@ (8018f2c <tcp_receive+0xd00>)
 8018e72:	681a      	ldr	r2, [r3, #0]
 8018e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018e76:	691b      	ldr	r3, [r3, #16]
 8018e78:	685b      	ldr	r3, [r3, #4]
 8018e7a:	1ad3      	subs	r3, r2, r3
 8018e7c:	2b00      	cmp	r3, #0
 8018e7e:	da57      	bge.n	8018f30 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018e80:	4829      	ldr	r0, [pc, #164]	@ (8018f28 <tcp_receive+0xcfc>)
 8018e82:	f7fd fa1b 	bl	80162bc <tcp_seg_copy>
 8018e86:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8018e88:	69bb      	ldr	r3, [r7, #24]
 8018e8a:	2b00      	cmp	r3, #0
 8018e8c:	f000 8128 	beq.w	80190e0 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	69ba      	ldr	r2, [r7, #24]
 8018e94:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8018e96:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8018e98:	69b8      	ldr	r0, [r7, #24]
 8018e9a:	f7ff f8c3 	bl	8018024 <tcp_oos_insert_segment>
                  }
                  break;
 8018e9e:	e11f      	b.n	80190e0 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8018ea0:	4b22      	ldr	r3, [pc, #136]	@ (8018f2c <tcp_receive+0xd00>)
 8018ea2:	681a      	ldr	r2, [r3, #0]
 8018ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018ea6:	691b      	ldr	r3, [r3, #16]
 8018ea8:	685b      	ldr	r3, [r3, #4]
 8018eaa:	1ad3      	subs	r3, r2, r3
 8018eac:	3b01      	subs	r3, #1
 8018eae:	2b00      	cmp	r3, #0
 8018eb0:	db3e      	blt.n	8018f30 <tcp_receive+0xd04>
 8018eb2:	4b1e      	ldr	r3, [pc, #120]	@ (8018f2c <tcp_receive+0xd00>)
 8018eb4:	681a      	ldr	r2, [r3, #0]
 8018eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018eb8:	691b      	ldr	r3, [r3, #16]
 8018eba:	685b      	ldr	r3, [r3, #4]
 8018ebc:	1ad3      	subs	r3, r2, r3
 8018ebe:	3301      	adds	r3, #1
 8018ec0:	2b00      	cmp	r3, #0
 8018ec2:	dc35      	bgt.n	8018f30 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018ec4:	4818      	ldr	r0, [pc, #96]	@ (8018f28 <tcp_receive+0xcfc>)
 8018ec6:	f7fd f9f9 	bl	80162bc <tcp_seg_copy>
 8018eca:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8018ecc:	69fb      	ldr	r3, [r7, #28]
 8018ece:	2b00      	cmp	r3, #0
 8018ed0:	f000 8108 	beq.w	80190e4 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8018ed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018ed6:	691b      	ldr	r3, [r3, #16]
 8018ed8:	685b      	ldr	r3, [r3, #4]
 8018eda:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018edc:	8912      	ldrh	r2, [r2, #8]
 8018ede:	441a      	add	r2, r3
 8018ee0:	4b12      	ldr	r3, [pc, #72]	@ (8018f2c <tcp_receive+0xd00>)
 8018ee2:	681b      	ldr	r3, [r3, #0]
 8018ee4:	1ad3      	subs	r3, r2, r3
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	dd12      	ble.n	8018f10 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8018eea:	4b10      	ldr	r3, [pc, #64]	@ (8018f2c <tcp_receive+0xd00>)
 8018eec:	681b      	ldr	r3, [r3, #0]
 8018eee:	b29a      	uxth	r2, r3
 8018ef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018ef2:	691b      	ldr	r3, [r3, #16]
 8018ef4:	685b      	ldr	r3, [r3, #4]
 8018ef6:	b29b      	uxth	r3, r3
 8018ef8:	1ad3      	subs	r3, r2, r3
 8018efa:	b29a      	uxth	r2, r3
 8018efc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018efe:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8018f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018f02:	685a      	ldr	r2, [r3, #4]
 8018f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018f06:	891b      	ldrh	r3, [r3, #8]
 8018f08:	4619      	mov	r1, r3
 8018f0a:	4610      	mov	r0, r2
 8018f0c:	f7fb fc16 	bl	801473c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8018f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018f12:	69fa      	ldr	r2, [r7, #28]
 8018f14:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8018f16:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8018f18:	69f8      	ldr	r0, [r7, #28]
 8018f1a:	f7ff f883 	bl	8018024 <tcp_oos_insert_segment>
                  }
                  break;
 8018f1e:	e0e1      	b.n	80190e4 <tcp_receive+0xeb8>
 8018f20:	2002d4b8 	.word	0x2002d4b8
 8018f24:	2002d4b5 	.word	0x2002d4b5
 8018f28:	2002d484 	.word	0x2002d484
 8018f2c:	2002d4a8 	.word	0x2002d4a8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8018f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f32:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8018f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f36:	681b      	ldr	r3, [r3, #0]
 8018f38:	2b00      	cmp	r3, #0
 8018f3a:	f040 80c5 	bne.w	80190c8 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8018f3e:	4b7f      	ldr	r3, [pc, #508]	@ (801913c <tcp_receive+0xf10>)
 8018f40:	681a      	ldr	r2, [r3, #0]
 8018f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f44:	691b      	ldr	r3, [r3, #16]
 8018f46:	685b      	ldr	r3, [r3, #4]
 8018f48:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8018f4a:	2b00      	cmp	r3, #0
 8018f4c:	f340 80bc 	ble.w	80190c8 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8018f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f52:	691b      	ldr	r3, [r3, #16]
 8018f54:	899b      	ldrh	r3, [r3, #12]
 8018f56:	b29b      	uxth	r3, r3
 8018f58:	4618      	mov	r0, r3
 8018f5a:	f7f9 ff61 	bl	8012e20 <lwip_htons>
 8018f5e:	4603      	mov	r3, r0
 8018f60:	b2db      	uxtb	r3, r3
 8018f62:	f003 0301 	and.w	r3, r3, #1
 8018f66:	2b00      	cmp	r3, #0
 8018f68:	f040 80be 	bne.w	80190e8 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8018f6c:	4874      	ldr	r0, [pc, #464]	@ (8019140 <tcp_receive+0xf14>)
 8018f6e:	f7fd f9a5 	bl	80162bc <tcp_seg_copy>
 8018f72:	4602      	mov	r2, r0
 8018f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f76:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8018f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f7a:	681b      	ldr	r3, [r3, #0]
 8018f7c:	2b00      	cmp	r3, #0
 8018f7e:	f000 80b5 	beq.w	80190ec <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8018f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f84:	691b      	ldr	r3, [r3, #16]
 8018f86:	685b      	ldr	r3, [r3, #4]
 8018f88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018f8a:	8912      	ldrh	r2, [r2, #8]
 8018f8c:	441a      	add	r2, r3
 8018f8e:	4b6b      	ldr	r3, [pc, #428]	@ (801913c <tcp_receive+0xf10>)
 8018f90:	681b      	ldr	r3, [r3, #0]
 8018f92:	1ad3      	subs	r3, r2, r3
 8018f94:	2b00      	cmp	r3, #0
 8018f96:	dd12      	ble.n	8018fbe <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8018f98:	4b68      	ldr	r3, [pc, #416]	@ (801913c <tcp_receive+0xf10>)
 8018f9a:	681b      	ldr	r3, [r3, #0]
 8018f9c:	b29a      	uxth	r2, r3
 8018f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018fa0:	691b      	ldr	r3, [r3, #16]
 8018fa2:	685b      	ldr	r3, [r3, #4]
 8018fa4:	b29b      	uxth	r3, r3
 8018fa6:	1ad3      	subs	r3, r2, r3
 8018fa8:	b29a      	uxth	r2, r3
 8018faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018fac:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8018fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018fb0:	685a      	ldr	r2, [r3, #4]
 8018fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018fb4:	891b      	ldrh	r3, [r3, #8]
 8018fb6:	4619      	mov	r1, r3
 8018fb8:	4610      	mov	r0, r2
 8018fba:	f7fb fbbf 	bl	801473c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8018fbe:	4b61      	ldr	r3, [pc, #388]	@ (8019144 <tcp_receive+0xf18>)
 8018fc0:	881b      	ldrh	r3, [r3, #0]
 8018fc2:	461a      	mov	r2, r3
 8018fc4:	4b5d      	ldr	r3, [pc, #372]	@ (801913c <tcp_receive+0xf10>)
 8018fc6:	681b      	ldr	r3, [r3, #0]
 8018fc8:	441a      	add	r2, r3
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018fce:	6879      	ldr	r1, [r7, #4]
 8018fd0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8018fd2:	440b      	add	r3, r1
 8018fd4:	1ad3      	subs	r3, r2, r3
 8018fd6:	2b00      	cmp	r3, #0
 8018fd8:	f340 8088 	ble.w	80190ec <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8018fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018fde:	681b      	ldr	r3, [r3, #0]
 8018fe0:	691b      	ldr	r3, [r3, #16]
 8018fe2:	899b      	ldrh	r3, [r3, #12]
 8018fe4:	b29b      	uxth	r3, r3
 8018fe6:	4618      	mov	r0, r3
 8018fe8:	f7f9 ff1a 	bl	8012e20 <lwip_htons>
 8018fec:	4603      	mov	r3, r0
 8018fee:	b2db      	uxtb	r3, r3
 8018ff0:	f003 0301 	and.w	r3, r3, #1
 8018ff4:	2b00      	cmp	r3, #0
 8018ff6:	d021      	beq.n	801903c <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8018ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018ffa:	681b      	ldr	r3, [r3, #0]
 8018ffc:	691b      	ldr	r3, [r3, #16]
 8018ffe:	899b      	ldrh	r3, [r3, #12]
 8019000:	b29b      	uxth	r3, r3
 8019002:	b21b      	sxth	r3, r3
 8019004:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8019008:	b21c      	sxth	r4, r3
 801900a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801900c:	681b      	ldr	r3, [r3, #0]
 801900e:	691b      	ldr	r3, [r3, #16]
 8019010:	899b      	ldrh	r3, [r3, #12]
 8019012:	b29b      	uxth	r3, r3
 8019014:	4618      	mov	r0, r3
 8019016:	f7f9 ff03 	bl	8012e20 <lwip_htons>
 801901a:	4603      	mov	r3, r0
 801901c:	b2db      	uxtb	r3, r3
 801901e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8019022:	b29b      	uxth	r3, r3
 8019024:	4618      	mov	r0, r3
 8019026:	f7f9 fefb 	bl	8012e20 <lwip_htons>
 801902a:	4603      	mov	r3, r0
 801902c:	b21b      	sxth	r3, r3
 801902e:	4323      	orrs	r3, r4
 8019030:	b21a      	sxth	r2, r3
 8019032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019034:	681b      	ldr	r3, [r3, #0]
 8019036:	691b      	ldr	r3, [r3, #16]
 8019038:	b292      	uxth	r2, r2
 801903a:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019040:	b29a      	uxth	r2, r3
 8019042:	687b      	ldr	r3, [r7, #4]
 8019044:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8019046:	4413      	add	r3, r2
 8019048:	b299      	uxth	r1, r3
 801904a:	4b3c      	ldr	r3, [pc, #240]	@ (801913c <tcp_receive+0xf10>)
 801904c:	681b      	ldr	r3, [r3, #0]
 801904e:	b29a      	uxth	r2, r3
 8019050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019052:	681b      	ldr	r3, [r3, #0]
 8019054:	1a8a      	subs	r2, r1, r2
 8019056:	b292      	uxth	r2, r2
 8019058:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801905a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801905c:	681b      	ldr	r3, [r3, #0]
 801905e:	685a      	ldr	r2, [r3, #4]
 8019060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019062:	681b      	ldr	r3, [r3, #0]
 8019064:	891b      	ldrh	r3, [r3, #8]
 8019066:	4619      	mov	r1, r3
 8019068:	4610      	mov	r0, r2
 801906a:	f7fb fb67 	bl	801473c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801906e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019070:	681b      	ldr	r3, [r3, #0]
 8019072:	891c      	ldrh	r4, [r3, #8]
 8019074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019076:	681b      	ldr	r3, [r3, #0]
 8019078:	691b      	ldr	r3, [r3, #16]
 801907a:	899b      	ldrh	r3, [r3, #12]
 801907c:	b29b      	uxth	r3, r3
 801907e:	4618      	mov	r0, r3
 8019080:	f7f9 fece 	bl	8012e20 <lwip_htons>
 8019084:	4603      	mov	r3, r0
 8019086:	b2db      	uxtb	r3, r3
 8019088:	f003 0303 	and.w	r3, r3, #3
 801908c:	2b00      	cmp	r3, #0
 801908e:	d001      	beq.n	8019094 <tcp_receive+0xe68>
 8019090:	2301      	movs	r3, #1
 8019092:	e000      	b.n	8019096 <tcp_receive+0xe6a>
 8019094:	2300      	movs	r3, #0
 8019096:	4423      	add	r3, r4
 8019098:	b29a      	uxth	r2, r3
 801909a:	4b2a      	ldr	r3, [pc, #168]	@ (8019144 <tcp_receive+0xf18>)
 801909c:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801909e:	4b29      	ldr	r3, [pc, #164]	@ (8019144 <tcp_receive+0xf18>)
 80190a0:	881b      	ldrh	r3, [r3, #0]
 80190a2:	461a      	mov	r2, r3
 80190a4:	4b25      	ldr	r3, [pc, #148]	@ (801913c <tcp_receive+0xf10>)
 80190a6:	681b      	ldr	r3, [r3, #0]
 80190a8:	441a      	add	r2, r3
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80190ae:	6879      	ldr	r1, [r7, #4]
 80190b0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80190b2:	440b      	add	r3, r1
 80190b4:	429a      	cmp	r2, r3
 80190b6:	d019      	beq.n	80190ec <tcp_receive+0xec0>
 80190b8:	4b23      	ldr	r3, [pc, #140]	@ (8019148 <tcp_receive+0xf1c>)
 80190ba:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 80190be:	4923      	ldr	r1, [pc, #140]	@ (801914c <tcp_receive+0xf20>)
 80190c0:	4823      	ldr	r0, [pc, #140]	@ (8019150 <tcp_receive+0xf24>)
 80190c2:	f007 fb69 	bl	8020798 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80190c6:	e011      	b.n	80190ec <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80190c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80190ca:	681b      	ldr	r3, [r3, #0]
 80190cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80190ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80190d0:	2b00      	cmp	r3, #0
 80190d2:	f47f aea5 	bne.w	8018e20 <tcp_receive+0xbf4>
 80190d6:	e00a      	b.n	80190ee <tcp_receive+0xec2>
                break;
 80190d8:	bf00      	nop
 80190da:	e008      	b.n	80190ee <tcp_receive+0xec2>
                break;
 80190dc:	bf00      	nop
 80190de:	e006      	b.n	80190ee <tcp_receive+0xec2>
                  break;
 80190e0:	bf00      	nop
 80190e2:	e004      	b.n	80190ee <tcp_receive+0xec2>
                  break;
 80190e4:	bf00      	nop
 80190e6:	e002      	b.n	80190ee <tcp_receive+0xec2>
                  break;
 80190e8:	bf00      	nop
 80190ea:	e000      	b.n	80190ee <tcp_receive+0xec2>
                break;
 80190ec:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80190ee:	6878      	ldr	r0, [r7, #4]
 80190f0:	f001 ff44 	bl	801af7c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80190f4:	e003      	b.n	80190fe <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80190f6:	6878      	ldr	r0, [r7, #4]
 80190f8:	f001 ff40 	bl	801af7c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80190fc:	e01a      	b.n	8019134 <tcp_receive+0xf08>
 80190fe:	e019      	b.n	8019134 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8019100:	4b0e      	ldr	r3, [pc, #56]	@ (801913c <tcp_receive+0xf10>)
 8019102:	681a      	ldr	r2, [r3, #0]
 8019104:	687b      	ldr	r3, [r7, #4]
 8019106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019108:	1ad3      	subs	r3, r2, r3
 801910a:	2b00      	cmp	r3, #0
 801910c:	db0a      	blt.n	8019124 <tcp_receive+0xef8>
 801910e:	4b0b      	ldr	r3, [pc, #44]	@ (801913c <tcp_receive+0xf10>)
 8019110:	681a      	ldr	r2, [r3, #0]
 8019112:	687b      	ldr	r3, [r7, #4]
 8019114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019116:	6879      	ldr	r1, [r7, #4]
 8019118:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801911a:	440b      	add	r3, r1
 801911c:	1ad3      	subs	r3, r2, r3
 801911e:	3301      	adds	r3, #1
 8019120:	2b00      	cmp	r3, #0
 8019122:	dd07      	ble.n	8019134 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8019124:	687b      	ldr	r3, [r7, #4]
 8019126:	8b5b      	ldrh	r3, [r3, #26]
 8019128:	f043 0302 	orr.w	r3, r3, #2
 801912c:	b29a      	uxth	r2, r3
 801912e:	687b      	ldr	r3, [r7, #4]
 8019130:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8019132:	e7ff      	b.n	8019134 <tcp_receive+0xf08>
 8019134:	bf00      	nop
 8019136:	3750      	adds	r7, #80	@ 0x50
 8019138:	46bd      	mov	sp, r7
 801913a:	bdb0      	pop	{r4, r5, r7, pc}
 801913c:	2002d4a8 	.word	0x2002d4a8
 8019140:	2002d484 	.word	0x2002d484
 8019144:	2002d4b2 	.word	0x2002d4b2
 8019148:	08023ff8 	.word	0x08023ff8
 801914c:	080243a0 	.word	0x080243a0
 8019150:	08024044 	.word	0x08024044

08019154 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8019154:	b480      	push	{r7}
 8019156:	b083      	sub	sp, #12
 8019158:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801915a:	4b15      	ldr	r3, [pc, #84]	@ (80191b0 <tcp_get_next_optbyte+0x5c>)
 801915c:	881b      	ldrh	r3, [r3, #0]
 801915e:	1c5a      	adds	r2, r3, #1
 8019160:	b291      	uxth	r1, r2
 8019162:	4a13      	ldr	r2, [pc, #76]	@ (80191b0 <tcp_get_next_optbyte+0x5c>)
 8019164:	8011      	strh	r1, [r2, #0]
 8019166:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8019168:	4b12      	ldr	r3, [pc, #72]	@ (80191b4 <tcp_get_next_optbyte+0x60>)
 801916a:	681b      	ldr	r3, [r3, #0]
 801916c:	2b00      	cmp	r3, #0
 801916e:	d004      	beq.n	801917a <tcp_get_next_optbyte+0x26>
 8019170:	4b11      	ldr	r3, [pc, #68]	@ (80191b8 <tcp_get_next_optbyte+0x64>)
 8019172:	881b      	ldrh	r3, [r3, #0]
 8019174:	88fa      	ldrh	r2, [r7, #6]
 8019176:	429a      	cmp	r2, r3
 8019178:	d208      	bcs.n	801918c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801917a:	4b10      	ldr	r3, [pc, #64]	@ (80191bc <tcp_get_next_optbyte+0x68>)
 801917c:	681b      	ldr	r3, [r3, #0]
 801917e:	3314      	adds	r3, #20
 8019180:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8019182:	88fb      	ldrh	r3, [r7, #6]
 8019184:	683a      	ldr	r2, [r7, #0]
 8019186:	4413      	add	r3, r2
 8019188:	781b      	ldrb	r3, [r3, #0]
 801918a:	e00b      	b.n	80191a4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801918c:	88fb      	ldrh	r3, [r7, #6]
 801918e:	b2da      	uxtb	r2, r3
 8019190:	4b09      	ldr	r3, [pc, #36]	@ (80191b8 <tcp_get_next_optbyte+0x64>)
 8019192:	881b      	ldrh	r3, [r3, #0]
 8019194:	b2db      	uxtb	r3, r3
 8019196:	1ad3      	subs	r3, r2, r3
 8019198:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801919a:	4b06      	ldr	r3, [pc, #24]	@ (80191b4 <tcp_get_next_optbyte+0x60>)
 801919c:	681a      	ldr	r2, [r3, #0]
 801919e:	797b      	ldrb	r3, [r7, #5]
 80191a0:	4413      	add	r3, r2
 80191a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80191a4:	4618      	mov	r0, r3
 80191a6:	370c      	adds	r7, #12
 80191a8:	46bd      	mov	sp, r7
 80191aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191ae:	4770      	bx	lr
 80191b0:	2002d4a4 	.word	0x2002d4a4
 80191b4:	2002d4a0 	.word	0x2002d4a0
 80191b8:	2002d49e 	.word	0x2002d49e
 80191bc:	2002d498 	.word	0x2002d498

080191c0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80191c0:	b580      	push	{r7, lr}
 80191c2:	b084      	sub	sp, #16
 80191c4:	af00      	add	r7, sp, #0
 80191c6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	2b00      	cmp	r3, #0
 80191cc:	d106      	bne.n	80191dc <tcp_parseopt+0x1c>
 80191ce:	4b32      	ldr	r3, [pc, #200]	@ (8019298 <tcp_parseopt+0xd8>)
 80191d0:	f240 727d 	movw	r2, #1917	@ 0x77d
 80191d4:	4931      	ldr	r1, [pc, #196]	@ (801929c <tcp_parseopt+0xdc>)
 80191d6:	4832      	ldr	r0, [pc, #200]	@ (80192a0 <tcp_parseopt+0xe0>)
 80191d8:	f007 fade 	bl	8020798 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80191dc:	4b31      	ldr	r3, [pc, #196]	@ (80192a4 <tcp_parseopt+0xe4>)
 80191de:	881b      	ldrh	r3, [r3, #0]
 80191e0:	2b00      	cmp	r3, #0
 80191e2:	d056      	beq.n	8019292 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80191e4:	4b30      	ldr	r3, [pc, #192]	@ (80192a8 <tcp_parseopt+0xe8>)
 80191e6:	2200      	movs	r2, #0
 80191e8:	801a      	strh	r2, [r3, #0]
 80191ea:	e046      	b.n	801927a <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 80191ec:	f7ff ffb2 	bl	8019154 <tcp_get_next_optbyte>
 80191f0:	4603      	mov	r3, r0
 80191f2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80191f4:	7bfb      	ldrb	r3, [r7, #15]
 80191f6:	2b02      	cmp	r3, #2
 80191f8:	d006      	beq.n	8019208 <tcp_parseopt+0x48>
 80191fa:	2b02      	cmp	r3, #2
 80191fc:	dc2a      	bgt.n	8019254 <tcp_parseopt+0x94>
 80191fe:	2b00      	cmp	r3, #0
 8019200:	d042      	beq.n	8019288 <tcp_parseopt+0xc8>
 8019202:	2b01      	cmp	r3, #1
 8019204:	d038      	beq.n	8019278 <tcp_parseopt+0xb8>
 8019206:	e025      	b.n	8019254 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8019208:	f7ff ffa4 	bl	8019154 <tcp_get_next_optbyte>
 801920c:	4603      	mov	r3, r0
 801920e:	2b04      	cmp	r3, #4
 8019210:	d13c      	bne.n	801928c <tcp_parseopt+0xcc>
 8019212:	4b25      	ldr	r3, [pc, #148]	@ (80192a8 <tcp_parseopt+0xe8>)
 8019214:	881b      	ldrh	r3, [r3, #0]
 8019216:	3301      	adds	r3, #1
 8019218:	4a22      	ldr	r2, [pc, #136]	@ (80192a4 <tcp_parseopt+0xe4>)
 801921a:	8812      	ldrh	r2, [r2, #0]
 801921c:	4293      	cmp	r3, r2
 801921e:	da35      	bge.n	801928c <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8019220:	f7ff ff98 	bl	8019154 <tcp_get_next_optbyte>
 8019224:	4603      	mov	r3, r0
 8019226:	021b      	lsls	r3, r3, #8
 8019228:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801922a:	f7ff ff93 	bl	8019154 <tcp_get_next_optbyte>
 801922e:	4603      	mov	r3, r0
 8019230:	461a      	mov	r2, r3
 8019232:	89bb      	ldrh	r3, [r7, #12]
 8019234:	4313      	orrs	r3, r2
 8019236:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8019238:	89bb      	ldrh	r3, [r7, #12]
 801923a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801923e:	d804      	bhi.n	801924a <tcp_parseopt+0x8a>
 8019240:	89bb      	ldrh	r3, [r7, #12]
 8019242:	2b00      	cmp	r3, #0
 8019244:	d001      	beq.n	801924a <tcp_parseopt+0x8a>
 8019246:	89ba      	ldrh	r2, [r7, #12]
 8019248:	e001      	b.n	801924e <tcp_parseopt+0x8e>
 801924a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801924e:	687b      	ldr	r3, [r7, #4]
 8019250:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8019252:	e012      	b.n	801927a <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8019254:	f7ff ff7e 	bl	8019154 <tcp_get_next_optbyte>
 8019258:	4603      	mov	r3, r0
 801925a:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801925c:	7afb      	ldrb	r3, [r7, #11]
 801925e:	2b01      	cmp	r3, #1
 8019260:	d916      	bls.n	8019290 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8019262:	7afb      	ldrb	r3, [r7, #11]
 8019264:	b29a      	uxth	r2, r3
 8019266:	4b10      	ldr	r3, [pc, #64]	@ (80192a8 <tcp_parseopt+0xe8>)
 8019268:	881b      	ldrh	r3, [r3, #0]
 801926a:	4413      	add	r3, r2
 801926c:	b29b      	uxth	r3, r3
 801926e:	3b02      	subs	r3, #2
 8019270:	b29a      	uxth	r2, r3
 8019272:	4b0d      	ldr	r3, [pc, #52]	@ (80192a8 <tcp_parseopt+0xe8>)
 8019274:	801a      	strh	r2, [r3, #0]
 8019276:	e000      	b.n	801927a <tcp_parseopt+0xba>
          break;
 8019278:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801927a:	4b0b      	ldr	r3, [pc, #44]	@ (80192a8 <tcp_parseopt+0xe8>)
 801927c:	881a      	ldrh	r2, [r3, #0]
 801927e:	4b09      	ldr	r3, [pc, #36]	@ (80192a4 <tcp_parseopt+0xe4>)
 8019280:	881b      	ldrh	r3, [r3, #0]
 8019282:	429a      	cmp	r2, r3
 8019284:	d3b2      	bcc.n	80191ec <tcp_parseopt+0x2c>
 8019286:	e004      	b.n	8019292 <tcp_parseopt+0xd2>
          return;
 8019288:	bf00      	nop
 801928a:	e002      	b.n	8019292 <tcp_parseopt+0xd2>
            return;
 801928c:	bf00      	nop
 801928e:	e000      	b.n	8019292 <tcp_parseopt+0xd2>
            return;
 8019290:	bf00      	nop
      }
    }
  }
}
 8019292:	3710      	adds	r7, #16
 8019294:	46bd      	mov	sp, r7
 8019296:	bd80      	pop	{r7, pc}
 8019298:	08023ff8 	.word	0x08023ff8
 801929c:	0802445c 	.word	0x0802445c
 80192a0:	08024044 	.word	0x08024044
 80192a4:	2002d49c 	.word	0x2002d49c
 80192a8:	2002d4a4 	.word	0x2002d4a4

080192ac <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80192ac:	b480      	push	{r7}
 80192ae:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80192b0:	4b05      	ldr	r3, [pc, #20]	@ (80192c8 <tcp_trigger_input_pcb_close+0x1c>)
 80192b2:	781b      	ldrb	r3, [r3, #0]
 80192b4:	f043 0310 	orr.w	r3, r3, #16
 80192b8:	b2da      	uxtb	r2, r3
 80192ba:	4b03      	ldr	r3, [pc, #12]	@ (80192c8 <tcp_trigger_input_pcb_close+0x1c>)
 80192bc:	701a      	strb	r2, [r3, #0]
}
 80192be:	bf00      	nop
 80192c0:	46bd      	mov	sp, r7
 80192c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192c6:	4770      	bx	lr
 80192c8:	2002d4b5 	.word	0x2002d4b5

080192cc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80192cc:	b580      	push	{r7, lr}
 80192ce:	b084      	sub	sp, #16
 80192d0:	af00      	add	r7, sp, #0
 80192d2:	60f8      	str	r0, [r7, #12]
 80192d4:	60b9      	str	r1, [r7, #8]
 80192d6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80192d8:	68fb      	ldr	r3, [r7, #12]
 80192da:	2b00      	cmp	r3, #0
 80192dc:	d00a      	beq.n	80192f4 <tcp_route+0x28>
 80192de:	68fb      	ldr	r3, [r7, #12]
 80192e0:	7a1b      	ldrb	r3, [r3, #8]
 80192e2:	2b00      	cmp	r3, #0
 80192e4:	d006      	beq.n	80192f4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80192e6:	68fb      	ldr	r3, [r7, #12]
 80192e8:	7a1b      	ldrb	r3, [r3, #8]
 80192ea:	4618      	mov	r0, r3
 80192ec:	f7fa ffec 	bl	80142c8 <netif_get_by_index>
 80192f0:	4603      	mov	r3, r0
 80192f2:	e003      	b.n	80192fc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80192f4:	6878      	ldr	r0, [r7, #4]
 80192f6:	f004 fa4b 	bl	801d790 <ip4_route>
 80192fa:	4603      	mov	r3, r0
  }
}
 80192fc:	4618      	mov	r0, r3
 80192fe:	3710      	adds	r7, #16
 8019300:	46bd      	mov	sp, r7
 8019302:	bd80      	pop	{r7, pc}

08019304 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8019304:	b590      	push	{r4, r7, lr}
 8019306:	b087      	sub	sp, #28
 8019308:	af00      	add	r7, sp, #0
 801930a:	60f8      	str	r0, [r7, #12]
 801930c:	60b9      	str	r1, [r7, #8]
 801930e:	603b      	str	r3, [r7, #0]
 8019310:	4613      	mov	r3, r2
 8019312:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8019314:	68fb      	ldr	r3, [r7, #12]
 8019316:	2b00      	cmp	r3, #0
 8019318:	d105      	bne.n	8019326 <tcp_create_segment+0x22>
 801931a:	4b49      	ldr	r3, [pc, #292]	@ (8019440 <tcp_create_segment+0x13c>)
 801931c:	22a3      	movs	r2, #163	@ 0xa3
 801931e:	4949      	ldr	r1, [pc, #292]	@ (8019444 <tcp_create_segment+0x140>)
 8019320:	4849      	ldr	r0, [pc, #292]	@ (8019448 <tcp_create_segment+0x144>)
 8019322:	f007 fa39 	bl	8020798 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8019326:	68bb      	ldr	r3, [r7, #8]
 8019328:	2b00      	cmp	r3, #0
 801932a:	d105      	bne.n	8019338 <tcp_create_segment+0x34>
 801932c:	4b44      	ldr	r3, [pc, #272]	@ (8019440 <tcp_create_segment+0x13c>)
 801932e:	22a4      	movs	r2, #164	@ 0xa4
 8019330:	4946      	ldr	r1, [pc, #280]	@ (801944c <tcp_create_segment+0x148>)
 8019332:	4845      	ldr	r0, [pc, #276]	@ (8019448 <tcp_create_segment+0x144>)
 8019334:	f007 fa30 	bl	8020798 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019338:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801933c:	009b      	lsls	r3, r3, #2
 801933e:	b2db      	uxtb	r3, r3
 8019340:	f003 0304 	and.w	r3, r3, #4
 8019344:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8019346:	2003      	movs	r0, #3
 8019348:	f7fa fb36 	bl	80139b8 <memp_malloc>
 801934c:	6138      	str	r0, [r7, #16]
 801934e:	693b      	ldr	r3, [r7, #16]
 8019350:	2b00      	cmp	r3, #0
 8019352:	d104      	bne.n	801935e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8019354:	68b8      	ldr	r0, [r7, #8]
 8019356:	f7fb fb91 	bl	8014a7c <pbuf_free>
    return NULL;
 801935a:	2300      	movs	r3, #0
 801935c:	e06b      	b.n	8019436 <tcp_create_segment+0x132>
  }
  seg->flags = optflags;
 801935e:	693b      	ldr	r3, [r7, #16]
 8019360:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8019364:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 8019366:	693b      	ldr	r3, [r7, #16]
 8019368:	2200      	movs	r2, #0
 801936a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801936c:	693b      	ldr	r3, [r7, #16]
 801936e:	68ba      	ldr	r2, [r7, #8]
 8019370:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8019372:	68bb      	ldr	r3, [r7, #8]
 8019374:	891a      	ldrh	r2, [r3, #8]
 8019376:	7dfb      	ldrb	r3, [r7, #23]
 8019378:	b29b      	uxth	r3, r3
 801937a:	429a      	cmp	r2, r3
 801937c:	d205      	bcs.n	801938a <tcp_create_segment+0x86>
 801937e:	4b30      	ldr	r3, [pc, #192]	@ (8019440 <tcp_create_segment+0x13c>)
 8019380:	22b0      	movs	r2, #176	@ 0xb0
 8019382:	4933      	ldr	r1, [pc, #204]	@ (8019450 <tcp_create_segment+0x14c>)
 8019384:	4830      	ldr	r0, [pc, #192]	@ (8019448 <tcp_create_segment+0x144>)
 8019386:	f007 fa07 	bl	8020798 <iprintf>
  seg->len = p->tot_len - optlen;
 801938a:	68bb      	ldr	r3, [r7, #8]
 801938c:	891a      	ldrh	r2, [r3, #8]
 801938e:	7dfb      	ldrb	r3, [r7, #23]
 8019390:	b29b      	uxth	r3, r3
 8019392:	1ad3      	subs	r3, r2, r3
 8019394:	b29a      	uxth	r2, r3
 8019396:	693b      	ldr	r3, [r7, #16]
 8019398:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 801939a:	693b      	ldr	r3, [r7, #16]
 801939c:	2200      	movs	r2, #0
 801939e:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80193a0:	2114      	movs	r1, #20
 80193a2:	68b8      	ldr	r0, [r7, #8]
 80193a4:	f7fb facc 	bl	8014940 <pbuf_add_header>
 80193a8:	4603      	mov	r3, r0
 80193aa:	2b00      	cmp	r3, #0
 80193ac:	d00c      	beq.n	80193c8 <tcp_create_segment+0xc4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 80193ae:	4b29      	ldr	r3, [pc, #164]	@ (8019454 <tcp_create_segment+0x150>)
 80193b0:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 80193b4:	3301      	adds	r3, #1
 80193b6:	b29a      	uxth	r2, r3
 80193b8:	4b26      	ldr	r3, [pc, #152]	@ (8019454 <tcp_create_segment+0x150>)
 80193ba:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
    tcp_seg_free(seg);
 80193be:	6938      	ldr	r0, [r7, #16]
 80193c0:	f7fc ff63 	bl	801628a <tcp_seg_free>
    return NULL;
 80193c4:	2300      	movs	r3, #0
 80193c6:	e036      	b.n	8019436 <tcp_create_segment+0x132>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80193c8:	693b      	ldr	r3, [r7, #16]
 80193ca:	685b      	ldr	r3, [r3, #4]
 80193cc:	685a      	ldr	r2, [r3, #4]
 80193ce:	693b      	ldr	r3, [r7, #16]
 80193d0:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80193d2:	68fb      	ldr	r3, [r7, #12]
 80193d4:	8ada      	ldrh	r2, [r3, #22]
 80193d6:	693b      	ldr	r3, [r7, #16]
 80193d8:	691c      	ldr	r4, [r3, #16]
 80193da:	4610      	mov	r0, r2
 80193dc:	f7f9 fd20 	bl	8012e20 <lwip_htons>
 80193e0:	4603      	mov	r3, r0
 80193e2:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80193e4:	68fb      	ldr	r3, [r7, #12]
 80193e6:	8b1a      	ldrh	r2, [r3, #24]
 80193e8:	693b      	ldr	r3, [r7, #16]
 80193ea:	691c      	ldr	r4, [r3, #16]
 80193ec:	4610      	mov	r0, r2
 80193ee:	f7f9 fd17 	bl	8012e20 <lwip_htons>
 80193f2:	4603      	mov	r3, r0
 80193f4:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80193f6:	693b      	ldr	r3, [r7, #16]
 80193f8:	691c      	ldr	r4, [r3, #16]
 80193fa:	6838      	ldr	r0, [r7, #0]
 80193fc:	f7f9 fd26 	bl	8012e4c <lwip_htonl>
 8019400:	4603      	mov	r3, r0
 8019402:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8019404:	7dfb      	ldrb	r3, [r7, #23]
 8019406:	089b      	lsrs	r3, r3, #2
 8019408:	b2db      	uxtb	r3, r3
 801940a:	3305      	adds	r3, #5
 801940c:	b29b      	uxth	r3, r3
 801940e:	031b      	lsls	r3, r3, #12
 8019410:	b29a      	uxth	r2, r3
 8019412:	79fb      	ldrb	r3, [r7, #7]
 8019414:	b29b      	uxth	r3, r3
 8019416:	4313      	orrs	r3, r2
 8019418:	b29a      	uxth	r2, r3
 801941a:	693b      	ldr	r3, [r7, #16]
 801941c:	691c      	ldr	r4, [r3, #16]
 801941e:	4610      	mov	r0, r2
 8019420:	f7f9 fcfe 	bl	8012e20 <lwip_htons>
 8019424:	4603      	mov	r3, r0
 8019426:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8019428:	693b      	ldr	r3, [r7, #16]
 801942a:	691b      	ldr	r3, [r3, #16]
 801942c:	2200      	movs	r2, #0
 801942e:	749a      	strb	r2, [r3, #18]
 8019430:	2200      	movs	r2, #0
 8019432:	74da      	strb	r2, [r3, #19]
  return seg;
 8019434:	693b      	ldr	r3, [r7, #16]
}
 8019436:	4618      	mov	r0, r3
 8019438:	371c      	adds	r7, #28
 801943a:	46bd      	mov	sp, r7
 801943c:	bd90      	pop	{r4, r7, pc}
 801943e:	bf00      	nop
 8019440:	08024478 	.word	0x08024478
 8019444:	080244ac 	.word	0x080244ac
 8019448:	080244cc 	.word	0x080244cc
 801944c:	080244f4 	.word	0x080244f4
 8019450:	08024518 	.word	0x08024518
 8019454:	2002d36c 	.word	0x2002d36c

08019458 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8019458:	b580      	push	{r7, lr}
 801945a:	b086      	sub	sp, #24
 801945c:	af00      	add	r7, sp, #0
 801945e:	607b      	str	r3, [r7, #4]
 8019460:	4603      	mov	r3, r0
 8019462:	73fb      	strb	r3, [r7, #15]
 8019464:	460b      	mov	r3, r1
 8019466:	81bb      	strh	r3, [r7, #12]
 8019468:	4613      	mov	r3, r2
 801946a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801946c:	89bb      	ldrh	r3, [r7, #12]
 801946e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8019470:	687b      	ldr	r3, [r7, #4]
 8019472:	2b00      	cmp	r3, #0
 8019474:	d105      	bne.n	8019482 <tcp_pbuf_prealloc+0x2a>
 8019476:	4b30      	ldr	r3, [pc, #192]	@ (8019538 <tcp_pbuf_prealloc+0xe0>)
 8019478:	22e8      	movs	r2, #232	@ 0xe8
 801947a:	4930      	ldr	r1, [pc, #192]	@ (801953c <tcp_pbuf_prealloc+0xe4>)
 801947c:	4830      	ldr	r0, [pc, #192]	@ (8019540 <tcp_pbuf_prealloc+0xe8>)
 801947e:	f007 f98b 	bl	8020798 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8019482:	6a3b      	ldr	r3, [r7, #32]
 8019484:	2b00      	cmp	r3, #0
 8019486:	d105      	bne.n	8019494 <tcp_pbuf_prealloc+0x3c>
 8019488:	4b2b      	ldr	r3, [pc, #172]	@ (8019538 <tcp_pbuf_prealloc+0xe0>)
 801948a:	22e9      	movs	r2, #233	@ 0xe9
 801948c:	492d      	ldr	r1, [pc, #180]	@ (8019544 <tcp_pbuf_prealloc+0xec>)
 801948e:	482c      	ldr	r0, [pc, #176]	@ (8019540 <tcp_pbuf_prealloc+0xe8>)
 8019490:	f007 f982 	bl	8020798 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8019494:	89ba      	ldrh	r2, [r7, #12]
 8019496:	897b      	ldrh	r3, [r7, #10]
 8019498:	429a      	cmp	r2, r3
 801949a:	d221      	bcs.n	80194e0 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801949c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80194a0:	f003 0302 	and.w	r3, r3, #2
 80194a4:	2b00      	cmp	r3, #0
 80194a6:	d111      	bne.n	80194cc <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80194a8:	6a3b      	ldr	r3, [r7, #32]
 80194aa:	8b5b      	ldrh	r3, [r3, #26]
 80194ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80194b0:	2b00      	cmp	r3, #0
 80194b2:	d115      	bne.n	80194e0 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80194b4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80194b8:	2b00      	cmp	r3, #0
 80194ba:	d007      	beq.n	80194cc <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80194bc:	6a3b      	ldr	r3, [r7, #32]
 80194be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 80194c0:	2b00      	cmp	r3, #0
 80194c2:	d103      	bne.n	80194cc <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80194c4:	6a3b      	ldr	r3, [r7, #32]
 80194c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 80194c8:	2b00      	cmp	r3, #0
 80194ca:	d009      	beq.n	80194e0 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80194cc:	89bb      	ldrh	r3, [r7, #12]
 80194ce:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 80194d2:	f023 0203 	bic.w	r2, r3, #3
 80194d6:	897b      	ldrh	r3, [r7, #10]
 80194d8:	4293      	cmp	r3, r2
 80194da:	bf28      	it	cs
 80194dc:	4613      	movcs	r3, r2
 80194de:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80194e0:	8af9      	ldrh	r1, [r7, #22]
 80194e2:	7bfb      	ldrb	r3, [r7, #15]
 80194e4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80194e8:	4618      	mov	r0, r3
 80194ea:	f7fa ff9b 	bl	8014424 <pbuf_alloc>
 80194ee:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80194f0:	693b      	ldr	r3, [r7, #16]
 80194f2:	2b00      	cmp	r3, #0
 80194f4:	d101      	bne.n	80194fa <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80194f6:	2300      	movs	r3, #0
 80194f8:	e019      	b.n	801952e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80194fa:	693b      	ldr	r3, [r7, #16]
 80194fc:	681b      	ldr	r3, [r3, #0]
 80194fe:	2b00      	cmp	r3, #0
 8019500:	d006      	beq.n	8019510 <tcp_pbuf_prealloc+0xb8>
 8019502:	4b0d      	ldr	r3, [pc, #52]	@ (8019538 <tcp_pbuf_prealloc+0xe0>)
 8019504:	f240 120b 	movw	r2, #267	@ 0x10b
 8019508:	490f      	ldr	r1, [pc, #60]	@ (8019548 <tcp_pbuf_prealloc+0xf0>)
 801950a:	480d      	ldr	r0, [pc, #52]	@ (8019540 <tcp_pbuf_prealloc+0xe8>)
 801950c:	f007 f944 	bl	8020798 <iprintf>
  *oversize = p->len - length;
 8019510:	693b      	ldr	r3, [r7, #16]
 8019512:	895a      	ldrh	r2, [r3, #10]
 8019514:	89bb      	ldrh	r3, [r7, #12]
 8019516:	1ad3      	subs	r3, r2, r3
 8019518:	b29a      	uxth	r2, r3
 801951a:	687b      	ldr	r3, [r7, #4]
 801951c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801951e:	693b      	ldr	r3, [r7, #16]
 8019520:	89ba      	ldrh	r2, [r7, #12]
 8019522:	811a      	strh	r2, [r3, #8]
 8019524:	693b      	ldr	r3, [r7, #16]
 8019526:	891a      	ldrh	r2, [r3, #8]
 8019528:	693b      	ldr	r3, [r7, #16]
 801952a:	815a      	strh	r2, [r3, #10]
  return p;
 801952c:	693b      	ldr	r3, [r7, #16]
}
 801952e:	4618      	mov	r0, r3
 8019530:	3718      	adds	r7, #24
 8019532:	46bd      	mov	sp, r7
 8019534:	bd80      	pop	{r7, pc}
 8019536:	bf00      	nop
 8019538:	08024478 	.word	0x08024478
 801953c:	08024530 	.word	0x08024530
 8019540:	080244cc 	.word	0x080244cc
 8019544:	08024554 	.word	0x08024554
 8019548:	08024574 	.word	0x08024574

0801954c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801954c:	b580      	push	{r7, lr}
 801954e:	b082      	sub	sp, #8
 8019550:	af00      	add	r7, sp, #0
 8019552:	6078      	str	r0, [r7, #4]
 8019554:	460b      	mov	r3, r1
 8019556:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8019558:	687b      	ldr	r3, [r7, #4]
 801955a:	2b00      	cmp	r3, #0
 801955c:	d106      	bne.n	801956c <tcp_write_checks+0x20>
 801955e:	4b37      	ldr	r3, [pc, #220]	@ (801963c <tcp_write_checks+0xf0>)
 8019560:	f240 1233 	movw	r2, #307	@ 0x133
 8019564:	4936      	ldr	r1, [pc, #216]	@ (8019640 <tcp_write_checks+0xf4>)
 8019566:	4837      	ldr	r0, [pc, #220]	@ (8019644 <tcp_write_checks+0xf8>)
 8019568:	f007 f916 	bl	8020798 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801956c:	687b      	ldr	r3, [r7, #4]
 801956e:	7d1b      	ldrb	r3, [r3, #20]
 8019570:	2b04      	cmp	r3, #4
 8019572:	d00e      	beq.n	8019592 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8019574:	687b      	ldr	r3, [r7, #4]
 8019576:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8019578:	2b07      	cmp	r3, #7
 801957a:	d00a      	beq.n	8019592 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8019580:	2b02      	cmp	r3, #2
 8019582:	d006      	beq.n	8019592 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8019588:	2b03      	cmp	r3, #3
 801958a:	d002      	beq.n	8019592 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801958c:	f06f 030a 	mvn.w	r3, #10
 8019590:	e050      	b.n	8019634 <tcp_write_checks+0xe8>
  } else if (len == 0) {
 8019592:	887b      	ldrh	r3, [r7, #2]
 8019594:	2b00      	cmp	r3, #0
 8019596:	d101      	bne.n	801959c <tcp_write_checks+0x50>
    return ERR_OK;
 8019598:	2300      	movs	r3, #0
 801959a:	e04b      	b.n	8019634 <tcp_write_checks+0xe8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801959c:	687b      	ldr	r3, [r7, #4]
 801959e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80195a2:	887a      	ldrh	r2, [r7, #2]
 80195a4:	429a      	cmp	r2, r3
 80195a6:	d909      	bls.n	80195bc <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80195a8:	687b      	ldr	r3, [r7, #4]
 80195aa:	8b5b      	ldrh	r3, [r3, #26]
 80195ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80195b0:	b29a      	uxth	r2, r3
 80195b2:	687b      	ldr	r3, [r7, #4]
 80195b4:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80195b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80195ba:	e03b      	b.n	8019634 <tcp_write_checks+0xe8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80195bc:	687b      	ldr	r3, [r7, #4]
 80195be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80195c2:	2b08      	cmp	r3, #8
 80195c4:	d911      	bls.n	80195ea <tcp_write_checks+0x9e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 80195c6:	4b20      	ldr	r3, [pc, #128]	@ (8019648 <tcp_write_checks+0xfc>)
 80195c8:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 80195cc:	3301      	adds	r3, #1
 80195ce:	b29a      	uxth	r2, r3
 80195d0:	4b1d      	ldr	r3, [pc, #116]	@ (8019648 <tcp_write_checks+0xfc>)
 80195d2:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80195d6:	687b      	ldr	r3, [r7, #4]
 80195d8:	8b5b      	ldrh	r3, [r3, #26]
 80195da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80195de:	b29a      	uxth	r2, r3
 80195e0:	687b      	ldr	r3, [r7, #4]
 80195e2:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80195e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80195e8:	e024      	b.n	8019634 <tcp_write_checks+0xe8>
  }
  if (pcb->snd_queuelen != 0) {
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80195f0:	2b00      	cmp	r3, #0
 80195f2:	d00f      	beq.n	8019614 <tcp_write_checks+0xc8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80195f4:	687b      	ldr	r3, [r7, #4]
 80195f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80195f8:	2b00      	cmp	r3, #0
 80195fa:	d11a      	bne.n	8019632 <tcp_write_checks+0xe6>
 80195fc:	687b      	ldr	r3, [r7, #4]
 80195fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019600:	2b00      	cmp	r3, #0
 8019602:	d116      	bne.n	8019632 <tcp_write_checks+0xe6>
 8019604:	4b0d      	ldr	r3, [pc, #52]	@ (801963c <tcp_write_checks+0xf0>)
 8019606:	f240 1255 	movw	r2, #341	@ 0x155
 801960a:	4910      	ldr	r1, [pc, #64]	@ (801964c <tcp_write_checks+0x100>)
 801960c:	480d      	ldr	r0, [pc, #52]	@ (8019644 <tcp_write_checks+0xf8>)
 801960e:	f007 f8c3 	bl	8020798 <iprintf>
 8019612:	e00e      	b.n	8019632 <tcp_write_checks+0xe6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8019614:	687b      	ldr	r3, [r7, #4]
 8019616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019618:	2b00      	cmp	r3, #0
 801961a:	d103      	bne.n	8019624 <tcp_write_checks+0xd8>
 801961c:	687b      	ldr	r3, [r7, #4]
 801961e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019620:	2b00      	cmp	r3, #0
 8019622:	d006      	beq.n	8019632 <tcp_write_checks+0xe6>
 8019624:	4b05      	ldr	r3, [pc, #20]	@ (801963c <tcp_write_checks+0xf0>)
 8019626:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 801962a:	4909      	ldr	r1, [pc, #36]	@ (8019650 <tcp_write_checks+0x104>)
 801962c:	4805      	ldr	r0, [pc, #20]	@ (8019644 <tcp_write_checks+0xf8>)
 801962e:	f007 f8b3 	bl	8020798 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8019632:	2300      	movs	r3, #0
}
 8019634:	4618      	mov	r0, r3
 8019636:	3708      	adds	r7, #8
 8019638:	46bd      	mov	sp, r7
 801963a:	bd80      	pop	{r7, pc}
 801963c:	08024478 	.word	0x08024478
 8019640:	08024588 	.word	0x08024588
 8019644:	080244cc 	.word	0x080244cc
 8019648:	2002d36c 	.word	0x2002d36c
 801964c:	080245a8 	.word	0x080245a8
 8019650:	080245e4 	.word	0x080245e4

08019654 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8019654:	b590      	push	{r4, r7, lr}
 8019656:	b09d      	sub	sp, #116	@ 0x74
 8019658:	af04      	add	r7, sp, #16
 801965a:	60f8      	str	r0, [r7, #12]
 801965c:	60b9      	str	r1, [r7, #8]
 801965e:	4611      	mov	r1, r2
 8019660:	461a      	mov	r2, r3
 8019662:	460b      	mov	r3, r1
 8019664:	80fb      	strh	r3, [r7, #6]
 8019666:	4613      	mov	r3, r2
 8019668:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801966a:	2300      	movs	r3, #0
 801966c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801966e:	2300      	movs	r3, #0
 8019670:	643b      	str	r3, [r7, #64]	@ 0x40
 8019672:	2300      	movs	r3, #0
 8019674:	657b      	str	r3, [r7, #84]	@ 0x54
 8019676:	2300      	movs	r3, #0
 8019678:	653b      	str	r3, [r7, #80]	@ 0x50
 801967a:	2300      	movs	r3, #0
 801967c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  u16_t pos = 0; /* position in 'arg' data */
 801967e:	2300      	movs	r3, #0
 8019680:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8019684:	2300      	movs	r3, #0
 8019686:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801968a:	2300      	movs	r3, #0
 801968c:	82fb      	strh	r3, [r7, #22]
  u16_t oversize_used = 0;
 801968e:	2300      	movs	r3, #0
 8019690:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
 8019694:	2300      	movs	r3, #0
 8019696:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801969a:	2300      	movs	r3, #0
 801969c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80196a0:	68fb      	ldr	r3, [r7, #12]
 80196a2:	2b00      	cmp	r3, #0
 80196a4:	d109      	bne.n	80196ba <tcp_write+0x66>
 80196a6:	4b9c      	ldr	r3, [pc, #624]	@ (8019918 <tcp_write+0x2c4>)
 80196a8:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 80196ac:	499b      	ldr	r1, [pc, #620]	@ (801991c <tcp_write+0x2c8>)
 80196ae:	489c      	ldr	r0, [pc, #624]	@ (8019920 <tcp_write+0x2cc>)
 80196b0:	f007 f872 	bl	8020798 <iprintf>
 80196b4:	f06f 030f 	mvn.w	r3, #15
 80196b8:	e381      	b.n	8019dbe <tcp_write+0x76a>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80196ba:	68fb      	ldr	r3, [r7, #12]
 80196bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80196c0:	085b      	lsrs	r3, r3, #1
 80196c2:	b29a      	uxth	r2, r3
 80196c4:	68fb      	ldr	r3, [r7, #12]
 80196c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80196c8:	4293      	cmp	r3, r2
 80196ca:	bf28      	it	cs
 80196cc:	4613      	movcs	r3, r2
 80196ce:	853b      	strh	r3, [r7, #40]	@ 0x28
  mss_local = mss_local ? mss_local : pcb->mss;
 80196d0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80196d2:	2b00      	cmp	r3, #0
 80196d4:	d102      	bne.n	80196dc <tcp_write+0x88>
 80196d6:	68fb      	ldr	r3, [r7, #12]
 80196d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80196da:	e000      	b.n	80196de <tcp_write+0x8a>
 80196dc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80196de:	853b      	strh	r3, [r7, #40]	@ 0x28
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80196e0:	68bb      	ldr	r3, [r7, #8]
 80196e2:	2b00      	cmp	r3, #0
 80196e4:	d109      	bne.n	80196fa <tcp_write+0xa6>
 80196e6:	4b8c      	ldr	r3, [pc, #560]	@ (8019918 <tcp_write+0x2c4>)
 80196e8:	f240 12ad 	movw	r2, #429	@ 0x1ad
 80196ec:	498d      	ldr	r1, [pc, #564]	@ (8019924 <tcp_write+0x2d0>)
 80196ee:	488c      	ldr	r0, [pc, #560]	@ (8019920 <tcp_write+0x2cc>)
 80196f0:	f007 f852 	bl	8020798 <iprintf>
 80196f4:	f06f 030f 	mvn.w	r3, #15
 80196f8:	e361      	b.n	8019dbe <tcp_write+0x76a>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80196fa:	88fb      	ldrh	r3, [r7, #6]
 80196fc:	4619      	mov	r1, r3
 80196fe:	68f8      	ldr	r0, [r7, #12]
 8019700:	f7ff ff24 	bl	801954c <tcp_write_checks>
 8019704:	4603      	mov	r3, r0
 8019706:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (err != ERR_OK) {
 801970a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801970e:	2b00      	cmp	r3, #0
 8019710:	d002      	beq.n	8019718 <tcp_write+0xc4>
    return err;
 8019712:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8019716:	e352      	b.n	8019dbe <tcp_write+0x76a>
  }
  queuelen = pcb->snd_queuelen;
 8019718:	68fb      	ldr	r3, [r7, #12]
 801971a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801971e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019722:	2300      	movs	r3, #0
 8019724:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8019728:	68fb      	ldr	r3, [r7, #12]
 801972a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801972c:	2b00      	cmp	r3, #0
 801972e:	f000 8127 	beq.w	8019980 <tcp_write+0x32c>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019732:	68fb      	ldr	r3, [r7, #12]
 8019734:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019736:	643b      	str	r3, [r7, #64]	@ 0x40
 8019738:	e002      	b.n	8019740 <tcp_write+0xec>
         last_unsent = last_unsent->next);
 801973a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801973c:	681b      	ldr	r3, [r3, #0]
 801973e:	643b      	str	r3, [r7, #64]	@ 0x40
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019740:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019742:	681b      	ldr	r3, [r3, #0]
 8019744:	2b00      	cmp	r3, #0
 8019746:	d1f8      	bne.n	801973a <tcp_write+0xe6>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8019748:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801974a:	7b1b      	ldrb	r3, [r3, #12]
 801974c:	009b      	lsls	r3, r3, #2
 801974e:	b29b      	uxth	r3, r3
 8019750:	f003 0304 	and.w	r3, r3, #4
 8019754:	84bb      	strh	r3, [r7, #36]	@ 0x24
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8019756:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8019758:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801975a:	891b      	ldrh	r3, [r3, #8]
 801975c:	4619      	mov	r1, r3
 801975e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019760:	440b      	add	r3, r1
 8019762:	429a      	cmp	r2, r3
 8019764:	da06      	bge.n	8019774 <tcp_write+0x120>
 8019766:	4b6c      	ldr	r3, [pc, #432]	@ (8019918 <tcp_write+0x2c4>)
 8019768:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801976c:	496e      	ldr	r1, [pc, #440]	@ (8019928 <tcp_write+0x2d4>)
 801976e:	486c      	ldr	r0, [pc, #432]	@ (8019920 <tcp_write+0x2cc>)
 8019770:	f007 f812 	bl	8020798 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8019774:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019776:	891a      	ldrh	r2, [r3, #8]
 8019778:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801977a:	4413      	add	r3, r2
 801977c:	b29b      	uxth	r3, r3
 801977e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8019780:	1ad3      	subs	r3, r2, r3
 8019782:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
     * function.
     */
#if TCP_OVERSIZE
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 8019786:	68fb      	ldr	r3, [r7, #12]
 8019788:	f8b3 2068 	ldrh.w	r2, [r3, #104]	@ 0x68
 801978c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801978e:	895b      	ldrh	r3, [r3, #10]
 8019790:	429a      	cmp	r2, r3
 8019792:	d006      	beq.n	80197a2 <tcp_write+0x14e>
 8019794:	4b60      	ldr	r3, [pc, #384]	@ (8019918 <tcp_write+0x2c4>)
 8019796:	f240 12f3 	movw	r2, #499	@ 0x1f3
 801979a:	4964      	ldr	r1, [pc, #400]	@ (801992c <tcp_write+0x2d8>)
 801979c:	4860      	ldr	r0, [pc, #384]	@ (8019920 <tcp_write+0x2cc>)
 801979e:	f006 fffb 	bl	8020798 <iprintf>
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80197a2:	68fb      	ldr	r3, [r7, #12]
 80197a4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80197a8:	82fb      	strh	r3, [r7, #22]
    if (oversize > 0) {
 80197aa:	8afb      	ldrh	r3, [r7, #22]
 80197ac:	2b00      	cmp	r3, #0
 80197ae:	d02e      	beq.n	801980e <tcp_write+0x1ba>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80197b0:	8afb      	ldrh	r3, [r7, #22]
 80197b2:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 80197b6:	429a      	cmp	r2, r3
 80197b8:	d206      	bcs.n	80197c8 <tcp_write+0x174>
 80197ba:	4b57      	ldr	r3, [pc, #348]	@ (8019918 <tcp_write+0x2c4>)
 80197bc:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 80197c0:	495b      	ldr	r1, [pc, #364]	@ (8019930 <tcp_write+0x2dc>)
 80197c2:	4857      	ldr	r0, [pc, #348]	@ (8019920 <tcp_write+0x2cc>)
 80197c4:	f006 ffe8 	bl	8020798 <iprintf>
      seg = last_unsent;
 80197c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80197ca:	657b      	str	r3, [r7, #84]	@ 0x54
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80197cc:	8afb      	ldrh	r3, [r7, #22]
 80197ce:	88fa      	ldrh	r2, [r7, #6]
 80197d0:	4293      	cmp	r3, r2
 80197d2:	bf28      	it	cs
 80197d4:	4613      	movcs	r3, r2
 80197d6:	b29b      	uxth	r3, r3
 80197d8:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 80197dc:	4293      	cmp	r3, r2
 80197de:	bf28      	it	cs
 80197e0:	4613      	movcs	r3, r2
 80197e2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      pos += oversize_used;
 80197e6:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 80197ea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80197ee:	4413      	add	r3, r2
 80197f0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
      oversize -= oversize_used;
 80197f4:	8afa      	ldrh	r2, [r7, #22]
 80197f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80197fa:	1ad3      	subs	r3, r2, r3
 80197fc:	b29b      	uxth	r3, r3
 80197fe:	82fb      	strh	r3, [r7, #22]
      space -= oversize_used;
 8019800:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8019804:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8019808:	1ad3      	subs	r3, r2, r3
 801980a:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801980e:	8afb      	ldrh	r3, [r7, #22]
 8019810:	2b00      	cmp	r3, #0
 8019812:	d00b      	beq.n	801982c <tcp_write+0x1d8>
 8019814:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8019818:	88fb      	ldrh	r3, [r7, #6]
 801981a:	429a      	cmp	r2, r3
 801981c:	d006      	beq.n	801982c <tcp_write+0x1d8>
 801981e:	4b3e      	ldr	r3, [pc, #248]	@ (8019918 <tcp_write+0x2c4>)
 8019820:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019824:	4943      	ldr	r1, [pc, #268]	@ (8019934 <tcp_write+0x2e0>)
 8019826:	483e      	ldr	r0, [pc, #248]	@ (8019920 <tcp_write+0x2cc>)
 8019828:	f006 ffb6 	bl	8020798 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801982c:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8019830:	88fb      	ldrh	r3, [r7, #6]
 8019832:	429a      	cmp	r2, r3
 8019834:	f080 8172 	bcs.w	8019b1c <tcp_write+0x4c8>
 8019838:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 801983c:	2b00      	cmp	r3, #0
 801983e:	f000 816d 	beq.w	8019b1c <tcp_write+0x4c8>
 8019842:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019844:	891b      	ldrh	r3, [r3, #8]
 8019846:	2b00      	cmp	r3, #0
 8019848:	f000 8168 	beq.w	8019b1c <tcp_write+0x4c8>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801984c:	88fa      	ldrh	r2, [r7, #6]
 801984e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8019852:	1ad2      	subs	r2, r2, r3
 8019854:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8019858:	4293      	cmp	r3, r2
 801985a:	bfa8      	it	ge
 801985c:	4613      	movge	r3, r2
 801985e:	847b      	strh	r3, [r7, #34]	@ 0x22
      seg = last_unsent;
 8019860:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019862:	657b      	str	r3, [r7, #84]	@ 0x54

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8019864:	797b      	ldrb	r3, [r7, #5]
 8019866:	f003 0301 	and.w	r3, r3, #1
 801986a:	2b00      	cmp	r3, #0
 801986c:	d02b      	beq.n	80198c6 <tcp_write+0x272>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801986e:	f107 0016 	add.w	r0, r7, #22
 8019872:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8019876:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8019878:	2301      	movs	r3, #1
 801987a:	9302      	str	r3, [sp, #8]
 801987c:	797b      	ldrb	r3, [r7, #5]
 801987e:	9301      	str	r3, [sp, #4]
 8019880:	68fb      	ldr	r3, [r7, #12]
 8019882:	9300      	str	r3, [sp, #0]
 8019884:	4603      	mov	r3, r0
 8019886:	2000      	movs	r0, #0
 8019888:	f7ff fde6 	bl	8019458 <tcp_pbuf_prealloc>
 801988c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 801988e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019890:	2b00      	cmp	r3, #0
 8019892:	f000 825a 	beq.w	8019d4a <tcp_write+0x6f6>
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
 8019896:	8afb      	ldrh	r3, [r7, #22]
 8019898:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801989c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801989e:	6858      	ldr	r0, [r3, #4]
 80198a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80198a4:	68ba      	ldr	r2, [r7, #8]
 80198a6:	4413      	add	r3, r2
 80198a8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80198aa:	4619      	mov	r1, r3
 80198ac:	f007 f9a7 	bl	8020bfe <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80198b0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80198b2:	f7fb f989 	bl	8014bc8 <pbuf_clen>
 80198b6:	4603      	mov	r3, r0
 80198b8:	461a      	mov	r2, r3
 80198ba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80198be:	4413      	add	r3, r2
 80198c0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80198c4:	e055      	b.n	8019972 <tcp_write+0x31e>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80198c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80198c8:	685b      	ldr	r3, [r3, #4]
 80198ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80198cc:	e002      	b.n	80198d4 <tcp_write+0x280>
 80198ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80198d0:	681b      	ldr	r3, [r3, #0]
 80198d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80198d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80198d6:	681b      	ldr	r3, [r3, #0]
 80198d8:	2b00      	cmp	r3, #0
 80198da:	d1f8      	bne.n	80198ce <tcp_write+0x27a>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80198dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80198de:	7b1b      	ldrb	r3, [r3, #12]
 80198e0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80198e4:	2b00      	cmp	r3, #0
 80198e6:	d129      	bne.n	801993c <tcp_write+0x2e8>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80198e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80198ea:	685b      	ldr	r3, [r3, #4]
 80198ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80198ee:	8952      	ldrh	r2, [r2, #10]
 80198f0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80198f2:	68ba      	ldr	r2, [r7, #8]
 80198f4:	429a      	cmp	r2, r3
 80198f6:	d121      	bne.n	801993c <tcp_write+0x2e8>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80198f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80198fc:	2b00      	cmp	r3, #0
 80198fe:	d006      	beq.n	801990e <tcp_write+0x2ba>
 8019900:	4b05      	ldr	r3, [pc, #20]	@ (8019918 <tcp_write+0x2c4>)
 8019902:	f240 2231 	movw	r2, #561	@ 0x231
 8019906:	490c      	ldr	r1, [pc, #48]	@ (8019938 <tcp_write+0x2e4>)
 8019908:	4805      	ldr	r0, [pc, #20]	@ (8019920 <tcp_write+0x2cc>)
 801990a:	f006 ff45 	bl	8020798 <iprintf>
          extendlen = seglen;
 801990e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019910:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8019914:	e02d      	b.n	8019972 <tcp_write+0x31e>
 8019916:	bf00      	nop
 8019918:	08024478 	.word	0x08024478
 801991c:	08024618 	.word	0x08024618
 8019920:	080244cc 	.word	0x080244cc
 8019924:	08024630 	.word	0x08024630
 8019928:	08024664 	.word	0x08024664
 801992c:	0802467c 	.word	0x0802467c
 8019930:	080246ac 	.word	0x080246ac
 8019934:	080246cc 	.word	0x080246cc
 8019938:	080246ec 	.word	0x080246ec
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801993c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801993e:	2201      	movs	r2, #1
 8019940:	4619      	mov	r1, r3
 8019942:	2000      	movs	r0, #0
 8019944:	f7fa fd6e 	bl	8014424 <pbuf_alloc>
 8019948:	63f8      	str	r0, [r7, #60]	@ 0x3c
 801994a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801994c:	2b00      	cmp	r3, #0
 801994e:	f000 81fe 	beq.w	8019d4e <tcp_write+0x6fa>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8019952:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8019956:	68ba      	ldr	r2, [r7, #8]
 8019958:	441a      	add	r2, r3
 801995a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801995c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801995e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8019960:	f7fb f932 	bl	8014bc8 <pbuf_clen>
 8019964:	4603      	mov	r3, r0
 8019966:	461a      	mov	r2, r3
 8019968:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 801996c:	4413      	add	r3, r2
 801996e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8019972:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8019976:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019978:	4413      	add	r3, r2
 801997a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 801997e:	e0cd      	b.n	8019b1c <tcp_write+0x4c8>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8019980:	68fb      	ldr	r3, [r7, #12]
 8019982:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8019986:	2b00      	cmp	r3, #0
 8019988:	f000 80c8 	beq.w	8019b1c <tcp_write+0x4c8>
 801998c:	4b72      	ldr	r3, [pc, #456]	@ (8019b58 <tcp_write+0x504>)
 801998e:	f240 224a 	movw	r2, #586	@ 0x24a
 8019992:	4972      	ldr	r1, [pc, #456]	@ (8019b5c <tcp_write+0x508>)
 8019994:	4872      	ldr	r0, [pc, #456]	@ (8019b60 <tcp_write+0x50c>)
 8019996:	f006 feff 	bl	8020798 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801999a:	e0bf      	b.n	8019b1c <tcp_write+0x4c8>
    struct pbuf *p;
    u16_t left = len - pos;
 801999c:	88fa      	ldrh	r2, [r7, #6]
 801999e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80199a2:	1ad3      	subs	r3, r2, r3
 80199a4:	843b      	strh	r3, [r7, #32]
    u16_t max_len = mss_local - optlen;
 80199a6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80199aa:	b29b      	uxth	r3, r3
 80199ac:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80199ae:	1ad3      	subs	r3, r2, r3
 80199b0:	83fb      	strh	r3, [r7, #30]
    u16_t seglen = LWIP_MIN(left, max_len);
 80199b2:	8bfa      	ldrh	r2, [r7, #30]
 80199b4:	8c3b      	ldrh	r3, [r7, #32]
 80199b6:	4293      	cmp	r3, r2
 80199b8:	bf28      	it	cs
 80199ba:	4613      	movcs	r3, r2
 80199bc:	83bb      	strh	r3, [r7, #28]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80199be:	797b      	ldrb	r3, [r7, #5]
 80199c0:	f003 0301 	and.w	r3, r3, #1
 80199c4:	2b00      	cmp	r3, #0
 80199c6:	d036      	beq.n	8019a36 <tcp_write+0x3e2>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80199c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80199cc:	b29a      	uxth	r2, r3
 80199ce:	8bbb      	ldrh	r3, [r7, #28]
 80199d0:	4413      	add	r3, r2
 80199d2:	b299      	uxth	r1, r3
 80199d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80199d6:	2b00      	cmp	r3, #0
 80199d8:	bf0c      	ite	eq
 80199da:	2301      	moveq	r3, #1
 80199dc:	2300      	movne	r3, #0
 80199de:	b2db      	uxtb	r3, r3
 80199e0:	f107 0016 	add.w	r0, r7, #22
 80199e4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80199e6:	9302      	str	r3, [sp, #8]
 80199e8:	797b      	ldrb	r3, [r7, #5]
 80199ea:	9301      	str	r3, [sp, #4]
 80199ec:	68fb      	ldr	r3, [r7, #12]
 80199ee:	9300      	str	r3, [sp, #0]
 80199f0:	4603      	mov	r3, r0
 80199f2:	2036      	movs	r0, #54	@ 0x36
 80199f4:	f7ff fd30 	bl	8019458 <tcp_pbuf_prealloc>
 80199f8:	6378      	str	r0, [r7, #52]	@ 0x34
 80199fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80199fc:	2b00      	cmp	r3, #0
 80199fe:	f000 81a8 	beq.w	8019d52 <tcp_write+0x6fe>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8019a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019a04:	895b      	ldrh	r3, [r3, #10]
 8019a06:	8bba      	ldrh	r2, [r7, #28]
 8019a08:	429a      	cmp	r2, r3
 8019a0a:	d906      	bls.n	8019a1a <tcp_write+0x3c6>
 8019a0c:	4b52      	ldr	r3, [pc, #328]	@ (8019b58 <tcp_write+0x504>)
 8019a0e:	f240 2266 	movw	r2, #614	@ 0x266
 8019a12:	4954      	ldr	r1, [pc, #336]	@ (8019b64 <tcp_write+0x510>)
 8019a14:	4852      	ldr	r0, [pc, #328]	@ (8019b60 <tcp_write+0x50c>)
 8019a16:	f006 febf 	bl	8020798 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8019a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019a1c:	685a      	ldr	r2, [r3, #4]
 8019a1e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019a22:	18d0      	adds	r0, r2, r3
 8019a24:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8019a28:	68ba      	ldr	r2, [r7, #8]
 8019a2a:	4413      	add	r3, r2
 8019a2c:	8bba      	ldrh	r2, [r7, #28]
 8019a2e:	4619      	mov	r1, r3
 8019a30:	f007 f8e5 	bl	8020bfe <memcpy>
 8019a34:	e02f      	b.n	8019a96 <tcp_write+0x442>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8019a36:	8afb      	ldrh	r3, [r7, #22]
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	d006      	beq.n	8019a4a <tcp_write+0x3f6>
 8019a3c:	4b46      	ldr	r3, [pc, #280]	@ (8019b58 <tcp_write+0x504>)
 8019a3e:	f240 2271 	movw	r2, #625	@ 0x271
 8019a42:	4949      	ldr	r1, [pc, #292]	@ (8019b68 <tcp_write+0x514>)
 8019a44:	4846      	ldr	r0, [pc, #280]	@ (8019b60 <tcp_write+0x50c>)
 8019a46:	f006 fea7 	bl	8020798 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8019a4a:	8bbb      	ldrh	r3, [r7, #28]
 8019a4c:	2201      	movs	r2, #1
 8019a4e:	4619      	mov	r1, r3
 8019a50:	2036      	movs	r0, #54	@ 0x36
 8019a52:	f7fa fce7 	bl	8014424 <pbuf_alloc>
 8019a56:	61b8      	str	r0, [r7, #24]
 8019a58:	69bb      	ldr	r3, [r7, #24]
 8019a5a:	2b00      	cmp	r3, #0
 8019a5c:	f000 817b 	beq.w	8019d56 <tcp_write+0x702>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8019a60:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8019a64:	68ba      	ldr	r2, [r7, #8]
 8019a66:	441a      	add	r2, r3
 8019a68:	69bb      	ldr	r3, [r7, #24]
 8019a6a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8019a6c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019a70:	b29b      	uxth	r3, r3
 8019a72:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019a76:	4619      	mov	r1, r3
 8019a78:	2036      	movs	r0, #54	@ 0x36
 8019a7a:	f7fa fcd3 	bl	8014424 <pbuf_alloc>
 8019a7e:	6378      	str	r0, [r7, #52]	@ 0x34
 8019a80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019a82:	2b00      	cmp	r3, #0
 8019a84:	d103      	bne.n	8019a8e <tcp_write+0x43a>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8019a86:	69b8      	ldr	r0, [r7, #24]
 8019a88:	f7fa fff8 	bl	8014a7c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8019a8c:	e166      	b.n	8019d5c <tcp_write+0x708>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8019a8e:	69b9      	ldr	r1, [r7, #24]
 8019a90:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8019a92:	f7fb f8d9 	bl	8014c48 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8019a96:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8019a98:	f7fb f896 	bl	8014bc8 <pbuf_clen>
 8019a9c:	4603      	mov	r3, r0
 8019a9e:	461a      	mov	r2, r3
 8019aa0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8019aa4:	4413      	add	r3, r2
 8019aa6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8019aaa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8019aae:	2b09      	cmp	r3, #9
 8019ab0:	d903      	bls.n	8019aba <tcp_write+0x466>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8019ab2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8019ab4:	f7fa ffe2 	bl	8014a7c <pbuf_free>
      goto memerr;
 8019ab8:	e150      	b.n	8019d5c <tcp_write+0x708>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8019aba:	68fb      	ldr	r3, [r7, #12]
 8019abc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8019abe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8019ac2:	441a      	add	r2, r3
 8019ac4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8019ac8:	9300      	str	r3, [sp, #0]
 8019aca:	4613      	mov	r3, r2
 8019acc:	2200      	movs	r2, #0
 8019ace:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8019ad0:	68f8      	ldr	r0, [r7, #12]
 8019ad2:	f7ff fc17 	bl	8019304 <tcp_create_segment>
 8019ad6:	6578      	str	r0, [r7, #84]	@ 0x54
 8019ad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019ada:	2b00      	cmp	r3, #0
 8019adc:	f000 813d 	beq.w	8019d5a <tcp_write+0x706>
      goto memerr;
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = oversize;
 8019ae0:	8afa      	ldrh	r2, [r7, #22]
 8019ae2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019ae4:	815a      	strh	r2, [r3, #10]
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8019ae6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019ae8:	2b00      	cmp	r3, #0
 8019aea:	d102      	bne.n	8019af2 <tcp_write+0x49e>
      queue = seg;
 8019aec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019aee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8019af0:	e00c      	b.n	8019b0c <tcp_write+0x4b8>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8019af2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019af4:	2b00      	cmp	r3, #0
 8019af6:	d106      	bne.n	8019b06 <tcp_write+0x4b2>
 8019af8:	4b17      	ldr	r3, [pc, #92]	@ (8019b58 <tcp_write+0x504>)
 8019afa:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8019afe:	491b      	ldr	r1, [pc, #108]	@ (8019b6c <tcp_write+0x518>)
 8019b00:	4817      	ldr	r0, [pc, #92]	@ (8019b60 <tcp_write+0x50c>)
 8019b02:	f006 fe49 	bl	8020798 <iprintf>
      prev_seg->next = seg;
 8019b06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019b08:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8019b0a:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8019b0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019b0e:	653b      	str	r3, [r7, #80]	@ 0x50

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8019b10:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8019b14:	8bbb      	ldrh	r3, [r7, #28]
 8019b16:	4413      	add	r3, r2
 8019b18:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
  while (pos < len) {
 8019b1c:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8019b20:	88fb      	ldrh	r3, [r7, #6]
 8019b22:	429a      	cmp	r2, r3
 8019b24:	f4ff af3a 	bcc.w	801999c <tcp_write+0x348>
  /*
   * All three segmentation phases were successful. We can commit the
   * transaction.
   */
#if TCP_OVERSIZE_DBGCHECK
  if ((last_unsent != NULL) && (oversize_add != 0)) {
 8019b28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019b2a:	2b00      	cmp	r3, #0
 8019b2c:	d00b      	beq.n	8019b46 <tcp_write+0x4f2>
 8019b2e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8019b32:	2b00      	cmp	r3, #0
 8019b34:	d007      	beq.n	8019b46 <tcp_write+0x4f2>
    last_unsent->oversize_left += oversize_add;
 8019b36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019b38:	895a      	ldrh	r2, [r3, #10]
 8019b3a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8019b3e:	4413      	add	r3, r2
 8019b40:	b29a      	uxth	r2, r3
 8019b42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019b44:	815a      	strh	r2, [r3, #10]
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8019b46:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8019b4a:	2b00      	cmp	r3, #0
 8019b4c:	d052      	beq.n	8019bf4 <tcp_write+0x5a0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8019b4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019b50:	685b      	ldr	r3, [r3, #4]
 8019b52:	633b      	str	r3, [r7, #48]	@ 0x30
 8019b54:	e02e      	b.n	8019bb4 <tcp_write+0x560>
 8019b56:	bf00      	nop
 8019b58:	08024478 	.word	0x08024478
 8019b5c:	08024718 	.word	0x08024718
 8019b60:	080244cc 	.word	0x080244cc
 8019b64:	08024748 	.word	0x08024748
 8019b68:	08024788 	.word	0x08024788
 8019b6c:	08024798 	.word	0x08024798
      p->tot_len += oversize_used;
 8019b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019b72:	891a      	ldrh	r2, [r3, #8]
 8019b74:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8019b78:	4413      	add	r3, r2
 8019b7a:	b29a      	uxth	r2, r3
 8019b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019b7e:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8019b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019b82:	681b      	ldr	r3, [r3, #0]
 8019b84:	2b00      	cmp	r3, #0
 8019b86:	d112      	bne.n	8019bae <tcp_write+0x55a>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8019b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019b8a:	685b      	ldr	r3, [r3, #4]
 8019b8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019b8e:	8952      	ldrh	r2, [r2, #10]
 8019b90:	4413      	add	r3, r2
 8019b92:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8019b96:	68b9      	ldr	r1, [r7, #8]
 8019b98:	4618      	mov	r0, r3
 8019b9a:	f007 f830 	bl	8020bfe <memcpy>
        p->len += oversize_used;
 8019b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019ba0:	895a      	ldrh	r2, [r3, #10]
 8019ba2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8019ba6:	4413      	add	r3, r2
 8019ba8:	b29a      	uxth	r2, r3
 8019baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019bac:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8019bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019bb0:	681b      	ldr	r3, [r3, #0]
 8019bb2:	633b      	str	r3, [r7, #48]	@ 0x30
 8019bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019bb6:	2b00      	cmp	r3, #0
 8019bb8:	d1da      	bne.n	8019b70 <tcp_write+0x51c>
      }
    }
    last_unsent->len += oversize_used;
 8019bba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019bbc:	891a      	ldrh	r2, [r3, #8]
 8019bbe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8019bc2:	4413      	add	r3, r2
 8019bc4:	b29a      	uxth	r2, r3
 8019bc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019bc8:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 8019bca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019bcc:	895b      	ldrh	r3, [r3, #10]
 8019bce:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8019bd2:	429a      	cmp	r2, r3
 8019bd4:	d906      	bls.n	8019be4 <tcp_write+0x590>
 8019bd6:	4b7c      	ldr	r3, [pc, #496]	@ (8019dc8 <tcp_write+0x774>)
 8019bd8:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8019bdc:	497b      	ldr	r1, [pc, #492]	@ (8019dcc <tcp_write+0x778>)
 8019bde:	487c      	ldr	r0, [pc, #496]	@ (8019dd0 <tcp_write+0x77c>)
 8019be0:	f006 fdda 	bl	8020798 <iprintf>
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
 8019be4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019be6:	895a      	ldrh	r2, [r3, #10]
 8019be8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8019bec:	1ad3      	subs	r3, r2, r3
 8019bee:	b29a      	uxth	r2, r3
 8019bf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019bf2:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8019bf4:	8afa      	ldrh	r2, [r7, #22]
 8019bf6:	68fb      	ldr	r3, [r7, #12]
 8019bf8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8019bfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019bfe:	2b00      	cmp	r3, #0
 8019c00:	d018      	beq.n	8019c34 <tcp_write+0x5e0>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8019c02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019c04:	2b00      	cmp	r3, #0
 8019c06:	d106      	bne.n	8019c16 <tcp_write+0x5c2>
 8019c08:	4b6f      	ldr	r3, [pc, #444]	@ (8019dc8 <tcp_write+0x774>)
 8019c0a:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8019c0e:	4971      	ldr	r1, [pc, #452]	@ (8019dd4 <tcp_write+0x780>)
 8019c10:	486f      	ldr	r0, [pc, #444]	@ (8019dd0 <tcp_write+0x77c>)
 8019c12:	f006 fdc1 	bl	8020798 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8019c16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019c18:	685b      	ldr	r3, [r3, #4]
 8019c1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8019c1c:	4618      	mov	r0, r3
 8019c1e:	f7fb f813 	bl	8014c48 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8019c22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019c24:	891a      	ldrh	r2, [r3, #8]
 8019c26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019c28:	891b      	ldrh	r3, [r3, #8]
 8019c2a:	4413      	add	r3, r2
 8019c2c:	b29a      	uxth	r2, r3
 8019c2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019c30:	811a      	strh	r2, [r3, #8]
 8019c32:	e03c      	b.n	8019cae <tcp_write+0x65a>
  } else if (extendlen > 0) {
 8019c34:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	d038      	beq.n	8019cae <tcp_write+0x65a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8019c3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019c3e:	2b00      	cmp	r3, #0
 8019c40:	d003      	beq.n	8019c4a <tcp_write+0x5f6>
 8019c42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019c44:	685b      	ldr	r3, [r3, #4]
 8019c46:	2b00      	cmp	r3, #0
 8019c48:	d106      	bne.n	8019c58 <tcp_write+0x604>
 8019c4a:	4b5f      	ldr	r3, [pc, #380]	@ (8019dc8 <tcp_write+0x774>)
 8019c4c:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8019c50:	4961      	ldr	r1, [pc, #388]	@ (8019dd8 <tcp_write+0x784>)
 8019c52:	485f      	ldr	r0, [pc, #380]	@ (8019dd0 <tcp_write+0x77c>)
 8019c54:	f006 fda0 	bl	8020798 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8019c58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019c5a:	685b      	ldr	r3, [r3, #4]
 8019c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019c5e:	e00a      	b.n	8019c76 <tcp_write+0x622>
      p->tot_len += extendlen;
 8019c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019c62:	891a      	ldrh	r2, [r3, #8]
 8019c64:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8019c68:	4413      	add	r3, r2
 8019c6a:	b29a      	uxth	r2, r3
 8019c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019c6e:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8019c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019c72:	681b      	ldr	r3, [r3, #0]
 8019c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019c78:	681b      	ldr	r3, [r3, #0]
 8019c7a:	2b00      	cmp	r3, #0
 8019c7c:	d1f0      	bne.n	8019c60 <tcp_write+0x60c>
    }
    p->tot_len += extendlen;
 8019c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019c80:	891a      	ldrh	r2, [r3, #8]
 8019c82:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8019c86:	4413      	add	r3, r2
 8019c88:	b29a      	uxth	r2, r3
 8019c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019c8c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8019c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019c90:	895a      	ldrh	r2, [r3, #10]
 8019c92:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8019c96:	4413      	add	r3, r2
 8019c98:	b29a      	uxth	r2, r3
 8019c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019c9c:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8019c9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019ca0:	891a      	ldrh	r2, [r3, #8]
 8019ca2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8019ca6:	4413      	add	r3, r2
 8019ca8:	b29a      	uxth	r2, r3
 8019caa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019cac:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8019cae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019cb0:	2b00      	cmp	r3, #0
 8019cb2:	d103      	bne.n	8019cbc <tcp_write+0x668>
    pcb->unsent = queue;
 8019cb4:	68fb      	ldr	r3, [r7, #12]
 8019cb6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8019cb8:	66da      	str	r2, [r3, #108]	@ 0x6c
 8019cba:	e002      	b.n	8019cc2 <tcp_write+0x66e>
  } else {
    last_unsent->next = queue;
 8019cbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019cbe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8019cc0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8019cc2:	68fb      	ldr	r3, [r7, #12]
 8019cc4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8019cc6:	88fb      	ldrh	r3, [r7, #6]
 8019cc8:	441a      	add	r2, r3
 8019cca:	68fb      	ldr	r3, [r7, #12]
 8019ccc:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8019cce:	68fb      	ldr	r3, [r7, #12]
 8019cd0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8019cd4:	88fb      	ldrh	r3, [r7, #6]
 8019cd6:	1ad3      	subs	r3, r2, r3
 8019cd8:	b29a      	uxth	r2, r3
 8019cda:	68fb      	ldr	r3, [r7, #12]
 8019cdc:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8019ce0:	68fb      	ldr	r3, [r7, #12]
 8019ce2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8019ce6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8019cea:	68fb      	ldr	r3, [r7, #12]
 8019cec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019cf0:	2b00      	cmp	r3, #0
 8019cf2:	d00e      	beq.n	8019d12 <tcp_write+0x6be>
    LWIP_ASSERT("tcp_write: valid queue length",
 8019cf4:	68fb      	ldr	r3, [r7, #12]
 8019cf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019cf8:	2b00      	cmp	r3, #0
 8019cfa:	d10a      	bne.n	8019d12 <tcp_write+0x6be>
 8019cfc:	68fb      	ldr	r3, [r7, #12]
 8019cfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019d00:	2b00      	cmp	r3, #0
 8019d02:	d106      	bne.n	8019d12 <tcp_write+0x6be>
 8019d04:	4b30      	ldr	r3, [pc, #192]	@ (8019dc8 <tcp_write+0x774>)
 8019d06:	f240 3212 	movw	r2, #786	@ 0x312
 8019d0a:	4934      	ldr	r1, [pc, #208]	@ (8019ddc <tcp_write+0x788>)
 8019d0c:	4830      	ldr	r0, [pc, #192]	@ (8019dd0 <tcp_write+0x77c>)
 8019d0e:	f006 fd43 	bl	8020798 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8019d12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019d14:	2b00      	cmp	r3, #0
 8019d16:	d016      	beq.n	8019d46 <tcp_write+0x6f2>
 8019d18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019d1a:	691b      	ldr	r3, [r3, #16]
 8019d1c:	2b00      	cmp	r3, #0
 8019d1e:	d012      	beq.n	8019d46 <tcp_write+0x6f2>
 8019d20:	797b      	ldrb	r3, [r7, #5]
 8019d22:	f003 0302 	and.w	r3, r3, #2
 8019d26:	2b00      	cmp	r3, #0
 8019d28:	d10d      	bne.n	8019d46 <tcp_write+0x6f2>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8019d2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019d2c:	691b      	ldr	r3, [r3, #16]
 8019d2e:	899b      	ldrh	r3, [r3, #12]
 8019d30:	b29c      	uxth	r4, r3
 8019d32:	2008      	movs	r0, #8
 8019d34:	f7f9 f874 	bl	8012e20 <lwip_htons>
 8019d38:	4603      	mov	r3, r0
 8019d3a:	461a      	mov	r2, r3
 8019d3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019d3e:	691b      	ldr	r3, [r3, #16]
 8019d40:	4322      	orrs	r2, r4
 8019d42:	b292      	uxth	r2, r2
 8019d44:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8019d46:	2300      	movs	r3, #0
 8019d48:	e039      	b.n	8019dbe <tcp_write+0x76a>
          goto memerr;
 8019d4a:	bf00      	nop
 8019d4c:	e006      	b.n	8019d5c <tcp_write+0x708>
            goto memerr;
 8019d4e:	bf00      	nop
 8019d50:	e004      	b.n	8019d5c <tcp_write+0x708>
        goto memerr;
 8019d52:	bf00      	nop
 8019d54:	e002      	b.n	8019d5c <tcp_write+0x708>
        goto memerr;
 8019d56:	bf00      	nop
 8019d58:	e000      	b.n	8019d5c <tcp_write+0x708>
      goto memerr;
 8019d5a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019d5c:	68fb      	ldr	r3, [r7, #12]
 8019d5e:	8b5b      	ldrh	r3, [r3, #26]
 8019d60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019d64:	b29a      	uxth	r2, r3
 8019d66:	68fb      	ldr	r3, [r7, #12]
 8019d68:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);
 8019d6a:	4b1d      	ldr	r3, [pc, #116]	@ (8019de0 <tcp_write+0x78c>)
 8019d6c:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8019d70:	3301      	adds	r3, #1
 8019d72:	b29a      	uxth	r2, r3
 8019d74:	4b1a      	ldr	r3, [pc, #104]	@ (8019de0 <tcp_write+0x78c>)
 8019d76:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

  if (concat_p != NULL) {
 8019d7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019d7c:	2b00      	cmp	r3, #0
 8019d7e:	d002      	beq.n	8019d86 <tcp_write+0x732>
    pbuf_free(concat_p);
 8019d80:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8019d82:	f7fa fe7b 	bl	8014a7c <pbuf_free>
  }
  if (queue != NULL) {
 8019d86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	d002      	beq.n	8019d92 <tcp_write+0x73e>
    tcp_segs_free(queue);
 8019d8c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8019d8e:	f7fc fa67 	bl	8016260 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8019d92:	68fb      	ldr	r3, [r7, #12]
 8019d94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	d00e      	beq.n	8019dba <tcp_write+0x766>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8019d9c:	68fb      	ldr	r3, [r7, #12]
 8019d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019da0:	2b00      	cmp	r3, #0
 8019da2:	d10a      	bne.n	8019dba <tcp_write+0x766>
 8019da4:	68fb      	ldr	r3, [r7, #12]
 8019da6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019da8:	2b00      	cmp	r3, #0
 8019daa:	d106      	bne.n	8019dba <tcp_write+0x766>
 8019dac:	4b06      	ldr	r3, [pc, #24]	@ (8019dc8 <tcp_write+0x774>)
 8019dae:	f240 3227 	movw	r2, #807	@ 0x327
 8019db2:	490a      	ldr	r1, [pc, #40]	@ (8019ddc <tcp_write+0x788>)
 8019db4:	4806      	ldr	r0, [pc, #24]	@ (8019dd0 <tcp_write+0x77c>)
 8019db6:	f006 fcef 	bl	8020798 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8019dba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8019dbe:	4618      	mov	r0, r3
 8019dc0:	3764      	adds	r7, #100	@ 0x64
 8019dc2:	46bd      	mov	sp, r7
 8019dc4:	bd90      	pop	{r4, r7, pc}
 8019dc6:	bf00      	nop
 8019dc8:	08024478 	.word	0x08024478
 8019dcc:	080247ac 	.word	0x080247ac
 8019dd0:	080244cc 	.word	0x080244cc
 8019dd4:	080247d8 	.word	0x080247d8
 8019dd8:	08024810 	.word	0x08024810
 8019ddc:	08024848 	.word	0x08024848
 8019de0:	2002d36c 	.word	0x2002d36c

08019de4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8019de4:	b590      	push	{r4, r7, lr}
 8019de6:	b08b      	sub	sp, #44	@ 0x2c
 8019de8:	af02      	add	r7, sp, #8
 8019dea:	6078      	str	r0, [r7, #4]
 8019dec:	460b      	mov	r3, r1
 8019dee:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8019df0:	2300      	movs	r3, #0
 8019df2:	61bb      	str	r3, [r7, #24]
 8019df4:	2300      	movs	r3, #0
 8019df6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8019df8:	2300      	movs	r3, #0
 8019dfa:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8019dfc:	687b      	ldr	r3, [r7, #4]
 8019dfe:	2b00      	cmp	r3, #0
 8019e00:	d106      	bne.n	8019e10 <tcp_split_unsent_seg+0x2c>
 8019e02:	4b9b      	ldr	r3, [pc, #620]	@ (801a070 <tcp_split_unsent_seg+0x28c>)
 8019e04:	f240 324b 	movw	r2, #843	@ 0x34b
 8019e08:	499a      	ldr	r1, [pc, #616]	@ (801a074 <tcp_split_unsent_seg+0x290>)
 8019e0a:	489b      	ldr	r0, [pc, #620]	@ (801a078 <tcp_split_unsent_seg+0x294>)
 8019e0c:	f006 fcc4 	bl	8020798 <iprintf>

  useg = pcb->unsent;
 8019e10:	687b      	ldr	r3, [r7, #4]
 8019e12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019e14:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8019e16:	697b      	ldr	r3, [r7, #20]
 8019e18:	2b00      	cmp	r3, #0
 8019e1a:	d102      	bne.n	8019e22 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8019e1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019e20:	e121      	b.n	801a066 <tcp_split_unsent_seg+0x282>
  }

  if (split == 0) {
 8019e22:	887b      	ldrh	r3, [r7, #2]
 8019e24:	2b00      	cmp	r3, #0
 8019e26:	d109      	bne.n	8019e3c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8019e28:	4b91      	ldr	r3, [pc, #580]	@ (801a070 <tcp_split_unsent_seg+0x28c>)
 8019e2a:	f240 3253 	movw	r2, #851	@ 0x353
 8019e2e:	4993      	ldr	r1, [pc, #588]	@ (801a07c <tcp_split_unsent_seg+0x298>)
 8019e30:	4891      	ldr	r0, [pc, #580]	@ (801a078 <tcp_split_unsent_seg+0x294>)
 8019e32:	f006 fcb1 	bl	8020798 <iprintf>
    return ERR_VAL;
 8019e36:	f06f 0305 	mvn.w	r3, #5
 8019e3a:	e114      	b.n	801a066 <tcp_split_unsent_seg+0x282>
  }

  if (useg->len <= split) {
 8019e3c:	697b      	ldr	r3, [r7, #20]
 8019e3e:	891b      	ldrh	r3, [r3, #8]
 8019e40:	887a      	ldrh	r2, [r7, #2]
 8019e42:	429a      	cmp	r2, r3
 8019e44:	d301      	bcc.n	8019e4a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8019e46:	2300      	movs	r3, #0
 8019e48:	e10d      	b.n	801a066 <tcp_split_unsent_seg+0x282>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8019e4a:	687b      	ldr	r3, [r7, #4]
 8019e4c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019e4e:	887a      	ldrh	r2, [r7, #2]
 8019e50:	429a      	cmp	r2, r3
 8019e52:	d906      	bls.n	8019e62 <tcp_split_unsent_seg+0x7e>
 8019e54:	4b86      	ldr	r3, [pc, #536]	@ (801a070 <tcp_split_unsent_seg+0x28c>)
 8019e56:	f240 325b 	movw	r2, #859	@ 0x35b
 8019e5a:	4989      	ldr	r1, [pc, #548]	@ (801a080 <tcp_split_unsent_seg+0x29c>)
 8019e5c:	4886      	ldr	r0, [pc, #536]	@ (801a078 <tcp_split_unsent_seg+0x294>)
 8019e5e:	f006 fc9b 	bl	8020798 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8019e62:	697b      	ldr	r3, [r7, #20]
 8019e64:	891b      	ldrh	r3, [r3, #8]
 8019e66:	2b00      	cmp	r3, #0
 8019e68:	d106      	bne.n	8019e78 <tcp_split_unsent_seg+0x94>
 8019e6a:	4b81      	ldr	r3, [pc, #516]	@ (801a070 <tcp_split_unsent_seg+0x28c>)
 8019e6c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8019e70:	4984      	ldr	r1, [pc, #528]	@ (801a084 <tcp_split_unsent_seg+0x2a0>)
 8019e72:	4881      	ldr	r0, [pc, #516]	@ (801a078 <tcp_split_unsent_seg+0x294>)
 8019e74:	f006 fc90 	bl	8020798 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8019e78:	697b      	ldr	r3, [r7, #20]
 8019e7a:	7b1b      	ldrb	r3, [r3, #12]
 8019e7c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8019e7e:	7bfb      	ldrb	r3, [r7, #15]
 8019e80:	009b      	lsls	r3, r3, #2
 8019e82:	b2db      	uxtb	r3, r3
 8019e84:	f003 0304 	and.w	r3, r3, #4
 8019e88:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8019e8a:	697b      	ldr	r3, [r7, #20]
 8019e8c:	891a      	ldrh	r2, [r3, #8]
 8019e8e:	887b      	ldrh	r3, [r7, #2]
 8019e90:	1ad3      	subs	r3, r2, r3
 8019e92:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8019e94:	7bbb      	ldrb	r3, [r7, #14]
 8019e96:	b29a      	uxth	r2, r3
 8019e98:	89bb      	ldrh	r3, [r7, #12]
 8019e9a:	4413      	add	r3, r2
 8019e9c:	b29b      	uxth	r3, r3
 8019e9e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019ea2:	4619      	mov	r1, r3
 8019ea4:	2036      	movs	r0, #54	@ 0x36
 8019ea6:	f7fa fabd 	bl	8014424 <pbuf_alloc>
 8019eaa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019eac:	693b      	ldr	r3, [r7, #16]
 8019eae:	2b00      	cmp	r3, #0
 8019eb0:	f000 80ba 	beq.w	801a028 <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8019eb4:	697b      	ldr	r3, [r7, #20]
 8019eb6:	685b      	ldr	r3, [r3, #4]
 8019eb8:	891a      	ldrh	r2, [r3, #8]
 8019eba:	697b      	ldr	r3, [r7, #20]
 8019ebc:	891b      	ldrh	r3, [r3, #8]
 8019ebe:	1ad3      	subs	r3, r2, r3
 8019ec0:	b29a      	uxth	r2, r3
 8019ec2:	887b      	ldrh	r3, [r7, #2]
 8019ec4:	4413      	add	r3, r2
 8019ec6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8019ec8:	697b      	ldr	r3, [r7, #20]
 8019eca:	6858      	ldr	r0, [r3, #4]
 8019ecc:	693b      	ldr	r3, [r7, #16]
 8019ece:	685a      	ldr	r2, [r3, #4]
 8019ed0:	7bbb      	ldrb	r3, [r7, #14]
 8019ed2:	18d1      	adds	r1, r2, r3
 8019ed4:	897b      	ldrh	r3, [r7, #10]
 8019ed6:	89ba      	ldrh	r2, [r7, #12]
 8019ed8:	f7fb f802 	bl	8014ee0 <pbuf_copy_partial>
 8019edc:	4603      	mov	r3, r0
 8019ede:	461a      	mov	r2, r3
 8019ee0:	89bb      	ldrh	r3, [r7, #12]
 8019ee2:	4293      	cmp	r3, r2
 8019ee4:	f040 80a2 	bne.w	801a02c <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8019ee8:	697b      	ldr	r3, [r7, #20]
 8019eea:	691b      	ldr	r3, [r3, #16]
 8019eec:	899b      	ldrh	r3, [r3, #12]
 8019eee:	b29b      	uxth	r3, r3
 8019ef0:	4618      	mov	r0, r3
 8019ef2:	f7f8 ff95 	bl	8012e20 <lwip_htons>
 8019ef6:	4603      	mov	r3, r0
 8019ef8:	b2db      	uxtb	r3, r3
 8019efa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8019efe:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8019f00:	2300      	movs	r3, #0
 8019f02:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 8019f04:	7ffb      	ldrb	r3, [r7, #31]
 8019f06:	f003 0308 	and.w	r3, r3, #8
 8019f0a:	2b00      	cmp	r3, #0
 8019f0c:	d007      	beq.n	8019f1e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8019f0e:	7ffb      	ldrb	r3, [r7, #31]
 8019f10:	f023 0308 	bic.w	r3, r3, #8
 8019f14:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 8019f16:	7fbb      	ldrb	r3, [r7, #30]
 8019f18:	f043 0308 	orr.w	r3, r3, #8
 8019f1c:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 8019f1e:	7ffb      	ldrb	r3, [r7, #31]
 8019f20:	f003 0301 	and.w	r3, r3, #1
 8019f24:	2b00      	cmp	r3, #0
 8019f26:	d007      	beq.n	8019f38 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8019f28:	7ffb      	ldrb	r3, [r7, #31]
 8019f2a:	f023 0301 	bic.w	r3, r3, #1
 8019f2e:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 8019f30:	7fbb      	ldrb	r3, [r7, #30]
 8019f32:	f043 0301 	orr.w	r3, r3, #1
 8019f36:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8019f38:	697b      	ldr	r3, [r7, #20]
 8019f3a:	691b      	ldr	r3, [r3, #16]
 8019f3c:	685b      	ldr	r3, [r3, #4]
 8019f3e:	4618      	mov	r0, r3
 8019f40:	f7f8 ff84 	bl	8012e4c <lwip_htonl>
 8019f44:	4602      	mov	r2, r0
 8019f46:	887b      	ldrh	r3, [r7, #2]
 8019f48:	18d1      	adds	r1, r2, r3
 8019f4a:	7fba      	ldrb	r2, [r7, #30]
 8019f4c:	7bfb      	ldrb	r3, [r7, #15]
 8019f4e:	9300      	str	r3, [sp, #0]
 8019f50:	460b      	mov	r3, r1
 8019f52:	6939      	ldr	r1, [r7, #16]
 8019f54:	6878      	ldr	r0, [r7, #4]
 8019f56:	f7ff f9d5 	bl	8019304 <tcp_create_segment>
 8019f5a:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 8019f5c:	69bb      	ldr	r3, [r7, #24]
 8019f5e:	2b00      	cmp	r3, #0
 8019f60:	d066      	beq.n	801a030 <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8019f62:	697b      	ldr	r3, [r7, #20]
 8019f64:	685b      	ldr	r3, [r3, #4]
 8019f66:	4618      	mov	r0, r3
 8019f68:	f7fa fe2e 	bl	8014bc8 <pbuf_clen>
 8019f6c:	4603      	mov	r3, r0
 8019f6e:	461a      	mov	r2, r3
 8019f70:	687b      	ldr	r3, [r7, #4]
 8019f72:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019f76:	1a9b      	subs	r3, r3, r2
 8019f78:	b29a      	uxth	r2, r3
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8019f80:	697b      	ldr	r3, [r7, #20]
 8019f82:	6858      	ldr	r0, [r3, #4]
 8019f84:	697b      	ldr	r3, [r7, #20]
 8019f86:	685b      	ldr	r3, [r3, #4]
 8019f88:	891a      	ldrh	r2, [r3, #8]
 8019f8a:	89bb      	ldrh	r3, [r7, #12]
 8019f8c:	1ad3      	subs	r3, r2, r3
 8019f8e:	b29b      	uxth	r3, r3
 8019f90:	4619      	mov	r1, r3
 8019f92:	f7fa fbd3 	bl	801473c <pbuf_realloc>
  useg->len -= remainder;
 8019f96:	697b      	ldr	r3, [r7, #20]
 8019f98:	891a      	ldrh	r2, [r3, #8]
 8019f9a:	89bb      	ldrh	r3, [r7, #12]
 8019f9c:	1ad3      	subs	r3, r2, r3
 8019f9e:	b29a      	uxth	r2, r3
 8019fa0:	697b      	ldr	r3, [r7, #20]
 8019fa2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8019fa4:	697b      	ldr	r3, [r7, #20]
 8019fa6:	691b      	ldr	r3, [r3, #16]
 8019fa8:	899b      	ldrh	r3, [r3, #12]
 8019faa:	b29c      	uxth	r4, r3
 8019fac:	7ffb      	ldrb	r3, [r7, #31]
 8019fae:	b29b      	uxth	r3, r3
 8019fb0:	4618      	mov	r0, r3
 8019fb2:	f7f8 ff35 	bl	8012e20 <lwip_htons>
 8019fb6:	4603      	mov	r3, r0
 8019fb8:	461a      	mov	r2, r3
 8019fba:	697b      	ldr	r3, [r7, #20]
 8019fbc:	691b      	ldr	r3, [r3, #16]
 8019fbe:	4322      	orrs	r2, r4
 8019fc0:	b292      	uxth	r2, r2
 8019fc2:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 8019fc4:	697b      	ldr	r3, [r7, #20]
 8019fc6:	2200      	movs	r2, #0
 8019fc8:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8019fca:	697b      	ldr	r3, [r7, #20]
 8019fcc:	685b      	ldr	r3, [r3, #4]
 8019fce:	4618      	mov	r0, r3
 8019fd0:	f7fa fdfa 	bl	8014bc8 <pbuf_clen>
 8019fd4:	4603      	mov	r3, r0
 8019fd6:	461a      	mov	r2, r3
 8019fd8:	687b      	ldr	r3, [r7, #4]
 8019fda:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019fde:	4413      	add	r3, r2
 8019fe0:	b29a      	uxth	r2, r3
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8019fe8:	69bb      	ldr	r3, [r7, #24]
 8019fea:	685b      	ldr	r3, [r3, #4]
 8019fec:	4618      	mov	r0, r3
 8019fee:	f7fa fdeb 	bl	8014bc8 <pbuf_clen>
 8019ff2:	4603      	mov	r3, r0
 8019ff4:	461a      	mov	r2, r3
 8019ff6:	687b      	ldr	r3, [r7, #4]
 8019ff8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019ffc:	4413      	add	r3, r2
 8019ffe:	b29a      	uxth	r2, r3
 801a000:	687b      	ldr	r3, [r7, #4]
 801a002:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801a006:	697b      	ldr	r3, [r7, #20]
 801a008:	681a      	ldr	r2, [r3, #0]
 801a00a:	69bb      	ldr	r3, [r7, #24]
 801a00c:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801a00e:	697b      	ldr	r3, [r7, #20]
 801a010:	69ba      	ldr	r2, [r7, #24]
 801a012:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801a014:	69bb      	ldr	r3, [r7, #24]
 801a016:	681b      	ldr	r3, [r3, #0]
 801a018:	2b00      	cmp	r3, #0
 801a01a:	d103      	bne.n	801a024 <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 801a01c:	687b      	ldr	r3, [r7, #4]
 801a01e:	2200      	movs	r2, #0
 801a020:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801a024:	2300      	movs	r3, #0
 801a026:	e01e      	b.n	801a066 <tcp_split_unsent_seg+0x282>
    goto memerr;
 801a028:	bf00      	nop
 801a02a:	e002      	b.n	801a032 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 801a02c:	bf00      	nop
 801a02e:	e000      	b.n	801a032 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 801a030:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);
 801a032:	4b15      	ldr	r3, [pc, #84]	@ (801a088 <tcp_split_unsent_seg+0x2a4>)
 801a034:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801a038:	3301      	adds	r3, #1
 801a03a:	b29a      	uxth	r2, r3
 801a03c:	4b12      	ldr	r3, [pc, #72]	@ (801a088 <tcp_split_unsent_seg+0x2a4>)
 801a03e:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801a042:	69bb      	ldr	r3, [r7, #24]
 801a044:	2b00      	cmp	r3, #0
 801a046:	d006      	beq.n	801a056 <tcp_split_unsent_seg+0x272>
 801a048:	4b09      	ldr	r3, [pc, #36]	@ (801a070 <tcp_split_unsent_seg+0x28c>)
 801a04a:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 801a04e:	490f      	ldr	r1, [pc, #60]	@ (801a08c <tcp_split_unsent_seg+0x2a8>)
 801a050:	4809      	ldr	r0, [pc, #36]	@ (801a078 <tcp_split_unsent_seg+0x294>)
 801a052:	f006 fba1 	bl	8020798 <iprintf>
  if (p != NULL) {
 801a056:	693b      	ldr	r3, [r7, #16]
 801a058:	2b00      	cmp	r3, #0
 801a05a:	d002      	beq.n	801a062 <tcp_split_unsent_seg+0x27e>
    pbuf_free(p);
 801a05c:	6938      	ldr	r0, [r7, #16]
 801a05e:	f7fa fd0d 	bl	8014a7c <pbuf_free>
  }

  return ERR_MEM;
 801a062:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801a066:	4618      	mov	r0, r3
 801a068:	3724      	adds	r7, #36	@ 0x24
 801a06a:	46bd      	mov	sp, r7
 801a06c:	bd90      	pop	{r4, r7, pc}
 801a06e:	bf00      	nop
 801a070:	08024478 	.word	0x08024478
 801a074:	08024868 	.word	0x08024868
 801a078:	080244cc 	.word	0x080244cc
 801a07c:	0802488c 	.word	0x0802488c
 801a080:	080248b0 	.word	0x080248b0
 801a084:	080248c0 	.word	0x080248c0
 801a088:	2002d36c 	.word	0x2002d36c
 801a08c:	080248d0 	.word	0x080248d0

0801a090 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801a090:	b590      	push	{r4, r7, lr}
 801a092:	b085      	sub	sp, #20
 801a094:	af00      	add	r7, sp, #0
 801a096:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801a098:	687b      	ldr	r3, [r7, #4]
 801a09a:	2b00      	cmp	r3, #0
 801a09c:	d106      	bne.n	801a0ac <tcp_send_fin+0x1c>
 801a09e:	4b21      	ldr	r3, [pc, #132]	@ (801a124 <tcp_send_fin+0x94>)
 801a0a0:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 801a0a4:	4920      	ldr	r1, [pc, #128]	@ (801a128 <tcp_send_fin+0x98>)
 801a0a6:	4821      	ldr	r0, [pc, #132]	@ (801a12c <tcp_send_fin+0x9c>)
 801a0a8:	f006 fb76 	bl	8020798 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801a0ac:	687b      	ldr	r3, [r7, #4]
 801a0ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a0b0:	2b00      	cmp	r3, #0
 801a0b2:	d02e      	beq.n	801a112 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a0b4:	687b      	ldr	r3, [r7, #4]
 801a0b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a0b8:	60fb      	str	r3, [r7, #12]
 801a0ba:	e002      	b.n	801a0c2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801a0bc:	68fb      	ldr	r3, [r7, #12]
 801a0be:	681b      	ldr	r3, [r3, #0]
 801a0c0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a0c2:	68fb      	ldr	r3, [r7, #12]
 801a0c4:	681b      	ldr	r3, [r3, #0]
 801a0c6:	2b00      	cmp	r3, #0
 801a0c8:	d1f8      	bne.n	801a0bc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801a0ca:	68fb      	ldr	r3, [r7, #12]
 801a0cc:	691b      	ldr	r3, [r3, #16]
 801a0ce:	899b      	ldrh	r3, [r3, #12]
 801a0d0:	b29b      	uxth	r3, r3
 801a0d2:	4618      	mov	r0, r3
 801a0d4:	f7f8 fea4 	bl	8012e20 <lwip_htons>
 801a0d8:	4603      	mov	r3, r0
 801a0da:	b2db      	uxtb	r3, r3
 801a0dc:	f003 0307 	and.w	r3, r3, #7
 801a0e0:	2b00      	cmp	r3, #0
 801a0e2:	d116      	bne.n	801a112 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801a0e4:	68fb      	ldr	r3, [r7, #12]
 801a0e6:	691b      	ldr	r3, [r3, #16]
 801a0e8:	899b      	ldrh	r3, [r3, #12]
 801a0ea:	b29c      	uxth	r4, r3
 801a0ec:	2001      	movs	r0, #1
 801a0ee:	f7f8 fe97 	bl	8012e20 <lwip_htons>
 801a0f2:	4603      	mov	r3, r0
 801a0f4:	461a      	mov	r2, r3
 801a0f6:	68fb      	ldr	r3, [r7, #12]
 801a0f8:	691b      	ldr	r3, [r3, #16]
 801a0fa:	4322      	orrs	r2, r4
 801a0fc:	b292      	uxth	r2, r2
 801a0fe:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801a100:	687b      	ldr	r3, [r7, #4]
 801a102:	8b5b      	ldrh	r3, [r3, #26]
 801a104:	f043 0320 	orr.w	r3, r3, #32
 801a108:	b29a      	uxth	r2, r3
 801a10a:	687b      	ldr	r3, [r7, #4]
 801a10c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801a10e:	2300      	movs	r3, #0
 801a110:	e004      	b.n	801a11c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801a112:	2101      	movs	r1, #1
 801a114:	6878      	ldr	r0, [r7, #4]
 801a116:	f000 f80b 	bl	801a130 <tcp_enqueue_flags>
 801a11a:	4603      	mov	r3, r0
}
 801a11c:	4618      	mov	r0, r3
 801a11e:	3714      	adds	r7, #20
 801a120:	46bd      	mov	sp, r7
 801a122:	bd90      	pop	{r4, r7, pc}
 801a124:	08024478 	.word	0x08024478
 801a128:	080248dc 	.word	0x080248dc
 801a12c:	080244cc 	.word	0x080244cc

0801a130 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801a130:	b580      	push	{r7, lr}
 801a132:	b088      	sub	sp, #32
 801a134:	af02      	add	r7, sp, #8
 801a136:	6078      	str	r0, [r7, #4]
 801a138:	460b      	mov	r3, r1
 801a13a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801a13c:	2300      	movs	r3, #0
 801a13e:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 801a140:	2300      	movs	r3, #0
 801a142:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801a144:	78fb      	ldrb	r3, [r7, #3]
 801a146:	f003 0303 	and.w	r3, r3, #3
 801a14a:	2b00      	cmp	r3, #0
 801a14c:	d106      	bne.n	801a15c <tcp_enqueue_flags+0x2c>
 801a14e:	4b6f      	ldr	r3, [pc, #444]	@ (801a30c <tcp_enqueue_flags+0x1dc>)
 801a150:	f240 4211 	movw	r2, #1041	@ 0x411
 801a154:	496e      	ldr	r1, [pc, #440]	@ (801a310 <tcp_enqueue_flags+0x1e0>)
 801a156:	486f      	ldr	r0, [pc, #444]	@ (801a314 <tcp_enqueue_flags+0x1e4>)
 801a158:	f006 fb1e 	bl	8020798 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801a15c:	687b      	ldr	r3, [r7, #4]
 801a15e:	2b00      	cmp	r3, #0
 801a160:	d106      	bne.n	801a170 <tcp_enqueue_flags+0x40>
 801a162:	4b6a      	ldr	r3, [pc, #424]	@ (801a30c <tcp_enqueue_flags+0x1dc>)
 801a164:	f240 4213 	movw	r2, #1043	@ 0x413
 801a168:	496b      	ldr	r1, [pc, #428]	@ (801a318 <tcp_enqueue_flags+0x1e8>)
 801a16a:	486a      	ldr	r0, [pc, #424]	@ (801a314 <tcp_enqueue_flags+0x1e4>)
 801a16c:	f006 fb14 	bl	8020798 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801a170:	78fb      	ldrb	r3, [r7, #3]
 801a172:	f003 0302 	and.w	r3, r3, #2
 801a176:	2b00      	cmp	r3, #0
 801a178:	d001      	beq.n	801a17e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801a17a:	2301      	movs	r3, #1
 801a17c:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a17e:	7dfb      	ldrb	r3, [r7, #23]
 801a180:	009b      	lsls	r3, r3, #2
 801a182:	b2db      	uxtb	r3, r3
 801a184:	f003 0304 	and.w	r3, r3, #4
 801a188:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801a18a:	7dbb      	ldrb	r3, [r7, #22]
 801a18c:	b29b      	uxth	r3, r3
 801a18e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a192:	4619      	mov	r1, r3
 801a194:	2036      	movs	r0, #54	@ 0x36
 801a196:	f7fa f945 	bl	8014424 <pbuf_alloc>
 801a19a:	60f8      	str	r0, [r7, #12]
 801a19c:	68fb      	ldr	r3, [r7, #12]
 801a19e:	2b00      	cmp	r3, #0
 801a1a0:	d111      	bne.n	801a1c6 <tcp_enqueue_flags+0x96>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a1a2:	687b      	ldr	r3, [r7, #4]
 801a1a4:	8b5b      	ldrh	r3, [r3, #26]
 801a1a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a1aa:	b29a      	uxth	r2, r3
 801a1ac:	687b      	ldr	r3, [r7, #4]
 801a1ae:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 801a1b0:	4b5a      	ldr	r3, [pc, #360]	@ (801a31c <tcp_enqueue_flags+0x1ec>)
 801a1b2:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801a1b6:	3301      	adds	r3, #1
 801a1b8:	b29a      	uxth	r2, r3
 801a1ba:	4b58      	ldr	r3, [pc, #352]	@ (801a31c <tcp_enqueue_flags+0x1ec>)
 801a1bc:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    return ERR_MEM;
 801a1c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a1c4:	e09d      	b.n	801a302 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801a1c6:	68fb      	ldr	r3, [r7, #12]
 801a1c8:	895a      	ldrh	r2, [r3, #10]
 801a1ca:	7dbb      	ldrb	r3, [r7, #22]
 801a1cc:	b29b      	uxth	r3, r3
 801a1ce:	429a      	cmp	r2, r3
 801a1d0:	d206      	bcs.n	801a1e0 <tcp_enqueue_flags+0xb0>
 801a1d2:	4b4e      	ldr	r3, [pc, #312]	@ (801a30c <tcp_enqueue_flags+0x1dc>)
 801a1d4:	f240 4239 	movw	r2, #1081	@ 0x439
 801a1d8:	4951      	ldr	r1, [pc, #324]	@ (801a320 <tcp_enqueue_flags+0x1f0>)
 801a1da:	484e      	ldr	r0, [pc, #312]	@ (801a314 <tcp_enqueue_flags+0x1e4>)
 801a1dc:	f006 fadc 	bl	8020798 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801a1e0:	687b      	ldr	r3, [r7, #4]
 801a1e2:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 801a1e4:	78fa      	ldrb	r2, [r7, #3]
 801a1e6:	7dfb      	ldrb	r3, [r7, #23]
 801a1e8:	9300      	str	r3, [sp, #0]
 801a1ea:	460b      	mov	r3, r1
 801a1ec:	68f9      	ldr	r1, [r7, #12]
 801a1ee:	6878      	ldr	r0, [r7, #4]
 801a1f0:	f7ff f888 	bl	8019304 <tcp_create_segment>
 801a1f4:	60b8      	str	r0, [r7, #8]
 801a1f6:	68bb      	ldr	r3, [r7, #8]
 801a1f8:	2b00      	cmp	r3, #0
 801a1fa:	d111      	bne.n	801a220 <tcp_enqueue_flags+0xf0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a1fc:	687b      	ldr	r3, [r7, #4]
 801a1fe:	8b5b      	ldrh	r3, [r3, #26]
 801a200:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a204:	b29a      	uxth	r2, r3
 801a206:	687b      	ldr	r3, [r7, #4]
 801a208:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 801a20a:	4b44      	ldr	r3, [pc, #272]	@ (801a31c <tcp_enqueue_flags+0x1ec>)
 801a20c:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801a210:	3301      	adds	r3, #1
 801a212:	b29a      	uxth	r2, r3
 801a214:	4b41      	ldr	r3, [pc, #260]	@ (801a31c <tcp_enqueue_flags+0x1ec>)
 801a216:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    return ERR_MEM;
 801a21a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a21e:	e070      	b.n	801a302 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801a220:	68bb      	ldr	r3, [r7, #8]
 801a222:	691b      	ldr	r3, [r3, #16]
 801a224:	f003 0303 	and.w	r3, r3, #3
 801a228:	2b00      	cmp	r3, #0
 801a22a:	d006      	beq.n	801a23a <tcp_enqueue_flags+0x10a>
 801a22c:	4b37      	ldr	r3, [pc, #220]	@ (801a30c <tcp_enqueue_flags+0x1dc>)
 801a22e:	f240 4242 	movw	r2, #1090	@ 0x442
 801a232:	493c      	ldr	r1, [pc, #240]	@ (801a324 <tcp_enqueue_flags+0x1f4>)
 801a234:	4837      	ldr	r0, [pc, #220]	@ (801a314 <tcp_enqueue_flags+0x1e4>)
 801a236:	f006 faaf 	bl	8020798 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801a23a:	68bb      	ldr	r3, [r7, #8]
 801a23c:	891b      	ldrh	r3, [r3, #8]
 801a23e:	2b00      	cmp	r3, #0
 801a240:	d006      	beq.n	801a250 <tcp_enqueue_flags+0x120>
 801a242:	4b32      	ldr	r3, [pc, #200]	@ (801a30c <tcp_enqueue_flags+0x1dc>)
 801a244:	f240 4243 	movw	r2, #1091	@ 0x443
 801a248:	4937      	ldr	r1, [pc, #220]	@ (801a328 <tcp_enqueue_flags+0x1f8>)
 801a24a:	4832      	ldr	r0, [pc, #200]	@ (801a314 <tcp_enqueue_flags+0x1e4>)
 801a24c:	f006 faa4 	bl	8020798 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801a250:	687b      	ldr	r3, [r7, #4]
 801a252:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a254:	2b00      	cmp	r3, #0
 801a256:	d103      	bne.n	801a260 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 801a258:	687b      	ldr	r3, [r7, #4]
 801a25a:	68ba      	ldr	r2, [r7, #8]
 801a25c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801a25e:	e00d      	b.n	801a27c <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801a260:	687b      	ldr	r3, [r7, #4]
 801a262:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a264:	613b      	str	r3, [r7, #16]
 801a266:	e002      	b.n	801a26e <tcp_enqueue_flags+0x13e>
 801a268:	693b      	ldr	r3, [r7, #16]
 801a26a:	681b      	ldr	r3, [r3, #0]
 801a26c:	613b      	str	r3, [r7, #16]
 801a26e:	693b      	ldr	r3, [r7, #16]
 801a270:	681b      	ldr	r3, [r3, #0]
 801a272:	2b00      	cmp	r3, #0
 801a274:	d1f8      	bne.n	801a268 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 801a276:	693b      	ldr	r3, [r7, #16]
 801a278:	68ba      	ldr	r2, [r7, #8]
 801a27a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801a27c:	687b      	ldr	r3, [r7, #4]
 801a27e:	2200      	movs	r2, #0
 801a280:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801a284:	78fb      	ldrb	r3, [r7, #3]
 801a286:	f003 0302 	and.w	r3, r3, #2
 801a28a:	2b00      	cmp	r3, #0
 801a28c:	d104      	bne.n	801a298 <tcp_enqueue_flags+0x168>
 801a28e:	78fb      	ldrb	r3, [r7, #3]
 801a290:	f003 0301 	and.w	r3, r3, #1
 801a294:	2b00      	cmp	r3, #0
 801a296:	d004      	beq.n	801a2a2 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 801a298:	687b      	ldr	r3, [r7, #4]
 801a29a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a29c:	1c5a      	adds	r2, r3, #1
 801a29e:	687b      	ldr	r3, [r7, #4]
 801a2a0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801a2a2:	78fb      	ldrb	r3, [r7, #3]
 801a2a4:	f003 0301 	and.w	r3, r3, #1
 801a2a8:	2b00      	cmp	r3, #0
 801a2aa:	d006      	beq.n	801a2ba <tcp_enqueue_flags+0x18a>
    tcp_set_flags(pcb, TF_FIN);
 801a2ac:	687b      	ldr	r3, [r7, #4]
 801a2ae:	8b5b      	ldrh	r3, [r3, #26]
 801a2b0:	f043 0320 	orr.w	r3, r3, #32
 801a2b4:	b29a      	uxth	r2, r3
 801a2b6:	687b      	ldr	r3, [r7, #4]
 801a2b8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801a2ba:	68bb      	ldr	r3, [r7, #8]
 801a2bc:	685b      	ldr	r3, [r3, #4]
 801a2be:	4618      	mov	r0, r3
 801a2c0:	f7fa fc82 	bl	8014bc8 <pbuf_clen>
 801a2c4:	4603      	mov	r3, r0
 801a2c6:	461a      	mov	r2, r3
 801a2c8:	687b      	ldr	r3, [r7, #4]
 801a2ca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a2ce:	4413      	add	r3, r2
 801a2d0:	b29a      	uxth	r2, r3
 801a2d2:	687b      	ldr	r3, [r7, #4]
 801a2d4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801a2d8:	687b      	ldr	r3, [r7, #4]
 801a2da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a2de:	2b00      	cmp	r3, #0
 801a2e0:	d00e      	beq.n	801a300 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801a2e2:	687b      	ldr	r3, [r7, #4]
 801a2e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a2e6:	2b00      	cmp	r3, #0
 801a2e8:	d10a      	bne.n	801a300 <tcp_enqueue_flags+0x1d0>
 801a2ea:	687b      	ldr	r3, [r7, #4]
 801a2ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a2ee:	2b00      	cmp	r3, #0
 801a2f0:	d106      	bne.n	801a300 <tcp_enqueue_flags+0x1d0>
 801a2f2:	4b06      	ldr	r3, [pc, #24]	@ (801a30c <tcp_enqueue_flags+0x1dc>)
 801a2f4:	f240 4265 	movw	r2, #1125	@ 0x465
 801a2f8:	490c      	ldr	r1, [pc, #48]	@ (801a32c <tcp_enqueue_flags+0x1fc>)
 801a2fa:	4806      	ldr	r0, [pc, #24]	@ (801a314 <tcp_enqueue_flags+0x1e4>)
 801a2fc:	f006 fa4c 	bl	8020798 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801a300:	2300      	movs	r3, #0
}
 801a302:	4618      	mov	r0, r3
 801a304:	3718      	adds	r7, #24
 801a306:	46bd      	mov	sp, r7
 801a308:	bd80      	pop	{r7, pc}
 801a30a:	bf00      	nop
 801a30c:	08024478 	.word	0x08024478
 801a310:	080248f8 	.word	0x080248f8
 801a314:	080244cc 	.word	0x080244cc
 801a318:	08024950 	.word	0x08024950
 801a31c:	2002d36c 	.word	0x2002d36c
 801a320:	08024970 	.word	0x08024970
 801a324:	080249ac 	.word	0x080249ac
 801a328:	080249c4 	.word	0x080249c4
 801a32c:	080249f0 	.word	0x080249f0

0801a330 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801a330:	b5b0      	push	{r4, r5, r7, lr}
 801a332:	b08a      	sub	sp, #40	@ 0x28
 801a334:	af00      	add	r7, sp, #0
 801a336:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801a338:	687b      	ldr	r3, [r7, #4]
 801a33a:	2b00      	cmp	r3, #0
 801a33c:	d106      	bne.n	801a34c <tcp_output+0x1c>
 801a33e:	4b8a      	ldr	r3, [pc, #552]	@ (801a568 <tcp_output+0x238>)
 801a340:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 801a344:	4989      	ldr	r1, [pc, #548]	@ (801a56c <tcp_output+0x23c>)
 801a346:	488a      	ldr	r0, [pc, #552]	@ (801a570 <tcp_output+0x240>)
 801a348:	f006 fa26 	bl	8020798 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801a34c:	687b      	ldr	r3, [r7, #4]
 801a34e:	7d1b      	ldrb	r3, [r3, #20]
 801a350:	2b01      	cmp	r3, #1
 801a352:	d106      	bne.n	801a362 <tcp_output+0x32>
 801a354:	4b84      	ldr	r3, [pc, #528]	@ (801a568 <tcp_output+0x238>)
 801a356:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 801a35a:	4986      	ldr	r1, [pc, #536]	@ (801a574 <tcp_output+0x244>)
 801a35c:	4884      	ldr	r0, [pc, #528]	@ (801a570 <tcp_output+0x240>)
 801a35e:	f006 fa1b 	bl	8020798 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801a362:	4b85      	ldr	r3, [pc, #532]	@ (801a578 <tcp_output+0x248>)
 801a364:	681b      	ldr	r3, [r3, #0]
 801a366:	687a      	ldr	r2, [r7, #4]
 801a368:	429a      	cmp	r2, r3
 801a36a:	d101      	bne.n	801a370 <tcp_output+0x40>
    return ERR_OK;
 801a36c:	2300      	movs	r3, #0
 801a36e:	e1d1      	b.n	801a714 <tcp_output+0x3e4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801a370:	687b      	ldr	r3, [r7, #4]
 801a372:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801a376:	687b      	ldr	r3, [r7, #4]
 801a378:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a37c:	4293      	cmp	r3, r2
 801a37e:	bf28      	it	cs
 801a380:	4613      	movcs	r3, r2
 801a382:	b29b      	uxth	r3, r3
 801a384:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801a386:	687b      	ldr	r3, [r7, #4]
 801a388:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a38a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 801a38c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a38e:	2b00      	cmp	r3, #0
 801a390:	d10b      	bne.n	801a3aa <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	8b5b      	ldrh	r3, [r3, #26]
 801a396:	f003 0302 	and.w	r3, r3, #2
 801a39a:	2b00      	cmp	r3, #0
 801a39c:	f000 81ad 	beq.w	801a6fa <tcp_output+0x3ca>
      return tcp_send_empty_ack(pcb);
 801a3a0:	6878      	ldr	r0, [r7, #4]
 801a3a2:	f000 fdeb 	bl	801af7c <tcp_send_empty_ack>
 801a3a6:	4603      	mov	r3, r0
 801a3a8:	e1b4      	b.n	801a714 <tcp_output+0x3e4>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801a3aa:	6879      	ldr	r1, [r7, #4]
 801a3ac:	687b      	ldr	r3, [r7, #4]
 801a3ae:	3304      	adds	r3, #4
 801a3b0:	461a      	mov	r2, r3
 801a3b2:	6878      	ldr	r0, [r7, #4]
 801a3b4:	f7fe ff8a 	bl	80192cc <tcp_route>
 801a3b8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801a3ba:	697b      	ldr	r3, [r7, #20]
 801a3bc:	2b00      	cmp	r3, #0
 801a3be:	d102      	bne.n	801a3c6 <tcp_output+0x96>
    return ERR_RTE;
 801a3c0:	f06f 0303 	mvn.w	r3, #3
 801a3c4:	e1a6      	b.n	801a714 <tcp_output+0x3e4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801a3c6:	687b      	ldr	r3, [r7, #4]
 801a3c8:	2b00      	cmp	r3, #0
 801a3ca:	d003      	beq.n	801a3d4 <tcp_output+0xa4>
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	681b      	ldr	r3, [r3, #0]
 801a3d0:	2b00      	cmp	r3, #0
 801a3d2:	d111      	bne.n	801a3f8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801a3d4:	697b      	ldr	r3, [r7, #20]
 801a3d6:	2b00      	cmp	r3, #0
 801a3d8:	d002      	beq.n	801a3e0 <tcp_output+0xb0>
 801a3da:	697b      	ldr	r3, [r7, #20]
 801a3dc:	3304      	adds	r3, #4
 801a3de:	e000      	b.n	801a3e2 <tcp_output+0xb2>
 801a3e0:	2300      	movs	r3, #0
 801a3e2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801a3e4:	693b      	ldr	r3, [r7, #16]
 801a3e6:	2b00      	cmp	r3, #0
 801a3e8:	d102      	bne.n	801a3f0 <tcp_output+0xc0>
      return ERR_RTE;
 801a3ea:	f06f 0303 	mvn.w	r3, #3
 801a3ee:	e191      	b.n	801a714 <tcp_output+0x3e4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801a3f0:	693b      	ldr	r3, [r7, #16]
 801a3f2:	681a      	ldr	r2, [r3, #0]
 801a3f4:	687b      	ldr	r3, [r7, #4]
 801a3f6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801a3f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a3fa:	691b      	ldr	r3, [r3, #16]
 801a3fc:	685b      	ldr	r3, [r3, #4]
 801a3fe:	4618      	mov	r0, r3
 801a400:	f7f8 fd24 	bl	8012e4c <lwip_htonl>
 801a404:	4602      	mov	r2, r0
 801a406:	687b      	ldr	r3, [r7, #4]
 801a408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a40a:	1ad3      	subs	r3, r2, r3
 801a40c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a40e:	8912      	ldrh	r2, [r2, #8]
 801a410:	4413      	add	r3, r2
 801a412:	69ba      	ldr	r2, [r7, #24]
 801a414:	429a      	cmp	r2, r3
 801a416:	d227      	bcs.n	801a468 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a41e:	461a      	mov	r2, r3
 801a420:	69bb      	ldr	r3, [r7, #24]
 801a422:	4293      	cmp	r3, r2
 801a424:	d114      	bne.n	801a450 <tcp_output+0x120>
 801a426:	687b      	ldr	r3, [r7, #4]
 801a428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a42a:	2b00      	cmp	r3, #0
 801a42c:	d110      	bne.n	801a450 <tcp_output+0x120>
 801a42e:	687b      	ldr	r3, [r7, #4]
 801a430:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801a434:	2b00      	cmp	r3, #0
 801a436:	d10b      	bne.n	801a450 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801a438:	687b      	ldr	r3, [r7, #4]
 801a43a:	2200      	movs	r2, #0
 801a43c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 801a440:	687b      	ldr	r3, [r7, #4]
 801a442:	2201      	movs	r2, #1
 801a444:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 801a448:	687b      	ldr	r3, [r7, #4]
 801a44a:	2200      	movs	r2, #0
 801a44c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801a450:	687b      	ldr	r3, [r7, #4]
 801a452:	8b5b      	ldrh	r3, [r3, #26]
 801a454:	f003 0302 	and.w	r3, r3, #2
 801a458:	2b00      	cmp	r3, #0
 801a45a:	f000 8150 	beq.w	801a6fe <tcp_output+0x3ce>
      return tcp_send_empty_ack(pcb);
 801a45e:	6878      	ldr	r0, [r7, #4]
 801a460:	f000 fd8c 	bl	801af7c <tcp_send_empty_ack>
 801a464:	4603      	mov	r3, r0
 801a466:	e155      	b.n	801a714 <tcp_output+0x3e4>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801a468:	687b      	ldr	r3, [r7, #4]
 801a46a:	2200      	movs	r2, #0
 801a46c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801a470:	687b      	ldr	r3, [r7, #4]
 801a472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a474:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801a476:	6a3b      	ldr	r3, [r7, #32]
 801a478:	2b00      	cmp	r3, #0
 801a47a:	f000 811f 	beq.w	801a6bc <tcp_output+0x38c>
    for (; useg->next != NULL; useg = useg->next);
 801a47e:	e002      	b.n	801a486 <tcp_output+0x156>
 801a480:	6a3b      	ldr	r3, [r7, #32]
 801a482:	681b      	ldr	r3, [r3, #0]
 801a484:	623b      	str	r3, [r7, #32]
 801a486:	6a3b      	ldr	r3, [r7, #32]
 801a488:	681b      	ldr	r3, [r3, #0]
 801a48a:	2b00      	cmp	r3, #0
 801a48c:	d1f8      	bne.n	801a480 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801a48e:	e115      	b.n	801a6bc <tcp_output+0x38c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801a490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a492:	691b      	ldr	r3, [r3, #16]
 801a494:	899b      	ldrh	r3, [r3, #12]
 801a496:	b29b      	uxth	r3, r3
 801a498:	4618      	mov	r0, r3
 801a49a:	f7f8 fcc1 	bl	8012e20 <lwip_htons>
 801a49e:	4603      	mov	r3, r0
 801a4a0:	b2db      	uxtb	r3, r3
 801a4a2:	f003 0304 	and.w	r3, r3, #4
 801a4a6:	2b00      	cmp	r3, #0
 801a4a8:	d006      	beq.n	801a4b8 <tcp_output+0x188>
 801a4aa:	4b2f      	ldr	r3, [pc, #188]	@ (801a568 <tcp_output+0x238>)
 801a4ac:	f240 5236 	movw	r2, #1334	@ 0x536
 801a4b0:	4932      	ldr	r1, [pc, #200]	@ (801a57c <tcp_output+0x24c>)
 801a4b2:	482f      	ldr	r0, [pc, #188]	@ (801a570 <tcp_output+0x240>)
 801a4b4:	f006 f970 	bl	8020798 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801a4b8:	687b      	ldr	r3, [r7, #4]
 801a4ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	d01f      	beq.n	801a500 <tcp_output+0x1d0>
 801a4c0:	687b      	ldr	r3, [r7, #4]
 801a4c2:	8b5b      	ldrh	r3, [r3, #26]
 801a4c4:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801a4c8:	2b00      	cmp	r3, #0
 801a4ca:	d119      	bne.n	801a500 <tcp_output+0x1d0>
 801a4cc:	687b      	ldr	r3, [r7, #4]
 801a4ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a4d0:	2b00      	cmp	r3, #0
 801a4d2:	d00b      	beq.n	801a4ec <tcp_output+0x1bc>
 801a4d4:	687b      	ldr	r3, [r7, #4]
 801a4d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a4d8:	681b      	ldr	r3, [r3, #0]
 801a4da:	2b00      	cmp	r3, #0
 801a4dc:	d110      	bne.n	801a500 <tcp_output+0x1d0>
 801a4de:	687b      	ldr	r3, [r7, #4]
 801a4e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a4e2:	891a      	ldrh	r2, [r3, #8]
 801a4e4:	687b      	ldr	r3, [r7, #4]
 801a4e6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801a4e8:	429a      	cmp	r2, r3
 801a4ea:	d209      	bcs.n	801a500 <tcp_output+0x1d0>
 801a4ec:	687b      	ldr	r3, [r7, #4]
 801a4ee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801a4f2:	2b00      	cmp	r3, #0
 801a4f4:	d004      	beq.n	801a500 <tcp_output+0x1d0>
 801a4f6:	687b      	ldr	r3, [r7, #4]
 801a4f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a4fc:	2b08      	cmp	r3, #8
 801a4fe:	d901      	bls.n	801a504 <tcp_output+0x1d4>
 801a500:	2301      	movs	r3, #1
 801a502:	e000      	b.n	801a506 <tcp_output+0x1d6>
 801a504:	2300      	movs	r3, #0
 801a506:	2b00      	cmp	r3, #0
 801a508:	d106      	bne.n	801a518 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801a50a:	687b      	ldr	r3, [r7, #4]
 801a50c:	8b5b      	ldrh	r3, [r3, #26]
 801a50e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801a512:	2b00      	cmp	r3, #0
 801a514:	f000 80e7 	beq.w	801a6e6 <tcp_output+0x3b6>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801a518:	687b      	ldr	r3, [r7, #4]
 801a51a:	7d1b      	ldrb	r3, [r3, #20]
 801a51c:	2b02      	cmp	r3, #2
 801a51e:	d00d      	beq.n	801a53c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801a520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a522:	691b      	ldr	r3, [r3, #16]
 801a524:	899b      	ldrh	r3, [r3, #12]
 801a526:	b29c      	uxth	r4, r3
 801a528:	2010      	movs	r0, #16
 801a52a:	f7f8 fc79 	bl	8012e20 <lwip_htons>
 801a52e:	4603      	mov	r3, r0
 801a530:	461a      	mov	r2, r3
 801a532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a534:	691b      	ldr	r3, [r3, #16]
 801a536:	4322      	orrs	r2, r4
 801a538:	b292      	uxth	r2, r2
 801a53a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801a53c:	697a      	ldr	r2, [r7, #20]
 801a53e:	6879      	ldr	r1, [r7, #4]
 801a540:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a542:	f000 f90b 	bl	801a75c <tcp_output_segment>
 801a546:	4603      	mov	r3, r0
 801a548:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801a54a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a54e:	2b00      	cmp	r3, #0
 801a550:	d016      	beq.n	801a580 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a552:	687b      	ldr	r3, [r7, #4]
 801a554:	8b5b      	ldrh	r3, [r3, #26]
 801a556:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a55a:	b29a      	uxth	r2, r3
 801a55c:	687b      	ldr	r3, [r7, #4]
 801a55e:	835a      	strh	r2, [r3, #26]
      return err;
 801a560:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a564:	e0d6      	b.n	801a714 <tcp_output+0x3e4>
 801a566:	bf00      	nop
 801a568:	08024478 	.word	0x08024478
 801a56c:	08024a18 	.word	0x08024a18
 801a570:	080244cc 	.word	0x080244cc
 801a574:	08024a30 	.word	0x08024a30
 801a578:	2002d4bc 	.word	0x2002d4bc
 801a57c:	08024a58 	.word	0x08024a58
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 801a580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a582:	2200      	movs	r2, #0
 801a584:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801a586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a588:	681a      	ldr	r2, [r3, #0]
 801a58a:	687b      	ldr	r3, [r7, #4]
 801a58c:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 801a58e:	687b      	ldr	r3, [r7, #4]
 801a590:	7d1b      	ldrb	r3, [r3, #20]
 801a592:	2b02      	cmp	r3, #2
 801a594:	d006      	beq.n	801a5a4 <tcp_output+0x274>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a596:	687b      	ldr	r3, [r7, #4]
 801a598:	8b5b      	ldrh	r3, [r3, #26]
 801a59a:	f023 0303 	bic.w	r3, r3, #3
 801a59e:	b29a      	uxth	r2, r3
 801a5a0:	687b      	ldr	r3, [r7, #4]
 801a5a2:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801a5a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5a6:	691b      	ldr	r3, [r3, #16]
 801a5a8:	685b      	ldr	r3, [r3, #4]
 801a5aa:	4618      	mov	r0, r3
 801a5ac:	f7f8 fc4e 	bl	8012e4c <lwip_htonl>
 801a5b0:	4604      	mov	r4, r0
 801a5b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5b4:	891b      	ldrh	r3, [r3, #8]
 801a5b6:	461d      	mov	r5, r3
 801a5b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5ba:	691b      	ldr	r3, [r3, #16]
 801a5bc:	899b      	ldrh	r3, [r3, #12]
 801a5be:	b29b      	uxth	r3, r3
 801a5c0:	4618      	mov	r0, r3
 801a5c2:	f7f8 fc2d 	bl	8012e20 <lwip_htons>
 801a5c6:	4603      	mov	r3, r0
 801a5c8:	b2db      	uxtb	r3, r3
 801a5ca:	f003 0303 	and.w	r3, r3, #3
 801a5ce:	2b00      	cmp	r3, #0
 801a5d0:	d001      	beq.n	801a5d6 <tcp_output+0x2a6>
 801a5d2:	2301      	movs	r3, #1
 801a5d4:	e000      	b.n	801a5d8 <tcp_output+0x2a8>
 801a5d6:	2300      	movs	r3, #0
 801a5d8:	442b      	add	r3, r5
 801a5da:	4423      	add	r3, r4
 801a5dc:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801a5de:	687b      	ldr	r3, [r7, #4]
 801a5e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a5e2:	68bb      	ldr	r3, [r7, #8]
 801a5e4:	1ad3      	subs	r3, r2, r3
 801a5e6:	2b00      	cmp	r3, #0
 801a5e8:	da02      	bge.n	801a5f0 <tcp_output+0x2c0>
      pcb->snd_nxt = snd_nxt;
 801a5ea:	687b      	ldr	r3, [r7, #4]
 801a5ec:	68ba      	ldr	r2, [r7, #8]
 801a5ee:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801a5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5f2:	891b      	ldrh	r3, [r3, #8]
 801a5f4:	461c      	mov	r4, r3
 801a5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5f8:	691b      	ldr	r3, [r3, #16]
 801a5fa:	899b      	ldrh	r3, [r3, #12]
 801a5fc:	b29b      	uxth	r3, r3
 801a5fe:	4618      	mov	r0, r3
 801a600:	f7f8 fc0e 	bl	8012e20 <lwip_htons>
 801a604:	4603      	mov	r3, r0
 801a606:	b2db      	uxtb	r3, r3
 801a608:	f003 0303 	and.w	r3, r3, #3
 801a60c:	2b00      	cmp	r3, #0
 801a60e:	d001      	beq.n	801a614 <tcp_output+0x2e4>
 801a610:	2301      	movs	r3, #1
 801a612:	e000      	b.n	801a616 <tcp_output+0x2e6>
 801a614:	2300      	movs	r3, #0
 801a616:	4423      	add	r3, r4
 801a618:	2b00      	cmp	r3, #0
 801a61a:	d049      	beq.n	801a6b0 <tcp_output+0x380>
      seg->next = NULL;
 801a61c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a61e:	2200      	movs	r2, #0
 801a620:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801a622:	687b      	ldr	r3, [r7, #4]
 801a624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a626:	2b00      	cmp	r3, #0
 801a628:	d105      	bne.n	801a636 <tcp_output+0x306>
        pcb->unacked = seg;
 801a62a:	687b      	ldr	r3, [r7, #4]
 801a62c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a62e:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801a630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a632:	623b      	str	r3, [r7, #32]
 801a634:	e03f      	b.n	801a6b6 <tcp_output+0x386>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801a636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a638:	691b      	ldr	r3, [r3, #16]
 801a63a:	685b      	ldr	r3, [r3, #4]
 801a63c:	4618      	mov	r0, r3
 801a63e:	f7f8 fc05 	bl	8012e4c <lwip_htonl>
 801a642:	4604      	mov	r4, r0
 801a644:	6a3b      	ldr	r3, [r7, #32]
 801a646:	691b      	ldr	r3, [r3, #16]
 801a648:	685b      	ldr	r3, [r3, #4]
 801a64a:	4618      	mov	r0, r3
 801a64c:	f7f8 fbfe 	bl	8012e4c <lwip_htonl>
 801a650:	4603      	mov	r3, r0
 801a652:	1ae3      	subs	r3, r4, r3
 801a654:	2b00      	cmp	r3, #0
 801a656:	da24      	bge.n	801a6a2 <tcp_output+0x372>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801a658:	687b      	ldr	r3, [r7, #4]
 801a65a:	3370      	adds	r3, #112	@ 0x70
 801a65c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801a65e:	e002      	b.n	801a666 <tcp_output+0x336>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801a660:	69fb      	ldr	r3, [r7, #28]
 801a662:	681b      	ldr	r3, [r3, #0]
 801a664:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801a666:	69fb      	ldr	r3, [r7, #28]
 801a668:	681b      	ldr	r3, [r3, #0]
 801a66a:	2b00      	cmp	r3, #0
 801a66c:	d011      	beq.n	801a692 <tcp_output+0x362>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801a66e:	69fb      	ldr	r3, [r7, #28]
 801a670:	681b      	ldr	r3, [r3, #0]
 801a672:	691b      	ldr	r3, [r3, #16]
 801a674:	685b      	ldr	r3, [r3, #4]
 801a676:	4618      	mov	r0, r3
 801a678:	f7f8 fbe8 	bl	8012e4c <lwip_htonl>
 801a67c:	4604      	mov	r4, r0
 801a67e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a680:	691b      	ldr	r3, [r3, #16]
 801a682:	685b      	ldr	r3, [r3, #4]
 801a684:	4618      	mov	r0, r3
 801a686:	f7f8 fbe1 	bl	8012e4c <lwip_htonl>
 801a68a:	4603      	mov	r3, r0
 801a68c:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801a68e:	2b00      	cmp	r3, #0
 801a690:	dbe6      	blt.n	801a660 <tcp_output+0x330>
          }
          seg->next = (*cur_seg);
 801a692:	69fb      	ldr	r3, [r7, #28]
 801a694:	681a      	ldr	r2, [r3, #0]
 801a696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a698:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801a69a:	69fb      	ldr	r3, [r7, #28]
 801a69c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a69e:	601a      	str	r2, [r3, #0]
 801a6a0:	e009      	b.n	801a6b6 <tcp_output+0x386>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801a6a2:	6a3b      	ldr	r3, [r7, #32]
 801a6a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a6a6:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801a6a8:	6a3b      	ldr	r3, [r7, #32]
 801a6aa:	681b      	ldr	r3, [r3, #0]
 801a6ac:	623b      	str	r3, [r7, #32]
 801a6ae:	e002      	b.n	801a6b6 <tcp_output+0x386>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801a6b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a6b2:	f7fb fdea 	bl	801628a <tcp_seg_free>
    }
    seg = pcb->unsent;
 801a6b6:	687b      	ldr	r3, [r7, #4]
 801a6b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a6ba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801a6bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6be:	2b00      	cmp	r3, #0
 801a6c0:	d012      	beq.n	801a6e8 <tcp_output+0x3b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801a6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6c4:	691b      	ldr	r3, [r3, #16]
 801a6c6:	685b      	ldr	r3, [r3, #4]
 801a6c8:	4618      	mov	r0, r3
 801a6ca:	f7f8 fbbf 	bl	8012e4c <lwip_htonl>
 801a6ce:	4602      	mov	r2, r0
 801a6d0:	687b      	ldr	r3, [r7, #4]
 801a6d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a6d4:	1ad3      	subs	r3, r2, r3
 801a6d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a6d8:	8912      	ldrh	r2, [r2, #8]
 801a6da:	4413      	add	r3, r2
  while (seg != NULL &&
 801a6dc:	69ba      	ldr	r2, [r7, #24]
 801a6de:	429a      	cmp	r2, r3
 801a6e0:	f4bf aed6 	bcs.w	801a490 <tcp_output+0x160>
 801a6e4:	e000      	b.n	801a6e8 <tcp_output+0x3b8>
      break;
 801a6e6:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801a6e8:	687b      	ldr	r3, [r7, #4]
 801a6ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a6ec:	2b00      	cmp	r3, #0
 801a6ee:	d108      	bne.n	801a702 <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801a6f0:	687b      	ldr	r3, [r7, #4]
 801a6f2:	2200      	movs	r2, #0
 801a6f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801a6f8:	e004      	b.n	801a704 <tcp_output+0x3d4>
    goto output_done;
 801a6fa:	bf00      	nop
 801a6fc:	e002      	b.n	801a704 <tcp_output+0x3d4>
    goto output_done;
 801a6fe:	bf00      	nop
 801a700:	e000      	b.n	801a704 <tcp_output+0x3d4>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801a702:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	8b5b      	ldrh	r3, [r3, #26]
 801a708:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801a70c:	b29a      	uxth	r2, r3
 801a70e:	687b      	ldr	r3, [r7, #4]
 801a710:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801a712:	2300      	movs	r3, #0
}
 801a714:	4618      	mov	r0, r3
 801a716:	3728      	adds	r7, #40	@ 0x28
 801a718:	46bd      	mov	sp, r7
 801a71a:	bdb0      	pop	{r4, r5, r7, pc}

0801a71c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801a71c:	b580      	push	{r7, lr}
 801a71e:	b082      	sub	sp, #8
 801a720:	af00      	add	r7, sp, #0
 801a722:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801a724:	687b      	ldr	r3, [r7, #4]
 801a726:	2b00      	cmp	r3, #0
 801a728:	d106      	bne.n	801a738 <tcp_output_segment_busy+0x1c>
 801a72a:	4b09      	ldr	r3, [pc, #36]	@ (801a750 <tcp_output_segment_busy+0x34>)
 801a72c:	f240 529a 	movw	r2, #1434	@ 0x59a
 801a730:	4908      	ldr	r1, [pc, #32]	@ (801a754 <tcp_output_segment_busy+0x38>)
 801a732:	4809      	ldr	r0, [pc, #36]	@ (801a758 <tcp_output_segment_busy+0x3c>)
 801a734:	f006 f830 	bl	8020798 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801a738:	687b      	ldr	r3, [r7, #4]
 801a73a:	685b      	ldr	r3, [r3, #4]
 801a73c:	7b9b      	ldrb	r3, [r3, #14]
 801a73e:	2b01      	cmp	r3, #1
 801a740:	d001      	beq.n	801a746 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801a742:	2301      	movs	r3, #1
 801a744:	e000      	b.n	801a748 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801a746:	2300      	movs	r3, #0
}
 801a748:	4618      	mov	r0, r3
 801a74a:	3708      	adds	r7, #8
 801a74c:	46bd      	mov	sp, r7
 801a74e:	bd80      	pop	{r7, pc}
 801a750:	08024478 	.word	0x08024478
 801a754:	08024a70 	.word	0x08024a70
 801a758:	080244cc 	.word	0x080244cc

0801a75c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801a75c:	b5b0      	push	{r4, r5, r7, lr}
 801a75e:	b08c      	sub	sp, #48	@ 0x30
 801a760:	af04      	add	r7, sp, #16
 801a762:	60f8      	str	r0, [r7, #12]
 801a764:	60b9      	str	r1, [r7, #8]
 801a766:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801a768:	68fb      	ldr	r3, [r7, #12]
 801a76a:	2b00      	cmp	r3, #0
 801a76c:	d106      	bne.n	801a77c <tcp_output_segment+0x20>
 801a76e:	4b68      	ldr	r3, [pc, #416]	@ (801a910 <tcp_output_segment+0x1b4>)
 801a770:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 801a774:	4967      	ldr	r1, [pc, #412]	@ (801a914 <tcp_output_segment+0x1b8>)
 801a776:	4868      	ldr	r0, [pc, #416]	@ (801a918 <tcp_output_segment+0x1bc>)
 801a778:	f006 f80e 	bl	8020798 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801a77c:	68bb      	ldr	r3, [r7, #8]
 801a77e:	2b00      	cmp	r3, #0
 801a780:	d106      	bne.n	801a790 <tcp_output_segment+0x34>
 801a782:	4b63      	ldr	r3, [pc, #396]	@ (801a910 <tcp_output_segment+0x1b4>)
 801a784:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 801a788:	4964      	ldr	r1, [pc, #400]	@ (801a91c <tcp_output_segment+0x1c0>)
 801a78a:	4863      	ldr	r0, [pc, #396]	@ (801a918 <tcp_output_segment+0x1bc>)
 801a78c:	f006 f804 	bl	8020798 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801a790:	687b      	ldr	r3, [r7, #4]
 801a792:	2b00      	cmp	r3, #0
 801a794:	d106      	bne.n	801a7a4 <tcp_output_segment+0x48>
 801a796:	4b5e      	ldr	r3, [pc, #376]	@ (801a910 <tcp_output_segment+0x1b4>)
 801a798:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 801a79c:	4960      	ldr	r1, [pc, #384]	@ (801a920 <tcp_output_segment+0x1c4>)
 801a79e:	485e      	ldr	r0, [pc, #376]	@ (801a918 <tcp_output_segment+0x1bc>)
 801a7a0:	f005 fffa 	bl	8020798 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801a7a4:	68f8      	ldr	r0, [r7, #12]
 801a7a6:	f7ff ffb9 	bl	801a71c <tcp_output_segment_busy>
 801a7aa:	4603      	mov	r3, r0
 801a7ac:	2b00      	cmp	r3, #0
 801a7ae:	d001      	beq.n	801a7b4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801a7b0:	2300      	movs	r3, #0
 801a7b2:	e0a9      	b.n	801a908 <tcp_output_segment+0x1ac>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801a7b4:	68bb      	ldr	r3, [r7, #8]
 801a7b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801a7b8:	68fb      	ldr	r3, [r7, #12]
 801a7ba:	691c      	ldr	r4, [r3, #16]
 801a7bc:	4610      	mov	r0, r2
 801a7be:	f7f8 fb45 	bl	8012e4c <lwip_htonl>
 801a7c2:	4603      	mov	r3, r0
 801a7c4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801a7c6:	68bb      	ldr	r3, [r7, #8]
 801a7c8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801a7ca:	68fb      	ldr	r3, [r7, #12]
 801a7cc:	691c      	ldr	r4, [r3, #16]
 801a7ce:	4610      	mov	r0, r2
 801a7d0:	f7f8 fb26 	bl	8012e20 <lwip_htons>
 801a7d4:	4603      	mov	r3, r0
 801a7d6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801a7d8:	68bb      	ldr	r3, [r7, #8]
 801a7da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a7dc:	68ba      	ldr	r2, [r7, #8]
 801a7de:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801a7e0:	441a      	add	r2, r3
 801a7e2:	68bb      	ldr	r3, [r7, #8]
 801a7e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801a7e6:	68fb      	ldr	r3, [r7, #12]
 801a7e8:	691b      	ldr	r3, [r3, #16]
 801a7ea:	3314      	adds	r3, #20
 801a7ec:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801a7ee:	68fb      	ldr	r3, [r7, #12]
 801a7f0:	7b1b      	ldrb	r3, [r3, #12]
 801a7f2:	f003 0301 	and.w	r3, r3, #1
 801a7f6:	2b00      	cmp	r3, #0
 801a7f8:	d015      	beq.n	801a826 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801a7fa:	68bb      	ldr	r3, [r7, #8]
 801a7fc:	3304      	adds	r3, #4
 801a7fe:	461a      	mov	r2, r3
 801a800:	6879      	ldr	r1, [r7, #4]
 801a802:	f44f 7006 	mov.w	r0, #536	@ 0x218
 801a806:	f7fc f92f 	bl	8016a68 <tcp_eff_send_mss_netif>
 801a80a:	4603      	mov	r3, r0
 801a80c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801a80e:	8b7b      	ldrh	r3, [r7, #26]
 801a810:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 801a814:	4618      	mov	r0, r3
 801a816:	f7f8 fb19 	bl	8012e4c <lwip_htonl>
 801a81a:	4602      	mov	r2, r0
 801a81c:	69fb      	ldr	r3, [r7, #28]
 801a81e:	601a      	str	r2, [r3, #0]
    opts += 1;
 801a820:	69fb      	ldr	r3, [r7, #28]
 801a822:	3304      	adds	r3, #4
 801a824:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801a826:	68bb      	ldr	r3, [r7, #8]
 801a828:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801a82c:	2b00      	cmp	r3, #0
 801a82e:	da02      	bge.n	801a836 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801a830:	68bb      	ldr	r3, [r7, #8]
 801a832:	2200      	movs	r2, #0
 801a834:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 801a836:	68bb      	ldr	r3, [r7, #8]
 801a838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a83a:	2b00      	cmp	r3, #0
 801a83c:	d10c      	bne.n	801a858 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801a83e:	4b39      	ldr	r3, [pc, #228]	@ (801a924 <tcp_output_segment+0x1c8>)
 801a840:	681a      	ldr	r2, [r3, #0]
 801a842:	68bb      	ldr	r3, [r7, #8]
 801a844:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801a846:	68fb      	ldr	r3, [r7, #12]
 801a848:	691b      	ldr	r3, [r3, #16]
 801a84a:	685b      	ldr	r3, [r3, #4]
 801a84c:	4618      	mov	r0, r3
 801a84e:	f7f8 fafd 	bl	8012e4c <lwip_htonl>
 801a852:	4602      	mov	r2, r0
 801a854:	68bb      	ldr	r3, [r7, #8]
 801a856:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801a858:	68fb      	ldr	r3, [r7, #12]
 801a85a:	691a      	ldr	r2, [r3, #16]
 801a85c:	68fb      	ldr	r3, [r7, #12]
 801a85e:	685b      	ldr	r3, [r3, #4]
 801a860:	685b      	ldr	r3, [r3, #4]
 801a862:	1ad3      	subs	r3, r2, r3
 801a864:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801a866:	68fb      	ldr	r3, [r7, #12]
 801a868:	685b      	ldr	r3, [r3, #4]
 801a86a:	8959      	ldrh	r1, [r3, #10]
 801a86c:	68fb      	ldr	r3, [r7, #12]
 801a86e:	685b      	ldr	r3, [r3, #4]
 801a870:	8b3a      	ldrh	r2, [r7, #24]
 801a872:	1a8a      	subs	r2, r1, r2
 801a874:	b292      	uxth	r2, r2
 801a876:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801a878:	68fb      	ldr	r3, [r7, #12]
 801a87a:	685b      	ldr	r3, [r3, #4]
 801a87c:	8919      	ldrh	r1, [r3, #8]
 801a87e:	68fb      	ldr	r3, [r7, #12]
 801a880:	685b      	ldr	r3, [r3, #4]
 801a882:	8b3a      	ldrh	r2, [r7, #24]
 801a884:	1a8a      	subs	r2, r1, r2
 801a886:	b292      	uxth	r2, r2
 801a888:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801a88a:	68fb      	ldr	r3, [r7, #12]
 801a88c:	685b      	ldr	r3, [r3, #4]
 801a88e:	68fa      	ldr	r2, [r7, #12]
 801a890:	6912      	ldr	r2, [r2, #16]
 801a892:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801a894:	68fb      	ldr	r3, [r7, #12]
 801a896:	691b      	ldr	r3, [r3, #16]
 801a898:	2200      	movs	r2, #0
 801a89a:	741a      	strb	r2, [r3, #16]
 801a89c:	2200      	movs	r2, #0
 801a89e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801a8a0:	68fb      	ldr	r3, [r7, #12]
 801a8a2:	691a      	ldr	r2, [r3, #16]
 801a8a4:	68fb      	ldr	r3, [r7, #12]
 801a8a6:	7b1b      	ldrb	r3, [r3, #12]
 801a8a8:	f003 0301 	and.w	r3, r3, #1
 801a8ac:	2b00      	cmp	r3, #0
 801a8ae:	d001      	beq.n	801a8b4 <tcp_output_segment+0x158>
 801a8b0:	2318      	movs	r3, #24
 801a8b2:	e000      	b.n	801a8b6 <tcp_output_segment+0x15a>
 801a8b4:	2314      	movs	r3, #20
 801a8b6:	4413      	add	r3, r2
 801a8b8:	69fa      	ldr	r2, [r7, #28]
 801a8ba:	429a      	cmp	r2, r3
 801a8bc:	d006      	beq.n	801a8cc <tcp_output_segment+0x170>
 801a8be:	4b14      	ldr	r3, [pc, #80]	@ (801a910 <tcp_output_segment+0x1b4>)
 801a8c0:	f240 621c 	movw	r2, #1564	@ 0x61c
 801a8c4:	4918      	ldr	r1, [pc, #96]	@ (801a928 <tcp_output_segment+0x1cc>)
 801a8c6:	4814      	ldr	r0, [pc, #80]	@ (801a918 <tcp_output_segment+0x1bc>)
 801a8c8:	f005 ff66 	bl	8020798 <iprintf>
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 801a8cc:	4b17      	ldr	r3, [pc, #92]	@ (801a92c <tcp_output_segment+0x1d0>)
 801a8ce:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 801a8d2:	3301      	adds	r3, #1
 801a8d4:	b29a      	uxth	r2, r3
 801a8d6:	4b15      	ldr	r3, [pc, #84]	@ (801a92c <tcp_output_segment+0x1d0>)
 801a8d8:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801a8dc:	68fb      	ldr	r3, [r7, #12]
 801a8de:	6858      	ldr	r0, [r3, #4]
 801a8e0:	68b9      	ldr	r1, [r7, #8]
 801a8e2:	68bb      	ldr	r3, [r7, #8]
 801a8e4:	1d1c      	adds	r4, r3, #4
 801a8e6:	68bb      	ldr	r3, [r7, #8]
 801a8e8:	7add      	ldrb	r5, [r3, #11]
 801a8ea:	68bb      	ldr	r3, [r7, #8]
 801a8ec:	7a9b      	ldrb	r3, [r3, #10]
 801a8ee:	687a      	ldr	r2, [r7, #4]
 801a8f0:	9202      	str	r2, [sp, #8]
 801a8f2:	2206      	movs	r2, #6
 801a8f4:	9201      	str	r2, [sp, #4]
 801a8f6:	9300      	str	r3, [sp, #0]
 801a8f8:	462b      	mov	r3, r5
 801a8fa:	4622      	mov	r2, r4
 801a8fc:	f003 f95e 	bl	801dbbc <ip4_output_if>
 801a900:	4603      	mov	r3, r0
 801a902:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801a904:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a908:	4618      	mov	r0, r3
 801a90a:	3720      	adds	r7, #32
 801a90c:	46bd      	mov	sp, r7
 801a90e:	bdb0      	pop	{r4, r5, r7, pc}
 801a910:	08024478 	.word	0x08024478
 801a914:	08024a98 	.word	0x08024a98
 801a918:	080244cc 	.word	0x080244cc
 801a91c:	08024ab8 	.word	0x08024ab8
 801a920:	08024ad8 	.word	0x08024ad8
 801a924:	2002d46c 	.word	0x2002d46c
 801a928:	08024afc 	.word	0x08024afc
 801a92c:	2002d36c 	.word	0x2002d36c

0801a930 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801a930:	b5b0      	push	{r4, r5, r7, lr}
 801a932:	b084      	sub	sp, #16
 801a934:	af00      	add	r7, sp, #0
 801a936:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801a938:	687b      	ldr	r3, [r7, #4]
 801a93a:	2b00      	cmp	r3, #0
 801a93c:	d106      	bne.n	801a94c <tcp_rexmit_rto_prepare+0x1c>
 801a93e:	4b36      	ldr	r3, [pc, #216]	@ (801aa18 <tcp_rexmit_rto_prepare+0xe8>)
 801a940:	f240 6263 	movw	r2, #1635	@ 0x663
 801a944:	4935      	ldr	r1, [pc, #212]	@ (801aa1c <tcp_rexmit_rto_prepare+0xec>)
 801a946:	4836      	ldr	r0, [pc, #216]	@ (801aa20 <tcp_rexmit_rto_prepare+0xf0>)
 801a948:	f005 ff26 	bl	8020798 <iprintf>

  if (pcb->unacked == NULL) {
 801a94c:	687b      	ldr	r3, [r7, #4]
 801a94e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a950:	2b00      	cmp	r3, #0
 801a952:	d102      	bne.n	801a95a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801a954:	f06f 0305 	mvn.w	r3, #5
 801a958:	e059      	b.n	801aa0e <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801a95a:	687b      	ldr	r3, [r7, #4]
 801a95c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a95e:	60fb      	str	r3, [r7, #12]
 801a960:	e00b      	b.n	801a97a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801a962:	68f8      	ldr	r0, [r7, #12]
 801a964:	f7ff feda 	bl	801a71c <tcp_output_segment_busy>
 801a968:	4603      	mov	r3, r0
 801a96a:	2b00      	cmp	r3, #0
 801a96c:	d002      	beq.n	801a974 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801a96e:	f06f 0305 	mvn.w	r3, #5
 801a972:	e04c      	b.n	801aa0e <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801a974:	68fb      	ldr	r3, [r7, #12]
 801a976:	681b      	ldr	r3, [r3, #0]
 801a978:	60fb      	str	r3, [r7, #12]
 801a97a:	68fb      	ldr	r3, [r7, #12]
 801a97c:	681b      	ldr	r3, [r3, #0]
 801a97e:	2b00      	cmp	r3, #0
 801a980:	d1ef      	bne.n	801a962 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801a982:	68f8      	ldr	r0, [r7, #12]
 801a984:	f7ff feca 	bl	801a71c <tcp_output_segment_busy>
 801a988:	4603      	mov	r3, r0
 801a98a:	2b00      	cmp	r3, #0
 801a98c:	d002      	beq.n	801a994 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801a98e:	f06f 0305 	mvn.w	r3, #5
 801a992:	e03c      	b.n	801aa0e <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801a994:	687b      	ldr	r3, [r7, #4]
 801a996:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801a998:	68fb      	ldr	r3, [r7, #12]
 801a99a:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 801a99c:	687b      	ldr	r3, [r7, #4]
 801a99e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a9a0:	2b00      	cmp	r3, #0
 801a9a2:	d104      	bne.n	801a9ae <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 801a9a4:	68fb      	ldr	r3, [r7, #12]
 801a9a6:	895a      	ldrh	r2, [r3, #10]
 801a9a8:	687b      	ldr	r3, [r7, #4]
 801a9aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801a9ae:	687b      	ldr	r3, [r7, #4]
 801a9b0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801a9b2:	687b      	ldr	r3, [r7, #4]
 801a9b4:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801a9b6:	687b      	ldr	r3, [r7, #4]
 801a9b8:	2200      	movs	r2, #0
 801a9ba:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801a9bc:	687b      	ldr	r3, [r7, #4]
 801a9be:	8b5b      	ldrh	r3, [r3, #26]
 801a9c0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801a9c4:	b29a      	uxth	r2, r3
 801a9c6:	687b      	ldr	r3, [r7, #4]
 801a9c8:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801a9ca:	68fb      	ldr	r3, [r7, #12]
 801a9cc:	691b      	ldr	r3, [r3, #16]
 801a9ce:	685b      	ldr	r3, [r3, #4]
 801a9d0:	4618      	mov	r0, r3
 801a9d2:	f7f8 fa3b 	bl	8012e4c <lwip_htonl>
 801a9d6:	4604      	mov	r4, r0
 801a9d8:	68fb      	ldr	r3, [r7, #12]
 801a9da:	891b      	ldrh	r3, [r3, #8]
 801a9dc:	461d      	mov	r5, r3
 801a9de:	68fb      	ldr	r3, [r7, #12]
 801a9e0:	691b      	ldr	r3, [r3, #16]
 801a9e2:	899b      	ldrh	r3, [r3, #12]
 801a9e4:	b29b      	uxth	r3, r3
 801a9e6:	4618      	mov	r0, r3
 801a9e8:	f7f8 fa1a 	bl	8012e20 <lwip_htons>
 801a9ec:	4603      	mov	r3, r0
 801a9ee:	b2db      	uxtb	r3, r3
 801a9f0:	f003 0303 	and.w	r3, r3, #3
 801a9f4:	2b00      	cmp	r3, #0
 801a9f6:	d001      	beq.n	801a9fc <tcp_rexmit_rto_prepare+0xcc>
 801a9f8:	2301      	movs	r3, #1
 801a9fa:	e000      	b.n	801a9fe <tcp_rexmit_rto_prepare+0xce>
 801a9fc:	2300      	movs	r3, #0
 801a9fe:	442b      	add	r3, r5
 801aa00:	18e2      	adds	r2, r4, r3
 801aa02:	687b      	ldr	r3, [r7, #4]
 801aa04:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801aa06:	687b      	ldr	r3, [r7, #4]
 801aa08:	2200      	movs	r2, #0
 801aa0a:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801aa0c:	2300      	movs	r3, #0
}
 801aa0e:	4618      	mov	r0, r3
 801aa10:	3710      	adds	r7, #16
 801aa12:	46bd      	mov	sp, r7
 801aa14:	bdb0      	pop	{r4, r5, r7, pc}
 801aa16:	bf00      	nop
 801aa18:	08024478 	.word	0x08024478
 801aa1c:	08024b10 	.word	0x08024b10
 801aa20:	080244cc 	.word	0x080244cc

0801aa24 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801aa24:	b580      	push	{r7, lr}
 801aa26:	b082      	sub	sp, #8
 801aa28:	af00      	add	r7, sp, #0
 801aa2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801aa2c:	687b      	ldr	r3, [r7, #4]
 801aa2e:	2b00      	cmp	r3, #0
 801aa30:	d106      	bne.n	801aa40 <tcp_rexmit_rto_commit+0x1c>
 801aa32:	4b0d      	ldr	r3, [pc, #52]	@ (801aa68 <tcp_rexmit_rto_commit+0x44>)
 801aa34:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801aa38:	490c      	ldr	r1, [pc, #48]	@ (801aa6c <tcp_rexmit_rto_commit+0x48>)
 801aa3a:	480d      	ldr	r0, [pc, #52]	@ (801aa70 <tcp_rexmit_rto_commit+0x4c>)
 801aa3c:	f005 feac 	bl	8020798 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801aa40:	687b      	ldr	r3, [r7, #4]
 801aa42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801aa46:	2bff      	cmp	r3, #255	@ 0xff
 801aa48:	d007      	beq.n	801aa5a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801aa50:	3301      	adds	r3, #1
 801aa52:	b2da      	uxtb	r2, r3
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801aa5a:	6878      	ldr	r0, [r7, #4]
 801aa5c:	f7ff fc68 	bl	801a330 <tcp_output>
}
 801aa60:	bf00      	nop
 801aa62:	3708      	adds	r7, #8
 801aa64:	46bd      	mov	sp, r7
 801aa66:	bd80      	pop	{r7, pc}
 801aa68:	08024478 	.word	0x08024478
 801aa6c:	08024b34 	.word	0x08024b34
 801aa70:	080244cc 	.word	0x080244cc

0801aa74 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801aa74:	b580      	push	{r7, lr}
 801aa76:	b082      	sub	sp, #8
 801aa78:	af00      	add	r7, sp, #0
 801aa7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801aa7c:	687b      	ldr	r3, [r7, #4]
 801aa7e:	2b00      	cmp	r3, #0
 801aa80:	d106      	bne.n	801aa90 <tcp_rexmit_rto+0x1c>
 801aa82:	4b0a      	ldr	r3, [pc, #40]	@ (801aaac <tcp_rexmit_rto+0x38>)
 801aa84:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 801aa88:	4909      	ldr	r1, [pc, #36]	@ (801aab0 <tcp_rexmit_rto+0x3c>)
 801aa8a:	480a      	ldr	r0, [pc, #40]	@ (801aab4 <tcp_rexmit_rto+0x40>)
 801aa8c:	f005 fe84 	bl	8020798 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801aa90:	6878      	ldr	r0, [r7, #4]
 801aa92:	f7ff ff4d 	bl	801a930 <tcp_rexmit_rto_prepare>
 801aa96:	4603      	mov	r3, r0
 801aa98:	2b00      	cmp	r3, #0
 801aa9a:	d102      	bne.n	801aaa2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801aa9c:	6878      	ldr	r0, [r7, #4]
 801aa9e:	f7ff ffc1 	bl	801aa24 <tcp_rexmit_rto_commit>
  }
}
 801aaa2:	bf00      	nop
 801aaa4:	3708      	adds	r7, #8
 801aaa6:	46bd      	mov	sp, r7
 801aaa8:	bd80      	pop	{r7, pc}
 801aaaa:	bf00      	nop
 801aaac:	08024478 	.word	0x08024478
 801aab0:	08024b58 	.word	0x08024b58
 801aab4:	080244cc 	.word	0x080244cc

0801aab8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801aab8:	b590      	push	{r4, r7, lr}
 801aaba:	b085      	sub	sp, #20
 801aabc:	af00      	add	r7, sp, #0
 801aabe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801aac0:	687b      	ldr	r3, [r7, #4]
 801aac2:	2b00      	cmp	r3, #0
 801aac4:	d106      	bne.n	801aad4 <tcp_rexmit+0x1c>
 801aac6:	4b2f      	ldr	r3, [pc, #188]	@ (801ab84 <tcp_rexmit+0xcc>)
 801aac8:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 801aacc:	492e      	ldr	r1, [pc, #184]	@ (801ab88 <tcp_rexmit+0xd0>)
 801aace:	482f      	ldr	r0, [pc, #188]	@ (801ab8c <tcp_rexmit+0xd4>)
 801aad0:	f005 fe62 	bl	8020798 <iprintf>

  if (pcb->unacked == NULL) {
 801aad4:	687b      	ldr	r3, [r7, #4]
 801aad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801aad8:	2b00      	cmp	r3, #0
 801aada:	d102      	bne.n	801aae2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801aadc:	f06f 0305 	mvn.w	r3, #5
 801aae0:	e04c      	b.n	801ab7c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801aae2:	687b      	ldr	r3, [r7, #4]
 801aae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801aae6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801aae8:	68b8      	ldr	r0, [r7, #8]
 801aaea:	f7ff fe17 	bl	801a71c <tcp_output_segment_busy>
 801aaee:	4603      	mov	r3, r0
 801aaf0:	2b00      	cmp	r3, #0
 801aaf2:	d002      	beq.n	801aafa <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801aaf4:	f06f 0305 	mvn.w	r3, #5
 801aaf8:	e040      	b.n	801ab7c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801aafa:	68bb      	ldr	r3, [r7, #8]
 801aafc:	681a      	ldr	r2, [r3, #0]
 801aafe:	687b      	ldr	r3, [r7, #4]
 801ab00:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 801ab02:	687b      	ldr	r3, [r7, #4]
 801ab04:	336c      	adds	r3, #108	@ 0x6c
 801ab06:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801ab08:	e002      	b.n	801ab10 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801ab0a:	68fb      	ldr	r3, [r7, #12]
 801ab0c:	681b      	ldr	r3, [r3, #0]
 801ab0e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801ab10:	68fb      	ldr	r3, [r7, #12]
 801ab12:	681b      	ldr	r3, [r3, #0]
 801ab14:	2b00      	cmp	r3, #0
 801ab16:	d011      	beq.n	801ab3c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801ab18:	68fb      	ldr	r3, [r7, #12]
 801ab1a:	681b      	ldr	r3, [r3, #0]
 801ab1c:	691b      	ldr	r3, [r3, #16]
 801ab1e:	685b      	ldr	r3, [r3, #4]
 801ab20:	4618      	mov	r0, r3
 801ab22:	f7f8 f993 	bl	8012e4c <lwip_htonl>
 801ab26:	4604      	mov	r4, r0
 801ab28:	68bb      	ldr	r3, [r7, #8]
 801ab2a:	691b      	ldr	r3, [r3, #16]
 801ab2c:	685b      	ldr	r3, [r3, #4]
 801ab2e:	4618      	mov	r0, r3
 801ab30:	f7f8 f98c 	bl	8012e4c <lwip_htonl>
 801ab34:	4603      	mov	r3, r0
 801ab36:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801ab38:	2b00      	cmp	r3, #0
 801ab3a:	dbe6      	blt.n	801ab0a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801ab3c:	68fb      	ldr	r3, [r7, #12]
 801ab3e:	681a      	ldr	r2, [r3, #0]
 801ab40:	68bb      	ldr	r3, [r7, #8]
 801ab42:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801ab44:	68fb      	ldr	r3, [r7, #12]
 801ab46:	68ba      	ldr	r2, [r7, #8]
 801ab48:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801ab4a:	68bb      	ldr	r3, [r7, #8]
 801ab4c:	681b      	ldr	r3, [r3, #0]
 801ab4e:	2b00      	cmp	r3, #0
 801ab50:	d103      	bne.n	801ab5a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801ab52:	687b      	ldr	r3, [r7, #4]
 801ab54:	2200      	movs	r2, #0
 801ab56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801ab5a:	687b      	ldr	r3, [r7, #4]
 801ab5c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801ab60:	2bff      	cmp	r3, #255	@ 0xff
 801ab62:	d007      	beq.n	801ab74 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801ab64:	687b      	ldr	r3, [r7, #4]
 801ab66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801ab6a:	3301      	adds	r3, #1
 801ab6c:	b2da      	uxtb	r2, r3
 801ab6e:	687b      	ldr	r3, [r7, #4]
 801ab70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801ab74:	687b      	ldr	r3, [r7, #4]
 801ab76:	2200      	movs	r2, #0
 801ab78:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801ab7a:	2300      	movs	r3, #0
}
 801ab7c:	4618      	mov	r0, r3
 801ab7e:	3714      	adds	r7, #20
 801ab80:	46bd      	mov	sp, r7
 801ab82:	bd90      	pop	{r4, r7, pc}
 801ab84:	08024478 	.word	0x08024478
 801ab88:	08024b74 	.word	0x08024b74
 801ab8c:	080244cc 	.word	0x080244cc

0801ab90 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801ab90:	b580      	push	{r7, lr}
 801ab92:	b082      	sub	sp, #8
 801ab94:	af00      	add	r7, sp, #0
 801ab96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	2b00      	cmp	r3, #0
 801ab9c:	d106      	bne.n	801abac <tcp_rexmit_fast+0x1c>
 801ab9e:	4b2a      	ldr	r3, [pc, #168]	@ (801ac48 <tcp_rexmit_fast+0xb8>)
 801aba0:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 801aba4:	4929      	ldr	r1, [pc, #164]	@ (801ac4c <tcp_rexmit_fast+0xbc>)
 801aba6:	482a      	ldr	r0, [pc, #168]	@ (801ac50 <tcp_rexmit_fast+0xc0>)
 801aba8:	f005 fdf6 	bl	8020798 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801abac:	687b      	ldr	r3, [r7, #4]
 801abae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801abb0:	2b00      	cmp	r3, #0
 801abb2:	d045      	beq.n	801ac40 <tcp_rexmit_fast+0xb0>
 801abb4:	687b      	ldr	r3, [r7, #4]
 801abb6:	8b5b      	ldrh	r3, [r3, #26]
 801abb8:	f003 0304 	and.w	r3, r3, #4
 801abbc:	2b00      	cmp	r3, #0
 801abbe:	d13f      	bne.n	801ac40 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801abc0:	6878      	ldr	r0, [r7, #4]
 801abc2:	f7ff ff79 	bl	801aab8 <tcp_rexmit>
 801abc6:	4603      	mov	r3, r0
 801abc8:	2b00      	cmp	r3, #0
 801abca:	d139      	bne.n	801ac40 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801abd2:	687b      	ldr	r3, [r7, #4]
 801abd4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801abd8:	4293      	cmp	r3, r2
 801abda:	bf28      	it	cs
 801abdc:	4613      	movcs	r3, r2
 801abde:	b29b      	uxth	r3, r3
 801abe0:	2b00      	cmp	r3, #0
 801abe2:	da00      	bge.n	801abe6 <tcp_rexmit_fast+0x56>
 801abe4:	3301      	adds	r3, #1
 801abe6:	105b      	asrs	r3, r3, #1
 801abe8:	b29a      	uxth	r2, r3
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801abf0:	687b      	ldr	r3, [r7, #4]
 801abf2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801abf6:	461a      	mov	r2, r3
 801abf8:	687b      	ldr	r3, [r7, #4]
 801abfa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801abfc:	005b      	lsls	r3, r3, #1
 801abfe:	429a      	cmp	r2, r3
 801ac00:	d206      	bcs.n	801ac10 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801ac02:	687b      	ldr	r3, [r7, #4]
 801ac04:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801ac06:	005b      	lsls	r3, r3, #1
 801ac08:	b29a      	uxth	r2, r3
 801ac0a:	687b      	ldr	r3, [r7, #4]
 801ac0c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801ac10:	687b      	ldr	r3, [r7, #4]
 801ac12:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801ac16:	687b      	ldr	r3, [r7, #4]
 801ac18:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801ac1a:	4619      	mov	r1, r3
 801ac1c:	0049      	lsls	r1, r1, #1
 801ac1e:	440b      	add	r3, r1
 801ac20:	b29b      	uxth	r3, r3
 801ac22:	4413      	add	r3, r2
 801ac24:	b29a      	uxth	r2, r3
 801ac26:	687b      	ldr	r3, [r7, #4]
 801ac28:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 801ac2c:	687b      	ldr	r3, [r7, #4]
 801ac2e:	8b5b      	ldrh	r3, [r3, #26]
 801ac30:	f043 0304 	orr.w	r3, r3, #4
 801ac34:	b29a      	uxth	r2, r3
 801ac36:	687b      	ldr	r3, [r7, #4]
 801ac38:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801ac3a:	687b      	ldr	r3, [r7, #4]
 801ac3c:	2200      	movs	r2, #0
 801ac3e:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 801ac40:	bf00      	nop
 801ac42:	3708      	adds	r7, #8
 801ac44:	46bd      	mov	sp, r7
 801ac46:	bd80      	pop	{r7, pc}
 801ac48:	08024478 	.word	0x08024478
 801ac4c:	08024b8c 	.word	0x08024b8c
 801ac50:	080244cc 	.word	0x080244cc

0801ac54 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801ac54:	b580      	push	{r7, lr}
 801ac56:	b086      	sub	sp, #24
 801ac58:	af00      	add	r7, sp, #0
 801ac5a:	60f8      	str	r0, [r7, #12]
 801ac5c:	607b      	str	r3, [r7, #4]
 801ac5e:	460b      	mov	r3, r1
 801ac60:	817b      	strh	r3, [r7, #10]
 801ac62:	4613      	mov	r3, r2
 801ac64:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801ac66:	897a      	ldrh	r2, [r7, #10]
 801ac68:	893b      	ldrh	r3, [r7, #8]
 801ac6a:	4413      	add	r3, r2
 801ac6c:	b29b      	uxth	r3, r3
 801ac6e:	3314      	adds	r3, #20
 801ac70:	b29b      	uxth	r3, r3
 801ac72:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801ac76:	4619      	mov	r1, r3
 801ac78:	2022      	movs	r0, #34	@ 0x22
 801ac7a:	f7f9 fbd3 	bl	8014424 <pbuf_alloc>
 801ac7e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801ac80:	697b      	ldr	r3, [r7, #20]
 801ac82:	2b00      	cmp	r3, #0
 801ac84:	d04d      	beq.n	801ad22 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801ac86:	897b      	ldrh	r3, [r7, #10]
 801ac88:	3313      	adds	r3, #19
 801ac8a:	697a      	ldr	r2, [r7, #20]
 801ac8c:	8952      	ldrh	r2, [r2, #10]
 801ac8e:	4293      	cmp	r3, r2
 801ac90:	db06      	blt.n	801aca0 <tcp_output_alloc_header_common+0x4c>
 801ac92:	4b26      	ldr	r3, [pc, #152]	@ (801ad2c <tcp_output_alloc_header_common+0xd8>)
 801ac94:	f240 7223 	movw	r2, #1827	@ 0x723
 801ac98:	4925      	ldr	r1, [pc, #148]	@ (801ad30 <tcp_output_alloc_header_common+0xdc>)
 801ac9a:	4826      	ldr	r0, [pc, #152]	@ (801ad34 <tcp_output_alloc_header_common+0xe0>)
 801ac9c:	f005 fd7c 	bl	8020798 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801aca0:	697b      	ldr	r3, [r7, #20]
 801aca2:	685b      	ldr	r3, [r3, #4]
 801aca4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801aca6:	8c3b      	ldrh	r3, [r7, #32]
 801aca8:	4618      	mov	r0, r3
 801acaa:	f7f8 f8b9 	bl	8012e20 <lwip_htons>
 801acae:	4603      	mov	r3, r0
 801acb0:	461a      	mov	r2, r3
 801acb2:	693b      	ldr	r3, [r7, #16]
 801acb4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801acb6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801acb8:	4618      	mov	r0, r3
 801acba:	f7f8 f8b1 	bl	8012e20 <lwip_htons>
 801acbe:	4603      	mov	r3, r0
 801acc0:	461a      	mov	r2, r3
 801acc2:	693b      	ldr	r3, [r7, #16]
 801acc4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801acc6:	693b      	ldr	r3, [r7, #16]
 801acc8:	687a      	ldr	r2, [r7, #4]
 801acca:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801accc:	68f8      	ldr	r0, [r7, #12]
 801acce:	f7f8 f8bd 	bl	8012e4c <lwip_htonl>
 801acd2:	4602      	mov	r2, r0
 801acd4:	693b      	ldr	r3, [r7, #16]
 801acd6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801acd8:	897b      	ldrh	r3, [r7, #10]
 801acda:	089b      	lsrs	r3, r3, #2
 801acdc:	b29b      	uxth	r3, r3
 801acde:	3305      	adds	r3, #5
 801ace0:	b29b      	uxth	r3, r3
 801ace2:	031b      	lsls	r3, r3, #12
 801ace4:	b29a      	uxth	r2, r3
 801ace6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801acea:	b29b      	uxth	r3, r3
 801acec:	4313      	orrs	r3, r2
 801acee:	b29b      	uxth	r3, r3
 801acf0:	4618      	mov	r0, r3
 801acf2:	f7f8 f895 	bl	8012e20 <lwip_htons>
 801acf6:	4603      	mov	r3, r0
 801acf8:	461a      	mov	r2, r3
 801acfa:	693b      	ldr	r3, [r7, #16]
 801acfc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801acfe:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801ad00:	4618      	mov	r0, r3
 801ad02:	f7f8 f88d 	bl	8012e20 <lwip_htons>
 801ad06:	4603      	mov	r3, r0
 801ad08:	461a      	mov	r2, r3
 801ad0a:	693b      	ldr	r3, [r7, #16]
 801ad0c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801ad0e:	693b      	ldr	r3, [r7, #16]
 801ad10:	2200      	movs	r2, #0
 801ad12:	741a      	strb	r2, [r3, #16]
 801ad14:	2200      	movs	r2, #0
 801ad16:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801ad18:	693b      	ldr	r3, [r7, #16]
 801ad1a:	2200      	movs	r2, #0
 801ad1c:	749a      	strb	r2, [r3, #18]
 801ad1e:	2200      	movs	r2, #0
 801ad20:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801ad22:	697b      	ldr	r3, [r7, #20]
}
 801ad24:	4618      	mov	r0, r3
 801ad26:	3718      	adds	r7, #24
 801ad28:	46bd      	mov	sp, r7
 801ad2a:	bd80      	pop	{r7, pc}
 801ad2c:	08024478 	.word	0x08024478
 801ad30:	08024bac 	.word	0x08024bac
 801ad34:	080244cc 	.word	0x080244cc

0801ad38 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801ad38:	b5b0      	push	{r4, r5, r7, lr}
 801ad3a:	b08a      	sub	sp, #40	@ 0x28
 801ad3c:	af04      	add	r7, sp, #16
 801ad3e:	60f8      	str	r0, [r7, #12]
 801ad40:	607b      	str	r3, [r7, #4]
 801ad42:	460b      	mov	r3, r1
 801ad44:	817b      	strh	r3, [r7, #10]
 801ad46:	4613      	mov	r3, r2
 801ad48:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801ad4a:	68fb      	ldr	r3, [r7, #12]
 801ad4c:	2b00      	cmp	r3, #0
 801ad4e:	d106      	bne.n	801ad5e <tcp_output_alloc_header+0x26>
 801ad50:	4b15      	ldr	r3, [pc, #84]	@ (801ada8 <tcp_output_alloc_header+0x70>)
 801ad52:	f240 7242 	movw	r2, #1858	@ 0x742
 801ad56:	4915      	ldr	r1, [pc, #84]	@ (801adac <tcp_output_alloc_header+0x74>)
 801ad58:	4815      	ldr	r0, [pc, #84]	@ (801adb0 <tcp_output_alloc_header+0x78>)
 801ad5a:	f005 fd1d 	bl	8020798 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801ad5e:	68fb      	ldr	r3, [r7, #12]
 801ad60:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801ad62:	68fb      	ldr	r3, [r7, #12]
 801ad64:	8adb      	ldrh	r3, [r3, #22]
 801ad66:	68fa      	ldr	r2, [r7, #12]
 801ad68:	8b12      	ldrh	r2, [r2, #24]
 801ad6a:	68f9      	ldr	r1, [r7, #12]
 801ad6c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 801ad6e:	893d      	ldrh	r5, [r7, #8]
 801ad70:	897c      	ldrh	r4, [r7, #10]
 801ad72:	9103      	str	r1, [sp, #12]
 801ad74:	2110      	movs	r1, #16
 801ad76:	9102      	str	r1, [sp, #8]
 801ad78:	9201      	str	r2, [sp, #4]
 801ad7a:	9300      	str	r3, [sp, #0]
 801ad7c:	687b      	ldr	r3, [r7, #4]
 801ad7e:	462a      	mov	r2, r5
 801ad80:	4621      	mov	r1, r4
 801ad82:	f7ff ff67 	bl	801ac54 <tcp_output_alloc_header_common>
 801ad86:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801ad88:	697b      	ldr	r3, [r7, #20]
 801ad8a:	2b00      	cmp	r3, #0
 801ad8c:	d006      	beq.n	801ad9c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801ad8e:	68fb      	ldr	r3, [r7, #12]
 801ad90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ad92:	68fa      	ldr	r2, [r7, #12]
 801ad94:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801ad96:	441a      	add	r2, r3
 801ad98:	68fb      	ldr	r3, [r7, #12]
 801ad9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 801ad9c:	697b      	ldr	r3, [r7, #20]
}
 801ad9e:	4618      	mov	r0, r3
 801ada0:	3718      	adds	r7, #24
 801ada2:	46bd      	mov	sp, r7
 801ada4:	bdb0      	pop	{r4, r5, r7, pc}
 801ada6:	bf00      	nop
 801ada8:	08024478 	.word	0x08024478
 801adac:	08024bdc 	.word	0x08024bdc
 801adb0:	080244cc 	.word	0x080244cc

0801adb4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801adb4:	b580      	push	{r7, lr}
 801adb6:	b088      	sub	sp, #32
 801adb8:	af00      	add	r7, sp, #0
 801adba:	60f8      	str	r0, [r7, #12]
 801adbc:	60b9      	str	r1, [r7, #8]
 801adbe:	4611      	mov	r1, r2
 801adc0:	461a      	mov	r2, r3
 801adc2:	460b      	mov	r3, r1
 801adc4:	71fb      	strb	r3, [r7, #7]
 801adc6:	4613      	mov	r3, r2
 801adc8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801adca:	2300      	movs	r3, #0
 801adcc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801adce:	68bb      	ldr	r3, [r7, #8]
 801add0:	2b00      	cmp	r3, #0
 801add2:	d106      	bne.n	801ade2 <tcp_output_fill_options+0x2e>
 801add4:	4b12      	ldr	r3, [pc, #72]	@ (801ae20 <tcp_output_fill_options+0x6c>)
 801add6:	f240 7256 	movw	r2, #1878	@ 0x756
 801adda:	4912      	ldr	r1, [pc, #72]	@ (801ae24 <tcp_output_fill_options+0x70>)
 801addc:	4812      	ldr	r0, [pc, #72]	@ (801ae28 <tcp_output_fill_options+0x74>)
 801adde:	f005 fcdb 	bl	8020798 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801ade2:	68bb      	ldr	r3, [r7, #8]
 801ade4:	685b      	ldr	r3, [r3, #4]
 801ade6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801ade8:	69bb      	ldr	r3, [r7, #24]
 801adea:	3314      	adds	r3, #20
 801adec:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801adee:	8bfb      	ldrh	r3, [r7, #30]
 801adf0:	009b      	lsls	r3, r3, #2
 801adf2:	461a      	mov	r2, r3
 801adf4:	79fb      	ldrb	r3, [r7, #7]
 801adf6:	009b      	lsls	r3, r3, #2
 801adf8:	f003 0304 	and.w	r3, r3, #4
 801adfc:	4413      	add	r3, r2
 801adfe:	3314      	adds	r3, #20
 801ae00:	69ba      	ldr	r2, [r7, #24]
 801ae02:	4413      	add	r3, r2
 801ae04:	697a      	ldr	r2, [r7, #20]
 801ae06:	429a      	cmp	r2, r3
 801ae08:	d006      	beq.n	801ae18 <tcp_output_fill_options+0x64>
 801ae0a:	4b05      	ldr	r3, [pc, #20]	@ (801ae20 <tcp_output_fill_options+0x6c>)
 801ae0c:	f240 7275 	movw	r2, #1909	@ 0x775
 801ae10:	4906      	ldr	r1, [pc, #24]	@ (801ae2c <tcp_output_fill_options+0x78>)
 801ae12:	4805      	ldr	r0, [pc, #20]	@ (801ae28 <tcp_output_fill_options+0x74>)
 801ae14:	f005 fcc0 	bl	8020798 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801ae18:	bf00      	nop
 801ae1a:	3720      	adds	r7, #32
 801ae1c:	46bd      	mov	sp, r7
 801ae1e:	bd80      	pop	{r7, pc}
 801ae20:	08024478 	.word	0x08024478
 801ae24:	08024c04 	.word	0x08024c04
 801ae28:	080244cc 	.word	0x080244cc
 801ae2c:	08024afc 	.word	0x08024afc

0801ae30 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801ae30:	b580      	push	{r7, lr}
 801ae32:	b08a      	sub	sp, #40	@ 0x28
 801ae34:	af04      	add	r7, sp, #16
 801ae36:	60f8      	str	r0, [r7, #12]
 801ae38:	60b9      	str	r1, [r7, #8]
 801ae3a:	607a      	str	r2, [r7, #4]
 801ae3c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801ae3e:	68bb      	ldr	r3, [r7, #8]
 801ae40:	2b00      	cmp	r3, #0
 801ae42:	d106      	bne.n	801ae52 <tcp_output_control_segment+0x22>
 801ae44:	4b20      	ldr	r3, [pc, #128]	@ (801aec8 <tcp_output_control_segment+0x98>)
 801ae46:	f240 7287 	movw	r2, #1927	@ 0x787
 801ae4a:	4920      	ldr	r1, [pc, #128]	@ (801aecc <tcp_output_control_segment+0x9c>)
 801ae4c:	4820      	ldr	r0, [pc, #128]	@ (801aed0 <tcp_output_control_segment+0xa0>)
 801ae4e:	f005 fca3 	bl	8020798 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801ae52:	683a      	ldr	r2, [r7, #0]
 801ae54:	6879      	ldr	r1, [r7, #4]
 801ae56:	68f8      	ldr	r0, [r7, #12]
 801ae58:	f7fe fa38 	bl	80192cc <tcp_route>
 801ae5c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801ae5e:	693b      	ldr	r3, [r7, #16]
 801ae60:	2b00      	cmp	r3, #0
 801ae62:	d102      	bne.n	801ae6a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801ae64:	23fc      	movs	r3, #252	@ 0xfc
 801ae66:	75fb      	strb	r3, [r7, #23]
 801ae68:	e024      	b.n	801aeb4 <tcp_output_control_segment+0x84>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801ae6a:	68fb      	ldr	r3, [r7, #12]
 801ae6c:	2b00      	cmp	r3, #0
 801ae6e:	d006      	beq.n	801ae7e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801ae70:	68fb      	ldr	r3, [r7, #12]
 801ae72:	7adb      	ldrb	r3, [r3, #11]
 801ae74:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801ae76:	68fb      	ldr	r3, [r7, #12]
 801ae78:	7a9b      	ldrb	r3, [r3, #10]
 801ae7a:	757b      	strb	r3, [r7, #21]
 801ae7c:	e003      	b.n	801ae86 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801ae7e:	23ff      	movs	r3, #255	@ 0xff
 801ae80:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801ae82:	2300      	movs	r3, #0
 801ae84:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
 801ae86:	4b13      	ldr	r3, [pc, #76]	@ (801aed4 <tcp_output_control_segment+0xa4>)
 801ae88:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 801ae8c:	3301      	adds	r3, #1
 801ae8e:	b29a      	uxth	r2, r3
 801ae90:	4b10      	ldr	r3, [pc, #64]	@ (801aed4 <tcp_output_control_segment+0xa4>)
 801ae92:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801ae96:	7dba      	ldrb	r2, [r7, #22]
 801ae98:	693b      	ldr	r3, [r7, #16]
 801ae9a:	9302      	str	r3, [sp, #8]
 801ae9c:	2306      	movs	r3, #6
 801ae9e:	9301      	str	r3, [sp, #4]
 801aea0:	7d7b      	ldrb	r3, [r7, #21]
 801aea2:	9300      	str	r3, [sp, #0]
 801aea4:	4613      	mov	r3, r2
 801aea6:	683a      	ldr	r2, [r7, #0]
 801aea8:	6879      	ldr	r1, [r7, #4]
 801aeaa:	68b8      	ldr	r0, [r7, #8]
 801aeac:	f002 fe86 	bl	801dbbc <ip4_output_if>
 801aeb0:	4603      	mov	r3, r0
 801aeb2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801aeb4:	68b8      	ldr	r0, [r7, #8]
 801aeb6:	f7f9 fde1 	bl	8014a7c <pbuf_free>
  return err;
 801aeba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801aebe:	4618      	mov	r0, r3
 801aec0:	3718      	adds	r7, #24
 801aec2:	46bd      	mov	sp, r7
 801aec4:	bd80      	pop	{r7, pc}
 801aec6:	bf00      	nop
 801aec8:	08024478 	.word	0x08024478
 801aecc:	08024c2c 	.word	0x08024c2c
 801aed0:	080244cc 	.word	0x080244cc
 801aed4:	2002d36c 	.word	0x2002d36c

0801aed8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801aed8:	b590      	push	{r4, r7, lr}
 801aeda:	b08b      	sub	sp, #44	@ 0x2c
 801aedc:	af04      	add	r7, sp, #16
 801aede:	60f8      	str	r0, [r7, #12]
 801aee0:	60b9      	str	r1, [r7, #8]
 801aee2:	607a      	str	r2, [r7, #4]
 801aee4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801aee6:	683b      	ldr	r3, [r7, #0]
 801aee8:	2b00      	cmp	r3, #0
 801aeea:	d106      	bne.n	801aefa <tcp_rst+0x22>
 801aeec:	4b1f      	ldr	r3, [pc, #124]	@ (801af6c <tcp_rst+0x94>)
 801aeee:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801aef2:	491f      	ldr	r1, [pc, #124]	@ (801af70 <tcp_rst+0x98>)
 801aef4:	481f      	ldr	r0, [pc, #124]	@ (801af74 <tcp_rst+0x9c>)
 801aef6:	f005 fc4f 	bl	8020798 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801aefa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aefc:	2b00      	cmp	r3, #0
 801aefe:	d106      	bne.n	801af0e <tcp_rst+0x36>
 801af00:	4b1a      	ldr	r3, [pc, #104]	@ (801af6c <tcp_rst+0x94>)
 801af02:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801af06:	491c      	ldr	r1, [pc, #112]	@ (801af78 <tcp_rst+0xa0>)
 801af08:	481a      	ldr	r0, [pc, #104]	@ (801af74 <tcp_rst+0x9c>)
 801af0a:	f005 fc45 	bl	8020798 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801af0e:	2300      	movs	r3, #0
 801af10:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801af12:	f246 0308 	movw	r3, #24584	@ 0x6008
 801af16:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801af18:	7dfb      	ldrb	r3, [r7, #23]
 801af1a:	b29c      	uxth	r4, r3
 801af1c:	68b8      	ldr	r0, [r7, #8]
 801af1e:	f7f7 ff95 	bl	8012e4c <lwip_htonl>
 801af22:	4602      	mov	r2, r0
 801af24:	8abb      	ldrh	r3, [r7, #20]
 801af26:	9303      	str	r3, [sp, #12]
 801af28:	2314      	movs	r3, #20
 801af2a:	9302      	str	r3, [sp, #8]
 801af2c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801af2e:	9301      	str	r3, [sp, #4]
 801af30:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801af32:	9300      	str	r3, [sp, #0]
 801af34:	4613      	mov	r3, r2
 801af36:	2200      	movs	r2, #0
 801af38:	4621      	mov	r1, r4
 801af3a:	6878      	ldr	r0, [r7, #4]
 801af3c:	f7ff fe8a 	bl	801ac54 <tcp_output_alloc_header_common>
 801af40:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801af42:	693b      	ldr	r3, [r7, #16]
 801af44:	2b00      	cmp	r3, #0
 801af46:	d00c      	beq.n	801af62 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801af48:	7dfb      	ldrb	r3, [r7, #23]
 801af4a:	2200      	movs	r2, #0
 801af4c:	6939      	ldr	r1, [r7, #16]
 801af4e:	68f8      	ldr	r0, [r7, #12]
 801af50:	f7ff ff30 	bl	801adb4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801af54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801af56:	683a      	ldr	r2, [r7, #0]
 801af58:	6939      	ldr	r1, [r7, #16]
 801af5a:	68f8      	ldr	r0, [r7, #12]
 801af5c:	f7ff ff68 	bl	801ae30 <tcp_output_control_segment>
 801af60:	e000      	b.n	801af64 <tcp_rst+0x8c>
    return;
 801af62:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801af64:	371c      	adds	r7, #28
 801af66:	46bd      	mov	sp, r7
 801af68:	bd90      	pop	{r4, r7, pc}
 801af6a:	bf00      	nop
 801af6c:	08024478 	.word	0x08024478
 801af70:	08024c58 	.word	0x08024c58
 801af74:	080244cc 	.word	0x080244cc
 801af78:	08024c74 	.word	0x08024c74

0801af7c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801af7c:	b590      	push	{r4, r7, lr}
 801af7e:	b087      	sub	sp, #28
 801af80:	af00      	add	r7, sp, #0
 801af82:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801af84:	2300      	movs	r3, #0
 801af86:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801af88:	2300      	movs	r3, #0
 801af8a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801af8c:	687b      	ldr	r3, [r7, #4]
 801af8e:	2b00      	cmp	r3, #0
 801af90:	d106      	bne.n	801afa0 <tcp_send_empty_ack+0x24>
 801af92:	4b28      	ldr	r3, [pc, #160]	@ (801b034 <tcp_send_empty_ack+0xb8>)
 801af94:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 801af98:	4927      	ldr	r1, [pc, #156]	@ (801b038 <tcp_send_empty_ack+0xbc>)
 801af9a:	4828      	ldr	r0, [pc, #160]	@ (801b03c <tcp_send_empty_ack+0xc0>)
 801af9c:	f005 fbfc 	bl	8020798 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801afa0:	7dfb      	ldrb	r3, [r7, #23]
 801afa2:	009b      	lsls	r3, r3, #2
 801afa4:	b2db      	uxtb	r3, r3
 801afa6:	f003 0304 	and.w	r3, r3, #4
 801afaa:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801afac:	7d7b      	ldrb	r3, [r7, #21]
 801afae:	b29c      	uxth	r4, r3
 801afb0:	687b      	ldr	r3, [r7, #4]
 801afb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801afb4:	4618      	mov	r0, r3
 801afb6:	f7f7 ff49 	bl	8012e4c <lwip_htonl>
 801afba:	4603      	mov	r3, r0
 801afbc:	2200      	movs	r2, #0
 801afbe:	4621      	mov	r1, r4
 801afc0:	6878      	ldr	r0, [r7, #4]
 801afc2:	f7ff feb9 	bl	801ad38 <tcp_output_alloc_header>
 801afc6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801afc8:	693b      	ldr	r3, [r7, #16]
 801afca:	2b00      	cmp	r3, #0
 801afcc:	d109      	bne.n	801afe2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801afce:	687b      	ldr	r3, [r7, #4]
 801afd0:	8b5b      	ldrh	r3, [r3, #26]
 801afd2:	f043 0303 	orr.w	r3, r3, #3
 801afd6:	b29a      	uxth	r2, r3
 801afd8:	687b      	ldr	r3, [r7, #4]
 801afda:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801afdc:	f06f 0301 	mvn.w	r3, #1
 801afe0:	e023      	b.n	801b02a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801afe2:	7dbb      	ldrb	r3, [r7, #22]
 801afe4:	7dfa      	ldrb	r2, [r7, #23]
 801afe6:	6939      	ldr	r1, [r7, #16]
 801afe8:	6878      	ldr	r0, [r7, #4]
 801afea:	f7ff fee3 	bl	801adb4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801afee:	687a      	ldr	r2, [r7, #4]
 801aff0:	687b      	ldr	r3, [r7, #4]
 801aff2:	3304      	adds	r3, #4
 801aff4:	6939      	ldr	r1, [r7, #16]
 801aff6:	6878      	ldr	r0, [r7, #4]
 801aff8:	f7ff ff1a 	bl	801ae30 <tcp_output_control_segment>
 801affc:	4603      	mov	r3, r0
 801affe:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801b000:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b004:	2b00      	cmp	r3, #0
 801b006:	d007      	beq.n	801b018 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b008:	687b      	ldr	r3, [r7, #4]
 801b00a:	8b5b      	ldrh	r3, [r3, #26]
 801b00c:	f043 0303 	orr.w	r3, r3, #3
 801b010:	b29a      	uxth	r2, r3
 801b012:	687b      	ldr	r3, [r7, #4]
 801b014:	835a      	strh	r2, [r3, #26]
 801b016:	e006      	b.n	801b026 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b018:	687b      	ldr	r3, [r7, #4]
 801b01a:	8b5b      	ldrh	r3, [r3, #26]
 801b01c:	f023 0303 	bic.w	r3, r3, #3
 801b020:	b29a      	uxth	r2, r3
 801b022:	687b      	ldr	r3, [r7, #4]
 801b024:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801b026:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b02a:	4618      	mov	r0, r3
 801b02c:	371c      	adds	r7, #28
 801b02e:	46bd      	mov	sp, r7
 801b030:	bd90      	pop	{r4, r7, pc}
 801b032:	bf00      	nop
 801b034:	08024478 	.word	0x08024478
 801b038:	08024c90 	.word	0x08024c90
 801b03c:	080244cc 	.word	0x080244cc

0801b040 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801b040:	b590      	push	{r4, r7, lr}
 801b042:	b085      	sub	sp, #20
 801b044:	af00      	add	r7, sp, #0
 801b046:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b048:	2300      	movs	r3, #0
 801b04a:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801b04c:	687b      	ldr	r3, [r7, #4]
 801b04e:	2b00      	cmp	r3, #0
 801b050:	d106      	bne.n	801b060 <tcp_keepalive+0x20>
 801b052:	4b18      	ldr	r3, [pc, #96]	@ (801b0b4 <tcp_keepalive+0x74>)
 801b054:	f640 0224 	movw	r2, #2084	@ 0x824
 801b058:	4917      	ldr	r1, [pc, #92]	@ (801b0b8 <tcp_keepalive+0x78>)
 801b05a:	4818      	ldr	r0, [pc, #96]	@ (801b0bc <tcp_keepalive+0x7c>)
 801b05c:	f005 fb9c 	bl	8020798 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801b060:	7abb      	ldrb	r3, [r7, #10]
 801b062:	b29c      	uxth	r4, r3
 801b064:	687b      	ldr	r3, [r7, #4]
 801b066:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b068:	3b01      	subs	r3, #1
 801b06a:	4618      	mov	r0, r3
 801b06c:	f7f7 feee 	bl	8012e4c <lwip_htonl>
 801b070:	4603      	mov	r3, r0
 801b072:	2200      	movs	r2, #0
 801b074:	4621      	mov	r1, r4
 801b076:	6878      	ldr	r0, [r7, #4]
 801b078:	f7ff fe5e 	bl	801ad38 <tcp_output_alloc_header>
 801b07c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801b07e:	68fb      	ldr	r3, [r7, #12]
 801b080:	2b00      	cmp	r3, #0
 801b082:	d102      	bne.n	801b08a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801b084:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b088:	e010      	b.n	801b0ac <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b08a:	7abb      	ldrb	r3, [r7, #10]
 801b08c:	2200      	movs	r2, #0
 801b08e:	68f9      	ldr	r1, [r7, #12]
 801b090:	6878      	ldr	r0, [r7, #4]
 801b092:	f7ff fe8f 	bl	801adb4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b096:	687a      	ldr	r2, [r7, #4]
 801b098:	687b      	ldr	r3, [r7, #4]
 801b09a:	3304      	adds	r3, #4
 801b09c:	68f9      	ldr	r1, [r7, #12]
 801b09e:	6878      	ldr	r0, [r7, #4]
 801b0a0:	f7ff fec6 	bl	801ae30 <tcp_output_control_segment>
 801b0a4:	4603      	mov	r3, r0
 801b0a6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801b0a8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801b0ac:	4618      	mov	r0, r3
 801b0ae:	3714      	adds	r7, #20
 801b0b0:	46bd      	mov	sp, r7
 801b0b2:	bd90      	pop	{r4, r7, pc}
 801b0b4:	08024478 	.word	0x08024478
 801b0b8:	08024cb0 	.word	0x08024cb0
 801b0bc:	080244cc 	.word	0x080244cc

0801b0c0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801b0c0:	b590      	push	{r4, r7, lr}
 801b0c2:	b08b      	sub	sp, #44	@ 0x2c
 801b0c4:	af00      	add	r7, sp, #0
 801b0c6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b0c8:	2300      	movs	r3, #0
 801b0ca:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801b0cc:	687b      	ldr	r3, [r7, #4]
 801b0ce:	2b00      	cmp	r3, #0
 801b0d0:	d106      	bne.n	801b0e0 <tcp_zero_window_probe+0x20>
 801b0d2:	4b4d      	ldr	r3, [pc, #308]	@ (801b208 <tcp_zero_window_probe+0x148>)
 801b0d4:	f640 024f 	movw	r2, #2127	@ 0x84f
 801b0d8:	494c      	ldr	r1, [pc, #304]	@ (801b20c <tcp_zero_window_probe+0x14c>)
 801b0da:	484d      	ldr	r0, [pc, #308]	@ (801b210 <tcp_zero_window_probe+0x150>)
 801b0dc:	f005 fb5c 	bl	8020798 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801b0e0:	687b      	ldr	r3, [r7, #4]
 801b0e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b0e4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (seg == NULL) {
 801b0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0e8:	2b00      	cmp	r3, #0
 801b0ea:	d101      	bne.n	801b0f0 <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801b0ec:	2300      	movs	r3, #0
 801b0ee:	e087      	b.n	801b200 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801b0f0:	687b      	ldr	r3, [r7, #4]
 801b0f2:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801b0f6:	2bff      	cmp	r3, #255	@ 0xff
 801b0f8:	d007      	beq.n	801b10a <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 801b0fa:	687b      	ldr	r3, [r7, #4]
 801b0fc:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801b100:	3301      	adds	r3, #1
 801b102:	b2da      	uxtb	r2, r3
 801b104:	687b      	ldr	r3, [r7, #4]
 801b106:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801b10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b10c:	691b      	ldr	r3, [r3, #16]
 801b10e:	899b      	ldrh	r3, [r3, #12]
 801b110:	b29b      	uxth	r3, r3
 801b112:	4618      	mov	r0, r3
 801b114:	f7f7 fe84 	bl	8012e20 <lwip_htons>
 801b118:	4603      	mov	r3, r0
 801b11a:	b2db      	uxtb	r3, r3
 801b11c:	f003 0301 	and.w	r3, r3, #1
 801b120:	2b00      	cmp	r3, #0
 801b122:	d005      	beq.n	801b130 <tcp_zero_window_probe+0x70>
 801b124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b126:	891b      	ldrh	r3, [r3, #8]
 801b128:	2b00      	cmp	r3, #0
 801b12a:	d101      	bne.n	801b130 <tcp_zero_window_probe+0x70>
 801b12c:	2301      	movs	r3, #1
 801b12e:	e000      	b.n	801b132 <tcp_zero_window_probe+0x72>
 801b130:	2300      	movs	r3, #0
 801b132:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801b136:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801b13a:	2b00      	cmp	r3, #0
 801b13c:	bf0c      	ite	eq
 801b13e:	2301      	moveq	r3, #1
 801b140:	2300      	movne	r3, #0
 801b142:	b2db      	uxtb	r3, r3
 801b144:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801b146:	7cfb      	ldrb	r3, [r7, #19]
 801b148:	b299      	uxth	r1, r3
 801b14a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b14c:	691b      	ldr	r3, [r3, #16]
 801b14e:	685b      	ldr	r3, [r3, #4]
 801b150:	8c3a      	ldrh	r2, [r7, #32]
 801b152:	6878      	ldr	r0, [r7, #4]
 801b154:	f7ff fdf0 	bl	801ad38 <tcp_output_alloc_header>
 801b158:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 801b15a:	69fb      	ldr	r3, [r7, #28]
 801b15c:	2b00      	cmp	r3, #0
 801b15e:	d102      	bne.n	801b166 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801b160:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b164:	e04c      	b.n	801b200 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801b166:	69fb      	ldr	r3, [r7, #28]
 801b168:	685b      	ldr	r3, [r3, #4]
 801b16a:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 801b16c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801b170:	2b00      	cmp	r3, #0
 801b172:	d011      	beq.n	801b198 <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801b174:	69bb      	ldr	r3, [r7, #24]
 801b176:	899b      	ldrh	r3, [r3, #12]
 801b178:	b29b      	uxth	r3, r3
 801b17a:	b21b      	sxth	r3, r3
 801b17c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801b180:	b21c      	sxth	r4, r3
 801b182:	2011      	movs	r0, #17
 801b184:	f7f7 fe4c 	bl	8012e20 <lwip_htons>
 801b188:	4603      	mov	r3, r0
 801b18a:	b21b      	sxth	r3, r3
 801b18c:	4323      	orrs	r3, r4
 801b18e:	b21b      	sxth	r3, r3
 801b190:	b29a      	uxth	r2, r3
 801b192:	69bb      	ldr	r3, [r7, #24]
 801b194:	819a      	strh	r2, [r3, #12]
 801b196:	e010      	b.n	801b1ba <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801b198:	69fb      	ldr	r3, [r7, #28]
 801b19a:	685b      	ldr	r3, [r3, #4]
 801b19c:	3314      	adds	r3, #20
 801b19e:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801b1a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b1a2:	6858      	ldr	r0, [r3, #4]
 801b1a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b1a6:	685b      	ldr	r3, [r3, #4]
 801b1a8:	891a      	ldrh	r2, [r3, #8]
 801b1aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b1ac:	891b      	ldrh	r3, [r3, #8]
 801b1ae:	1ad3      	subs	r3, r2, r3
 801b1b0:	b29b      	uxth	r3, r3
 801b1b2:	2201      	movs	r2, #1
 801b1b4:	6979      	ldr	r1, [r7, #20]
 801b1b6:	f7f9 fe93 	bl	8014ee0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801b1ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b1bc:	691b      	ldr	r3, [r3, #16]
 801b1be:	685b      	ldr	r3, [r3, #4]
 801b1c0:	4618      	mov	r0, r3
 801b1c2:	f7f7 fe43 	bl	8012e4c <lwip_htonl>
 801b1c6:	4603      	mov	r3, r0
 801b1c8:	3301      	adds	r3, #1
 801b1ca:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b1cc:	687b      	ldr	r3, [r7, #4]
 801b1ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b1d0:	68fb      	ldr	r3, [r7, #12]
 801b1d2:	1ad3      	subs	r3, r2, r3
 801b1d4:	2b00      	cmp	r3, #0
 801b1d6:	da02      	bge.n	801b1de <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 801b1d8:	687b      	ldr	r3, [r7, #4]
 801b1da:	68fa      	ldr	r2, [r7, #12]
 801b1dc:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b1de:	7cfb      	ldrb	r3, [r7, #19]
 801b1e0:	2200      	movs	r2, #0
 801b1e2:	69f9      	ldr	r1, [r7, #28]
 801b1e4:	6878      	ldr	r0, [r7, #4]
 801b1e6:	f7ff fde5 	bl	801adb4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b1ea:	687a      	ldr	r2, [r7, #4]
 801b1ec:	687b      	ldr	r3, [r7, #4]
 801b1ee:	3304      	adds	r3, #4
 801b1f0:	69f9      	ldr	r1, [r7, #28]
 801b1f2:	6878      	ldr	r0, [r7, #4]
 801b1f4:	f7ff fe1c 	bl	801ae30 <tcp_output_control_segment>
 801b1f8:	4603      	mov	r3, r0
 801b1fa:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801b1fc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801b200:	4618      	mov	r0, r3
 801b202:	372c      	adds	r7, #44	@ 0x2c
 801b204:	46bd      	mov	sp, r7
 801b206:	bd90      	pop	{r4, r7, pc}
 801b208:	08024478 	.word	0x08024478
 801b20c:	08024ccc 	.word	0x08024ccc
 801b210:	080244cc 	.word	0x080244cc

0801b214 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801b214:	b580      	push	{r7, lr}
 801b216:	b082      	sub	sp, #8
 801b218:	af00      	add	r7, sp, #0
 801b21a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801b21c:	f7f9 ff5e 	bl	80150dc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801b220:	4b0a      	ldr	r3, [pc, #40]	@ (801b24c <tcpip_tcp_timer+0x38>)
 801b222:	681b      	ldr	r3, [r3, #0]
 801b224:	2b00      	cmp	r3, #0
 801b226:	d103      	bne.n	801b230 <tcpip_tcp_timer+0x1c>
 801b228:	4b09      	ldr	r3, [pc, #36]	@ (801b250 <tcpip_tcp_timer+0x3c>)
 801b22a:	681b      	ldr	r3, [r3, #0]
 801b22c:	2b00      	cmp	r3, #0
 801b22e:	d005      	beq.n	801b23c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801b230:	2200      	movs	r2, #0
 801b232:	4908      	ldr	r1, [pc, #32]	@ (801b254 <tcpip_tcp_timer+0x40>)
 801b234:	20fa      	movs	r0, #250	@ 0xfa
 801b236:	f000 f8f3 	bl	801b420 <sys_timeout>
 801b23a:	e003      	b.n	801b244 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801b23c:	4b06      	ldr	r3, [pc, #24]	@ (801b258 <tcpip_tcp_timer+0x44>)
 801b23e:	2200      	movs	r2, #0
 801b240:	601a      	str	r2, [r3, #0]
  }
}
 801b242:	bf00      	nop
 801b244:	bf00      	nop
 801b246:	3708      	adds	r7, #8
 801b248:	46bd      	mov	sp, r7
 801b24a:	bd80      	pop	{r7, pc}
 801b24c:	2002d478 	.word	0x2002d478
 801b250:	2002d47c 	.word	0x2002d47c
 801b254:	0801b215 	.word	0x0801b215
 801b258:	2002d4c8 	.word	0x2002d4c8

0801b25c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801b25c:	b580      	push	{r7, lr}
 801b25e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801b260:	4b0a      	ldr	r3, [pc, #40]	@ (801b28c <tcp_timer_needed+0x30>)
 801b262:	681b      	ldr	r3, [r3, #0]
 801b264:	2b00      	cmp	r3, #0
 801b266:	d10f      	bne.n	801b288 <tcp_timer_needed+0x2c>
 801b268:	4b09      	ldr	r3, [pc, #36]	@ (801b290 <tcp_timer_needed+0x34>)
 801b26a:	681b      	ldr	r3, [r3, #0]
 801b26c:	2b00      	cmp	r3, #0
 801b26e:	d103      	bne.n	801b278 <tcp_timer_needed+0x1c>
 801b270:	4b08      	ldr	r3, [pc, #32]	@ (801b294 <tcp_timer_needed+0x38>)
 801b272:	681b      	ldr	r3, [r3, #0]
 801b274:	2b00      	cmp	r3, #0
 801b276:	d007      	beq.n	801b288 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801b278:	4b04      	ldr	r3, [pc, #16]	@ (801b28c <tcp_timer_needed+0x30>)
 801b27a:	2201      	movs	r2, #1
 801b27c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801b27e:	2200      	movs	r2, #0
 801b280:	4905      	ldr	r1, [pc, #20]	@ (801b298 <tcp_timer_needed+0x3c>)
 801b282:	20fa      	movs	r0, #250	@ 0xfa
 801b284:	f000 f8cc 	bl	801b420 <sys_timeout>
  }
}
 801b288:	bf00      	nop
 801b28a:	bd80      	pop	{r7, pc}
 801b28c:	2002d4c8 	.word	0x2002d4c8
 801b290:	2002d478 	.word	0x2002d478
 801b294:	2002d47c 	.word	0x2002d47c
 801b298:	0801b215 	.word	0x0801b215

0801b29c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801b29c:	b580      	push	{r7, lr}
 801b29e:	b086      	sub	sp, #24
 801b2a0:	af00      	add	r7, sp, #0
 801b2a2:	60f8      	str	r0, [r7, #12]
 801b2a4:	60b9      	str	r1, [r7, #8]
 801b2a6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801b2a8:	200a      	movs	r0, #10
 801b2aa:	f7f8 fb85 	bl	80139b8 <memp_malloc>
 801b2ae:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801b2b0:	693b      	ldr	r3, [r7, #16]
 801b2b2:	2b00      	cmp	r3, #0
 801b2b4:	d109      	bne.n	801b2ca <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801b2b6:	693b      	ldr	r3, [r7, #16]
 801b2b8:	2b00      	cmp	r3, #0
 801b2ba:	d151      	bne.n	801b360 <sys_timeout_abs+0xc4>
 801b2bc:	4b2a      	ldr	r3, [pc, #168]	@ (801b368 <sys_timeout_abs+0xcc>)
 801b2be:	22be      	movs	r2, #190	@ 0xbe
 801b2c0:	492a      	ldr	r1, [pc, #168]	@ (801b36c <sys_timeout_abs+0xd0>)
 801b2c2:	482b      	ldr	r0, [pc, #172]	@ (801b370 <sys_timeout_abs+0xd4>)
 801b2c4:	f005 fa68 	bl	8020798 <iprintf>
    return;
 801b2c8:	e04a      	b.n	801b360 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801b2ca:	693b      	ldr	r3, [r7, #16]
 801b2cc:	2200      	movs	r2, #0
 801b2ce:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801b2d0:	693b      	ldr	r3, [r7, #16]
 801b2d2:	68ba      	ldr	r2, [r7, #8]
 801b2d4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801b2d6:	693b      	ldr	r3, [r7, #16]
 801b2d8:	687a      	ldr	r2, [r7, #4]
 801b2da:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801b2dc:	693b      	ldr	r3, [r7, #16]
 801b2de:	68fa      	ldr	r2, [r7, #12]
 801b2e0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801b2e2:	4b24      	ldr	r3, [pc, #144]	@ (801b374 <sys_timeout_abs+0xd8>)
 801b2e4:	681b      	ldr	r3, [r3, #0]
 801b2e6:	2b00      	cmp	r3, #0
 801b2e8:	d103      	bne.n	801b2f2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801b2ea:	4a22      	ldr	r2, [pc, #136]	@ (801b374 <sys_timeout_abs+0xd8>)
 801b2ec:	693b      	ldr	r3, [r7, #16]
 801b2ee:	6013      	str	r3, [r2, #0]
    return;
 801b2f0:	e037      	b.n	801b362 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801b2f2:	693b      	ldr	r3, [r7, #16]
 801b2f4:	685a      	ldr	r2, [r3, #4]
 801b2f6:	4b1f      	ldr	r3, [pc, #124]	@ (801b374 <sys_timeout_abs+0xd8>)
 801b2f8:	681b      	ldr	r3, [r3, #0]
 801b2fa:	685b      	ldr	r3, [r3, #4]
 801b2fc:	1ad3      	subs	r3, r2, r3
 801b2fe:	0fdb      	lsrs	r3, r3, #31
 801b300:	f003 0301 	and.w	r3, r3, #1
 801b304:	b2db      	uxtb	r3, r3
 801b306:	2b00      	cmp	r3, #0
 801b308:	d007      	beq.n	801b31a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801b30a:	4b1a      	ldr	r3, [pc, #104]	@ (801b374 <sys_timeout_abs+0xd8>)
 801b30c:	681a      	ldr	r2, [r3, #0]
 801b30e:	693b      	ldr	r3, [r7, #16]
 801b310:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801b312:	4a18      	ldr	r2, [pc, #96]	@ (801b374 <sys_timeout_abs+0xd8>)
 801b314:	693b      	ldr	r3, [r7, #16]
 801b316:	6013      	str	r3, [r2, #0]
 801b318:	e023      	b.n	801b362 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801b31a:	4b16      	ldr	r3, [pc, #88]	@ (801b374 <sys_timeout_abs+0xd8>)
 801b31c:	681b      	ldr	r3, [r3, #0]
 801b31e:	617b      	str	r3, [r7, #20]
 801b320:	e01a      	b.n	801b358 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801b322:	697b      	ldr	r3, [r7, #20]
 801b324:	681b      	ldr	r3, [r3, #0]
 801b326:	2b00      	cmp	r3, #0
 801b328:	d00b      	beq.n	801b342 <sys_timeout_abs+0xa6>
 801b32a:	693b      	ldr	r3, [r7, #16]
 801b32c:	685a      	ldr	r2, [r3, #4]
 801b32e:	697b      	ldr	r3, [r7, #20]
 801b330:	681b      	ldr	r3, [r3, #0]
 801b332:	685b      	ldr	r3, [r3, #4]
 801b334:	1ad3      	subs	r3, r2, r3
 801b336:	0fdb      	lsrs	r3, r3, #31
 801b338:	f003 0301 	and.w	r3, r3, #1
 801b33c:	b2db      	uxtb	r3, r3
 801b33e:	2b00      	cmp	r3, #0
 801b340:	d007      	beq.n	801b352 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801b342:	697b      	ldr	r3, [r7, #20]
 801b344:	681a      	ldr	r2, [r3, #0]
 801b346:	693b      	ldr	r3, [r7, #16]
 801b348:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801b34a:	697b      	ldr	r3, [r7, #20]
 801b34c:	693a      	ldr	r2, [r7, #16]
 801b34e:	601a      	str	r2, [r3, #0]
        break;
 801b350:	e007      	b.n	801b362 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801b352:	697b      	ldr	r3, [r7, #20]
 801b354:	681b      	ldr	r3, [r3, #0]
 801b356:	617b      	str	r3, [r7, #20]
 801b358:	697b      	ldr	r3, [r7, #20]
 801b35a:	2b00      	cmp	r3, #0
 801b35c:	d1e1      	bne.n	801b322 <sys_timeout_abs+0x86>
 801b35e:	e000      	b.n	801b362 <sys_timeout_abs+0xc6>
    return;
 801b360:	bf00      	nop
      }
    }
  }
}
 801b362:	3718      	adds	r7, #24
 801b364:	46bd      	mov	sp, r7
 801b366:	bd80      	pop	{r7, pc}
 801b368:	08024cf0 	.word	0x08024cf0
 801b36c:	08024d24 	.word	0x08024d24
 801b370:	08024d64 	.word	0x08024d64
 801b374:	2002d4c0 	.word	0x2002d4c0

0801b378 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801b378:	b580      	push	{r7, lr}
 801b37a:	b086      	sub	sp, #24
 801b37c:	af00      	add	r7, sp, #0
 801b37e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801b380:	687b      	ldr	r3, [r7, #4]
 801b382:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801b384:	697b      	ldr	r3, [r7, #20]
 801b386:	685b      	ldr	r3, [r3, #4]
 801b388:	4798      	blx	r3

  now = sys_now();
 801b38a:	f7f1 f96f 	bl	800c66c <sys_now>
 801b38e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801b390:	697b      	ldr	r3, [r7, #20]
 801b392:	681a      	ldr	r2, [r3, #0]
 801b394:	4b0f      	ldr	r3, [pc, #60]	@ (801b3d4 <lwip_cyclic_timer+0x5c>)
 801b396:	681b      	ldr	r3, [r3, #0]
 801b398:	4413      	add	r3, r2
 801b39a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801b39c:	68fa      	ldr	r2, [r7, #12]
 801b39e:	693b      	ldr	r3, [r7, #16]
 801b3a0:	1ad3      	subs	r3, r2, r3
 801b3a2:	0fdb      	lsrs	r3, r3, #31
 801b3a4:	f003 0301 	and.w	r3, r3, #1
 801b3a8:	b2db      	uxtb	r3, r3
 801b3aa:	2b00      	cmp	r3, #0
 801b3ac:	d009      	beq.n	801b3c2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801b3ae:	697b      	ldr	r3, [r7, #20]
 801b3b0:	681a      	ldr	r2, [r3, #0]
 801b3b2:	693b      	ldr	r3, [r7, #16]
 801b3b4:	4413      	add	r3, r2
 801b3b6:	687a      	ldr	r2, [r7, #4]
 801b3b8:	4907      	ldr	r1, [pc, #28]	@ (801b3d8 <lwip_cyclic_timer+0x60>)
 801b3ba:	4618      	mov	r0, r3
 801b3bc:	f7ff ff6e 	bl	801b29c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801b3c0:	e004      	b.n	801b3cc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801b3c2:	687a      	ldr	r2, [r7, #4]
 801b3c4:	4904      	ldr	r1, [pc, #16]	@ (801b3d8 <lwip_cyclic_timer+0x60>)
 801b3c6:	68f8      	ldr	r0, [r7, #12]
 801b3c8:	f7ff ff68 	bl	801b29c <sys_timeout_abs>
}
 801b3cc:	bf00      	nop
 801b3ce:	3718      	adds	r7, #24
 801b3d0:	46bd      	mov	sp, r7
 801b3d2:	bd80      	pop	{r7, pc}
 801b3d4:	2002d4c4 	.word	0x2002d4c4
 801b3d8:	0801b379 	.word	0x0801b379

0801b3dc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801b3dc:	b580      	push	{r7, lr}
 801b3de:	b082      	sub	sp, #8
 801b3e0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801b3e2:	2301      	movs	r3, #1
 801b3e4:	607b      	str	r3, [r7, #4]
 801b3e6:	e00e      	b.n	801b406 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801b3e8:	4a0b      	ldr	r2, [pc, #44]	@ (801b418 <sys_timeouts_init+0x3c>)
 801b3ea:	687b      	ldr	r3, [r7, #4]
 801b3ec:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801b3f0:	687b      	ldr	r3, [r7, #4]
 801b3f2:	00db      	lsls	r3, r3, #3
 801b3f4:	4a08      	ldr	r2, [pc, #32]	@ (801b418 <sys_timeouts_init+0x3c>)
 801b3f6:	4413      	add	r3, r2
 801b3f8:	461a      	mov	r2, r3
 801b3fa:	4908      	ldr	r1, [pc, #32]	@ (801b41c <sys_timeouts_init+0x40>)
 801b3fc:	f000 f810 	bl	801b420 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801b400:	687b      	ldr	r3, [r7, #4]
 801b402:	3301      	adds	r3, #1
 801b404:	607b      	str	r3, [r7, #4]
 801b406:	687b      	ldr	r3, [r7, #4]
 801b408:	2b02      	cmp	r3, #2
 801b40a:	d9ed      	bls.n	801b3e8 <sys_timeouts_init+0xc>
  }
}
 801b40c:	bf00      	nop
 801b40e:	bf00      	nop
 801b410:	3708      	adds	r7, #8
 801b412:	46bd      	mov	sp, r7
 801b414:	bd80      	pop	{r7, pc}
 801b416:	bf00      	nop
 801b418:	0802686c 	.word	0x0802686c
 801b41c:	0801b379 	.word	0x0801b379

0801b420 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801b420:	b580      	push	{r7, lr}
 801b422:	b086      	sub	sp, #24
 801b424:	af00      	add	r7, sp, #0
 801b426:	60f8      	str	r0, [r7, #12]
 801b428:	60b9      	str	r1, [r7, #8]
 801b42a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801b42c:	68fb      	ldr	r3, [r7, #12]
 801b42e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b432:	d306      	bcc.n	801b442 <sys_timeout+0x22>
 801b434:	4b0a      	ldr	r3, [pc, #40]	@ (801b460 <sys_timeout+0x40>)
 801b436:	f240 1229 	movw	r2, #297	@ 0x129
 801b43a:	490a      	ldr	r1, [pc, #40]	@ (801b464 <sys_timeout+0x44>)
 801b43c:	480a      	ldr	r0, [pc, #40]	@ (801b468 <sys_timeout+0x48>)
 801b43e:	f005 f9ab 	bl	8020798 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801b442:	f7f1 f913 	bl	800c66c <sys_now>
 801b446:	4602      	mov	r2, r0
 801b448:	68fb      	ldr	r3, [r7, #12]
 801b44a:	4413      	add	r3, r2
 801b44c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801b44e:	687a      	ldr	r2, [r7, #4]
 801b450:	68b9      	ldr	r1, [r7, #8]
 801b452:	6978      	ldr	r0, [r7, #20]
 801b454:	f7ff ff22 	bl	801b29c <sys_timeout_abs>
#endif
}
 801b458:	bf00      	nop
 801b45a:	3718      	adds	r7, #24
 801b45c:	46bd      	mov	sp, r7
 801b45e:	bd80      	pop	{r7, pc}
 801b460:	08024cf0 	.word	0x08024cf0
 801b464:	08024d8c 	.word	0x08024d8c
 801b468:	08024d64 	.word	0x08024d64

0801b46c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801b46c:	b580      	push	{r7, lr}
 801b46e:	b084      	sub	sp, #16
 801b470:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801b472:	f7f1 f8fb 	bl	800c66c <sys_now>
 801b476:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801b478:	4b17      	ldr	r3, [pc, #92]	@ (801b4d8 <sys_check_timeouts+0x6c>)
 801b47a:	681b      	ldr	r3, [r3, #0]
 801b47c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801b47e:	68bb      	ldr	r3, [r7, #8]
 801b480:	2b00      	cmp	r3, #0
 801b482:	d022      	beq.n	801b4ca <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801b484:	68bb      	ldr	r3, [r7, #8]
 801b486:	685b      	ldr	r3, [r3, #4]
 801b488:	68fa      	ldr	r2, [r7, #12]
 801b48a:	1ad3      	subs	r3, r2, r3
 801b48c:	0fdb      	lsrs	r3, r3, #31
 801b48e:	f003 0301 	and.w	r3, r3, #1
 801b492:	b2db      	uxtb	r3, r3
 801b494:	2b00      	cmp	r3, #0
 801b496:	d11a      	bne.n	801b4ce <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801b498:	68bb      	ldr	r3, [r7, #8]
 801b49a:	681b      	ldr	r3, [r3, #0]
 801b49c:	4a0e      	ldr	r2, [pc, #56]	@ (801b4d8 <sys_check_timeouts+0x6c>)
 801b49e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801b4a0:	68bb      	ldr	r3, [r7, #8]
 801b4a2:	689b      	ldr	r3, [r3, #8]
 801b4a4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801b4a6:	68bb      	ldr	r3, [r7, #8]
 801b4a8:	68db      	ldr	r3, [r3, #12]
 801b4aa:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801b4ac:	68bb      	ldr	r3, [r7, #8]
 801b4ae:	685b      	ldr	r3, [r3, #4]
 801b4b0:	4a0a      	ldr	r2, [pc, #40]	@ (801b4dc <sys_check_timeouts+0x70>)
 801b4b2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801b4b4:	68b9      	ldr	r1, [r7, #8]
 801b4b6:	200a      	movs	r0, #10
 801b4b8:	f7f8 fafa 	bl	8013ab0 <memp_free>
    if (handler != NULL) {
 801b4bc:	687b      	ldr	r3, [r7, #4]
 801b4be:	2b00      	cmp	r3, #0
 801b4c0:	d0da      	beq.n	801b478 <sys_check_timeouts+0xc>
      handler(arg);
 801b4c2:	687b      	ldr	r3, [r7, #4]
 801b4c4:	6838      	ldr	r0, [r7, #0]
 801b4c6:	4798      	blx	r3
  do {
 801b4c8:	e7d6      	b.n	801b478 <sys_check_timeouts+0xc>
      return;
 801b4ca:	bf00      	nop
 801b4cc:	e000      	b.n	801b4d0 <sys_check_timeouts+0x64>
      return;
 801b4ce:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801b4d0:	3710      	adds	r7, #16
 801b4d2:	46bd      	mov	sp, r7
 801b4d4:	bd80      	pop	{r7, pc}
 801b4d6:	bf00      	nop
 801b4d8:	2002d4c0 	.word	0x2002d4c0
 801b4dc:	2002d4c4 	.word	0x2002d4c4

0801b4e0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801b4e0:	b580      	push	{r7, lr}
 801b4e2:	b082      	sub	sp, #8
 801b4e4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801b4e6:	4b16      	ldr	r3, [pc, #88]	@ (801b540 <sys_timeouts_sleeptime+0x60>)
 801b4e8:	681b      	ldr	r3, [r3, #0]
 801b4ea:	2b00      	cmp	r3, #0
 801b4ec:	d102      	bne.n	801b4f4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801b4ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b4f2:	e020      	b.n	801b536 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801b4f4:	f7f1 f8ba 	bl	800c66c <sys_now>
 801b4f8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801b4fa:	4b11      	ldr	r3, [pc, #68]	@ (801b540 <sys_timeouts_sleeptime+0x60>)
 801b4fc:	681b      	ldr	r3, [r3, #0]
 801b4fe:	685a      	ldr	r2, [r3, #4]
 801b500:	687b      	ldr	r3, [r7, #4]
 801b502:	1ad3      	subs	r3, r2, r3
 801b504:	0fdb      	lsrs	r3, r3, #31
 801b506:	f003 0301 	and.w	r3, r3, #1
 801b50a:	b2db      	uxtb	r3, r3
 801b50c:	2b00      	cmp	r3, #0
 801b50e:	d001      	beq.n	801b514 <sys_timeouts_sleeptime+0x34>
    return 0;
 801b510:	2300      	movs	r3, #0
 801b512:	e010      	b.n	801b536 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801b514:	4b0a      	ldr	r3, [pc, #40]	@ (801b540 <sys_timeouts_sleeptime+0x60>)
 801b516:	681b      	ldr	r3, [r3, #0]
 801b518:	685a      	ldr	r2, [r3, #4]
 801b51a:	687b      	ldr	r3, [r7, #4]
 801b51c:	1ad3      	subs	r3, r2, r3
 801b51e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801b520:	683b      	ldr	r3, [r7, #0]
 801b522:	2b00      	cmp	r3, #0
 801b524:	da06      	bge.n	801b534 <sys_timeouts_sleeptime+0x54>
 801b526:	4b07      	ldr	r3, [pc, #28]	@ (801b544 <sys_timeouts_sleeptime+0x64>)
 801b528:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 801b52c:	4906      	ldr	r1, [pc, #24]	@ (801b548 <sys_timeouts_sleeptime+0x68>)
 801b52e:	4807      	ldr	r0, [pc, #28]	@ (801b54c <sys_timeouts_sleeptime+0x6c>)
 801b530:	f005 f932 	bl	8020798 <iprintf>
    return ret;
 801b534:	683b      	ldr	r3, [r7, #0]
  }
}
 801b536:	4618      	mov	r0, r3
 801b538:	3708      	adds	r7, #8
 801b53a:	46bd      	mov	sp, r7
 801b53c:	bd80      	pop	{r7, pc}
 801b53e:	bf00      	nop
 801b540:	2002d4c0 	.word	0x2002d4c0
 801b544:	08024cf0 	.word	0x08024cf0
 801b548:	08024dc4 	.word	0x08024dc4
 801b54c:	08024d64 	.word	0x08024d64

0801b550 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801b550:	b580      	push	{r7, lr}
 801b552:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801b554:	f005 f820 	bl	8020598 <rand>
 801b558:	4603      	mov	r3, r0
 801b55a:	b29b      	uxth	r3, r3
 801b55c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801b560:	b29b      	uxth	r3, r3
 801b562:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801b566:	b29a      	uxth	r2, r3
 801b568:	4b01      	ldr	r3, [pc, #4]	@ (801b570 <udp_init+0x20>)
 801b56a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801b56c:	bf00      	nop
 801b56e:	bd80      	pop	{r7, pc}
 801b570:	20000070 	.word	0x20000070

0801b574 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801b574:	b480      	push	{r7}
 801b576:	b083      	sub	sp, #12
 801b578:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801b57a:	2300      	movs	r3, #0
 801b57c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801b57e:	4b17      	ldr	r3, [pc, #92]	@ (801b5dc <udp_new_port+0x68>)
 801b580:	881b      	ldrh	r3, [r3, #0]
 801b582:	1c5a      	adds	r2, r3, #1
 801b584:	b291      	uxth	r1, r2
 801b586:	4a15      	ldr	r2, [pc, #84]	@ (801b5dc <udp_new_port+0x68>)
 801b588:	8011      	strh	r1, [r2, #0]
 801b58a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b58e:	4293      	cmp	r3, r2
 801b590:	d103      	bne.n	801b59a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801b592:	4b12      	ldr	r3, [pc, #72]	@ (801b5dc <udp_new_port+0x68>)
 801b594:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801b598:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b59a:	4b11      	ldr	r3, [pc, #68]	@ (801b5e0 <udp_new_port+0x6c>)
 801b59c:	681b      	ldr	r3, [r3, #0]
 801b59e:	603b      	str	r3, [r7, #0]
 801b5a0:	e011      	b.n	801b5c6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801b5a2:	683b      	ldr	r3, [r7, #0]
 801b5a4:	8a5a      	ldrh	r2, [r3, #18]
 801b5a6:	4b0d      	ldr	r3, [pc, #52]	@ (801b5dc <udp_new_port+0x68>)
 801b5a8:	881b      	ldrh	r3, [r3, #0]
 801b5aa:	429a      	cmp	r2, r3
 801b5ac:	d108      	bne.n	801b5c0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801b5ae:	88fb      	ldrh	r3, [r7, #6]
 801b5b0:	3301      	adds	r3, #1
 801b5b2:	80fb      	strh	r3, [r7, #6]
 801b5b4:	88fb      	ldrh	r3, [r7, #6]
 801b5b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801b5ba:	d3e0      	bcc.n	801b57e <udp_new_port+0xa>
        return 0;
 801b5bc:	2300      	movs	r3, #0
 801b5be:	e007      	b.n	801b5d0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b5c0:	683b      	ldr	r3, [r7, #0]
 801b5c2:	68db      	ldr	r3, [r3, #12]
 801b5c4:	603b      	str	r3, [r7, #0]
 801b5c6:	683b      	ldr	r3, [r7, #0]
 801b5c8:	2b00      	cmp	r3, #0
 801b5ca:	d1ea      	bne.n	801b5a2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801b5cc:	4b03      	ldr	r3, [pc, #12]	@ (801b5dc <udp_new_port+0x68>)
 801b5ce:	881b      	ldrh	r3, [r3, #0]
}
 801b5d0:	4618      	mov	r0, r3
 801b5d2:	370c      	adds	r7, #12
 801b5d4:	46bd      	mov	sp, r7
 801b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5da:	4770      	bx	lr
 801b5dc:	20000070 	.word	0x20000070
 801b5e0:	2002d4cc 	.word	0x2002d4cc

0801b5e4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801b5e4:	b580      	push	{r7, lr}
 801b5e6:	b084      	sub	sp, #16
 801b5e8:	af00      	add	r7, sp, #0
 801b5ea:	60f8      	str	r0, [r7, #12]
 801b5ec:	60b9      	str	r1, [r7, #8]
 801b5ee:	4613      	mov	r3, r2
 801b5f0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801b5f2:	68fb      	ldr	r3, [r7, #12]
 801b5f4:	2b00      	cmp	r3, #0
 801b5f6:	d105      	bne.n	801b604 <udp_input_local_match+0x20>
 801b5f8:	4b27      	ldr	r3, [pc, #156]	@ (801b698 <udp_input_local_match+0xb4>)
 801b5fa:	2287      	movs	r2, #135	@ 0x87
 801b5fc:	4927      	ldr	r1, [pc, #156]	@ (801b69c <udp_input_local_match+0xb8>)
 801b5fe:	4828      	ldr	r0, [pc, #160]	@ (801b6a0 <udp_input_local_match+0xbc>)
 801b600:	f005 f8ca 	bl	8020798 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801b604:	68bb      	ldr	r3, [r7, #8]
 801b606:	2b00      	cmp	r3, #0
 801b608:	d105      	bne.n	801b616 <udp_input_local_match+0x32>
 801b60a:	4b23      	ldr	r3, [pc, #140]	@ (801b698 <udp_input_local_match+0xb4>)
 801b60c:	2288      	movs	r2, #136	@ 0x88
 801b60e:	4925      	ldr	r1, [pc, #148]	@ (801b6a4 <udp_input_local_match+0xc0>)
 801b610:	4823      	ldr	r0, [pc, #140]	@ (801b6a0 <udp_input_local_match+0xbc>)
 801b612:	f005 f8c1 	bl	8020798 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b616:	68fb      	ldr	r3, [r7, #12]
 801b618:	7a1b      	ldrb	r3, [r3, #8]
 801b61a:	2b00      	cmp	r3, #0
 801b61c:	d00b      	beq.n	801b636 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b61e:	68fb      	ldr	r3, [r7, #12]
 801b620:	7a1a      	ldrb	r2, [r3, #8]
 801b622:	4b21      	ldr	r3, [pc, #132]	@ (801b6a8 <udp_input_local_match+0xc4>)
 801b624:	685b      	ldr	r3, [r3, #4]
 801b626:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801b62a:	3301      	adds	r3, #1
 801b62c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b62e:	429a      	cmp	r2, r3
 801b630:	d001      	beq.n	801b636 <udp_input_local_match+0x52>
    return 0;
 801b632:	2300      	movs	r3, #0
 801b634:	e02b      	b.n	801b68e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801b636:	79fb      	ldrb	r3, [r7, #7]
 801b638:	2b00      	cmp	r3, #0
 801b63a:	d018      	beq.n	801b66e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b63c:	68fb      	ldr	r3, [r7, #12]
 801b63e:	2b00      	cmp	r3, #0
 801b640:	d013      	beq.n	801b66a <udp_input_local_match+0x86>
 801b642:	68fb      	ldr	r3, [r7, #12]
 801b644:	681b      	ldr	r3, [r3, #0]
 801b646:	2b00      	cmp	r3, #0
 801b648:	d00f      	beq.n	801b66a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801b64a:	4b17      	ldr	r3, [pc, #92]	@ (801b6a8 <udp_input_local_match+0xc4>)
 801b64c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b64e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b652:	d00a      	beq.n	801b66a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801b654:	68fb      	ldr	r3, [r7, #12]
 801b656:	681a      	ldr	r2, [r3, #0]
 801b658:	4b13      	ldr	r3, [pc, #76]	@ (801b6a8 <udp_input_local_match+0xc4>)
 801b65a:	695b      	ldr	r3, [r3, #20]
 801b65c:	405a      	eors	r2, r3
 801b65e:	68bb      	ldr	r3, [r7, #8]
 801b660:	3308      	adds	r3, #8
 801b662:	681b      	ldr	r3, [r3, #0]
 801b664:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801b666:	2b00      	cmp	r3, #0
 801b668:	d110      	bne.n	801b68c <udp_input_local_match+0xa8>
          return 1;
 801b66a:	2301      	movs	r3, #1
 801b66c:	e00f      	b.n	801b68e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801b66e:	68fb      	ldr	r3, [r7, #12]
 801b670:	2b00      	cmp	r3, #0
 801b672:	d009      	beq.n	801b688 <udp_input_local_match+0xa4>
 801b674:	68fb      	ldr	r3, [r7, #12]
 801b676:	681b      	ldr	r3, [r3, #0]
 801b678:	2b00      	cmp	r3, #0
 801b67a:	d005      	beq.n	801b688 <udp_input_local_match+0xa4>
 801b67c:	68fb      	ldr	r3, [r7, #12]
 801b67e:	681a      	ldr	r2, [r3, #0]
 801b680:	4b09      	ldr	r3, [pc, #36]	@ (801b6a8 <udp_input_local_match+0xc4>)
 801b682:	695b      	ldr	r3, [r3, #20]
 801b684:	429a      	cmp	r2, r3
 801b686:	d101      	bne.n	801b68c <udp_input_local_match+0xa8>
        return 1;
 801b688:	2301      	movs	r3, #1
 801b68a:	e000      	b.n	801b68e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801b68c:	2300      	movs	r3, #0
}
 801b68e:	4618      	mov	r0, r3
 801b690:	3710      	adds	r7, #16
 801b692:	46bd      	mov	sp, r7
 801b694:	bd80      	pop	{r7, pc}
 801b696:	bf00      	nop
 801b698:	08024dd8 	.word	0x08024dd8
 801b69c:	08024e08 	.word	0x08024e08
 801b6a0:	08024e2c 	.word	0x08024e2c
 801b6a4:	08024e54 	.word	0x08024e54
 801b6a8:	200270fc 	.word	0x200270fc

0801b6ac <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801b6ac:	b590      	push	{r4, r7, lr}
 801b6ae:	b08d      	sub	sp, #52	@ 0x34
 801b6b0:	af02      	add	r7, sp, #8
 801b6b2:	6078      	str	r0, [r7, #4]
 801b6b4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801b6b6:	2300      	movs	r3, #0
 801b6b8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801b6ba:	687b      	ldr	r3, [r7, #4]
 801b6bc:	2b00      	cmp	r3, #0
 801b6be:	d105      	bne.n	801b6cc <udp_input+0x20>
 801b6c0:	4b9c      	ldr	r3, [pc, #624]	@ (801b934 <udp_input+0x288>)
 801b6c2:	22cf      	movs	r2, #207	@ 0xcf
 801b6c4:	499c      	ldr	r1, [pc, #624]	@ (801b938 <udp_input+0x28c>)
 801b6c6:	489d      	ldr	r0, [pc, #628]	@ (801b93c <udp_input+0x290>)
 801b6c8:	f005 f866 	bl	8020798 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801b6cc:	683b      	ldr	r3, [r7, #0]
 801b6ce:	2b00      	cmp	r3, #0
 801b6d0:	d105      	bne.n	801b6de <udp_input+0x32>
 801b6d2:	4b98      	ldr	r3, [pc, #608]	@ (801b934 <udp_input+0x288>)
 801b6d4:	22d0      	movs	r2, #208	@ 0xd0
 801b6d6:	499a      	ldr	r1, [pc, #616]	@ (801b940 <udp_input+0x294>)
 801b6d8:	4898      	ldr	r0, [pc, #608]	@ (801b93c <udp_input+0x290>)
 801b6da:	f005 f85d 	bl	8020798 <iprintf>

  PERF_START;

  UDP_STATS_INC(udp.recv);
 801b6de:	4b99      	ldr	r3, [pc, #612]	@ (801b944 <udp_input+0x298>)
 801b6e0:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
 801b6e4:	3301      	adds	r3, #1
 801b6e6:	b29a      	uxth	r2, r3
 801b6e8:	4b96      	ldr	r3, [pc, #600]	@ (801b944 <udp_input+0x298>)
 801b6ea:	f8a3 207a 	strh.w	r2, [r3, #122]	@ 0x7a

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801b6ee:	687b      	ldr	r3, [r7, #4]
 801b6f0:	895b      	ldrh	r3, [r3, #10]
 801b6f2:	2b07      	cmp	r3, #7
 801b6f4:	d819      	bhi.n	801b72a <udp_input+0x7e>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
 801b6f6:	687b      	ldr	r3, [r7, #4]
 801b6f8:	891b      	ldrh	r3, [r3, #8]
 801b6fa:	4619      	mov	r1, r3
 801b6fc:	4892      	ldr	r0, [pc, #584]	@ (801b948 <udp_input+0x29c>)
 801b6fe:	f005 f84b 	bl	8020798 <iprintf>
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
 801b702:	4b90      	ldr	r3, [pc, #576]	@ (801b944 <udp_input+0x298>)
 801b704:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 801b708:	3301      	adds	r3, #1
 801b70a:	b29a      	uxth	r2, r3
 801b70c:	4b8d      	ldr	r3, [pc, #564]	@ (801b944 <udp_input+0x298>)
 801b70e:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
    UDP_STATS_INC(udp.drop);
 801b712:	4b8c      	ldr	r3, [pc, #560]	@ (801b944 <udp_input+0x298>)
 801b714:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 801b718:	3301      	adds	r3, #1
 801b71a:	b29a      	uxth	r2, r3
 801b71c:	4b89      	ldr	r3, [pc, #548]	@ (801b944 <udp_input+0x298>)
 801b71e:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801b722:	6878      	ldr	r0, [r7, #4]
 801b724:	f7f9 f9aa 	bl	8014a7c <pbuf_free>
    goto end;
 801b728:	e1ae      	b.n	801ba88 <udp_input+0x3dc>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801b72a:	687b      	ldr	r3, [r7, #4]
 801b72c:	685b      	ldr	r3, [r3, #4]
 801b72e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801b730:	4b86      	ldr	r3, [pc, #536]	@ (801b94c <udp_input+0x2a0>)
 801b732:	695b      	ldr	r3, [r3, #20]
 801b734:	4a85      	ldr	r2, [pc, #532]	@ (801b94c <udp_input+0x2a0>)
 801b736:	6812      	ldr	r2, [r2, #0]
 801b738:	4611      	mov	r1, r2
 801b73a:	4618      	mov	r0, r3
 801b73c:	f002 fb30 	bl	801dda0 <ip4_addr_isbroadcast_u32>
 801b740:	4603      	mov	r3, r0
 801b742:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));
 801b744:	687b      	ldr	r3, [r7, #4]
 801b746:	891b      	ldrh	r3, [r3, #8]
 801b748:	4619      	mov	r1, r3
 801b74a:	4881      	ldr	r0, [pc, #516]	@ (801b950 <udp_input+0x2a4>)
 801b74c:	f005 f824 	bl	8020798 <iprintf>

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801b750:	697b      	ldr	r3, [r7, #20]
 801b752:	881b      	ldrh	r3, [r3, #0]
 801b754:	b29b      	uxth	r3, r3
 801b756:	4618      	mov	r0, r3
 801b758:	f7f7 fb62 	bl	8012e20 <lwip_htons>
 801b75c:	4603      	mov	r3, r0
 801b75e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801b760:	697b      	ldr	r3, [r7, #20]
 801b762:	885b      	ldrh	r3, [r3, #2]
 801b764:	b29b      	uxth	r3, r3
 801b766:	4618      	mov	r0, r3
 801b768:	f7f7 fb5a 	bl	8012e20 <lwip_htons>
 801b76c:	4603      	mov	r3, r0
 801b76e:	81fb      	strh	r3, [r7, #14]

  udp_debug_print(udphdr);
 801b770:	6978      	ldr	r0, [r7, #20]
 801b772:	f000 fdb1 	bl	801c2d8 <udp_debug_print>

  /* print the UDP source and destination */
  LWIP_DEBUGF(UDP_DEBUG, ("udp ("));
 801b776:	4877      	ldr	r0, [pc, #476]	@ (801b954 <udp_input+0x2a8>)
 801b778:	f005 f80e 	bl	8020798 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
 801b77c:	4b73      	ldr	r3, [pc, #460]	@ (801b94c <udp_input+0x2a0>)
 801b77e:	695b      	ldr	r3, [r3, #20]
 801b780:	b2db      	uxtb	r3, r3
 801b782:	4619      	mov	r1, r3
 801b784:	4b71      	ldr	r3, [pc, #452]	@ (801b94c <udp_input+0x2a0>)
 801b786:	695b      	ldr	r3, [r3, #20]
 801b788:	0a1b      	lsrs	r3, r3, #8
 801b78a:	b2db      	uxtb	r3, r3
 801b78c:	461a      	mov	r2, r3
 801b78e:	4b6f      	ldr	r3, [pc, #444]	@ (801b94c <udp_input+0x2a0>)
 801b790:	695b      	ldr	r3, [r3, #20]
 801b792:	0c1b      	lsrs	r3, r3, #16
 801b794:	b2db      	uxtb	r3, r3
 801b796:	4618      	mov	r0, r3
 801b798:	4b6c      	ldr	r3, [pc, #432]	@ (801b94c <udp_input+0x2a0>)
 801b79a:	695b      	ldr	r3, [r3, #20]
 801b79c:	0e1b      	lsrs	r3, r3, #24
 801b79e:	b2db      	uxtb	r3, r3
 801b7a0:	9300      	str	r3, [sp, #0]
 801b7a2:	4603      	mov	r3, r0
 801b7a4:	486c      	ldr	r0, [pc, #432]	@ (801b958 <udp_input+0x2ac>)
 801b7a6:	f004 fff7 	bl	8020798 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
 801b7aa:	697b      	ldr	r3, [r7, #20]
 801b7ac:	885b      	ldrh	r3, [r3, #2]
 801b7ae:	b29b      	uxth	r3, r3
 801b7b0:	4618      	mov	r0, r3
 801b7b2:	f7f7 fb35 	bl	8012e20 <lwip_htons>
 801b7b6:	4603      	mov	r3, r0
 801b7b8:	4619      	mov	r1, r3
 801b7ba:	4868      	ldr	r0, [pc, #416]	@ (801b95c <udp_input+0x2b0>)
 801b7bc:	f004 ffec 	bl	8020798 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
 801b7c0:	4b62      	ldr	r3, [pc, #392]	@ (801b94c <udp_input+0x2a0>)
 801b7c2:	691b      	ldr	r3, [r3, #16]
 801b7c4:	b2db      	uxtb	r3, r3
 801b7c6:	4619      	mov	r1, r3
 801b7c8:	4b60      	ldr	r3, [pc, #384]	@ (801b94c <udp_input+0x2a0>)
 801b7ca:	691b      	ldr	r3, [r3, #16]
 801b7cc:	0a1b      	lsrs	r3, r3, #8
 801b7ce:	b2db      	uxtb	r3, r3
 801b7d0:	461a      	mov	r2, r3
 801b7d2:	4b5e      	ldr	r3, [pc, #376]	@ (801b94c <udp_input+0x2a0>)
 801b7d4:	691b      	ldr	r3, [r3, #16]
 801b7d6:	0c1b      	lsrs	r3, r3, #16
 801b7d8:	b2db      	uxtb	r3, r3
 801b7da:	4618      	mov	r0, r3
 801b7dc:	4b5b      	ldr	r3, [pc, #364]	@ (801b94c <udp_input+0x2a0>)
 801b7de:	691b      	ldr	r3, [r3, #16]
 801b7e0:	0e1b      	lsrs	r3, r3, #24
 801b7e2:	b2db      	uxtb	r3, r3
 801b7e4:	9300      	str	r3, [sp, #0]
 801b7e6:	4603      	mov	r3, r0
 801b7e8:	485b      	ldr	r0, [pc, #364]	@ (801b958 <udp_input+0x2ac>)
 801b7ea:	f004 ffd5 	bl	8020798 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));
 801b7ee:	697b      	ldr	r3, [r7, #20]
 801b7f0:	881b      	ldrh	r3, [r3, #0]
 801b7f2:	b29b      	uxth	r3, r3
 801b7f4:	4618      	mov	r0, r3
 801b7f6:	f7f7 fb13 	bl	8012e20 <lwip_htons>
 801b7fa:	4603      	mov	r3, r0
 801b7fc:	4619      	mov	r1, r3
 801b7fe:	4858      	ldr	r0, [pc, #352]	@ (801b960 <udp_input+0x2b4>)
 801b800:	f004 ffca 	bl	8020798 <iprintf>

  pcb = NULL;
 801b804:	2300      	movs	r3, #0
 801b806:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 801b808:	2300      	movs	r3, #0
 801b80a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801b80c:	2300      	movs	r3, #0
 801b80e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b810:	4b54      	ldr	r3, [pc, #336]	@ (801b964 <udp_input+0x2b8>)
 801b812:	681b      	ldr	r3, [r3, #0]
 801b814:	627b      	str	r3, [r7, #36]	@ 0x24
 801b816:	e0b7      	b.n	801b988 <udp_input+0x2dc>
    /* print the PCB local and remote address */
    LWIP_DEBUGF(UDP_DEBUG, ("pcb ("));
 801b818:	4853      	ldr	r0, [pc, #332]	@ (801b968 <udp_input+0x2bc>)
 801b81a:	f004 ffbd 	bl	8020798 <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->local_ip);
 801b81e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b820:	681b      	ldr	r3, [r3, #0]
 801b822:	b2db      	uxtb	r3, r3
 801b824:	4619      	mov	r1, r3
 801b826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b828:	681b      	ldr	r3, [r3, #0]
 801b82a:	0a1b      	lsrs	r3, r3, #8
 801b82c:	b2db      	uxtb	r3, r3
 801b82e:	461a      	mov	r2, r3
 801b830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b832:	681b      	ldr	r3, [r3, #0]
 801b834:	0c1b      	lsrs	r3, r3, #16
 801b836:	b2db      	uxtb	r3, r3
 801b838:	4618      	mov	r0, r3
 801b83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b83c:	681b      	ldr	r3, [r3, #0]
 801b83e:	0e1b      	lsrs	r3, r3, #24
 801b840:	b2db      	uxtb	r3, r3
 801b842:	9300      	str	r3, [sp, #0]
 801b844:	4603      	mov	r3, r0
 801b846:	4844      	ldr	r0, [pc, #272]	@ (801b958 <udp_input+0x2ac>)
 801b848:	f004 ffa6 	bl	8020798 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
 801b84c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b84e:	8a5b      	ldrh	r3, [r3, #18]
 801b850:	4619      	mov	r1, r3
 801b852:	4842      	ldr	r0, [pc, #264]	@ (801b95c <udp_input+0x2b0>)
 801b854:	f004 ffa0 	bl	8020798 <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
 801b858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b85a:	685b      	ldr	r3, [r3, #4]
 801b85c:	b2db      	uxtb	r3, r3
 801b85e:	4619      	mov	r1, r3
 801b860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b862:	685b      	ldr	r3, [r3, #4]
 801b864:	0a1b      	lsrs	r3, r3, #8
 801b866:	b2db      	uxtb	r3, r3
 801b868:	461a      	mov	r2, r3
 801b86a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b86c:	685b      	ldr	r3, [r3, #4]
 801b86e:	0c1b      	lsrs	r3, r3, #16
 801b870:	b2db      	uxtb	r3, r3
 801b872:	4618      	mov	r0, r3
 801b874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b876:	685b      	ldr	r3, [r3, #4]
 801b878:	0e1b      	lsrs	r3, r3, #24
 801b87a:	b2db      	uxtb	r3, r3
 801b87c:	9300      	str	r3, [sp, #0]
 801b87e:	4603      	mov	r3, r0
 801b880:	4835      	ldr	r0, [pc, #212]	@ (801b958 <udp_input+0x2ac>)
 801b882:	f004 ff89 	bl	8020798 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));
 801b886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b888:	8a9b      	ldrh	r3, [r3, #20]
 801b88a:	4619      	mov	r1, r3
 801b88c:	4834      	ldr	r0, [pc, #208]	@ (801b960 <udp_input+0x2b4>)
 801b88e:	f004 ff83 	bl	8020798 <iprintf>

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801b892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b894:	8a5b      	ldrh	r3, [r3, #18]
 801b896:	89fa      	ldrh	r2, [r7, #14]
 801b898:	429a      	cmp	r2, r3
 801b89a:	d170      	bne.n	801b97e <udp_input+0x2d2>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801b89c:	7cfb      	ldrb	r3, [r7, #19]
 801b89e:	461a      	mov	r2, r3
 801b8a0:	6839      	ldr	r1, [r7, #0]
 801b8a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b8a4:	f7ff fe9e 	bl	801b5e4 <udp_input_local_match>
 801b8a8:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801b8aa:	2b00      	cmp	r3, #0
 801b8ac:	d067      	beq.n	801b97e <udp_input+0x2d2>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801b8ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b8b0:	7c1b      	ldrb	r3, [r3, #16]
 801b8b2:	f003 0304 	and.w	r3, r3, #4
 801b8b6:	2b00      	cmp	r3, #0
 801b8b8:	d11d      	bne.n	801b8f6 <udp_input+0x24a>
        if (uncon_pcb == NULL) {
 801b8ba:	69fb      	ldr	r3, [r7, #28]
 801b8bc:	2b00      	cmp	r3, #0
 801b8be:	d102      	bne.n	801b8c6 <udp_input+0x21a>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801b8c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b8c2:	61fb      	str	r3, [r7, #28]
 801b8c4:	e017      	b.n	801b8f6 <udp_input+0x24a>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801b8c6:	7cfb      	ldrb	r3, [r7, #19]
 801b8c8:	2b00      	cmp	r3, #0
 801b8ca:	d014      	beq.n	801b8f6 <udp_input+0x24a>
 801b8cc:	4b1f      	ldr	r3, [pc, #124]	@ (801b94c <udp_input+0x2a0>)
 801b8ce:	695b      	ldr	r3, [r3, #20]
 801b8d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b8d4:	d10f      	bne.n	801b8f6 <udp_input+0x24a>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801b8d6:	69fb      	ldr	r3, [r7, #28]
 801b8d8:	681a      	ldr	r2, [r3, #0]
 801b8da:	683b      	ldr	r3, [r7, #0]
 801b8dc:	3304      	adds	r3, #4
 801b8de:	681b      	ldr	r3, [r3, #0]
 801b8e0:	429a      	cmp	r2, r3
 801b8e2:	d008      	beq.n	801b8f6 <udp_input+0x24a>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801b8e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b8e6:	681a      	ldr	r2, [r3, #0]
 801b8e8:	683b      	ldr	r3, [r7, #0]
 801b8ea:	3304      	adds	r3, #4
 801b8ec:	681b      	ldr	r3, [r3, #0]
 801b8ee:	429a      	cmp	r2, r3
 801b8f0:	d101      	bne.n	801b8f6 <udp_input+0x24a>
              /* better match */
              uncon_pcb = pcb;
 801b8f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b8f4:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801b8f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b8f8:	8a9b      	ldrh	r3, [r3, #20]
 801b8fa:	8a3a      	ldrh	r2, [r7, #16]
 801b8fc:	429a      	cmp	r2, r3
 801b8fe:	d13e      	bne.n	801b97e <udp_input+0x2d2>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801b900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b902:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801b904:	2b00      	cmp	r3, #0
 801b906:	d005      	beq.n	801b914 <udp_input+0x268>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801b908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b90a:	685a      	ldr	r2, [r3, #4]
 801b90c:	4b0f      	ldr	r3, [pc, #60]	@ (801b94c <udp_input+0x2a0>)
 801b90e:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801b910:	429a      	cmp	r2, r3
 801b912:	d134      	bne.n	801b97e <udp_input+0x2d2>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801b914:	6a3b      	ldr	r3, [r7, #32]
 801b916:	2b00      	cmp	r3, #0
 801b918:	d028      	beq.n	801b96c <udp_input+0x2c0>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801b91a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b91c:	68da      	ldr	r2, [r3, #12]
 801b91e:	6a3b      	ldr	r3, [r7, #32]
 801b920:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801b922:	4b10      	ldr	r3, [pc, #64]	@ (801b964 <udp_input+0x2b8>)
 801b924:	681a      	ldr	r2, [r3, #0]
 801b926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b928:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801b92a:	4a0e      	ldr	r2, [pc, #56]	@ (801b964 <udp_input+0x2b8>)
 801b92c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b92e:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801b930:	e02e      	b.n	801b990 <udp_input+0x2e4>
 801b932:	bf00      	nop
 801b934:	08024dd8 	.word	0x08024dd8
 801b938:	08024e7c 	.word	0x08024e7c
 801b93c:	08024e2c 	.word	0x08024e2c
 801b940:	08024e94 	.word	0x08024e94
 801b944:	2002d36c 	.word	0x2002d36c
 801b948:	08024eb0 	.word	0x08024eb0
 801b94c:	200270fc 	.word	0x200270fc
 801b950:	08024ee8 	.word	0x08024ee8
 801b954:	08024f14 	.word	0x08024f14
 801b958:	08024f1c 	.word	0x08024f1c
 801b95c:	08024f2c 	.word	0x08024f2c
 801b960:	08024f3c 	.word	0x08024f3c
 801b964:	2002d4cc 	.word	0x2002d4cc
 801b968:	08024f44 	.word	0x08024f44
          UDP_STATS_INC(udp.cachehit);
 801b96c:	4b48      	ldr	r3, [pc, #288]	@ (801ba90 <udp_input+0x3e4>)
 801b96e:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 801b972:	3301      	adds	r3, #1
 801b974:	b29a      	uxth	r2, r3
 801b976:	4b46      	ldr	r3, [pc, #280]	@ (801ba90 <udp_input+0x3e4>)
 801b978:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
        break;
 801b97c:	e008      	b.n	801b990 <udp_input+0x2e4>
      }
    }

    prev = pcb;
 801b97e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b980:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b984:	68db      	ldr	r3, [r3, #12]
 801b986:	627b      	str	r3, [r7, #36]	@ 0x24
 801b988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b98a:	2b00      	cmp	r3, #0
 801b98c:	f47f af44 	bne.w	801b818 <udp_input+0x16c>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801b990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b992:	2b00      	cmp	r3, #0
 801b994:	d101      	bne.n	801b99a <udp_input+0x2ee>
    pcb = uncon_pcb;
 801b996:	69fb      	ldr	r3, [r7, #28]
 801b998:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801b99a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b99c:	2b00      	cmp	r3, #0
 801b99e:	d002      	beq.n	801b9a6 <udp_input+0x2fa>
    for_us = 1;
 801b9a0:	2301      	movs	r3, #1
 801b9a2:	76fb      	strb	r3, [r7, #27]
 801b9a4:	e00a      	b.n	801b9bc <udp_input+0x310>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801b9a6:	683b      	ldr	r3, [r7, #0]
 801b9a8:	3304      	adds	r3, #4
 801b9aa:	681a      	ldr	r2, [r3, #0]
 801b9ac:	4b39      	ldr	r3, [pc, #228]	@ (801ba94 <udp_input+0x3e8>)
 801b9ae:	695b      	ldr	r3, [r3, #20]
 801b9b0:	429a      	cmp	r2, r3
 801b9b2:	bf0c      	ite	eq
 801b9b4:	2301      	moveq	r3, #1
 801b9b6:	2300      	movne	r3, #0
 801b9b8:	b2db      	uxtb	r3, r3
 801b9ba:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801b9bc:	7efb      	ldrb	r3, [r7, #27]
 801b9be:	2b00      	cmp	r3, #0
 801b9c0:	d05f      	beq.n	801ba82 <udp_input+0x3d6>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: calculating checksum\n"));
 801b9c2:	4835      	ldr	r0, [pc, #212]	@ (801ba98 <udp_input+0x3ec>)
 801b9c4:	f004 ff58 	bl	8020878 <puts>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801b9c8:	2108      	movs	r1, #8
 801b9ca:	6878      	ldr	r0, [r7, #4]
 801b9cc:	f7f8 ffc8 	bl	8014960 <pbuf_remove_header>
 801b9d0:	4603      	mov	r3, r0
 801b9d2:	2b00      	cmp	r3, #0
 801b9d4:	d012      	beq.n	801b9fc <udp_input+0x350>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801b9d6:	4b31      	ldr	r3, [pc, #196]	@ (801ba9c <udp_input+0x3f0>)
 801b9d8:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801b9dc:	4930      	ldr	r1, [pc, #192]	@ (801baa0 <udp_input+0x3f4>)
 801b9de:	4831      	ldr	r0, [pc, #196]	@ (801baa4 <udp_input+0x3f8>)
 801b9e0:	f004 feda 	bl	8020798 <iprintf>
      UDP_STATS_INC(udp.drop);
 801b9e4:	4b2a      	ldr	r3, [pc, #168]	@ (801ba90 <udp_input+0x3e4>)
 801b9e6:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 801b9ea:	3301      	adds	r3, #1
 801b9ec:	b29a      	uxth	r2, r3
 801b9ee:	4b28      	ldr	r3, [pc, #160]	@ (801ba90 <udp_input+0x3e4>)
 801b9f0:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801b9f4:	6878      	ldr	r0, [r7, #4]
 801b9f6:	f7f9 f841 	bl	8014a7c <pbuf_free>
      goto end;
 801b9fa:	e045      	b.n	801ba88 <udp_input+0x3dc>
    }

    if (pcb != NULL) {
 801b9fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9fe:	2b00      	cmp	r3, #0
 801ba00:	d012      	beq.n	801ba28 <udp_input+0x37c>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801ba02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba04:	699b      	ldr	r3, [r3, #24]
 801ba06:	2b00      	cmp	r3, #0
 801ba08:	d00a      	beq.n	801ba20 <udp_input+0x374>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801ba0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba0c:	699c      	ldr	r4, [r3, #24]
 801ba0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba10:	69d8      	ldr	r0, [r3, #28]
 801ba12:	8a3b      	ldrh	r3, [r7, #16]
 801ba14:	9300      	str	r3, [sp, #0]
 801ba16:	4b24      	ldr	r3, [pc, #144]	@ (801baa8 <udp_input+0x3fc>)
 801ba18:	687a      	ldr	r2, [r7, #4]
 801ba1a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801ba1c:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801ba1e:	e034      	b.n	801ba8a <udp_input+0x3de>
        pbuf_free(p);
 801ba20:	6878      	ldr	r0, [r7, #4]
 801ba22:	f7f9 f82b 	bl	8014a7c <pbuf_free>
        goto end;
 801ba26:	e02f      	b.n	801ba88 <udp_input+0x3dc>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));
 801ba28:	4820      	ldr	r0, [pc, #128]	@ (801baac <udp_input+0x400>)
 801ba2a:	f004 ff25 	bl	8020878 <puts>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801ba2e:	7cfb      	ldrb	r3, [r7, #19]
 801ba30:	2b00      	cmp	r3, #0
 801ba32:	d112      	bne.n	801ba5a <udp_input+0x3ae>
 801ba34:	4b17      	ldr	r3, [pc, #92]	@ (801ba94 <udp_input+0x3e8>)
 801ba36:	695b      	ldr	r3, [r3, #20]
 801ba38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801ba3c:	2be0      	cmp	r3, #224	@ 0xe0
 801ba3e:	d00c      	beq.n	801ba5a <udp_input+0x3ae>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801ba40:	4b14      	ldr	r3, [pc, #80]	@ (801ba94 <udp_input+0x3e8>)
 801ba42:	899b      	ldrh	r3, [r3, #12]
 801ba44:	3308      	adds	r3, #8
 801ba46:	b29b      	uxth	r3, r3
 801ba48:	b21b      	sxth	r3, r3
 801ba4a:	4619      	mov	r1, r3
 801ba4c:	6878      	ldr	r0, [r7, #4]
 801ba4e:	f7f9 f802 	bl	8014a56 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801ba52:	2103      	movs	r1, #3
 801ba54:	6878      	ldr	r0, [r7, #4]
 801ba56:	f001 fdc7 	bl	801d5e8 <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
 801ba5a:	4b0d      	ldr	r3, [pc, #52]	@ (801ba90 <udp_input+0x3e4>)
 801ba5c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 801ba60:	3301      	adds	r3, #1
 801ba62:	b29a      	uxth	r2, r3
 801ba64:	4b0a      	ldr	r3, [pc, #40]	@ (801ba90 <udp_input+0x3e4>)
 801ba66:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
      UDP_STATS_INC(udp.drop);
 801ba6a:	4b09      	ldr	r3, [pc, #36]	@ (801ba90 <udp_input+0x3e4>)
 801ba6c:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 801ba70:	3301      	adds	r3, #1
 801ba72:	b29a      	uxth	r2, r3
 801ba74:	4b06      	ldr	r3, [pc, #24]	@ (801ba90 <udp_input+0x3e4>)
 801ba76:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
      pbuf_free(p);
 801ba7a:	6878      	ldr	r0, [r7, #4]
 801ba7c:	f7f8 fffe 	bl	8014a7c <pbuf_free>
  return;
 801ba80:	e003      	b.n	801ba8a <udp_input+0x3de>
    pbuf_free(p);
 801ba82:	6878      	ldr	r0, [r7, #4]
 801ba84:	f7f8 fffa 	bl	8014a7c <pbuf_free>
  return;
 801ba88:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801ba8a:	372c      	adds	r7, #44	@ 0x2c
 801ba8c:	46bd      	mov	sp, r7
 801ba8e:	bd90      	pop	{r4, r7, pc}
 801ba90:	2002d36c 	.word	0x2002d36c
 801ba94:	200270fc 	.word	0x200270fc
 801ba98:	08024f4c 	.word	0x08024f4c
 801ba9c:	08024dd8 	.word	0x08024dd8
 801baa0:	08024f6c 	.word	0x08024f6c
 801baa4:	08024e2c 	.word	0x08024e2c
 801baa8:	2002710c 	.word	0x2002710c
 801baac:	08024f88 	.word	0x08024f88

0801bab0 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801bab0:	b580      	push	{r7, lr}
 801bab2:	b082      	sub	sp, #8
 801bab4:	af00      	add	r7, sp, #0
 801bab6:	6078      	str	r0, [r7, #4]
 801bab8:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801baba:	687b      	ldr	r3, [r7, #4]
 801babc:	2b00      	cmp	r3, #0
 801babe:	d109      	bne.n	801bad4 <udp_send+0x24>
 801bac0:	4b11      	ldr	r3, [pc, #68]	@ (801bb08 <udp_send+0x58>)
 801bac2:	f240 12d5 	movw	r2, #469	@ 0x1d5
 801bac6:	4911      	ldr	r1, [pc, #68]	@ (801bb0c <udp_send+0x5c>)
 801bac8:	4811      	ldr	r0, [pc, #68]	@ (801bb10 <udp_send+0x60>)
 801baca:	f004 fe65 	bl	8020798 <iprintf>
 801bace:	f06f 030f 	mvn.w	r3, #15
 801bad2:	e015      	b.n	801bb00 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801bad4:	683b      	ldr	r3, [r7, #0]
 801bad6:	2b00      	cmp	r3, #0
 801bad8:	d109      	bne.n	801baee <udp_send+0x3e>
 801bada:	4b0b      	ldr	r3, [pc, #44]	@ (801bb08 <udp_send+0x58>)
 801badc:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 801bae0:	490c      	ldr	r1, [pc, #48]	@ (801bb14 <udp_send+0x64>)
 801bae2:	480b      	ldr	r0, [pc, #44]	@ (801bb10 <udp_send+0x60>)
 801bae4:	f004 fe58 	bl	8020798 <iprintf>
 801bae8:	f06f 030f 	mvn.w	r3, #15
 801baec:	e008      	b.n	801bb00 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801baee:	687b      	ldr	r3, [r7, #4]
 801baf0:	1d1a      	adds	r2, r3, #4
 801baf2:	687b      	ldr	r3, [r7, #4]
 801baf4:	8a9b      	ldrh	r3, [r3, #20]
 801baf6:	6839      	ldr	r1, [r7, #0]
 801baf8:	6878      	ldr	r0, [r7, #4]
 801bafa:	f000 f80d 	bl	801bb18 <udp_sendto>
 801bafe:	4603      	mov	r3, r0
}
 801bb00:	4618      	mov	r0, r3
 801bb02:	3708      	adds	r7, #8
 801bb04:	46bd      	mov	sp, r7
 801bb06:	bd80      	pop	{r7, pc}
 801bb08:	08024dd8 	.word	0x08024dd8
 801bb0c:	08024fa0 	.word	0x08024fa0
 801bb10:	08024e2c 	.word	0x08024e2c
 801bb14:	08024fb8 	.word	0x08024fb8

0801bb18 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801bb18:	b580      	push	{r7, lr}
 801bb1a:	b088      	sub	sp, #32
 801bb1c:	af02      	add	r7, sp, #8
 801bb1e:	60f8      	str	r0, [r7, #12]
 801bb20:	60b9      	str	r1, [r7, #8]
 801bb22:	607a      	str	r2, [r7, #4]
 801bb24:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801bb26:	68fb      	ldr	r3, [r7, #12]
 801bb28:	2b00      	cmp	r3, #0
 801bb2a:	d109      	bne.n	801bb40 <udp_sendto+0x28>
 801bb2c:	4b3f      	ldr	r3, [pc, #252]	@ (801bc2c <udp_sendto+0x114>)
 801bb2e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801bb32:	493f      	ldr	r1, [pc, #252]	@ (801bc30 <udp_sendto+0x118>)
 801bb34:	483f      	ldr	r0, [pc, #252]	@ (801bc34 <udp_sendto+0x11c>)
 801bb36:	f004 fe2f 	bl	8020798 <iprintf>
 801bb3a:	f06f 030f 	mvn.w	r3, #15
 801bb3e:	e070      	b.n	801bc22 <udp_sendto+0x10a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801bb40:	68bb      	ldr	r3, [r7, #8]
 801bb42:	2b00      	cmp	r3, #0
 801bb44:	d109      	bne.n	801bb5a <udp_sendto+0x42>
 801bb46:	4b39      	ldr	r3, [pc, #228]	@ (801bc2c <udp_sendto+0x114>)
 801bb48:	f240 2219 	movw	r2, #537	@ 0x219
 801bb4c:	493a      	ldr	r1, [pc, #232]	@ (801bc38 <udp_sendto+0x120>)
 801bb4e:	4839      	ldr	r0, [pc, #228]	@ (801bc34 <udp_sendto+0x11c>)
 801bb50:	f004 fe22 	bl	8020798 <iprintf>
 801bb54:	f06f 030f 	mvn.w	r3, #15
 801bb58:	e063      	b.n	801bc22 <udp_sendto+0x10a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801bb5a:	687b      	ldr	r3, [r7, #4]
 801bb5c:	2b00      	cmp	r3, #0
 801bb5e:	d109      	bne.n	801bb74 <udp_sendto+0x5c>
 801bb60:	4b32      	ldr	r3, [pc, #200]	@ (801bc2c <udp_sendto+0x114>)
 801bb62:	f240 221a 	movw	r2, #538	@ 0x21a
 801bb66:	4935      	ldr	r1, [pc, #212]	@ (801bc3c <udp_sendto+0x124>)
 801bb68:	4832      	ldr	r0, [pc, #200]	@ (801bc34 <udp_sendto+0x11c>)
 801bb6a:	f004 fe15 	bl	8020798 <iprintf>
 801bb6e:	f06f 030f 	mvn.w	r3, #15
 801bb72:	e056      	b.n	801bc22 <udp_sendto+0x10a>

  if (!IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));
 801bb74:	4832      	ldr	r0, [pc, #200]	@ (801bc40 <udp_sendto+0x128>)
 801bb76:	f004 fe7f 	bl	8020878 <puts>

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801bb7a:	68fb      	ldr	r3, [r7, #12]
 801bb7c:	7a1b      	ldrb	r3, [r3, #8]
 801bb7e:	2b00      	cmp	r3, #0
 801bb80:	d006      	beq.n	801bb90 <udp_sendto+0x78>
    netif = netif_get_by_index(pcb->netif_idx);
 801bb82:	68fb      	ldr	r3, [r7, #12]
 801bb84:	7a1b      	ldrb	r3, [r3, #8]
 801bb86:	4618      	mov	r0, r3
 801bb88:	f7f8 fb9e 	bl	80142c8 <netif_get_by_index>
 801bb8c:	6178      	str	r0, [r7, #20]
 801bb8e:	e003      	b.n	801bb98 <udp_sendto+0x80>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801bb90:	6878      	ldr	r0, [r7, #4]
 801bb92:	f001 fdfd 	bl	801d790 <ip4_route>
 801bb96:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801bb98:	697b      	ldr	r3, [r7, #20]
 801bb9a:	2b00      	cmp	r3, #0
 801bb9c:	d137      	bne.n	801bc0e <udp_sendto+0xf6>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
 801bb9e:	4829      	ldr	r0, [pc, #164]	@ (801bc44 <udp_sendto+0x12c>)
 801bba0:	f004 fdfa 	bl	8020798 <iprintf>
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
 801bba4:	687b      	ldr	r3, [r7, #4]
 801bba6:	2b00      	cmp	r3, #0
 801bba8:	d003      	beq.n	801bbb2 <udp_sendto+0x9a>
 801bbaa:	687b      	ldr	r3, [r7, #4]
 801bbac:	781b      	ldrb	r3, [r3, #0]
 801bbae:	4619      	mov	r1, r3
 801bbb0:	e000      	b.n	801bbb4 <udp_sendto+0x9c>
 801bbb2:	2100      	movs	r1, #0
 801bbb4:	687b      	ldr	r3, [r7, #4]
 801bbb6:	2b00      	cmp	r3, #0
 801bbb8:	d004      	beq.n	801bbc4 <udp_sendto+0xac>
 801bbba:	687b      	ldr	r3, [r7, #4]
 801bbbc:	3301      	adds	r3, #1
 801bbbe:	781b      	ldrb	r3, [r3, #0]
 801bbc0:	461a      	mov	r2, r3
 801bbc2:	e000      	b.n	801bbc6 <udp_sendto+0xae>
 801bbc4:	2200      	movs	r2, #0
 801bbc6:	687b      	ldr	r3, [r7, #4]
 801bbc8:	2b00      	cmp	r3, #0
 801bbca:	d004      	beq.n	801bbd6 <udp_sendto+0xbe>
 801bbcc:	687b      	ldr	r3, [r7, #4]
 801bbce:	3302      	adds	r3, #2
 801bbd0:	781b      	ldrb	r3, [r3, #0]
 801bbd2:	4618      	mov	r0, r3
 801bbd4:	e000      	b.n	801bbd8 <udp_sendto+0xc0>
 801bbd6:	2000      	movs	r0, #0
 801bbd8:	687b      	ldr	r3, [r7, #4]
 801bbda:	2b00      	cmp	r3, #0
 801bbdc:	d003      	beq.n	801bbe6 <udp_sendto+0xce>
 801bbde:	687b      	ldr	r3, [r7, #4]
 801bbe0:	3303      	adds	r3, #3
 801bbe2:	781b      	ldrb	r3, [r3, #0]
 801bbe4:	e000      	b.n	801bbe8 <udp_sendto+0xd0>
 801bbe6:	2300      	movs	r3, #0
 801bbe8:	9300      	str	r3, [sp, #0]
 801bbea:	4603      	mov	r3, r0
 801bbec:	4816      	ldr	r0, [pc, #88]	@ (801bc48 <udp_sendto+0x130>)
 801bbee:	f004 fdd3 	bl	8020798 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
 801bbf2:	200a      	movs	r0, #10
 801bbf4:	f004 fde2 	bl	80207bc <putchar>
    UDP_STATS_INC(udp.rterr);
 801bbf8:	4b14      	ldr	r3, [pc, #80]	@ (801bc4c <udp_sendto+0x134>)
 801bbfa:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 801bbfe:	3301      	adds	r3, #1
 801bc00:	b29a      	uxth	r2, r3
 801bc02:	4b12      	ldr	r3, [pc, #72]	@ (801bc4c <udp_sendto+0x134>)
 801bc04:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
    return ERR_RTE;
 801bc08:	f06f 0303 	mvn.w	r3, #3
 801bc0c:	e009      	b.n	801bc22 <udp_sendto+0x10a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801bc0e:	887a      	ldrh	r2, [r7, #2]
 801bc10:	697b      	ldr	r3, [r7, #20]
 801bc12:	9300      	str	r3, [sp, #0]
 801bc14:	4613      	mov	r3, r2
 801bc16:	687a      	ldr	r2, [r7, #4]
 801bc18:	68b9      	ldr	r1, [r7, #8]
 801bc1a:	68f8      	ldr	r0, [r7, #12]
 801bc1c:	f000 f818 	bl	801bc50 <udp_sendto_if>
 801bc20:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801bc22:	4618      	mov	r0, r3
 801bc24:	3718      	adds	r7, #24
 801bc26:	46bd      	mov	sp, r7
 801bc28:	bd80      	pop	{r7, pc}
 801bc2a:	bf00      	nop
 801bc2c:	08024dd8 	.word	0x08024dd8
 801bc30:	08024fd0 	.word	0x08024fd0
 801bc34:	08024e2c 	.word	0x08024e2c
 801bc38:	08024fe8 	.word	0x08024fe8
 801bc3c:	08025004 	.word	0x08025004
 801bc40:	08025020 	.word	0x08025020
 801bc44:	0802502c 	.word	0x0802502c
 801bc48:	08024f1c 	.word	0x08024f1c
 801bc4c:	2002d36c 	.word	0x2002d36c

0801bc50 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801bc50:	b580      	push	{r7, lr}
 801bc52:	b088      	sub	sp, #32
 801bc54:	af02      	add	r7, sp, #8
 801bc56:	60f8      	str	r0, [r7, #12]
 801bc58:	60b9      	str	r1, [r7, #8]
 801bc5a:	607a      	str	r2, [r7, #4]
 801bc5c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801bc5e:	68fb      	ldr	r3, [r7, #12]
 801bc60:	2b00      	cmp	r3, #0
 801bc62:	d109      	bne.n	801bc78 <udp_sendto_if+0x28>
 801bc64:	4b2e      	ldr	r3, [pc, #184]	@ (801bd20 <udp_sendto_if+0xd0>)
 801bc66:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801bc6a:	492e      	ldr	r1, [pc, #184]	@ (801bd24 <udp_sendto_if+0xd4>)
 801bc6c:	482e      	ldr	r0, [pc, #184]	@ (801bd28 <udp_sendto_if+0xd8>)
 801bc6e:	f004 fd93 	bl	8020798 <iprintf>
 801bc72:	f06f 030f 	mvn.w	r3, #15
 801bc76:	e04f      	b.n	801bd18 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801bc78:	68bb      	ldr	r3, [r7, #8]
 801bc7a:	2b00      	cmp	r3, #0
 801bc7c:	d109      	bne.n	801bc92 <udp_sendto_if+0x42>
 801bc7e:	4b28      	ldr	r3, [pc, #160]	@ (801bd20 <udp_sendto_if+0xd0>)
 801bc80:	f240 2281 	movw	r2, #641	@ 0x281
 801bc84:	4929      	ldr	r1, [pc, #164]	@ (801bd2c <udp_sendto_if+0xdc>)
 801bc86:	4828      	ldr	r0, [pc, #160]	@ (801bd28 <udp_sendto_if+0xd8>)
 801bc88:	f004 fd86 	bl	8020798 <iprintf>
 801bc8c:	f06f 030f 	mvn.w	r3, #15
 801bc90:	e042      	b.n	801bd18 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801bc92:	687b      	ldr	r3, [r7, #4]
 801bc94:	2b00      	cmp	r3, #0
 801bc96:	d109      	bne.n	801bcac <udp_sendto_if+0x5c>
 801bc98:	4b21      	ldr	r3, [pc, #132]	@ (801bd20 <udp_sendto_if+0xd0>)
 801bc9a:	f240 2282 	movw	r2, #642	@ 0x282
 801bc9e:	4924      	ldr	r1, [pc, #144]	@ (801bd30 <udp_sendto_if+0xe0>)
 801bca0:	4821      	ldr	r0, [pc, #132]	@ (801bd28 <udp_sendto_if+0xd8>)
 801bca2:	f004 fd79 	bl	8020798 <iprintf>
 801bca6:	f06f 030f 	mvn.w	r3, #15
 801bcaa:	e035      	b.n	801bd18 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801bcac:	6a3b      	ldr	r3, [r7, #32]
 801bcae:	2b00      	cmp	r3, #0
 801bcb0:	d109      	bne.n	801bcc6 <udp_sendto_if+0x76>
 801bcb2:	4b1b      	ldr	r3, [pc, #108]	@ (801bd20 <udp_sendto_if+0xd0>)
 801bcb4:	f240 2283 	movw	r2, #643	@ 0x283
 801bcb8:	491e      	ldr	r1, [pc, #120]	@ (801bd34 <udp_sendto_if+0xe4>)
 801bcba:	481b      	ldr	r0, [pc, #108]	@ (801bd28 <udp_sendto_if+0xd8>)
 801bcbc:	f004 fd6c 	bl	8020798 <iprintf>
 801bcc0:	f06f 030f 	mvn.w	r3, #15
 801bcc4:	e028      	b.n	801bd18 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801bcc6:	68fb      	ldr	r3, [r7, #12]
 801bcc8:	2b00      	cmp	r3, #0
 801bcca:	d009      	beq.n	801bce0 <udp_sendto_if+0x90>
 801bccc:	68fb      	ldr	r3, [r7, #12]
 801bcce:	681b      	ldr	r3, [r3, #0]
 801bcd0:	2b00      	cmp	r3, #0
 801bcd2:	d005      	beq.n	801bce0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801bcd4:	68fb      	ldr	r3, [r7, #12]
 801bcd6:	681b      	ldr	r3, [r3, #0]
 801bcd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801bcdc:	2be0      	cmp	r3, #224	@ 0xe0
 801bcde:	d103      	bne.n	801bce8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801bce0:	6a3b      	ldr	r3, [r7, #32]
 801bce2:	3304      	adds	r3, #4
 801bce4:	617b      	str	r3, [r7, #20]
 801bce6:	e00b      	b.n	801bd00 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801bce8:	68fb      	ldr	r3, [r7, #12]
 801bcea:	681a      	ldr	r2, [r3, #0]
 801bcec:	6a3b      	ldr	r3, [r7, #32]
 801bcee:	3304      	adds	r3, #4
 801bcf0:	681b      	ldr	r3, [r3, #0]
 801bcf2:	429a      	cmp	r2, r3
 801bcf4:	d002      	beq.n	801bcfc <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801bcf6:	f06f 0303 	mvn.w	r3, #3
 801bcfa:	e00d      	b.n	801bd18 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801bcfc:	68fb      	ldr	r3, [r7, #12]
 801bcfe:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801bd00:	887a      	ldrh	r2, [r7, #2]
 801bd02:	697b      	ldr	r3, [r7, #20]
 801bd04:	9301      	str	r3, [sp, #4]
 801bd06:	6a3b      	ldr	r3, [r7, #32]
 801bd08:	9300      	str	r3, [sp, #0]
 801bd0a:	4613      	mov	r3, r2
 801bd0c:	687a      	ldr	r2, [r7, #4]
 801bd0e:	68b9      	ldr	r1, [r7, #8]
 801bd10:	68f8      	ldr	r0, [r7, #12]
 801bd12:	f000 f811 	bl	801bd38 <udp_sendto_if_src>
 801bd16:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801bd18:	4618      	mov	r0, r3
 801bd1a:	3718      	adds	r7, #24
 801bd1c:	46bd      	mov	sp, r7
 801bd1e:	bd80      	pop	{r7, pc}
 801bd20:	08024dd8 	.word	0x08024dd8
 801bd24:	08025044 	.word	0x08025044
 801bd28:	08024e2c 	.word	0x08024e2c
 801bd2c:	08025060 	.word	0x08025060
 801bd30:	0802507c 	.word	0x0802507c
 801bd34:	0802509c 	.word	0x0802509c

0801bd38 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801bd38:	b580      	push	{r7, lr}
 801bd3a:	b08c      	sub	sp, #48	@ 0x30
 801bd3c:	af04      	add	r7, sp, #16
 801bd3e:	60f8      	str	r0, [r7, #12]
 801bd40:	60b9      	str	r1, [r7, #8]
 801bd42:	607a      	str	r2, [r7, #4]
 801bd44:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801bd46:	68fb      	ldr	r3, [r7, #12]
 801bd48:	2b00      	cmp	r3, #0
 801bd4a:	d109      	bne.n	801bd60 <udp_sendto_if_src+0x28>
 801bd4c:	4b7e      	ldr	r3, [pc, #504]	@ (801bf48 <udp_sendto_if_src+0x210>)
 801bd4e:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801bd52:	497e      	ldr	r1, [pc, #504]	@ (801bf4c <udp_sendto_if_src+0x214>)
 801bd54:	487e      	ldr	r0, [pc, #504]	@ (801bf50 <udp_sendto_if_src+0x218>)
 801bd56:	f004 fd1f 	bl	8020798 <iprintf>
 801bd5a:	f06f 030f 	mvn.w	r3, #15
 801bd5e:	e0ee      	b.n	801bf3e <udp_sendto_if_src+0x206>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801bd60:	68bb      	ldr	r3, [r7, #8]
 801bd62:	2b00      	cmp	r3, #0
 801bd64:	d109      	bne.n	801bd7a <udp_sendto_if_src+0x42>
 801bd66:	4b78      	ldr	r3, [pc, #480]	@ (801bf48 <udp_sendto_if_src+0x210>)
 801bd68:	f240 22d2 	movw	r2, #722	@ 0x2d2
 801bd6c:	4979      	ldr	r1, [pc, #484]	@ (801bf54 <udp_sendto_if_src+0x21c>)
 801bd6e:	4878      	ldr	r0, [pc, #480]	@ (801bf50 <udp_sendto_if_src+0x218>)
 801bd70:	f004 fd12 	bl	8020798 <iprintf>
 801bd74:	f06f 030f 	mvn.w	r3, #15
 801bd78:	e0e1      	b.n	801bf3e <udp_sendto_if_src+0x206>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801bd7a:	687b      	ldr	r3, [r7, #4]
 801bd7c:	2b00      	cmp	r3, #0
 801bd7e:	d109      	bne.n	801bd94 <udp_sendto_if_src+0x5c>
 801bd80:	4b71      	ldr	r3, [pc, #452]	@ (801bf48 <udp_sendto_if_src+0x210>)
 801bd82:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801bd86:	4974      	ldr	r1, [pc, #464]	@ (801bf58 <udp_sendto_if_src+0x220>)
 801bd88:	4871      	ldr	r0, [pc, #452]	@ (801bf50 <udp_sendto_if_src+0x218>)
 801bd8a:	f004 fd05 	bl	8020798 <iprintf>
 801bd8e:	f06f 030f 	mvn.w	r3, #15
 801bd92:	e0d4      	b.n	801bf3e <udp_sendto_if_src+0x206>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801bd94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd96:	2b00      	cmp	r3, #0
 801bd98:	d109      	bne.n	801bdae <udp_sendto_if_src+0x76>
 801bd9a:	4b6b      	ldr	r3, [pc, #428]	@ (801bf48 <udp_sendto_if_src+0x210>)
 801bd9c:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 801bda0:	496e      	ldr	r1, [pc, #440]	@ (801bf5c <udp_sendto_if_src+0x224>)
 801bda2:	486b      	ldr	r0, [pc, #428]	@ (801bf50 <udp_sendto_if_src+0x218>)
 801bda4:	f004 fcf8 	bl	8020798 <iprintf>
 801bda8:	f06f 030f 	mvn.w	r3, #15
 801bdac:	e0c7      	b.n	801bf3e <udp_sendto_if_src+0x206>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801bdae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bdb0:	2b00      	cmp	r3, #0
 801bdb2:	d109      	bne.n	801bdc8 <udp_sendto_if_src+0x90>
 801bdb4:	4b64      	ldr	r3, [pc, #400]	@ (801bf48 <udp_sendto_if_src+0x210>)
 801bdb6:	f240 22d5 	movw	r2, #725	@ 0x2d5
 801bdba:	4969      	ldr	r1, [pc, #420]	@ (801bf60 <udp_sendto_if_src+0x228>)
 801bdbc:	4864      	ldr	r0, [pc, #400]	@ (801bf50 <udp_sendto_if_src+0x218>)
 801bdbe:	f004 fceb 	bl	8020798 <iprintf>
 801bdc2:	f06f 030f 	mvn.w	r3, #15
 801bdc6:	e0ba      	b.n	801bf3e <udp_sendto_if_src+0x206>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801bdc8:	68fb      	ldr	r3, [r7, #12]
 801bdca:	8a5b      	ldrh	r3, [r3, #18]
 801bdcc:	2b00      	cmp	r3, #0
 801bdce:	d115      	bne.n	801bdfc <udp_sendto_if_src+0xc4>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
 801bdd0:	4864      	ldr	r0, [pc, #400]	@ (801bf64 <udp_sendto_if_src+0x22c>)
 801bdd2:	f004 fd51 	bl	8020878 <puts>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801bdd6:	68f9      	ldr	r1, [r7, #12]
 801bdd8:	68fb      	ldr	r3, [r7, #12]
 801bdda:	8a5b      	ldrh	r3, [r3, #18]
 801bddc:	461a      	mov	r2, r3
 801bdde:	68f8      	ldr	r0, [r7, #12]
 801bde0:	f000 f8d6 	bl	801bf90 <udp_bind>
 801bde4:	4603      	mov	r3, r0
 801bde6:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801bde8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801bdec:	2b00      	cmp	r3, #0
 801bdee:	d005      	beq.n	801bdfc <udp_sendto_if_src+0xc4>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
 801bdf0:	485d      	ldr	r0, [pc, #372]	@ (801bf68 <udp_sendto_if_src+0x230>)
 801bdf2:	f004 fd41 	bl	8020878 <puts>
      return err;
 801bdf6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801bdfa:	e0a0      	b.n	801bf3e <udp_sendto_if_src+0x206>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801bdfc:	68bb      	ldr	r3, [r7, #8]
 801bdfe:	891b      	ldrh	r3, [r3, #8]
 801be00:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801be04:	4293      	cmp	r3, r2
 801be06:	d902      	bls.n	801be0e <udp_sendto_if_src+0xd6>
    return ERR_MEM;
 801be08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801be0c:	e097      	b.n	801bf3e <udp_sendto_if_src+0x206>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801be0e:	2108      	movs	r1, #8
 801be10:	68b8      	ldr	r0, [r7, #8]
 801be12:	f7f8 fd95 	bl	8014940 <pbuf_add_header>
 801be16:	4603      	mov	r3, r0
 801be18:	2b00      	cmp	r3, #0
 801be1a:	d01d      	beq.n	801be58 <udp_sendto_if_src+0x120>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801be1c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801be20:	2108      	movs	r1, #8
 801be22:	2022      	movs	r0, #34	@ 0x22
 801be24:	f7f8 fafe 	bl	8014424 <pbuf_alloc>
 801be28:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801be2a:	69fb      	ldr	r3, [r7, #28]
 801be2c:	2b00      	cmp	r3, #0
 801be2e:	d105      	bne.n	801be3c <udp_sendto_if_src+0x104>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
 801be30:	484e      	ldr	r0, [pc, #312]	@ (801bf6c <udp_sendto_if_src+0x234>)
 801be32:	f004 fd21 	bl	8020878 <puts>
      return ERR_MEM;
 801be36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801be3a:	e080      	b.n	801bf3e <udp_sendto_if_src+0x206>
    }
    if (p->tot_len != 0) {
 801be3c:	68bb      	ldr	r3, [r7, #8]
 801be3e:	891b      	ldrh	r3, [r3, #8]
 801be40:	2b00      	cmp	r3, #0
 801be42:	d003      	beq.n	801be4c <udp_sendto_if_src+0x114>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801be44:	68b9      	ldr	r1, [r7, #8]
 801be46:	69f8      	ldr	r0, [r7, #28]
 801be48:	f7f8 ff54 	bl	8014cf4 <pbuf_chain>
    }
    /* first pbuf q points to header pbuf */
    LWIP_DEBUGF(UDP_DEBUG,
 801be4c:	68ba      	ldr	r2, [r7, #8]
 801be4e:	69f9      	ldr	r1, [r7, #28]
 801be50:	4847      	ldr	r0, [pc, #284]	@ (801bf70 <udp_sendto_if_src+0x238>)
 801be52:	f004 fca1 	bl	8020798 <iprintf>
 801be56:	e005      	b.n	801be64 <udp_sendto_if_src+0x12c>
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801be58:	68bb      	ldr	r3, [r7, #8]
 801be5a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
 801be5c:	68b9      	ldr	r1, [r7, #8]
 801be5e:	4845      	ldr	r0, [pc, #276]	@ (801bf74 <udp_sendto_if_src+0x23c>)
 801be60:	f004 fc9a 	bl	8020798 <iprintf>
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801be64:	69fb      	ldr	r3, [r7, #28]
 801be66:	895b      	ldrh	r3, [r3, #10]
 801be68:	2b07      	cmp	r3, #7
 801be6a:	d806      	bhi.n	801be7a <udp_sendto_if_src+0x142>
 801be6c:	4b36      	ldr	r3, [pc, #216]	@ (801bf48 <udp_sendto_if_src+0x210>)
 801be6e:	f240 320d 	movw	r2, #781	@ 0x30d
 801be72:	4941      	ldr	r1, [pc, #260]	@ (801bf78 <udp_sendto_if_src+0x240>)
 801be74:	4836      	ldr	r0, [pc, #216]	@ (801bf50 <udp_sendto_if_src+0x218>)
 801be76:	f004 fc8f 	bl	8020798 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801be7a:	69fb      	ldr	r3, [r7, #28]
 801be7c:	685b      	ldr	r3, [r3, #4]
 801be7e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801be80:	68fb      	ldr	r3, [r7, #12]
 801be82:	8a5b      	ldrh	r3, [r3, #18]
 801be84:	4618      	mov	r0, r3
 801be86:	f7f6 ffcb 	bl	8012e20 <lwip_htons>
 801be8a:	4603      	mov	r3, r0
 801be8c:	461a      	mov	r2, r3
 801be8e:	697b      	ldr	r3, [r7, #20]
 801be90:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801be92:	887b      	ldrh	r3, [r7, #2]
 801be94:	4618      	mov	r0, r3
 801be96:	f7f6 ffc3 	bl	8012e20 <lwip_htons>
 801be9a:	4603      	mov	r3, r0
 801be9c:	461a      	mov	r2, r3
 801be9e:	697b      	ldr	r3, [r7, #20]
 801bea0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801bea2:	697b      	ldr	r3, [r7, #20]
 801bea4:	2200      	movs	r2, #0
 801bea6:	719a      	strb	r2, [r3, #6]
 801bea8:	2200      	movs	r2, #0
 801beaa:	71da      	strb	r2, [r3, #7]
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
    q->flags |= PBUF_FLAG_MCASTLOOP;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: sending datagram of length %"U16_F"\n", q->tot_len));
 801beac:	69fb      	ldr	r3, [r7, #28]
 801beae:	891b      	ldrh	r3, [r3, #8]
 801beb0:	4619      	mov	r1, r3
 801beb2:	4832      	ldr	r0, [pc, #200]	@ (801bf7c <udp_sendto_if_src+0x244>)
 801beb4:	f004 fc70 	bl	8020798 <iprintf>

    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
 801beb8:	69fb      	ldr	r3, [r7, #28]
 801beba:	891b      	ldrh	r3, [r3, #8]
 801bebc:	4619      	mov	r1, r3
 801bebe:	4830      	ldr	r0, [pc, #192]	@ (801bf80 <udp_sendto_if_src+0x248>)
 801bec0:	f004 fc6a 	bl	8020798 <iprintf>
    udphdr->len = lwip_htons(q->tot_len);
 801bec4:	69fb      	ldr	r3, [r7, #28]
 801bec6:	891b      	ldrh	r3, [r3, #8]
 801bec8:	4618      	mov	r0, r3
 801beca:	f7f6 ffa9 	bl	8012e20 <lwip_htons>
 801bece:	4603      	mov	r3, r0
 801bed0:	461a      	mov	r2, r3
 801bed2:	697b      	ldr	r3, [r7, #20]
 801bed4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801bed6:	2311      	movs	r3, #17
 801bed8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801beda:	68fb      	ldr	r3, [r7, #12]
 801bedc:	7adb      	ldrb	r3, [r3, #11]
 801bede:	74bb      	strb	r3, [r7, #18]
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
 801bee0:	697b      	ldr	r3, [r7, #20]
 801bee2:	88db      	ldrh	r3, [r3, #6]
 801bee4:	b29b      	uxth	r3, r3
 801bee6:	4619      	mov	r1, r3
 801bee8:	4826      	ldr	r0, [pc, #152]	@ (801bf84 <udp_sendto_if_src+0x24c>)
 801beea:	f004 fc55 	bl	8020798 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
 801beee:	7cfb      	ldrb	r3, [r7, #19]
 801bef0:	4619      	mov	r1, r3
 801bef2:	4825      	ldr	r0, [pc, #148]	@ (801bf88 <udp_sendto_if_src+0x250>)
 801bef4:	f004 fc50 	bl	8020798 <iprintf>
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801bef8:	68fb      	ldr	r3, [r7, #12]
 801befa:	7a9b      	ldrb	r3, [r3, #10]
 801befc:	7cb9      	ldrb	r1, [r7, #18]
 801befe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801bf00:	9202      	str	r2, [sp, #8]
 801bf02:	7cfa      	ldrb	r2, [r7, #19]
 801bf04:	9201      	str	r2, [sp, #4]
 801bf06:	9300      	str	r3, [sp, #0]
 801bf08:	460b      	mov	r3, r1
 801bf0a:	687a      	ldr	r2, [r7, #4]
 801bf0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801bf0e:	69f8      	ldr	r0, [r7, #28]
 801bf10:	f001 fe7e 	bl	801dc10 <ip4_output_if_src>
 801bf14:	4603      	mov	r3, r0
 801bf16:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801bf18:	69fa      	ldr	r2, [r7, #28]
 801bf1a:	68bb      	ldr	r3, [r7, #8]
 801bf1c:	429a      	cmp	r2, r3
 801bf1e:	d004      	beq.n	801bf2a <udp_sendto_if_src+0x1f2>
    /* free the header pbuf */
    pbuf_free(q);
 801bf20:	69f8      	ldr	r0, [r7, #28]
 801bf22:	f7f8 fdab 	bl	8014a7c <pbuf_free>
    q = NULL;
 801bf26:	2300      	movs	r3, #0
 801bf28:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
 801bf2a:	4b18      	ldr	r3, [pc, #96]	@ (801bf8c <udp_sendto_if_src+0x254>)
 801bf2c:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 801bf30:	3301      	adds	r3, #1
 801bf32:	b29a      	uxth	r2, r3
 801bf34:	4b15      	ldr	r3, [pc, #84]	@ (801bf8c <udp_sendto_if_src+0x254>)
 801bf36:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
  return err;
 801bf3a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801bf3e:	4618      	mov	r0, r3
 801bf40:	3720      	adds	r7, #32
 801bf42:	46bd      	mov	sp, r7
 801bf44:	bd80      	pop	{r7, pc}
 801bf46:	bf00      	nop
 801bf48:	08024dd8 	.word	0x08024dd8
 801bf4c:	080250bc 	.word	0x080250bc
 801bf50:	08024e2c 	.word	0x08024e2c
 801bf54:	080250dc 	.word	0x080250dc
 801bf58:	080250fc 	.word	0x080250fc
 801bf5c:	08025120 	.word	0x08025120
 801bf60:	08025144 	.word	0x08025144
 801bf64:	08025168 	.word	0x08025168
 801bf68:	08025198 	.word	0x08025198
 801bf6c:	080251bc 	.word	0x080251bc
 801bf70:	080251e0 	.word	0x080251e0
 801bf74:	08025218 	.word	0x08025218
 801bf78:	08025244 	.word	0x08025244
 801bf7c:	08025274 	.word	0x08025274
 801bf80:	080252a0 	.word	0x080252a0
 801bf84:	080252c4 	.word	0x080252c4
 801bf88:	080252e4 	.word	0x080252e4
 801bf8c:	2002d36c 	.word	0x2002d36c

0801bf90 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801bf90:	b580      	push	{r7, lr}
 801bf92:	b088      	sub	sp, #32
 801bf94:	af02      	add	r7, sp, #8
 801bf96:	60f8      	str	r0, [r7, #12]
 801bf98:	60b9      	str	r1, [r7, #8]
 801bf9a:	4613      	mov	r3, r2
 801bf9c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801bf9e:	68bb      	ldr	r3, [r7, #8]
 801bfa0:	2b00      	cmp	r3, #0
 801bfa2:	d101      	bne.n	801bfa8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801bfa4:	4b65      	ldr	r3, [pc, #404]	@ (801c13c <udp_bind+0x1ac>)
 801bfa6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801bfa8:	68fb      	ldr	r3, [r7, #12]
 801bfaa:	2b00      	cmp	r3, #0
 801bfac:	d109      	bne.n	801bfc2 <udp_bind+0x32>
 801bfae:	4b64      	ldr	r3, [pc, #400]	@ (801c140 <udp_bind+0x1b0>)
 801bfb0:	f240 32b7 	movw	r2, #951	@ 0x3b7
 801bfb4:	4963      	ldr	r1, [pc, #396]	@ (801c144 <udp_bind+0x1b4>)
 801bfb6:	4864      	ldr	r0, [pc, #400]	@ (801c148 <udp_bind+0x1b8>)
 801bfb8:	f004 fbee 	bl	8020798 <iprintf>
 801bfbc:	f06f 030f 	mvn.w	r3, #15
 801bfc0:	e0b7      	b.n	801c132 <udp_bind+0x1a2>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
 801bfc2:	4862      	ldr	r0, [pc, #392]	@ (801c14c <udp_bind+0x1bc>)
 801bfc4:	f004 fbe8 	bl	8020798 <iprintf>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
 801bfc8:	68bb      	ldr	r3, [r7, #8]
 801bfca:	2b00      	cmp	r3, #0
 801bfcc:	d003      	beq.n	801bfd6 <udp_bind+0x46>
 801bfce:	68bb      	ldr	r3, [r7, #8]
 801bfd0:	781b      	ldrb	r3, [r3, #0]
 801bfd2:	4619      	mov	r1, r3
 801bfd4:	e000      	b.n	801bfd8 <udp_bind+0x48>
 801bfd6:	2100      	movs	r1, #0
 801bfd8:	68bb      	ldr	r3, [r7, #8]
 801bfda:	2b00      	cmp	r3, #0
 801bfdc:	d004      	beq.n	801bfe8 <udp_bind+0x58>
 801bfde:	68bb      	ldr	r3, [r7, #8]
 801bfe0:	3301      	adds	r3, #1
 801bfe2:	781b      	ldrb	r3, [r3, #0]
 801bfe4:	461a      	mov	r2, r3
 801bfe6:	e000      	b.n	801bfea <udp_bind+0x5a>
 801bfe8:	2200      	movs	r2, #0
 801bfea:	68bb      	ldr	r3, [r7, #8]
 801bfec:	2b00      	cmp	r3, #0
 801bfee:	d004      	beq.n	801bffa <udp_bind+0x6a>
 801bff0:	68bb      	ldr	r3, [r7, #8]
 801bff2:	3302      	adds	r3, #2
 801bff4:	781b      	ldrb	r3, [r3, #0]
 801bff6:	4618      	mov	r0, r3
 801bff8:	e000      	b.n	801bffc <udp_bind+0x6c>
 801bffa:	2000      	movs	r0, #0
 801bffc:	68bb      	ldr	r3, [r7, #8]
 801bffe:	2b00      	cmp	r3, #0
 801c000:	d003      	beq.n	801c00a <udp_bind+0x7a>
 801c002:	68bb      	ldr	r3, [r7, #8]
 801c004:	3303      	adds	r3, #3
 801c006:	781b      	ldrb	r3, [r3, #0]
 801c008:	e000      	b.n	801c00c <udp_bind+0x7c>
 801c00a:	2300      	movs	r3, #0
 801c00c:	9300      	str	r3, [sp, #0]
 801c00e:	4603      	mov	r3, r0
 801c010:	484f      	ldr	r0, [pc, #316]	@ (801c150 <udp_bind+0x1c0>)
 801c012:	f004 fbc1 	bl	8020798 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));
 801c016:	88fb      	ldrh	r3, [r7, #6]
 801c018:	4619      	mov	r1, r3
 801c01a:	484e      	ldr	r0, [pc, #312]	@ (801c154 <udp_bind+0x1c4>)
 801c01c:	f004 fbbc 	bl	8020798 <iprintf>

  rebind = 0;
 801c020:	2300      	movs	r3, #0
 801c022:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c024:	4b4c      	ldr	r3, [pc, #304]	@ (801c158 <udp_bind+0x1c8>)
 801c026:	681b      	ldr	r3, [r3, #0]
 801c028:	617b      	str	r3, [r7, #20]
 801c02a:	e009      	b.n	801c040 <udp_bind+0xb0>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801c02c:	68fa      	ldr	r2, [r7, #12]
 801c02e:	697b      	ldr	r3, [r7, #20]
 801c030:	429a      	cmp	r2, r3
 801c032:	d102      	bne.n	801c03a <udp_bind+0xaa>
      rebind = 1;
 801c034:	2301      	movs	r3, #1
 801c036:	74fb      	strb	r3, [r7, #19]
      break;
 801c038:	e005      	b.n	801c046 <udp_bind+0xb6>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c03a:	697b      	ldr	r3, [r7, #20]
 801c03c:	68db      	ldr	r3, [r3, #12]
 801c03e:	617b      	str	r3, [r7, #20]
 801c040:	697b      	ldr	r3, [r7, #20]
 801c042:	2b00      	cmp	r3, #0
 801c044:	d1f2      	bne.n	801c02c <udp_bind+0x9c>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801c046:	88fb      	ldrh	r3, [r7, #6]
 801c048:	2b00      	cmp	r3, #0
 801c04a:	d10c      	bne.n	801c066 <udp_bind+0xd6>
    port = udp_new_port();
 801c04c:	f7ff fa92 	bl	801b574 <udp_new_port>
 801c050:	4603      	mov	r3, r0
 801c052:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801c054:	88fb      	ldrh	r3, [r7, #6]
 801c056:	2b00      	cmp	r3, #0
 801c058:	d134      	bne.n	801c0c4 <udp_bind+0x134>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
 801c05a:	4840      	ldr	r0, [pc, #256]	@ (801c15c <udp_bind+0x1cc>)
 801c05c:	f004 fc0c 	bl	8020878 <puts>
      return ERR_USE;
 801c060:	f06f 0307 	mvn.w	r3, #7
 801c064:	e065      	b.n	801c132 <udp_bind+0x1a2>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c066:	4b3c      	ldr	r3, [pc, #240]	@ (801c158 <udp_bind+0x1c8>)
 801c068:	681b      	ldr	r3, [r3, #0]
 801c06a:	617b      	str	r3, [r7, #20]
 801c06c:	e027      	b.n	801c0be <udp_bind+0x12e>
      if (pcb != ipcb) {
 801c06e:	68fa      	ldr	r2, [r7, #12]
 801c070:	697b      	ldr	r3, [r7, #20]
 801c072:	429a      	cmp	r2, r3
 801c074:	d020      	beq.n	801c0b8 <udp_bind+0x128>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801c076:	697b      	ldr	r3, [r7, #20]
 801c078:	8a5b      	ldrh	r3, [r3, #18]
 801c07a:	88fa      	ldrh	r2, [r7, #6]
 801c07c:	429a      	cmp	r2, r3
 801c07e:	d11b      	bne.n	801c0b8 <udp_bind+0x128>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c080:	697b      	ldr	r3, [r7, #20]
 801c082:	681a      	ldr	r2, [r3, #0]
 801c084:	68bb      	ldr	r3, [r7, #8]
 801c086:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801c088:	429a      	cmp	r2, r3
 801c08a:	d00d      	beq.n	801c0a8 <udp_bind+0x118>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c08c:	68bb      	ldr	r3, [r7, #8]
 801c08e:	2b00      	cmp	r3, #0
 801c090:	d00a      	beq.n	801c0a8 <udp_bind+0x118>
 801c092:	68bb      	ldr	r3, [r7, #8]
 801c094:	681b      	ldr	r3, [r3, #0]
 801c096:	2b00      	cmp	r3, #0
 801c098:	d006      	beq.n	801c0a8 <udp_bind+0x118>
              ip_addr_isany(&ipcb->local_ip))) {
 801c09a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c09c:	2b00      	cmp	r3, #0
 801c09e:	d003      	beq.n	801c0a8 <udp_bind+0x118>
              ip_addr_isany(&ipcb->local_ip))) {
 801c0a0:	697b      	ldr	r3, [r7, #20]
 801c0a2:	681b      	ldr	r3, [r3, #0]
 801c0a4:	2b00      	cmp	r3, #0
 801c0a6:	d107      	bne.n	801c0b8 <udp_bind+0x128>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
 801c0a8:	88fb      	ldrh	r3, [r7, #6]
 801c0aa:	4619      	mov	r1, r3
 801c0ac:	482c      	ldr	r0, [pc, #176]	@ (801c160 <udp_bind+0x1d0>)
 801c0ae:	f004 fb73 	bl	8020798 <iprintf>
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801c0b2:	f06f 0307 	mvn.w	r3, #7
 801c0b6:	e03c      	b.n	801c132 <udp_bind+0x1a2>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c0b8:	697b      	ldr	r3, [r7, #20]
 801c0ba:	68db      	ldr	r3, [r3, #12]
 801c0bc:	617b      	str	r3, [r7, #20]
 801c0be:	697b      	ldr	r3, [r7, #20]
 801c0c0:	2b00      	cmp	r3, #0
 801c0c2:	d1d4      	bne.n	801c06e <udp_bind+0xde>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801c0c4:	68bb      	ldr	r3, [r7, #8]
 801c0c6:	2b00      	cmp	r3, #0
 801c0c8:	d002      	beq.n	801c0d0 <udp_bind+0x140>
 801c0ca:	68bb      	ldr	r3, [r7, #8]
 801c0cc:	681b      	ldr	r3, [r3, #0]
 801c0ce:	e000      	b.n	801c0d2 <udp_bind+0x142>
 801c0d0:	2300      	movs	r3, #0
 801c0d2:	68fa      	ldr	r2, [r7, #12]
 801c0d4:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801c0d6:	68fb      	ldr	r3, [r7, #12]
 801c0d8:	88fa      	ldrh	r2, [r7, #6]
 801c0da:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801c0dc:	7cfb      	ldrb	r3, [r7, #19]
 801c0de:	2b00      	cmp	r3, #0
 801c0e0:	d106      	bne.n	801c0f0 <udp_bind+0x160>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801c0e2:	4b1d      	ldr	r3, [pc, #116]	@ (801c158 <udp_bind+0x1c8>)
 801c0e4:	681a      	ldr	r2, [r3, #0]
 801c0e6:	68fb      	ldr	r3, [r7, #12]
 801c0e8:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801c0ea:	4a1b      	ldr	r2, [pc, #108]	@ (801c158 <udp_bind+0x1c8>)
 801c0ec:	68fb      	ldr	r3, [r7, #12]
 801c0ee:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
 801c0f0:	481c      	ldr	r0, [pc, #112]	@ (801c164 <udp_bind+0x1d4>)
 801c0f2:	f004 fb51 	bl	8020798 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
 801c0f6:	68fb      	ldr	r3, [r7, #12]
 801c0f8:	681b      	ldr	r3, [r3, #0]
 801c0fa:	b2db      	uxtb	r3, r3
 801c0fc:	4619      	mov	r1, r3
 801c0fe:	68fb      	ldr	r3, [r7, #12]
 801c100:	681b      	ldr	r3, [r3, #0]
 801c102:	0a1b      	lsrs	r3, r3, #8
 801c104:	b2db      	uxtb	r3, r3
 801c106:	461a      	mov	r2, r3
 801c108:	68fb      	ldr	r3, [r7, #12]
 801c10a:	681b      	ldr	r3, [r3, #0]
 801c10c:	0c1b      	lsrs	r3, r3, #16
 801c10e:	b2db      	uxtb	r3, r3
 801c110:	4618      	mov	r0, r3
 801c112:	68fb      	ldr	r3, [r7, #12]
 801c114:	681b      	ldr	r3, [r3, #0]
 801c116:	0e1b      	lsrs	r3, r3, #24
 801c118:	b2db      	uxtb	r3, r3
 801c11a:	9300      	str	r3, [sp, #0]
 801c11c:	4603      	mov	r3, r0
 801c11e:	480c      	ldr	r0, [pc, #48]	@ (801c150 <udp_bind+0x1c0>)
 801c120:	f004 fb3a 	bl	8020798 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
 801c124:	68fb      	ldr	r3, [r7, #12]
 801c126:	8a5b      	ldrh	r3, [r3, #18]
 801c128:	4619      	mov	r1, r3
 801c12a:	480f      	ldr	r0, [pc, #60]	@ (801c168 <udp_bind+0x1d8>)
 801c12c:	f004 fb34 	bl	8020798 <iprintf>
  return ERR_OK;
 801c130:	2300      	movs	r3, #0
}
 801c132:	4618      	mov	r0, r3
 801c134:	3718      	adds	r7, #24
 801c136:	46bd      	mov	sp, r7
 801c138:	bd80      	pop	{r7, pc}
 801c13a:	bf00      	nop
 801c13c:	08026884 	.word	0x08026884
 801c140:	08024dd8 	.word	0x08024dd8
 801c144:	0802530c 	.word	0x0802530c
 801c148:	08024e2c 	.word	0x08024e2c
 801c14c:	08025324 	.word	0x08025324
 801c150:	08024f1c 	.word	0x08024f1c
 801c154:	08025338 	.word	0x08025338
 801c158:	2002d4cc 	.word	0x2002d4cc
 801c15c:	08025348 	.word	0x08025348
 801c160:	08025368 	.word	0x08025368
 801c164:	080253a0 	.word	0x080253a0
 801c168:	080253b4 	.word	0x080253b4

0801c16c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801c16c:	b580      	push	{r7, lr}
 801c16e:	b084      	sub	sp, #16
 801c170:	af00      	add	r7, sp, #0
 801c172:	60f8      	str	r0, [r7, #12]
 801c174:	60b9      	str	r1, [r7, #8]
 801c176:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801c178:	68fb      	ldr	r3, [r7, #12]
 801c17a:	2b00      	cmp	r3, #0
 801c17c:	d107      	bne.n	801c18e <udp_recv+0x22>
 801c17e:	4b08      	ldr	r3, [pc, #32]	@ (801c1a0 <udp_recv+0x34>)
 801c180:	f240 428a 	movw	r2, #1162	@ 0x48a
 801c184:	4907      	ldr	r1, [pc, #28]	@ (801c1a4 <udp_recv+0x38>)
 801c186:	4808      	ldr	r0, [pc, #32]	@ (801c1a8 <udp_recv+0x3c>)
 801c188:	f004 fb06 	bl	8020798 <iprintf>
 801c18c:	e005      	b.n	801c19a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801c18e:	68fb      	ldr	r3, [r7, #12]
 801c190:	68ba      	ldr	r2, [r7, #8]
 801c192:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801c194:	68fb      	ldr	r3, [r7, #12]
 801c196:	687a      	ldr	r2, [r7, #4]
 801c198:	61da      	str	r2, [r3, #28]
}
 801c19a:	3710      	adds	r7, #16
 801c19c:	46bd      	mov	sp, r7
 801c19e:	bd80      	pop	{r7, pc}
 801c1a0:	08024dd8 	.word	0x08024dd8
 801c1a4:	08025434 	.word	0x08025434
 801c1a8:	08024e2c 	.word	0x08024e2c

0801c1ac <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801c1ac:	b580      	push	{r7, lr}
 801c1ae:	b084      	sub	sp, #16
 801c1b0:	af00      	add	r7, sp, #0
 801c1b2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801c1b4:	687b      	ldr	r3, [r7, #4]
 801c1b6:	2b00      	cmp	r3, #0
 801c1b8:	d107      	bne.n	801c1ca <udp_remove+0x1e>
 801c1ba:	4b19      	ldr	r3, [pc, #100]	@ (801c220 <udp_remove+0x74>)
 801c1bc:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 801c1c0:	4918      	ldr	r1, [pc, #96]	@ (801c224 <udp_remove+0x78>)
 801c1c2:	4819      	ldr	r0, [pc, #100]	@ (801c228 <udp_remove+0x7c>)
 801c1c4:	f004 fae8 	bl	8020798 <iprintf>
 801c1c8:	e026      	b.n	801c218 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801c1ca:	4b18      	ldr	r3, [pc, #96]	@ (801c22c <udp_remove+0x80>)
 801c1cc:	681b      	ldr	r3, [r3, #0]
 801c1ce:	687a      	ldr	r2, [r7, #4]
 801c1d0:	429a      	cmp	r2, r3
 801c1d2:	d105      	bne.n	801c1e0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801c1d4:	4b15      	ldr	r3, [pc, #84]	@ (801c22c <udp_remove+0x80>)
 801c1d6:	681b      	ldr	r3, [r3, #0]
 801c1d8:	68db      	ldr	r3, [r3, #12]
 801c1da:	4a14      	ldr	r2, [pc, #80]	@ (801c22c <udp_remove+0x80>)
 801c1dc:	6013      	str	r3, [r2, #0]
 801c1de:	e017      	b.n	801c210 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801c1e0:	4b12      	ldr	r3, [pc, #72]	@ (801c22c <udp_remove+0x80>)
 801c1e2:	681b      	ldr	r3, [r3, #0]
 801c1e4:	60fb      	str	r3, [r7, #12]
 801c1e6:	e010      	b.n	801c20a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801c1e8:	68fb      	ldr	r3, [r7, #12]
 801c1ea:	68db      	ldr	r3, [r3, #12]
 801c1ec:	2b00      	cmp	r3, #0
 801c1ee:	d009      	beq.n	801c204 <udp_remove+0x58>
 801c1f0:	68fb      	ldr	r3, [r7, #12]
 801c1f2:	68db      	ldr	r3, [r3, #12]
 801c1f4:	687a      	ldr	r2, [r7, #4]
 801c1f6:	429a      	cmp	r2, r3
 801c1f8:	d104      	bne.n	801c204 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801c1fa:	687b      	ldr	r3, [r7, #4]
 801c1fc:	68da      	ldr	r2, [r3, #12]
 801c1fe:	68fb      	ldr	r3, [r7, #12]
 801c200:	60da      	str	r2, [r3, #12]
        break;
 801c202:	e005      	b.n	801c210 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801c204:	68fb      	ldr	r3, [r7, #12]
 801c206:	68db      	ldr	r3, [r3, #12]
 801c208:	60fb      	str	r3, [r7, #12]
 801c20a:	68fb      	ldr	r3, [r7, #12]
 801c20c:	2b00      	cmp	r3, #0
 801c20e:	d1eb      	bne.n	801c1e8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801c210:	6879      	ldr	r1, [r7, #4]
 801c212:	2000      	movs	r0, #0
 801c214:	f7f7 fc4c 	bl	8013ab0 <memp_free>
}
 801c218:	3710      	adds	r7, #16
 801c21a:	46bd      	mov	sp, r7
 801c21c:	bd80      	pop	{r7, pc}
 801c21e:	bf00      	nop
 801c220:	08024dd8 	.word	0x08024dd8
 801c224:	0802544c 	.word	0x0802544c
 801c228:	08024e2c 	.word	0x08024e2c
 801c22c:	2002d4cc 	.word	0x2002d4cc

0801c230 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801c230:	b580      	push	{r7, lr}
 801c232:	b082      	sub	sp, #8
 801c234:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801c236:	2000      	movs	r0, #0
 801c238:	f7f7 fbbe 	bl	80139b8 <memp_malloc>
 801c23c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801c23e:	687b      	ldr	r3, [r7, #4]
 801c240:	2b00      	cmp	r3, #0
 801c242:	d007      	beq.n	801c254 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801c244:	2220      	movs	r2, #32
 801c246:	2100      	movs	r1, #0
 801c248:	6878      	ldr	r0, [r7, #4]
 801c24a:	f004 fc05 	bl	8020a58 <memset>
    pcb->ttl = UDP_TTL;
 801c24e:	687b      	ldr	r3, [r7, #4]
 801c250:	22ff      	movs	r2, #255	@ 0xff
 801c252:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801c254:	687b      	ldr	r3, [r7, #4]
}
 801c256:	4618      	mov	r0, r3
 801c258:	3708      	adds	r7, #8
 801c25a:	46bd      	mov	sp, r7
 801c25c:	bd80      	pop	{r7, pc}

0801c25e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801c25e:	b580      	push	{r7, lr}
 801c260:	b084      	sub	sp, #16
 801c262:	af00      	add	r7, sp, #0
 801c264:	4603      	mov	r3, r0
 801c266:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801c268:	f7ff ffe2 	bl	801c230 <udp_new>
 801c26c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801c26e:	68fb      	ldr	r3, [r7, #12]
}
 801c270:	4618      	mov	r0, r3
 801c272:	3710      	adds	r7, #16
 801c274:	46bd      	mov	sp, r7
 801c276:	bd80      	pop	{r7, pc}

0801c278 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801c278:	b480      	push	{r7}
 801c27a:	b085      	sub	sp, #20
 801c27c:	af00      	add	r7, sp, #0
 801c27e:	6078      	str	r0, [r7, #4]
 801c280:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801c282:	687b      	ldr	r3, [r7, #4]
 801c284:	2b00      	cmp	r3, #0
 801c286:	d01e      	beq.n	801c2c6 <udp_netif_ip_addr_changed+0x4e>
 801c288:	687b      	ldr	r3, [r7, #4]
 801c28a:	681b      	ldr	r3, [r3, #0]
 801c28c:	2b00      	cmp	r3, #0
 801c28e:	d01a      	beq.n	801c2c6 <udp_netif_ip_addr_changed+0x4e>
 801c290:	683b      	ldr	r3, [r7, #0]
 801c292:	2b00      	cmp	r3, #0
 801c294:	d017      	beq.n	801c2c6 <udp_netif_ip_addr_changed+0x4e>
 801c296:	683b      	ldr	r3, [r7, #0]
 801c298:	681b      	ldr	r3, [r3, #0]
 801c29a:	2b00      	cmp	r3, #0
 801c29c:	d013      	beq.n	801c2c6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801c29e:	4b0d      	ldr	r3, [pc, #52]	@ (801c2d4 <udp_netif_ip_addr_changed+0x5c>)
 801c2a0:	681b      	ldr	r3, [r3, #0]
 801c2a2:	60fb      	str	r3, [r7, #12]
 801c2a4:	e00c      	b.n	801c2c0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801c2a6:	68fb      	ldr	r3, [r7, #12]
 801c2a8:	681a      	ldr	r2, [r3, #0]
 801c2aa:	687b      	ldr	r3, [r7, #4]
 801c2ac:	681b      	ldr	r3, [r3, #0]
 801c2ae:	429a      	cmp	r2, r3
 801c2b0:	d103      	bne.n	801c2ba <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801c2b2:	683b      	ldr	r3, [r7, #0]
 801c2b4:	681a      	ldr	r2, [r3, #0]
 801c2b6:	68fb      	ldr	r3, [r7, #12]
 801c2b8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801c2ba:	68fb      	ldr	r3, [r7, #12]
 801c2bc:	68db      	ldr	r3, [r3, #12]
 801c2be:	60fb      	str	r3, [r7, #12]
 801c2c0:	68fb      	ldr	r3, [r7, #12]
 801c2c2:	2b00      	cmp	r3, #0
 801c2c4:	d1ef      	bne.n	801c2a6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801c2c6:	bf00      	nop
 801c2c8:	3714      	adds	r7, #20
 801c2ca:	46bd      	mov	sp, r7
 801c2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2d0:	4770      	bx	lr
 801c2d2:	bf00      	nop
 801c2d4:	2002d4cc 	.word	0x2002d4cc

0801c2d8 <udp_debug_print>:
 *
 * @param udphdr pointer to the udp header in memory.
 */
void
udp_debug_print(struct udp_hdr *udphdr)
{
 801c2d8:	b590      	push	{r4, r7, lr}
 801c2da:	b083      	sub	sp, #12
 801c2dc:	af00      	add	r7, sp, #0
 801c2de:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(UDP_DEBUG, ("UDP header:\n"));
 801c2e0:	481b      	ldr	r0, [pc, #108]	@ (801c350 <udp_debug_print+0x78>)
 801c2e2:	f004 fac9 	bl	8020878 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 801c2e6:	481b      	ldr	r0, [pc, #108]	@ (801c354 <udp_debug_print+0x7c>)
 801c2e8:	f004 fac6 	bl	8020878 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     %5"U16_F"     | (src port, dest port)\n",
 801c2ec:	687b      	ldr	r3, [r7, #4]
 801c2ee:	881b      	ldrh	r3, [r3, #0]
 801c2f0:	b29b      	uxth	r3, r3
 801c2f2:	4618      	mov	r0, r3
 801c2f4:	f7f6 fd94 	bl	8012e20 <lwip_htons>
 801c2f8:	4603      	mov	r3, r0
 801c2fa:	461c      	mov	r4, r3
 801c2fc:	687b      	ldr	r3, [r7, #4]
 801c2fe:	885b      	ldrh	r3, [r3, #2]
 801c300:	b29b      	uxth	r3, r3
 801c302:	4618      	mov	r0, r3
 801c304:	f7f6 fd8c 	bl	8012e20 <lwip_htons>
 801c308:	4603      	mov	r3, r0
 801c30a:	461a      	mov	r2, r3
 801c30c:	4621      	mov	r1, r4
 801c30e:	4812      	ldr	r0, [pc, #72]	@ (801c358 <udp_debug_print+0x80>)
 801c310:	f004 fa42 	bl	8020798 <iprintf>
                          lwip_ntohs(udphdr->src), lwip_ntohs(udphdr->dest)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 801c314:	480f      	ldr	r0, [pc, #60]	@ (801c354 <udp_debug_print+0x7c>)
 801c316:	f004 faaf 	bl	8020878 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     0x%04"X16_F"    | (len, chksum)\n",
 801c31a:	687b      	ldr	r3, [r7, #4]
 801c31c:	889b      	ldrh	r3, [r3, #4]
 801c31e:	b29b      	uxth	r3, r3
 801c320:	4618      	mov	r0, r3
 801c322:	f7f6 fd7d 	bl	8012e20 <lwip_htons>
 801c326:	4603      	mov	r3, r0
 801c328:	461c      	mov	r4, r3
 801c32a:	687b      	ldr	r3, [r7, #4]
 801c32c:	88db      	ldrh	r3, [r3, #6]
 801c32e:	b29b      	uxth	r3, r3
 801c330:	4618      	mov	r0, r3
 801c332:	f7f6 fd75 	bl	8012e20 <lwip_htons>
 801c336:	4603      	mov	r3, r0
 801c338:	461a      	mov	r2, r3
 801c33a:	4621      	mov	r1, r4
 801c33c:	4807      	ldr	r0, [pc, #28]	@ (801c35c <udp_debug_print+0x84>)
 801c33e:	f004 fa2b 	bl	8020798 <iprintf>
                          lwip_ntohs(udphdr->len), lwip_ntohs(udphdr->chksum)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 801c342:	4804      	ldr	r0, [pc, #16]	@ (801c354 <udp_debug_print+0x7c>)
 801c344:	f004 fa98 	bl	8020878 <puts>
}
 801c348:	bf00      	nop
 801c34a:	370c      	adds	r7, #12
 801c34c:	46bd      	mov	sp, r7
 801c34e:	bd90      	pop	{r4, r7, pc}
 801c350:	08025464 	.word	0x08025464
 801c354:	08025470 	.word	0x08025470
 801c358:	08025494 	.word	0x08025494
 801c35c:	080254cc 	.word	0x080254cc

0801c360 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801c360:	b580      	push	{r7, lr}
 801c362:	b082      	sub	sp, #8
 801c364:	af00      	add	r7, sp, #0
 801c366:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801c368:	492b      	ldr	r1, [pc, #172]	@ (801c418 <etharp_free_entry+0xb8>)
 801c36a:	687a      	ldr	r2, [r7, #4]
 801c36c:	4613      	mov	r3, r2
 801c36e:	005b      	lsls	r3, r3, #1
 801c370:	4413      	add	r3, r2
 801c372:	00db      	lsls	r3, r3, #3
 801c374:	440b      	add	r3, r1
 801c376:	681b      	ldr	r3, [r3, #0]
 801c378:	2b00      	cmp	r3, #0
 801c37a:	d013      	beq.n	801c3a4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801c37c:	4926      	ldr	r1, [pc, #152]	@ (801c418 <etharp_free_entry+0xb8>)
 801c37e:	687a      	ldr	r2, [r7, #4]
 801c380:	4613      	mov	r3, r2
 801c382:	005b      	lsls	r3, r3, #1
 801c384:	4413      	add	r3, r2
 801c386:	00db      	lsls	r3, r3, #3
 801c388:	440b      	add	r3, r1
 801c38a:	681b      	ldr	r3, [r3, #0]
 801c38c:	4618      	mov	r0, r3
 801c38e:	f7f8 fb75 	bl	8014a7c <pbuf_free>
    arp_table[i].q = NULL;
 801c392:	4921      	ldr	r1, [pc, #132]	@ (801c418 <etharp_free_entry+0xb8>)
 801c394:	687a      	ldr	r2, [r7, #4]
 801c396:	4613      	mov	r3, r2
 801c398:	005b      	lsls	r3, r3, #1
 801c39a:	4413      	add	r3, r2
 801c39c:	00db      	lsls	r3, r3, #3
 801c39e:	440b      	add	r3, r1
 801c3a0:	2200      	movs	r2, #0
 801c3a2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801c3a4:	491c      	ldr	r1, [pc, #112]	@ (801c418 <etharp_free_entry+0xb8>)
 801c3a6:	687a      	ldr	r2, [r7, #4]
 801c3a8:	4613      	mov	r3, r2
 801c3aa:	005b      	lsls	r3, r3, #1
 801c3ac:	4413      	add	r3, r2
 801c3ae:	00db      	lsls	r3, r3, #3
 801c3b0:	440b      	add	r3, r1
 801c3b2:	3314      	adds	r3, #20
 801c3b4:	2200      	movs	r2, #0
 801c3b6:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 801c3b8:	4917      	ldr	r1, [pc, #92]	@ (801c418 <etharp_free_entry+0xb8>)
 801c3ba:	687a      	ldr	r2, [r7, #4]
 801c3bc:	4613      	mov	r3, r2
 801c3be:	005b      	lsls	r3, r3, #1
 801c3c0:	4413      	add	r3, r2
 801c3c2:	00db      	lsls	r3, r3, #3
 801c3c4:	440b      	add	r3, r1
 801c3c6:	3312      	adds	r3, #18
 801c3c8:	2200      	movs	r2, #0
 801c3ca:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 801c3cc:	4912      	ldr	r1, [pc, #72]	@ (801c418 <etharp_free_entry+0xb8>)
 801c3ce:	687a      	ldr	r2, [r7, #4]
 801c3d0:	4613      	mov	r3, r2
 801c3d2:	005b      	lsls	r3, r3, #1
 801c3d4:	4413      	add	r3, r2
 801c3d6:	00db      	lsls	r3, r3, #3
 801c3d8:	440b      	add	r3, r1
 801c3da:	3308      	adds	r3, #8
 801c3dc:	2200      	movs	r2, #0
 801c3de:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 801c3e0:	490d      	ldr	r1, [pc, #52]	@ (801c418 <etharp_free_entry+0xb8>)
 801c3e2:	687a      	ldr	r2, [r7, #4]
 801c3e4:	4613      	mov	r3, r2
 801c3e6:	005b      	lsls	r3, r3, #1
 801c3e8:	4413      	add	r3, r2
 801c3ea:	00db      	lsls	r3, r3, #3
 801c3ec:	440b      	add	r3, r1
 801c3ee:	3304      	adds	r3, #4
 801c3f0:	2200      	movs	r2, #0
 801c3f2:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 801c3f4:	4908      	ldr	r1, [pc, #32]	@ (801c418 <etharp_free_entry+0xb8>)
 801c3f6:	687a      	ldr	r2, [r7, #4]
 801c3f8:	4613      	mov	r3, r2
 801c3fa:	005b      	lsls	r3, r3, #1
 801c3fc:	4413      	add	r3, r2
 801c3fe:	00db      	lsls	r3, r3, #3
 801c400:	440b      	add	r3, r1
 801c402:	3308      	adds	r3, #8
 801c404:	4a05      	ldr	r2, [pc, #20]	@ (801c41c <etharp_free_entry+0xbc>)
 801c406:	3304      	adds	r3, #4
 801c408:	6810      	ldr	r0, [r2, #0]
 801c40a:	6018      	str	r0, [r3, #0]
 801c40c:	8892      	ldrh	r2, [r2, #4]
 801c40e:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 801c410:	bf00      	nop
 801c412:	3708      	adds	r7, #8
 801c414:	46bd      	mov	sp, r7
 801c416:	bd80      	pop	{r7, pc}
 801c418:	2002d4d0 	.word	0x2002d4d0
 801c41c:	08026890 	.word	0x08026890

0801c420 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801c420:	b580      	push	{r7, lr}
 801c422:	b082      	sub	sp, #8
 801c424:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c426:	2300      	movs	r3, #0
 801c428:	607b      	str	r3, [r7, #4]
 801c42a:	e096      	b.n	801c55a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801c42c:	494f      	ldr	r1, [pc, #316]	@ (801c56c <etharp_tmr+0x14c>)
 801c42e:	687a      	ldr	r2, [r7, #4]
 801c430:	4613      	mov	r3, r2
 801c432:	005b      	lsls	r3, r3, #1
 801c434:	4413      	add	r3, r2
 801c436:	00db      	lsls	r3, r3, #3
 801c438:	440b      	add	r3, r1
 801c43a:	3314      	adds	r3, #20
 801c43c:	781b      	ldrb	r3, [r3, #0]
 801c43e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801c440:	78fb      	ldrb	r3, [r7, #3]
 801c442:	2b00      	cmp	r3, #0
 801c444:	f000 8086 	beq.w	801c554 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801c448:	4948      	ldr	r1, [pc, #288]	@ (801c56c <etharp_tmr+0x14c>)
 801c44a:	687a      	ldr	r2, [r7, #4]
 801c44c:	4613      	mov	r3, r2
 801c44e:	005b      	lsls	r3, r3, #1
 801c450:	4413      	add	r3, r2
 801c452:	00db      	lsls	r3, r3, #3
 801c454:	440b      	add	r3, r1
 801c456:	3312      	adds	r3, #18
 801c458:	881b      	ldrh	r3, [r3, #0]
 801c45a:	3301      	adds	r3, #1
 801c45c:	b298      	uxth	r0, r3
 801c45e:	4943      	ldr	r1, [pc, #268]	@ (801c56c <etharp_tmr+0x14c>)
 801c460:	687a      	ldr	r2, [r7, #4]
 801c462:	4613      	mov	r3, r2
 801c464:	005b      	lsls	r3, r3, #1
 801c466:	4413      	add	r3, r2
 801c468:	00db      	lsls	r3, r3, #3
 801c46a:	440b      	add	r3, r1
 801c46c:	3312      	adds	r3, #18
 801c46e:	4602      	mov	r2, r0
 801c470:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801c472:	493e      	ldr	r1, [pc, #248]	@ (801c56c <etharp_tmr+0x14c>)
 801c474:	687a      	ldr	r2, [r7, #4]
 801c476:	4613      	mov	r3, r2
 801c478:	005b      	lsls	r3, r3, #1
 801c47a:	4413      	add	r3, r2
 801c47c:	00db      	lsls	r3, r3, #3
 801c47e:	440b      	add	r3, r1
 801c480:	3312      	adds	r3, #18
 801c482:	881b      	ldrh	r3, [r3, #0]
 801c484:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801c488:	d215      	bcs.n	801c4b6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801c48a:	4938      	ldr	r1, [pc, #224]	@ (801c56c <etharp_tmr+0x14c>)
 801c48c:	687a      	ldr	r2, [r7, #4]
 801c48e:	4613      	mov	r3, r2
 801c490:	005b      	lsls	r3, r3, #1
 801c492:	4413      	add	r3, r2
 801c494:	00db      	lsls	r3, r3, #3
 801c496:	440b      	add	r3, r1
 801c498:	3314      	adds	r3, #20
 801c49a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801c49c:	2b01      	cmp	r3, #1
 801c49e:	d10e      	bne.n	801c4be <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801c4a0:	4932      	ldr	r1, [pc, #200]	@ (801c56c <etharp_tmr+0x14c>)
 801c4a2:	687a      	ldr	r2, [r7, #4]
 801c4a4:	4613      	mov	r3, r2
 801c4a6:	005b      	lsls	r3, r3, #1
 801c4a8:	4413      	add	r3, r2
 801c4aa:	00db      	lsls	r3, r3, #3
 801c4ac:	440b      	add	r3, r1
 801c4ae:	3312      	adds	r3, #18
 801c4b0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801c4b2:	2b04      	cmp	r3, #4
 801c4b4:	d903      	bls.n	801c4be <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801c4b6:	6878      	ldr	r0, [r7, #4]
 801c4b8:	f7ff ff52 	bl	801c360 <etharp_free_entry>
 801c4bc:	e04a      	b.n	801c554 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801c4be:	492b      	ldr	r1, [pc, #172]	@ (801c56c <etharp_tmr+0x14c>)
 801c4c0:	687a      	ldr	r2, [r7, #4]
 801c4c2:	4613      	mov	r3, r2
 801c4c4:	005b      	lsls	r3, r3, #1
 801c4c6:	4413      	add	r3, r2
 801c4c8:	00db      	lsls	r3, r3, #3
 801c4ca:	440b      	add	r3, r1
 801c4cc:	3314      	adds	r3, #20
 801c4ce:	781b      	ldrb	r3, [r3, #0]
 801c4d0:	2b03      	cmp	r3, #3
 801c4d2:	d10a      	bne.n	801c4ea <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801c4d4:	4925      	ldr	r1, [pc, #148]	@ (801c56c <etharp_tmr+0x14c>)
 801c4d6:	687a      	ldr	r2, [r7, #4]
 801c4d8:	4613      	mov	r3, r2
 801c4da:	005b      	lsls	r3, r3, #1
 801c4dc:	4413      	add	r3, r2
 801c4de:	00db      	lsls	r3, r3, #3
 801c4e0:	440b      	add	r3, r1
 801c4e2:	3314      	adds	r3, #20
 801c4e4:	2204      	movs	r2, #4
 801c4e6:	701a      	strb	r2, [r3, #0]
 801c4e8:	e034      	b.n	801c554 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801c4ea:	4920      	ldr	r1, [pc, #128]	@ (801c56c <etharp_tmr+0x14c>)
 801c4ec:	687a      	ldr	r2, [r7, #4]
 801c4ee:	4613      	mov	r3, r2
 801c4f0:	005b      	lsls	r3, r3, #1
 801c4f2:	4413      	add	r3, r2
 801c4f4:	00db      	lsls	r3, r3, #3
 801c4f6:	440b      	add	r3, r1
 801c4f8:	3314      	adds	r3, #20
 801c4fa:	781b      	ldrb	r3, [r3, #0]
 801c4fc:	2b04      	cmp	r3, #4
 801c4fe:	d10a      	bne.n	801c516 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801c500:	491a      	ldr	r1, [pc, #104]	@ (801c56c <etharp_tmr+0x14c>)
 801c502:	687a      	ldr	r2, [r7, #4]
 801c504:	4613      	mov	r3, r2
 801c506:	005b      	lsls	r3, r3, #1
 801c508:	4413      	add	r3, r2
 801c50a:	00db      	lsls	r3, r3, #3
 801c50c:	440b      	add	r3, r1
 801c50e:	3314      	adds	r3, #20
 801c510:	2202      	movs	r2, #2
 801c512:	701a      	strb	r2, [r3, #0]
 801c514:	e01e      	b.n	801c554 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801c516:	4915      	ldr	r1, [pc, #84]	@ (801c56c <etharp_tmr+0x14c>)
 801c518:	687a      	ldr	r2, [r7, #4]
 801c51a:	4613      	mov	r3, r2
 801c51c:	005b      	lsls	r3, r3, #1
 801c51e:	4413      	add	r3, r2
 801c520:	00db      	lsls	r3, r3, #3
 801c522:	440b      	add	r3, r1
 801c524:	3314      	adds	r3, #20
 801c526:	781b      	ldrb	r3, [r3, #0]
 801c528:	2b01      	cmp	r3, #1
 801c52a:	d113      	bne.n	801c554 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801c52c:	490f      	ldr	r1, [pc, #60]	@ (801c56c <etharp_tmr+0x14c>)
 801c52e:	687a      	ldr	r2, [r7, #4]
 801c530:	4613      	mov	r3, r2
 801c532:	005b      	lsls	r3, r3, #1
 801c534:	4413      	add	r3, r2
 801c536:	00db      	lsls	r3, r3, #3
 801c538:	440b      	add	r3, r1
 801c53a:	3308      	adds	r3, #8
 801c53c:	6818      	ldr	r0, [r3, #0]
 801c53e:	687a      	ldr	r2, [r7, #4]
 801c540:	4613      	mov	r3, r2
 801c542:	005b      	lsls	r3, r3, #1
 801c544:	4413      	add	r3, r2
 801c546:	00db      	lsls	r3, r3, #3
 801c548:	4a08      	ldr	r2, [pc, #32]	@ (801c56c <etharp_tmr+0x14c>)
 801c54a:	4413      	add	r3, r2
 801c54c:	3304      	adds	r3, #4
 801c54e:	4619      	mov	r1, r3
 801c550:	f000 feae 	bl	801d2b0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c554:	687b      	ldr	r3, [r7, #4]
 801c556:	3301      	adds	r3, #1
 801c558:	607b      	str	r3, [r7, #4]
 801c55a:	687b      	ldr	r3, [r7, #4]
 801c55c:	2b09      	cmp	r3, #9
 801c55e:	f77f af65 	ble.w	801c42c <etharp_tmr+0xc>
      }
    }
  }
}
 801c562:	bf00      	nop
 801c564:	bf00      	nop
 801c566:	3708      	adds	r7, #8
 801c568:	46bd      	mov	sp, r7
 801c56a:	bd80      	pop	{r7, pc}
 801c56c:	2002d4d0 	.word	0x2002d4d0

0801c570 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801c570:	b580      	push	{r7, lr}
 801c572:	b08a      	sub	sp, #40	@ 0x28
 801c574:	af00      	add	r7, sp, #0
 801c576:	60f8      	str	r0, [r7, #12]
 801c578:	460b      	mov	r3, r1
 801c57a:	607a      	str	r2, [r7, #4]
 801c57c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801c57e:	230a      	movs	r3, #10
 801c580:	843b      	strh	r3, [r7, #32]
 801c582:	230a      	movs	r3, #10
 801c584:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t empty = ARP_TABLE_SIZE;
 801c586:	230a      	movs	r3, #10
 801c588:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t i = 0;
 801c58a:	2300      	movs	r3, #0
 801c58c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801c58e:	230a      	movs	r3, #10
 801c590:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801c592:	2300      	movs	r3, #0
 801c594:	83bb      	strh	r3, [r7, #28]
 801c596:	2300      	movs	r3, #0
 801c598:	837b      	strh	r3, [r7, #26]
 801c59a:	2300      	movs	r3, #0
 801c59c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c59e:	2300      	movs	r3, #0
 801c5a0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801c5a2:	e0ae      	b.n	801c702 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801c5a4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801c5a8:	49a6      	ldr	r1, [pc, #664]	@ (801c844 <etharp_find_entry+0x2d4>)
 801c5aa:	4613      	mov	r3, r2
 801c5ac:	005b      	lsls	r3, r3, #1
 801c5ae:	4413      	add	r3, r2
 801c5b0:	00db      	lsls	r3, r3, #3
 801c5b2:	440b      	add	r3, r1
 801c5b4:	3314      	adds	r3, #20
 801c5b6:	781b      	ldrb	r3, [r3, #0]
 801c5b8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801c5ba:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801c5be:	2b0a      	cmp	r3, #10
 801c5c0:	d105      	bne.n	801c5ce <etharp_find_entry+0x5e>
 801c5c2:	7dfb      	ldrb	r3, [r7, #23]
 801c5c4:	2b00      	cmp	r3, #0
 801c5c6:	d102      	bne.n	801c5ce <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801c5c8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c5ca:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801c5cc:	e095      	b.n	801c6fa <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801c5ce:	7dfb      	ldrb	r3, [r7, #23]
 801c5d0:	2b00      	cmp	r3, #0
 801c5d2:	f000 8092 	beq.w	801c6fa <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801c5d6:	7dfb      	ldrb	r3, [r7, #23]
 801c5d8:	2b01      	cmp	r3, #1
 801c5da:	d009      	beq.n	801c5f0 <etharp_find_entry+0x80>
 801c5dc:	7dfb      	ldrb	r3, [r7, #23]
 801c5de:	2b01      	cmp	r3, #1
 801c5e0:	d806      	bhi.n	801c5f0 <etharp_find_entry+0x80>
 801c5e2:	4b99      	ldr	r3, [pc, #612]	@ (801c848 <etharp_find_entry+0x2d8>)
 801c5e4:	f240 1223 	movw	r2, #291	@ 0x123
 801c5e8:	4998      	ldr	r1, [pc, #608]	@ (801c84c <etharp_find_entry+0x2dc>)
 801c5ea:	4899      	ldr	r0, [pc, #612]	@ (801c850 <etharp_find_entry+0x2e0>)
 801c5ec:	f004 f8d4 	bl	8020798 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801c5f0:	68fb      	ldr	r3, [r7, #12]
 801c5f2:	2b00      	cmp	r3, #0
 801c5f4:	d020      	beq.n	801c638 <etharp_find_entry+0xc8>
 801c5f6:	68fb      	ldr	r3, [r7, #12]
 801c5f8:	6819      	ldr	r1, [r3, #0]
 801c5fa:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801c5fe:	4891      	ldr	r0, [pc, #580]	@ (801c844 <etharp_find_entry+0x2d4>)
 801c600:	4613      	mov	r3, r2
 801c602:	005b      	lsls	r3, r3, #1
 801c604:	4413      	add	r3, r2
 801c606:	00db      	lsls	r3, r3, #3
 801c608:	4403      	add	r3, r0
 801c60a:	3304      	adds	r3, #4
 801c60c:	681b      	ldr	r3, [r3, #0]
 801c60e:	4299      	cmp	r1, r3
 801c610:	d112      	bne.n	801c638 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801c612:	687b      	ldr	r3, [r7, #4]
 801c614:	2b00      	cmp	r3, #0
 801c616:	d00c      	beq.n	801c632 <etharp_find_entry+0xc2>
 801c618:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801c61c:	4989      	ldr	r1, [pc, #548]	@ (801c844 <etharp_find_entry+0x2d4>)
 801c61e:	4613      	mov	r3, r2
 801c620:	005b      	lsls	r3, r3, #1
 801c622:	4413      	add	r3, r2
 801c624:	00db      	lsls	r3, r3, #3
 801c626:	440b      	add	r3, r1
 801c628:	3308      	adds	r3, #8
 801c62a:	681b      	ldr	r3, [r3, #0]
 801c62c:	687a      	ldr	r2, [r7, #4]
 801c62e:	429a      	cmp	r2, r3
 801c630:	d102      	bne.n	801c638 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801c632:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801c636:	e100      	b.n	801c83a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801c638:	7dfb      	ldrb	r3, [r7, #23]
 801c63a:	2b01      	cmp	r3, #1
 801c63c:	d140      	bne.n	801c6c0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801c63e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801c642:	4980      	ldr	r1, [pc, #512]	@ (801c844 <etharp_find_entry+0x2d4>)
 801c644:	4613      	mov	r3, r2
 801c646:	005b      	lsls	r3, r3, #1
 801c648:	4413      	add	r3, r2
 801c64a:	00db      	lsls	r3, r3, #3
 801c64c:	440b      	add	r3, r1
 801c64e:	681b      	ldr	r3, [r3, #0]
 801c650:	2b00      	cmp	r3, #0
 801c652:	d01a      	beq.n	801c68a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801c654:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801c658:	497a      	ldr	r1, [pc, #488]	@ (801c844 <etharp_find_entry+0x2d4>)
 801c65a:	4613      	mov	r3, r2
 801c65c:	005b      	lsls	r3, r3, #1
 801c65e:	4413      	add	r3, r2
 801c660:	00db      	lsls	r3, r3, #3
 801c662:	440b      	add	r3, r1
 801c664:	3312      	adds	r3, #18
 801c666:	881b      	ldrh	r3, [r3, #0]
 801c668:	8bba      	ldrh	r2, [r7, #28]
 801c66a:	429a      	cmp	r2, r3
 801c66c:	d845      	bhi.n	801c6fa <etharp_find_entry+0x18a>
            old_queue = i;
 801c66e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c670:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801c672:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801c676:	4973      	ldr	r1, [pc, #460]	@ (801c844 <etharp_find_entry+0x2d4>)
 801c678:	4613      	mov	r3, r2
 801c67a:	005b      	lsls	r3, r3, #1
 801c67c:	4413      	add	r3, r2
 801c67e:	00db      	lsls	r3, r3, #3
 801c680:	440b      	add	r3, r1
 801c682:	3312      	adds	r3, #18
 801c684:	881b      	ldrh	r3, [r3, #0]
 801c686:	83bb      	strh	r3, [r7, #28]
 801c688:	e037      	b.n	801c6fa <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801c68a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801c68e:	496d      	ldr	r1, [pc, #436]	@ (801c844 <etharp_find_entry+0x2d4>)
 801c690:	4613      	mov	r3, r2
 801c692:	005b      	lsls	r3, r3, #1
 801c694:	4413      	add	r3, r2
 801c696:	00db      	lsls	r3, r3, #3
 801c698:	440b      	add	r3, r1
 801c69a:	3312      	adds	r3, #18
 801c69c:	881b      	ldrh	r3, [r3, #0]
 801c69e:	8b7a      	ldrh	r2, [r7, #26]
 801c6a0:	429a      	cmp	r2, r3
 801c6a2:	d82a      	bhi.n	801c6fa <etharp_find_entry+0x18a>
            old_pending = i;
 801c6a4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c6a6:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 801c6a8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801c6ac:	4965      	ldr	r1, [pc, #404]	@ (801c844 <etharp_find_entry+0x2d4>)
 801c6ae:	4613      	mov	r3, r2
 801c6b0:	005b      	lsls	r3, r3, #1
 801c6b2:	4413      	add	r3, r2
 801c6b4:	00db      	lsls	r3, r3, #3
 801c6b6:	440b      	add	r3, r1
 801c6b8:	3312      	adds	r3, #18
 801c6ba:	881b      	ldrh	r3, [r3, #0]
 801c6bc:	837b      	strh	r3, [r7, #26]
 801c6be:	e01c      	b.n	801c6fa <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801c6c0:	7dfb      	ldrb	r3, [r7, #23]
 801c6c2:	2b01      	cmp	r3, #1
 801c6c4:	d919      	bls.n	801c6fa <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801c6c6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801c6ca:	495e      	ldr	r1, [pc, #376]	@ (801c844 <etharp_find_entry+0x2d4>)
 801c6cc:	4613      	mov	r3, r2
 801c6ce:	005b      	lsls	r3, r3, #1
 801c6d0:	4413      	add	r3, r2
 801c6d2:	00db      	lsls	r3, r3, #3
 801c6d4:	440b      	add	r3, r1
 801c6d6:	3312      	adds	r3, #18
 801c6d8:	881b      	ldrh	r3, [r3, #0]
 801c6da:	8b3a      	ldrh	r2, [r7, #24]
 801c6dc:	429a      	cmp	r2, r3
 801c6de:	d80c      	bhi.n	801c6fa <etharp_find_entry+0x18a>
            old_stable = i;
 801c6e0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c6e2:	847b      	strh	r3, [r7, #34]	@ 0x22
            age_stable = arp_table[i].ctime;
 801c6e4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801c6e8:	4956      	ldr	r1, [pc, #344]	@ (801c844 <etharp_find_entry+0x2d4>)
 801c6ea:	4613      	mov	r3, r2
 801c6ec:	005b      	lsls	r3, r3, #1
 801c6ee:	4413      	add	r3, r2
 801c6f0:	00db      	lsls	r3, r3, #3
 801c6f2:	440b      	add	r3, r1
 801c6f4:	3312      	adds	r3, #18
 801c6f6:	881b      	ldrh	r3, [r3, #0]
 801c6f8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c6fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c6fc:	3301      	adds	r3, #1
 801c6fe:	b29b      	uxth	r3, r3
 801c700:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801c702:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801c706:	2b09      	cmp	r3, #9
 801c708:	f77f af4c 	ble.w	801c5a4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801c70c:	7afb      	ldrb	r3, [r7, #11]
 801c70e:	f003 0302 	and.w	r3, r3, #2
 801c712:	2b00      	cmp	r3, #0
 801c714:	d108      	bne.n	801c728 <etharp_find_entry+0x1b8>
 801c716:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801c71a:	2b0a      	cmp	r3, #10
 801c71c:	d107      	bne.n	801c72e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801c71e:	7afb      	ldrb	r3, [r7, #11]
 801c720:	f003 0301 	and.w	r3, r3, #1
 801c724:	2b00      	cmp	r3, #0
 801c726:	d102      	bne.n	801c72e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801c728:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c72c:	e085      	b.n	801c83a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801c72e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801c732:	2b09      	cmp	r3, #9
 801c734:	dc02      	bgt.n	801c73c <etharp_find_entry+0x1cc>
    i = empty;
 801c736:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c738:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801c73a:	e039      	b.n	801c7b0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801c73c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801c740:	2b09      	cmp	r3, #9
 801c742:	dc14      	bgt.n	801c76e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801c744:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c746:	84fb      	strh	r3, [r7, #38]	@ 0x26
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801c748:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801c74c:	493d      	ldr	r1, [pc, #244]	@ (801c844 <etharp_find_entry+0x2d4>)
 801c74e:	4613      	mov	r3, r2
 801c750:	005b      	lsls	r3, r3, #1
 801c752:	4413      	add	r3, r2
 801c754:	00db      	lsls	r3, r3, #3
 801c756:	440b      	add	r3, r1
 801c758:	681b      	ldr	r3, [r3, #0]
 801c75a:	2b00      	cmp	r3, #0
 801c75c:	d018      	beq.n	801c790 <etharp_find_entry+0x220>
 801c75e:	4b3a      	ldr	r3, [pc, #232]	@ (801c848 <etharp_find_entry+0x2d8>)
 801c760:	f240 126d 	movw	r2, #365	@ 0x16d
 801c764:	493b      	ldr	r1, [pc, #236]	@ (801c854 <etharp_find_entry+0x2e4>)
 801c766:	483a      	ldr	r0, [pc, #232]	@ (801c850 <etharp_find_entry+0x2e0>)
 801c768:	f004 f816 	bl	8020798 <iprintf>
 801c76c:	e010      	b.n	801c790 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801c76e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c772:	2b09      	cmp	r3, #9
 801c774:	dc02      	bgt.n	801c77c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801c776:	8c3b      	ldrh	r3, [r7, #32]
 801c778:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801c77a:	e009      	b.n	801c790 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801c77c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801c780:	2b09      	cmp	r3, #9
 801c782:	dc02      	bgt.n	801c78a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801c784:	8bfb      	ldrh	r3, [r7, #30]
 801c786:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801c788:	e002      	b.n	801c790 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801c78a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c78e:	e054      	b.n	801c83a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801c790:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801c794:	2b09      	cmp	r3, #9
 801c796:	dd06      	ble.n	801c7a6 <etharp_find_entry+0x236>
 801c798:	4b2b      	ldr	r3, [pc, #172]	@ (801c848 <etharp_find_entry+0x2d8>)
 801c79a:	f240 127f 	movw	r2, #383	@ 0x17f
 801c79e:	492e      	ldr	r1, [pc, #184]	@ (801c858 <etharp_find_entry+0x2e8>)
 801c7a0:	482b      	ldr	r0, [pc, #172]	@ (801c850 <etharp_find_entry+0x2e0>)
 801c7a2:	f003 fff9 	bl	8020798 <iprintf>
    etharp_free_entry(i);
 801c7a6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801c7aa:	4618      	mov	r0, r3
 801c7ac:	f7ff fdd8 	bl	801c360 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801c7b0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801c7b4:	2b09      	cmp	r3, #9
 801c7b6:	dd06      	ble.n	801c7c6 <etharp_find_entry+0x256>
 801c7b8:	4b23      	ldr	r3, [pc, #140]	@ (801c848 <etharp_find_entry+0x2d8>)
 801c7ba:	f240 1283 	movw	r2, #387	@ 0x183
 801c7be:	4926      	ldr	r1, [pc, #152]	@ (801c858 <etharp_find_entry+0x2e8>)
 801c7c0:	4823      	ldr	r0, [pc, #140]	@ (801c850 <etharp_find_entry+0x2e0>)
 801c7c2:	f003 ffe9 	bl	8020798 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801c7c6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801c7ca:	491e      	ldr	r1, [pc, #120]	@ (801c844 <etharp_find_entry+0x2d4>)
 801c7cc:	4613      	mov	r3, r2
 801c7ce:	005b      	lsls	r3, r3, #1
 801c7d0:	4413      	add	r3, r2
 801c7d2:	00db      	lsls	r3, r3, #3
 801c7d4:	440b      	add	r3, r1
 801c7d6:	3314      	adds	r3, #20
 801c7d8:	781b      	ldrb	r3, [r3, #0]
 801c7da:	2b00      	cmp	r3, #0
 801c7dc:	d006      	beq.n	801c7ec <etharp_find_entry+0x27c>
 801c7de:	4b1a      	ldr	r3, [pc, #104]	@ (801c848 <etharp_find_entry+0x2d8>)
 801c7e0:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801c7e4:	491d      	ldr	r1, [pc, #116]	@ (801c85c <etharp_find_entry+0x2ec>)
 801c7e6:	481a      	ldr	r0, [pc, #104]	@ (801c850 <etharp_find_entry+0x2e0>)
 801c7e8:	f003 ffd6 	bl	8020798 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801c7ec:	68fb      	ldr	r3, [r7, #12]
 801c7ee:	2b00      	cmp	r3, #0
 801c7f0:	d00b      	beq.n	801c80a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801c7f2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801c7f6:	68fb      	ldr	r3, [r7, #12]
 801c7f8:	6819      	ldr	r1, [r3, #0]
 801c7fa:	4812      	ldr	r0, [pc, #72]	@ (801c844 <etharp_find_entry+0x2d4>)
 801c7fc:	4613      	mov	r3, r2
 801c7fe:	005b      	lsls	r3, r3, #1
 801c800:	4413      	add	r3, r2
 801c802:	00db      	lsls	r3, r3, #3
 801c804:	4403      	add	r3, r0
 801c806:	3304      	adds	r3, #4
 801c808:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801c80a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801c80e:	490d      	ldr	r1, [pc, #52]	@ (801c844 <etharp_find_entry+0x2d4>)
 801c810:	4613      	mov	r3, r2
 801c812:	005b      	lsls	r3, r3, #1
 801c814:	4413      	add	r3, r2
 801c816:	00db      	lsls	r3, r3, #3
 801c818:	440b      	add	r3, r1
 801c81a:	3312      	adds	r3, #18
 801c81c:	2200      	movs	r2, #0
 801c81e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801c820:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801c824:	4907      	ldr	r1, [pc, #28]	@ (801c844 <etharp_find_entry+0x2d4>)
 801c826:	4613      	mov	r3, r2
 801c828:	005b      	lsls	r3, r3, #1
 801c82a:	4413      	add	r3, r2
 801c82c:	00db      	lsls	r3, r3, #3
 801c82e:	440b      	add	r3, r1
 801c830:	3308      	adds	r3, #8
 801c832:	687a      	ldr	r2, [r7, #4]
 801c834:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801c836:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 801c83a:	4618      	mov	r0, r3
 801c83c:	3728      	adds	r7, #40	@ 0x28
 801c83e:	46bd      	mov	sp, r7
 801c840:	bd80      	pop	{r7, pc}
 801c842:	bf00      	nop
 801c844:	2002d4d0 	.word	0x2002d4d0
 801c848:	08025500 	.word	0x08025500
 801c84c:	08025538 	.word	0x08025538
 801c850:	08025578 	.word	0x08025578
 801c854:	080255a0 	.word	0x080255a0
 801c858:	080255b8 	.word	0x080255b8
 801c85c:	080255cc 	.word	0x080255cc

0801c860 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801c860:	b580      	push	{r7, lr}
 801c862:	b088      	sub	sp, #32
 801c864:	af02      	add	r7, sp, #8
 801c866:	60f8      	str	r0, [r7, #12]
 801c868:	60b9      	str	r1, [r7, #8]
 801c86a:	607a      	str	r2, [r7, #4]
 801c86c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801c86e:	68fb      	ldr	r3, [r7, #12]
 801c870:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801c874:	2b06      	cmp	r3, #6
 801c876:	d006      	beq.n	801c886 <etharp_update_arp_entry+0x26>
 801c878:	4b48      	ldr	r3, [pc, #288]	@ (801c99c <etharp_update_arp_entry+0x13c>)
 801c87a:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801c87e:	4948      	ldr	r1, [pc, #288]	@ (801c9a0 <etharp_update_arp_entry+0x140>)
 801c880:	4848      	ldr	r0, [pc, #288]	@ (801c9a4 <etharp_update_arp_entry+0x144>)
 801c882:	f003 ff89 	bl	8020798 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801c886:	68bb      	ldr	r3, [r7, #8]
 801c888:	2b00      	cmp	r3, #0
 801c88a:	d012      	beq.n	801c8b2 <etharp_update_arp_entry+0x52>
 801c88c:	68bb      	ldr	r3, [r7, #8]
 801c88e:	681b      	ldr	r3, [r3, #0]
 801c890:	2b00      	cmp	r3, #0
 801c892:	d00e      	beq.n	801c8b2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801c894:	68bb      	ldr	r3, [r7, #8]
 801c896:	681b      	ldr	r3, [r3, #0]
 801c898:	68f9      	ldr	r1, [r7, #12]
 801c89a:	4618      	mov	r0, r3
 801c89c:	f001 fa80 	bl	801dda0 <ip4_addr_isbroadcast_u32>
 801c8a0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801c8a2:	2b00      	cmp	r3, #0
 801c8a4:	d105      	bne.n	801c8b2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801c8a6:	68bb      	ldr	r3, [r7, #8]
 801c8a8:	681b      	ldr	r3, [r3, #0]
 801c8aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801c8ae:	2be0      	cmp	r3, #224	@ 0xe0
 801c8b0:	d102      	bne.n	801c8b8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801c8b2:	f06f 030f 	mvn.w	r3, #15
 801c8b6:	e06c      	b.n	801c992 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801c8b8:	78fb      	ldrb	r3, [r7, #3]
 801c8ba:	68fa      	ldr	r2, [r7, #12]
 801c8bc:	4619      	mov	r1, r3
 801c8be:	68b8      	ldr	r0, [r7, #8]
 801c8c0:	f7ff fe56 	bl	801c570 <etharp_find_entry>
 801c8c4:	4603      	mov	r3, r0
 801c8c6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801c8c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801c8cc:	2b00      	cmp	r3, #0
 801c8ce:	da02      	bge.n	801c8d6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801c8d0:	8afb      	ldrh	r3, [r7, #22]
 801c8d2:	b25b      	sxtb	r3, r3
 801c8d4:	e05d      	b.n	801c992 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801c8d6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c8da:	4933      	ldr	r1, [pc, #204]	@ (801c9a8 <etharp_update_arp_entry+0x148>)
 801c8dc:	4613      	mov	r3, r2
 801c8de:	005b      	lsls	r3, r3, #1
 801c8e0:	4413      	add	r3, r2
 801c8e2:	00db      	lsls	r3, r3, #3
 801c8e4:	440b      	add	r3, r1
 801c8e6:	3314      	adds	r3, #20
 801c8e8:	2202      	movs	r2, #2
 801c8ea:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801c8ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c8f0:	492d      	ldr	r1, [pc, #180]	@ (801c9a8 <etharp_update_arp_entry+0x148>)
 801c8f2:	4613      	mov	r3, r2
 801c8f4:	005b      	lsls	r3, r3, #1
 801c8f6:	4413      	add	r3, r2
 801c8f8:	00db      	lsls	r3, r3, #3
 801c8fa:	440b      	add	r3, r1
 801c8fc:	3308      	adds	r3, #8
 801c8fe:	68fa      	ldr	r2, [r7, #12]
 801c900:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801c902:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c906:	4613      	mov	r3, r2
 801c908:	005b      	lsls	r3, r3, #1
 801c90a:	4413      	add	r3, r2
 801c90c:	00db      	lsls	r3, r3, #3
 801c90e:	3308      	adds	r3, #8
 801c910:	4a25      	ldr	r2, [pc, #148]	@ (801c9a8 <etharp_update_arp_entry+0x148>)
 801c912:	4413      	add	r3, r2
 801c914:	3304      	adds	r3, #4
 801c916:	2206      	movs	r2, #6
 801c918:	6879      	ldr	r1, [r7, #4]
 801c91a:	4618      	mov	r0, r3
 801c91c:	f004 f96f 	bl	8020bfe <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801c920:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c924:	4920      	ldr	r1, [pc, #128]	@ (801c9a8 <etharp_update_arp_entry+0x148>)
 801c926:	4613      	mov	r3, r2
 801c928:	005b      	lsls	r3, r3, #1
 801c92a:	4413      	add	r3, r2
 801c92c:	00db      	lsls	r3, r3, #3
 801c92e:	440b      	add	r3, r1
 801c930:	3312      	adds	r3, #18
 801c932:	2200      	movs	r2, #0
 801c934:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801c936:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c93a:	491b      	ldr	r1, [pc, #108]	@ (801c9a8 <etharp_update_arp_entry+0x148>)
 801c93c:	4613      	mov	r3, r2
 801c93e:	005b      	lsls	r3, r3, #1
 801c940:	4413      	add	r3, r2
 801c942:	00db      	lsls	r3, r3, #3
 801c944:	440b      	add	r3, r1
 801c946:	681b      	ldr	r3, [r3, #0]
 801c948:	2b00      	cmp	r3, #0
 801c94a:	d021      	beq.n	801c990 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801c94c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c950:	4915      	ldr	r1, [pc, #84]	@ (801c9a8 <etharp_update_arp_entry+0x148>)
 801c952:	4613      	mov	r3, r2
 801c954:	005b      	lsls	r3, r3, #1
 801c956:	4413      	add	r3, r2
 801c958:	00db      	lsls	r3, r3, #3
 801c95a:	440b      	add	r3, r1
 801c95c:	681b      	ldr	r3, [r3, #0]
 801c95e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801c960:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c964:	4910      	ldr	r1, [pc, #64]	@ (801c9a8 <etharp_update_arp_entry+0x148>)
 801c966:	4613      	mov	r3, r2
 801c968:	005b      	lsls	r3, r3, #1
 801c96a:	4413      	add	r3, r2
 801c96c:	00db      	lsls	r3, r3, #3
 801c96e:	440b      	add	r3, r1
 801c970:	2200      	movs	r2, #0
 801c972:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801c974:	68fb      	ldr	r3, [r7, #12]
 801c976:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801c97a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801c97e:	9300      	str	r3, [sp, #0]
 801c980:	687b      	ldr	r3, [r7, #4]
 801c982:	6939      	ldr	r1, [r7, #16]
 801c984:	68f8      	ldr	r0, [r7, #12]
 801c986:	f002 f9fb 	bl	801ed80 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801c98a:	6938      	ldr	r0, [r7, #16]
 801c98c:	f7f8 f876 	bl	8014a7c <pbuf_free>
  }
  return ERR_OK;
 801c990:	2300      	movs	r3, #0
}
 801c992:	4618      	mov	r0, r3
 801c994:	3718      	adds	r7, #24
 801c996:	46bd      	mov	sp, r7
 801c998:	bd80      	pop	{r7, pc}
 801c99a:	bf00      	nop
 801c99c:	08025500 	.word	0x08025500
 801c9a0:	080255f8 	.word	0x080255f8
 801c9a4:	08025578 	.word	0x08025578
 801c9a8:	2002d4d0 	.word	0x2002d4d0

0801c9ac <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801c9ac:	b580      	push	{r7, lr}
 801c9ae:	b084      	sub	sp, #16
 801c9b0:	af00      	add	r7, sp, #0
 801c9b2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c9b4:	2300      	movs	r3, #0
 801c9b6:	60fb      	str	r3, [r7, #12]
 801c9b8:	e01e      	b.n	801c9f8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801c9ba:	4913      	ldr	r1, [pc, #76]	@ (801ca08 <etharp_cleanup_netif+0x5c>)
 801c9bc:	68fa      	ldr	r2, [r7, #12]
 801c9be:	4613      	mov	r3, r2
 801c9c0:	005b      	lsls	r3, r3, #1
 801c9c2:	4413      	add	r3, r2
 801c9c4:	00db      	lsls	r3, r3, #3
 801c9c6:	440b      	add	r3, r1
 801c9c8:	3314      	adds	r3, #20
 801c9ca:	781b      	ldrb	r3, [r3, #0]
 801c9cc:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801c9ce:	7afb      	ldrb	r3, [r7, #11]
 801c9d0:	2b00      	cmp	r3, #0
 801c9d2:	d00e      	beq.n	801c9f2 <etharp_cleanup_netif+0x46>
 801c9d4:	490c      	ldr	r1, [pc, #48]	@ (801ca08 <etharp_cleanup_netif+0x5c>)
 801c9d6:	68fa      	ldr	r2, [r7, #12]
 801c9d8:	4613      	mov	r3, r2
 801c9da:	005b      	lsls	r3, r3, #1
 801c9dc:	4413      	add	r3, r2
 801c9de:	00db      	lsls	r3, r3, #3
 801c9e0:	440b      	add	r3, r1
 801c9e2:	3308      	adds	r3, #8
 801c9e4:	681b      	ldr	r3, [r3, #0]
 801c9e6:	687a      	ldr	r2, [r7, #4]
 801c9e8:	429a      	cmp	r2, r3
 801c9ea:	d102      	bne.n	801c9f2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801c9ec:	68f8      	ldr	r0, [r7, #12]
 801c9ee:	f7ff fcb7 	bl	801c360 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c9f2:	68fb      	ldr	r3, [r7, #12]
 801c9f4:	3301      	adds	r3, #1
 801c9f6:	60fb      	str	r3, [r7, #12]
 801c9f8:	68fb      	ldr	r3, [r7, #12]
 801c9fa:	2b09      	cmp	r3, #9
 801c9fc:	dddd      	ble.n	801c9ba <etharp_cleanup_netif+0xe>
    }
  }
}
 801c9fe:	bf00      	nop
 801ca00:	bf00      	nop
 801ca02:	3710      	adds	r7, #16
 801ca04:	46bd      	mov	sp, r7
 801ca06:	bd80      	pop	{r7, pc}
 801ca08:	2002d4d0 	.word	0x2002d4d0

0801ca0c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801ca0c:	b5b0      	push	{r4, r5, r7, lr}
 801ca0e:	b08a      	sub	sp, #40	@ 0x28
 801ca10:	af04      	add	r7, sp, #16
 801ca12:	6078      	str	r0, [r7, #4]
 801ca14:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801ca16:	683b      	ldr	r3, [r7, #0]
 801ca18:	2b00      	cmp	r3, #0
 801ca1a:	d107      	bne.n	801ca2c <etharp_input+0x20>
 801ca1c:	4b49      	ldr	r3, [pc, #292]	@ (801cb44 <etharp_input+0x138>)
 801ca1e:	f240 228a 	movw	r2, #650	@ 0x28a
 801ca22:	4949      	ldr	r1, [pc, #292]	@ (801cb48 <etharp_input+0x13c>)
 801ca24:	4849      	ldr	r0, [pc, #292]	@ (801cb4c <etharp_input+0x140>)
 801ca26:	f003 feb7 	bl	8020798 <iprintf>
 801ca2a:	e088      	b.n	801cb3e <etharp_input+0x132>

  hdr = (struct etharp_hdr *)p->payload;
 801ca2c:	687b      	ldr	r3, [r7, #4]
 801ca2e:	685b      	ldr	r3, [r3, #4]
 801ca30:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801ca32:	697b      	ldr	r3, [r7, #20]
 801ca34:	881b      	ldrh	r3, [r3, #0]
 801ca36:	b29b      	uxth	r3, r3
 801ca38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ca3c:	d10c      	bne.n	801ca58 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801ca3e:	697b      	ldr	r3, [r7, #20]
 801ca40:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801ca42:	2b06      	cmp	r3, #6
 801ca44:	d108      	bne.n	801ca58 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801ca46:	697b      	ldr	r3, [r7, #20]
 801ca48:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801ca4a:	2b04      	cmp	r3, #4
 801ca4c:	d104      	bne.n	801ca58 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801ca4e:	697b      	ldr	r3, [r7, #20]
 801ca50:	885b      	ldrh	r3, [r3, #2]
 801ca52:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801ca54:	2b08      	cmp	r3, #8
 801ca56:	d00f      	beq.n	801ca78 <etharp_input+0x6c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
 801ca58:	4b3d      	ldr	r3, [pc, #244]	@ (801cb50 <etharp_input+0x144>)
 801ca5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801ca5c:	3301      	adds	r3, #1
 801ca5e:	b29a      	uxth	r2, r3
 801ca60:	4b3b      	ldr	r3, [pc, #236]	@ (801cb50 <etharp_input+0x144>)
 801ca62:	851a      	strh	r2, [r3, #40]	@ 0x28
    ETHARP_STATS_INC(etharp.drop);
 801ca64:	4b3a      	ldr	r3, [pc, #232]	@ (801cb50 <etharp_input+0x144>)
 801ca66:	8bdb      	ldrh	r3, [r3, #30]
 801ca68:	3301      	adds	r3, #1
 801ca6a:	b29a      	uxth	r2, r3
 801ca6c:	4b38      	ldr	r3, [pc, #224]	@ (801cb50 <etharp_input+0x144>)
 801ca6e:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 801ca70:	6878      	ldr	r0, [r7, #4]
 801ca72:	f7f8 f803 	bl	8014a7c <pbuf_free>
    return;
 801ca76:	e062      	b.n	801cb3e <etharp_input+0x132>
  }
  ETHARP_STATS_INC(etharp.recv);
 801ca78:	4b35      	ldr	r3, [pc, #212]	@ (801cb50 <etharp_input+0x144>)
 801ca7a:	8b5b      	ldrh	r3, [r3, #26]
 801ca7c:	3301      	adds	r3, #1
 801ca7e:	b29a      	uxth	r2, r3
 801ca80:	4b33      	ldr	r3, [pc, #204]	@ (801cb50 <etharp_input+0x144>)
 801ca82:	835a      	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801ca84:	697b      	ldr	r3, [r7, #20]
 801ca86:	330e      	adds	r3, #14
 801ca88:	681b      	ldr	r3, [r3, #0]
 801ca8a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801ca8c:	697b      	ldr	r3, [r7, #20]
 801ca8e:	3318      	adds	r3, #24
 801ca90:	681b      	ldr	r3, [r3, #0]
 801ca92:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801ca94:	683b      	ldr	r3, [r7, #0]
 801ca96:	3304      	adds	r3, #4
 801ca98:	681b      	ldr	r3, [r3, #0]
 801ca9a:	2b00      	cmp	r3, #0
 801ca9c:	d102      	bne.n	801caa4 <etharp_input+0x98>
    for_us = 0;
 801ca9e:	2300      	movs	r3, #0
 801caa0:	74fb      	strb	r3, [r7, #19]
 801caa2:	e009      	b.n	801cab8 <etharp_input+0xac>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801caa4:	68ba      	ldr	r2, [r7, #8]
 801caa6:	683b      	ldr	r3, [r7, #0]
 801caa8:	3304      	adds	r3, #4
 801caaa:	681b      	ldr	r3, [r3, #0]
 801caac:	429a      	cmp	r2, r3
 801caae:	bf0c      	ite	eq
 801cab0:	2301      	moveq	r3, #1
 801cab2:	2300      	movne	r3, #0
 801cab4:	b2db      	uxtb	r3, r3
 801cab6:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801cab8:	697b      	ldr	r3, [r7, #20]
 801caba:	f103 0208 	add.w	r2, r3, #8
 801cabe:	7cfb      	ldrb	r3, [r7, #19]
 801cac0:	2b00      	cmp	r3, #0
 801cac2:	d001      	beq.n	801cac8 <etharp_input+0xbc>
 801cac4:	2301      	movs	r3, #1
 801cac6:	e000      	b.n	801caca <etharp_input+0xbe>
 801cac8:	2302      	movs	r3, #2
 801caca:	f107 010c 	add.w	r1, r7, #12
 801cace:	6838      	ldr	r0, [r7, #0]
 801cad0:	f7ff fec6 	bl	801c860 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801cad4:	697b      	ldr	r3, [r7, #20]
 801cad6:	88db      	ldrh	r3, [r3, #6]
 801cad8:	b29b      	uxth	r3, r3
 801cada:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801cade:	d003      	beq.n	801cae8 <etharp_input+0xdc>
 801cae0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801cae4:	d025      	beq.n	801cb32 <etharp_input+0x126>
 801cae6:	e01d      	b.n	801cb24 <etharp_input+0x118>
       * reply. In any case, we time-stamp any existing ARP entry,
       * and possibly send out an IP packet that was queued on it. */

      LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
      /* ARP request for our address? */
      if (for_us) {
 801cae8:	7cfb      	ldrb	r3, [r7, #19]
 801caea:	2b00      	cmp	r3, #0
 801caec:	d023      	beq.n	801cb36 <etharp_input+0x12a>
        /* send ARP response */
        etharp_raw(netif,
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801caee:	683b      	ldr	r3, [r7, #0]
 801caf0:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801caf4:	697b      	ldr	r3, [r7, #20]
 801caf6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801cafa:	683b      	ldr	r3, [r7, #0]
 801cafc:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 801cb00:	683b      	ldr	r3, [r7, #0]
 801cb02:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801cb04:	697a      	ldr	r2, [r7, #20]
 801cb06:	3208      	adds	r2, #8
        etharp_raw(netif,
 801cb08:	2102      	movs	r1, #2
 801cb0a:	9103      	str	r1, [sp, #12]
 801cb0c:	f107 010c 	add.w	r1, r7, #12
 801cb10:	9102      	str	r1, [sp, #8]
 801cb12:	9201      	str	r2, [sp, #4]
 801cb14:	9300      	str	r3, [sp, #0]
 801cb16:	462b      	mov	r3, r5
 801cb18:	4622      	mov	r2, r4
 801cb1a:	4601      	mov	r1, r0
 801cb1c:	6838      	ldr	r0, [r7, #0]
 801cb1e:	f000 fb0b 	bl	801d138 <etharp_raw>
        /* request was not directed to us */
      } else {
        /* { for_us == 0 and netif->ip_addr.addr != 0 } */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
      }
      break;
 801cb22:	e008      	b.n	801cb36 <etharp_input+0x12a>
      dhcp_arp_reply(netif, &sipaddr);
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
 801cb24:	4b0a      	ldr	r3, [pc, #40]	@ (801cb50 <etharp_input+0x144>)
 801cb26:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801cb28:	3301      	adds	r3, #1
 801cb2a:	b29a      	uxth	r2, r3
 801cb2c:	4b08      	ldr	r3, [pc, #32]	@ (801cb50 <etharp_input+0x144>)
 801cb2e:	859a      	strh	r2, [r3, #44]	@ 0x2c
      break;
 801cb30:	e002      	b.n	801cb38 <etharp_input+0x12c>
      break;
 801cb32:	bf00      	nop
 801cb34:	e000      	b.n	801cb38 <etharp_input+0x12c>
      break;
 801cb36:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801cb38:	6878      	ldr	r0, [r7, #4]
 801cb3a:	f7f7 ff9f 	bl	8014a7c <pbuf_free>
}
 801cb3e:	3718      	adds	r7, #24
 801cb40:	46bd      	mov	sp, r7
 801cb42:	bdb0      	pop	{r4, r5, r7, pc}
 801cb44:	08025500 	.word	0x08025500
 801cb48:	08025650 	.word	0x08025650
 801cb4c:	08025578 	.word	0x08025578
 801cb50:	2002d36c 	.word	0x2002d36c

0801cb54 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801cb54:	b580      	push	{r7, lr}
 801cb56:	b086      	sub	sp, #24
 801cb58:	af02      	add	r7, sp, #8
 801cb5a:	60f8      	str	r0, [r7, #12]
 801cb5c:	60b9      	str	r1, [r7, #8]
 801cb5e:	4613      	mov	r3, r2
 801cb60:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801cb62:	79fa      	ldrb	r2, [r7, #7]
 801cb64:	4944      	ldr	r1, [pc, #272]	@ (801cc78 <etharp_output_to_arp_index+0x124>)
 801cb66:	4613      	mov	r3, r2
 801cb68:	005b      	lsls	r3, r3, #1
 801cb6a:	4413      	add	r3, r2
 801cb6c:	00db      	lsls	r3, r3, #3
 801cb6e:	440b      	add	r3, r1
 801cb70:	3314      	adds	r3, #20
 801cb72:	781b      	ldrb	r3, [r3, #0]
 801cb74:	2b01      	cmp	r3, #1
 801cb76:	d806      	bhi.n	801cb86 <etharp_output_to_arp_index+0x32>
 801cb78:	4b40      	ldr	r3, [pc, #256]	@ (801cc7c <etharp_output_to_arp_index+0x128>)
 801cb7a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801cb7e:	4940      	ldr	r1, [pc, #256]	@ (801cc80 <etharp_output_to_arp_index+0x12c>)
 801cb80:	4840      	ldr	r0, [pc, #256]	@ (801cc84 <etharp_output_to_arp_index+0x130>)
 801cb82:	f003 fe09 	bl	8020798 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801cb86:	79fa      	ldrb	r2, [r7, #7]
 801cb88:	493b      	ldr	r1, [pc, #236]	@ (801cc78 <etharp_output_to_arp_index+0x124>)
 801cb8a:	4613      	mov	r3, r2
 801cb8c:	005b      	lsls	r3, r3, #1
 801cb8e:	4413      	add	r3, r2
 801cb90:	00db      	lsls	r3, r3, #3
 801cb92:	440b      	add	r3, r1
 801cb94:	3314      	adds	r3, #20
 801cb96:	781b      	ldrb	r3, [r3, #0]
 801cb98:	2b02      	cmp	r3, #2
 801cb9a:	d153      	bne.n	801cc44 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801cb9c:	79fa      	ldrb	r2, [r7, #7]
 801cb9e:	4936      	ldr	r1, [pc, #216]	@ (801cc78 <etharp_output_to_arp_index+0x124>)
 801cba0:	4613      	mov	r3, r2
 801cba2:	005b      	lsls	r3, r3, #1
 801cba4:	4413      	add	r3, r2
 801cba6:	00db      	lsls	r3, r3, #3
 801cba8:	440b      	add	r3, r1
 801cbaa:	3312      	adds	r3, #18
 801cbac:	881b      	ldrh	r3, [r3, #0]
 801cbae:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801cbb2:	d919      	bls.n	801cbe8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801cbb4:	79fa      	ldrb	r2, [r7, #7]
 801cbb6:	4613      	mov	r3, r2
 801cbb8:	005b      	lsls	r3, r3, #1
 801cbba:	4413      	add	r3, r2
 801cbbc:	00db      	lsls	r3, r3, #3
 801cbbe:	4a2e      	ldr	r2, [pc, #184]	@ (801cc78 <etharp_output_to_arp_index+0x124>)
 801cbc0:	4413      	add	r3, r2
 801cbc2:	3304      	adds	r3, #4
 801cbc4:	4619      	mov	r1, r3
 801cbc6:	68f8      	ldr	r0, [r7, #12]
 801cbc8:	f000 fb72 	bl	801d2b0 <etharp_request>
 801cbcc:	4603      	mov	r3, r0
 801cbce:	2b00      	cmp	r3, #0
 801cbd0:	d138      	bne.n	801cc44 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801cbd2:	79fa      	ldrb	r2, [r7, #7]
 801cbd4:	4928      	ldr	r1, [pc, #160]	@ (801cc78 <etharp_output_to_arp_index+0x124>)
 801cbd6:	4613      	mov	r3, r2
 801cbd8:	005b      	lsls	r3, r3, #1
 801cbda:	4413      	add	r3, r2
 801cbdc:	00db      	lsls	r3, r3, #3
 801cbde:	440b      	add	r3, r1
 801cbe0:	3314      	adds	r3, #20
 801cbe2:	2203      	movs	r2, #3
 801cbe4:	701a      	strb	r2, [r3, #0]
 801cbe6:	e02d      	b.n	801cc44 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801cbe8:	79fa      	ldrb	r2, [r7, #7]
 801cbea:	4923      	ldr	r1, [pc, #140]	@ (801cc78 <etharp_output_to_arp_index+0x124>)
 801cbec:	4613      	mov	r3, r2
 801cbee:	005b      	lsls	r3, r3, #1
 801cbf0:	4413      	add	r3, r2
 801cbf2:	00db      	lsls	r3, r3, #3
 801cbf4:	440b      	add	r3, r1
 801cbf6:	3312      	adds	r3, #18
 801cbf8:	881b      	ldrh	r3, [r3, #0]
 801cbfa:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801cbfe:	d321      	bcc.n	801cc44 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801cc00:	79fa      	ldrb	r2, [r7, #7]
 801cc02:	4613      	mov	r3, r2
 801cc04:	005b      	lsls	r3, r3, #1
 801cc06:	4413      	add	r3, r2
 801cc08:	00db      	lsls	r3, r3, #3
 801cc0a:	4a1b      	ldr	r2, [pc, #108]	@ (801cc78 <etharp_output_to_arp_index+0x124>)
 801cc0c:	4413      	add	r3, r2
 801cc0e:	1d19      	adds	r1, r3, #4
 801cc10:	79fa      	ldrb	r2, [r7, #7]
 801cc12:	4613      	mov	r3, r2
 801cc14:	005b      	lsls	r3, r3, #1
 801cc16:	4413      	add	r3, r2
 801cc18:	00db      	lsls	r3, r3, #3
 801cc1a:	3308      	adds	r3, #8
 801cc1c:	4a16      	ldr	r2, [pc, #88]	@ (801cc78 <etharp_output_to_arp_index+0x124>)
 801cc1e:	4413      	add	r3, r2
 801cc20:	3304      	adds	r3, #4
 801cc22:	461a      	mov	r2, r3
 801cc24:	68f8      	ldr	r0, [r7, #12]
 801cc26:	f000 fb21 	bl	801d26c <etharp_request_dst>
 801cc2a:	4603      	mov	r3, r0
 801cc2c:	2b00      	cmp	r3, #0
 801cc2e:	d109      	bne.n	801cc44 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801cc30:	79fa      	ldrb	r2, [r7, #7]
 801cc32:	4911      	ldr	r1, [pc, #68]	@ (801cc78 <etharp_output_to_arp_index+0x124>)
 801cc34:	4613      	mov	r3, r2
 801cc36:	005b      	lsls	r3, r3, #1
 801cc38:	4413      	add	r3, r2
 801cc3a:	00db      	lsls	r3, r3, #3
 801cc3c:	440b      	add	r3, r1
 801cc3e:	3314      	adds	r3, #20
 801cc40:	2203      	movs	r2, #3
 801cc42:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801cc44:	68fb      	ldr	r3, [r7, #12]
 801cc46:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801cc4a:	79fa      	ldrb	r2, [r7, #7]
 801cc4c:	4613      	mov	r3, r2
 801cc4e:	005b      	lsls	r3, r3, #1
 801cc50:	4413      	add	r3, r2
 801cc52:	00db      	lsls	r3, r3, #3
 801cc54:	3308      	adds	r3, #8
 801cc56:	4a08      	ldr	r2, [pc, #32]	@ (801cc78 <etharp_output_to_arp_index+0x124>)
 801cc58:	4413      	add	r3, r2
 801cc5a:	3304      	adds	r3, #4
 801cc5c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801cc60:	9200      	str	r2, [sp, #0]
 801cc62:	460a      	mov	r2, r1
 801cc64:	68b9      	ldr	r1, [r7, #8]
 801cc66:	68f8      	ldr	r0, [r7, #12]
 801cc68:	f002 f88a 	bl	801ed80 <ethernet_output>
 801cc6c:	4603      	mov	r3, r0
}
 801cc6e:	4618      	mov	r0, r3
 801cc70:	3710      	adds	r7, #16
 801cc72:	46bd      	mov	sp, r7
 801cc74:	bd80      	pop	{r7, pc}
 801cc76:	bf00      	nop
 801cc78:	2002d4d0 	.word	0x2002d4d0
 801cc7c:	08025500 	.word	0x08025500
 801cc80:	08025670 	.word	0x08025670
 801cc84:	08025578 	.word	0x08025578

0801cc88 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801cc88:	b580      	push	{r7, lr}
 801cc8a:	b08a      	sub	sp, #40	@ 0x28
 801cc8c:	af02      	add	r7, sp, #8
 801cc8e:	60f8      	str	r0, [r7, #12]
 801cc90:	60b9      	str	r1, [r7, #8]
 801cc92:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801cc94:	687b      	ldr	r3, [r7, #4]
 801cc96:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801cc98:	68fb      	ldr	r3, [r7, #12]
 801cc9a:	2b00      	cmp	r3, #0
 801cc9c:	d106      	bne.n	801ccac <etharp_output+0x24>
 801cc9e:	4b76      	ldr	r3, [pc, #472]	@ (801ce78 <etharp_output+0x1f0>)
 801cca0:	f240 321e 	movw	r2, #798	@ 0x31e
 801cca4:	4975      	ldr	r1, [pc, #468]	@ (801ce7c <etharp_output+0x1f4>)
 801cca6:	4876      	ldr	r0, [pc, #472]	@ (801ce80 <etharp_output+0x1f8>)
 801cca8:	f003 fd76 	bl	8020798 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801ccac:	68bb      	ldr	r3, [r7, #8]
 801ccae:	2b00      	cmp	r3, #0
 801ccb0:	d106      	bne.n	801ccc0 <etharp_output+0x38>
 801ccb2:	4b71      	ldr	r3, [pc, #452]	@ (801ce78 <etharp_output+0x1f0>)
 801ccb4:	f240 321f 	movw	r2, #799	@ 0x31f
 801ccb8:	4972      	ldr	r1, [pc, #456]	@ (801ce84 <etharp_output+0x1fc>)
 801ccba:	4871      	ldr	r0, [pc, #452]	@ (801ce80 <etharp_output+0x1f8>)
 801ccbc:	f003 fd6c 	bl	8020798 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801ccc0:	687b      	ldr	r3, [r7, #4]
 801ccc2:	2b00      	cmp	r3, #0
 801ccc4:	d106      	bne.n	801ccd4 <etharp_output+0x4c>
 801ccc6:	4b6c      	ldr	r3, [pc, #432]	@ (801ce78 <etharp_output+0x1f0>)
 801ccc8:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801cccc:	496e      	ldr	r1, [pc, #440]	@ (801ce88 <etharp_output+0x200>)
 801ccce:	486c      	ldr	r0, [pc, #432]	@ (801ce80 <etharp_output+0x1f8>)
 801ccd0:	f003 fd62 	bl	8020798 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801ccd4:	687b      	ldr	r3, [r7, #4]
 801ccd6:	681b      	ldr	r3, [r3, #0]
 801ccd8:	68f9      	ldr	r1, [r7, #12]
 801ccda:	4618      	mov	r0, r3
 801ccdc:	f001 f860 	bl	801dda0 <ip4_addr_isbroadcast_u32>
 801cce0:	4603      	mov	r3, r0
 801cce2:	2b00      	cmp	r3, #0
 801cce4:	d002      	beq.n	801ccec <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801cce6:	4b69      	ldr	r3, [pc, #420]	@ (801ce8c <etharp_output+0x204>)
 801cce8:	61fb      	str	r3, [r7, #28]
 801ccea:	e0b5      	b.n	801ce58 <etharp_output+0x1d0>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801ccec:	687b      	ldr	r3, [r7, #4]
 801ccee:	681b      	ldr	r3, [r3, #0]
 801ccf0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801ccf4:	2be0      	cmp	r3, #224	@ 0xe0
 801ccf6:	d118      	bne.n	801cd2a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801ccf8:	2301      	movs	r3, #1
 801ccfa:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801ccfc:	2300      	movs	r3, #0
 801ccfe:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801cd00:	235e      	movs	r3, #94	@ 0x5e
 801cd02:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801cd04:	687b      	ldr	r3, [r7, #4]
 801cd06:	3301      	adds	r3, #1
 801cd08:	781b      	ldrb	r3, [r3, #0]
 801cd0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801cd0e:	b2db      	uxtb	r3, r3
 801cd10:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801cd12:	687b      	ldr	r3, [r7, #4]
 801cd14:	3302      	adds	r3, #2
 801cd16:	781b      	ldrb	r3, [r3, #0]
 801cd18:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801cd1a:	687b      	ldr	r3, [r7, #4]
 801cd1c:	3303      	adds	r3, #3
 801cd1e:	781b      	ldrb	r3, [r3, #0]
 801cd20:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801cd22:	f107 0310 	add.w	r3, r7, #16
 801cd26:	61fb      	str	r3, [r7, #28]
 801cd28:	e096      	b.n	801ce58 <etharp_output+0x1d0>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801cd2a:	687b      	ldr	r3, [r7, #4]
 801cd2c:	681a      	ldr	r2, [r3, #0]
 801cd2e:	68fb      	ldr	r3, [r7, #12]
 801cd30:	3304      	adds	r3, #4
 801cd32:	681b      	ldr	r3, [r3, #0]
 801cd34:	405a      	eors	r2, r3
 801cd36:	68fb      	ldr	r3, [r7, #12]
 801cd38:	3308      	adds	r3, #8
 801cd3a:	681b      	ldr	r3, [r3, #0]
 801cd3c:	4013      	ands	r3, r2
 801cd3e:	2b00      	cmp	r3, #0
 801cd40:	d012      	beq.n	801cd68 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801cd42:	687b      	ldr	r3, [r7, #4]
 801cd44:	681b      	ldr	r3, [r3, #0]
 801cd46:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801cd48:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801cd4c:	4293      	cmp	r3, r2
 801cd4e:	d00b      	beq.n	801cd68 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801cd50:	68fb      	ldr	r3, [r7, #12]
 801cd52:	330c      	adds	r3, #12
 801cd54:	681b      	ldr	r3, [r3, #0]
 801cd56:	2b00      	cmp	r3, #0
 801cd58:	d003      	beq.n	801cd62 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801cd5a:	68fb      	ldr	r3, [r7, #12]
 801cd5c:	330c      	adds	r3, #12
 801cd5e:	61bb      	str	r3, [r7, #24]
 801cd60:	e002      	b.n	801cd68 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801cd62:	f06f 0303 	mvn.w	r3, #3
 801cd66:	e083      	b.n	801ce70 <etharp_output+0x1e8>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801cd68:	4b49      	ldr	r3, [pc, #292]	@ (801ce90 <etharp_output+0x208>)
 801cd6a:	781b      	ldrb	r3, [r3, #0]
 801cd6c:	4619      	mov	r1, r3
 801cd6e:	4a49      	ldr	r2, [pc, #292]	@ (801ce94 <etharp_output+0x20c>)
 801cd70:	460b      	mov	r3, r1
 801cd72:	005b      	lsls	r3, r3, #1
 801cd74:	440b      	add	r3, r1
 801cd76:	00db      	lsls	r3, r3, #3
 801cd78:	4413      	add	r3, r2
 801cd7a:	3314      	adds	r3, #20
 801cd7c:	781b      	ldrb	r3, [r3, #0]
 801cd7e:	2b01      	cmp	r3, #1
 801cd80:	d92b      	bls.n	801cdda <etharp_output+0x152>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801cd82:	4b43      	ldr	r3, [pc, #268]	@ (801ce90 <etharp_output+0x208>)
 801cd84:	781b      	ldrb	r3, [r3, #0]
 801cd86:	4619      	mov	r1, r3
 801cd88:	4a42      	ldr	r2, [pc, #264]	@ (801ce94 <etharp_output+0x20c>)
 801cd8a:	460b      	mov	r3, r1
 801cd8c:	005b      	lsls	r3, r3, #1
 801cd8e:	440b      	add	r3, r1
 801cd90:	00db      	lsls	r3, r3, #3
 801cd92:	4413      	add	r3, r2
 801cd94:	3308      	adds	r3, #8
 801cd96:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801cd98:	68fa      	ldr	r2, [r7, #12]
 801cd9a:	429a      	cmp	r2, r3
 801cd9c:	d11d      	bne.n	801cdda <etharp_output+0x152>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801cd9e:	69bb      	ldr	r3, [r7, #24]
 801cda0:	681a      	ldr	r2, [r3, #0]
 801cda2:	4b3b      	ldr	r3, [pc, #236]	@ (801ce90 <etharp_output+0x208>)
 801cda4:	781b      	ldrb	r3, [r3, #0]
 801cda6:	4618      	mov	r0, r3
 801cda8:	493a      	ldr	r1, [pc, #232]	@ (801ce94 <etharp_output+0x20c>)
 801cdaa:	4603      	mov	r3, r0
 801cdac:	005b      	lsls	r3, r3, #1
 801cdae:	4403      	add	r3, r0
 801cdb0:	00db      	lsls	r3, r3, #3
 801cdb2:	440b      	add	r3, r1
 801cdb4:	3304      	adds	r3, #4
 801cdb6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801cdb8:	429a      	cmp	r2, r3
 801cdba:	d10e      	bne.n	801cdda <etharp_output+0x152>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
 801cdbc:	4b36      	ldr	r3, [pc, #216]	@ (801ce98 <etharp_output+0x210>)
 801cdbe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 801cdc0:	3301      	adds	r3, #1
 801cdc2:	b29a      	uxth	r2, r3
 801cdc4:	4b34      	ldr	r3, [pc, #208]	@ (801ce98 <etharp_output+0x210>)
 801cdc6:	85da      	strh	r2, [r3, #46]	@ 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801cdc8:	4b31      	ldr	r3, [pc, #196]	@ (801ce90 <etharp_output+0x208>)
 801cdca:	781b      	ldrb	r3, [r3, #0]
 801cdcc:	461a      	mov	r2, r3
 801cdce:	68b9      	ldr	r1, [r7, #8]
 801cdd0:	68f8      	ldr	r0, [r7, #12]
 801cdd2:	f7ff febf 	bl	801cb54 <etharp_output_to_arp_index>
 801cdd6:	4603      	mov	r3, r0
 801cdd8:	e04a      	b.n	801ce70 <etharp_output+0x1e8>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801cdda:	2300      	movs	r3, #0
 801cddc:	75fb      	strb	r3, [r7, #23]
 801cdde:	e031      	b.n	801ce44 <etharp_output+0x1bc>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801cde0:	7dfa      	ldrb	r2, [r7, #23]
 801cde2:	492c      	ldr	r1, [pc, #176]	@ (801ce94 <etharp_output+0x20c>)
 801cde4:	4613      	mov	r3, r2
 801cde6:	005b      	lsls	r3, r3, #1
 801cde8:	4413      	add	r3, r2
 801cdea:	00db      	lsls	r3, r3, #3
 801cdec:	440b      	add	r3, r1
 801cdee:	3314      	adds	r3, #20
 801cdf0:	781b      	ldrb	r3, [r3, #0]
 801cdf2:	2b01      	cmp	r3, #1
 801cdf4:	d923      	bls.n	801ce3e <etharp_output+0x1b6>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801cdf6:	7dfa      	ldrb	r2, [r7, #23]
 801cdf8:	4926      	ldr	r1, [pc, #152]	@ (801ce94 <etharp_output+0x20c>)
 801cdfa:	4613      	mov	r3, r2
 801cdfc:	005b      	lsls	r3, r3, #1
 801cdfe:	4413      	add	r3, r2
 801ce00:	00db      	lsls	r3, r3, #3
 801ce02:	440b      	add	r3, r1
 801ce04:	3308      	adds	r3, #8
 801ce06:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801ce08:	68fa      	ldr	r2, [r7, #12]
 801ce0a:	429a      	cmp	r2, r3
 801ce0c:	d117      	bne.n	801ce3e <etharp_output+0x1b6>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801ce0e:	69bb      	ldr	r3, [r7, #24]
 801ce10:	6819      	ldr	r1, [r3, #0]
 801ce12:	7dfa      	ldrb	r2, [r7, #23]
 801ce14:	481f      	ldr	r0, [pc, #124]	@ (801ce94 <etharp_output+0x20c>)
 801ce16:	4613      	mov	r3, r2
 801ce18:	005b      	lsls	r3, r3, #1
 801ce1a:	4413      	add	r3, r2
 801ce1c:	00db      	lsls	r3, r3, #3
 801ce1e:	4403      	add	r3, r0
 801ce20:	3304      	adds	r3, #4
 801ce22:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801ce24:	4299      	cmp	r1, r3
 801ce26:	d10a      	bne.n	801ce3e <etharp_output+0x1b6>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801ce28:	4a19      	ldr	r2, [pc, #100]	@ (801ce90 <etharp_output+0x208>)
 801ce2a:	7dfb      	ldrb	r3, [r7, #23]
 801ce2c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801ce2e:	7dfb      	ldrb	r3, [r7, #23]
 801ce30:	461a      	mov	r2, r3
 801ce32:	68b9      	ldr	r1, [r7, #8]
 801ce34:	68f8      	ldr	r0, [r7, #12]
 801ce36:	f7ff fe8d 	bl	801cb54 <etharp_output_to_arp_index>
 801ce3a:	4603      	mov	r3, r0
 801ce3c:	e018      	b.n	801ce70 <etharp_output+0x1e8>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801ce3e:	7dfb      	ldrb	r3, [r7, #23]
 801ce40:	3301      	adds	r3, #1
 801ce42:	75fb      	strb	r3, [r7, #23]
 801ce44:	7dfb      	ldrb	r3, [r7, #23]
 801ce46:	2b09      	cmp	r3, #9
 801ce48:	d9ca      	bls.n	801cde0 <etharp_output+0x158>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801ce4a:	68ba      	ldr	r2, [r7, #8]
 801ce4c:	69b9      	ldr	r1, [r7, #24]
 801ce4e:	68f8      	ldr	r0, [r7, #12]
 801ce50:	f000 f824 	bl	801ce9c <etharp_query>
 801ce54:	4603      	mov	r3, r0
 801ce56:	e00b      	b.n	801ce70 <etharp_output+0x1e8>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801ce58:	68fb      	ldr	r3, [r7, #12]
 801ce5a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801ce5e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801ce62:	9300      	str	r3, [sp, #0]
 801ce64:	69fb      	ldr	r3, [r7, #28]
 801ce66:	68b9      	ldr	r1, [r7, #8]
 801ce68:	68f8      	ldr	r0, [r7, #12]
 801ce6a:	f001 ff89 	bl	801ed80 <ethernet_output>
 801ce6e:	4603      	mov	r3, r0
}
 801ce70:	4618      	mov	r0, r3
 801ce72:	3720      	adds	r7, #32
 801ce74:	46bd      	mov	sp, r7
 801ce76:	bd80      	pop	{r7, pc}
 801ce78:	08025500 	.word	0x08025500
 801ce7c:	08025650 	.word	0x08025650
 801ce80:	08025578 	.word	0x08025578
 801ce84:	080256a0 	.word	0x080256a0
 801ce88:	08025640 	.word	0x08025640
 801ce8c:	08026888 	.word	0x08026888
 801ce90:	2002d5c0 	.word	0x2002d5c0
 801ce94:	2002d4d0 	.word	0x2002d4d0
 801ce98:	2002d36c 	.word	0x2002d36c

0801ce9c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801ce9c:	b580      	push	{r7, lr}
 801ce9e:	b08c      	sub	sp, #48	@ 0x30
 801cea0:	af02      	add	r7, sp, #8
 801cea2:	60f8      	str	r0, [r7, #12]
 801cea4:	60b9      	str	r1, [r7, #8]
 801cea6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801cea8:	68fb      	ldr	r3, [r7, #12]
 801ceaa:	3326      	adds	r3, #38	@ 0x26
 801ceac:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801ceae:	23ff      	movs	r3, #255	@ 0xff
 801ceb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801ceb4:	2300      	movs	r3, #0
 801ceb6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801ceb8:	68bb      	ldr	r3, [r7, #8]
 801ceba:	681b      	ldr	r3, [r3, #0]
 801cebc:	68f9      	ldr	r1, [r7, #12]
 801cebe:	4618      	mov	r0, r3
 801cec0:	f000 ff6e 	bl	801dda0 <ip4_addr_isbroadcast_u32>
 801cec4:	4603      	mov	r3, r0
 801cec6:	2b00      	cmp	r3, #0
 801cec8:	d10c      	bne.n	801cee4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801ceca:	68bb      	ldr	r3, [r7, #8]
 801cecc:	681b      	ldr	r3, [r3, #0]
 801cece:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801ced2:	2be0      	cmp	r3, #224	@ 0xe0
 801ced4:	d006      	beq.n	801cee4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801ced6:	68bb      	ldr	r3, [r7, #8]
 801ced8:	2b00      	cmp	r3, #0
 801ceda:	d003      	beq.n	801cee4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801cedc:	68bb      	ldr	r3, [r7, #8]
 801cede:	681b      	ldr	r3, [r3, #0]
 801cee0:	2b00      	cmp	r3, #0
 801cee2:	d102      	bne.n	801ceea <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801cee4:	f06f 030f 	mvn.w	r3, #15
 801cee8:	e110      	b.n	801d10c <etharp_query+0x270>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801ceea:	68fa      	ldr	r2, [r7, #12]
 801ceec:	2101      	movs	r1, #1
 801ceee:	68b8      	ldr	r0, [r7, #8]
 801cef0:	f7ff fb3e 	bl	801c570 <etharp_find_entry>
 801cef4:	4603      	mov	r3, r0
 801cef6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801cef8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801cefc:	2b00      	cmp	r3, #0
 801cefe:	da0b      	bge.n	801cf18 <etharp_query+0x7c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
 801cf00:	687b      	ldr	r3, [r7, #4]
 801cf02:	2b00      	cmp	r3, #0
 801cf04:	d005      	beq.n	801cf12 <etharp_query+0x76>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
 801cf06:	4b83      	ldr	r3, [pc, #524]	@ (801d114 <etharp_query+0x278>)
 801cf08:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801cf0a:	3301      	adds	r3, #1
 801cf0c:	b29a      	uxth	r2, r3
 801cf0e:	4b81      	ldr	r3, [pc, #516]	@ (801d114 <etharp_query+0x278>)
 801cf10:	849a      	strh	r2, [r3, #36]	@ 0x24
    }
    return (err_t)i_err;
 801cf12:	8a7b      	ldrh	r3, [r7, #18]
 801cf14:	b25b      	sxtb	r3, r3
 801cf16:	e0f9      	b.n	801d10c <etharp_query+0x270>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801cf18:	8a7b      	ldrh	r3, [r7, #18]
 801cf1a:	2b7e      	cmp	r3, #126	@ 0x7e
 801cf1c:	d906      	bls.n	801cf2c <etharp_query+0x90>
 801cf1e:	4b7e      	ldr	r3, [pc, #504]	@ (801d118 <etharp_query+0x27c>)
 801cf20:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801cf24:	497d      	ldr	r1, [pc, #500]	@ (801d11c <etharp_query+0x280>)
 801cf26:	487e      	ldr	r0, [pc, #504]	@ (801d120 <etharp_query+0x284>)
 801cf28:	f003 fc36 	bl	8020798 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801cf2c:	8a7b      	ldrh	r3, [r7, #18]
 801cf2e:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801cf30:	7c7a      	ldrb	r2, [r7, #17]
 801cf32:	497c      	ldr	r1, [pc, #496]	@ (801d124 <etharp_query+0x288>)
 801cf34:	4613      	mov	r3, r2
 801cf36:	005b      	lsls	r3, r3, #1
 801cf38:	4413      	add	r3, r2
 801cf3a:	00db      	lsls	r3, r3, #3
 801cf3c:	440b      	add	r3, r1
 801cf3e:	3314      	adds	r3, #20
 801cf40:	781b      	ldrb	r3, [r3, #0]
 801cf42:	2b00      	cmp	r3, #0
 801cf44:	d115      	bne.n	801cf72 <etharp_query+0xd6>
    is_new_entry = 1;
 801cf46:	2301      	movs	r3, #1
 801cf48:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801cf4a:	7c7a      	ldrb	r2, [r7, #17]
 801cf4c:	4975      	ldr	r1, [pc, #468]	@ (801d124 <etharp_query+0x288>)
 801cf4e:	4613      	mov	r3, r2
 801cf50:	005b      	lsls	r3, r3, #1
 801cf52:	4413      	add	r3, r2
 801cf54:	00db      	lsls	r3, r3, #3
 801cf56:	440b      	add	r3, r1
 801cf58:	3314      	adds	r3, #20
 801cf5a:	2201      	movs	r2, #1
 801cf5c:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801cf5e:	7c7a      	ldrb	r2, [r7, #17]
 801cf60:	4970      	ldr	r1, [pc, #448]	@ (801d124 <etharp_query+0x288>)
 801cf62:	4613      	mov	r3, r2
 801cf64:	005b      	lsls	r3, r3, #1
 801cf66:	4413      	add	r3, r2
 801cf68:	00db      	lsls	r3, r3, #3
 801cf6a:	440b      	add	r3, r1
 801cf6c:	3308      	adds	r3, #8
 801cf6e:	68fa      	ldr	r2, [r7, #12]
 801cf70:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801cf72:	7c7a      	ldrb	r2, [r7, #17]
 801cf74:	496b      	ldr	r1, [pc, #428]	@ (801d124 <etharp_query+0x288>)
 801cf76:	4613      	mov	r3, r2
 801cf78:	005b      	lsls	r3, r3, #1
 801cf7a:	4413      	add	r3, r2
 801cf7c:	00db      	lsls	r3, r3, #3
 801cf7e:	440b      	add	r3, r1
 801cf80:	3314      	adds	r3, #20
 801cf82:	781b      	ldrb	r3, [r3, #0]
 801cf84:	2b01      	cmp	r3, #1
 801cf86:	d011      	beq.n	801cfac <etharp_query+0x110>
 801cf88:	7c7a      	ldrb	r2, [r7, #17]
 801cf8a:	4966      	ldr	r1, [pc, #408]	@ (801d124 <etharp_query+0x288>)
 801cf8c:	4613      	mov	r3, r2
 801cf8e:	005b      	lsls	r3, r3, #1
 801cf90:	4413      	add	r3, r2
 801cf92:	00db      	lsls	r3, r3, #3
 801cf94:	440b      	add	r3, r1
 801cf96:	3314      	adds	r3, #20
 801cf98:	781b      	ldrb	r3, [r3, #0]
 801cf9a:	2b01      	cmp	r3, #1
 801cf9c:	d806      	bhi.n	801cfac <etharp_query+0x110>
 801cf9e:	4b5e      	ldr	r3, [pc, #376]	@ (801d118 <etharp_query+0x27c>)
 801cfa0:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801cfa4:	4960      	ldr	r1, [pc, #384]	@ (801d128 <etharp_query+0x28c>)
 801cfa6:	485e      	ldr	r0, [pc, #376]	@ (801d120 <etharp_query+0x284>)
 801cfa8:	f003 fbf6 	bl	8020798 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801cfac:	6a3b      	ldr	r3, [r7, #32]
 801cfae:	2b00      	cmp	r3, #0
 801cfb0:	d102      	bne.n	801cfb8 <etharp_query+0x11c>
 801cfb2:	687b      	ldr	r3, [r7, #4]
 801cfb4:	2b00      	cmp	r3, #0
 801cfb6:	d10c      	bne.n	801cfd2 <etharp_query+0x136>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801cfb8:	68b9      	ldr	r1, [r7, #8]
 801cfba:	68f8      	ldr	r0, [r7, #12]
 801cfbc:	f000 f978 	bl	801d2b0 <etharp_request>
 801cfc0:	4603      	mov	r3, r0
 801cfc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801cfc6:	687b      	ldr	r3, [r7, #4]
 801cfc8:	2b00      	cmp	r3, #0
 801cfca:	d102      	bne.n	801cfd2 <etharp_query+0x136>
      return result;
 801cfcc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801cfd0:	e09c      	b.n	801d10c <etharp_query+0x270>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801cfd2:	687b      	ldr	r3, [r7, #4]
 801cfd4:	2b00      	cmp	r3, #0
 801cfd6:	d106      	bne.n	801cfe6 <etharp_query+0x14a>
 801cfd8:	4b4f      	ldr	r3, [pc, #316]	@ (801d118 <etharp_query+0x27c>)
 801cfda:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801cfde:	4953      	ldr	r1, [pc, #332]	@ (801d12c <etharp_query+0x290>)
 801cfe0:	484f      	ldr	r0, [pc, #316]	@ (801d120 <etharp_query+0x284>)
 801cfe2:	f003 fbd9 	bl	8020798 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801cfe6:	7c7a      	ldrb	r2, [r7, #17]
 801cfe8:	494e      	ldr	r1, [pc, #312]	@ (801d124 <etharp_query+0x288>)
 801cfea:	4613      	mov	r3, r2
 801cfec:	005b      	lsls	r3, r3, #1
 801cfee:	4413      	add	r3, r2
 801cff0:	00db      	lsls	r3, r3, #3
 801cff2:	440b      	add	r3, r1
 801cff4:	3314      	adds	r3, #20
 801cff6:	781b      	ldrb	r3, [r3, #0]
 801cff8:	2b01      	cmp	r3, #1
 801cffa:	d917      	bls.n	801d02c <etharp_query+0x190>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801cffc:	4a4c      	ldr	r2, [pc, #304]	@ (801d130 <etharp_query+0x294>)
 801cffe:	7c7b      	ldrb	r3, [r7, #17]
 801d000:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801d002:	7c7a      	ldrb	r2, [r7, #17]
 801d004:	4613      	mov	r3, r2
 801d006:	005b      	lsls	r3, r3, #1
 801d008:	4413      	add	r3, r2
 801d00a:	00db      	lsls	r3, r3, #3
 801d00c:	3308      	adds	r3, #8
 801d00e:	4a45      	ldr	r2, [pc, #276]	@ (801d124 <etharp_query+0x288>)
 801d010:	4413      	add	r3, r2
 801d012:	3304      	adds	r3, #4
 801d014:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801d018:	9200      	str	r2, [sp, #0]
 801d01a:	697a      	ldr	r2, [r7, #20]
 801d01c:	6879      	ldr	r1, [r7, #4]
 801d01e:	68f8      	ldr	r0, [r7, #12]
 801d020:	f001 feae 	bl	801ed80 <ethernet_output>
 801d024:	4603      	mov	r3, r0
 801d026:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801d02a:	e06d      	b.n	801d108 <etharp_query+0x26c>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801d02c:	7c7a      	ldrb	r2, [r7, #17]
 801d02e:	493d      	ldr	r1, [pc, #244]	@ (801d124 <etharp_query+0x288>)
 801d030:	4613      	mov	r3, r2
 801d032:	005b      	lsls	r3, r3, #1
 801d034:	4413      	add	r3, r2
 801d036:	00db      	lsls	r3, r3, #3
 801d038:	440b      	add	r3, r1
 801d03a:	3314      	adds	r3, #20
 801d03c:	781b      	ldrb	r3, [r3, #0]
 801d03e:	2b01      	cmp	r3, #1
 801d040:	d162      	bne.n	801d108 <etharp_query+0x26c>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801d042:	2300      	movs	r3, #0
 801d044:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801d046:	687b      	ldr	r3, [r7, #4]
 801d048:	61fb      	str	r3, [r7, #28]
    while (p) {
 801d04a:	e01c      	b.n	801d086 <etharp_query+0x1ea>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801d04c:	69fb      	ldr	r3, [r7, #28]
 801d04e:	895a      	ldrh	r2, [r3, #10]
 801d050:	69fb      	ldr	r3, [r7, #28]
 801d052:	891b      	ldrh	r3, [r3, #8]
 801d054:	429a      	cmp	r2, r3
 801d056:	d10a      	bne.n	801d06e <etharp_query+0x1d2>
 801d058:	69fb      	ldr	r3, [r7, #28]
 801d05a:	681b      	ldr	r3, [r3, #0]
 801d05c:	2b00      	cmp	r3, #0
 801d05e:	d006      	beq.n	801d06e <etharp_query+0x1d2>
 801d060:	4b2d      	ldr	r3, [pc, #180]	@ (801d118 <etharp_query+0x27c>)
 801d062:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801d066:	4933      	ldr	r1, [pc, #204]	@ (801d134 <etharp_query+0x298>)
 801d068:	482d      	ldr	r0, [pc, #180]	@ (801d120 <etharp_query+0x284>)
 801d06a:	f003 fb95 	bl	8020798 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801d06e:	69fb      	ldr	r3, [r7, #28]
 801d070:	7b1b      	ldrb	r3, [r3, #12]
 801d072:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801d076:	2b00      	cmp	r3, #0
 801d078:	d002      	beq.n	801d080 <etharp_query+0x1e4>
        copy_needed = 1;
 801d07a:	2301      	movs	r3, #1
 801d07c:	61bb      	str	r3, [r7, #24]
        break;
 801d07e:	e005      	b.n	801d08c <etharp_query+0x1f0>
      }
      p = p->next;
 801d080:	69fb      	ldr	r3, [r7, #28]
 801d082:	681b      	ldr	r3, [r3, #0]
 801d084:	61fb      	str	r3, [r7, #28]
    while (p) {
 801d086:	69fb      	ldr	r3, [r7, #28]
 801d088:	2b00      	cmp	r3, #0
 801d08a:	d1df      	bne.n	801d04c <etharp_query+0x1b0>
    }
    if (copy_needed) {
 801d08c:	69bb      	ldr	r3, [r7, #24]
 801d08e:	2b00      	cmp	r3, #0
 801d090:	d007      	beq.n	801d0a2 <etharp_query+0x206>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801d092:	687a      	ldr	r2, [r7, #4]
 801d094:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801d098:	200e      	movs	r0, #14
 801d09a:	f7f7 ff93 	bl	8014fc4 <pbuf_clone>
 801d09e:	61f8      	str	r0, [r7, #28]
 801d0a0:	e004      	b.n	801d0ac <etharp_query+0x210>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801d0a2:	687b      	ldr	r3, [r7, #4]
 801d0a4:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801d0a6:	69f8      	ldr	r0, [r7, #28]
 801d0a8:	f7f7 fda6 	bl	8014bf8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801d0ac:	69fb      	ldr	r3, [r7, #28]
 801d0ae:	2b00      	cmp	r3, #0
 801d0b0:	d021      	beq.n	801d0f6 <etharp_query+0x25a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801d0b2:	7c7a      	ldrb	r2, [r7, #17]
 801d0b4:	491b      	ldr	r1, [pc, #108]	@ (801d124 <etharp_query+0x288>)
 801d0b6:	4613      	mov	r3, r2
 801d0b8:	005b      	lsls	r3, r3, #1
 801d0ba:	4413      	add	r3, r2
 801d0bc:	00db      	lsls	r3, r3, #3
 801d0be:	440b      	add	r3, r1
 801d0c0:	681b      	ldr	r3, [r3, #0]
 801d0c2:	2b00      	cmp	r3, #0
 801d0c4:	d00a      	beq.n	801d0dc <etharp_query+0x240>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801d0c6:	7c7a      	ldrb	r2, [r7, #17]
 801d0c8:	4916      	ldr	r1, [pc, #88]	@ (801d124 <etharp_query+0x288>)
 801d0ca:	4613      	mov	r3, r2
 801d0cc:	005b      	lsls	r3, r3, #1
 801d0ce:	4413      	add	r3, r2
 801d0d0:	00db      	lsls	r3, r3, #3
 801d0d2:	440b      	add	r3, r1
 801d0d4:	681b      	ldr	r3, [r3, #0]
 801d0d6:	4618      	mov	r0, r3
 801d0d8:	f7f7 fcd0 	bl	8014a7c <pbuf_free>
      }
      arp_table[i].q = p;
 801d0dc:	7c7a      	ldrb	r2, [r7, #17]
 801d0de:	4911      	ldr	r1, [pc, #68]	@ (801d124 <etharp_query+0x288>)
 801d0e0:	4613      	mov	r3, r2
 801d0e2:	005b      	lsls	r3, r3, #1
 801d0e4:	4413      	add	r3, r2
 801d0e6:	00db      	lsls	r3, r3, #3
 801d0e8:	440b      	add	r3, r1
 801d0ea:	69fa      	ldr	r2, [r7, #28]
 801d0ec:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801d0ee:	2300      	movs	r3, #0
 801d0f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801d0f4:	e008      	b.n	801d108 <etharp_query+0x26c>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
 801d0f6:	4b07      	ldr	r3, [pc, #28]	@ (801d114 <etharp_query+0x278>)
 801d0f8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801d0fa:	3301      	adds	r3, #1
 801d0fc:	b29a      	uxth	r2, r3
 801d0fe:	4b05      	ldr	r3, [pc, #20]	@ (801d114 <etharp_query+0x278>)
 801d100:	849a      	strh	r2, [r3, #36]	@ 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801d102:	23ff      	movs	r3, #255	@ 0xff
 801d104:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801d108:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801d10c:	4618      	mov	r0, r3
 801d10e:	3728      	adds	r7, #40	@ 0x28
 801d110:	46bd      	mov	sp, r7
 801d112:	bd80      	pop	{r7, pc}
 801d114:	2002d36c 	.word	0x2002d36c
 801d118:	08025500 	.word	0x08025500
 801d11c:	080256ac 	.word	0x080256ac
 801d120:	08025578 	.word	0x08025578
 801d124:	2002d4d0 	.word	0x2002d4d0
 801d128:	080256bc 	.word	0x080256bc
 801d12c:	080256a0 	.word	0x080256a0
 801d130:	2002d5c0 	.word	0x2002d5c0
 801d134:	080256e4 	.word	0x080256e4

0801d138 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801d138:	b580      	push	{r7, lr}
 801d13a:	b08a      	sub	sp, #40	@ 0x28
 801d13c:	af02      	add	r7, sp, #8
 801d13e:	60f8      	str	r0, [r7, #12]
 801d140:	60b9      	str	r1, [r7, #8]
 801d142:	607a      	str	r2, [r7, #4]
 801d144:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801d146:	2300      	movs	r3, #0
 801d148:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801d14a:	68fb      	ldr	r3, [r7, #12]
 801d14c:	2b00      	cmp	r3, #0
 801d14e:	d106      	bne.n	801d15e <etharp_raw+0x26>
 801d150:	4b40      	ldr	r3, [pc, #256]	@ (801d254 <etharp_raw+0x11c>)
 801d152:	f240 4257 	movw	r2, #1111	@ 0x457
 801d156:	4940      	ldr	r1, [pc, #256]	@ (801d258 <etharp_raw+0x120>)
 801d158:	4840      	ldr	r0, [pc, #256]	@ (801d25c <etharp_raw+0x124>)
 801d15a:	f003 fb1d 	bl	8020798 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801d15e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801d162:	211c      	movs	r1, #28
 801d164:	200e      	movs	r0, #14
 801d166:	f7f7 f95d 	bl	8014424 <pbuf_alloc>
 801d16a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801d16c:	69bb      	ldr	r3, [r7, #24]
 801d16e:	2b00      	cmp	r3, #0
 801d170:	d108      	bne.n	801d184 <etharp_raw+0x4c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
 801d172:	4b3b      	ldr	r3, [pc, #236]	@ (801d260 <etharp_raw+0x128>)
 801d174:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801d176:	3301      	adds	r3, #1
 801d178:	b29a      	uxth	r2, r3
 801d17a:	4b39      	ldr	r3, [pc, #228]	@ (801d260 <etharp_raw+0x128>)
 801d17c:	849a      	strh	r2, [r3, #36]	@ 0x24
    return ERR_MEM;
 801d17e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d182:	e063      	b.n	801d24c <etharp_raw+0x114>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801d184:	69bb      	ldr	r3, [r7, #24]
 801d186:	895b      	ldrh	r3, [r3, #10]
 801d188:	2b1b      	cmp	r3, #27
 801d18a:	d806      	bhi.n	801d19a <etharp_raw+0x62>
 801d18c:	4b31      	ldr	r3, [pc, #196]	@ (801d254 <etharp_raw+0x11c>)
 801d18e:	f240 4262 	movw	r2, #1122	@ 0x462
 801d192:	4934      	ldr	r1, [pc, #208]	@ (801d264 <etharp_raw+0x12c>)
 801d194:	4831      	ldr	r0, [pc, #196]	@ (801d25c <etharp_raw+0x124>)
 801d196:	f003 faff 	bl	8020798 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801d19a:	69bb      	ldr	r3, [r7, #24]
 801d19c:	685b      	ldr	r3, [r3, #4]
 801d19e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801d1a0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801d1a2:	4618      	mov	r0, r3
 801d1a4:	f7f5 fe3c 	bl	8012e20 <lwip_htons>
 801d1a8:	4603      	mov	r3, r0
 801d1aa:	461a      	mov	r2, r3
 801d1ac:	697b      	ldr	r3, [r7, #20]
 801d1ae:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801d1b0:	68fb      	ldr	r3, [r7, #12]
 801d1b2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801d1b6:	2b06      	cmp	r3, #6
 801d1b8:	d006      	beq.n	801d1c8 <etharp_raw+0x90>
 801d1ba:	4b26      	ldr	r3, [pc, #152]	@ (801d254 <etharp_raw+0x11c>)
 801d1bc:	f240 4269 	movw	r2, #1129	@ 0x469
 801d1c0:	4929      	ldr	r1, [pc, #164]	@ (801d268 <etharp_raw+0x130>)
 801d1c2:	4826      	ldr	r0, [pc, #152]	@ (801d25c <etharp_raw+0x124>)
 801d1c4:	f003 fae8 	bl	8020798 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801d1c8:	697b      	ldr	r3, [r7, #20]
 801d1ca:	3308      	adds	r3, #8
 801d1cc:	2206      	movs	r2, #6
 801d1ce:	6839      	ldr	r1, [r7, #0]
 801d1d0:	4618      	mov	r0, r3
 801d1d2:	f003 fd14 	bl	8020bfe <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801d1d6:	697b      	ldr	r3, [r7, #20]
 801d1d8:	3312      	adds	r3, #18
 801d1da:	2206      	movs	r2, #6
 801d1dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801d1de:	4618      	mov	r0, r3
 801d1e0:	f003 fd0d 	bl	8020bfe <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801d1e4:	697b      	ldr	r3, [r7, #20]
 801d1e6:	330e      	adds	r3, #14
 801d1e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d1ea:	6812      	ldr	r2, [r2, #0]
 801d1ec:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801d1ee:	697b      	ldr	r3, [r7, #20]
 801d1f0:	3318      	adds	r3, #24
 801d1f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801d1f4:	6812      	ldr	r2, [r2, #0]
 801d1f6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801d1f8:	697b      	ldr	r3, [r7, #20]
 801d1fa:	2200      	movs	r2, #0
 801d1fc:	701a      	strb	r2, [r3, #0]
 801d1fe:	2200      	movs	r2, #0
 801d200:	f042 0201 	orr.w	r2, r2, #1
 801d204:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801d206:	697b      	ldr	r3, [r7, #20]
 801d208:	2200      	movs	r2, #0
 801d20a:	f042 0208 	orr.w	r2, r2, #8
 801d20e:	709a      	strb	r2, [r3, #2]
 801d210:	2200      	movs	r2, #0
 801d212:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801d214:	697b      	ldr	r3, [r7, #20]
 801d216:	2206      	movs	r2, #6
 801d218:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801d21a:	697b      	ldr	r3, [r7, #20]
 801d21c:	2204      	movs	r2, #4
 801d21e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801d220:	f640 0306 	movw	r3, #2054	@ 0x806
 801d224:	9300      	str	r3, [sp, #0]
 801d226:	687b      	ldr	r3, [r7, #4]
 801d228:	68ba      	ldr	r2, [r7, #8]
 801d22a:	69b9      	ldr	r1, [r7, #24]
 801d22c:	68f8      	ldr	r0, [r7, #12]
 801d22e:	f001 fda7 	bl	801ed80 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 801d232:	4b0b      	ldr	r3, [pc, #44]	@ (801d260 <etharp_raw+0x128>)
 801d234:	8b1b      	ldrh	r3, [r3, #24]
 801d236:	3301      	adds	r3, #1
 801d238:	b29a      	uxth	r2, r3
 801d23a:	4b09      	ldr	r3, [pc, #36]	@ (801d260 <etharp_raw+0x128>)
 801d23c:	831a      	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
 801d23e:	69b8      	ldr	r0, [r7, #24]
 801d240:	f7f7 fc1c 	bl	8014a7c <pbuf_free>
  p = NULL;
 801d244:	2300      	movs	r3, #0
 801d246:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801d248:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d24c:	4618      	mov	r0, r3
 801d24e:	3720      	adds	r7, #32
 801d250:	46bd      	mov	sp, r7
 801d252:	bd80      	pop	{r7, pc}
 801d254:	08025500 	.word	0x08025500
 801d258:	08025650 	.word	0x08025650
 801d25c:	08025578 	.word	0x08025578
 801d260:	2002d36c 	.word	0x2002d36c
 801d264:	08025700 	.word	0x08025700
 801d268:	08025734 	.word	0x08025734

0801d26c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801d26c:	b580      	push	{r7, lr}
 801d26e:	b088      	sub	sp, #32
 801d270:	af04      	add	r7, sp, #16
 801d272:	60f8      	str	r0, [r7, #12]
 801d274:	60b9      	str	r1, [r7, #8]
 801d276:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d278:	68fb      	ldr	r3, [r7, #12]
 801d27a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801d27e:	68fb      	ldr	r3, [r7, #12]
 801d280:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801d284:	68fb      	ldr	r3, [r7, #12]
 801d286:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d288:	2201      	movs	r2, #1
 801d28a:	9203      	str	r2, [sp, #12]
 801d28c:	68ba      	ldr	r2, [r7, #8]
 801d28e:	9202      	str	r2, [sp, #8]
 801d290:	4a06      	ldr	r2, [pc, #24]	@ (801d2ac <etharp_request_dst+0x40>)
 801d292:	9201      	str	r2, [sp, #4]
 801d294:	9300      	str	r3, [sp, #0]
 801d296:	4603      	mov	r3, r0
 801d298:	687a      	ldr	r2, [r7, #4]
 801d29a:	68f8      	ldr	r0, [r7, #12]
 801d29c:	f7ff ff4c 	bl	801d138 <etharp_raw>
 801d2a0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801d2a2:	4618      	mov	r0, r3
 801d2a4:	3710      	adds	r7, #16
 801d2a6:	46bd      	mov	sp, r7
 801d2a8:	bd80      	pop	{r7, pc}
 801d2aa:	bf00      	nop
 801d2ac:	08026890 	.word	0x08026890

0801d2b0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801d2b0:	b580      	push	{r7, lr}
 801d2b2:	b082      	sub	sp, #8
 801d2b4:	af00      	add	r7, sp, #0
 801d2b6:	6078      	str	r0, [r7, #4]
 801d2b8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801d2ba:	4a05      	ldr	r2, [pc, #20]	@ (801d2d0 <etharp_request+0x20>)
 801d2bc:	6839      	ldr	r1, [r7, #0]
 801d2be:	6878      	ldr	r0, [r7, #4]
 801d2c0:	f7ff ffd4 	bl	801d26c <etharp_request_dst>
 801d2c4:	4603      	mov	r3, r0
}
 801d2c6:	4618      	mov	r0, r3
 801d2c8:	3708      	adds	r7, #8
 801d2ca:	46bd      	mov	sp, r7
 801d2cc:	bd80      	pop	{r7, pc}
 801d2ce:	bf00      	nop
 801d2d0:	08026888 	.word	0x08026888

0801d2d4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801d2d4:	b580      	push	{r7, lr}
 801d2d6:	b08e      	sub	sp, #56	@ 0x38
 801d2d8:	af04      	add	r7, sp, #16
 801d2da:	6078      	str	r0, [r7, #4]
 801d2dc:	6039      	str	r1, [r7, #0]
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
 801d2de:	4ba5      	ldr	r3, [pc, #660]	@ (801d574 <icmp_input+0x2a0>)
 801d2e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801d2e4:	3301      	adds	r3, #1
 801d2e6:	b29a      	uxth	r2, r3
 801d2e8:	4ba2      	ldr	r3, [pc, #648]	@ (801d574 <icmp_input+0x2a0>)
 801d2ea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801d2ee:	4ba2      	ldr	r3, [pc, #648]	@ (801d578 <icmp_input+0x2a4>)
 801d2f0:	689b      	ldr	r3, [r3, #8]
 801d2f2:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801d2f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d2f6:	781b      	ldrb	r3, [r3, #0]
 801d2f8:	f003 030f 	and.w	r3, r3, #15
 801d2fc:	b2db      	uxtb	r3, r3
 801d2fe:	009b      	lsls	r3, r3, #2
 801d300:	b2db      	uxtb	r3, r3
 801d302:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801d304:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d306:	2b13      	cmp	r3, #19
 801d308:	d805      	bhi.n	801d316 <icmp_input+0x42>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
 801d30a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d30c:	4619      	mov	r1, r3
 801d30e:	489b      	ldr	r0, [pc, #620]	@ (801d57c <icmp_input+0x2a8>)
 801d310:	f003 fa42 	bl	8020798 <iprintf>
    goto lenerr;
 801d314:	e122      	b.n	801d55c <icmp_input+0x288>
  }
  if (p->len < sizeof(u16_t) * 2) {
 801d316:	687b      	ldr	r3, [r7, #4]
 801d318:	895b      	ldrh	r3, [r3, #10]
 801d31a:	2b03      	cmp	r3, #3
 801d31c:	d806      	bhi.n	801d32c <icmp_input+0x58>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
 801d31e:	687b      	ldr	r3, [r7, #4]
 801d320:	891b      	ldrh	r3, [r3, #8]
 801d322:	4619      	mov	r1, r3
 801d324:	4896      	ldr	r0, [pc, #600]	@ (801d580 <icmp_input+0x2ac>)
 801d326:	f003 fa37 	bl	8020798 <iprintf>
    goto lenerr;
 801d32a:	e117      	b.n	801d55c <icmp_input+0x288>
  }

  type = *((u8_t *)p->payload);
 801d32c:	687b      	ldr	r3, [r7, #4]
 801d32e:	685b      	ldr	r3, [r3, #4]
 801d330:	781b      	ldrb	r3, [r3, #0]
 801d332:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 801d336:	687b      	ldr	r3, [r7, #4]
 801d338:	685b      	ldr	r3, [r3, #4]
 801d33a:	785b      	ldrb	r3, [r3, #1]
 801d33c:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801d340:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801d344:	2b00      	cmp	r3, #0
 801d346:	f000 8102 	beq.w	801d54e <icmp_input+0x27a>
 801d34a:	2b08      	cmp	r3, #8
 801d34c:	f040 80e6 	bne.w	801d51c <icmp_input+0x248>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801d350:	4b8c      	ldr	r3, [pc, #560]	@ (801d584 <icmp_input+0x2b0>)
 801d352:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801d354:	4b88      	ldr	r3, [pc, #544]	@ (801d578 <icmp_input+0x2a4>)
 801d356:	695b      	ldr	r3, [r3, #20]
 801d358:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801d35c:	2be0      	cmp	r3, #224	@ 0xe0
 801d35e:	d103      	bne.n	801d368 <icmp_input+0x94>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_MULTICAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
 801d360:	4889      	ldr	r0, [pc, #548]	@ (801d588 <icmp_input+0x2b4>)
 801d362:	f003 fa89 	bl	8020878 <puts>
        goto icmperr;
 801d366:	e12d      	b.n	801d5c4 <icmp_input+0x2f0>
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801d368:	4b83      	ldr	r3, [pc, #524]	@ (801d578 <icmp_input+0x2a4>)
 801d36a:	695b      	ldr	r3, [r3, #20]
 801d36c:	4a82      	ldr	r2, [pc, #520]	@ (801d578 <icmp_input+0x2a4>)
 801d36e:	6812      	ldr	r2, [r2, #0]
 801d370:	4611      	mov	r1, r2
 801d372:	4618      	mov	r0, r3
 801d374:	f000 fd14 	bl	801dda0 <ip4_addr_isbroadcast_u32>
 801d378:	4603      	mov	r3, r0
 801d37a:	2b00      	cmp	r3, #0
 801d37c:	d003      	beq.n	801d386 <icmp_input+0xb2>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_BROADCAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
 801d37e:	4883      	ldr	r0, [pc, #524]	@ (801d58c <icmp_input+0x2b8>)
 801d380:	f003 fa7a 	bl	8020878 <puts>
        goto icmperr;
 801d384:	e11e      	b.n	801d5c4 <icmp_input+0x2f0>
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
 801d386:	4882      	ldr	r0, [pc, #520]	@ (801d590 <icmp_input+0x2bc>)
 801d388:	f003 fa76 	bl	8020878 <puts>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801d38c:	687b      	ldr	r3, [r7, #4]
 801d38e:	891b      	ldrh	r3, [r3, #8]
 801d390:	2b07      	cmp	r3, #7
 801d392:	d803      	bhi.n	801d39c <icmp_input+0xc8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
 801d394:	487f      	ldr	r0, [pc, #508]	@ (801d594 <icmp_input+0x2c0>)
 801d396:	f003 fa6f 	bl	8020878 <puts>
        goto lenerr;
 801d39a:	e0df      	b.n	801d55c <icmp_input+0x288>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801d39c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d39e:	330e      	adds	r3, #14
 801d3a0:	4619      	mov	r1, r3
 801d3a2:	6878      	ldr	r0, [r7, #4]
 801d3a4:	f7f7 facc 	bl	8014940 <pbuf_add_header>
 801d3a8:	4603      	mov	r3, r0
 801d3aa:	2b00      	cmp	r3, #0
 801d3ac:	d057      	beq.n	801d45e <icmp_input+0x18a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801d3ae:	687b      	ldr	r3, [r7, #4]
 801d3b0:	891a      	ldrh	r2, [r3, #8]
 801d3b2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d3b4:	4413      	add	r3, r2
 801d3b6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801d3b8:	687b      	ldr	r3, [r7, #4]
 801d3ba:	891b      	ldrh	r3, [r3, #8]
 801d3bc:	8b7a      	ldrh	r2, [r7, #26]
 801d3be:	429a      	cmp	r2, r3
 801d3c0:	d203      	bcs.n	801d3ca <icmp_input+0xf6>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
 801d3c2:	4875      	ldr	r0, [pc, #468]	@ (801d598 <icmp_input+0x2c4>)
 801d3c4:	f003 fa58 	bl	8020878 <puts>
          goto icmperr;
 801d3c8:	e0fc      	b.n	801d5c4 <icmp_input+0x2f0>
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801d3ca:	8b7b      	ldrh	r3, [r7, #26]
 801d3cc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801d3d0:	4619      	mov	r1, r3
 801d3d2:	200e      	movs	r0, #14
 801d3d4:	f7f7 f826 	bl	8014424 <pbuf_alloc>
 801d3d8:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801d3da:	697b      	ldr	r3, [r7, #20]
 801d3dc:	2b00      	cmp	r3, #0
 801d3de:	d103      	bne.n	801d3e8 <icmp_input+0x114>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
 801d3e0:	486e      	ldr	r0, [pc, #440]	@ (801d59c <icmp_input+0x2c8>)
 801d3e2:	f003 fa49 	bl	8020878 <puts>
          goto icmperr;
 801d3e6:	e0ed      	b.n	801d5c4 <icmp_input+0x2f0>
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801d3e8:	697b      	ldr	r3, [r7, #20]
 801d3ea:	895b      	ldrh	r3, [r3, #10]
 801d3ec:	461a      	mov	r2, r3
 801d3ee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d3f0:	3308      	adds	r3, #8
 801d3f2:	429a      	cmp	r2, r3
 801d3f4:	d206      	bcs.n	801d404 <icmp_input+0x130>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
 801d3f6:	486a      	ldr	r0, [pc, #424]	@ (801d5a0 <icmp_input+0x2cc>)
 801d3f8:	f003 f9ce 	bl	8020798 <iprintf>
          pbuf_free(r);
 801d3fc:	6978      	ldr	r0, [r7, #20]
 801d3fe:	f7f7 fb3d 	bl	8014a7c <pbuf_free>
          goto icmperr;
 801d402:	e0df      	b.n	801d5c4 <icmp_input+0x2f0>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801d404:	697b      	ldr	r3, [r7, #20]
 801d406:	685b      	ldr	r3, [r3, #4]
 801d408:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801d40a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801d40c:	4618      	mov	r0, r3
 801d40e:	f003 fbf6 	bl	8020bfe <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801d412:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d414:	4619      	mov	r1, r3
 801d416:	6978      	ldr	r0, [r7, #20]
 801d418:	f7f7 faa2 	bl	8014960 <pbuf_remove_header>
 801d41c:	4603      	mov	r3, r0
 801d41e:	2b00      	cmp	r3, #0
 801d420:	d009      	beq.n	801d436 <icmp_input+0x162>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801d422:	4b60      	ldr	r3, [pc, #384]	@ (801d5a4 <icmp_input+0x2d0>)
 801d424:	22b6      	movs	r2, #182	@ 0xb6
 801d426:	4960      	ldr	r1, [pc, #384]	@ (801d5a8 <icmp_input+0x2d4>)
 801d428:	4860      	ldr	r0, [pc, #384]	@ (801d5ac <icmp_input+0x2d8>)
 801d42a:	f003 f9b5 	bl	8020798 <iprintf>
          pbuf_free(r);
 801d42e:	6978      	ldr	r0, [r7, #20]
 801d430:	f7f7 fb24 	bl	8014a7c <pbuf_free>
          goto icmperr;
 801d434:	e0c6      	b.n	801d5c4 <icmp_input+0x2f0>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801d436:	6879      	ldr	r1, [r7, #4]
 801d438:	6978      	ldr	r0, [r7, #20]
 801d43a:	f7f7 fc73 	bl	8014d24 <pbuf_copy>
 801d43e:	4603      	mov	r3, r0
 801d440:	2b00      	cmp	r3, #0
 801d442:	d006      	beq.n	801d452 <icmp_input+0x17e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
 801d444:	485a      	ldr	r0, [pc, #360]	@ (801d5b0 <icmp_input+0x2dc>)
 801d446:	f003 f9a7 	bl	8020798 <iprintf>
          pbuf_free(r);
 801d44a:	6978      	ldr	r0, [r7, #20]
 801d44c:	f7f7 fb16 	bl	8014a7c <pbuf_free>
          goto icmperr;
 801d450:	e0b8      	b.n	801d5c4 <icmp_input+0x2f0>
        }
        /* free the original p */
        pbuf_free(p);
 801d452:	6878      	ldr	r0, [r7, #4]
 801d454:	f7f7 fb12 	bl	8014a7c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801d458:	697b      	ldr	r3, [r7, #20]
 801d45a:	607b      	str	r3, [r7, #4]
 801d45c:	e00f      	b.n	801d47e <icmp_input+0x1aa>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801d45e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d460:	330e      	adds	r3, #14
 801d462:	4619      	mov	r1, r3
 801d464:	6878      	ldr	r0, [r7, #4]
 801d466:	f7f7 fa7b 	bl	8014960 <pbuf_remove_header>
 801d46a:	4603      	mov	r3, r0
 801d46c:	2b00      	cmp	r3, #0
 801d46e:	d006      	beq.n	801d47e <icmp_input+0x1aa>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801d470:	4b4c      	ldr	r3, [pc, #304]	@ (801d5a4 <icmp_input+0x2d0>)
 801d472:	22c7      	movs	r2, #199	@ 0xc7
 801d474:	494f      	ldr	r1, [pc, #316]	@ (801d5b4 <icmp_input+0x2e0>)
 801d476:	484d      	ldr	r0, [pc, #308]	@ (801d5ac <icmp_input+0x2d8>)
 801d478:	f003 f98e 	bl	8020798 <iprintf>
          goto icmperr;
 801d47c:	e0a2      	b.n	801d5c4 <icmp_input+0x2f0>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801d47e:	687b      	ldr	r3, [r7, #4]
 801d480:	685b      	ldr	r3, [r3, #4]
 801d482:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801d484:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d486:	4619      	mov	r1, r3
 801d488:	6878      	ldr	r0, [r7, #4]
 801d48a:	f7f7 fa59 	bl	8014940 <pbuf_add_header>
 801d48e:	4603      	mov	r3, r0
 801d490:	2b00      	cmp	r3, #0
 801d492:	d003      	beq.n	801d49c <icmp_input+0x1c8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
 801d494:	4848      	ldr	r0, [pc, #288]	@ (801d5b8 <icmp_input+0x2e4>)
 801d496:	f003 f97f 	bl	8020798 <iprintf>
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801d49a:	e05a      	b.n	801d552 <icmp_input+0x27e>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801d49c:	687b      	ldr	r3, [r7, #4]
 801d49e:	685b      	ldr	r3, [r3, #4]
 801d4a0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801d4a2:	69fb      	ldr	r3, [r7, #28]
 801d4a4:	681a      	ldr	r2, [r3, #0]
 801d4a6:	68fb      	ldr	r3, [r7, #12]
 801d4a8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801d4aa:	4b33      	ldr	r3, [pc, #204]	@ (801d578 <icmp_input+0x2a4>)
 801d4ac:	691a      	ldr	r2, [r3, #16]
 801d4ae:	68fb      	ldr	r3, [r7, #12]
 801d4b0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801d4b2:	693b      	ldr	r3, [r7, #16]
 801d4b4:	2200      	movs	r2, #0
 801d4b6:	701a      	strb	r2, [r3, #0]
        iecho->chksum = 0;
 801d4b8:	693b      	ldr	r3, [r7, #16]
 801d4ba:	2200      	movs	r2, #0
 801d4bc:	709a      	strb	r2, [r3, #2]
 801d4be:	2200      	movs	r2, #0
 801d4c0:	70da      	strb	r2, [r3, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801d4c2:	68fb      	ldr	r3, [r7, #12]
 801d4c4:	22ff      	movs	r2, #255	@ 0xff
 801d4c6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801d4c8:	68fb      	ldr	r3, [r7, #12]
 801d4ca:	2200      	movs	r2, #0
 801d4cc:	729a      	strb	r2, [r3, #10]
 801d4ce:	2200      	movs	r2, #0
 801d4d0:	72da      	strb	r2, [r3, #11]
        ICMP_STATS_INC(icmp.xmit);
 801d4d2:	4b28      	ldr	r3, [pc, #160]	@ (801d574 <icmp_input+0x2a0>)
 801d4d4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801d4d8:	3301      	adds	r3, #1
 801d4da:	b29a      	uxth	r2, r3
 801d4dc:	4b25      	ldr	r3, [pc, #148]	@ (801d574 <icmp_input+0x2a0>)
 801d4de:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801d4e2:	683b      	ldr	r3, [r7, #0]
 801d4e4:	9302      	str	r3, [sp, #8]
 801d4e6:	2301      	movs	r3, #1
 801d4e8:	9301      	str	r3, [sp, #4]
 801d4ea:	2300      	movs	r3, #0
 801d4ec:	9300      	str	r3, [sp, #0]
 801d4ee:	23ff      	movs	r3, #255	@ 0xff
 801d4f0:	2200      	movs	r2, #0
 801d4f2:	69f9      	ldr	r1, [r7, #28]
 801d4f4:	6878      	ldr	r0, [r7, #4]
 801d4f6:	f000 fb61 	bl	801dbbc <ip4_output_if>
 801d4fa:	4603      	mov	r3, r0
 801d4fc:	72fb      	strb	r3, [r7, #11]
        if (ret != ERR_OK) {
 801d4fe:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801d502:	2b00      	cmp	r3, #0
 801d504:	d025      	beq.n	801d552 <icmp_input+0x27e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
 801d506:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801d50a:	4618      	mov	r0, r3
 801d50c:	f7f5 f9e8 	bl	80128e0 <lwip_strerr>
 801d510:	4603      	mov	r3, r0
 801d512:	4619      	mov	r1, r3
 801d514:	4829      	ldr	r0, [pc, #164]	@ (801d5bc <icmp_input+0x2e8>)
 801d516:	f003 f93f 	bl	8020798 <iprintf>
      break;
 801d51a:	e01a      	b.n	801d552 <icmp_input+0x27e>
      } else if (type == ICMP_AM) {
        MIB2_STATS_INC(mib2.icmpinaddrmasks);
      } else if (type == ICMP_AMR) {
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
 801d51c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801d520:	f897 2020 	ldrb.w	r2, [r7, #32]
 801d524:	4619      	mov	r1, r3
 801d526:	4826      	ldr	r0, [pc, #152]	@ (801d5c0 <icmp_input+0x2ec>)
 801d528:	f003 f936 	bl	8020798 <iprintf>
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
 801d52c:	4b11      	ldr	r3, [pc, #68]	@ (801d574 <icmp_input+0x2a0>)
 801d52e:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 801d532:	3301      	adds	r3, #1
 801d534:	b29a      	uxth	r2, r3
 801d536:	4b0f      	ldr	r3, [pc, #60]	@ (801d574 <icmp_input+0x2a0>)
 801d538:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
      ICMP_STATS_INC(icmp.drop);
 801d53c:	4b0d      	ldr	r3, [pc, #52]	@ (801d574 <icmp_input+0x2a0>)
 801d53e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801d542:	3301      	adds	r3, #1
 801d544:	b29a      	uxth	r2, r3
 801d546:	4b0b      	ldr	r3, [pc, #44]	@ (801d574 <icmp_input+0x2a0>)
 801d548:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
 801d54c:	e002      	b.n	801d554 <icmp_input+0x280>
      break;
 801d54e:	bf00      	nop
 801d550:	e000      	b.n	801d554 <icmp_input+0x280>
      break;
 801d552:	bf00      	nop
  }
  pbuf_free(p);
 801d554:	6878      	ldr	r0, [r7, #4]
 801d556:	f7f7 fa91 	bl	8014a7c <pbuf_free>
  return;
 801d55a:	e03f      	b.n	801d5dc <icmp_input+0x308>
lenerr:
  pbuf_free(p);
 801d55c:	6878      	ldr	r0, [r7, #4]
 801d55e:	f7f7 fa8d 	bl	8014a7c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 801d562:	4b04      	ldr	r3, [pc, #16]	@ (801d574 <icmp_input+0x2a0>)
 801d564:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801d568:	3301      	adds	r3, #1
 801d56a:	b29a      	uxth	r2, r3
 801d56c:	4b01      	ldr	r3, [pc, #4]	@ (801d574 <icmp_input+0x2a0>)
 801d56e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801d572:	e033      	b.n	801d5dc <icmp_input+0x308>
 801d574:	2002d36c 	.word	0x2002d36c
 801d578:	200270fc 	.word	0x200270fc
 801d57c:	08025778 	.word	0x08025778
 801d580:	080257ac 	.word	0x080257ac
 801d584:	20027110 	.word	0x20027110
 801d588:	080257dc 	.word	0x080257dc
 801d58c:	08025808 	.word	0x08025808
 801d590:	08025834 	.word	0x08025834
 801d594:	08025848 	.word	0x08025848
 801d598:	0802586c 	.word	0x0802586c
 801d59c:	080258a8 	.word	0x080258a8
 801d5a0:	080258d0 	.word	0x080258d0
 801d5a4:	080258f8 	.word	0x080258f8
 801d5a8:	08025930 	.word	0x08025930
 801d5ac:	08025968 	.word	0x08025968
 801d5b0:	08025990 	.word	0x08025990
 801d5b4:	080259b8 	.word	0x080259b8
 801d5b8:	080259ec 	.word	0x080259ec
 801d5bc:	08025a10 	.word	0x08025a10
 801d5c0:	08025a40 	.word	0x08025a40
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801d5c4:	6878      	ldr	r0, [r7, #4]
 801d5c6:	f7f7 fa59 	bl	8014a7c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 801d5ca:	4b06      	ldr	r3, [pc, #24]	@ (801d5e4 <icmp_input+0x310>)
 801d5cc:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 801d5d0:	3301      	adds	r3, #1
 801d5d2:	b29a      	uxth	r2, r3
 801d5d4:	4b03      	ldr	r3, [pc, #12]	@ (801d5e4 <icmp_input+0x310>)
 801d5d6:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801d5da:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801d5dc:	3728      	adds	r7, #40	@ 0x28
 801d5de:	46bd      	mov	sp, r7
 801d5e0:	bd80      	pop	{r7, pc}
 801d5e2:	bf00      	nop
 801d5e4:	2002d36c 	.word	0x2002d36c

0801d5e8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801d5e8:	b580      	push	{r7, lr}
 801d5ea:	b082      	sub	sp, #8
 801d5ec:	af00      	add	r7, sp, #0
 801d5ee:	6078      	str	r0, [r7, #4]
 801d5f0:	460b      	mov	r3, r1
 801d5f2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801d5f4:	78fb      	ldrb	r3, [r7, #3]
 801d5f6:	461a      	mov	r2, r3
 801d5f8:	2103      	movs	r1, #3
 801d5fa:	6878      	ldr	r0, [r7, #4]
 801d5fc:	f000 f814 	bl	801d628 <icmp_send_response>
}
 801d600:	bf00      	nop
 801d602:	3708      	adds	r7, #8
 801d604:	46bd      	mov	sp, r7
 801d606:	bd80      	pop	{r7, pc}

0801d608 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801d608:	b580      	push	{r7, lr}
 801d60a:	b082      	sub	sp, #8
 801d60c:	af00      	add	r7, sp, #0
 801d60e:	6078      	str	r0, [r7, #4]
 801d610:	460b      	mov	r3, r1
 801d612:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801d614:	78fb      	ldrb	r3, [r7, #3]
 801d616:	461a      	mov	r2, r3
 801d618:	210b      	movs	r1, #11
 801d61a:	6878      	ldr	r0, [r7, #4]
 801d61c:	f000 f804 	bl	801d628 <icmp_send_response>
}
 801d620:	bf00      	nop
 801d622:	3708      	adds	r7, #8
 801d624:	46bd      	mov	sp, r7
 801d626:	bd80      	pop	{r7, pc}

0801d628 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801d628:	b580      	push	{r7, lr}
 801d62a:	b08c      	sub	sp, #48	@ 0x30
 801d62c:	af04      	add	r7, sp, #16
 801d62e:	6078      	str	r0, [r7, #4]
 801d630:	460b      	mov	r3, r1
 801d632:	70fb      	strb	r3, [r7, #3]
 801d634:	4613      	mov	r3, r2
 801d636:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801d638:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801d63c:	2124      	movs	r1, #36	@ 0x24
 801d63e:	2022      	movs	r0, #34	@ 0x22
 801d640:	f7f6 fef0 	bl	8014424 <pbuf_alloc>
 801d644:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801d646:	69fb      	ldr	r3, [r7, #28]
 801d648:	2b00      	cmp	r3, #0
 801d64a:	d103      	bne.n	801d654 <icmp_send_response+0x2c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
 801d64c:	4848      	ldr	r0, [pc, #288]	@ (801d770 <icmp_send_response+0x148>)
 801d64e:	f003 f913 	bl	8020878 <puts>
 801d652:	e08a      	b.n	801d76a <icmp_send_response+0x142>
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801d654:	69fb      	ldr	r3, [r7, #28]
 801d656:	895b      	ldrh	r3, [r3, #10]
 801d658:	2b23      	cmp	r3, #35	@ 0x23
 801d65a:	d806      	bhi.n	801d66a <icmp_send_response+0x42>
 801d65c:	4b45      	ldr	r3, [pc, #276]	@ (801d774 <icmp_send_response+0x14c>)
 801d65e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801d662:	4945      	ldr	r1, [pc, #276]	@ (801d778 <icmp_send_response+0x150>)
 801d664:	4845      	ldr	r0, [pc, #276]	@ (801d77c <icmp_send_response+0x154>)
 801d666:	f003 f897 	bl	8020798 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801d66a:	687b      	ldr	r3, [r7, #4]
 801d66c:	685b      	ldr	r3, [r3, #4]
 801d66e:	61bb      	str	r3, [r7, #24]
  LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded from "));
 801d670:	4843      	ldr	r0, [pc, #268]	@ (801d780 <icmp_send_response+0x158>)
 801d672:	f003 f891 	bl	8020798 <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
 801d676:	69bb      	ldr	r3, [r7, #24]
 801d678:	68db      	ldr	r3, [r3, #12]
 801d67a:	b2db      	uxtb	r3, r3
 801d67c:	4619      	mov	r1, r3
 801d67e:	69bb      	ldr	r3, [r7, #24]
 801d680:	68db      	ldr	r3, [r3, #12]
 801d682:	0a1b      	lsrs	r3, r3, #8
 801d684:	b2db      	uxtb	r3, r3
 801d686:	461a      	mov	r2, r3
 801d688:	69bb      	ldr	r3, [r7, #24]
 801d68a:	68db      	ldr	r3, [r3, #12]
 801d68c:	0c1b      	lsrs	r3, r3, #16
 801d68e:	b2db      	uxtb	r3, r3
 801d690:	4618      	mov	r0, r3
 801d692:	69bb      	ldr	r3, [r7, #24]
 801d694:	68db      	ldr	r3, [r3, #12]
 801d696:	0e1b      	lsrs	r3, r3, #24
 801d698:	b2db      	uxtb	r3, r3
 801d69a:	9300      	str	r3, [sp, #0]
 801d69c:	4603      	mov	r3, r0
 801d69e:	4839      	ldr	r0, [pc, #228]	@ (801d784 <icmp_send_response+0x15c>)
 801d6a0:	f003 f87a 	bl	8020798 <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
 801d6a4:	4838      	ldr	r0, [pc, #224]	@ (801d788 <icmp_send_response+0x160>)
 801d6a6:	f003 f877 	bl	8020798 <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
 801d6aa:	69bb      	ldr	r3, [r7, #24]
 801d6ac:	691b      	ldr	r3, [r3, #16]
 801d6ae:	b2db      	uxtb	r3, r3
 801d6b0:	4619      	mov	r1, r3
 801d6b2:	69bb      	ldr	r3, [r7, #24]
 801d6b4:	691b      	ldr	r3, [r3, #16]
 801d6b6:	0a1b      	lsrs	r3, r3, #8
 801d6b8:	b2db      	uxtb	r3, r3
 801d6ba:	461a      	mov	r2, r3
 801d6bc:	69bb      	ldr	r3, [r7, #24]
 801d6be:	691b      	ldr	r3, [r3, #16]
 801d6c0:	0c1b      	lsrs	r3, r3, #16
 801d6c2:	b2db      	uxtb	r3, r3
 801d6c4:	4618      	mov	r0, r3
 801d6c6:	69bb      	ldr	r3, [r7, #24]
 801d6c8:	691b      	ldr	r3, [r3, #16]
 801d6ca:	0e1b      	lsrs	r3, r3, #24
 801d6cc:	b2db      	uxtb	r3, r3
 801d6ce:	9300      	str	r3, [sp, #0]
 801d6d0:	4603      	mov	r3, r0
 801d6d2:	482c      	ldr	r0, [pc, #176]	@ (801d784 <icmp_send_response+0x15c>)
 801d6d4:	f003 f860 	bl	8020798 <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));
 801d6d8:	200a      	movs	r0, #10
 801d6da:	f003 f86f 	bl	80207bc <putchar>

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801d6de:	69fb      	ldr	r3, [r7, #28]
 801d6e0:	685b      	ldr	r3, [r3, #4]
 801d6e2:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801d6e4:	697b      	ldr	r3, [r7, #20]
 801d6e6:	78fa      	ldrb	r2, [r7, #3]
 801d6e8:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801d6ea:	697b      	ldr	r3, [r7, #20]
 801d6ec:	78ba      	ldrb	r2, [r7, #2]
 801d6ee:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801d6f0:	697b      	ldr	r3, [r7, #20]
 801d6f2:	2200      	movs	r2, #0
 801d6f4:	711a      	strb	r2, [r3, #4]
 801d6f6:	2200      	movs	r2, #0
 801d6f8:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801d6fa:	697b      	ldr	r3, [r7, #20]
 801d6fc:	2200      	movs	r2, #0
 801d6fe:	719a      	strb	r2, [r3, #6]
 801d700:	2200      	movs	r2, #0
 801d702:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801d704:	69fb      	ldr	r3, [r7, #28]
 801d706:	685b      	ldr	r3, [r3, #4]
 801d708:	f103 0008 	add.w	r0, r3, #8
 801d70c:	687b      	ldr	r3, [r7, #4]
 801d70e:	685b      	ldr	r3, [r3, #4]
 801d710:	221c      	movs	r2, #28
 801d712:	4619      	mov	r1, r3
 801d714:	f003 fa73 	bl	8020bfe <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801d718:	69bb      	ldr	r3, [r7, #24]
 801d71a:	68db      	ldr	r3, [r3, #12]
 801d71c:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801d71e:	f107 030c 	add.w	r3, r7, #12
 801d722:	4618      	mov	r0, r3
 801d724:	f000 f834 	bl	801d790 <ip4_route>
 801d728:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801d72a:	693b      	ldr	r3, [r7, #16]
 801d72c:	2b00      	cmp	r3, #0
 801d72e:	d019      	beq.n	801d764 <icmp_send_response+0x13c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801d730:	697b      	ldr	r3, [r7, #20]
 801d732:	2200      	movs	r2, #0
 801d734:	709a      	strb	r2, [r3, #2]
 801d736:	2200      	movs	r2, #0
 801d738:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 801d73a:	4b14      	ldr	r3, [pc, #80]	@ (801d78c <icmp_send_response+0x164>)
 801d73c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801d740:	3301      	adds	r3, #1
 801d742:	b29a      	uxth	r2, r3
 801d744:	4b11      	ldr	r3, [pc, #68]	@ (801d78c <icmp_send_response+0x164>)
 801d746:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801d74a:	f107 020c 	add.w	r2, r7, #12
 801d74e:	693b      	ldr	r3, [r7, #16]
 801d750:	9302      	str	r3, [sp, #8]
 801d752:	2301      	movs	r3, #1
 801d754:	9301      	str	r3, [sp, #4]
 801d756:	2300      	movs	r3, #0
 801d758:	9300      	str	r3, [sp, #0]
 801d75a:	23ff      	movs	r3, #255	@ 0xff
 801d75c:	2100      	movs	r1, #0
 801d75e:	69f8      	ldr	r0, [r7, #28]
 801d760:	f000 fa2c 	bl	801dbbc <ip4_output_if>
  }
  pbuf_free(q);
 801d764:	69f8      	ldr	r0, [r7, #28]
 801d766:	f7f7 f989 	bl	8014a7c <pbuf_free>
}
 801d76a:	3720      	adds	r7, #32
 801d76c:	46bd      	mov	sp, r7
 801d76e:	bd80      	pop	{r7, pc}
 801d770:	08025a74 	.word	0x08025a74
 801d774:	080258f8 	.word	0x080258f8
 801d778:	08025ab4 	.word	0x08025ab4
 801d77c:	08025968 	.word	0x08025968
 801d780:	08025ae0 	.word	0x08025ae0
 801d784:	08025afc 	.word	0x08025afc
 801d788:	08025b0c 	.word	0x08025b0c
 801d78c:	2002d36c 	.word	0x2002d36c

0801d790 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801d790:	b480      	push	{r7}
 801d792:	b085      	sub	sp, #20
 801d794:	af00      	add	r7, sp, #0
 801d796:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801d798:	4b37      	ldr	r3, [pc, #220]	@ (801d878 <ip4_route+0xe8>)
 801d79a:	681b      	ldr	r3, [r3, #0]
 801d79c:	60fb      	str	r3, [r7, #12]
 801d79e:	e036      	b.n	801d80e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801d7a0:	68fb      	ldr	r3, [r7, #12]
 801d7a2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d7a6:	f003 0301 	and.w	r3, r3, #1
 801d7aa:	b2db      	uxtb	r3, r3
 801d7ac:	2b00      	cmp	r3, #0
 801d7ae:	d02b      	beq.n	801d808 <ip4_route+0x78>
 801d7b0:	68fb      	ldr	r3, [r7, #12]
 801d7b2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d7b6:	089b      	lsrs	r3, r3, #2
 801d7b8:	f003 0301 	and.w	r3, r3, #1
 801d7bc:	b2db      	uxtb	r3, r3
 801d7be:	2b00      	cmp	r3, #0
 801d7c0:	d022      	beq.n	801d808 <ip4_route+0x78>
 801d7c2:	68fb      	ldr	r3, [r7, #12]
 801d7c4:	3304      	adds	r3, #4
 801d7c6:	681b      	ldr	r3, [r3, #0]
 801d7c8:	2b00      	cmp	r3, #0
 801d7ca:	d01d      	beq.n	801d808 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801d7cc:	687b      	ldr	r3, [r7, #4]
 801d7ce:	681a      	ldr	r2, [r3, #0]
 801d7d0:	68fb      	ldr	r3, [r7, #12]
 801d7d2:	3304      	adds	r3, #4
 801d7d4:	681b      	ldr	r3, [r3, #0]
 801d7d6:	405a      	eors	r2, r3
 801d7d8:	68fb      	ldr	r3, [r7, #12]
 801d7da:	3308      	adds	r3, #8
 801d7dc:	681b      	ldr	r3, [r3, #0]
 801d7de:	4013      	ands	r3, r2
 801d7e0:	2b00      	cmp	r3, #0
 801d7e2:	d101      	bne.n	801d7e8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801d7e4:	68fb      	ldr	r3, [r7, #12]
 801d7e6:	e040      	b.n	801d86a <ip4_route+0xda>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801d7e8:	68fb      	ldr	r3, [r7, #12]
 801d7ea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d7ee:	f003 0302 	and.w	r3, r3, #2
 801d7f2:	2b00      	cmp	r3, #0
 801d7f4:	d108      	bne.n	801d808 <ip4_route+0x78>
 801d7f6:	687b      	ldr	r3, [r7, #4]
 801d7f8:	681a      	ldr	r2, [r3, #0]
 801d7fa:	68fb      	ldr	r3, [r7, #12]
 801d7fc:	330c      	adds	r3, #12
 801d7fe:	681b      	ldr	r3, [r3, #0]
 801d800:	429a      	cmp	r2, r3
 801d802:	d101      	bne.n	801d808 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801d804:	68fb      	ldr	r3, [r7, #12]
 801d806:	e030      	b.n	801d86a <ip4_route+0xda>
  NETIF_FOREACH(netif) {
 801d808:	68fb      	ldr	r3, [r7, #12]
 801d80a:	681b      	ldr	r3, [r3, #0]
 801d80c:	60fb      	str	r3, [r7, #12]
 801d80e:	68fb      	ldr	r3, [r7, #12]
 801d810:	2b00      	cmp	r3, #0
 801d812:	d1c5      	bne.n	801d7a0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801d814:	4b19      	ldr	r3, [pc, #100]	@ (801d87c <ip4_route+0xec>)
 801d816:	681b      	ldr	r3, [r3, #0]
 801d818:	2b00      	cmp	r3, #0
 801d81a:	d01a      	beq.n	801d852 <ip4_route+0xc2>
 801d81c:	4b17      	ldr	r3, [pc, #92]	@ (801d87c <ip4_route+0xec>)
 801d81e:	681b      	ldr	r3, [r3, #0]
 801d820:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d824:	f003 0301 	and.w	r3, r3, #1
 801d828:	2b00      	cmp	r3, #0
 801d82a:	d012      	beq.n	801d852 <ip4_route+0xc2>
 801d82c:	4b13      	ldr	r3, [pc, #76]	@ (801d87c <ip4_route+0xec>)
 801d82e:	681b      	ldr	r3, [r3, #0]
 801d830:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d834:	f003 0304 	and.w	r3, r3, #4
 801d838:	2b00      	cmp	r3, #0
 801d83a:	d00a      	beq.n	801d852 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801d83c:	4b0f      	ldr	r3, [pc, #60]	@ (801d87c <ip4_route+0xec>)
 801d83e:	681b      	ldr	r3, [r3, #0]
 801d840:	3304      	adds	r3, #4
 801d842:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801d844:	2b00      	cmp	r3, #0
 801d846:	d004      	beq.n	801d852 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801d848:	687b      	ldr	r3, [r7, #4]
 801d84a:	681b      	ldr	r3, [r3, #0]
 801d84c:	b2db      	uxtb	r3, r3
 801d84e:	2b7f      	cmp	r3, #127	@ 0x7f
 801d850:	d109      	bne.n	801d866 <ip4_route+0xd6>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 801d852:	4b0b      	ldr	r3, [pc, #44]	@ (801d880 <ip4_route+0xf0>)
 801d854:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801d858:	3301      	adds	r3, #1
 801d85a:	b29a      	uxth	r2, r3
 801d85c:	4b08      	ldr	r3, [pc, #32]	@ (801d880 <ip4_route+0xf0>)
 801d85e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801d862:	2300      	movs	r3, #0
 801d864:	e001      	b.n	801d86a <ip4_route+0xda>
  }

  return netif_default;
 801d866:	4b05      	ldr	r3, [pc, #20]	@ (801d87c <ip4_route+0xec>)
 801d868:	681b      	ldr	r3, [r3, #0]
}
 801d86a:	4618      	mov	r0, r3
 801d86c:	3714      	adds	r7, #20
 801d86e:	46bd      	mov	sp, r7
 801d870:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d874:	4770      	bx	lr
 801d876:	bf00      	nop
 801d878:	2002d360 	.word	0x2002d360
 801d87c:	2002d364 	.word	0x2002d364
 801d880:	2002d36c 	.word	0x2002d36c

0801d884 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801d884:	b580      	push	{r7, lr}
 801d886:	b082      	sub	sp, #8
 801d888:	af00      	add	r7, sp, #0
 801d88a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801d88c:	687b      	ldr	r3, [r7, #4]
 801d88e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d892:	f003 0301 	and.w	r3, r3, #1
 801d896:	b2db      	uxtb	r3, r3
 801d898:	2b00      	cmp	r3, #0
 801d89a:	d016      	beq.n	801d8ca <ip4_input_accept+0x46>
 801d89c:	687b      	ldr	r3, [r7, #4]
 801d89e:	3304      	adds	r3, #4
 801d8a0:	681b      	ldr	r3, [r3, #0]
 801d8a2:	2b00      	cmp	r3, #0
 801d8a4:	d011      	beq.n	801d8ca <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801d8a6:	4b0b      	ldr	r3, [pc, #44]	@ (801d8d4 <ip4_input_accept+0x50>)
 801d8a8:	695a      	ldr	r2, [r3, #20]
 801d8aa:	687b      	ldr	r3, [r7, #4]
 801d8ac:	3304      	adds	r3, #4
 801d8ae:	681b      	ldr	r3, [r3, #0]
 801d8b0:	429a      	cmp	r2, r3
 801d8b2:	d008      	beq.n	801d8c6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801d8b4:	4b07      	ldr	r3, [pc, #28]	@ (801d8d4 <ip4_input_accept+0x50>)
 801d8b6:	695b      	ldr	r3, [r3, #20]
 801d8b8:	6879      	ldr	r1, [r7, #4]
 801d8ba:	4618      	mov	r0, r3
 801d8bc:	f000 fa70 	bl	801dda0 <ip4_addr_isbroadcast_u32>
 801d8c0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801d8c2:	2b00      	cmp	r3, #0
 801d8c4:	d001      	beq.n	801d8ca <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801d8c6:	2301      	movs	r3, #1
 801d8c8:	e000      	b.n	801d8cc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801d8ca:	2300      	movs	r3, #0
}
 801d8cc:	4618      	mov	r0, r3
 801d8ce:	3708      	adds	r7, #8
 801d8d0:	46bd      	mov	sp, r7
 801d8d2:	bd80      	pop	{r7, pc}
 801d8d4:	200270fc 	.word	0x200270fc

0801d8d8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801d8d8:	b580      	push	{r7, lr}
 801d8da:	b086      	sub	sp, #24
 801d8dc:	af00      	add	r7, sp, #0
 801d8de:	6078      	str	r0, [r7, #4]
 801d8e0:	6039      	str	r1, [r7, #0]
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();

  IP_STATS_INC(ip.recv);
 801d8e2:	4b8f      	ldr	r3, [pc, #572]	@ (801db20 <ip4_input+0x248>)
 801d8e4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801d8e8:	3301      	adds	r3, #1
 801d8ea:	b29a      	uxth	r2, r3
 801d8ec:	4b8c      	ldr	r3, [pc, #560]	@ (801db20 <ip4_input+0x248>)
 801d8ee:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801d8f2:	687b      	ldr	r3, [r7, #4]
 801d8f4:	685b      	ldr	r3, [r3, #4]
 801d8f6:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 801d8f8:	693b      	ldr	r3, [r7, #16]
 801d8fa:	781b      	ldrb	r3, [r3, #0]
 801d8fc:	091b      	lsrs	r3, r3, #4
 801d8fe:	b2db      	uxtb	r3, r3
 801d900:	2b04      	cmp	r3, #4
 801d902:	d014      	beq.n	801d92e <ip4_input+0x56>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801d904:	6878      	ldr	r0, [r7, #4]
 801d906:	f7f7 f8b9 	bl	8014a7c <pbuf_free>
    IP_STATS_INC(ip.err);
 801d90a:	4b85      	ldr	r3, [pc, #532]	@ (801db20 <ip4_input+0x248>)
 801d90c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801d910:	3301      	adds	r3, #1
 801d912:	b29a      	uxth	r2, r3
 801d914:	4b82      	ldr	r3, [pc, #520]	@ (801db20 <ip4_input+0x248>)
 801d916:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    IP_STATS_INC(ip.drop);
 801d91a:	4b81      	ldr	r3, [pc, #516]	@ (801db20 <ip4_input+0x248>)
 801d91c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801d920:	3301      	adds	r3, #1
 801d922:	b29a      	uxth	r2, r3
 801d924:	4b7e      	ldr	r3, [pc, #504]	@ (801db20 <ip4_input+0x248>)
 801d926:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801d92a:	2300      	movs	r3, #0
 801d92c:	e13e      	b.n	801dbac <ip4_input+0x2d4>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801d92e:	693b      	ldr	r3, [r7, #16]
 801d930:	781b      	ldrb	r3, [r3, #0]
 801d932:	f003 030f 	and.w	r3, r3, #15
 801d936:	b2db      	uxtb	r3, r3
 801d938:	009b      	lsls	r3, r3, #2
 801d93a:	b2db      	uxtb	r3, r3
 801d93c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801d93e:	693b      	ldr	r3, [r7, #16]
 801d940:	885b      	ldrh	r3, [r3, #2]
 801d942:	b29b      	uxth	r3, r3
 801d944:	4618      	mov	r0, r3
 801d946:	f7f5 fa6b 	bl	8012e20 <lwip_htons>
 801d94a:	4603      	mov	r3, r0
 801d94c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801d94e:	687b      	ldr	r3, [r7, #4]
 801d950:	891b      	ldrh	r3, [r3, #8]
 801d952:	89ba      	ldrh	r2, [r7, #12]
 801d954:	429a      	cmp	r2, r3
 801d956:	d204      	bcs.n	801d962 <ip4_input+0x8a>
    pbuf_realloc(p, iphdr_len);
 801d958:	89bb      	ldrh	r3, [r7, #12]
 801d95a:	4619      	mov	r1, r3
 801d95c:	6878      	ldr	r0, [r7, #4]
 801d95e:	f7f6 feed 	bl	801473c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801d962:	687b      	ldr	r3, [r7, #4]
 801d964:	895b      	ldrh	r3, [r3, #10]
 801d966:	89fa      	ldrh	r2, [r7, #14]
 801d968:	429a      	cmp	r2, r3
 801d96a:	d807      	bhi.n	801d97c <ip4_input+0xa4>
 801d96c:	687b      	ldr	r3, [r7, #4]
 801d96e:	891b      	ldrh	r3, [r3, #8]
 801d970:	89ba      	ldrh	r2, [r7, #12]
 801d972:	429a      	cmp	r2, r3
 801d974:	d802      	bhi.n	801d97c <ip4_input+0xa4>
 801d976:	89fb      	ldrh	r3, [r7, #14]
 801d978:	2b13      	cmp	r3, #19
 801d97a:	d814      	bhi.n	801d9a6 <ip4_input+0xce>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801d97c:	6878      	ldr	r0, [r7, #4]
 801d97e:	f7f7 f87d 	bl	8014a7c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 801d982:	4b67      	ldr	r3, [pc, #412]	@ (801db20 <ip4_input+0x248>)
 801d984:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 801d988:	3301      	adds	r3, #1
 801d98a:	b29a      	uxth	r2, r3
 801d98c:	4b64      	ldr	r3, [pc, #400]	@ (801db20 <ip4_input+0x248>)
 801d98e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    IP_STATS_INC(ip.drop);
 801d992:	4b63      	ldr	r3, [pc, #396]	@ (801db20 <ip4_input+0x248>)
 801d994:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801d998:	3301      	adds	r3, #1
 801d99a:	b29a      	uxth	r2, r3
 801d99c:	4b60      	ldr	r3, [pc, #384]	@ (801db20 <ip4_input+0x248>)
 801d99e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801d9a2:	2300      	movs	r3, #0
 801d9a4:	e102      	b.n	801dbac <ip4_input+0x2d4>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801d9a6:	693b      	ldr	r3, [r7, #16]
 801d9a8:	691b      	ldr	r3, [r3, #16]
 801d9aa:	4a5e      	ldr	r2, [pc, #376]	@ (801db24 <ip4_input+0x24c>)
 801d9ac:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801d9ae:	693b      	ldr	r3, [r7, #16]
 801d9b0:	68db      	ldr	r3, [r3, #12]
 801d9b2:	4a5c      	ldr	r2, [pc, #368]	@ (801db24 <ip4_input+0x24c>)
 801d9b4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801d9b6:	4b5b      	ldr	r3, [pc, #364]	@ (801db24 <ip4_input+0x24c>)
 801d9b8:	695b      	ldr	r3, [r3, #20]
 801d9ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801d9be:	2be0      	cmp	r3, #224	@ 0xe0
 801d9c0:	d112      	bne.n	801d9e8 <ip4_input+0x110>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801d9c2:	683b      	ldr	r3, [r7, #0]
 801d9c4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d9c8:	f003 0301 	and.w	r3, r3, #1
 801d9cc:	b2db      	uxtb	r3, r3
 801d9ce:	2b00      	cmp	r3, #0
 801d9d0:	d007      	beq.n	801d9e2 <ip4_input+0x10a>
 801d9d2:	683b      	ldr	r3, [r7, #0]
 801d9d4:	3304      	adds	r3, #4
 801d9d6:	681b      	ldr	r3, [r3, #0]
 801d9d8:	2b00      	cmp	r3, #0
 801d9da:	d002      	beq.n	801d9e2 <ip4_input+0x10a>
      netif = inp;
 801d9dc:	683b      	ldr	r3, [r7, #0]
 801d9de:	617b      	str	r3, [r7, #20]
 801d9e0:	e02a      	b.n	801da38 <ip4_input+0x160>
    } else {
      netif = NULL;
 801d9e2:	2300      	movs	r3, #0
 801d9e4:	617b      	str	r3, [r7, #20]
 801d9e6:	e027      	b.n	801da38 <ip4_input+0x160>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801d9e8:	6838      	ldr	r0, [r7, #0]
 801d9ea:	f7ff ff4b 	bl	801d884 <ip4_input_accept>
 801d9ee:	4603      	mov	r3, r0
 801d9f0:	2b00      	cmp	r3, #0
 801d9f2:	d002      	beq.n	801d9fa <ip4_input+0x122>
      netif = inp;
 801d9f4:	683b      	ldr	r3, [r7, #0]
 801d9f6:	617b      	str	r3, [r7, #20]
 801d9f8:	e01e      	b.n	801da38 <ip4_input+0x160>
    } else {
      netif = NULL;
 801d9fa:	2300      	movs	r3, #0
 801d9fc:	617b      	str	r3, [r7, #20]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801d9fe:	4b49      	ldr	r3, [pc, #292]	@ (801db24 <ip4_input+0x24c>)
 801da00:	695b      	ldr	r3, [r3, #20]
 801da02:	b2db      	uxtb	r3, r3
 801da04:	2b7f      	cmp	r3, #127	@ 0x7f
 801da06:	d017      	beq.n	801da38 <ip4_input+0x160>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801da08:	4b47      	ldr	r3, [pc, #284]	@ (801db28 <ip4_input+0x250>)
 801da0a:	681b      	ldr	r3, [r3, #0]
 801da0c:	617b      	str	r3, [r7, #20]
 801da0e:	e00e      	b.n	801da2e <ip4_input+0x156>
          if (netif == inp) {
 801da10:	697a      	ldr	r2, [r7, #20]
 801da12:	683b      	ldr	r3, [r7, #0]
 801da14:	429a      	cmp	r2, r3
 801da16:	d006      	beq.n	801da26 <ip4_input+0x14e>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801da18:	6978      	ldr	r0, [r7, #20]
 801da1a:	f7ff ff33 	bl	801d884 <ip4_input_accept>
 801da1e:	4603      	mov	r3, r0
 801da20:	2b00      	cmp	r3, #0
 801da22:	d108      	bne.n	801da36 <ip4_input+0x15e>
 801da24:	e000      	b.n	801da28 <ip4_input+0x150>
            continue;
 801da26:	bf00      	nop
        NETIF_FOREACH(netif) {
 801da28:	697b      	ldr	r3, [r7, #20]
 801da2a:	681b      	ldr	r3, [r3, #0]
 801da2c:	617b      	str	r3, [r7, #20]
 801da2e:	697b      	ldr	r3, [r7, #20]
 801da30:	2b00      	cmp	r3, #0
 801da32:	d1ed      	bne.n	801da10 <ip4_input+0x138>
 801da34:	e000      	b.n	801da38 <ip4_input+0x160>
            break;
 801da36:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801da38:	4b3a      	ldr	r3, [pc, #232]	@ (801db24 <ip4_input+0x24c>)
 801da3a:	691b      	ldr	r3, [r3, #16]
 801da3c:	6839      	ldr	r1, [r7, #0]
 801da3e:	4618      	mov	r0, r3
 801da40:	f000 f9ae 	bl	801dda0 <ip4_addr_isbroadcast_u32>
 801da44:	4603      	mov	r3, r0
 801da46:	2b00      	cmp	r3, #0
 801da48:	d105      	bne.n	801da56 <ip4_input+0x17e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801da4a:	4b36      	ldr	r3, [pc, #216]	@ (801db24 <ip4_input+0x24c>)
 801da4c:	691b      	ldr	r3, [r3, #16]
 801da4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801da52:	2be0      	cmp	r3, #224	@ 0xe0
 801da54:	d10c      	bne.n	801da70 <ip4_input+0x198>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801da56:	6878      	ldr	r0, [r7, #4]
 801da58:	f7f7 f810 	bl	8014a7c <pbuf_free>
      IP_STATS_INC(ip.drop);
 801da5c:	4b30      	ldr	r3, [pc, #192]	@ (801db20 <ip4_input+0x248>)
 801da5e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801da62:	3301      	adds	r3, #1
 801da64:	b29a      	uxth	r2, r3
 801da66:	4b2e      	ldr	r3, [pc, #184]	@ (801db20 <ip4_input+0x248>)
 801da68:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801da6c:	2300      	movs	r3, #0
 801da6e:	e09d      	b.n	801dbac <ip4_input+0x2d4>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801da70:	697b      	ldr	r3, [r7, #20]
 801da72:	2b00      	cmp	r3, #0
 801da74:	d10c      	bne.n	801da90 <ip4_input+0x1b8>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, (struct ip_hdr *)p->payload, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
 801da76:	4b2a      	ldr	r3, [pc, #168]	@ (801db20 <ip4_input+0x248>)
 801da78:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801da7c:	3301      	adds	r3, #1
 801da7e:	b29a      	uxth	r2, r3
 801da80:	4b27      	ldr	r3, [pc, #156]	@ (801db20 <ip4_input+0x248>)
 801da82:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801da86:	6878      	ldr	r0, [r7, #4]
 801da88:	f7f6 fff8 	bl	8014a7c <pbuf_free>
    return ERR_OK;
 801da8c:	2300      	movs	r3, #0
 801da8e:	e08d      	b.n	801dbac <ip4_input+0x2d4>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801da90:	693b      	ldr	r3, [r7, #16]
 801da92:	88db      	ldrh	r3, [r3, #6]
 801da94:	b29b      	uxth	r3, r3
 801da96:	461a      	mov	r2, r3
 801da98:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801da9c:	4013      	ands	r3, r2
 801da9e:	2b00      	cmp	r3, #0
 801daa0:	d00b      	beq.n	801daba <ip4_input+0x1e2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801daa2:	6878      	ldr	r0, [r7, #4]
 801daa4:	f000 fd5a 	bl	801e55c <ip4_reass>
 801daa8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801daaa:	687b      	ldr	r3, [r7, #4]
 801daac:	2b00      	cmp	r3, #0
 801daae:	d101      	bne.n	801dab4 <ip4_input+0x1dc>
      return ERR_OK;
 801dab0:	2300      	movs	r3, #0
 801dab2:	e07b      	b.n	801dbac <ip4_input+0x2d4>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801dab4:	687b      	ldr	r3, [r7, #4]
 801dab6:	685b      	ldr	r3, [r3, #4]
 801dab8:	613b      	str	r3, [r7, #16]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801daba:	4a1a      	ldr	r2, [pc, #104]	@ (801db24 <ip4_input+0x24c>)
 801dabc:	697b      	ldr	r3, [r7, #20]
 801dabe:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801dac0:	4a18      	ldr	r2, [pc, #96]	@ (801db24 <ip4_input+0x24c>)
 801dac2:	683b      	ldr	r3, [r7, #0]
 801dac4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801dac6:	4a17      	ldr	r2, [pc, #92]	@ (801db24 <ip4_input+0x24c>)
 801dac8:	693b      	ldr	r3, [r7, #16]
 801daca:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801dacc:	693b      	ldr	r3, [r7, #16]
 801dace:	781b      	ldrb	r3, [r3, #0]
 801dad0:	f003 030f 	and.w	r3, r3, #15
 801dad4:	b2db      	uxtb	r3, r3
 801dad6:	009b      	lsls	r3, r3, #2
 801dad8:	b2db      	uxtb	r3, r3
 801dada:	461a      	mov	r2, r3
 801dadc:	4b11      	ldr	r3, [pc, #68]	@ (801db24 <ip4_input+0x24c>)
 801dade:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801dae0:	89fb      	ldrh	r3, [r7, #14]
 801dae2:	4619      	mov	r1, r3
 801dae4:	6878      	ldr	r0, [r7, #4]
 801dae6:	f7f6 ff3b 	bl	8014960 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801daea:	693b      	ldr	r3, [r7, #16]
 801daec:	7a5b      	ldrb	r3, [r3, #9]
 801daee:	2b11      	cmp	r3, #17
 801daf0:	d006      	beq.n	801db00 <ip4_input+0x228>
 801daf2:	2b11      	cmp	r3, #17
 801daf4:	dc1a      	bgt.n	801db2c <ip4_input+0x254>
 801daf6:	2b01      	cmp	r3, #1
 801daf8:	d00c      	beq.n	801db14 <ip4_input+0x23c>
 801dafa:	2b06      	cmp	r3, #6
 801dafc:	d005      	beq.n	801db0a <ip4_input+0x232>
 801dafe:	e015      	b.n	801db2c <ip4_input+0x254>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801db00:	6839      	ldr	r1, [r7, #0]
 801db02:	6878      	ldr	r0, [r7, #4]
 801db04:	f7fd fdd2 	bl	801b6ac <udp_input>
        break;
 801db08:	e03d      	b.n	801db86 <ip4_input+0x2ae>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801db0a:	6839      	ldr	r1, [r7, #0]
 801db0c:	6878      	ldr	r0, [r7, #4]
 801db0e:	f7f9 f86f 	bl	8016bf0 <tcp_input>
        break;
 801db12:	e038      	b.n	801db86 <ip4_input+0x2ae>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801db14:	6839      	ldr	r1, [r7, #0]
 801db16:	6878      	ldr	r0, [r7, #4]
 801db18:	f7ff fbdc 	bl	801d2d4 <icmp_input>
        break;
 801db1c:	e033      	b.n	801db86 <ip4_input+0x2ae>
 801db1e:	bf00      	nop
 801db20:	2002d36c 	.word	0x2002d36c
 801db24:	200270fc 	.word	0x200270fc
 801db28:	2002d360 	.word	0x2002d360
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801db2c:	4b21      	ldr	r3, [pc, #132]	@ (801dbb4 <ip4_input+0x2dc>)
 801db2e:	695b      	ldr	r3, [r3, #20]
 801db30:	6979      	ldr	r1, [r7, #20]
 801db32:	4618      	mov	r0, r3
 801db34:	f000 f934 	bl	801dda0 <ip4_addr_isbroadcast_u32>
 801db38:	4603      	mov	r3, r0
 801db3a:	2b00      	cmp	r3, #0
 801db3c:	d10f      	bne.n	801db5e <ip4_input+0x286>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801db3e:	4b1d      	ldr	r3, [pc, #116]	@ (801dbb4 <ip4_input+0x2dc>)
 801db40:	695b      	ldr	r3, [r3, #20]
 801db42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801db46:	2be0      	cmp	r3, #224	@ 0xe0
 801db48:	d009      	beq.n	801db5e <ip4_input+0x286>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801db4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801db4e:	4619      	mov	r1, r3
 801db50:	6878      	ldr	r0, [r7, #4]
 801db52:	f7f6 ff80 	bl	8014a56 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801db56:	2102      	movs	r1, #2
 801db58:	6878      	ldr	r0, [r7, #4]
 801db5a:	f7ff fd45 	bl	801d5e8 <icmp_dest_unreach>
          }
#endif /* LWIP_ICMP */

          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

          IP_STATS_INC(ip.proterr);
 801db5e:	4b16      	ldr	r3, [pc, #88]	@ (801dbb8 <ip4_input+0x2e0>)
 801db60:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801db64:	3301      	adds	r3, #1
 801db66:	b29a      	uxth	r2, r3
 801db68:	4b13      	ldr	r3, [pc, #76]	@ (801dbb8 <ip4_input+0x2e0>)
 801db6a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
          IP_STATS_INC(ip.drop);
 801db6e:	4b12      	ldr	r3, [pc, #72]	@ (801dbb8 <ip4_input+0x2e0>)
 801db70:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801db74:	3301      	adds	r3, #1
 801db76:	b29a      	uxth	r2, r3
 801db78:	4b0f      	ldr	r3, [pc, #60]	@ (801dbb8 <ip4_input+0x2e0>)
 801db7a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801db7e:	6878      	ldr	r0, [r7, #4]
 801db80:	f7f6 ff7c 	bl	8014a7c <pbuf_free>
        break;
 801db84:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801db86:	4b0b      	ldr	r3, [pc, #44]	@ (801dbb4 <ip4_input+0x2dc>)
 801db88:	2200      	movs	r2, #0
 801db8a:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801db8c:	4b09      	ldr	r3, [pc, #36]	@ (801dbb4 <ip4_input+0x2dc>)
 801db8e:	2200      	movs	r2, #0
 801db90:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801db92:	4b08      	ldr	r3, [pc, #32]	@ (801dbb4 <ip4_input+0x2dc>)
 801db94:	2200      	movs	r2, #0
 801db96:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801db98:	4b06      	ldr	r3, [pc, #24]	@ (801dbb4 <ip4_input+0x2dc>)
 801db9a:	2200      	movs	r2, #0
 801db9c:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801db9e:	4b05      	ldr	r3, [pc, #20]	@ (801dbb4 <ip4_input+0x2dc>)
 801dba0:	2200      	movs	r2, #0
 801dba2:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801dba4:	4b03      	ldr	r3, [pc, #12]	@ (801dbb4 <ip4_input+0x2dc>)
 801dba6:	2200      	movs	r2, #0
 801dba8:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801dbaa:	2300      	movs	r3, #0
}
 801dbac:	4618      	mov	r0, r3
 801dbae:	3718      	adds	r7, #24
 801dbb0:	46bd      	mov	sp, r7
 801dbb2:	bd80      	pop	{r7, pc}
 801dbb4:	200270fc 	.word	0x200270fc
 801dbb8:	2002d36c 	.word	0x2002d36c

0801dbbc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801dbbc:	b580      	push	{r7, lr}
 801dbbe:	b08a      	sub	sp, #40	@ 0x28
 801dbc0:	af04      	add	r7, sp, #16
 801dbc2:	60f8      	str	r0, [r7, #12]
 801dbc4:	60b9      	str	r1, [r7, #8]
 801dbc6:	607a      	str	r2, [r7, #4]
 801dbc8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801dbca:	68bb      	ldr	r3, [r7, #8]
 801dbcc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801dbce:	687b      	ldr	r3, [r7, #4]
 801dbd0:	2b00      	cmp	r3, #0
 801dbd2:	d009      	beq.n	801dbe8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801dbd4:	68bb      	ldr	r3, [r7, #8]
 801dbd6:	2b00      	cmp	r3, #0
 801dbd8:	d003      	beq.n	801dbe2 <ip4_output_if+0x26>
 801dbda:	68bb      	ldr	r3, [r7, #8]
 801dbdc:	681b      	ldr	r3, [r3, #0]
 801dbde:	2b00      	cmp	r3, #0
 801dbe0:	d102      	bne.n	801dbe8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801dbe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dbe4:	3304      	adds	r3, #4
 801dbe6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801dbe8:	78fa      	ldrb	r2, [r7, #3]
 801dbea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dbec:	9302      	str	r3, [sp, #8]
 801dbee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801dbf2:	9301      	str	r3, [sp, #4]
 801dbf4:	f897 3020 	ldrb.w	r3, [r7, #32]
 801dbf8:	9300      	str	r3, [sp, #0]
 801dbfa:	4613      	mov	r3, r2
 801dbfc:	687a      	ldr	r2, [r7, #4]
 801dbfe:	6979      	ldr	r1, [r7, #20]
 801dc00:	68f8      	ldr	r0, [r7, #12]
 801dc02:	f000 f805 	bl	801dc10 <ip4_output_if_src>
 801dc06:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801dc08:	4618      	mov	r0, r3
 801dc0a:	3718      	adds	r7, #24
 801dc0c:	46bd      	mov	sp, r7
 801dc0e:	bd80      	pop	{r7, pc}

0801dc10 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801dc10:	b580      	push	{r7, lr}
 801dc12:	b088      	sub	sp, #32
 801dc14:	af00      	add	r7, sp, #0
 801dc16:	60f8      	str	r0, [r7, #12]
 801dc18:	60b9      	str	r1, [r7, #8]
 801dc1a:	607a      	str	r2, [r7, #4]
 801dc1c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801dc1e:	68fb      	ldr	r3, [r7, #12]
 801dc20:	7b9b      	ldrb	r3, [r3, #14]
 801dc22:	2b01      	cmp	r3, #1
 801dc24:	d006      	beq.n	801dc34 <ip4_output_if_src+0x24>
 801dc26:	4b57      	ldr	r3, [pc, #348]	@ (801dd84 <ip4_output_if_src+0x174>)
 801dc28:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801dc2c:	4956      	ldr	r1, [pc, #344]	@ (801dd88 <ip4_output_if_src+0x178>)
 801dc2e:	4857      	ldr	r0, [pc, #348]	@ (801dd8c <ip4_output_if_src+0x17c>)
 801dc30:	f002 fdb2 	bl	8020798 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801dc34:	687b      	ldr	r3, [r7, #4]
 801dc36:	2b00      	cmp	r3, #0
 801dc38:	d068      	beq.n	801dd0c <ip4_output_if_src+0xfc>
    u16_t ip_hlen = IP_HLEN;
 801dc3a:	2314      	movs	r3, #20
 801dc3c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801dc3e:	2114      	movs	r1, #20
 801dc40:	68f8      	ldr	r0, [r7, #12]
 801dc42:	f7f6 fe7d 	bl	8014940 <pbuf_add_header>
 801dc46:	4603      	mov	r3, r0
 801dc48:	2b00      	cmp	r3, #0
 801dc4a:	d00a      	beq.n	801dc62 <ip4_output_if_src+0x52>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 801dc4c:	4b50      	ldr	r3, [pc, #320]	@ (801dd90 <ip4_output_if_src+0x180>)
 801dc4e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801dc52:	3301      	adds	r3, #1
 801dc54:	b29a      	uxth	r2, r3
 801dc56:	4b4e      	ldr	r3, [pc, #312]	@ (801dd90 <ip4_output_if_src+0x180>)
 801dc58:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801dc5c:	f06f 0301 	mvn.w	r3, #1
 801dc60:	e08c      	b.n	801dd7c <ip4_output_if_src+0x16c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801dc62:	68fb      	ldr	r3, [r7, #12]
 801dc64:	685b      	ldr	r3, [r3, #4]
 801dc66:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801dc68:	68fb      	ldr	r3, [r7, #12]
 801dc6a:	895b      	ldrh	r3, [r3, #10]
 801dc6c:	2b13      	cmp	r3, #19
 801dc6e:	d806      	bhi.n	801dc7e <ip4_output_if_src+0x6e>
 801dc70:	4b44      	ldr	r3, [pc, #272]	@ (801dd84 <ip4_output_if_src+0x174>)
 801dc72:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801dc76:	4947      	ldr	r1, [pc, #284]	@ (801dd94 <ip4_output_if_src+0x184>)
 801dc78:	4844      	ldr	r0, [pc, #272]	@ (801dd8c <ip4_output_if_src+0x17c>)
 801dc7a:	f002 fd8d 	bl	8020798 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801dc7e:	69fb      	ldr	r3, [r7, #28]
 801dc80:	78fa      	ldrb	r2, [r7, #3]
 801dc82:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801dc84:	69fb      	ldr	r3, [r7, #28]
 801dc86:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801dc8a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801dc8c:	687b      	ldr	r3, [r7, #4]
 801dc8e:	681a      	ldr	r2, [r3, #0]
 801dc90:	69fb      	ldr	r3, [r7, #28]
 801dc92:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801dc94:	8b7b      	ldrh	r3, [r7, #26]
 801dc96:	089b      	lsrs	r3, r3, #2
 801dc98:	b29b      	uxth	r3, r3
 801dc9a:	b2db      	uxtb	r3, r3
 801dc9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dca0:	b2da      	uxtb	r2, r3
 801dca2:	69fb      	ldr	r3, [r7, #28]
 801dca4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801dca6:	69fb      	ldr	r3, [r7, #28]
 801dca8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801dcac:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801dcae:	68fb      	ldr	r3, [r7, #12]
 801dcb0:	891b      	ldrh	r3, [r3, #8]
 801dcb2:	4618      	mov	r0, r3
 801dcb4:	f7f5 f8b4 	bl	8012e20 <lwip_htons>
 801dcb8:	4603      	mov	r3, r0
 801dcba:	461a      	mov	r2, r3
 801dcbc:	69fb      	ldr	r3, [r7, #28]
 801dcbe:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801dcc0:	69fb      	ldr	r3, [r7, #28]
 801dcc2:	2200      	movs	r2, #0
 801dcc4:	719a      	strb	r2, [r3, #6]
 801dcc6:	2200      	movs	r2, #0
 801dcc8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801dcca:	4b33      	ldr	r3, [pc, #204]	@ (801dd98 <ip4_output_if_src+0x188>)
 801dccc:	881b      	ldrh	r3, [r3, #0]
 801dcce:	4618      	mov	r0, r3
 801dcd0:	f7f5 f8a6 	bl	8012e20 <lwip_htons>
 801dcd4:	4603      	mov	r3, r0
 801dcd6:	461a      	mov	r2, r3
 801dcd8:	69fb      	ldr	r3, [r7, #28]
 801dcda:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801dcdc:	4b2e      	ldr	r3, [pc, #184]	@ (801dd98 <ip4_output_if_src+0x188>)
 801dcde:	881b      	ldrh	r3, [r3, #0]
 801dce0:	3301      	adds	r3, #1
 801dce2:	b29a      	uxth	r2, r3
 801dce4:	4b2c      	ldr	r3, [pc, #176]	@ (801dd98 <ip4_output_if_src+0x188>)
 801dce6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801dce8:	68bb      	ldr	r3, [r7, #8]
 801dcea:	2b00      	cmp	r3, #0
 801dcec:	d104      	bne.n	801dcf8 <ip4_output_if_src+0xe8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801dcee:	4b2b      	ldr	r3, [pc, #172]	@ (801dd9c <ip4_output_if_src+0x18c>)
 801dcf0:	681a      	ldr	r2, [r3, #0]
 801dcf2:	69fb      	ldr	r3, [r7, #28]
 801dcf4:	60da      	str	r2, [r3, #12]
 801dcf6:	e003      	b.n	801dd00 <ip4_output_if_src+0xf0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801dcf8:	68bb      	ldr	r3, [r7, #8]
 801dcfa:	681a      	ldr	r2, [r3, #0]
 801dcfc:	69fb      	ldr	r3, [r7, #28]
 801dcfe:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801dd00:	69fb      	ldr	r3, [r7, #28]
 801dd02:	2200      	movs	r2, #0
 801dd04:	729a      	strb	r2, [r3, #10]
 801dd06:	2200      	movs	r2, #0
 801dd08:	72da      	strb	r2, [r3, #11]
 801dd0a:	e017      	b.n	801dd3c <ip4_output_if_src+0x12c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801dd0c:	68fb      	ldr	r3, [r7, #12]
 801dd0e:	895b      	ldrh	r3, [r3, #10]
 801dd10:	2b13      	cmp	r3, #19
 801dd12:	d80a      	bhi.n	801dd2a <ip4_output_if_src+0x11a>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
 801dd14:	4b1e      	ldr	r3, [pc, #120]	@ (801dd90 <ip4_output_if_src+0x180>)
 801dd16:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801dd1a:	3301      	adds	r3, #1
 801dd1c:	b29a      	uxth	r2, r3
 801dd1e:	4b1c      	ldr	r3, [pc, #112]	@ (801dd90 <ip4_output_if_src+0x180>)
 801dd20:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801dd24:	f06f 0301 	mvn.w	r3, #1
 801dd28:	e028      	b.n	801dd7c <ip4_output_if_src+0x16c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801dd2a:	68fb      	ldr	r3, [r7, #12]
 801dd2c:	685b      	ldr	r3, [r3, #4]
 801dd2e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801dd30:	69fb      	ldr	r3, [r7, #28]
 801dd32:	691b      	ldr	r3, [r3, #16]
 801dd34:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801dd36:	f107 0314 	add.w	r3, r7, #20
 801dd3a:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);
 801dd3c:	4b14      	ldr	r3, [pc, #80]	@ (801dd90 <ip4_output_if_src+0x180>)
 801dd3e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801dd42:	3301      	adds	r3, #1
 801dd44:	b29a      	uxth	r2, r3
 801dd46:	4b12      	ldr	r3, [pc, #72]	@ (801dd90 <ip4_output_if_src+0x180>)
 801dd48:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801dd4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dd4e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801dd50:	2b00      	cmp	r3, #0
 801dd52:	d00c      	beq.n	801dd6e <ip4_output_if_src+0x15e>
 801dd54:	68fb      	ldr	r3, [r7, #12]
 801dd56:	891a      	ldrh	r2, [r3, #8]
 801dd58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dd5a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801dd5c:	429a      	cmp	r2, r3
 801dd5e:	d906      	bls.n	801dd6e <ip4_output_if_src+0x15e>
    return ip4_frag(p, netif, dest);
 801dd60:	687a      	ldr	r2, [r7, #4]
 801dd62:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801dd64:	68f8      	ldr	r0, [r7, #12]
 801dd66:	f000 fe0b 	bl	801e980 <ip4_frag>
 801dd6a:	4603      	mov	r3, r0
 801dd6c:	e006      	b.n	801dd7c <ip4_output_if_src+0x16c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801dd6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dd70:	695b      	ldr	r3, [r3, #20]
 801dd72:	687a      	ldr	r2, [r7, #4]
 801dd74:	68f9      	ldr	r1, [r7, #12]
 801dd76:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801dd78:	4798      	blx	r3
 801dd7a:	4603      	mov	r3, r0
}
 801dd7c:	4618      	mov	r0, r3
 801dd7e:	3720      	adds	r7, #32
 801dd80:	46bd      	mov	sp, r7
 801dd82:	bd80      	pop	{r7, pc}
 801dd84:	08025b14 	.word	0x08025b14
 801dd88:	08025b48 	.word	0x08025b48
 801dd8c:	08025b54 	.word	0x08025b54
 801dd90:	2002d36c 	.word	0x2002d36c
 801dd94:	08025b7c 	.word	0x08025b7c
 801dd98:	2002d5c2 	.word	0x2002d5c2
 801dd9c:	08026884 	.word	0x08026884

0801dda0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801dda0:	b480      	push	{r7}
 801dda2:	b085      	sub	sp, #20
 801dda4:	af00      	add	r7, sp, #0
 801dda6:	6078      	str	r0, [r7, #4]
 801dda8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801ddaa:	687b      	ldr	r3, [r7, #4]
 801ddac:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801ddae:	687b      	ldr	r3, [r7, #4]
 801ddb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801ddb4:	d002      	beq.n	801ddbc <ip4_addr_isbroadcast_u32+0x1c>
 801ddb6:	687b      	ldr	r3, [r7, #4]
 801ddb8:	2b00      	cmp	r3, #0
 801ddba:	d101      	bne.n	801ddc0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801ddbc:	2301      	movs	r3, #1
 801ddbe:	e02a      	b.n	801de16 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801ddc0:	683b      	ldr	r3, [r7, #0]
 801ddc2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801ddc6:	f003 0302 	and.w	r3, r3, #2
 801ddca:	2b00      	cmp	r3, #0
 801ddcc:	d101      	bne.n	801ddd2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801ddce:	2300      	movs	r3, #0
 801ddd0:	e021      	b.n	801de16 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801ddd2:	683b      	ldr	r3, [r7, #0]
 801ddd4:	3304      	adds	r3, #4
 801ddd6:	681b      	ldr	r3, [r3, #0]
 801ddd8:	687a      	ldr	r2, [r7, #4]
 801ddda:	429a      	cmp	r2, r3
 801dddc:	d101      	bne.n	801dde2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801ddde:	2300      	movs	r3, #0
 801dde0:	e019      	b.n	801de16 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801dde2:	68fa      	ldr	r2, [r7, #12]
 801dde4:	683b      	ldr	r3, [r7, #0]
 801dde6:	3304      	adds	r3, #4
 801dde8:	681b      	ldr	r3, [r3, #0]
 801ddea:	405a      	eors	r2, r3
 801ddec:	683b      	ldr	r3, [r7, #0]
 801ddee:	3308      	adds	r3, #8
 801ddf0:	681b      	ldr	r3, [r3, #0]
 801ddf2:	4013      	ands	r3, r2
 801ddf4:	2b00      	cmp	r3, #0
 801ddf6:	d10d      	bne.n	801de14 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801ddf8:	683b      	ldr	r3, [r7, #0]
 801ddfa:	3308      	adds	r3, #8
 801ddfc:	681b      	ldr	r3, [r3, #0]
 801ddfe:	43da      	mvns	r2, r3
 801de00:	687b      	ldr	r3, [r7, #4]
 801de02:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801de04:	683b      	ldr	r3, [r7, #0]
 801de06:	3308      	adds	r3, #8
 801de08:	681b      	ldr	r3, [r3, #0]
 801de0a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801de0c:	429a      	cmp	r2, r3
 801de0e:	d101      	bne.n	801de14 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801de10:	2301      	movs	r3, #1
 801de12:	e000      	b.n	801de16 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801de14:	2300      	movs	r3, #0
  }
}
 801de16:	4618      	mov	r0, r3
 801de18:	3714      	adds	r7, #20
 801de1a:	46bd      	mov	sp, r7
 801de1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de20:	4770      	bx	lr
	...

0801de24 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 801de24:	b580      	push	{r7, lr}
 801de26:	b082      	sub	sp, #8
 801de28:	af00      	add	r7, sp, #0
 801de2a:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 801de2c:	2210      	movs	r2, #16
 801de2e:	4904      	ldr	r1, [pc, #16]	@ (801de40 <ip4addr_ntoa+0x1c>)
 801de30:	6878      	ldr	r0, [r7, #4]
 801de32:	f000 f807 	bl	801de44 <ip4addr_ntoa_r>
 801de36:	4603      	mov	r3, r0
}
 801de38:	4618      	mov	r0, r3
 801de3a:	3708      	adds	r7, #8
 801de3c:	46bd      	mov	sp, r7
 801de3e:	bd80      	pop	{r7, pc}
 801de40:	2002d5c4 	.word	0x2002d5c4

0801de44 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 801de44:	b480      	push	{r7}
 801de46:	b08d      	sub	sp, #52	@ 0x34
 801de48:	af00      	add	r7, sp, #0
 801de4a:	60f8      	str	r0, [r7, #12]
 801de4c:	60b9      	str	r1, [r7, #8]
 801de4e:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 801de50:	2300      	movs	r3, #0
 801de52:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 801de54:	68fb      	ldr	r3, [r7, #12]
 801de56:	681b      	ldr	r3, [r3, #0]
 801de58:	61bb      	str	r3, [r7, #24]

  rp = buf;
 801de5a:	68bb      	ldr	r3, [r7, #8]
 801de5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 801de5e:	f107 0318 	add.w	r3, r7, #24
 801de62:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 801de64:	2300      	movs	r3, #0
 801de66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801de6a:	e058      	b.n	801df1e <ip4addr_ntoa_r+0xda>
    i = 0;
 801de6c:	2300      	movs	r3, #0
 801de6e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 801de72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801de74:	781a      	ldrb	r2, [r3, #0]
 801de76:	4b32      	ldr	r3, [pc, #200]	@ (801df40 <ip4addr_ntoa_r+0xfc>)
 801de78:	fba3 1302 	umull	r1, r3, r3, r2
 801de7c:	08d9      	lsrs	r1, r3, #3
 801de7e:	460b      	mov	r3, r1
 801de80:	009b      	lsls	r3, r3, #2
 801de82:	440b      	add	r3, r1
 801de84:	005b      	lsls	r3, r3, #1
 801de86:	1ad3      	subs	r3, r2, r3
 801de88:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 801de8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801de8c:	781b      	ldrb	r3, [r3, #0]
 801de8e:	4a2c      	ldr	r2, [pc, #176]	@ (801df40 <ip4addr_ntoa_r+0xfc>)
 801de90:	fba2 2303 	umull	r2, r3, r2, r3
 801de94:	08db      	lsrs	r3, r3, #3
 801de96:	b2da      	uxtb	r2, r3
 801de98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801de9a:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 801de9c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801dea0:	1c5a      	adds	r2, r3, #1
 801dea2:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 801dea6:	4619      	mov	r1, r3
 801dea8:	7ffb      	ldrb	r3, [r7, #31]
 801deaa:	3330      	adds	r3, #48	@ 0x30
 801deac:	b2da      	uxtb	r2, r3
 801deae:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 801deb2:	443b      	add	r3, r7
 801deb4:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 801deb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801deba:	781b      	ldrb	r3, [r3, #0]
 801debc:	2b00      	cmp	r3, #0
 801debe:	d1d8      	bne.n	801de72 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 801dec0:	e011      	b.n	801dee6 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 801dec2:	6a3b      	ldr	r3, [r7, #32]
 801dec4:	1c5a      	adds	r2, r3, #1
 801dec6:	623a      	str	r2, [r7, #32]
 801dec8:	687a      	ldr	r2, [r7, #4]
 801deca:	429a      	cmp	r2, r3
 801decc:	dc01      	bgt.n	801ded2 <ip4addr_ntoa_r+0x8e>
        return NULL;
 801dece:	2300      	movs	r3, #0
 801ded0:	e030      	b.n	801df34 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 801ded2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801ded6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ded8:	1c59      	adds	r1, r3, #1
 801deda:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801dedc:	3230      	adds	r2, #48	@ 0x30
 801dede:	443a      	add	r2, r7
 801dee0:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 801dee4:	701a      	strb	r2, [r3, #0]
    while (i--) {
 801dee6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801deea:	1e5a      	subs	r2, r3, #1
 801deec:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 801def0:	2b00      	cmp	r3, #0
 801def2:	d1e6      	bne.n	801dec2 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 801def4:	6a3b      	ldr	r3, [r7, #32]
 801def6:	1c5a      	adds	r2, r3, #1
 801def8:	623a      	str	r2, [r7, #32]
 801defa:	687a      	ldr	r2, [r7, #4]
 801defc:	429a      	cmp	r2, r3
 801defe:	dc01      	bgt.n	801df04 <ip4addr_ntoa_r+0xc0>
      return NULL;
 801df00:	2300      	movs	r3, #0
 801df02:	e017      	b.n	801df34 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 801df04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801df06:	1c5a      	adds	r2, r3, #1
 801df08:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801df0a:	222e      	movs	r2, #46	@ 0x2e
 801df0c:	701a      	strb	r2, [r3, #0]
    ap++;
 801df0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801df10:	3301      	adds	r3, #1
 801df12:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 801df14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801df18:	3301      	adds	r3, #1
 801df1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801df1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801df22:	2b03      	cmp	r3, #3
 801df24:	d9a2      	bls.n	801de6c <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 801df26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801df28:	3b01      	subs	r3, #1
 801df2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801df2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801df2e:	2200      	movs	r2, #0
 801df30:	701a      	strb	r2, [r3, #0]
  return buf;
 801df32:	68bb      	ldr	r3, [r7, #8]
}
 801df34:	4618      	mov	r0, r3
 801df36:	3734      	adds	r7, #52	@ 0x34
 801df38:	46bd      	mov	sp, r7
 801df3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df3e:	4770      	bx	lr
 801df40:	cccccccd 	.word	0xcccccccd

0801df44 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801df44:	b580      	push	{r7, lr}
 801df46:	b084      	sub	sp, #16
 801df48:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801df4a:	2300      	movs	r3, #0
 801df4c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801df4e:	4b12      	ldr	r3, [pc, #72]	@ (801df98 <ip_reass_tmr+0x54>)
 801df50:	681b      	ldr	r3, [r3, #0]
 801df52:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801df54:	e018      	b.n	801df88 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801df56:	68fb      	ldr	r3, [r7, #12]
 801df58:	7fdb      	ldrb	r3, [r3, #31]
 801df5a:	2b00      	cmp	r3, #0
 801df5c:	d00b      	beq.n	801df76 <ip_reass_tmr+0x32>
      r->timer--;
 801df5e:	68fb      	ldr	r3, [r7, #12]
 801df60:	7fdb      	ldrb	r3, [r3, #31]
 801df62:	3b01      	subs	r3, #1
 801df64:	b2da      	uxtb	r2, r3
 801df66:	68fb      	ldr	r3, [r7, #12]
 801df68:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801df6a:	68fb      	ldr	r3, [r7, #12]
 801df6c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801df6e:	68fb      	ldr	r3, [r7, #12]
 801df70:	681b      	ldr	r3, [r3, #0]
 801df72:	60fb      	str	r3, [r7, #12]
 801df74:	e008      	b.n	801df88 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801df76:	68fb      	ldr	r3, [r7, #12]
 801df78:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801df7a:	68fb      	ldr	r3, [r7, #12]
 801df7c:	681b      	ldr	r3, [r3, #0]
 801df7e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801df80:	68b9      	ldr	r1, [r7, #8]
 801df82:	6878      	ldr	r0, [r7, #4]
 801df84:	f000 f80a 	bl	801df9c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801df88:	68fb      	ldr	r3, [r7, #12]
 801df8a:	2b00      	cmp	r3, #0
 801df8c:	d1e3      	bne.n	801df56 <ip_reass_tmr+0x12>
    }
  }
}
 801df8e:	bf00      	nop
 801df90:	bf00      	nop
 801df92:	3710      	adds	r7, #16
 801df94:	46bd      	mov	sp, r7
 801df96:	bd80      	pop	{r7, pc}
 801df98:	2002d5d4 	.word	0x2002d5d4

0801df9c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801df9c:	b580      	push	{r7, lr}
 801df9e:	b088      	sub	sp, #32
 801dfa0:	af00      	add	r7, sp, #0
 801dfa2:	6078      	str	r0, [r7, #4]
 801dfa4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801dfa6:	2300      	movs	r3, #0
 801dfa8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801dfaa:	683a      	ldr	r2, [r7, #0]
 801dfac:	687b      	ldr	r3, [r7, #4]
 801dfae:	429a      	cmp	r2, r3
 801dfb0:	d105      	bne.n	801dfbe <ip_reass_free_complete_datagram+0x22>
 801dfb2:	4b45      	ldr	r3, [pc, #276]	@ (801e0c8 <ip_reass_free_complete_datagram+0x12c>)
 801dfb4:	22ab      	movs	r2, #171	@ 0xab
 801dfb6:	4945      	ldr	r1, [pc, #276]	@ (801e0cc <ip_reass_free_complete_datagram+0x130>)
 801dfb8:	4845      	ldr	r0, [pc, #276]	@ (801e0d0 <ip_reass_free_complete_datagram+0x134>)
 801dfba:	f002 fbed 	bl	8020798 <iprintf>
  if (prev != NULL) {
 801dfbe:	683b      	ldr	r3, [r7, #0]
 801dfc0:	2b00      	cmp	r3, #0
 801dfc2:	d00a      	beq.n	801dfda <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801dfc4:	683b      	ldr	r3, [r7, #0]
 801dfc6:	681b      	ldr	r3, [r3, #0]
 801dfc8:	687a      	ldr	r2, [r7, #4]
 801dfca:	429a      	cmp	r2, r3
 801dfcc:	d005      	beq.n	801dfda <ip_reass_free_complete_datagram+0x3e>
 801dfce:	4b3e      	ldr	r3, [pc, #248]	@ (801e0c8 <ip_reass_free_complete_datagram+0x12c>)
 801dfd0:	22ad      	movs	r2, #173	@ 0xad
 801dfd2:	4940      	ldr	r1, [pc, #256]	@ (801e0d4 <ip_reass_free_complete_datagram+0x138>)
 801dfd4:	483e      	ldr	r0, [pc, #248]	@ (801e0d0 <ip_reass_free_complete_datagram+0x134>)
 801dfd6:	f002 fbdf 	bl	8020798 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801dfda:	687b      	ldr	r3, [r7, #4]
 801dfdc:	685b      	ldr	r3, [r3, #4]
 801dfde:	685b      	ldr	r3, [r3, #4]
 801dfe0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801dfe2:	697b      	ldr	r3, [r7, #20]
 801dfe4:	889b      	ldrh	r3, [r3, #4]
 801dfe6:	b29b      	uxth	r3, r3
 801dfe8:	2b00      	cmp	r3, #0
 801dfea:	d12a      	bne.n	801e042 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801dfec:	687b      	ldr	r3, [r7, #4]
 801dfee:	685b      	ldr	r3, [r3, #4]
 801dff0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801dff2:	697b      	ldr	r3, [r7, #20]
 801dff4:	681a      	ldr	r2, [r3, #0]
 801dff6:	687b      	ldr	r3, [r7, #4]
 801dff8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801dffa:	69bb      	ldr	r3, [r7, #24]
 801dffc:	6858      	ldr	r0, [r3, #4]
 801dffe:	687b      	ldr	r3, [r7, #4]
 801e000:	3308      	adds	r3, #8
 801e002:	2214      	movs	r2, #20
 801e004:	4619      	mov	r1, r3
 801e006:	f002 fdfa 	bl	8020bfe <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801e00a:	2101      	movs	r1, #1
 801e00c:	69b8      	ldr	r0, [r7, #24]
 801e00e:	f7ff fafb 	bl	801d608 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801e012:	69b8      	ldr	r0, [r7, #24]
 801e014:	f7f6 fdd8 	bl	8014bc8 <pbuf_clen>
 801e018:	4603      	mov	r3, r0
 801e01a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801e01c:	8bfa      	ldrh	r2, [r7, #30]
 801e01e:	8a7b      	ldrh	r3, [r7, #18]
 801e020:	4413      	add	r3, r2
 801e022:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e026:	db05      	blt.n	801e034 <ip_reass_free_complete_datagram+0x98>
 801e028:	4b27      	ldr	r3, [pc, #156]	@ (801e0c8 <ip_reass_free_complete_datagram+0x12c>)
 801e02a:	22bc      	movs	r2, #188	@ 0xbc
 801e02c:	492a      	ldr	r1, [pc, #168]	@ (801e0d8 <ip_reass_free_complete_datagram+0x13c>)
 801e02e:	4828      	ldr	r0, [pc, #160]	@ (801e0d0 <ip_reass_free_complete_datagram+0x134>)
 801e030:	f002 fbb2 	bl	8020798 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801e034:	8bfa      	ldrh	r2, [r7, #30]
 801e036:	8a7b      	ldrh	r3, [r7, #18]
 801e038:	4413      	add	r3, r2
 801e03a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801e03c:	69b8      	ldr	r0, [r7, #24]
 801e03e:	f7f6 fd1d 	bl	8014a7c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801e042:	687b      	ldr	r3, [r7, #4]
 801e044:	685b      	ldr	r3, [r3, #4]
 801e046:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801e048:	e01f      	b.n	801e08a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801e04a:	69bb      	ldr	r3, [r7, #24]
 801e04c:	685b      	ldr	r3, [r3, #4]
 801e04e:	617b      	str	r3, [r7, #20]
    pcur = p;
 801e050:	69bb      	ldr	r3, [r7, #24]
 801e052:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801e054:	697b      	ldr	r3, [r7, #20]
 801e056:	681b      	ldr	r3, [r3, #0]
 801e058:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801e05a:	68f8      	ldr	r0, [r7, #12]
 801e05c:	f7f6 fdb4 	bl	8014bc8 <pbuf_clen>
 801e060:	4603      	mov	r3, r0
 801e062:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801e064:	8bfa      	ldrh	r2, [r7, #30]
 801e066:	8a7b      	ldrh	r3, [r7, #18]
 801e068:	4413      	add	r3, r2
 801e06a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e06e:	db05      	blt.n	801e07c <ip_reass_free_complete_datagram+0xe0>
 801e070:	4b15      	ldr	r3, [pc, #84]	@ (801e0c8 <ip_reass_free_complete_datagram+0x12c>)
 801e072:	22cc      	movs	r2, #204	@ 0xcc
 801e074:	4918      	ldr	r1, [pc, #96]	@ (801e0d8 <ip_reass_free_complete_datagram+0x13c>)
 801e076:	4816      	ldr	r0, [pc, #88]	@ (801e0d0 <ip_reass_free_complete_datagram+0x134>)
 801e078:	f002 fb8e 	bl	8020798 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801e07c:	8bfa      	ldrh	r2, [r7, #30]
 801e07e:	8a7b      	ldrh	r3, [r7, #18]
 801e080:	4413      	add	r3, r2
 801e082:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801e084:	68f8      	ldr	r0, [r7, #12]
 801e086:	f7f6 fcf9 	bl	8014a7c <pbuf_free>
  while (p != NULL) {
 801e08a:	69bb      	ldr	r3, [r7, #24]
 801e08c:	2b00      	cmp	r3, #0
 801e08e:	d1dc      	bne.n	801e04a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801e090:	6839      	ldr	r1, [r7, #0]
 801e092:	6878      	ldr	r0, [r7, #4]
 801e094:	f000 f8ca 	bl	801e22c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801e098:	4b10      	ldr	r3, [pc, #64]	@ (801e0dc <ip_reass_free_complete_datagram+0x140>)
 801e09a:	881b      	ldrh	r3, [r3, #0]
 801e09c:	8bfa      	ldrh	r2, [r7, #30]
 801e09e:	429a      	cmp	r2, r3
 801e0a0:	d905      	bls.n	801e0ae <ip_reass_free_complete_datagram+0x112>
 801e0a2:	4b09      	ldr	r3, [pc, #36]	@ (801e0c8 <ip_reass_free_complete_datagram+0x12c>)
 801e0a4:	22d2      	movs	r2, #210	@ 0xd2
 801e0a6:	490e      	ldr	r1, [pc, #56]	@ (801e0e0 <ip_reass_free_complete_datagram+0x144>)
 801e0a8:	4809      	ldr	r0, [pc, #36]	@ (801e0d0 <ip_reass_free_complete_datagram+0x134>)
 801e0aa:	f002 fb75 	bl	8020798 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801e0ae:	4b0b      	ldr	r3, [pc, #44]	@ (801e0dc <ip_reass_free_complete_datagram+0x140>)
 801e0b0:	881a      	ldrh	r2, [r3, #0]
 801e0b2:	8bfb      	ldrh	r3, [r7, #30]
 801e0b4:	1ad3      	subs	r3, r2, r3
 801e0b6:	b29a      	uxth	r2, r3
 801e0b8:	4b08      	ldr	r3, [pc, #32]	@ (801e0dc <ip_reass_free_complete_datagram+0x140>)
 801e0ba:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801e0bc:	8bfb      	ldrh	r3, [r7, #30]
}
 801e0be:	4618      	mov	r0, r3
 801e0c0:	3720      	adds	r7, #32
 801e0c2:	46bd      	mov	sp, r7
 801e0c4:	bd80      	pop	{r7, pc}
 801e0c6:	bf00      	nop
 801e0c8:	08025bac 	.word	0x08025bac
 801e0cc:	08025be8 	.word	0x08025be8
 801e0d0:	08025bf4 	.word	0x08025bf4
 801e0d4:	08025c1c 	.word	0x08025c1c
 801e0d8:	08025c30 	.word	0x08025c30
 801e0dc:	2002d5d8 	.word	0x2002d5d8
 801e0e0:	08025c50 	.word	0x08025c50

0801e0e4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801e0e4:	b580      	push	{r7, lr}
 801e0e6:	b08a      	sub	sp, #40	@ 0x28
 801e0e8:	af00      	add	r7, sp, #0
 801e0ea:	6078      	str	r0, [r7, #4]
 801e0ec:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801e0ee:	2300      	movs	r3, #0
 801e0f0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801e0f2:	2300      	movs	r3, #0
 801e0f4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801e0f6:	2300      	movs	r3, #0
 801e0f8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801e0fa:	2300      	movs	r3, #0
 801e0fc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801e0fe:	2300      	movs	r3, #0
 801e100:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801e102:	4b28      	ldr	r3, [pc, #160]	@ (801e1a4 <ip_reass_remove_oldest_datagram+0xc0>)
 801e104:	681b      	ldr	r3, [r3, #0]
 801e106:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801e108:	e030      	b.n	801e16c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801e10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e10c:	695a      	ldr	r2, [r3, #20]
 801e10e:	687b      	ldr	r3, [r7, #4]
 801e110:	68db      	ldr	r3, [r3, #12]
 801e112:	429a      	cmp	r2, r3
 801e114:	d10c      	bne.n	801e130 <ip_reass_remove_oldest_datagram+0x4c>
 801e116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e118:	699a      	ldr	r2, [r3, #24]
 801e11a:	687b      	ldr	r3, [r7, #4]
 801e11c:	691b      	ldr	r3, [r3, #16]
 801e11e:	429a      	cmp	r2, r3
 801e120:	d106      	bne.n	801e130 <ip_reass_remove_oldest_datagram+0x4c>
 801e122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e124:	899a      	ldrh	r2, [r3, #12]
 801e126:	687b      	ldr	r3, [r7, #4]
 801e128:	889b      	ldrh	r3, [r3, #4]
 801e12a:	b29b      	uxth	r3, r3
 801e12c:	429a      	cmp	r2, r3
 801e12e:	d014      	beq.n	801e15a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801e130:	693b      	ldr	r3, [r7, #16]
 801e132:	3301      	adds	r3, #1
 801e134:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801e136:	6a3b      	ldr	r3, [r7, #32]
 801e138:	2b00      	cmp	r3, #0
 801e13a:	d104      	bne.n	801e146 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801e13c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e13e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801e140:	69fb      	ldr	r3, [r7, #28]
 801e142:	61bb      	str	r3, [r7, #24]
 801e144:	e009      	b.n	801e15a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801e146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e148:	7fda      	ldrb	r2, [r3, #31]
 801e14a:	6a3b      	ldr	r3, [r7, #32]
 801e14c:	7fdb      	ldrb	r3, [r3, #31]
 801e14e:	429a      	cmp	r2, r3
 801e150:	d803      	bhi.n	801e15a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801e152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e154:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801e156:	69fb      	ldr	r3, [r7, #28]
 801e158:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801e15a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e15c:	681b      	ldr	r3, [r3, #0]
 801e15e:	2b00      	cmp	r3, #0
 801e160:	d001      	beq.n	801e166 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801e162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e164:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801e166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e168:	681b      	ldr	r3, [r3, #0]
 801e16a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801e16c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e16e:	2b00      	cmp	r3, #0
 801e170:	d1cb      	bne.n	801e10a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801e172:	6a3b      	ldr	r3, [r7, #32]
 801e174:	2b00      	cmp	r3, #0
 801e176:	d008      	beq.n	801e18a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801e178:	69b9      	ldr	r1, [r7, #24]
 801e17a:	6a38      	ldr	r0, [r7, #32]
 801e17c:	f7ff ff0e 	bl	801df9c <ip_reass_free_complete_datagram>
 801e180:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801e182:	697a      	ldr	r2, [r7, #20]
 801e184:	68fb      	ldr	r3, [r7, #12]
 801e186:	4413      	add	r3, r2
 801e188:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801e18a:	697a      	ldr	r2, [r7, #20]
 801e18c:	683b      	ldr	r3, [r7, #0]
 801e18e:	429a      	cmp	r2, r3
 801e190:	da02      	bge.n	801e198 <ip_reass_remove_oldest_datagram+0xb4>
 801e192:	693b      	ldr	r3, [r7, #16]
 801e194:	2b01      	cmp	r3, #1
 801e196:	dcac      	bgt.n	801e0f2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801e198:	697b      	ldr	r3, [r7, #20]
}
 801e19a:	4618      	mov	r0, r3
 801e19c:	3728      	adds	r7, #40	@ 0x28
 801e19e:	46bd      	mov	sp, r7
 801e1a0:	bd80      	pop	{r7, pc}
 801e1a2:	bf00      	nop
 801e1a4:	2002d5d4 	.word	0x2002d5d4

0801e1a8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801e1a8:	b580      	push	{r7, lr}
 801e1aa:	b084      	sub	sp, #16
 801e1ac:	af00      	add	r7, sp, #0
 801e1ae:	6078      	str	r0, [r7, #4]
 801e1b0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801e1b2:	2004      	movs	r0, #4
 801e1b4:	f7f5 fc00 	bl	80139b8 <memp_malloc>
 801e1b8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801e1ba:	68fb      	ldr	r3, [r7, #12]
 801e1bc:	2b00      	cmp	r3, #0
 801e1be:	d116      	bne.n	801e1ee <ip_reass_enqueue_new_datagram+0x46>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801e1c0:	6839      	ldr	r1, [r7, #0]
 801e1c2:	6878      	ldr	r0, [r7, #4]
 801e1c4:	f7ff ff8e 	bl	801e0e4 <ip_reass_remove_oldest_datagram>
 801e1c8:	4602      	mov	r2, r0
 801e1ca:	683b      	ldr	r3, [r7, #0]
 801e1cc:	4293      	cmp	r3, r2
 801e1ce:	dc03      	bgt.n	801e1d8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801e1d0:	2004      	movs	r0, #4
 801e1d2:	f7f5 fbf1 	bl	80139b8 <memp_malloc>
 801e1d6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801e1d8:	68fb      	ldr	r3, [r7, #12]
 801e1da:	2b00      	cmp	r3, #0
 801e1dc:	d107      	bne.n	801e1ee <ip_reass_enqueue_new_datagram+0x46>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
 801e1de:	4b11      	ldr	r3, [pc, #68]	@ (801e224 <ip_reass_enqueue_new_datagram+0x7c>)
 801e1e0:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801e1e2:	3301      	adds	r3, #1
 801e1e4:	b29a      	uxth	r2, r3
 801e1e6:	4b0f      	ldr	r3, [pc, #60]	@ (801e224 <ip_reass_enqueue_new_datagram+0x7c>)
 801e1e8:	879a      	strh	r2, [r3, #60]	@ 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801e1ea:	2300      	movs	r3, #0
 801e1ec:	e016      	b.n	801e21c <ip_reass_enqueue_new_datagram+0x74>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801e1ee:	2220      	movs	r2, #32
 801e1f0:	2100      	movs	r1, #0
 801e1f2:	68f8      	ldr	r0, [r7, #12]
 801e1f4:	f002 fc30 	bl	8020a58 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801e1f8:	68fb      	ldr	r3, [r7, #12]
 801e1fa:	220f      	movs	r2, #15
 801e1fc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801e1fe:	4b0a      	ldr	r3, [pc, #40]	@ (801e228 <ip_reass_enqueue_new_datagram+0x80>)
 801e200:	681a      	ldr	r2, [r3, #0]
 801e202:	68fb      	ldr	r3, [r7, #12]
 801e204:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801e206:	4a08      	ldr	r2, [pc, #32]	@ (801e228 <ip_reass_enqueue_new_datagram+0x80>)
 801e208:	68fb      	ldr	r3, [r7, #12]
 801e20a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801e20c:	68fb      	ldr	r3, [r7, #12]
 801e20e:	3308      	adds	r3, #8
 801e210:	2214      	movs	r2, #20
 801e212:	6879      	ldr	r1, [r7, #4]
 801e214:	4618      	mov	r0, r3
 801e216:	f002 fcf2 	bl	8020bfe <memcpy>
  return ipr;
 801e21a:	68fb      	ldr	r3, [r7, #12]
}
 801e21c:	4618      	mov	r0, r3
 801e21e:	3710      	adds	r7, #16
 801e220:	46bd      	mov	sp, r7
 801e222:	bd80      	pop	{r7, pc}
 801e224:	2002d36c 	.word	0x2002d36c
 801e228:	2002d5d4 	.word	0x2002d5d4

0801e22c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801e22c:	b580      	push	{r7, lr}
 801e22e:	b082      	sub	sp, #8
 801e230:	af00      	add	r7, sp, #0
 801e232:	6078      	str	r0, [r7, #4]
 801e234:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801e236:	4b10      	ldr	r3, [pc, #64]	@ (801e278 <ip_reass_dequeue_datagram+0x4c>)
 801e238:	681b      	ldr	r3, [r3, #0]
 801e23a:	687a      	ldr	r2, [r7, #4]
 801e23c:	429a      	cmp	r2, r3
 801e23e:	d104      	bne.n	801e24a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801e240:	687b      	ldr	r3, [r7, #4]
 801e242:	681b      	ldr	r3, [r3, #0]
 801e244:	4a0c      	ldr	r2, [pc, #48]	@ (801e278 <ip_reass_dequeue_datagram+0x4c>)
 801e246:	6013      	str	r3, [r2, #0]
 801e248:	e00d      	b.n	801e266 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801e24a:	683b      	ldr	r3, [r7, #0]
 801e24c:	2b00      	cmp	r3, #0
 801e24e:	d106      	bne.n	801e25e <ip_reass_dequeue_datagram+0x32>
 801e250:	4b0a      	ldr	r3, [pc, #40]	@ (801e27c <ip_reass_dequeue_datagram+0x50>)
 801e252:	f240 1245 	movw	r2, #325	@ 0x145
 801e256:	490a      	ldr	r1, [pc, #40]	@ (801e280 <ip_reass_dequeue_datagram+0x54>)
 801e258:	480a      	ldr	r0, [pc, #40]	@ (801e284 <ip_reass_dequeue_datagram+0x58>)
 801e25a:	f002 fa9d 	bl	8020798 <iprintf>
    prev->next = ipr->next;
 801e25e:	687b      	ldr	r3, [r7, #4]
 801e260:	681a      	ldr	r2, [r3, #0]
 801e262:	683b      	ldr	r3, [r7, #0]
 801e264:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801e266:	6879      	ldr	r1, [r7, #4]
 801e268:	2004      	movs	r0, #4
 801e26a:	f7f5 fc21 	bl	8013ab0 <memp_free>
}
 801e26e:	bf00      	nop
 801e270:	3708      	adds	r7, #8
 801e272:	46bd      	mov	sp, r7
 801e274:	bd80      	pop	{r7, pc}
 801e276:	bf00      	nop
 801e278:	2002d5d4 	.word	0x2002d5d4
 801e27c:	08025bac 	.word	0x08025bac
 801e280:	08025c74 	.word	0x08025c74
 801e284:	08025bf4 	.word	0x08025bf4

0801e288 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801e288:	b580      	push	{r7, lr}
 801e28a:	b08c      	sub	sp, #48	@ 0x30
 801e28c:	af00      	add	r7, sp, #0
 801e28e:	60f8      	str	r0, [r7, #12]
 801e290:	60b9      	str	r1, [r7, #8]
 801e292:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801e294:	2300      	movs	r3, #0
 801e296:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801e298:	2301      	movs	r3, #1
 801e29a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801e29c:	68bb      	ldr	r3, [r7, #8]
 801e29e:	685b      	ldr	r3, [r3, #4]
 801e2a0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801e2a2:	69fb      	ldr	r3, [r7, #28]
 801e2a4:	885b      	ldrh	r3, [r3, #2]
 801e2a6:	b29b      	uxth	r3, r3
 801e2a8:	4618      	mov	r0, r3
 801e2aa:	f7f4 fdb9 	bl	8012e20 <lwip_htons>
 801e2ae:	4603      	mov	r3, r0
 801e2b0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801e2b2:	69fb      	ldr	r3, [r7, #28]
 801e2b4:	781b      	ldrb	r3, [r3, #0]
 801e2b6:	f003 030f 	and.w	r3, r3, #15
 801e2ba:	b2db      	uxtb	r3, r3
 801e2bc:	009b      	lsls	r3, r3, #2
 801e2be:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801e2c0:	7e7b      	ldrb	r3, [r7, #25]
 801e2c2:	b29b      	uxth	r3, r3
 801e2c4:	8b7a      	ldrh	r2, [r7, #26]
 801e2c6:	429a      	cmp	r2, r3
 801e2c8:	d202      	bcs.n	801e2d0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e2ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e2ce:	e135      	b.n	801e53c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801e2d0:	7e7b      	ldrb	r3, [r7, #25]
 801e2d2:	b29b      	uxth	r3, r3
 801e2d4:	8b7a      	ldrh	r2, [r7, #26]
 801e2d6:	1ad3      	subs	r3, r2, r3
 801e2d8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801e2da:	69fb      	ldr	r3, [r7, #28]
 801e2dc:	88db      	ldrh	r3, [r3, #6]
 801e2de:	b29b      	uxth	r3, r3
 801e2e0:	4618      	mov	r0, r3
 801e2e2:	f7f4 fd9d 	bl	8012e20 <lwip_htons>
 801e2e6:	4603      	mov	r3, r0
 801e2e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e2ec:	b29b      	uxth	r3, r3
 801e2ee:	00db      	lsls	r3, r3, #3
 801e2f0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801e2f2:	68bb      	ldr	r3, [r7, #8]
 801e2f4:	685b      	ldr	r3, [r3, #4]
 801e2f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801e2f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e2fa:	2200      	movs	r2, #0
 801e2fc:	701a      	strb	r2, [r3, #0]
 801e2fe:	2200      	movs	r2, #0
 801e300:	705a      	strb	r2, [r3, #1]
 801e302:	2200      	movs	r2, #0
 801e304:	709a      	strb	r2, [r3, #2]
 801e306:	2200      	movs	r2, #0
 801e308:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801e30a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e30c:	8afa      	ldrh	r2, [r7, #22]
 801e30e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801e310:	8afa      	ldrh	r2, [r7, #22]
 801e312:	8b7b      	ldrh	r3, [r7, #26]
 801e314:	4413      	add	r3, r2
 801e316:	b29a      	uxth	r2, r3
 801e318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e31a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801e31c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e31e:	88db      	ldrh	r3, [r3, #6]
 801e320:	b29b      	uxth	r3, r3
 801e322:	8afa      	ldrh	r2, [r7, #22]
 801e324:	429a      	cmp	r2, r3
 801e326:	d902      	bls.n	801e32e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e328:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e32c:	e106      	b.n	801e53c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801e32e:	68fb      	ldr	r3, [r7, #12]
 801e330:	685b      	ldr	r3, [r3, #4]
 801e332:	627b      	str	r3, [r7, #36]	@ 0x24
 801e334:	e068      	b.n	801e408 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801e336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e338:	685b      	ldr	r3, [r3, #4]
 801e33a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801e33c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e33e:	889b      	ldrh	r3, [r3, #4]
 801e340:	b29a      	uxth	r2, r3
 801e342:	693b      	ldr	r3, [r7, #16]
 801e344:	889b      	ldrh	r3, [r3, #4]
 801e346:	b29b      	uxth	r3, r3
 801e348:	429a      	cmp	r2, r3
 801e34a:	d235      	bcs.n	801e3b8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801e34c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e34e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801e350:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801e352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e354:	2b00      	cmp	r3, #0
 801e356:	d020      	beq.n	801e39a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801e358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e35a:	889b      	ldrh	r3, [r3, #4]
 801e35c:	b29a      	uxth	r2, r3
 801e35e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e360:	88db      	ldrh	r3, [r3, #6]
 801e362:	b29b      	uxth	r3, r3
 801e364:	429a      	cmp	r2, r3
 801e366:	d307      	bcc.n	801e378 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801e368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e36a:	88db      	ldrh	r3, [r3, #6]
 801e36c:	b29a      	uxth	r2, r3
 801e36e:	693b      	ldr	r3, [r7, #16]
 801e370:	889b      	ldrh	r3, [r3, #4]
 801e372:	b29b      	uxth	r3, r3
 801e374:	429a      	cmp	r2, r3
 801e376:	d902      	bls.n	801e37e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e378:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e37c:	e0de      	b.n	801e53c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801e37e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e380:	68ba      	ldr	r2, [r7, #8]
 801e382:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801e384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e386:	88db      	ldrh	r3, [r3, #6]
 801e388:	b29a      	uxth	r2, r3
 801e38a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e38c:	889b      	ldrh	r3, [r3, #4]
 801e38e:	b29b      	uxth	r3, r3
 801e390:	429a      	cmp	r2, r3
 801e392:	d03d      	beq.n	801e410 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801e394:	2300      	movs	r3, #0
 801e396:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801e398:	e03a      	b.n	801e410 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801e39a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e39c:	88db      	ldrh	r3, [r3, #6]
 801e39e:	b29a      	uxth	r2, r3
 801e3a0:	693b      	ldr	r3, [r7, #16]
 801e3a2:	889b      	ldrh	r3, [r3, #4]
 801e3a4:	b29b      	uxth	r3, r3
 801e3a6:	429a      	cmp	r2, r3
 801e3a8:	d902      	bls.n	801e3b0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e3aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e3ae:	e0c5      	b.n	801e53c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801e3b0:	68fb      	ldr	r3, [r7, #12]
 801e3b2:	68ba      	ldr	r2, [r7, #8]
 801e3b4:	605a      	str	r2, [r3, #4]
      break;
 801e3b6:	e02b      	b.n	801e410 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801e3b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e3ba:	889b      	ldrh	r3, [r3, #4]
 801e3bc:	b29a      	uxth	r2, r3
 801e3be:	693b      	ldr	r3, [r7, #16]
 801e3c0:	889b      	ldrh	r3, [r3, #4]
 801e3c2:	b29b      	uxth	r3, r3
 801e3c4:	429a      	cmp	r2, r3
 801e3c6:	d102      	bne.n	801e3ce <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e3c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e3cc:	e0b6      	b.n	801e53c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801e3ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e3d0:	889b      	ldrh	r3, [r3, #4]
 801e3d2:	b29a      	uxth	r2, r3
 801e3d4:	693b      	ldr	r3, [r7, #16]
 801e3d6:	88db      	ldrh	r3, [r3, #6]
 801e3d8:	b29b      	uxth	r3, r3
 801e3da:	429a      	cmp	r2, r3
 801e3dc:	d202      	bcs.n	801e3e4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e3de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e3e2:	e0ab      	b.n	801e53c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801e3e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e3e6:	2b00      	cmp	r3, #0
 801e3e8:	d009      	beq.n	801e3fe <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801e3ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e3ec:	88db      	ldrh	r3, [r3, #6]
 801e3ee:	b29a      	uxth	r2, r3
 801e3f0:	693b      	ldr	r3, [r7, #16]
 801e3f2:	889b      	ldrh	r3, [r3, #4]
 801e3f4:	b29b      	uxth	r3, r3
 801e3f6:	429a      	cmp	r2, r3
 801e3f8:	d001      	beq.n	801e3fe <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801e3fa:	2300      	movs	r3, #0
 801e3fc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801e3fe:	693b      	ldr	r3, [r7, #16]
 801e400:	681b      	ldr	r3, [r3, #0]
 801e402:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801e404:	693b      	ldr	r3, [r7, #16]
 801e406:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801e408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e40a:	2b00      	cmp	r3, #0
 801e40c:	d193      	bne.n	801e336 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801e40e:	e000      	b.n	801e412 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801e410:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801e412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e414:	2b00      	cmp	r3, #0
 801e416:	d12d      	bne.n	801e474 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801e418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e41a:	2b00      	cmp	r3, #0
 801e41c:	d01c      	beq.n	801e458 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801e41e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e420:	88db      	ldrh	r3, [r3, #6]
 801e422:	b29a      	uxth	r2, r3
 801e424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e426:	889b      	ldrh	r3, [r3, #4]
 801e428:	b29b      	uxth	r3, r3
 801e42a:	429a      	cmp	r2, r3
 801e42c:	d906      	bls.n	801e43c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801e42e:	4b45      	ldr	r3, [pc, #276]	@ (801e544 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e430:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801e434:	4944      	ldr	r1, [pc, #272]	@ (801e548 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801e436:	4845      	ldr	r0, [pc, #276]	@ (801e54c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e438:	f002 f9ae 	bl	8020798 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801e43c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e43e:	68ba      	ldr	r2, [r7, #8]
 801e440:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801e442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e444:	88db      	ldrh	r3, [r3, #6]
 801e446:	b29a      	uxth	r2, r3
 801e448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e44a:	889b      	ldrh	r3, [r3, #4]
 801e44c:	b29b      	uxth	r3, r3
 801e44e:	429a      	cmp	r2, r3
 801e450:	d010      	beq.n	801e474 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801e452:	2300      	movs	r3, #0
 801e454:	623b      	str	r3, [r7, #32]
 801e456:	e00d      	b.n	801e474 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801e458:	68fb      	ldr	r3, [r7, #12]
 801e45a:	685b      	ldr	r3, [r3, #4]
 801e45c:	2b00      	cmp	r3, #0
 801e45e:	d006      	beq.n	801e46e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801e460:	4b38      	ldr	r3, [pc, #224]	@ (801e544 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e462:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801e466:	493a      	ldr	r1, [pc, #232]	@ (801e550 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801e468:	4838      	ldr	r0, [pc, #224]	@ (801e54c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e46a:	f002 f995 	bl	8020798 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801e46e:	68fb      	ldr	r3, [r7, #12]
 801e470:	68ba      	ldr	r2, [r7, #8]
 801e472:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801e474:	687b      	ldr	r3, [r7, #4]
 801e476:	2b00      	cmp	r3, #0
 801e478:	d105      	bne.n	801e486 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801e47a:	68fb      	ldr	r3, [r7, #12]
 801e47c:	7f9b      	ldrb	r3, [r3, #30]
 801e47e:	f003 0301 	and.w	r3, r3, #1
 801e482:	2b00      	cmp	r3, #0
 801e484:	d059      	beq.n	801e53a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801e486:	6a3b      	ldr	r3, [r7, #32]
 801e488:	2b00      	cmp	r3, #0
 801e48a:	d04f      	beq.n	801e52c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801e48c:	68fb      	ldr	r3, [r7, #12]
 801e48e:	685b      	ldr	r3, [r3, #4]
 801e490:	2b00      	cmp	r3, #0
 801e492:	d006      	beq.n	801e4a2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801e494:	68fb      	ldr	r3, [r7, #12]
 801e496:	685b      	ldr	r3, [r3, #4]
 801e498:	685b      	ldr	r3, [r3, #4]
 801e49a:	889b      	ldrh	r3, [r3, #4]
 801e49c:	b29b      	uxth	r3, r3
 801e49e:	2b00      	cmp	r3, #0
 801e4a0:	d002      	beq.n	801e4a8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801e4a2:	2300      	movs	r3, #0
 801e4a4:	623b      	str	r3, [r7, #32]
 801e4a6:	e041      	b.n	801e52c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801e4a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e4aa:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801e4ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e4ae:	681b      	ldr	r3, [r3, #0]
 801e4b0:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801e4b2:	e012      	b.n	801e4da <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801e4b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e4b6:	685b      	ldr	r3, [r3, #4]
 801e4b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801e4ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e4bc:	88db      	ldrh	r3, [r3, #6]
 801e4be:	b29a      	uxth	r2, r3
 801e4c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e4c2:	889b      	ldrh	r3, [r3, #4]
 801e4c4:	b29b      	uxth	r3, r3
 801e4c6:	429a      	cmp	r2, r3
 801e4c8:	d002      	beq.n	801e4d0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801e4ca:	2300      	movs	r3, #0
 801e4cc:	623b      	str	r3, [r7, #32]
            break;
 801e4ce:	e007      	b.n	801e4e0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801e4d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e4d2:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801e4d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e4d6:	681b      	ldr	r3, [r3, #0]
 801e4d8:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801e4da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e4dc:	2b00      	cmp	r3, #0
 801e4de:	d1e9      	bne.n	801e4b4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801e4e0:	6a3b      	ldr	r3, [r7, #32]
 801e4e2:	2b00      	cmp	r3, #0
 801e4e4:	d022      	beq.n	801e52c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801e4e6:	68fb      	ldr	r3, [r7, #12]
 801e4e8:	685b      	ldr	r3, [r3, #4]
 801e4ea:	2b00      	cmp	r3, #0
 801e4ec:	d106      	bne.n	801e4fc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801e4ee:	4b15      	ldr	r3, [pc, #84]	@ (801e544 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e4f0:	f240 12df 	movw	r2, #479	@ 0x1df
 801e4f4:	4917      	ldr	r1, [pc, #92]	@ (801e554 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801e4f6:	4815      	ldr	r0, [pc, #84]	@ (801e54c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e4f8:	f002 f94e 	bl	8020798 <iprintf>
          LWIP_ASSERT("sanity check",
 801e4fc:	68fb      	ldr	r3, [r7, #12]
 801e4fe:	685b      	ldr	r3, [r3, #4]
 801e500:	685b      	ldr	r3, [r3, #4]
 801e502:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e504:	429a      	cmp	r2, r3
 801e506:	d106      	bne.n	801e516 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801e508:	4b0e      	ldr	r3, [pc, #56]	@ (801e544 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e50a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801e50e:	4911      	ldr	r1, [pc, #68]	@ (801e554 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801e510:	480e      	ldr	r0, [pc, #56]	@ (801e54c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e512:	f002 f941 	bl	8020798 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801e516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e518:	681b      	ldr	r3, [r3, #0]
 801e51a:	2b00      	cmp	r3, #0
 801e51c:	d006      	beq.n	801e52c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801e51e:	4b09      	ldr	r3, [pc, #36]	@ (801e544 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e520:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801e524:	490c      	ldr	r1, [pc, #48]	@ (801e558 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801e526:	4809      	ldr	r0, [pc, #36]	@ (801e54c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e528:	f002 f936 	bl	8020798 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801e52c:	6a3b      	ldr	r3, [r7, #32]
 801e52e:	2b00      	cmp	r3, #0
 801e530:	bf14      	ite	ne
 801e532:	2301      	movne	r3, #1
 801e534:	2300      	moveq	r3, #0
 801e536:	b2db      	uxtb	r3, r3
 801e538:	e000      	b.n	801e53c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801e53a:	2300      	movs	r3, #0
}
 801e53c:	4618      	mov	r0, r3
 801e53e:	3730      	adds	r7, #48	@ 0x30
 801e540:	46bd      	mov	sp, r7
 801e542:	bd80      	pop	{r7, pc}
 801e544:	08025bac 	.word	0x08025bac
 801e548:	08025c90 	.word	0x08025c90
 801e54c:	08025bf4 	.word	0x08025bf4
 801e550:	08025cb0 	.word	0x08025cb0
 801e554:	08025ce8 	.word	0x08025ce8
 801e558:	08025cf8 	.word	0x08025cf8

0801e55c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801e55c:	b580      	push	{r7, lr}
 801e55e:	b08e      	sub	sp, #56	@ 0x38
 801e560:	af00      	add	r7, sp, #0
 801e562:	6078      	str	r0, [r7, #4]
  u16_t offset, len, clen;
  u8_t hlen;
  int valid;
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
 801e564:	4b9d      	ldr	r3, [pc, #628]	@ (801e7dc <ip4_reass+0x280>)
 801e566:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801e568:	3301      	adds	r3, #1
 801e56a:	b29a      	uxth	r2, r3
 801e56c:	4b9b      	ldr	r3, [pc, #620]	@ (801e7dc <ip4_reass+0x280>)
 801e56e:	865a      	strh	r2, [r3, #50]	@ 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801e570:	687b      	ldr	r3, [r7, #4]
 801e572:	685b      	ldr	r3, [r3, #4]
 801e574:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801e576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e578:	781b      	ldrb	r3, [r3, #0]
 801e57a:	f003 030f 	and.w	r3, r3, #15
 801e57e:	b2db      	uxtb	r3, r3
 801e580:	009b      	lsls	r3, r3, #2
 801e582:	b2db      	uxtb	r3, r3
 801e584:	2b14      	cmp	r3, #20
 801e586:	d008      	beq.n	801e59a <ip4_reass+0x3e>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
 801e588:	4b94      	ldr	r3, [pc, #592]	@ (801e7dc <ip4_reass+0x280>)
 801e58a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 801e58e:	3301      	adds	r3, #1
 801e590:	b29a      	uxth	r2, r3
 801e592:	4b92      	ldr	r3, [pc, #584]	@ (801e7dc <ip4_reass+0x280>)
 801e594:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    goto nullreturn;
 801e598:	e17c      	b.n	801e894 <ip4_reass+0x338>
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801e59a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e59c:	88db      	ldrh	r3, [r3, #6]
 801e59e:	b29b      	uxth	r3, r3
 801e5a0:	4618      	mov	r0, r3
 801e5a2:	f7f4 fc3d 	bl	8012e20 <lwip_htons>
 801e5a6:	4603      	mov	r3, r0
 801e5a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e5ac:	b29b      	uxth	r3, r3
 801e5ae:	00db      	lsls	r3, r3, #3
 801e5b0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801e5b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e5b4:	885b      	ldrh	r3, [r3, #2]
 801e5b6:	b29b      	uxth	r3, r3
 801e5b8:	4618      	mov	r0, r3
 801e5ba:	f7f4 fc31 	bl	8012e20 <lwip_htons>
 801e5be:	4603      	mov	r3, r0
 801e5c0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801e5c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e5c4:	781b      	ldrb	r3, [r3, #0]
 801e5c6:	f003 030f 	and.w	r3, r3, #15
 801e5ca:	b2db      	uxtb	r3, r3
 801e5cc:	009b      	lsls	r3, r3, #2
 801e5ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801e5d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801e5d6:	b29b      	uxth	r3, r3
 801e5d8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801e5da:	429a      	cmp	r2, r3
 801e5dc:	f0c0 8157 	bcc.w	801e88e <ip4_reass+0x332>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801e5e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801e5e4:	b29b      	uxth	r3, r3
 801e5e6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801e5e8:	1ad3      	subs	r3, r2, r3
 801e5ea:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801e5ec:	6878      	ldr	r0, [r7, #4]
 801e5ee:	f7f6 faeb 	bl	8014bc8 <pbuf_clen>
 801e5f2:	4603      	mov	r3, r0
 801e5f4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801e5f6:	4b7a      	ldr	r3, [pc, #488]	@ (801e7e0 <ip4_reass+0x284>)
 801e5f8:	881b      	ldrh	r3, [r3, #0]
 801e5fa:	461a      	mov	r2, r3
 801e5fc:	8c3b      	ldrh	r3, [r7, #32]
 801e5fe:	4413      	add	r3, r2
 801e600:	2b0a      	cmp	r3, #10
 801e602:	dd15      	ble.n	801e630 <ip4_reass+0xd4>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801e604:	8c3b      	ldrh	r3, [r7, #32]
 801e606:	4619      	mov	r1, r3
 801e608:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801e60a:	f7ff fd6b 	bl	801e0e4 <ip_reass_remove_oldest_datagram>
 801e60e:	4603      	mov	r3, r0
 801e610:	2b00      	cmp	r3, #0
 801e612:	d006      	beq.n	801e622 <ip4_reass+0xc6>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801e614:	4b72      	ldr	r3, [pc, #456]	@ (801e7e0 <ip4_reass+0x284>)
 801e616:	881b      	ldrh	r3, [r3, #0]
 801e618:	461a      	mov	r2, r3
 801e61a:	8c3b      	ldrh	r3, [r7, #32]
 801e61c:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801e61e:	2b0a      	cmp	r3, #10
 801e620:	dd06      	ble.n	801e630 <ip4_reass+0xd4>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
                                   ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
 801e622:	4b6e      	ldr	r3, [pc, #440]	@ (801e7dc <ip4_reass+0x280>)
 801e624:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801e626:	3301      	adds	r3, #1
 801e628:	b29a      	uxth	r2, r3
 801e62a:	4b6c      	ldr	r3, [pc, #432]	@ (801e7dc <ip4_reass+0x280>)
 801e62c:	879a      	strh	r2, [r3, #60]	@ 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
 801e62e:	e131      	b.n	801e894 <ip4_reass+0x338>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801e630:	4b6c      	ldr	r3, [pc, #432]	@ (801e7e4 <ip4_reass+0x288>)
 801e632:	681b      	ldr	r3, [r3, #0]
 801e634:	633b      	str	r3, [r7, #48]	@ 0x30
 801e636:	e01e      	b.n	801e676 <ip4_reass+0x11a>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801e638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e63a:	695a      	ldr	r2, [r3, #20]
 801e63c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e63e:	68db      	ldr	r3, [r3, #12]
 801e640:	429a      	cmp	r2, r3
 801e642:	d115      	bne.n	801e670 <ip4_reass+0x114>
 801e644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e646:	699a      	ldr	r2, [r3, #24]
 801e648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e64a:	691b      	ldr	r3, [r3, #16]
 801e64c:	429a      	cmp	r2, r3
 801e64e:	d10f      	bne.n	801e670 <ip4_reass+0x114>
 801e650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e652:	899a      	ldrh	r2, [r3, #12]
 801e654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e656:	889b      	ldrh	r3, [r3, #4]
 801e658:	b29b      	uxth	r3, r3
 801e65a:	429a      	cmp	r2, r3
 801e65c:	d108      	bne.n	801e670 <ip4_reass+0x114>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
 801e65e:	4b5f      	ldr	r3, [pc, #380]	@ (801e7dc <ip4_reass+0x280>)
 801e660:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801e664:	3301      	adds	r3, #1
 801e666:	b29a      	uxth	r2, r3
 801e668:	4b5c      	ldr	r3, [pc, #368]	@ (801e7dc <ip4_reass+0x280>)
 801e66a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      break;
 801e66e:	e005      	b.n	801e67c <ip4_reass+0x120>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801e670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e672:	681b      	ldr	r3, [r3, #0]
 801e674:	633b      	str	r3, [r7, #48]	@ 0x30
 801e676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e678:	2b00      	cmp	r3, #0
 801e67a:	d1dd      	bne.n	801e638 <ip4_reass+0xdc>
    }
  }

  if (ipr == NULL) {
 801e67c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e67e:	2b00      	cmp	r3, #0
 801e680:	d109      	bne.n	801e696 <ip4_reass+0x13a>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801e682:	8c3b      	ldrh	r3, [r7, #32]
 801e684:	4619      	mov	r1, r3
 801e686:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801e688:	f7ff fd8e 	bl	801e1a8 <ip_reass_enqueue_new_datagram>
 801e68c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801e68e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e690:	2b00      	cmp	r3, #0
 801e692:	d11c      	bne.n	801e6ce <ip4_reass+0x172>
      goto nullreturn;
 801e694:	e0fe      	b.n	801e894 <ip4_reass+0x338>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801e696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e698:	88db      	ldrh	r3, [r3, #6]
 801e69a:	b29b      	uxth	r3, r3
 801e69c:	4618      	mov	r0, r3
 801e69e:	f7f4 fbbf 	bl	8012e20 <lwip_htons>
 801e6a2:	4603      	mov	r3, r0
 801e6a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e6a8:	2b00      	cmp	r3, #0
 801e6aa:	d110      	bne.n	801e6ce <ip4_reass+0x172>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801e6ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e6ae:	89db      	ldrh	r3, [r3, #14]
 801e6b0:	4618      	mov	r0, r3
 801e6b2:	f7f4 fbb5 	bl	8012e20 <lwip_htons>
 801e6b6:	4603      	mov	r3, r0
 801e6b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801e6bc:	2b00      	cmp	r3, #0
 801e6be:	d006      	beq.n	801e6ce <ip4_reass+0x172>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801e6c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e6c2:	3308      	adds	r3, #8
 801e6c4:	2214      	movs	r2, #20
 801e6c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801e6c8:	4618      	mov	r0, r3
 801e6ca:	f002 fa98 	bl	8020bfe <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801e6ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e6d0:	88db      	ldrh	r3, [r3, #6]
 801e6d2:	b29b      	uxth	r3, r3
 801e6d4:	f003 0320 	and.w	r3, r3, #32
 801e6d8:	2b00      	cmp	r3, #0
 801e6da:	bf0c      	ite	eq
 801e6dc:	2301      	moveq	r3, #1
 801e6de:	2300      	movne	r3, #0
 801e6e0:	b2db      	uxtb	r3, r3
 801e6e2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801e6e4:	69fb      	ldr	r3, [r7, #28]
 801e6e6:	2b00      	cmp	r3, #0
 801e6e8:	d00e      	beq.n	801e708 <ip4_reass+0x1ac>
    u16_t datagram_len = (u16_t)(offset + len);
 801e6ea:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801e6ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801e6ee:	4413      	add	r3, r2
 801e6f0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801e6f2:	8b7a      	ldrh	r2, [r7, #26]
 801e6f4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801e6f6:	429a      	cmp	r2, r3
 801e6f8:	f0c0 80a7 	bcc.w	801e84a <ip4_reass+0x2ee>
 801e6fc:	8b7b      	ldrh	r3, [r7, #26]
 801e6fe:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801e702:	4293      	cmp	r3, r2
 801e704:	f200 80a1 	bhi.w	801e84a <ip4_reass+0x2ee>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801e708:	69fa      	ldr	r2, [r7, #28]
 801e70a:	6879      	ldr	r1, [r7, #4]
 801e70c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801e70e:	f7ff fdbb 	bl	801e288 <ip_reass_chain_frag_into_datagram_and_validate>
 801e712:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801e714:	697b      	ldr	r3, [r7, #20]
 801e716:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e71a:	f000 8098 	beq.w	801e84e <ip4_reass+0x2f2>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801e71e:	4b30      	ldr	r3, [pc, #192]	@ (801e7e0 <ip4_reass+0x284>)
 801e720:	881a      	ldrh	r2, [r3, #0]
 801e722:	8c3b      	ldrh	r3, [r7, #32]
 801e724:	4413      	add	r3, r2
 801e726:	b29a      	uxth	r2, r3
 801e728:	4b2d      	ldr	r3, [pc, #180]	@ (801e7e0 <ip4_reass+0x284>)
 801e72a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801e72c:	69fb      	ldr	r3, [r7, #28]
 801e72e:	2b00      	cmp	r3, #0
 801e730:	d00d      	beq.n	801e74e <ip4_reass+0x1f2>
    u16_t datagram_len = (u16_t)(offset + len);
 801e732:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801e734:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801e736:	4413      	add	r3, r2
 801e738:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801e73a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e73c:	8a7a      	ldrh	r2, [r7, #18]
 801e73e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801e740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e742:	7f9b      	ldrb	r3, [r3, #30]
 801e744:	f043 0301 	orr.w	r3, r3, #1
 801e748:	b2da      	uxtb	r2, r3
 801e74a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e74c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801e74e:	697b      	ldr	r3, [r7, #20]
 801e750:	2b01      	cmp	r3, #1
 801e752:	d178      	bne.n	801e846 <ip4_reass+0x2ea>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801e754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e756:	8b9b      	ldrh	r3, [r3, #28]
 801e758:	3314      	adds	r3, #20
 801e75a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801e75c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e75e:	685b      	ldr	r3, [r3, #4]
 801e760:	685b      	ldr	r3, [r3, #4]
 801e762:	681b      	ldr	r3, [r3, #0]
 801e764:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801e766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e768:	685b      	ldr	r3, [r3, #4]
 801e76a:	685b      	ldr	r3, [r3, #4]
 801e76c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801e76e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e770:	3308      	adds	r3, #8
 801e772:	2214      	movs	r2, #20
 801e774:	4619      	mov	r1, r3
 801e776:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801e778:	f002 fa41 	bl	8020bfe <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801e77c:	8a3b      	ldrh	r3, [r7, #16]
 801e77e:	4618      	mov	r0, r3
 801e780:	f7f4 fb4e 	bl	8012e20 <lwip_htons>
 801e784:	4603      	mov	r3, r0
 801e786:	461a      	mov	r2, r3
 801e788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e78a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801e78c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e78e:	2200      	movs	r2, #0
 801e790:	719a      	strb	r2, [r3, #6]
 801e792:	2200      	movs	r2, #0
 801e794:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801e796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e798:	2200      	movs	r2, #0
 801e79a:	729a      	strb	r2, [r3, #10]
 801e79c:	2200      	movs	r2, #0
 801e79e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801e7a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e7a2:	685b      	ldr	r3, [r3, #4]
 801e7a4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801e7a6:	e00d      	b.n	801e7c4 <ip4_reass+0x268>
      iprh = (struct ip_reass_helper *)r->payload;
 801e7a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e7aa:	685b      	ldr	r3, [r3, #4]
 801e7ac:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801e7ae:	2114      	movs	r1, #20
 801e7b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801e7b2:	f7f6 f8d5 	bl	8014960 <pbuf_remove_header>
      pbuf_cat(p, r);
 801e7b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801e7b8:	6878      	ldr	r0, [r7, #4]
 801e7ba:	f7f6 fa45 	bl	8014c48 <pbuf_cat>
      r = iprh->next_pbuf;
 801e7be:	68fb      	ldr	r3, [r7, #12]
 801e7c0:	681b      	ldr	r3, [r3, #0]
 801e7c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (r != NULL) {
 801e7c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e7c6:	2b00      	cmp	r3, #0
 801e7c8:	d1ee      	bne.n	801e7a8 <ip4_reass+0x24c>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801e7ca:	4b06      	ldr	r3, [pc, #24]	@ (801e7e4 <ip4_reass+0x288>)
 801e7cc:	681b      	ldr	r3, [r3, #0]
 801e7ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801e7d0:	429a      	cmp	r2, r3
 801e7d2:	d109      	bne.n	801e7e8 <ip4_reass+0x28c>
      ipr_prev = NULL;
 801e7d4:	2300      	movs	r3, #0
 801e7d6:	637b      	str	r3, [r7, #52]	@ 0x34
 801e7d8:	e017      	b.n	801e80a <ip4_reass+0x2ae>
 801e7da:	bf00      	nop
 801e7dc:	2002d36c 	.word	0x2002d36c
 801e7e0:	2002d5d8 	.word	0x2002d5d8
 801e7e4:	2002d5d4 	.word	0x2002d5d4
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801e7e8:	4b31      	ldr	r3, [pc, #196]	@ (801e8b0 <ip4_reass+0x354>)
 801e7ea:	681b      	ldr	r3, [r3, #0]
 801e7ec:	637b      	str	r3, [r7, #52]	@ 0x34
 801e7ee:	e007      	b.n	801e800 <ip4_reass+0x2a4>
        if (ipr_prev->next == ipr) {
 801e7f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e7f2:	681b      	ldr	r3, [r3, #0]
 801e7f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801e7f6:	429a      	cmp	r2, r3
 801e7f8:	d006      	beq.n	801e808 <ip4_reass+0x2ac>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801e7fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e7fc:	681b      	ldr	r3, [r3, #0]
 801e7fe:	637b      	str	r3, [r7, #52]	@ 0x34
 801e800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e802:	2b00      	cmp	r3, #0
 801e804:	d1f4      	bne.n	801e7f0 <ip4_reass+0x294>
 801e806:	e000      	b.n	801e80a <ip4_reass+0x2ae>
          break;
 801e808:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801e80a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801e80c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801e80e:	f7ff fd0d 	bl	801e22c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801e812:	6878      	ldr	r0, [r7, #4]
 801e814:	f7f6 f9d8 	bl	8014bc8 <pbuf_clen>
 801e818:	4603      	mov	r3, r0
 801e81a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801e81c:	4b25      	ldr	r3, [pc, #148]	@ (801e8b4 <ip4_reass+0x358>)
 801e81e:	881b      	ldrh	r3, [r3, #0]
 801e820:	8c3a      	ldrh	r2, [r7, #32]
 801e822:	429a      	cmp	r2, r3
 801e824:	d906      	bls.n	801e834 <ip4_reass+0x2d8>
 801e826:	4b24      	ldr	r3, [pc, #144]	@ (801e8b8 <ip4_reass+0x35c>)
 801e828:	f240 229b 	movw	r2, #667	@ 0x29b
 801e82c:	4923      	ldr	r1, [pc, #140]	@ (801e8bc <ip4_reass+0x360>)
 801e82e:	4824      	ldr	r0, [pc, #144]	@ (801e8c0 <ip4_reass+0x364>)
 801e830:	f001 ffb2 	bl	8020798 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801e834:	4b1f      	ldr	r3, [pc, #124]	@ (801e8b4 <ip4_reass+0x358>)
 801e836:	881a      	ldrh	r2, [r3, #0]
 801e838:	8c3b      	ldrh	r3, [r7, #32]
 801e83a:	1ad3      	subs	r3, r2, r3
 801e83c:	b29a      	uxth	r2, r3
 801e83e:	4b1d      	ldr	r3, [pc, #116]	@ (801e8b4 <ip4_reass+0x358>)
 801e840:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801e842:	687b      	ldr	r3, [r7, #4]
 801e844:	e030      	b.n	801e8a8 <ip4_reass+0x34c>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801e846:	2300      	movs	r3, #0
 801e848:	e02e      	b.n	801e8a8 <ip4_reass+0x34c>
      goto nullreturn_ipr;
 801e84a:	bf00      	nop
 801e84c:	e000      	b.n	801e850 <ip4_reass+0x2f4>
    goto nullreturn_ipr;
 801e84e:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801e850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e852:	2b00      	cmp	r3, #0
 801e854:	d106      	bne.n	801e864 <ip4_reass+0x308>
 801e856:	4b18      	ldr	r3, [pc, #96]	@ (801e8b8 <ip4_reass+0x35c>)
 801e858:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801e85c:	4919      	ldr	r1, [pc, #100]	@ (801e8c4 <ip4_reass+0x368>)
 801e85e:	4818      	ldr	r0, [pc, #96]	@ (801e8c0 <ip4_reass+0x364>)
 801e860:	f001 ff9a 	bl	8020798 <iprintf>
  if (ipr->p == NULL) {
 801e864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e866:	685b      	ldr	r3, [r3, #4]
 801e868:	2b00      	cmp	r3, #0
 801e86a:	d112      	bne.n	801e892 <ip4_reass+0x336>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801e86c:	4b10      	ldr	r3, [pc, #64]	@ (801e8b0 <ip4_reass+0x354>)
 801e86e:	681b      	ldr	r3, [r3, #0]
 801e870:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801e872:	429a      	cmp	r2, r3
 801e874:	d006      	beq.n	801e884 <ip4_reass+0x328>
 801e876:	4b10      	ldr	r3, [pc, #64]	@ (801e8b8 <ip4_reass+0x35c>)
 801e878:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801e87c:	4912      	ldr	r1, [pc, #72]	@ (801e8c8 <ip4_reass+0x36c>)
 801e87e:	4810      	ldr	r0, [pc, #64]	@ (801e8c0 <ip4_reass+0x364>)
 801e880:	f001 ff8a 	bl	8020798 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801e884:	2100      	movs	r1, #0
 801e886:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801e888:	f7ff fcd0 	bl	801e22c <ip_reass_dequeue_datagram>
 801e88c:	e002      	b.n	801e894 <ip4_reass+0x338>
    goto nullreturn;
 801e88e:	bf00      	nop
 801e890:	e000      	b.n	801e894 <ip4_reass+0x338>
  }

nullreturn:
 801e892:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
 801e894:	4b0d      	ldr	r3, [pc, #52]	@ (801e8cc <ip4_reass+0x370>)
 801e896:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801e898:	3301      	adds	r3, #1
 801e89a:	b29a      	uxth	r2, r3
 801e89c:	4b0b      	ldr	r3, [pc, #44]	@ (801e8cc <ip4_reass+0x370>)
 801e89e:	86da      	strh	r2, [r3, #54]	@ 0x36
  pbuf_free(p);
 801e8a0:	6878      	ldr	r0, [r7, #4]
 801e8a2:	f7f6 f8eb 	bl	8014a7c <pbuf_free>
  return NULL;
 801e8a6:	2300      	movs	r3, #0
}
 801e8a8:	4618      	mov	r0, r3
 801e8aa:	3738      	adds	r7, #56	@ 0x38
 801e8ac:	46bd      	mov	sp, r7
 801e8ae:	bd80      	pop	{r7, pc}
 801e8b0:	2002d5d4 	.word	0x2002d5d4
 801e8b4:	2002d5d8 	.word	0x2002d5d8
 801e8b8:	08025bac 	.word	0x08025bac
 801e8bc:	08025d1c 	.word	0x08025d1c
 801e8c0:	08025bf4 	.word	0x08025bf4
 801e8c4:	08025d38 	.word	0x08025d38
 801e8c8:	08025d44 	.word	0x08025d44
 801e8cc:	2002d36c 	.word	0x2002d36c

0801e8d0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801e8d0:	b580      	push	{r7, lr}
 801e8d2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801e8d4:	2005      	movs	r0, #5
 801e8d6:	f7f5 f86f 	bl	80139b8 <memp_malloc>
 801e8da:	4603      	mov	r3, r0
}
 801e8dc:	4618      	mov	r0, r3
 801e8de:	bd80      	pop	{r7, pc}

0801e8e0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801e8e0:	b580      	push	{r7, lr}
 801e8e2:	b082      	sub	sp, #8
 801e8e4:	af00      	add	r7, sp, #0
 801e8e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801e8e8:	687b      	ldr	r3, [r7, #4]
 801e8ea:	2b00      	cmp	r3, #0
 801e8ec:	d106      	bne.n	801e8fc <ip_frag_free_pbuf_custom_ref+0x1c>
 801e8ee:	4b07      	ldr	r3, [pc, #28]	@ (801e90c <ip_frag_free_pbuf_custom_ref+0x2c>)
 801e8f0:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801e8f4:	4906      	ldr	r1, [pc, #24]	@ (801e910 <ip_frag_free_pbuf_custom_ref+0x30>)
 801e8f6:	4807      	ldr	r0, [pc, #28]	@ (801e914 <ip_frag_free_pbuf_custom_ref+0x34>)
 801e8f8:	f001 ff4e 	bl	8020798 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801e8fc:	6879      	ldr	r1, [r7, #4]
 801e8fe:	2005      	movs	r0, #5
 801e900:	f7f5 f8d6 	bl	8013ab0 <memp_free>
}
 801e904:	bf00      	nop
 801e906:	3708      	adds	r7, #8
 801e908:	46bd      	mov	sp, r7
 801e90a:	bd80      	pop	{r7, pc}
 801e90c:	08025bac 	.word	0x08025bac
 801e910:	08025d64 	.word	0x08025d64
 801e914:	08025bf4 	.word	0x08025bf4

0801e918 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801e918:	b580      	push	{r7, lr}
 801e91a:	b084      	sub	sp, #16
 801e91c:	af00      	add	r7, sp, #0
 801e91e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801e920:	687b      	ldr	r3, [r7, #4]
 801e922:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801e924:	68fb      	ldr	r3, [r7, #12]
 801e926:	2b00      	cmp	r3, #0
 801e928:	d106      	bne.n	801e938 <ipfrag_free_pbuf_custom+0x20>
 801e92a:	4b11      	ldr	r3, [pc, #68]	@ (801e970 <ipfrag_free_pbuf_custom+0x58>)
 801e92c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801e930:	4910      	ldr	r1, [pc, #64]	@ (801e974 <ipfrag_free_pbuf_custom+0x5c>)
 801e932:	4811      	ldr	r0, [pc, #68]	@ (801e978 <ipfrag_free_pbuf_custom+0x60>)
 801e934:	f001 ff30 	bl	8020798 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801e938:	68fa      	ldr	r2, [r7, #12]
 801e93a:	687b      	ldr	r3, [r7, #4]
 801e93c:	429a      	cmp	r2, r3
 801e93e:	d006      	beq.n	801e94e <ipfrag_free_pbuf_custom+0x36>
 801e940:	4b0b      	ldr	r3, [pc, #44]	@ (801e970 <ipfrag_free_pbuf_custom+0x58>)
 801e942:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801e946:	490d      	ldr	r1, [pc, #52]	@ (801e97c <ipfrag_free_pbuf_custom+0x64>)
 801e948:	480b      	ldr	r0, [pc, #44]	@ (801e978 <ipfrag_free_pbuf_custom+0x60>)
 801e94a:	f001 ff25 	bl	8020798 <iprintf>
  if (pcr->original != NULL) {
 801e94e:	68fb      	ldr	r3, [r7, #12]
 801e950:	695b      	ldr	r3, [r3, #20]
 801e952:	2b00      	cmp	r3, #0
 801e954:	d004      	beq.n	801e960 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801e956:	68fb      	ldr	r3, [r7, #12]
 801e958:	695b      	ldr	r3, [r3, #20]
 801e95a:	4618      	mov	r0, r3
 801e95c:	f7f6 f88e 	bl	8014a7c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801e960:	68f8      	ldr	r0, [r7, #12]
 801e962:	f7ff ffbd 	bl	801e8e0 <ip_frag_free_pbuf_custom_ref>
}
 801e966:	bf00      	nop
 801e968:	3710      	adds	r7, #16
 801e96a:	46bd      	mov	sp, r7
 801e96c:	bd80      	pop	{r7, pc}
 801e96e:	bf00      	nop
 801e970:	08025bac 	.word	0x08025bac
 801e974:	08025d70 	.word	0x08025d70
 801e978:	08025bf4 	.word	0x08025bf4
 801e97c:	08025d7c 	.word	0x08025d7c

0801e980 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801e980:	b580      	push	{r7, lr}
 801e982:	b094      	sub	sp, #80	@ 0x50
 801e984:	af02      	add	r7, sp, #8
 801e986:	60f8      	str	r0, [r7, #12]
 801e988:	60b9      	str	r1, [r7, #8]
 801e98a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801e98c:	2300      	movs	r3, #0
 801e98e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801e992:	68bb      	ldr	r3, [r7, #8]
 801e994:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801e996:	3b14      	subs	r3, #20
 801e998:	2b00      	cmp	r3, #0
 801e99a:	da00      	bge.n	801e99e <ip4_frag+0x1e>
 801e99c:	3307      	adds	r3, #7
 801e99e:	10db      	asrs	r3, r3, #3
 801e9a0:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801e9a2:	2314      	movs	r3, #20
 801e9a4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801e9a6:	68fb      	ldr	r3, [r7, #12]
 801e9a8:	685b      	ldr	r3, [r3, #4]
 801e9aa:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801e9ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e9ae:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801e9b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e9b2:	781b      	ldrb	r3, [r3, #0]
 801e9b4:	f003 030f 	and.w	r3, r3, #15
 801e9b8:	b2db      	uxtb	r3, r3
 801e9ba:	009b      	lsls	r3, r3, #2
 801e9bc:	b2db      	uxtb	r3, r3
 801e9be:	2b14      	cmp	r3, #20
 801e9c0:	d002      	beq.n	801e9c8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801e9c2:	f06f 0305 	mvn.w	r3, #5
 801e9c6:	e116      	b.n	801ebf6 <ip4_frag+0x276>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801e9c8:	68fb      	ldr	r3, [r7, #12]
 801e9ca:	895b      	ldrh	r3, [r3, #10]
 801e9cc:	2b13      	cmp	r3, #19
 801e9ce:	d809      	bhi.n	801e9e4 <ip4_frag+0x64>
 801e9d0:	4b8b      	ldr	r3, [pc, #556]	@ (801ec00 <ip4_frag+0x280>)
 801e9d2:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801e9d6:	498b      	ldr	r1, [pc, #556]	@ (801ec04 <ip4_frag+0x284>)
 801e9d8:	488b      	ldr	r0, [pc, #556]	@ (801ec08 <ip4_frag+0x288>)
 801e9da:	f001 fedd 	bl	8020798 <iprintf>
 801e9de:	f06f 0305 	mvn.w	r3, #5
 801e9e2:	e108      	b.n	801ebf6 <ip4_frag+0x276>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801e9e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e9e6:	88db      	ldrh	r3, [r3, #6]
 801e9e8:	b29b      	uxth	r3, r3
 801e9ea:	4618      	mov	r0, r3
 801e9ec:	f7f4 fa18 	bl	8012e20 <lwip_htons>
 801e9f0:	4603      	mov	r3, r0
 801e9f2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801e9f4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801e9f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e9fa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801e9fe:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ea00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801ea04:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801ea06:	68fb      	ldr	r3, [r7, #12]
 801ea08:	891b      	ldrh	r3, [r3, #8]
 801ea0a:	3b14      	subs	r3, #20
 801ea0c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801ea10:	e0e7      	b.n	801ebe2 <ip4_frag+0x262>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801ea12:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801ea14:	00db      	lsls	r3, r3, #3
 801ea16:	b29b      	uxth	r3, r3
 801ea18:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801ea1c:	4293      	cmp	r3, r2
 801ea1e:	bf28      	it	cs
 801ea20:	4613      	movcs	r3, r2
 801ea22:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801ea24:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801ea28:	2114      	movs	r1, #20
 801ea2a:	200e      	movs	r0, #14
 801ea2c:	f7f5 fcfa 	bl	8014424 <pbuf_alloc>
 801ea30:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801ea32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ea34:	2b00      	cmp	r3, #0
 801ea36:	f000 80db 	beq.w	801ebf0 <ip4_frag+0x270>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801ea3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ea3c:	895b      	ldrh	r3, [r3, #10]
 801ea3e:	2b13      	cmp	r3, #19
 801ea40:	d806      	bhi.n	801ea50 <ip4_frag+0xd0>
 801ea42:	4b6f      	ldr	r3, [pc, #444]	@ (801ec00 <ip4_frag+0x280>)
 801ea44:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801ea48:	4970      	ldr	r1, [pc, #448]	@ (801ec0c <ip4_frag+0x28c>)
 801ea4a:	486f      	ldr	r0, [pc, #444]	@ (801ec08 <ip4_frag+0x288>)
 801ea4c:	f001 fea4 	bl	8020798 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801ea50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ea52:	685b      	ldr	r3, [r3, #4]
 801ea54:	2214      	movs	r2, #20
 801ea56:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801ea58:	4618      	mov	r0, r3
 801ea5a:	f002 f8d0 	bl	8020bfe <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801ea5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ea60:	685b      	ldr	r3, [r3, #4]
 801ea62:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801ea64:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801ea66:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801ea6a:	e064      	b.n	801eb36 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801ea6c:	68fb      	ldr	r3, [r7, #12]
 801ea6e:	895a      	ldrh	r2, [r3, #10]
 801ea70:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801ea72:	1ad3      	subs	r3, r2, r3
 801ea74:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801ea76:	68fb      	ldr	r3, [r7, #12]
 801ea78:	895b      	ldrh	r3, [r3, #10]
 801ea7a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801ea7c:	429a      	cmp	r2, r3
 801ea7e:	d906      	bls.n	801ea8e <ip4_frag+0x10e>
 801ea80:	4b5f      	ldr	r3, [pc, #380]	@ (801ec00 <ip4_frag+0x280>)
 801ea82:	f240 322d 	movw	r2, #813	@ 0x32d
 801ea86:	4962      	ldr	r1, [pc, #392]	@ (801ec10 <ip4_frag+0x290>)
 801ea88:	485f      	ldr	r0, [pc, #380]	@ (801ec08 <ip4_frag+0x288>)
 801ea8a:	f001 fe85 	bl	8020798 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801ea8e:	8bfa      	ldrh	r2, [r7, #30]
 801ea90:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801ea94:	4293      	cmp	r3, r2
 801ea96:	bf28      	it	cs
 801ea98:	4613      	movcs	r3, r2
 801ea9a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801ea9e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801eaa2:	2b00      	cmp	r3, #0
 801eaa4:	d105      	bne.n	801eab2 <ip4_frag+0x132>
        poff = 0;
 801eaa6:	2300      	movs	r3, #0
 801eaa8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801eaaa:	68fb      	ldr	r3, [r7, #12]
 801eaac:	681b      	ldr	r3, [r3, #0]
 801eaae:	60fb      	str	r3, [r7, #12]
        continue;
 801eab0:	e041      	b.n	801eb36 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801eab2:	f7ff ff0d 	bl	801e8d0 <ip_frag_alloc_pbuf_custom_ref>
 801eab6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801eab8:	69bb      	ldr	r3, [r7, #24]
 801eaba:	2b00      	cmp	r3, #0
 801eabc:	d103      	bne.n	801eac6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801eabe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801eac0:	f7f5 ffdc 	bl	8014a7c <pbuf_free>
        goto memerr;
 801eac4:	e095      	b.n	801ebf2 <ip4_frag+0x272>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801eac6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801eac8:	68fb      	ldr	r3, [r7, #12]
 801eaca:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801eacc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801eace:	4413      	add	r3, r2
 801ead0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801ead4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801ead8:	9201      	str	r2, [sp, #4]
 801eada:	9300      	str	r3, [sp, #0]
 801eadc:	4603      	mov	r3, r0
 801eade:	2241      	movs	r2, #65	@ 0x41
 801eae0:	2000      	movs	r0, #0
 801eae2:	f7f5 fde9 	bl	80146b8 <pbuf_alloced_custom>
 801eae6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801eae8:	697b      	ldr	r3, [r7, #20]
 801eaea:	2b00      	cmp	r3, #0
 801eaec:	d106      	bne.n	801eafc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801eaee:	69b8      	ldr	r0, [r7, #24]
 801eaf0:	f7ff fef6 	bl	801e8e0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801eaf4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801eaf6:	f7f5 ffc1 	bl	8014a7c <pbuf_free>
        goto memerr;
 801eafa:	e07a      	b.n	801ebf2 <ip4_frag+0x272>
      }
      pbuf_ref(p);
 801eafc:	68f8      	ldr	r0, [r7, #12]
 801eafe:	f7f6 f87b 	bl	8014bf8 <pbuf_ref>
      pcr->original = p;
 801eb02:	69bb      	ldr	r3, [r7, #24]
 801eb04:	68fa      	ldr	r2, [r7, #12]
 801eb06:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801eb08:	69bb      	ldr	r3, [r7, #24]
 801eb0a:	4a42      	ldr	r2, [pc, #264]	@ (801ec14 <ip4_frag+0x294>)
 801eb0c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801eb0e:	6979      	ldr	r1, [r7, #20]
 801eb10:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801eb12:	f7f6 f899 	bl	8014c48 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801eb16:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801eb1a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801eb1e:	1ad3      	subs	r3, r2, r3
 801eb20:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801eb24:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801eb28:	2b00      	cmp	r3, #0
 801eb2a:	d004      	beq.n	801eb36 <ip4_frag+0x1b6>
        poff = 0;
 801eb2c:	2300      	movs	r3, #0
 801eb2e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801eb30:	68fb      	ldr	r3, [r7, #12]
 801eb32:	681b      	ldr	r3, [r3, #0]
 801eb34:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801eb36:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801eb3a:	2b00      	cmp	r3, #0
 801eb3c:	d196      	bne.n	801ea6c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801eb3e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801eb40:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801eb44:	4413      	add	r3, r2
 801eb46:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801eb48:	68bb      	ldr	r3, [r7, #8]
 801eb4a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801eb4c:	f1a3 0213 	sub.w	r2, r3, #19
 801eb50:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801eb54:	429a      	cmp	r2, r3
 801eb56:	bfcc      	ite	gt
 801eb58:	2301      	movgt	r3, #1
 801eb5a:	2300      	movle	r3, #0
 801eb5c:	b2db      	uxtb	r3, r3
 801eb5e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801eb60:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801eb64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801eb68:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801eb6a:	6a3b      	ldr	r3, [r7, #32]
 801eb6c:	2b00      	cmp	r3, #0
 801eb6e:	d002      	beq.n	801eb76 <ip4_frag+0x1f6>
 801eb70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eb72:	2b00      	cmp	r3, #0
 801eb74:	d003      	beq.n	801eb7e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801eb76:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801eb78:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801eb7c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801eb7e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801eb80:	4618      	mov	r0, r3
 801eb82:	f7f4 f94d 	bl	8012e20 <lwip_htons>
 801eb86:	4603      	mov	r3, r0
 801eb88:	461a      	mov	r2, r3
 801eb8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801eb8c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801eb8e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801eb90:	3314      	adds	r3, #20
 801eb92:	b29b      	uxth	r3, r3
 801eb94:	4618      	mov	r0, r3
 801eb96:	f7f4 f943 	bl	8012e20 <lwip_htons>
 801eb9a:	4603      	mov	r3, r0
 801eb9c:	461a      	mov	r2, r3
 801eb9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801eba0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801eba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801eba4:	2200      	movs	r2, #0
 801eba6:	729a      	strb	r2, [r3, #10]
 801eba8:	2200      	movs	r2, #0
 801ebaa:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801ebac:	68bb      	ldr	r3, [r7, #8]
 801ebae:	695b      	ldr	r3, [r3, #20]
 801ebb0:	687a      	ldr	r2, [r7, #4]
 801ebb2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801ebb4:	68b8      	ldr	r0, [r7, #8]
 801ebb6:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 801ebb8:	4b17      	ldr	r3, [pc, #92]	@ (801ec18 <ip4_frag+0x298>)
 801ebba:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 801ebbc:	3301      	adds	r3, #1
 801ebbe:	b29a      	uxth	r2, r3
 801ebc0:	4b15      	ldr	r3, [pc, #84]	@ (801ec18 <ip4_frag+0x298>)
 801ebc2:	861a      	strh	r2, [r3, #48]	@ 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801ebc4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ebc6:	f7f5 ff59 	bl	8014a7c <pbuf_free>
    left = (u16_t)(left - fragsize);
 801ebca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801ebce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801ebd0:	1ad3      	subs	r3, r2, r3
 801ebd2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801ebd6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801ebda:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801ebdc:	4413      	add	r3, r2
 801ebde:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801ebe2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801ebe6:	2b00      	cmp	r3, #0
 801ebe8:	f47f af13 	bne.w	801ea12 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801ebec:	2300      	movs	r3, #0
 801ebee:	e002      	b.n	801ebf6 <ip4_frag+0x276>
      goto memerr;
 801ebf0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801ebf2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801ebf6:	4618      	mov	r0, r3
 801ebf8:	3748      	adds	r7, #72	@ 0x48
 801ebfa:	46bd      	mov	sp, r7
 801ebfc:	bd80      	pop	{r7, pc}
 801ebfe:	bf00      	nop
 801ec00:	08025bac 	.word	0x08025bac
 801ec04:	08025d88 	.word	0x08025d88
 801ec08:	08025bf4 	.word	0x08025bf4
 801ec0c:	08025da4 	.word	0x08025da4
 801ec10:	08025dc4 	.word	0x08025dc4
 801ec14:	0801e919 	.word	0x0801e919
 801ec18:	2002d36c 	.word	0x2002d36c

0801ec1c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801ec1c:	b580      	push	{r7, lr}
 801ec1e:	b086      	sub	sp, #24
 801ec20:	af00      	add	r7, sp, #0
 801ec22:	6078      	str	r0, [r7, #4]
 801ec24:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801ec26:	230e      	movs	r3, #14
 801ec28:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801ec2a:	687b      	ldr	r3, [r7, #4]
 801ec2c:	895b      	ldrh	r3, [r3, #10]
 801ec2e:	2b0e      	cmp	r3, #14
 801ec30:	d80c      	bhi.n	801ec4c <ethernet_input+0x30>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
 801ec32:	4b51      	ldr	r3, [pc, #324]	@ (801ed78 <ethernet_input+0x15c>)
 801ec34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801ec36:	3301      	adds	r3, #1
 801ec38:	b29a      	uxth	r2, r3
 801ec3a:	4b4f      	ldr	r3, [pc, #316]	@ (801ed78 <ethernet_input+0x15c>)
 801ec3c:	851a      	strh	r2, [r3, #40]	@ 0x28
    ETHARP_STATS_INC(etharp.drop);
 801ec3e:	4b4e      	ldr	r3, [pc, #312]	@ (801ed78 <ethernet_input+0x15c>)
 801ec40:	8bdb      	ldrh	r3, [r3, #30]
 801ec42:	3301      	adds	r3, #1
 801ec44:	b29a      	uxth	r2, r3
 801ec46:	4b4c      	ldr	r3, [pc, #304]	@ (801ed78 <ethernet_input+0x15c>)
 801ec48:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
 801ec4a:	e08d      	b.n	801ed68 <ethernet_input+0x14c>
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801ec4c:	687b      	ldr	r3, [r7, #4]
 801ec4e:	7bdb      	ldrb	r3, [r3, #15]
 801ec50:	2b00      	cmp	r3, #0
 801ec52:	d106      	bne.n	801ec62 <ethernet_input+0x46>
    p->if_idx = netif_get_index(netif);
 801ec54:	683b      	ldr	r3, [r7, #0]
 801ec56:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801ec5a:	3301      	adds	r3, #1
 801ec5c:	b2da      	uxtb	r2, r3
 801ec5e:	687b      	ldr	r3, [r7, #4]
 801ec60:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801ec62:	687b      	ldr	r3, [r7, #4]
 801ec64:	685b      	ldr	r3, [r3, #4]
 801ec66:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801ec68:	693b      	ldr	r3, [r7, #16]
 801ec6a:	7b1a      	ldrb	r2, [r3, #12]
 801ec6c:	7b5b      	ldrb	r3, [r3, #13]
 801ec6e:	021b      	lsls	r3, r3, #8
 801ec70:	4313      	orrs	r3, r2
 801ec72:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801ec74:	693b      	ldr	r3, [r7, #16]
 801ec76:	781b      	ldrb	r3, [r3, #0]
 801ec78:	f003 0301 	and.w	r3, r3, #1
 801ec7c:	2b00      	cmp	r3, #0
 801ec7e:	d023      	beq.n	801ecc8 <ethernet_input+0xac>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801ec80:	693b      	ldr	r3, [r7, #16]
 801ec82:	781b      	ldrb	r3, [r3, #0]
 801ec84:	2b01      	cmp	r3, #1
 801ec86:	d10f      	bne.n	801eca8 <ethernet_input+0x8c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801ec88:	693b      	ldr	r3, [r7, #16]
 801ec8a:	785b      	ldrb	r3, [r3, #1]
 801ec8c:	2b00      	cmp	r3, #0
 801ec8e:	d11b      	bne.n	801ecc8 <ethernet_input+0xac>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801ec90:	693b      	ldr	r3, [r7, #16]
 801ec92:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801ec94:	2b5e      	cmp	r3, #94	@ 0x5e
 801ec96:	d117      	bne.n	801ecc8 <ethernet_input+0xac>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801ec98:	687b      	ldr	r3, [r7, #4]
 801ec9a:	7b5b      	ldrb	r3, [r3, #13]
 801ec9c:	f043 0310 	orr.w	r3, r3, #16
 801eca0:	b2da      	uxtb	r2, r3
 801eca2:	687b      	ldr	r3, [r7, #4]
 801eca4:	735a      	strb	r2, [r3, #13]
 801eca6:	e00f      	b.n	801ecc8 <ethernet_input+0xac>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801eca8:	693b      	ldr	r3, [r7, #16]
 801ecaa:	2206      	movs	r2, #6
 801ecac:	4933      	ldr	r1, [pc, #204]	@ (801ed7c <ethernet_input+0x160>)
 801ecae:	4618      	mov	r0, r3
 801ecb0:	f001 fec2 	bl	8020a38 <memcmp>
 801ecb4:	4603      	mov	r3, r0
 801ecb6:	2b00      	cmp	r3, #0
 801ecb8:	d106      	bne.n	801ecc8 <ethernet_input+0xac>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801ecba:	687b      	ldr	r3, [r7, #4]
 801ecbc:	7b5b      	ldrb	r3, [r3, #13]
 801ecbe:	f043 0308 	orr.w	r3, r3, #8
 801ecc2:	b2da      	uxtb	r2, r3
 801ecc4:	687b      	ldr	r3, [r7, #4]
 801ecc6:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801ecc8:	89fb      	ldrh	r3, [r7, #14]
 801ecca:	2b08      	cmp	r3, #8
 801eccc:	d003      	beq.n	801ecd6 <ethernet_input+0xba>
 801ecce:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801ecd2:	d014      	beq.n	801ecfe <ethernet_input+0xe2>
 801ecd4:	e034      	b.n	801ed40 <ethernet_input+0x124>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801ecd6:	683b      	ldr	r3, [r7, #0]
 801ecd8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801ecdc:	f003 0308 	and.w	r3, r3, #8
 801ece0:	2b00      	cmp	r3, #0
 801ece2:	d03c      	beq.n	801ed5e <ethernet_input+0x142>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801ece4:	8afb      	ldrh	r3, [r7, #22]
 801ece6:	4619      	mov	r1, r3
 801ece8:	6878      	ldr	r0, [r7, #4]
 801ecea:	f7f5 fe39 	bl	8014960 <pbuf_remove_header>
 801ecee:	4603      	mov	r3, r0
 801ecf0:	2b00      	cmp	r3, #0
 801ecf2:	d136      	bne.n	801ed62 <ethernet_input+0x146>
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
 801ecf4:	6839      	ldr	r1, [r7, #0]
 801ecf6:	6878      	ldr	r0, [r7, #4]
 801ecf8:	f7fe fdee 	bl	801d8d8 <ip4_input>
      }
      break;
 801ecfc:	e02d      	b.n	801ed5a <ethernet_input+0x13e>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801ecfe:	683b      	ldr	r3, [r7, #0]
 801ed00:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801ed04:	f003 0308 	and.w	r3, r3, #8
 801ed08:	2b00      	cmp	r3, #0
 801ed0a:	d02c      	beq.n	801ed66 <ethernet_input+0x14a>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801ed0c:	8afb      	ldrh	r3, [r7, #22]
 801ed0e:	4619      	mov	r1, r3
 801ed10:	6878      	ldr	r0, [r7, #4]
 801ed12:	f7f5 fe25 	bl	8014960 <pbuf_remove_header>
 801ed16:	4603      	mov	r3, r0
 801ed18:	2b00      	cmp	r3, #0
 801ed1a:	d00c      	beq.n	801ed36 <ethernet_input+0x11a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                    ("ethernet_input: ARP response packet dropped, too short (%"U16_F"/%"U16_F")\n",
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
 801ed1c:	4b16      	ldr	r3, [pc, #88]	@ (801ed78 <ethernet_input+0x15c>)
 801ed1e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801ed20:	3301      	adds	r3, #1
 801ed22:	b29a      	uxth	r2, r3
 801ed24:	4b14      	ldr	r3, [pc, #80]	@ (801ed78 <ethernet_input+0x15c>)
 801ed26:	845a      	strh	r2, [r3, #34]	@ 0x22
        ETHARP_STATS_INC(etharp.drop);
 801ed28:	4b13      	ldr	r3, [pc, #76]	@ (801ed78 <ethernet_input+0x15c>)
 801ed2a:	8bdb      	ldrh	r3, [r3, #30]
 801ed2c:	3301      	adds	r3, #1
 801ed2e:	b29a      	uxth	r2, r3
 801ed30:	4b11      	ldr	r3, [pc, #68]	@ (801ed78 <ethernet_input+0x15c>)
 801ed32:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 801ed34:	e018      	b.n	801ed68 <ethernet_input+0x14c>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
 801ed36:	6839      	ldr	r1, [r7, #0]
 801ed38:	6878      	ldr	r0, [r7, #4]
 801ed3a:	f7fd fe67 	bl	801ca0c <etharp_input>
      }
      break;
 801ed3e:	e00c      	b.n	801ed5a <ethernet_input+0x13e>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if (LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 801ed40:	4b0d      	ldr	r3, [pc, #52]	@ (801ed78 <ethernet_input+0x15c>)
 801ed42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801ed44:	3301      	adds	r3, #1
 801ed46:	b29a      	uxth	r2, r3
 801ed48:	4b0b      	ldr	r3, [pc, #44]	@ (801ed78 <ethernet_input+0x15c>)
 801ed4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      ETHARP_STATS_INC(etharp.drop);
 801ed4c:	4b0a      	ldr	r3, [pc, #40]	@ (801ed78 <ethernet_input+0x15c>)
 801ed4e:	8bdb      	ldrh	r3, [r3, #30]
 801ed50:	3301      	adds	r3, #1
 801ed52:	b29a      	uxth	r2, r3
 801ed54:	4b08      	ldr	r3, [pc, #32]	@ (801ed78 <ethernet_input+0x15c>)
 801ed56:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801ed58:	e006      	b.n	801ed68 <ethernet_input+0x14c>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801ed5a:	2300      	movs	r3, #0
 801ed5c:	e008      	b.n	801ed70 <ethernet_input+0x154>
        goto free_and_return;
 801ed5e:	bf00      	nop
 801ed60:	e002      	b.n	801ed68 <ethernet_input+0x14c>
        goto free_and_return;
 801ed62:	bf00      	nop
 801ed64:	e000      	b.n	801ed68 <ethernet_input+0x14c>
        goto free_and_return;
 801ed66:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801ed68:	6878      	ldr	r0, [r7, #4]
 801ed6a:	f7f5 fe87 	bl	8014a7c <pbuf_free>
  return ERR_OK;
 801ed6e:	2300      	movs	r3, #0
}
 801ed70:	4618      	mov	r0, r3
 801ed72:	3718      	adds	r7, #24
 801ed74:	46bd      	mov	sp, r7
 801ed76:	bd80      	pop	{r7, pc}
 801ed78:	2002d36c 	.word	0x2002d36c
 801ed7c:	08026888 	.word	0x08026888

0801ed80 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801ed80:	b580      	push	{r7, lr}
 801ed82:	b086      	sub	sp, #24
 801ed84:	af00      	add	r7, sp, #0
 801ed86:	60f8      	str	r0, [r7, #12]
 801ed88:	60b9      	str	r1, [r7, #8]
 801ed8a:	607a      	str	r2, [r7, #4]
 801ed8c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801ed8e:	8c3b      	ldrh	r3, [r7, #32]
 801ed90:	4618      	mov	r0, r3
 801ed92:	f7f4 f845 	bl	8012e20 <lwip_htons>
 801ed96:	4603      	mov	r3, r0
 801ed98:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801ed9a:	210e      	movs	r1, #14
 801ed9c:	68b8      	ldr	r0, [r7, #8]
 801ed9e:	f7f5 fdcf 	bl	8014940 <pbuf_add_header>
 801eda2:	4603      	mov	r3, r0
 801eda4:	2b00      	cmp	r3, #0
 801eda6:	d125      	bne.n	801edf4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801eda8:	68bb      	ldr	r3, [r7, #8]
 801edaa:	685b      	ldr	r3, [r3, #4]
 801edac:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801edae:	693b      	ldr	r3, [r7, #16]
 801edb0:	8afa      	ldrh	r2, [r7, #22]
 801edb2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801edb4:	693b      	ldr	r3, [r7, #16]
 801edb6:	2206      	movs	r2, #6
 801edb8:	6839      	ldr	r1, [r7, #0]
 801edba:	4618      	mov	r0, r3
 801edbc:	f001 ff1f 	bl	8020bfe <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801edc0:	693b      	ldr	r3, [r7, #16]
 801edc2:	3306      	adds	r3, #6
 801edc4:	2206      	movs	r2, #6
 801edc6:	6879      	ldr	r1, [r7, #4]
 801edc8:	4618      	mov	r0, r3
 801edca:	f001 ff18 	bl	8020bfe <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801edce:	68fb      	ldr	r3, [r7, #12]
 801edd0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801edd4:	2b06      	cmp	r3, #6
 801edd6:	d006      	beq.n	801ede6 <ethernet_output+0x66>
 801edd8:	4b0d      	ldr	r3, [pc, #52]	@ (801ee10 <ethernet_output+0x90>)
 801edda:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801edde:	490d      	ldr	r1, [pc, #52]	@ (801ee14 <ethernet_output+0x94>)
 801ede0:	480d      	ldr	r0, [pc, #52]	@ (801ee18 <ethernet_output+0x98>)
 801ede2:	f001 fcd9 	bl	8020798 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801ede6:	68fb      	ldr	r3, [r7, #12]
 801ede8:	699b      	ldr	r3, [r3, #24]
 801edea:	68b9      	ldr	r1, [r7, #8]
 801edec:	68f8      	ldr	r0, [r7, #12]
 801edee:	4798      	blx	r3
 801edf0:	4603      	mov	r3, r0
 801edf2:	e008      	b.n	801ee06 <ethernet_output+0x86>
      goto pbuf_header_failed;
 801edf4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
 801edf6:	4b09      	ldr	r3, [pc, #36]	@ (801ee1c <ethernet_output+0x9c>)
 801edf8:	895b      	ldrh	r3, [r3, #10]
 801edfa:	3301      	adds	r3, #1
 801edfc:	b29a      	uxth	r2, r3
 801edfe:	4b07      	ldr	r3, [pc, #28]	@ (801ee1c <ethernet_output+0x9c>)
 801ee00:	815a      	strh	r2, [r3, #10]
  return ERR_BUF;
 801ee02:	f06f 0301 	mvn.w	r3, #1
}
 801ee06:	4618      	mov	r0, r3
 801ee08:	3718      	adds	r7, #24
 801ee0a:	46bd      	mov	sp, r7
 801ee0c:	bd80      	pop	{r7, pc}
 801ee0e:	bf00      	nop
 801ee10:	08025dd4 	.word	0x08025dd4
 801ee14:	08025e0c 	.word	0x08025e0c
 801ee18:	08025e40 	.word	0x08025e40
 801ee1c:	2002d36c 	.word	0x2002d36c

0801ee20 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801ee20:	b580      	push	{r7, lr}
 801ee22:	b082      	sub	sp, #8
 801ee24:	af00      	add	r7, sp, #0
 801ee26:	6078      	str	r0, [r7, #4]
 801ee28:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801ee2a:	683b      	ldr	r3, [r7, #0]
 801ee2c:	2200      	movs	r2, #0
 801ee2e:	2104      	movs	r1, #4
 801ee30:	4618      	mov	r0, r3
 801ee32:	f7ee fa91 	bl	800d358 <osMessageQueueNew>
 801ee36:	4602      	mov	r2, r0
 801ee38:	687b      	ldr	r3, [r7, #4]
 801ee3a:	601a      	str	r2, [r3, #0]
#endif
#if SYS_STATS
  ++lwip_stats.sys.mbox.used;
 801ee3c:	4b10      	ldr	r3, [pc, #64]	@ (801ee80 <sys_mbox_new+0x60>)
 801ee3e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 801ee42:	3301      	adds	r3, #1
 801ee44:	b29a      	uxth	r2, r3
 801ee46:	4b0e      	ldr	r3, [pc, #56]	@ (801ee80 <sys_mbox_new+0x60>)
 801ee48:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
 801ee4c:	4b0c      	ldr	r3, [pc, #48]	@ (801ee80 <sys_mbox_new+0x60>)
 801ee4e:	f8b3 20fa 	ldrh.w	r2, [r3, #250]	@ 0xfa
 801ee52:	4b0b      	ldr	r3, [pc, #44]	@ (801ee80 <sys_mbox_new+0x60>)
 801ee54:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 801ee58:	429a      	cmp	r2, r3
 801ee5a:	d205      	bcs.n	801ee68 <sys_mbox_new+0x48>
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
 801ee5c:	4b08      	ldr	r3, [pc, #32]	@ (801ee80 <sys_mbox_new+0x60>)
 801ee5e:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	@ 0xf8
 801ee62:	4b07      	ldr	r3, [pc, #28]	@ (801ee80 <sys_mbox_new+0x60>)
 801ee64:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801ee68:	687b      	ldr	r3, [r7, #4]
 801ee6a:	681b      	ldr	r3, [r3, #0]
 801ee6c:	2b00      	cmp	r3, #0
 801ee6e:	d102      	bne.n	801ee76 <sys_mbox_new+0x56>
    return ERR_MEM;
 801ee70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ee74:	e000      	b.n	801ee78 <sys_mbox_new+0x58>

  return ERR_OK;
 801ee76:	2300      	movs	r3, #0
}
 801ee78:	4618      	mov	r0, r3
 801ee7a:	3708      	adds	r7, #8
 801ee7c:	46bd      	mov	sp, r7
 801ee7e:	bd80      	pop	{r7, pc}
 801ee80:	2002d36c 	.word	0x2002d36c

0801ee84 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801ee84:	b580      	push	{r7, lr}
 801ee86:	b082      	sub	sp, #8
 801ee88:	af00      	add	r7, sp, #0
 801ee8a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801ee8c:	687b      	ldr	r3, [r7, #4]
 801ee8e:	681b      	ldr	r3, [r3, #0]
 801ee90:	4618      	mov	r0, r3
 801ee92:	f7ee fbcd 	bl	800d630 <osMessageQueueGetCount>
 801ee96:	4603      	mov	r3, r0
 801ee98:	2b00      	cmp	r3, #0
 801ee9a:	d007      	beq.n	801eeac <sys_mbox_free+0x28>
#endif
  {
    /* Line for breakpoint.  Should never break here! */
    portNOP();
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
 801ee9c:	4b0c      	ldr	r3, [pc, #48]	@ (801eed0 <sys_mbox_free+0x4c>)
 801ee9e:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 801eea2:	3301      	adds	r3, #1
 801eea4:	b29a      	uxth	r2, r3
 801eea6:	4b0a      	ldr	r3, [pc, #40]	@ (801eed0 <sys_mbox_free+0x4c>)
 801eea8:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801eeac:	687b      	ldr	r3, [r7, #4]
 801eeae:	681b      	ldr	r3, [r3, #0]
 801eeb0:	4618      	mov	r0, r3
 801eeb2:	f7ee fbef 	bl	800d694 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
 801eeb6:	4b06      	ldr	r3, [pc, #24]	@ (801eed0 <sys_mbox_free+0x4c>)
 801eeb8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 801eebc:	3b01      	subs	r3, #1
 801eebe:	b29a      	uxth	r2, r3
 801eec0:	4b03      	ldr	r3, [pc, #12]	@ (801eed0 <sys_mbox_free+0x4c>)
 801eec2:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
#endif /* SYS_STATS */
}
 801eec6:	bf00      	nop
 801eec8:	3708      	adds	r7, #8
 801eeca:	46bd      	mov	sp, r7
 801eecc:	bd80      	pop	{r7, pc}
 801eece:	bf00      	nop
 801eed0:	2002d36c 	.word	0x2002d36c

0801eed4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801eed4:	b580      	push	{r7, lr}
 801eed6:	b084      	sub	sp, #16
 801eed8:	af00      	add	r7, sp, #0
 801eeda:	6078      	str	r0, [r7, #4]
 801eedc:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801eede:	687b      	ldr	r3, [r7, #4]
 801eee0:	6818      	ldr	r0, [r3, #0]
 801eee2:	4639      	mov	r1, r7
 801eee4:	2300      	movs	r3, #0
 801eee6:	2200      	movs	r2, #0
 801eee8:	f7ee fabc 	bl	800d464 <osMessageQueuePut>
 801eeec:	4603      	mov	r3, r0
 801eeee:	2b00      	cmp	r3, #0
 801eef0:	d102      	bne.n	801eef8 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801eef2:	2300      	movs	r3, #0
 801eef4:	73fb      	strb	r3, [r7, #15]
 801eef6:	e009      	b.n	801ef0c <sys_mbox_trypost+0x38>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801eef8:	23ff      	movs	r3, #255	@ 0xff
 801eefa:	73fb      	strb	r3, [r7, #15]

#if SYS_STATS
    lwip_stats.sys.mbox.err++;
 801eefc:	4b06      	ldr	r3, [pc, #24]	@ (801ef18 <sys_mbox_trypost+0x44>)
 801eefe:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 801ef02:	3301      	adds	r3, #1
 801ef04:	b29a      	uxth	r2, r3
 801ef06:	4b04      	ldr	r3, [pc, #16]	@ (801ef18 <sys_mbox_trypost+0x44>)
 801ef08:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc
#endif /* SYS_STATS */
  }

  return result;
 801ef0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ef10:	4618      	mov	r0, r3
 801ef12:	3710      	adds	r7, #16
 801ef14:	46bd      	mov	sp, r7
 801ef16:	bd80      	pop	{r7, pc}
 801ef18:	2002d36c 	.word	0x2002d36c

0801ef1c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801ef1c:	b580      	push	{r7, lr}
 801ef1e:	b086      	sub	sp, #24
 801ef20:	af00      	add	r7, sp, #0
 801ef22:	60f8      	str	r0, [r7, #12]
 801ef24:	60b9      	str	r1, [r7, #8]
 801ef26:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801ef28:	f7ed fe3a 	bl	800cba0 <osKernelGetTickCount>
 801ef2c:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801ef2e:	687b      	ldr	r3, [r7, #4]
 801ef30:	2b00      	cmp	r3, #0
 801ef32:	d013      	beq.n	801ef5c <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801ef34:	68fb      	ldr	r3, [r7, #12]
 801ef36:	6818      	ldr	r0, [r3, #0]
 801ef38:	687b      	ldr	r3, [r7, #4]
 801ef3a:	2200      	movs	r2, #0
 801ef3c:	68b9      	ldr	r1, [r7, #8]
 801ef3e:	f7ee fb05 	bl	800d54c <osMessageQueueGet>
 801ef42:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801ef44:	693b      	ldr	r3, [r7, #16]
 801ef46:	2b00      	cmp	r3, #0
 801ef48:	d105      	bne.n	801ef56 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801ef4a:	f7ed fe29 	bl	800cba0 <osKernelGetTickCount>
 801ef4e:	4602      	mov	r2, r0
 801ef50:	697b      	ldr	r3, [r7, #20]
 801ef52:	1ad3      	subs	r3, r2, r3
 801ef54:	e00f      	b.n	801ef76 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801ef56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ef5a:	e00c      	b.n	801ef76 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801ef5c:	68fb      	ldr	r3, [r7, #12]
 801ef5e:	6818      	ldr	r0, [r3, #0]
 801ef60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ef64:	2200      	movs	r2, #0
 801ef66:	68b9      	ldr	r1, [r7, #8]
 801ef68:	f7ee faf0 	bl	800d54c <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801ef6c:	f7ed fe18 	bl	800cba0 <osKernelGetTickCount>
 801ef70:	4602      	mov	r2, r0
 801ef72:	697b      	ldr	r3, [r7, #20]
 801ef74:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801ef76:	4618      	mov	r0, r3
 801ef78:	3718      	adds	r7, #24
 801ef7a:	46bd      	mov	sp, r7
 801ef7c:	bd80      	pop	{r7, pc}

0801ef7e <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801ef7e:	b580      	push	{r7, lr}
 801ef80:	b082      	sub	sp, #8
 801ef82:	af00      	add	r7, sp, #0
 801ef84:	6078      	str	r0, [r7, #4]
 801ef86:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801ef88:	687b      	ldr	r3, [r7, #4]
 801ef8a:	6818      	ldr	r0, [r3, #0]
 801ef8c:	2300      	movs	r3, #0
 801ef8e:	2200      	movs	r2, #0
 801ef90:	6839      	ldr	r1, [r7, #0]
 801ef92:	f7ee fadb 	bl	800d54c <osMessageQueueGet>
 801ef96:	4603      	mov	r3, r0
 801ef98:	2b00      	cmp	r3, #0
 801ef9a:	d101      	bne.n	801efa0 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801ef9c:	2300      	movs	r3, #0
 801ef9e:	e001      	b.n	801efa4 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801efa0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  }
}
 801efa4:	4618      	mov	r0, r3
 801efa6:	3708      	adds	r7, #8
 801efa8:	46bd      	mov	sp, r7
 801efaa:	bd80      	pop	{r7, pc}

0801efac <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801efac:	b480      	push	{r7}
 801efae:	b083      	sub	sp, #12
 801efb0:	af00      	add	r7, sp, #0
 801efb2:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801efb4:	687b      	ldr	r3, [r7, #4]
 801efb6:	681b      	ldr	r3, [r3, #0]
 801efb8:	2b00      	cmp	r3, #0
 801efba:	d101      	bne.n	801efc0 <sys_mbox_valid+0x14>
    return 0;
 801efbc:	2300      	movs	r3, #0
 801efbe:	e000      	b.n	801efc2 <sys_mbox_valid+0x16>
  else
    return 1;
 801efc0:	2301      	movs	r3, #1
}
 801efc2:	4618      	mov	r0, r3
 801efc4:	370c      	adds	r7, #12
 801efc6:	46bd      	mov	sp, r7
 801efc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801efcc:	4770      	bx	lr

0801efce <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801efce:	b480      	push	{r7}
 801efd0:	b083      	sub	sp, #12
 801efd2:	af00      	add	r7, sp, #0
 801efd4:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801efd6:	687b      	ldr	r3, [r7, #4]
 801efd8:	2200      	movs	r2, #0
 801efda:	601a      	str	r2, [r3, #0]
}
 801efdc:	bf00      	nop
 801efde:	370c      	adds	r7, #12
 801efe0:	46bd      	mov	sp, r7
 801efe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801efe6:	4770      	bx	lr

0801efe8 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801efe8:	b580      	push	{r7, lr}
 801efea:	b082      	sub	sp, #8
 801efec:	af00      	add	r7, sp, #0
 801efee:	6078      	str	r0, [r7, #4]
 801eff0:	460b      	mov	r3, r1
 801eff2:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801eff4:	78fb      	ldrb	r3, [r7, #3]
 801eff6:	2200      	movs	r2, #0
 801eff8:	4619      	mov	r1, r3
 801effa:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801effe:	f7ee f81b 	bl	800d038 <osSemaphoreNew>
 801f002:	4602      	mov	r2, r0
 801f004:	687b      	ldr	r3, [r7, #4]
 801f006:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801f008:	687b      	ldr	r3, [r7, #4]
 801f00a:	681b      	ldr	r3, [r3, #0]
 801f00c:	2b00      	cmp	r3, #0
 801f00e:	d10a      	bne.n	801f026 <sys_sem_new+0x3e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
 801f010:	4b17      	ldr	r3, [pc, #92]	@ (801f070 <sys_sem_new+0x88>)
 801f012:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	@ 0xf0
 801f016:	3301      	adds	r3, #1
 801f018:	b29a      	uxth	r2, r3
 801f01a:	4b15      	ldr	r3, [pc, #84]	@ (801f070 <sys_sem_new+0x88>)
 801f01c:	f8a3 20f0 	strh.w	r2, [r3, #240]	@ 0xf0
#endif /* SYS_STATS */
    return ERR_MEM;
 801f020:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f024:	e01f      	b.n	801f066 <sys_sem_new+0x7e>
  }

  if(count == 0)	// Means it can't be taken
 801f026:	78fb      	ldrb	r3, [r7, #3]
 801f028:	2b00      	cmp	r3, #0
 801f02a:	d105      	bne.n	801f038 <sys_sem_new+0x50>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 801f02c:	687b      	ldr	r3, [r7, #4]
 801f02e:	681b      	ldr	r3, [r3, #0]
 801f030:	2100      	movs	r1, #0
 801f032:	4618      	mov	r0, r3
 801f034:	f7ee f89c 	bl	800d170 <osSemaphoreAcquire>
#endif
  }

#if SYS_STATS
  ++lwip_stats.sys.sem.used;
 801f038:	4b0d      	ldr	r3, [pc, #52]	@ (801f070 <sys_sem_new+0x88>)
 801f03a:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	@ 0xec
 801f03e:	3301      	adds	r3, #1
 801f040:	b29a      	uxth	r2, r3
 801f042:	4b0b      	ldr	r3, [pc, #44]	@ (801f070 <sys_sem_new+0x88>)
 801f044:	f8a3 20ec 	strh.w	r2, [r3, #236]	@ 0xec
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
 801f048:	4b09      	ldr	r3, [pc, #36]	@ (801f070 <sys_sem_new+0x88>)
 801f04a:	f8b3 20ee 	ldrh.w	r2, [r3, #238]	@ 0xee
 801f04e:	4b08      	ldr	r3, [pc, #32]	@ (801f070 <sys_sem_new+0x88>)
 801f050:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	@ 0xec
 801f054:	429a      	cmp	r2, r3
 801f056:	d205      	bcs.n	801f064 <sys_sem_new+0x7c>
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
 801f058:	4b05      	ldr	r3, [pc, #20]	@ (801f070 <sys_sem_new+0x88>)
 801f05a:	f8b3 20ec 	ldrh.w	r2, [r3, #236]	@ 0xec
 801f05e:	4b04      	ldr	r3, [pc, #16]	@ (801f070 <sys_sem_new+0x88>)
 801f060:	f8a3 20ee 	strh.w	r2, [r3, #238]	@ 0xee
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801f064:	2300      	movs	r3, #0
}
 801f066:	4618      	mov	r0, r3
 801f068:	3708      	adds	r7, #8
 801f06a:	46bd      	mov	sp, r7
 801f06c:	bd80      	pop	{r7, pc}
 801f06e:	bf00      	nop
 801f070:	2002d36c 	.word	0x2002d36c

0801f074 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801f074:	b580      	push	{r7, lr}
 801f076:	b084      	sub	sp, #16
 801f078:	af00      	add	r7, sp, #0
 801f07a:	6078      	str	r0, [r7, #4]
 801f07c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801f07e:	f7ed fd8f 	bl	800cba0 <osKernelGetTickCount>
 801f082:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801f084:	683b      	ldr	r3, [r7, #0]
 801f086:	2b00      	cmp	r3, #0
 801f088:	d011      	beq.n	801f0ae <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 801f08a:	687b      	ldr	r3, [r7, #4]
 801f08c:	681b      	ldr	r3, [r3, #0]
 801f08e:	6839      	ldr	r1, [r7, #0]
 801f090:	4618      	mov	r0, r3
 801f092:	f7ee f86d 	bl	800d170 <osSemaphoreAcquire>
 801f096:	4603      	mov	r3, r0
 801f098:	2b00      	cmp	r3, #0
 801f09a:	d105      	bne.n	801f0a8 <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801f09c:	f7ed fd80 	bl	800cba0 <osKernelGetTickCount>
 801f0a0:	4602      	mov	r2, r0
 801f0a2:	68fb      	ldr	r3, [r7, #12]
 801f0a4:	1ad3      	subs	r3, r2, r3
 801f0a6:	e012      	b.n	801f0ce <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801f0a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f0ac:	e00f      	b.n	801f0ce <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801f0ae:	bf00      	nop
 801f0b0:	687b      	ldr	r3, [r7, #4]
 801f0b2:	681b      	ldr	r3, [r3, #0]
 801f0b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801f0b8:	4618      	mov	r0, r3
 801f0ba:	f7ee f859 	bl	800d170 <osSemaphoreAcquire>
 801f0be:	4603      	mov	r3, r0
 801f0c0:	2b00      	cmp	r3, #0
 801f0c2:	d1f5      	bne.n	801f0b0 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801f0c4:	f7ed fd6c 	bl	800cba0 <osKernelGetTickCount>
 801f0c8:	4602      	mov	r2, r0
 801f0ca:	68fb      	ldr	r3, [r7, #12]
 801f0cc:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801f0ce:	4618      	mov	r0, r3
 801f0d0:	3710      	adds	r7, #16
 801f0d2:	46bd      	mov	sp, r7
 801f0d4:	bd80      	pop	{r7, pc}

0801f0d6 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801f0d6:	b580      	push	{r7, lr}
 801f0d8:	b082      	sub	sp, #8
 801f0da:	af00      	add	r7, sp, #0
 801f0dc:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801f0de:	687b      	ldr	r3, [r7, #4]
 801f0e0:	681b      	ldr	r3, [r3, #0]
 801f0e2:	4618      	mov	r0, r3
 801f0e4:	f7ee f8aa 	bl	800d23c <osSemaphoreRelease>
}
 801f0e8:	bf00      	nop
 801f0ea:	3708      	adds	r7, #8
 801f0ec:	46bd      	mov	sp, r7
 801f0ee:	bd80      	pop	{r7, pc}

0801f0f0 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801f0f0:	b580      	push	{r7, lr}
 801f0f2:	b082      	sub	sp, #8
 801f0f4:	af00      	add	r7, sp, #0
 801f0f6:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
 801f0f8:	4b08      	ldr	r3, [pc, #32]	@ (801f11c <sys_sem_free+0x2c>)
 801f0fa:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	@ 0xec
 801f0fe:	3b01      	subs	r3, #1
 801f100:	b29a      	uxth	r2, r3
 801f102:	4b06      	ldr	r3, [pc, #24]	@ (801f11c <sys_sem_free+0x2c>)
 801f104:	f8a3 20ec 	strh.w	r2, [r3, #236]	@ 0xec
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801f108:	687b      	ldr	r3, [r7, #4]
 801f10a:	681b      	ldr	r3, [r3, #0]
 801f10c:	4618      	mov	r0, r3
 801f10e:	f7ee f8ed 	bl	800d2ec <osSemaphoreDelete>
}
 801f112:	bf00      	nop
 801f114:	3708      	adds	r7, #8
 801f116:	46bd      	mov	sp, r7
 801f118:	bd80      	pop	{r7, pc}
 801f11a:	bf00      	nop
 801f11c:	2002d36c 	.word	0x2002d36c

0801f120 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801f120:	b480      	push	{r7}
 801f122:	b083      	sub	sp, #12
 801f124:	af00      	add	r7, sp, #0
 801f126:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801f128:	687b      	ldr	r3, [r7, #4]
 801f12a:	681b      	ldr	r3, [r3, #0]
 801f12c:	2b00      	cmp	r3, #0
 801f12e:	d101      	bne.n	801f134 <sys_sem_valid+0x14>
    return 0;
 801f130:	2300      	movs	r3, #0
 801f132:	e000      	b.n	801f136 <sys_sem_valid+0x16>
  else
    return 1;
 801f134:	2301      	movs	r3, #1
}
 801f136:	4618      	mov	r0, r3
 801f138:	370c      	adds	r7, #12
 801f13a:	46bd      	mov	sp, r7
 801f13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f140:	4770      	bx	lr

0801f142 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801f142:	b480      	push	{r7}
 801f144:	b083      	sub	sp, #12
 801f146:	af00      	add	r7, sp, #0
 801f148:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801f14a:	687b      	ldr	r3, [r7, #4]
 801f14c:	2200      	movs	r2, #0
 801f14e:	601a      	str	r2, [r3, #0]
}
 801f150:	bf00      	nop
 801f152:	370c      	adds	r7, #12
 801f154:	46bd      	mov	sp, r7
 801f156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f15a:	4770      	bx	lr

0801f15c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801f15c:	b580      	push	{r7, lr}
 801f15e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801f160:	2000      	movs	r0, #0
 801f162:	f7ed fe21 	bl	800cda8 <osMutexNew>
 801f166:	4603      	mov	r3, r0
 801f168:	4a01      	ldr	r2, [pc, #4]	@ (801f170 <sys_init+0x14>)
 801f16a:	6013      	str	r3, [r2, #0]
#endif
}
 801f16c:	bf00      	nop
 801f16e:	bd80      	pop	{r7, pc}
 801f170:	2002d5dc 	.word	0x2002d5dc

0801f174 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801f174:	b580      	push	{r7, lr}
 801f176:	b082      	sub	sp, #8
 801f178:	af00      	add	r7, sp, #0
 801f17a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801f17c:	2000      	movs	r0, #0
 801f17e:	f7ed fe13 	bl	800cda8 <osMutexNew>
 801f182:	4602      	mov	r2, r0
 801f184:	687b      	ldr	r3, [r7, #4]
 801f186:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801f188:	687b      	ldr	r3, [r7, #4]
 801f18a:	681b      	ldr	r3, [r3, #0]
 801f18c:	2b00      	cmp	r3, #0
 801f18e:	d10a      	bne.n	801f1a6 <sys_mutex_new+0x32>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
 801f190:	4b12      	ldr	r3, [pc, #72]	@ (801f1dc <sys_mutex_new+0x68>)
 801f192:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	@ 0xf6
 801f196:	3301      	adds	r3, #1
 801f198:	b29a      	uxth	r2, r3
 801f19a:	4b10      	ldr	r3, [pc, #64]	@ (801f1dc <sys_mutex_new+0x68>)
 801f19c:	f8a3 20f6 	strh.w	r2, [r3, #246]	@ 0xf6
#endif /* SYS_STATS */
    return ERR_MEM;
 801f1a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f1a4:	e016      	b.n	801f1d4 <sys_mutex_new+0x60>
  }

#if SYS_STATS
  ++lwip_stats.sys.mutex.used;
 801f1a6:	4b0d      	ldr	r3, [pc, #52]	@ (801f1dc <sys_mutex_new+0x68>)
 801f1a8:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 801f1ac:	3301      	adds	r3, #1
 801f1ae:	b29a      	uxth	r2, r3
 801f1b0:	4b0a      	ldr	r3, [pc, #40]	@ (801f1dc <sys_mutex_new+0x68>)
 801f1b2:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
 801f1b6:	4b09      	ldr	r3, [pc, #36]	@ (801f1dc <sys_mutex_new+0x68>)
 801f1b8:	f8b3 20f4 	ldrh.w	r2, [r3, #244]	@ 0xf4
 801f1bc:	4b07      	ldr	r3, [pc, #28]	@ (801f1dc <sys_mutex_new+0x68>)
 801f1be:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 801f1c2:	429a      	cmp	r2, r3
 801f1c4:	d205      	bcs.n	801f1d2 <sys_mutex_new+0x5e>
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
 801f1c6:	4b05      	ldr	r3, [pc, #20]	@ (801f1dc <sys_mutex_new+0x68>)
 801f1c8:	f8b3 20f2 	ldrh.w	r2, [r3, #242]	@ 0xf2
 801f1cc:	4b03      	ldr	r3, [pc, #12]	@ (801f1dc <sys_mutex_new+0x68>)
 801f1ce:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801f1d2:	2300      	movs	r3, #0
}
 801f1d4:	4618      	mov	r0, r3
 801f1d6:	3708      	adds	r7, #8
 801f1d8:	46bd      	mov	sp, r7
 801f1da:	bd80      	pop	{r7, pc}
 801f1dc:	2002d36c 	.word	0x2002d36c

0801f1e0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801f1e0:	b580      	push	{r7, lr}
 801f1e2:	b082      	sub	sp, #8
 801f1e4:	af00      	add	r7, sp, #0
 801f1e6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801f1e8:	687b      	ldr	r3, [r7, #4]
 801f1ea:	681b      	ldr	r3, [r3, #0]
 801f1ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801f1f0:	4618      	mov	r0, r3
 801f1f2:	f7ed fe73 	bl	800cedc <osMutexAcquire>
#endif
}
 801f1f6:	bf00      	nop
 801f1f8:	3708      	adds	r7, #8
 801f1fa:	46bd      	mov	sp, r7
 801f1fc:	bd80      	pop	{r7, pc}

0801f1fe <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801f1fe:	b580      	push	{r7, lr}
 801f200:	b082      	sub	sp, #8
 801f202:	af00      	add	r7, sp, #0
 801f204:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801f206:	687b      	ldr	r3, [r7, #4]
 801f208:	681b      	ldr	r3, [r3, #0]
 801f20a:	4618      	mov	r0, r3
 801f20c:	f7ed fec4 	bl	800cf98 <osMutexRelease>
}
 801f210:	bf00      	nop
 801f212:	3708      	adds	r7, #8
 801f214:	46bd      	mov	sp, r7
 801f216:	bd80      	pop	{r7, pc}

0801f218 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801f218:	b580      	push	{r7, lr}
 801f21a:	b08e      	sub	sp, #56	@ 0x38
 801f21c:	af00      	add	r7, sp, #0
 801f21e:	60f8      	str	r0, [r7, #12]
 801f220:	60b9      	str	r1, [r7, #8]
 801f222:	607a      	str	r2, [r7, #4]
 801f224:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801f226:	f107 0314 	add.w	r3, r7, #20
 801f22a:	2224      	movs	r2, #36	@ 0x24
 801f22c:	2100      	movs	r1, #0
 801f22e:	4618      	mov	r0, r3
 801f230:	f001 fc12 	bl	8020a58 <memset>
 801f234:	68fb      	ldr	r3, [r7, #12]
 801f236:	617b      	str	r3, [r7, #20]
 801f238:	683b      	ldr	r3, [r7, #0]
 801f23a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f23c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801f23e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801f240:	f107 0314 	add.w	r3, r7, #20
 801f244:	461a      	mov	r2, r3
 801f246:	6879      	ldr	r1, [r7, #4]
 801f248:	68b8      	ldr	r0, [r7, #8]
 801f24a:	f7ed fcd1 	bl	800cbf0 <osThreadNew>
 801f24e:	4603      	mov	r3, r0
#endif
}
 801f250:	4618      	mov	r0, r3
 801f252:	3738      	adds	r7, #56	@ 0x38
 801f254:	46bd      	mov	sp, r7
 801f256:	bd80      	pop	{r7, pc}

0801f258 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801f258:	b580      	push	{r7, lr}
 801f25a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801f25c:	4b04      	ldr	r3, [pc, #16]	@ (801f270 <sys_arch_protect+0x18>)
 801f25e:	681b      	ldr	r3, [r3, #0]
 801f260:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801f264:	4618      	mov	r0, r3
 801f266:	f7ed fe39 	bl	800cedc <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801f26a:	2301      	movs	r3, #1
}
 801f26c:	4618      	mov	r0, r3
 801f26e:	bd80      	pop	{r7, pc}
 801f270:	2002d5dc 	.word	0x2002d5dc

0801f274 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801f274:	b580      	push	{r7, lr}
 801f276:	b082      	sub	sp, #8
 801f278:	af00      	add	r7, sp, #0
 801f27a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801f27c:	4b04      	ldr	r3, [pc, #16]	@ (801f290 <sys_arch_unprotect+0x1c>)
 801f27e:	681b      	ldr	r3, [r3, #0]
 801f280:	4618      	mov	r0, r3
 801f282:	f7ed fe89 	bl	800cf98 <osMutexRelease>
}
 801f286:	bf00      	nop
 801f288:	3708      	adds	r7, #8
 801f28a:	46bd      	mov	sp, r7
 801f28c:	bd80      	pop	{r7, pc}
 801f28e:	bf00      	nop
 801f290:	2002d5dc 	.word	0x2002d5dc

0801f294 <AdcTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void AdcTestTask(void)
{
 801f294:	b580      	push	{r7, lr}
 801f296:	b0ca      	sub	sp, #296	@ 0x128
 801f298:	af00      	add	r7, sp, #0
	TestData_t test_data;
	OutMsg_t out_msg;
	uint8_t result;
	osStatus_t status;

	adcReadySem = osSemaphoreNew(1, 0, NULL);
 801f29a:	2200      	movs	r2, #0
 801f29c:	2100      	movs	r1, #0
 801f29e:	2001      	movs	r0, #1
 801f2a0:	f7ed feca 	bl	800d038 <osSemaphoreNew>
 801f2a4:	4603      	mov	r3, r0
 801f2a6:	4a3b      	ldr	r2, [pc, #236]	@ (801f394 <AdcTestTask+0x100>)
 801f2a8:	6013      	str	r3, [r2, #0]

	while (1)
	{
		status = osMessageQueueGet(adcQueueHandle, &test_data, 0, osWaitForever);
 801f2aa:	4b3b      	ldr	r3, [pc, #236]	@ (801f398 <AdcTestTask+0x104>)
 801f2ac:	6818      	ldr	r0, [r3, #0]
 801f2ae:	f107 0110 	add.w	r1, r7, #16
 801f2b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f2b6:	2200      	movs	r2, #0
 801f2b8:	f7ee f948 	bl	800d54c <osMessageQueueGet>
 801f2bc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
		if(status == osOK)
 801f2c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801f2c4:	2b00      	cmp	r3, #0
 801f2c6:	d153      	bne.n	801f370 <AdcTestTask+0xdc>
		{
			printf("adc received test ID: %lu\n", test_data.test_id);
 801f2c8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f2cc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801f2d0:	689b      	ldr	r3, [r3, #8]
 801f2d2:	4619      	mov	r1, r3
 801f2d4:	4831      	ldr	r0, [pc, #196]	@ (801f39c <AdcTestTask+0x108>)
 801f2d6:	f001 fa5f 	bl	8020798 <iprintf>

			for (uint8_t i=0; i<test_data.n_iter; i++)
 801f2da:	2300      	movs	r3, #0
 801f2dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801f2e0:	e00d      	b.n	801f2fe <AdcTestTask+0x6a>
			{
				result = ADC_Test_Perform();
 801f2e2:	f000 f861 	bl	801f3a8 <ADC_Test_Perform>
 801f2e6:	4603      	mov	r3, r0
 801f2e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 801f2ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f2f0:	2bff      	cmp	r3, #255	@ 0xff
 801f2f2:	d00e      	beq.n	801f312 <AdcTestTask+0x7e>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801f2f4:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801f2f8:	3301      	adds	r3, #1
 801f2fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801f2fe:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f302:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801f306:	7b1b      	ldrb	r3, [r3, #12]
 801f308:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 801f30c:	429a      	cmp	r2, r3
 801f30e:	d3e8      	bcc.n	801f2e2 <AdcTestTask+0x4e>
 801f310:	e000      	b.n	801f314 <AdcTestTask+0x80>
					break;
 801f312:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 801f314:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f318:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801f31c:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 801f320:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 801f324:	6812      	ldr	r2, [r2, #0]
 801f326:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 801f328:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f32c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801f330:	889a      	ldrh	r2, [r3, #4]
 801f332:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f336:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801f33a:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 801f33c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f340:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801f344:	689a      	ldr	r2, [r3, #8]
 801f346:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f34a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801f34e:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 801f350:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f354:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801f358:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 801f35c:	731a      	strb	r2, [r3, #12]

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 801f35e:	4b10      	ldr	r3, [pc, #64]	@ (801f3a0 <AdcTestTask+0x10c>)
 801f360:	6818      	ldr	r0, [r3, #0]
 801f362:	4639      	mov	r1, r7
 801f364:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f368:	2200      	movs	r2, #0
 801f36a:	f7ee f87b 	bl	800d464 <osMessageQueuePut>
 801f36e:	e79c      	b.n	801f2aa <AdcTestTask+0x16>
		}
		else if (status == osErrorTimeout)
 801f370:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801f374:	f113 0f02 	cmn.w	r3, #2
 801f378:	d103      	bne.n	801f382 <AdcTestTask+0xee>
		{
			osDelay(1);
 801f37a:	2001      	movs	r0, #1
 801f37c:	f7ed fce6 	bl	800cd4c <osDelay>
 801f380:	e793      	b.n	801f2aa <AdcTestTask+0x16>
		}
		else
		{
			printf("adc msg read error: %d\n", status);
 801f382:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 801f386:	4807      	ldr	r0, [pc, #28]	@ (801f3a4 <AdcTestTask+0x110>)
 801f388:	f001 fa06 	bl	8020798 <iprintf>
			osDelay(1);
 801f38c:	2001      	movs	r0, #1
 801f38e:	f7ed fcdd 	bl	800cd4c <osDelay>
		status = osMessageQueueGet(adcQueueHandle, &test_data, 0, osWaitForever);
 801f392:	e78a      	b.n	801f2aa <AdcTestTask+0x16>
 801f394:	2002d5e0 	.word	0x2002d5e0
 801f398:	20000334 	.word	0x20000334
 801f39c:	08025e68 	.word	0x08025e68
 801f3a0:	20000324 	.word	0x20000324
 801f3a4:	08025e84 	.word	0x08025e84

0801f3a8 <ADC_Test_Perform>:
		}
	}
}

uint8_t ADC_Test_Perform(void)
{
 801f3a8:	b580      	push	{r7, lr}
 801f3aa:	b082      	sub	sp, #8
 801f3ac:	af00      	add	r7, sp, #0
#ifdef PRINT_TESTS_DEBUG
	printf("Performing adc test\n");
 801f3ae:	4819      	ldr	r0, [pc, #100]	@ (801f414 <ADC_Test_Perform+0x6c>)
 801f3b0:	f001 fa62 	bl	8020878 <puts>
#endif

	HAL_StatusTypeDef status;

	status = HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adc_buf,1);
 801f3b4:	2201      	movs	r2, #1
 801f3b6:	4918      	ldr	r1, [pc, #96]	@ (801f418 <ADC_Test_Perform+0x70>)
 801f3b8:	4818      	ldr	r0, [pc, #96]	@ (801f41c <ADC_Test_Perform+0x74>)
 801f3ba:	f7e3 f867 	bl	800248c <HAL_ADC_Start_DMA>
 801f3be:	4603      	mov	r3, r0
 801f3c0:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 801f3c2:	79fb      	ldrb	r3, [r7, #7]
 801f3c4:	2b00      	cmp	r3, #0
 801f3c6:	d004      	beq.n	801f3d2 <ADC_Test_Perform+0x2a>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("ADC_Start_DMA failed\n");
 801f3c8:	4815      	ldr	r0, [pc, #84]	@ (801f420 <ADC_Test_Perform+0x78>)
 801f3ca:	f001 fa55 	bl	8020878 <puts>
#endif
		return TEST_FAILED;
 801f3ce:	23ff      	movs	r3, #255	@ 0xff
 801f3d0:	e01b      	b.n	801f40a <ADC_Test_Perform+0x62>
	}

	if (osSemaphoreAcquire(adcReadySem, 10) != osOK) {
 801f3d2:	4b14      	ldr	r3, [pc, #80]	@ (801f424 <ADC_Test_Perform+0x7c>)
 801f3d4:	681b      	ldr	r3, [r3, #0]
 801f3d6:	210a      	movs	r1, #10
 801f3d8:	4618      	mov	r0, r3
 801f3da:	f7ed fec9 	bl	800d170 <osSemaphoreAcquire>
 801f3de:	4603      	mov	r3, r0
 801f3e0:	2b00      	cmp	r3, #0
 801f3e2:	d004      	beq.n	801f3ee <ADC_Test_Perform+0x46>
#ifdef PRINT_TESTS_DEBUG
		printf("ADC semaphore timeout\n");
 801f3e4:	4810      	ldr	r0, [pc, #64]	@ (801f428 <ADC_Test_Perform+0x80>)
 801f3e6:	f001 fa47 	bl	8020878 <puts>
#endif
		return TEST_FAILED;
 801f3ea:	23ff      	movs	r3, #255	@ 0xff
 801f3ec:	e00d      	b.n	801f40a <ADC_Test_Perform+0x62>
	}

#ifdef PRINT_TESTS_DEBUG
	printf("adc value = %d\n",adc_buf[0]);
 801f3ee:	4b0a      	ldr	r3, [pc, #40]	@ (801f418 <ADC_Test_Perform+0x70>)
 801f3f0:	881b      	ldrh	r3, [r3, #0]
 801f3f2:	4619      	mov	r1, r3
 801f3f4:	480d      	ldr	r0, [pc, #52]	@ (801f42c <ADC_Test_Perform+0x84>)
 801f3f6:	f001 f9cf 	bl	8020798 <iprintf>
#endif

	if(adc_buf[0] >= EXPECTED_3V3 - ERR_TOLERANCE_3V3) return TEST_SUCCESS;
 801f3fa:	4b07      	ldr	r3, [pc, #28]	@ (801f418 <ADC_Test_Perform+0x70>)
 801f3fc:	881b      	ldrh	r3, [r3, #0]
 801f3fe:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 801f402:	d301      	bcc.n	801f408 <ADC_Test_Perform+0x60>
 801f404:	2301      	movs	r3, #1
 801f406:	e000      	b.n	801f40a <ADC_Test_Perform+0x62>

	return TEST_FAILED;
 801f408:	23ff      	movs	r3, #255	@ 0xff
}
 801f40a:	4618      	mov	r0, r3
 801f40c:	3708      	adds	r7, #8
 801f40e:	46bd      	mov	sp, r7
 801f410:	bd80      	pop	{r7, pc}
 801f412:	bf00      	nop
 801f414:	08025e9c 	.word	0x08025e9c
 801f418:	2002d5e4 	.word	0x2002d5e4
 801f41c:	2000022c 	.word	0x2000022c
 801f420:	08025eb0 	.word	0x08025eb0
 801f424:	2002d5e0 	.word	0x2002d5e0
 801f428:	08025ec8 	.word	0x08025ec8
 801f42c:	08025ee0 	.word	0x08025ee0

0801f430 <HAL_ADC_ConvCpltCallback>:
/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 801f430:	b580      	push	{r7, lr}
 801f432:	b082      	sub	sp, #8
 801f434:	af00      	add	r7, sp, #0
 801f436:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(adcReadySem);
 801f438:	4b09      	ldr	r3, [pc, #36]	@ (801f460 <HAL_ADC_ConvCpltCallback+0x30>)
 801f43a:	681b      	ldr	r3, [r3, #0]
 801f43c:	4618      	mov	r0, r3
 801f43e:	f7ed fefd 	bl	800d23c <osSemaphoreRelease>
	if(HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 801f442:	4808      	ldr	r0, [pc, #32]	@ (801f464 <HAL_ADC_ConvCpltCallback+0x34>)
 801f444:	f7e3 f920 	bl	8002688 <HAL_ADC_Stop_DMA>
 801f448:	4603      	mov	r3, r0
 801f44a:	2b00      	cmp	r3, #0
 801f44c:	d004      	beq.n	801f458 <HAL_ADC_ConvCpltCallback+0x28>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("ADC_Stop_DMA failed\n");
 801f44e:	4806      	ldr	r0, [pc, #24]	@ (801f468 <HAL_ADC_ConvCpltCallback+0x38>)
 801f450:	f001 fa12 	bl	8020878 <puts>
#endif
		Error_Handler();
 801f454:	f7e1 feea 	bl	800122c <Error_Handler>
	}
}
 801f458:	bf00      	nop
 801f45a:	3708      	adds	r7, #8
 801f45c:	46bd      	mov	sp, r7
 801f45e:	bd80      	pop	{r7, pc}
 801f460:	2002d5e0 	.word	0x2002d5e0
 801f464:	2000022c 	.word	0x2000022c
 801f468:	08025ef0 	.word	0x08025ef0

0801f46c <TestDispatcher>:
extern osMessageQueueId_t spiQueueHandle;
extern osMessageQueueId_t adcQueueHandle;
extern osMessageQueueId_t timQueueHandle;

void TestDispatcher(void)
{
 801f46c:	b580      	push	{r7, lr}
 801f46e:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 801f472:	af00      	add	r7, sp, #0
	while(1)
	{
		InMsg_t in_msg;
		TestData_t test_data;

		printf("Dispatcher waiting for messages...\n");
 801f474:	4861      	ldr	r0, [pc, #388]	@ (801f5fc <TestDispatcher+0x190>)
 801f476:	f001 f9ff 	bl	8020878 <puts>
		if(osMessageQueueGet(inMsgQueueHandle, &in_msg, 0, osWaitForever) == osOK)
 801f47a:	4b61      	ldr	r3, [pc, #388]	@ (801f600 <TestDispatcher+0x194>)
 801f47c:	6818      	ldr	r0, [r3, #0]
 801f47e:	4639      	mov	r1, r7
 801f480:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f484:	2200      	movs	r2, #0
 801f486:	f7ee f861 	bl	800d54c <osMessageQueueGet>
 801f48a:	4603      	mov	r3, r0
 801f48c:	2b00      	cmp	r3, #0
 801f48e:	d1f1      	bne.n	801f474 <TestDispatcher+0x8>
		{
			printf("Dispatcher got msg to periph %d!\n", in_msg.peripheral);
 801f490:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f494:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f498:	7b1b      	ldrb	r3, [r3, #12]
 801f49a:	4619      	mov	r1, r3
 801f49c:	4859      	ldr	r0, [pc, #356]	@ (801f604 <TestDispatcher+0x198>)
 801f49e:	f001 f97b 	bl	8020798 <iprintf>

			// load test_data
			test_data.addr = in_msg.addr;
 801f4a2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f4a6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801f4aa:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 801f4ae:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 801f4b2:	6812      	ldr	r2, [r2, #0]
 801f4b4:	601a      	str	r2, [r3, #0]
			test_data.port = in_msg.port;
 801f4b6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f4ba:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f4be:	889a      	ldrh	r2, [r3, #4]
 801f4c0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f4c4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801f4c8:	809a      	strh	r2, [r3, #4]
			test_data.test_id = in_msg.test_id;
 801f4ca:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f4ce:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f4d2:	689a      	ldr	r2, [r3, #8]
 801f4d4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f4d8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801f4dc:	609a      	str	r2, [r3, #8]
			test_data.n_iter = in_msg.n_iter;
 801f4de:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f4e2:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f4e6:	7b5a      	ldrb	r2, [r3, #13]
 801f4e8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f4ec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801f4f0:	731a      	strb	r2, [r3, #12]
			test_data.p_len = in_msg.p_len;
 801f4f2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f4f6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f4fa:	7b9a      	ldrb	r2, [r3, #14]
 801f4fc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f500:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801f504:	735a      	strb	r2, [r3, #13]
			memcpy(test_data.payload, in_msg.payload, in_msg.p_len);
 801f506:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f50a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f50e:	7b9b      	ldrb	r3, [r3, #14]
 801f510:	461a      	mov	r2, r3
 801f512:	463b      	mov	r3, r7
 801f514:	f103 010f 	add.w	r1, r3, #15
 801f518:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801f51c:	330e      	adds	r3, #14
 801f51e:	4618      	mov	r0, r3
 801f520:	f001 fb6d 	bl	8020bfe <memcpy>

			// send to relevant test queue
			if(in_msg.peripheral & TEST_UART)
 801f524:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f528:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f52c:	7b1b      	ldrb	r3, [r3, #12]
 801f52e:	f003 0302 	and.w	r3, r3, #2
 801f532:	2b00      	cmp	r3, #0
 801f534:	d00b      	beq.n	801f54e <TestDispatcher+0xe2>
			{
				printf("dispatcher sent to UART\n");
 801f536:	4834      	ldr	r0, [pc, #208]	@ (801f608 <TestDispatcher+0x19c>)
 801f538:	f001 f99e 	bl	8020878 <puts>
				osMessageQueuePut(uartQueueHandle, &test_data, 0, osWaitForever);
 801f53c:	4b33      	ldr	r3, [pc, #204]	@ (801f60c <TestDispatcher+0x1a0>)
 801f53e:	6818      	ldr	r0, [r3, #0]
 801f540:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801f544:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f548:	2200      	movs	r2, #0
 801f54a:	f7ed ff8b 	bl	800d464 <osMessageQueuePut>
			}
			if(in_msg.peripheral & TEST_I2C)
 801f54e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f552:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f556:	7b1b      	ldrb	r3, [r3, #12]
 801f558:	f003 0308 	and.w	r3, r3, #8
 801f55c:	2b00      	cmp	r3, #0
 801f55e:	d00b      	beq.n	801f578 <TestDispatcher+0x10c>
			{
				printf("dispatcher sent to I2C\n");
 801f560:	482b      	ldr	r0, [pc, #172]	@ (801f610 <TestDispatcher+0x1a4>)
 801f562:	f001 f989 	bl	8020878 <puts>
				osMessageQueuePut(i2cQueueHandle, &test_data, 0, osWaitForever);
 801f566:	4b2b      	ldr	r3, [pc, #172]	@ (801f614 <TestDispatcher+0x1a8>)
 801f568:	6818      	ldr	r0, [r3, #0]
 801f56a:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801f56e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f572:	2200      	movs	r2, #0
 801f574:	f7ed ff76 	bl	800d464 <osMessageQueuePut>
			}
			if(in_msg.peripheral & TEST_SPI)
 801f578:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f57c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f580:	7b1b      	ldrb	r3, [r3, #12]
 801f582:	f003 0304 	and.w	r3, r3, #4
 801f586:	2b00      	cmp	r3, #0
 801f588:	d00b      	beq.n	801f5a2 <TestDispatcher+0x136>
			{
				printf("dispatcher sent to SPI\n");
 801f58a:	4823      	ldr	r0, [pc, #140]	@ (801f618 <TestDispatcher+0x1ac>)
 801f58c:	f001 f974 	bl	8020878 <puts>
				osMessageQueuePut(spiQueueHandle, &test_data, 0, osWaitForever);
 801f590:	4b22      	ldr	r3, [pc, #136]	@ (801f61c <TestDispatcher+0x1b0>)
 801f592:	6818      	ldr	r0, [r3, #0]
 801f594:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801f598:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f59c:	2200      	movs	r2, #0
 801f59e:	f7ed ff61 	bl	800d464 <osMessageQueuePut>
			}
			if(in_msg.peripheral & TEST_ADC)
 801f5a2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f5a6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f5aa:	7b1b      	ldrb	r3, [r3, #12]
 801f5ac:	f003 0310 	and.w	r3, r3, #16
 801f5b0:	2b00      	cmp	r3, #0
 801f5b2:	d00b      	beq.n	801f5cc <TestDispatcher+0x160>
			{
				printf("dispatcher sent to ADC\n");
 801f5b4:	481a      	ldr	r0, [pc, #104]	@ (801f620 <TestDispatcher+0x1b4>)
 801f5b6:	f001 f95f 	bl	8020878 <puts>
				osMessageQueuePut(adcQueueHandle, &test_data, 0, osWaitForever);
 801f5ba:	4b1a      	ldr	r3, [pc, #104]	@ (801f624 <TestDispatcher+0x1b8>)
 801f5bc:	6818      	ldr	r0, [r3, #0]
 801f5be:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801f5c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f5c6:	2200      	movs	r2, #0
 801f5c8:	f7ed ff4c 	bl	800d464 <osMessageQueuePut>
			}
			if(in_msg.peripheral & TEST_TIM)
 801f5cc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f5d0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f5d4:	7b1b      	ldrb	r3, [r3, #12]
 801f5d6:	f003 0301 	and.w	r3, r3, #1
 801f5da:	2b00      	cmp	r3, #0
 801f5dc:	f43f af4a 	beq.w	801f474 <TestDispatcher+0x8>
			{
				printf("dispatcher sent to TIM\n");
 801f5e0:	4811      	ldr	r0, [pc, #68]	@ (801f628 <TestDispatcher+0x1bc>)
 801f5e2:	f001 f949 	bl	8020878 <puts>
				osMessageQueuePut(timQueueHandle, &test_data, 0, osWaitForever);
 801f5e6:	4b11      	ldr	r3, [pc, #68]	@ (801f62c <TestDispatcher+0x1c0>)
 801f5e8:	6818      	ldr	r0, [r3, #0]
 801f5ea:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801f5ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f5f2:	2200      	movs	r2, #0
 801f5f4:	f7ed ff36 	bl	800d464 <osMessageQueuePut>
	{
 801f5f8:	e73c      	b.n	801f474 <TestDispatcher+0x8>
 801f5fa:	bf00      	nop
 801f5fc:	08025f04 	.word	0x08025f04
 801f600:	20000320 	.word	0x20000320
 801f604:	08025f28 	.word	0x08025f28
 801f608:	08025f4c 	.word	0x08025f4c
 801f60c:	20000328 	.word	0x20000328
 801f610:	08025f64 	.word	0x08025f64
 801f614:	2000032c 	.word	0x2000032c
 801f618:	08025f7c 	.word	0x08025f7c
 801f61c:	20000330 	.word	0x20000330
 801f620:	08025f94 	.word	0x08025f94
 801f624:	20000334 	.word	0x20000334
 801f628:	08025fac 	.word	0x08025fac
 801f62c:	20000338 	.word	0x20000338

0801f630 <Match_CRC>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

int Match_CRC(uint8_t *buf1, uint8_t buf1_len, uint8_t *buf2, uint8_t buf2_len)
{
 801f630:	b580      	push	{r7, lr}
 801f632:	b086      	sub	sp, #24
 801f634:	af00      	add	r7, sp, #0
 801f636:	60f8      	str	r0, [r7, #12]
 801f638:	607a      	str	r2, [r7, #4]
 801f63a:	461a      	mov	r2, r3
 801f63c:	460b      	mov	r3, r1
 801f63e:	72fb      	strb	r3, [r7, #11]
 801f640:	4613      	mov	r3, r2
 801f642:	72bb      	strb	r3, [r7, #10]
	uint32_t buf1_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)buf1, (uint32_t) buf1_len);
 801f644:	7afb      	ldrb	r3, [r7, #11]
 801f646:	461a      	mov	r2, r3
 801f648:	68f9      	ldr	r1, [r7, #12]
 801f64a:	480b      	ldr	r0, [pc, #44]	@ (801f678 <Match_CRC+0x48>)
 801f64c:	f7e3 fca6 	bl	8002f9c <HAL_CRC_Calculate>
 801f650:	6178      	str	r0, [r7, #20]
	uint32_t buf2_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)buf2, (uint32_t) buf2_len);
 801f652:	7abb      	ldrb	r3, [r7, #10]
 801f654:	461a      	mov	r2, r3
 801f656:	6879      	ldr	r1, [r7, #4]
 801f658:	4807      	ldr	r0, [pc, #28]	@ (801f678 <Match_CRC+0x48>)
 801f65a:	f7e3 fc9f 	bl	8002f9c <HAL_CRC_Calculate>
 801f65e:	6138      	str	r0, [r7, #16]

	if(buf1_crc == buf2_crc)
 801f660:	697a      	ldr	r2, [r7, #20]
 801f662:	693b      	ldr	r3, [r7, #16]
 801f664:	429a      	cmp	r2, r3
 801f666:	d101      	bne.n	801f66c <Match_CRC+0x3c>
		return CRC_MATCH_OK;
 801f668:	2301      	movs	r3, #1
 801f66a:	e000      	b.n	801f66e <Match_CRC+0x3e>

	return CRC_MATCH_FAIL;
 801f66c:	2300      	movs	r3, #0
}
 801f66e:	4618      	mov	r0, r3
 801f670:	3718      	adds	r7, #24
 801f672:	46bd      	mov	sp, r7
 801f674:	bd80      	pop	{r7, pc}
 801f676:	bf00      	nop
 801f678:	200002d4 	.word	0x200002d4

0801f67c <UDP_Listen>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void UDP_Listen(void)
{
 801f67c:	b580      	push	{r7, lr}
 801f67e:	b0ca      	sub	sp, #296	@ 0x128
 801f680:	af00      	add	r7, sp, #0
	void *raw_data;
	uint16_t len;
	InMsg_t in_msg;
	int n_read;

	conn_recv = netconn_new(NETCONN_UDP);
 801f682:	2200      	movs	r2, #0
 801f684:	2100      	movs	r1, #0
 801f686:	2020      	movs	r0, #32
 801f688:	f7f1 fb64 	bl	8010d54 <netconn_new_with_proto_and_callback>
 801f68c:	4603      	mov	r3, r0
 801f68e:	4a6f      	ldr	r2, [pc, #444]	@ (801f84c <UDP_Listen+0x1d0>)
 801f690:	6013      	str	r3, [r2, #0]
	if (conn_recv == NULL)
 801f692:	4b6e      	ldr	r3, [pc, #440]	@ (801f84c <UDP_Listen+0x1d0>)
 801f694:	681b      	ldr	r3, [r3, #0]
 801f696:	2b00      	cmp	r3, #0
 801f698:	d104      	bne.n	801f6a4 <UDP_Listen+0x28>
	{
		printf("error initializing UDP receive netconn\n");
 801f69a:	486d      	ldr	r0, [pc, #436]	@ (801f850 <UDP_Listen+0x1d4>)
 801f69c:	f001 f8ec 	bl	8020878 <puts>
		osThreadExit();
 801f6a0:	f7ed fb4c 	bl	800cd3c <osThreadExit>
	}

	if (netconn_bind(conn_recv, IP_ADDR_ANY, SERVER_PORT) != ERR_OK)
 801f6a4:	4b69      	ldr	r3, [pc, #420]	@ (801f84c <UDP_Listen+0x1d0>)
 801f6a6:	681b      	ldr	r3, [r3, #0]
 801f6a8:	f24d 4231 	movw	r2, #54321	@ 0xd431
 801f6ac:	4969      	ldr	r1, [pc, #420]	@ (801f854 <UDP_Listen+0x1d8>)
 801f6ae:	4618      	mov	r0, r3
 801f6b0:	f7f1 fc0a 	bl	8010ec8 <netconn_bind>
 801f6b4:	4603      	mov	r3, r0
 801f6b6:	2b00      	cmp	r3, #0
 801f6b8:	d00c      	beq.n	801f6d4 <UDP_Listen+0x58>
	{
		printf("error binding UDP port\n");
 801f6ba:	4867      	ldr	r0, [pc, #412]	@ (801f858 <UDP_Listen+0x1dc>)
 801f6bc:	f001 f8dc 	bl	8020878 <puts>
		netconn_delete(conn_recv);
 801f6c0:	4b62      	ldr	r3, [pc, #392]	@ (801f84c <UDP_Listen+0x1d0>)
 801f6c2:	681b      	ldr	r3, [r3, #0]
 801f6c4:	4618      	mov	r0, r3
 801f6c6:	f7f1 fbe3 	bl	8010e90 <netconn_delete>
		conn_recv = NULL;
 801f6ca:	4b60      	ldr	r3, [pc, #384]	@ (801f84c <UDP_Listen+0x1d0>)
 801f6cc:	2200      	movs	r2, #0
 801f6ce:	601a      	str	r2, [r3, #0]
		osThreadExit();
 801f6d0:	f7ed fb34 	bl	800cd3c <osThreadExit>
	}

	printf("Listening started\n");
 801f6d4:	4861      	ldr	r0, [pc, #388]	@ (801f85c <UDP_Listen+0x1e0>)
 801f6d6:	f001 f8cf 	bl	8020878 <puts>

	while (1)
	{
		printf("Listener waiting for messages...\n");
 801f6da:	4861      	ldr	r0, [pc, #388]	@ (801f860 <UDP_Listen+0x1e4>)
 801f6dc:	f001 f8cc 	bl	8020878 <puts>
		if (netconn_recv(conn_recv, &buf) == ERR_OK)
 801f6e0:	4b5a      	ldr	r3, [pc, #360]	@ (801f84c <UDP_Listen+0x1d0>)
 801f6e2:	681b      	ldr	r3, [r3, #0]
 801f6e4:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 801f6e8:	4611      	mov	r1, r2
 801f6ea:	4618      	mov	r0, r3
 801f6ec:	f7f1 fda0 	bl	8011230 <netconn_recv>
 801f6f0:	4603      	mov	r3, r0
 801f6f2:	2b00      	cmp	r3, #0
 801f6f4:	f040 80a5 	bne.w	801f842 <UDP_Listen+0x1c6>
		{
			printf("listener got a message\n");
 801f6f8:	485a      	ldr	r0, [pc, #360]	@ (801f864 <UDP_Listen+0x1e8>)
 801f6fa:	f001 f8bd 	bl	8020878 <puts>
			// Load in_msg
			in_msg.addr = *netbuf_fromaddr(buf);
 801f6fe:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 801f702:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f706:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f70a:	6892      	ldr	r2, [r2, #8]
 801f70c:	601a      	str	r2, [r3, #0]
			in_msg.port = netbuf_fromport(buf);
 801f70e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801f712:	899a      	ldrh	r2, [r3, #12]
 801f714:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f718:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f71c:	809a      	strh	r2, [r3, #4]

			netbuf_data(buf, &raw_data, &len);
 801f71e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801f722:	f507 728b 	add.w	r2, r7, #278	@ 0x116
 801f726:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 801f72a:	4618      	mov	r0, r3
 801f72c:	f7f3 f976 	bl	8012a1c <netbuf_data>

			n_read = 0;
 801f730:	2300      	movs	r3, #0
 801f732:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
			memcpy(&in_msg.test_id, raw_data, sizeof(in_msg.test_id));
 801f736:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801f73a:	681b      	ldr	r3, [r3, #0]
 801f73c:	461a      	mov	r2, r3
 801f73e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f742:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f746:	609a      	str	r2, [r3, #8]
			n_read += sizeof(in_msg.test_id);
 801f748:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801f74c:	3304      	adds	r3, #4
 801f74e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

			memcpy(&in_msg.peripheral, &raw_data[n_read++], 1);
 801f752:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801f756:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801f75a:	1c59      	adds	r1, r3, #1
 801f75c:	f8c7 1124 	str.w	r1, [r7, #292]	@ 0x124
 801f760:	4413      	add	r3, r2
 801f762:	781a      	ldrb	r2, [r3, #0]
 801f764:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f768:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f76c:	731a      	strb	r2, [r3, #12]
			memcpy(&in_msg.n_iter, &raw_data[n_read++], 1);
 801f76e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801f772:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801f776:	1c59      	adds	r1, r3, #1
 801f778:	f8c7 1124 	str.w	r1, [r7, #292]	@ 0x124
 801f77c:	4413      	add	r3, r2
 801f77e:	781a      	ldrb	r2, [r3, #0]
 801f780:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f784:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f788:	735a      	strb	r2, [r3, #13]
			memcpy(&in_msg.p_len, &raw_data[n_read++], 1);
 801f78a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801f78e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801f792:	1c59      	adds	r1, r3, #1
 801f794:	f8c7 1124 	str.w	r1, [r7, #292]	@ 0x124
 801f798:	4413      	add	r3, r2
 801f79a:	781a      	ldrb	r2, [r3, #0]
 801f79c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f7a0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f7a4:	739a      	strb	r2, [r3, #14]
			memcpy(&in_msg.payload, &raw_data[n_read], in_msg.p_len);
 801f7a6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801f7aa:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801f7ae:	18d1      	adds	r1, r2, r3
 801f7b0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f7b4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f7b8:	7b9b      	ldrb	r3, [r3, #14]
 801f7ba:	461a      	mov	r2, r3
 801f7bc:	1d3b      	adds	r3, r7, #4
 801f7be:	330f      	adds	r3, #15
 801f7c0:	4618      	mov	r0, r3
 801f7c2:	f001 fa1c 	bl	8020bfe <memcpy>

			if (in_msg.p_len < sizeof(in_msg.payload))
				in_msg.payload[in_msg.p_len] = '\0';
 801f7c6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f7ca:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f7ce:	7b9b      	ldrb	r3, [r3, #14]
 801f7d0:	461a      	mov	r2, r3
 801f7d2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f7d6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f7da:	4413      	add	r3, r2
 801f7dc:	2200      	movs	r2, #0
 801f7de:	73da      	strb	r2, [r3, #15]
			printf("Peripheral is: %d\n", in_msg.peripheral);
 801f7e0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f7e4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f7e8:	7b1b      	ldrb	r3, [r3, #12]
 801f7ea:	4619      	mov	r1, r3
 801f7ec:	481e      	ldr	r0, [pc, #120]	@ (801f868 <UDP_Listen+0x1ec>)
 801f7ee:	f000 ffd3 	bl	8020798 <iprintf>
			printf("n iterations is: %d\n", in_msg.n_iter);
 801f7f2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f7f6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f7fa:	7b5b      	ldrb	r3, [r3, #13]
 801f7fc:	4619      	mov	r1, r3
 801f7fe:	481b      	ldr	r0, [pc, #108]	@ (801f86c <UDP_Listen+0x1f0>)
 801f800:	f000 ffca 	bl	8020798 <iprintf>
			printf("Message is: %s\n", in_msg.payload);
 801f804:	1d3b      	adds	r3, r7, #4
 801f806:	330f      	adds	r3, #15
 801f808:	4619      	mov	r1, r3
 801f80a:	4819      	ldr	r0, [pc, #100]	@ (801f870 <UDP_Listen+0x1f4>)
 801f80c:	f000 ffc4 	bl	8020798 <iprintf>

			// send in_msg to InMsgQueue
			osStatus_t status = osMessageQueuePut(inMsgQueueHandle, &in_msg, 0, osWaitForever);
 801f810:	4b18      	ldr	r3, [pc, #96]	@ (801f874 <UDP_Listen+0x1f8>)
 801f812:	6818      	ldr	r0, [r3, #0]
 801f814:	1d39      	adds	r1, r7, #4
 801f816:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f81a:	2200      	movs	r2, #0
 801f81c:	f7ed fe22 	bl	800d464 <osMessageQueuePut>
 801f820:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
			if (status != osOK)
 801f824:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801f828:	2b00      	cmp	r3, #0
 801f82a:	d004      	beq.n	801f836 <UDP_Listen+0x1ba>
			{
				printf("inMsg put error: %d\n", status);
 801f82c:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 801f830:	4811      	ldr	r0, [pc, #68]	@ (801f878 <UDP_Listen+0x1fc>)
 801f832:	f000 ffb1 	bl	8020798 <iprintf>
			}

			netbuf_delete(buf);
 801f836:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801f83a:	4618      	mov	r0, r3
 801f83c:	f7f3 f884 	bl	8012948 <netbuf_delete>
 801f840:	e74b      	b.n	801f6da <UDP_Listen+0x5e>
		}
		else
		{
			printf("netconn_recv failed\n");
 801f842:	480e      	ldr	r0, [pc, #56]	@ (801f87c <UDP_Listen+0x200>)
 801f844:	f001 f818 	bl	8020878 <puts>
		printf("Listener waiting for messages...\n");
 801f848:	e747      	b.n	801f6da <UDP_Listen+0x5e>
 801f84a:	bf00      	nop
 801f84c:	2002d7e4 	.word	0x2002d7e4
 801f850:	08025fc4 	.word	0x08025fc4
 801f854:	08026884 	.word	0x08026884
 801f858:	08025fec 	.word	0x08025fec
 801f85c:	08026004 	.word	0x08026004
 801f860:	08026018 	.word	0x08026018
 801f864:	0802603c 	.word	0x0802603c
 801f868:	08026054 	.word	0x08026054
 801f86c:	08026068 	.word	0x08026068
 801f870:	08026080 	.word	0x08026080
 801f874:	20000320 	.word	0x20000320
 801f878:	08026090 	.word	0x08026090
 801f87c:	080260a8 	.word	0x080260a8

0801f880 <UDP_Response>:
		}
	}
}

void UDP_Response(void)
{
 801f880:	b580      	push	{r7, lr}
 801f882:	b086      	sub	sp, #24
 801f884:	af00      	add	r7, sp, #0
	struct netbuf *buf;
	OutMsg_t out_msg;

	conn_send = netconn_new(NETCONN_UDP);
 801f886:	2200      	movs	r2, #0
 801f888:	2100      	movs	r1, #0
 801f88a:	2020      	movs	r0, #32
 801f88c:	f7f1 fa62 	bl	8010d54 <netconn_new_with_proto_and_callback>
 801f890:	4603      	mov	r3, r0
 801f892:	4a28      	ldr	r2, [pc, #160]	@ (801f934 <UDP_Response+0xb4>)
 801f894:	6013      	str	r3, [r2, #0]
	if (conn_send == NULL)
 801f896:	4b27      	ldr	r3, [pc, #156]	@ (801f934 <UDP_Response+0xb4>)
 801f898:	681b      	ldr	r3, [r3, #0]
 801f89a:	2b00      	cmp	r3, #0
 801f89c:	d104      	bne.n	801f8a8 <UDP_Response+0x28>
	{
		printf("error initializing UDP send netconn\n");
 801f89e:	4826      	ldr	r0, [pc, #152]	@ (801f938 <UDP_Response+0xb8>)
 801f8a0:	f000 ffea 	bl	8020878 <puts>
		osThreadExit();
 801f8a4:	f7ed fa4a 	bl	800cd3c <osThreadExit>
	}

	while(1)
	{
		printf("Responder waiting for messages...\n");
 801f8a8:	4824      	ldr	r0, [pc, #144]	@ (801f93c <UDP_Response+0xbc>)
 801f8aa:	f000 ffe5 	bl	8020878 <puts>
		if(osMessageQueueGet(outMsgQueueHandle, &out_msg, 0, osWaitForever) == osOK)
 801f8ae:	4b24      	ldr	r3, [pc, #144]	@ (801f940 <UDP_Response+0xc0>)
 801f8b0:	6818      	ldr	r0, [r3, #0]
 801f8b2:	4639      	mov	r1, r7
 801f8b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f8b8:	2200      	movs	r2, #0
 801f8ba:	f7ed fe47 	bl	800d54c <osMessageQueueGet>
 801f8be:	4603      	mov	r3, r0
 801f8c0:	2b00      	cmp	r3, #0
 801f8c2:	d1f1      	bne.n	801f8a8 <UDP_Response+0x28>
		{
			printf("responder got a response to send\n");
 801f8c4:	481f      	ldr	r0, [pc, #124]	@ (801f944 <UDP_Response+0xc4>)
 801f8c6:	f000 ffd7 	bl	8020878 <puts>
			//Load response buffer
			buf = netbuf_new();
 801f8ca:	f7f3 f829 	bl	8012920 <netbuf_new>
 801f8ce:	6178      	str	r0, [r7, #20]
			if (!buf)
 801f8d0:	697b      	ldr	r3, [r7, #20]
 801f8d2:	2b00      	cmp	r3, #0
 801f8d4:	d103      	bne.n	801f8de <UDP_Response+0x5e>
			{
				printf("responder netbuf_new() failed");
 801f8d6:	481c      	ldr	r0, [pc, #112]	@ (801f948 <UDP_Response+0xc8>)
 801f8d8:	f000 ff5e 	bl	8020798 <iprintf>
				continue;
 801f8dc:	e029      	b.n	801f932 <UDP_Response+0xb2>
			}

			void *data = netbuf_alloc(buf, RESPONSE_SIZE);
 801f8de:	2105      	movs	r1, #5
 801f8e0:	6978      	ldr	r0, [r7, #20]
 801f8e2:	f7f3 f851 	bl	8012988 <netbuf_alloc>
 801f8e6:	6138      	str	r0, [r7, #16]
			if (!data)
 801f8e8:	693b      	ldr	r3, [r7, #16]
 801f8ea:	2b00      	cmp	r3, #0
 801f8ec:	d106      	bne.n	801f8fc <UDP_Response+0x7c>
			{
				printf("responder netbuf_alloc() failed");
 801f8ee:	4817      	ldr	r0, [pc, #92]	@ (801f94c <UDP_Response+0xcc>)
 801f8f0:	f000 ff52 	bl	8020798 <iprintf>
			    netbuf_delete(buf);
 801f8f4:	6978      	ldr	r0, [r7, #20]
 801f8f6:	f7f3 f827 	bl	8012948 <netbuf_delete>
			    continue;
 801f8fa:	e01a      	b.n	801f932 <UDP_Response+0xb2>
			}
			memcpy(data, &out_msg.test_id, sizeof(out_msg.test_id));
 801f8fc:	68ba      	ldr	r2, [r7, #8]
 801f8fe:	693b      	ldr	r3, [r7, #16]
 801f900:	601a      	str	r2, [r3, #0]
			((uint8_t *)data)[sizeof(out_msg.test_id)] = out_msg.test_result;
 801f902:	693b      	ldr	r3, [r7, #16]
 801f904:	3304      	adds	r3, #4
 801f906:	7b3a      	ldrb	r2, [r7, #12]
 801f908:	701a      	strb	r2, [r3, #0]

			// Send response
			netconn_sendto(conn_send, buf, &out_msg.addr, out_msg.port);
 801f90a:	4b0a      	ldr	r3, [pc, #40]	@ (801f934 <UDP_Response+0xb4>)
 801f90c:	6818      	ldr	r0, [r3, #0]
 801f90e:	88bb      	ldrh	r3, [r7, #4]
 801f910:	463a      	mov	r2, r7
 801f912:	6979      	ldr	r1, [r7, #20]
 801f914:	f7f1 fd06 	bl	8011324 <netconn_sendto>
			netbuf_delete(buf);
 801f918:	6978      	ldr	r0, [r7, #20]
 801f91a:	f7f3 f815 	bl	8012948 <netbuf_delete>
			printf("responder sent to %s:%d\n", ipaddr_ntoa(&out_msg.addr), out_msg.port);
 801f91e:	463b      	mov	r3, r7
 801f920:	4618      	mov	r0, r3
 801f922:	f7fe fa7f 	bl	801de24 <ip4addr_ntoa>
 801f926:	4603      	mov	r3, r0
 801f928:	88ba      	ldrh	r2, [r7, #4]
 801f92a:	4619      	mov	r1, r3
 801f92c:	4808      	ldr	r0, [pc, #32]	@ (801f950 <UDP_Response+0xd0>)
 801f92e:	f000 ff33 	bl	8020798 <iprintf>
		printf("Responder waiting for messages...\n");
 801f932:	e7b9      	b.n	801f8a8 <UDP_Response+0x28>
 801f934:	2002d7e8 	.word	0x2002d7e8
 801f938:	080260bc 	.word	0x080260bc
 801f93c:	080260e0 	.word	0x080260e0
 801f940:	20000324 	.word	0x20000324
 801f944:	08026104 	.word	0x08026104
 801f948:	08026128 	.word	0x08026128
 801f94c:	08026148 	.word	0x08026148
 801f950:	08026168 	.word	0x08026168

0801f954 <I2cTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void I2cTestTask(void)
{
 801f954:	b580      	push	{r7, lr}
 801f956:	b0ca      	sub	sp, #296	@ 0x128
 801f958:	af00      	add	r7, sp, #0
	TestData_t test_data;
	OutMsg_t out_msg;
	uint8_t result;

	i2c1TxSem = osSemaphoreNew(1, 0, NULL);
 801f95a:	2200      	movs	r2, #0
 801f95c:	2100      	movs	r1, #0
 801f95e:	2001      	movs	r0, #1
 801f960:	f7ed fb6a 	bl	800d038 <osSemaphoreNew>
 801f964:	4603      	mov	r3, r0
 801f966:	4a45      	ldr	r2, [pc, #276]	@ (801fa7c <I2cTestTask+0x128>)
 801f968:	6013      	str	r3, [r2, #0]
	i2c1RxSem = osSemaphoreNew(1, 0, NULL);
 801f96a:	2200      	movs	r2, #0
 801f96c:	2100      	movs	r1, #0
 801f96e:	2001      	movs	r0, #1
 801f970:	f7ed fb62 	bl	800d038 <osSemaphoreNew>
 801f974:	4603      	mov	r3, r0
 801f976:	4a42      	ldr	r2, [pc, #264]	@ (801fa80 <I2cTestTask+0x12c>)
 801f978:	6013      	str	r3, [r2, #0]
	i2c2TxSem = osSemaphoreNew(1, 0, NULL);
 801f97a:	2200      	movs	r2, #0
 801f97c:	2100      	movs	r1, #0
 801f97e:	2001      	movs	r0, #1
 801f980:	f7ed fb5a 	bl	800d038 <osSemaphoreNew>
 801f984:	4603      	mov	r3, r0
 801f986:	4a3f      	ldr	r2, [pc, #252]	@ (801fa84 <I2cTestTask+0x130>)
 801f988:	6013      	str	r3, [r2, #0]
	i2c2RxSem = osSemaphoreNew(1, 0, NULL);
 801f98a:	2200      	movs	r2, #0
 801f98c:	2100      	movs	r1, #0
 801f98e:	2001      	movs	r0, #1
 801f990:	f7ed fb52 	bl	800d038 <osSemaphoreNew>
 801f994:	4603      	mov	r3, r0
 801f996:	4a3c      	ldr	r2, [pc, #240]	@ (801fa88 <I2cTestTask+0x134>)
 801f998:	6013      	str	r3, [r2, #0]

	while (1)
	{
		printf("i2c waiting for messages\n");
 801f99a:	483c      	ldr	r0, [pc, #240]	@ (801fa8c <I2cTestTask+0x138>)
 801f99c:	f000 ff6c 	bl	8020878 <puts>
		if(osMessageQueueGet(i2cQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801f9a0:	4b3b      	ldr	r3, [pc, #236]	@ (801fa90 <I2cTestTask+0x13c>)
 801f9a2:	6818      	ldr	r0, [r3, #0]
 801f9a4:	f107 0114 	add.w	r1, r7, #20
 801f9a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f9ac:	2200      	movs	r2, #0
 801f9ae:	f7ed fdcd 	bl	800d54c <osMessageQueueGet>
 801f9b2:	4603      	mov	r3, r0
 801f9b4:	2b00      	cmp	r3, #0
 801f9b6:	d15d      	bne.n	801fa74 <I2cTestTask+0x120>
		{
			printf("i2c received test ID: %lu\n", test_data.test_id);
 801f9b8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f9bc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f9c0:	689b      	ldr	r3, [r3, #8]
 801f9c2:	4619      	mov	r1, r3
 801f9c4:	4833      	ldr	r0, [pc, #204]	@ (801fa94 <I2cTestTask+0x140>)
 801f9c6:	f000 fee7 	bl	8020798 <iprintf>

			for (uint8_t i=0; i<test_data.n_iter; i++)
 801f9ca:	2300      	movs	r3, #0
 801f9cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801f9d0:	e017      	b.n	801fa02 <I2cTestTask+0xae>
			{
				result = I2C_Test_Perform((uint8_t *)test_data.payload, test_data.p_len);
 801f9d2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f9d6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f9da:	7b5a      	ldrb	r2, [r3, #13]
 801f9dc:	f107 0314 	add.w	r3, r7, #20
 801f9e0:	330e      	adds	r3, #14
 801f9e2:	4611      	mov	r1, r2
 801f9e4:	4618      	mov	r0, r3
 801f9e6:	f000 f859 	bl	801fa9c <I2C_Test_Perform>
 801f9ea:	4603      	mov	r3, r0
 801f9ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 801f9f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f9f4:	2bff      	cmp	r3, #255	@ 0xff
 801f9f6:	d00e      	beq.n	801fa16 <I2cTestTask+0xc2>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801f9f8:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801f9fc:	3301      	adds	r3, #1
 801f9fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801fa02:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fa06:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801fa0a:	7b1b      	ldrb	r3, [r3, #12]
 801fa0c:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 801fa10:	429a      	cmp	r2, r3
 801fa12:	d3de      	bcc.n	801f9d2 <I2cTestTask+0x7e>
 801fa14:	e000      	b.n	801fa18 <I2cTestTask+0xc4>
					break;
 801fa16:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 801fa18:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fa1c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801fa20:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 801fa24:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 801fa28:	6812      	ldr	r2, [r2, #0]
 801fa2a:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 801fa2c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fa30:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801fa34:	889a      	ldrh	r2, [r3, #4]
 801fa36:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fa3a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801fa3e:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 801fa40:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fa44:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801fa48:	689a      	ldr	r2, [r3, #8]
 801fa4a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fa4e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801fa52:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 801fa54:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fa58:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801fa5c:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 801fa60:	731a      	strb	r2, [r3, #12]

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 801fa62:	4b0d      	ldr	r3, [pc, #52]	@ (801fa98 <I2cTestTask+0x144>)
 801fa64:	6818      	ldr	r0, [r3, #0]
 801fa66:	1d39      	adds	r1, r7, #4
 801fa68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801fa6c:	2200      	movs	r2, #0
 801fa6e:	f7ed fcf9 	bl	800d464 <osMessageQueuePut>
 801fa72:	e792      	b.n	801f99a <I2cTestTask+0x46>
		}
		else osDelay(1);
 801fa74:	2001      	movs	r0, #1
 801fa76:	f7ed f969 	bl	800cd4c <osDelay>
		printf("i2c waiting for messages\n");
 801fa7a:	e78e      	b.n	801f99a <I2cTestTask+0x46>
 801fa7c:	2002d7ec 	.word	0x2002d7ec
 801fa80:	2002d7f0 	.word	0x2002d7f0
 801fa84:	2002d7f4 	.word	0x2002d7f4
 801fa88:	2002d7f8 	.word	0x2002d7f8
 801fa8c:	08026184 	.word	0x08026184
 801fa90:	2000032c 	.word	0x2000032c
 801fa94:	080261a0 	.word	0x080261a0
 801fa98:	20000324 	.word	0x20000324

0801fa9c <I2C_Test_Perform>:
	}
}

uint8_t I2C_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 801fa9c:	b590      	push	{r4, r7, lr}
 801fa9e:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 801faa2:	af00      	add	r7, sp, #0
 801faa4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801faa8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801faac:	6018      	str	r0, [r3, #0]
 801faae:	460a      	mov	r2, r1
 801fab0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fab4:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fab8:	701a      	strb	r2, [r3, #0]

	uint8_t i2c1_rx[MAX_BUF];
	uint8_t i2c2_rx[MAX_BUF];

	// Send msg i2c1 -> i2c2
	status = HAL_I2C_Slave_Receive_DMA(&hi2c2, i2c2_rx, msg_len);
 801faba:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fabe:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fac2:	781b      	ldrb	r3, [r3, #0]
 801fac4:	b29a      	uxth	r2, r3
 801fac6:	f107 0308 	add.w	r3, r7, #8
 801faca:	4619      	mov	r1, r3
 801facc:	4854      	ldr	r0, [pc, #336]	@ (801fc20 <I2C_Test_Perform+0x184>)
 801face:	f7e6 f831 	bl	8005b34 <HAL_I2C_Slave_Receive_DMA>
 801fad2:	4603      	mov	r3, r0
 801fad4:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801fad8:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801fadc:	2b00      	cmp	r3, #0
 801fade:	d004      	beq.n	801faea <I2C_Test_Perform+0x4e>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c1 -> i2c2 RX failed\n");
 801fae0:	4850      	ldr	r0, [pc, #320]	@ (801fc24 <I2C_Test_Perform+0x188>)
 801fae2:	f000 fec9 	bl	8020878 <puts>
#endif
		return TEST_FAILED;
 801fae6:	23ff      	movs	r3, #255	@ 0xff
 801fae8:	e095      	b.n	801fc16 <I2C_Test_Perform+0x17a>
	}

	status = HAL_I2C_Master_Transmit_DMA(&hi2c1, 10<<1, msg, msg_len);
 801faea:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801faee:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801faf2:	781b      	ldrb	r3, [r3, #0]
 801faf4:	b29b      	uxth	r3, r3
 801faf6:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 801fafa:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 801fafe:	6812      	ldr	r2, [r2, #0]
 801fb00:	2114      	movs	r1, #20
 801fb02:	4849      	ldr	r0, [pc, #292]	@ (801fc28 <I2C_Test_Perform+0x18c>)
 801fb04:	f7e5 fd26 	bl	8005554 <HAL_I2C_Master_Transmit_DMA>
 801fb08:	4603      	mov	r3, r0
 801fb0a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801fb0e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801fb12:	2b00      	cmp	r3, #0
 801fb14:	d004      	beq.n	801fb20 <I2C_Test_Perform+0x84>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c1 -> i2c2 TX failed\n");
 801fb16:	4845      	ldr	r0, [pc, #276]	@ (801fc2c <I2C_Test_Perform+0x190>)
 801fb18:	f000 feae 	bl	8020878 <puts>
#endif
		return TEST_FAILED;
 801fb1c:	23ff      	movs	r3, #255	@ 0xff
 801fb1e:	e07a      	b.n	801fc16 <I2C_Test_Perform+0x17a>
	}
	if (osSemaphoreAcquire(i2c1TxSem, 10) != osOK || osSemaphoreAcquire(i2c2RxSem, 10) != osOK)
 801fb20:	4b43      	ldr	r3, [pc, #268]	@ (801fc30 <I2C_Test_Perform+0x194>)
 801fb22:	681b      	ldr	r3, [r3, #0]
 801fb24:	210a      	movs	r1, #10
 801fb26:	4618      	mov	r0, r3
 801fb28:	f7ed fb22 	bl	800d170 <osSemaphoreAcquire>
 801fb2c:	4603      	mov	r3, r0
 801fb2e:	2b00      	cmp	r3, #0
 801fb30:	d108      	bne.n	801fb44 <I2C_Test_Perform+0xa8>
 801fb32:	4b40      	ldr	r3, [pc, #256]	@ (801fc34 <I2C_Test_Perform+0x198>)
 801fb34:	681b      	ldr	r3, [r3, #0]
 801fb36:	210a      	movs	r1, #10
 801fb38:	4618      	mov	r0, r3
 801fb3a:	f7ed fb19 	bl	800d170 <osSemaphoreAcquire>
 801fb3e:	4603      	mov	r3, r0
 801fb40:	2b00      	cmp	r3, #0
 801fb42:	d004      	beq.n	801fb4e <I2C_Test_Perform+0xb2>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c1 -> i2c2 semaphore timeout\n");
 801fb44:	483c      	ldr	r0, [pc, #240]	@ (801fc38 <I2C_Test_Perform+0x19c>)
 801fb46:	f000 fe97 	bl	8020878 <puts>
#endif
		return TEST_FAILED;
 801fb4a:	23ff      	movs	r3, #255	@ 0xff
 801fb4c:	e063      	b.n	801fc16 <I2C_Test_Perform+0x17a>
	}

	// Send msg i2c2 -> i2c1
	status = HAL_I2C_Master_Receive_DMA(&hi2c1, 10<<1, i2c1_rx, msg_len);
 801fb4e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fb52:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fb56:	781b      	ldrb	r3, [r3, #0]
 801fb58:	b29b      	uxth	r3, r3
 801fb5a:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 801fb5e:	2114      	movs	r1, #20
 801fb60:	4831      	ldr	r0, [pc, #196]	@ (801fc28 <I2C_Test_Perform+0x18c>)
 801fb62:	f7e5 fe0b 	bl	800577c <HAL_I2C_Master_Receive_DMA>
 801fb66:	4603      	mov	r3, r0
 801fb68:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801fb6c:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801fb70:	2b00      	cmp	r3, #0
 801fb72:	d004      	beq.n	801fb7e <I2C_Test_Perform+0xe2>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c2 -> i2c1 RX failed\n");
 801fb74:	4831      	ldr	r0, [pc, #196]	@ (801fc3c <I2C_Test_Perform+0x1a0>)
 801fb76:	f000 fe7f 	bl	8020878 <puts>
#endif
		return TEST_FAILED;
 801fb7a:	23ff      	movs	r3, #255	@ 0xff
 801fb7c:	e04b      	b.n	801fc16 <I2C_Test_Perform+0x17a>
	}

	status = HAL_I2C_Slave_Transmit_DMA(&hi2c2, i2c2_rx, msg_len);
 801fb7e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fb82:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fb86:	781b      	ldrb	r3, [r3, #0]
 801fb88:	b29a      	uxth	r2, r3
 801fb8a:	f107 0308 	add.w	r3, r7, #8
 801fb8e:	4619      	mov	r1, r3
 801fb90:	4823      	ldr	r0, [pc, #140]	@ (801fc20 <I2C_Test_Perform+0x184>)
 801fb92:	f7e5 fee3 	bl	800595c <HAL_I2C_Slave_Transmit_DMA>
 801fb96:	4603      	mov	r3, r0
 801fb98:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801fb9c:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801fba0:	2b00      	cmp	r3, #0
 801fba2:	d004      	beq.n	801fbae <I2C_Test_Perform+0x112>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c2 -> i2c1 TX failed\n");
 801fba4:	4826      	ldr	r0, [pc, #152]	@ (801fc40 <I2C_Test_Perform+0x1a4>)
 801fba6:	f000 fe67 	bl	8020878 <puts>
#endif
		return TEST_FAILED;
 801fbaa:	23ff      	movs	r3, #255	@ 0xff
 801fbac:	e033      	b.n	801fc16 <I2C_Test_Perform+0x17a>
	}
	if (osSemaphoreAcquire(i2c2TxSem, 10) != osOK || osSemaphoreAcquire(i2c1RxSem, 10) != osOK)
 801fbae:	4b25      	ldr	r3, [pc, #148]	@ (801fc44 <I2C_Test_Perform+0x1a8>)
 801fbb0:	681b      	ldr	r3, [r3, #0]
 801fbb2:	210a      	movs	r1, #10
 801fbb4:	4618      	mov	r0, r3
 801fbb6:	f7ed fadb 	bl	800d170 <osSemaphoreAcquire>
 801fbba:	4603      	mov	r3, r0
 801fbbc:	2b00      	cmp	r3, #0
 801fbbe:	d108      	bne.n	801fbd2 <I2C_Test_Perform+0x136>
 801fbc0:	4b21      	ldr	r3, [pc, #132]	@ (801fc48 <I2C_Test_Perform+0x1ac>)
 801fbc2:	681b      	ldr	r3, [r3, #0]
 801fbc4:	210a      	movs	r1, #10
 801fbc6:	4618      	mov	r0, r3
 801fbc8:	f7ed fad2 	bl	800d170 <osSemaphoreAcquire>
 801fbcc:	4603      	mov	r3, r0
 801fbce:	2b00      	cmp	r3, #0
 801fbd0:	d004      	beq.n	801fbdc <I2C_Test_Perform+0x140>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c2 -> i2c1 semaphore timeout\n");
 801fbd2:	481e      	ldr	r0, [pc, #120]	@ (801fc4c <I2C_Test_Perform+0x1b0>)
 801fbd4:	f000 fe50 	bl	8020878 <puts>
#endif
		return TEST_FAILED;
 801fbd8:	23ff      	movs	r3, #255	@ 0xff
 801fbda:	e01c      	b.n	801fc16 <I2C_Test_Perform+0x17a>
	}

	// compare crc
	int crc_result = Match_CRC(msg, msg_len, i2c1_rx, msg_len);
 801fbdc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fbe0:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fbe4:	781c      	ldrb	r4, [r3, #0]
 801fbe6:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 801fbea:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fbee:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fbf2:	7819      	ldrb	r1, [r3, #0]
 801fbf4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fbf8:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 801fbfc:	4623      	mov	r3, r4
 801fbfe:	6800      	ldr	r0, [r0, #0]
 801fc00:	f7ff fd16 	bl	801f630 <Match_CRC>
 801fc04:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 801fc08:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 801fc0c:	2b01      	cmp	r3, #1
 801fc0e:	d101      	bne.n	801fc14 <I2C_Test_Perform+0x178>
 801fc10:	2301      	movs	r3, #1
 801fc12:	e000      	b.n	801fc16 <I2C_Test_Perform+0x17a>

	return TEST_FAILED;
 801fc14:	23ff      	movs	r3, #255	@ 0xff
}
 801fc16:	4618      	mov	r0, r3
 801fc18:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 801fc1c:	46bd      	mov	sp, r7
 801fc1e:	bd90      	pop	{r4, r7, pc}
 801fc20:	20000390 	.word	0x20000390
 801fc24:	080261bc 	.word	0x080261bc
 801fc28:	2000033c 	.word	0x2000033c
 801fc2c:	080261d4 	.word	0x080261d4
 801fc30:	2002d7ec 	.word	0x2002d7ec
 801fc34:	2002d7f8 	.word	0x2002d7f8
 801fc38:	080261ec 	.word	0x080261ec
 801fc3c:	0802620c 	.word	0x0802620c
 801fc40:	08026224 	.word	0x08026224
 801fc44:	2002d7f4 	.word	0x2002d7f4
 801fc48:	2002d7f0 	.word	0x2002d7f0
 801fc4c:	0802623c 	.word	0x0802623c

0801fc50 <HAL_I2C_MasterTxCpltCallback>:
/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801fc50:	b580      	push	{r7, lr}
 801fc52:	b082      	sub	sp, #8
 801fc54:	af00      	add	r7, sp, #0
 801fc56:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c1) osSemaphoreRelease(i2c1TxSem);
 801fc58:	687b      	ldr	r3, [r7, #4]
 801fc5a:	4a06      	ldr	r2, [pc, #24]	@ (801fc74 <HAL_I2C_MasterTxCpltCallback+0x24>)
 801fc5c:	4293      	cmp	r3, r2
 801fc5e:	d104      	bne.n	801fc6a <HAL_I2C_MasterTxCpltCallback+0x1a>
 801fc60:	4b05      	ldr	r3, [pc, #20]	@ (801fc78 <HAL_I2C_MasterTxCpltCallback+0x28>)
 801fc62:	681b      	ldr	r3, [r3, #0]
 801fc64:	4618      	mov	r0, r3
 801fc66:	f7ed fae9 	bl	800d23c <osSemaphoreRelease>
}
 801fc6a:	bf00      	nop
 801fc6c:	3708      	adds	r7, #8
 801fc6e:	46bd      	mov	sp, r7
 801fc70:	bd80      	pop	{r7, pc}
 801fc72:	bf00      	nop
 801fc74:	2000033c 	.word	0x2000033c
 801fc78:	2002d7ec 	.word	0x2002d7ec

0801fc7c <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801fc7c:	b580      	push	{r7, lr}
 801fc7e:	b082      	sub	sp, #8
 801fc80:	af00      	add	r7, sp, #0
 801fc82:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c1) osSemaphoreRelease(i2c1RxSem);
 801fc84:	687b      	ldr	r3, [r7, #4]
 801fc86:	4a06      	ldr	r2, [pc, #24]	@ (801fca0 <HAL_I2C_MasterRxCpltCallback+0x24>)
 801fc88:	4293      	cmp	r3, r2
 801fc8a:	d104      	bne.n	801fc96 <HAL_I2C_MasterRxCpltCallback+0x1a>
 801fc8c:	4b05      	ldr	r3, [pc, #20]	@ (801fca4 <HAL_I2C_MasterRxCpltCallback+0x28>)
 801fc8e:	681b      	ldr	r3, [r3, #0]
 801fc90:	4618      	mov	r0, r3
 801fc92:	f7ed fad3 	bl	800d23c <osSemaphoreRelease>
}
 801fc96:	bf00      	nop
 801fc98:	3708      	adds	r7, #8
 801fc9a:	46bd      	mov	sp, r7
 801fc9c:	bd80      	pop	{r7, pc}
 801fc9e:	bf00      	nop
 801fca0:	2000033c 	.word	0x2000033c
 801fca4:	2002d7f0 	.word	0x2002d7f0

0801fca8 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801fca8:	b580      	push	{r7, lr}
 801fcaa:	b082      	sub	sp, #8
 801fcac:	af00      	add	r7, sp, #0
 801fcae:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c2) osSemaphoreRelease(i2c2TxSem);
 801fcb0:	687b      	ldr	r3, [r7, #4]
 801fcb2:	4a06      	ldr	r2, [pc, #24]	@ (801fccc <HAL_I2C_SlaveTxCpltCallback+0x24>)
 801fcb4:	4293      	cmp	r3, r2
 801fcb6:	d104      	bne.n	801fcc2 <HAL_I2C_SlaveTxCpltCallback+0x1a>
 801fcb8:	4b05      	ldr	r3, [pc, #20]	@ (801fcd0 <HAL_I2C_SlaveTxCpltCallback+0x28>)
 801fcba:	681b      	ldr	r3, [r3, #0]
 801fcbc:	4618      	mov	r0, r3
 801fcbe:	f7ed fabd 	bl	800d23c <osSemaphoreRelease>
}
 801fcc2:	bf00      	nop
 801fcc4:	3708      	adds	r7, #8
 801fcc6:	46bd      	mov	sp, r7
 801fcc8:	bd80      	pop	{r7, pc}
 801fcca:	bf00      	nop
 801fccc:	20000390 	.word	0x20000390
 801fcd0:	2002d7f4 	.word	0x2002d7f4

0801fcd4 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801fcd4:	b580      	push	{r7, lr}
 801fcd6:	b082      	sub	sp, #8
 801fcd8:	af00      	add	r7, sp, #0
 801fcda:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c2) osSemaphoreRelease(i2c2RxSem);
 801fcdc:	687b      	ldr	r3, [r7, #4]
 801fcde:	4a06      	ldr	r2, [pc, #24]	@ (801fcf8 <HAL_I2C_SlaveRxCpltCallback+0x24>)
 801fce0:	4293      	cmp	r3, r2
 801fce2:	d104      	bne.n	801fcee <HAL_I2C_SlaveRxCpltCallback+0x1a>
 801fce4:	4b05      	ldr	r3, [pc, #20]	@ (801fcfc <HAL_I2C_SlaveRxCpltCallback+0x28>)
 801fce6:	681b      	ldr	r3, [r3, #0]
 801fce8:	4618      	mov	r0, r3
 801fcea:	f7ed faa7 	bl	800d23c <osSemaphoreRelease>
}
 801fcee:	bf00      	nop
 801fcf0:	3708      	adds	r7, #8
 801fcf2:	46bd      	mov	sp, r7
 801fcf4:	bd80      	pop	{r7, pc}
 801fcf6:	bf00      	nop
 801fcf8:	20000390 	.word	0x20000390
 801fcfc:	2002d7f8 	.word	0x2002d7f8

0801fd00 <SpiTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void SpiTestTask(void)
{
 801fd00:	b580      	push	{r7, lr}
 801fd02:	b0ca      	sub	sp, #296	@ 0x128
 801fd04:	af00      	add	r7, sp, #0
	TestData_t test_data;
	OutMsg_t out_msg;
	uint8_t result;

	spi1TxSem = osSemaphoreNew(1, 0, NULL);
 801fd06:	2200      	movs	r2, #0
 801fd08:	2100      	movs	r1, #0
 801fd0a:	2001      	movs	r0, #1
 801fd0c:	f7ed f994 	bl	800d038 <osSemaphoreNew>
 801fd10:	4603      	mov	r3, r0
 801fd12:	4a45      	ldr	r2, [pc, #276]	@ (801fe28 <SpiTestTask+0x128>)
 801fd14:	6013      	str	r3, [r2, #0]
	spi1RxSem = osSemaphoreNew(1, 0, NULL);
 801fd16:	2200      	movs	r2, #0
 801fd18:	2100      	movs	r1, #0
 801fd1a:	2001      	movs	r0, #1
 801fd1c:	f7ed f98c 	bl	800d038 <osSemaphoreNew>
 801fd20:	4603      	mov	r3, r0
 801fd22:	4a42      	ldr	r2, [pc, #264]	@ (801fe2c <SpiTestTask+0x12c>)
 801fd24:	6013      	str	r3, [r2, #0]
	spi4TxSem = osSemaphoreNew(1, 0, NULL);
 801fd26:	2200      	movs	r2, #0
 801fd28:	2100      	movs	r1, #0
 801fd2a:	2001      	movs	r0, #1
 801fd2c:	f7ed f984 	bl	800d038 <osSemaphoreNew>
 801fd30:	4603      	mov	r3, r0
 801fd32:	4a3f      	ldr	r2, [pc, #252]	@ (801fe30 <SpiTestTask+0x130>)
 801fd34:	6013      	str	r3, [r2, #0]
	spi4RxSem = osSemaphoreNew(1, 0, NULL);
 801fd36:	2200      	movs	r2, #0
 801fd38:	2100      	movs	r1, #0
 801fd3a:	2001      	movs	r0, #1
 801fd3c:	f7ed f97c 	bl	800d038 <osSemaphoreNew>
 801fd40:	4603      	mov	r3, r0
 801fd42:	4a3c      	ldr	r2, [pc, #240]	@ (801fe34 <SpiTestTask+0x134>)
 801fd44:	6013      	str	r3, [r2, #0]

	while (1)
	{
		printf("spi waiting for messages\n");
 801fd46:	483c      	ldr	r0, [pc, #240]	@ (801fe38 <SpiTestTask+0x138>)
 801fd48:	f000 fd96 	bl	8020878 <puts>
		if(osMessageQueueGet(spiQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801fd4c:	4b3b      	ldr	r3, [pc, #236]	@ (801fe3c <SpiTestTask+0x13c>)
 801fd4e:	6818      	ldr	r0, [r3, #0]
 801fd50:	f107 0114 	add.w	r1, r7, #20
 801fd54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801fd58:	2200      	movs	r2, #0
 801fd5a:	f7ed fbf7 	bl	800d54c <osMessageQueueGet>
 801fd5e:	4603      	mov	r3, r0
 801fd60:	2b00      	cmp	r3, #0
 801fd62:	d15d      	bne.n	801fe20 <SpiTestTask+0x120>
		{
			printf("spi received test ID: %lu\n", test_data.test_id);
 801fd64:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fd68:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801fd6c:	689b      	ldr	r3, [r3, #8]
 801fd6e:	4619      	mov	r1, r3
 801fd70:	4833      	ldr	r0, [pc, #204]	@ (801fe40 <SpiTestTask+0x140>)
 801fd72:	f000 fd11 	bl	8020798 <iprintf>

			for (uint8_t i=0; i<test_data.n_iter; i++)
 801fd76:	2300      	movs	r3, #0
 801fd78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801fd7c:	e017      	b.n	801fdae <SpiTestTask+0xae>
			{
				result = SPI_Test_Perform((uint8_t *)test_data.payload, test_data.p_len);
 801fd7e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fd82:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801fd86:	7b5a      	ldrb	r2, [r3, #13]
 801fd88:	f107 0314 	add.w	r3, r7, #20
 801fd8c:	330e      	adds	r3, #14
 801fd8e:	4611      	mov	r1, r2
 801fd90:	4618      	mov	r0, r3
 801fd92:	f000 f859 	bl	801fe48 <SPI_Test_Perform>
 801fd96:	4603      	mov	r3, r0
 801fd98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 801fd9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fda0:	2bff      	cmp	r3, #255	@ 0xff
 801fda2:	d00e      	beq.n	801fdc2 <SpiTestTask+0xc2>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801fda4:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801fda8:	3301      	adds	r3, #1
 801fdaa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801fdae:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fdb2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801fdb6:	7b1b      	ldrb	r3, [r3, #12]
 801fdb8:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 801fdbc:	429a      	cmp	r2, r3
 801fdbe:	d3de      	bcc.n	801fd7e <SpiTestTask+0x7e>
 801fdc0:	e000      	b.n	801fdc4 <SpiTestTask+0xc4>
					break;
 801fdc2:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 801fdc4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fdc8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801fdcc:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 801fdd0:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 801fdd4:	6812      	ldr	r2, [r2, #0]
 801fdd6:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 801fdd8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fddc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801fde0:	889a      	ldrh	r2, [r3, #4]
 801fde2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fde6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801fdea:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 801fdec:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fdf0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801fdf4:	689a      	ldr	r2, [r3, #8]
 801fdf6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fdfa:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801fdfe:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 801fe00:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fe04:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801fe08:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 801fe0c:	731a      	strb	r2, [r3, #12]

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 801fe0e:	4b0d      	ldr	r3, [pc, #52]	@ (801fe44 <SpiTestTask+0x144>)
 801fe10:	6818      	ldr	r0, [r3, #0]
 801fe12:	1d39      	adds	r1, r7, #4
 801fe14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801fe18:	2200      	movs	r2, #0
 801fe1a:	f7ed fb23 	bl	800d464 <osMessageQueuePut>
 801fe1e:	e792      	b.n	801fd46 <SpiTestTask+0x46>
		}
		else osDelay(1);
 801fe20:	2001      	movs	r0, #1
 801fe22:	f7ec ff93 	bl	800cd4c <osDelay>
		printf("spi waiting for messages\n");
 801fe26:	e78e      	b.n	801fd46 <SpiTestTask+0x46>
 801fe28:	2002d7fc 	.word	0x2002d7fc
 801fe2c:	2002d800 	.word	0x2002d800
 801fe30:	2002d804 	.word	0x2002d804
 801fe34:	2002d808 	.word	0x2002d808
 801fe38:	0802625c 	.word	0x0802625c
 801fe3c:	20000330 	.word	0x20000330
 801fe40:	08026278 	.word	0x08026278
 801fe44:	20000324 	.word	0x20000324

0801fe48 <SPI_Test_Perform>:
	}
}

uint8_t SPI_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 801fe48:	b590      	push	{r4, r7, lr}
 801fe4a:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 801fe4e:	af00      	add	r7, sp, #0
 801fe50:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fe54:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801fe58:	6018      	str	r0, [r3, #0]
 801fe5a:	460a      	mov	r2, r1
 801fe5c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fe60:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fe64:	701a      	strb	r2, [r3, #0]

	uint8_t spi1_rx[MAX_BUF];
	uint8_t spi4_rx_tx[MAX_BUF];

	// send msg spi1 -> spi4
	status = HAL_SPI_Receive_DMA(&hspi4, spi4_rx_tx, msg_len);
 801fe66:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fe6a:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fe6e:	781b      	ldrb	r3, [r3, #0]
 801fe70:	b29a      	uxth	r2, r3
 801fe72:	f107 0308 	add.w	r3, r7, #8
 801fe76:	4619      	mov	r1, r3
 801fe78:	4854      	ldr	r0, [pc, #336]	@ (801ffcc <SPI_Test_Perform+0x184>)
 801fe7a:	f7e8 ffa9 	bl	8008dd0 <HAL_SPI_Receive_DMA>
 801fe7e:	4603      	mov	r3, r0
 801fe80:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801fe84:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801fe88:	2b00      	cmp	r3, #0
 801fe8a:	d004      	beq.n	801fe96 <SPI_Test_Perform+0x4e>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi1 -> spi4 RX failed\n");
 801fe8c:	4850      	ldr	r0, [pc, #320]	@ (801ffd0 <SPI_Test_Perform+0x188>)
 801fe8e:	f000 fcf3 	bl	8020878 <puts>
#endif
		return TEST_FAILED;
 801fe92:	23ff      	movs	r3, #255	@ 0xff
 801fe94:	e094      	b.n	801ffc0 <SPI_Test_Perform+0x178>
	}
	status = HAL_SPI_Transmit_DMA(&hspi1, msg, msg_len);
 801fe96:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fe9a:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fe9e:	781b      	ldrb	r3, [r3, #0]
 801fea0:	b29a      	uxth	r2, r3
 801fea2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fea6:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801feaa:	6819      	ldr	r1, [r3, #0]
 801feac:	4849      	ldr	r0, [pc, #292]	@ (801ffd4 <SPI_Test_Perform+0x18c>)
 801feae:	f7e8 fea1 	bl	8008bf4 <HAL_SPI_Transmit_DMA>
 801feb2:	4603      	mov	r3, r0
 801feb4:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801feb8:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801febc:	2b00      	cmp	r3, #0
 801febe:	d004      	beq.n	801feca <SPI_Test_Perform+0x82>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi1 -> spi4 TX failed\n");
 801fec0:	4845      	ldr	r0, [pc, #276]	@ (801ffd8 <SPI_Test_Perform+0x190>)
 801fec2:	f000 fcd9 	bl	8020878 <puts>
#endif
		return TEST_FAILED;
 801fec6:	23ff      	movs	r3, #255	@ 0xff
 801fec8:	e07a      	b.n	801ffc0 <SPI_Test_Perform+0x178>
	}
	if (osSemaphoreAcquire(spi1TxSem, 10) != osOK || osSemaphoreAcquire(spi4RxSem, 10) != osOK)
 801feca:	4b44      	ldr	r3, [pc, #272]	@ (801ffdc <SPI_Test_Perform+0x194>)
 801fecc:	681b      	ldr	r3, [r3, #0]
 801fece:	210a      	movs	r1, #10
 801fed0:	4618      	mov	r0, r3
 801fed2:	f7ed f94d 	bl	800d170 <osSemaphoreAcquire>
 801fed6:	4603      	mov	r3, r0
 801fed8:	2b00      	cmp	r3, #0
 801feda:	d108      	bne.n	801feee <SPI_Test_Perform+0xa6>
 801fedc:	4b40      	ldr	r3, [pc, #256]	@ (801ffe0 <SPI_Test_Perform+0x198>)
 801fede:	681b      	ldr	r3, [r3, #0]
 801fee0:	210a      	movs	r1, #10
 801fee2:	4618      	mov	r0, r3
 801fee4:	f7ed f944 	bl	800d170 <osSemaphoreAcquire>
 801fee8:	4603      	mov	r3, r0
 801feea:	2b00      	cmp	r3, #0
 801feec:	d004      	beq.n	801fef8 <SPI_Test_Perform+0xb0>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi1 -> spi4 semaphore timeout\n");
 801feee:	483d      	ldr	r0, [pc, #244]	@ (801ffe4 <SPI_Test_Perform+0x19c>)
 801fef0:	f000 fcc2 	bl	8020878 <puts>
#endif
		return TEST_FAILED;
 801fef4:	23ff      	movs	r3, #255	@ 0xff
 801fef6:	e063      	b.n	801ffc0 <SPI_Test_Perform+0x178>
	}

	// send msg spi4 -> spi1
	status = HAL_SPI_Transmit_DMA(&hspi4, spi4_rx_tx, msg_len);
 801fef8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fefc:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801ff00:	781b      	ldrb	r3, [r3, #0]
 801ff02:	b29a      	uxth	r2, r3
 801ff04:	f107 0308 	add.w	r3, r7, #8
 801ff08:	4619      	mov	r1, r3
 801ff0a:	4830      	ldr	r0, [pc, #192]	@ (801ffcc <SPI_Test_Perform+0x184>)
 801ff0c:	f7e8 fe72 	bl	8008bf4 <HAL_SPI_Transmit_DMA>
 801ff10:	4603      	mov	r3, r0
 801ff12:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801ff16:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801ff1a:	2b00      	cmp	r3, #0
 801ff1c:	d004      	beq.n	801ff28 <SPI_Test_Perform+0xe0>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi4 -> spi1 TX failed\n");
 801ff1e:	4832      	ldr	r0, [pc, #200]	@ (801ffe8 <SPI_Test_Perform+0x1a0>)
 801ff20:	f000 fcaa 	bl	8020878 <puts>
#endif
		return TEST_FAILED;
 801ff24:	23ff      	movs	r3, #255	@ 0xff
 801ff26:	e04b      	b.n	801ffc0 <SPI_Test_Perform+0x178>
	}
	status = HAL_SPI_Receive_DMA(&hspi1, spi1_rx, msg_len);
 801ff28:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801ff2c:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801ff30:	781b      	ldrb	r3, [r3, #0]
 801ff32:	b29a      	uxth	r2, r3
 801ff34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801ff38:	4619      	mov	r1, r3
 801ff3a:	4826      	ldr	r0, [pc, #152]	@ (801ffd4 <SPI_Test_Perform+0x18c>)
 801ff3c:	f7e8 ff48 	bl	8008dd0 <HAL_SPI_Receive_DMA>
 801ff40:	4603      	mov	r3, r0
 801ff42:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801ff46:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801ff4a:	2b00      	cmp	r3, #0
 801ff4c:	d004      	beq.n	801ff58 <SPI_Test_Perform+0x110>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi4 -> spi1 RX failed\n");
 801ff4e:	4827      	ldr	r0, [pc, #156]	@ (801ffec <SPI_Test_Perform+0x1a4>)
 801ff50:	f000 fc92 	bl	8020878 <puts>
#endif
		return TEST_FAILED;
 801ff54:	23ff      	movs	r3, #255	@ 0xff
 801ff56:	e033      	b.n	801ffc0 <SPI_Test_Perform+0x178>
	}
	if (osSemaphoreAcquire(spi4TxSem, 10) != osOK || osSemaphoreAcquire(spi1RxSem, 10) != osOK)
 801ff58:	4b25      	ldr	r3, [pc, #148]	@ (801fff0 <SPI_Test_Perform+0x1a8>)
 801ff5a:	681b      	ldr	r3, [r3, #0]
 801ff5c:	210a      	movs	r1, #10
 801ff5e:	4618      	mov	r0, r3
 801ff60:	f7ed f906 	bl	800d170 <osSemaphoreAcquire>
 801ff64:	4603      	mov	r3, r0
 801ff66:	2b00      	cmp	r3, #0
 801ff68:	d108      	bne.n	801ff7c <SPI_Test_Perform+0x134>
 801ff6a:	4b22      	ldr	r3, [pc, #136]	@ (801fff4 <SPI_Test_Perform+0x1ac>)
 801ff6c:	681b      	ldr	r3, [r3, #0]
 801ff6e:	210a      	movs	r1, #10
 801ff70:	4618      	mov	r0, r3
 801ff72:	f7ed f8fd 	bl	800d170 <osSemaphoreAcquire>
 801ff76:	4603      	mov	r3, r0
 801ff78:	2b00      	cmp	r3, #0
 801ff7a:	d004      	beq.n	801ff86 <SPI_Test_Perform+0x13e>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi4 -> spi1 semaphore timeout\n");
 801ff7c:	481e      	ldr	r0, [pc, #120]	@ (801fff8 <SPI_Test_Perform+0x1b0>)
 801ff7e:	f000 fc7b 	bl	8020878 <puts>
#endif
		return TEST_FAILED;
 801ff82:	23ff      	movs	r3, #255	@ 0xff
 801ff84:	e01c      	b.n	801ffc0 <SPI_Test_Perform+0x178>
	}

	// Compare CRC
	int crc_result = Match_CRC(msg, msg_len, spi1_rx, msg_len);
 801ff86:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801ff8a:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801ff8e:	781c      	ldrb	r4, [r3, #0]
 801ff90:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 801ff94:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801ff98:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801ff9c:	7819      	ldrb	r1, [r3, #0]
 801ff9e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801ffa2:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 801ffa6:	4623      	mov	r3, r4
 801ffa8:	6800      	ldr	r0, [r0, #0]
 801ffaa:	f7ff fb41 	bl	801f630 <Match_CRC>
 801ffae:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 801ffb2:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 801ffb6:	2b01      	cmp	r3, #1
 801ffb8:	d101      	bne.n	801ffbe <SPI_Test_Perform+0x176>
 801ffba:	2301      	movs	r3, #1
 801ffbc:	e000      	b.n	801ffc0 <SPI_Test_Perform+0x178>

	return TEST_FAILED;
 801ffbe:	23ff      	movs	r3, #255	@ 0xff
}
 801ffc0:	4618      	mov	r0, r3
 801ffc2:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 801ffc6:	46bd      	mov	sp, r7
 801ffc8:	bd90      	pop	{r4, r7, pc}
 801ffca:	bf00      	nop
 801ffcc:	200005c8 	.word	0x200005c8
 801ffd0:	08026294 	.word	0x08026294
 801ffd4:	20000564 	.word	0x20000564
 801ffd8:	080262ac 	.word	0x080262ac
 801ffdc:	2002d7fc 	.word	0x2002d7fc
 801ffe0:	2002d808 	.word	0x2002d808
 801ffe4:	080262c4 	.word	0x080262c4
 801ffe8:	080262e4 	.word	0x080262e4
 801ffec:	080262fc 	.word	0x080262fc
 801fff0:	2002d804 	.word	0x2002d804
 801fff4:	2002d800 	.word	0x2002d800
 801fff8:	08026314 	.word	0x08026314

0801fffc <HAL_SPI_TxCpltCallback>:
/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 801fffc:	b580      	push	{r7, lr}
 801fffe:	b082      	sub	sp, #8
 8020000:	af00      	add	r7, sp, #0
 8020002:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) osSemaphoreRelease(spi1TxSem);
 8020004:	687b      	ldr	r3, [r7, #4]
 8020006:	4a0a      	ldr	r2, [pc, #40]	@ (8020030 <HAL_SPI_TxCpltCallback+0x34>)
 8020008:	4293      	cmp	r3, r2
 802000a:	d104      	bne.n	8020016 <HAL_SPI_TxCpltCallback+0x1a>
 802000c:	4b09      	ldr	r3, [pc, #36]	@ (8020034 <HAL_SPI_TxCpltCallback+0x38>)
 802000e:	681b      	ldr	r3, [r3, #0]
 8020010:	4618      	mov	r0, r3
 8020012:	f7ed f913 	bl	800d23c <osSemaphoreRelease>
	if (hspi == &hspi4) osSemaphoreRelease(spi4TxSem);
 8020016:	687b      	ldr	r3, [r7, #4]
 8020018:	4a07      	ldr	r2, [pc, #28]	@ (8020038 <HAL_SPI_TxCpltCallback+0x3c>)
 802001a:	4293      	cmp	r3, r2
 802001c:	d104      	bne.n	8020028 <HAL_SPI_TxCpltCallback+0x2c>
 802001e:	4b07      	ldr	r3, [pc, #28]	@ (802003c <HAL_SPI_TxCpltCallback+0x40>)
 8020020:	681b      	ldr	r3, [r3, #0]
 8020022:	4618      	mov	r0, r3
 8020024:	f7ed f90a 	bl	800d23c <osSemaphoreRelease>
}
 8020028:	bf00      	nop
 802002a:	3708      	adds	r7, #8
 802002c:	46bd      	mov	sp, r7
 802002e:	bd80      	pop	{r7, pc}
 8020030:	20000564 	.word	0x20000564
 8020034:	2002d7fc 	.word	0x2002d7fc
 8020038:	200005c8 	.word	0x200005c8
 802003c:	2002d804 	.word	0x2002d804

08020040 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8020040:	b580      	push	{r7, lr}
 8020042:	b082      	sub	sp, #8
 8020044:	af00      	add	r7, sp, #0
 8020046:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) osSemaphoreRelease(spi1RxSem);
 8020048:	687b      	ldr	r3, [r7, #4]
 802004a:	4a0a      	ldr	r2, [pc, #40]	@ (8020074 <HAL_SPI_RxCpltCallback+0x34>)
 802004c:	4293      	cmp	r3, r2
 802004e:	d104      	bne.n	802005a <HAL_SPI_RxCpltCallback+0x1a>
 8020050:	4b09      	ldr	r3, [pc, #36]	@ (8020078 <HAL_SPI_RxCpltCallback+0x38>)
 8020052:	681b      	ldr	r3, [r3, #0]
 8020054:	4618      	mov	r0, r3
 8020056:	f7ed f8f1 	bl	800d23c <osSemaphoreRelease>
	if (hspi == &hspi4) osSemaphoreRelease(spi4RxSem);
 802005a:	687b      	ldr	r3, [r7, #4]
 802005c:	4a07      	ldr	r2, [pc, #28]	@ (802007c <HAL_SPI_RxCpltCallback+0x3c>)
 802005e:	4293      	cmp	r3, r2
 8020060:	d104      	bne.n	802006c <HAL_SPI_RxCpltCallback+0x2c>
 8020062:	4b07      	ldr	r3, [pc, #28]	@ (8020080 <HAL_SPI_RxCpltCallback+0x40>)
 8020064:	681b      	ldr	r3, [r3, #0]
 8020066:	4618      	mov	r0, r3
 8020068:	f7ed f8e8 	bl	800d23c <osSemaphoreRelease>
}
 802006c:	bf00      	nop
 802006e:	3708      	adds	r7, #8
 8020070:	46bd      	mov	sp, r7
 8020072:	bd80      	pop	{r7, pc}
 8020074:	20000564 	.word	0x20000564
 8020078:	2002d800 	.word	0x2002d800
 802007c:	200005c8 	.word	0x200005c8
 8020080:	2002d808 	.word	0x2002d808

08020084 <TimTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void TimTestTask(void)
{
 8020084:	b580      	push	{r7, lr}
 8020086:	b0ca      	sub	sp, #296	@ 0x128
 8020088:	af00      	add	r7, sp, #0
	TestData_t test_data;
	OutMsg_t out_msg;
	uint8_t result;

	testDoneSem = osSemaphoreNew(1, 0, NULL);
 802008a:	2200      	movs	r2, #0
 802008c:	2100      	movs	r1, #0
 802008e:	2001      	movs	r0, #1
 8020090:	f7ec ffd2 	bl	800d038 <osSemaphoreNew>
 8020094:	4603      	mov	r3, r0
 8020096:	4a34      	ldr	r2, [pc, #208]	@ (8020168 <TimTestTask+0xe4>)
 8020098:	6013      	str	r3, [r2, #0]

	while (1)
	{
		printf("timer waiting for messages\n");
 802009a:	4834      	ldr	r0, [pc, #208]	@ (802016c <TimTestTask+0xe8>)
 802009c:	f000 fbec 	bl	8020878 <puts>
		if(osMessageQueueGet(timQueueHandle, &test_data, 0, osWaitForever) == osOK)
 80200a0:	4b33      	ldr	r3, [pc, #204]	@ (8020170 <TimTestTask+0xec>)
 80200a2:	6818      	ldr	r0, [r3, #0]
 80200a4:	f107 0114 	add.w	r1, r7, #20
 80200a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80200ac:	2200      	movs	r2, #0
 80200ae:	f7ed fa4d 	bl	800d54c <osMessageQueueGet>
 80200b2:	4603      	mov	r3, r0
 80200b4:	2b00      	cmp	r3, #0
 80200b6:	d153      	bne.n	8020160 <TimTestTask+0xdc>
		{
			printf("timer received test ID: %lu\n", test_data.test_id);
 80200b8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80200bc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80200c0:	689b      	ldr	r3, [r3, #8]
 80200c2:	4619      	mov	r1, r3
 80200c4:	482b      	ldr	r0, [pc, #172]	@ (8020174 <TimTestTask+0xf0>)
 80200c6:	f000 fb67 	bl	8020798 <iprintf>

			for (uint8_t i=0; i<test_data.n_iter; i++)
 80200ca:	2300      	movs	r3, #0
 80200cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80200d0:	e00d      	b.n	80200ee <TimTestTask+0x6a>
			{
				result = TIM_Test_Perform();
 80200d2:	f000 f853 	bl	802017c <TIM_Test_Perform>
 80200d6:	4603      	mov	r3, r0
 80200d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 80200dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80200e0:	2bff      	cmp	r3, #255	@ 0xff
 80200e2:	d00e      	beq.n	8020102 <TimTestTask+0x7e>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 80200e4:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80200e8:	3301      	adds	r3, #1
 80200ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80200ee:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80200f2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80200f6:	7b1b      	ldrb	r3, [r3, #12]
 80200f8:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 80200fc:	429a      	cmp	r2, r3
 80200fe:	d3e8      	bcc.n	80200d2 <TimTestTask+0x4e>
 8020100:	e000      	b.n	8020104 <TimTestTask+0x80>
					break;
 8020102:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 8020104:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020108:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802010c:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8020110:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8020114:	6812      	ldr	r2, [r2, #0]
 8020116:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 8020118:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802011c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020120:	889a      	ldrh	r2, [r3, #4]
 8020122:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020126:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802012a:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 802012c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020130:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020134:	689a      	ldr	r2, [r3, #8]
 8020136:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802013a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802013e:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 8020140:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020144:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020148:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 802014c:	731a      	strb	r2, [r3, #12]

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 802014e:	4b0a      	ldr	r3, [pc, #40]	@ (8020178 <TimTestTask+0xf4>)
 8020150:	6818      	ldr	r0, [r3, #0]
 8020152:	1d39      	adds	r1, r7, #4
 8020154:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020158:	2200      	movs	r2, #0
 802015a:	f7ed f983 	bl	800d464 <osMessageQueuePut>
 802015e:	e79c      	b.n	802009a <TimTestTask+0x16>
		}
		else osDelay(1);
 8020160:	2001      	movs	r0, #1
 8020162:	f7ec fdf3 	bl	800cd4c <osDelay>
		printf("timer waiting for messages\n");
 8020166:	e798      	b.n	802009a <TimTestTask+0x16>
 8020168:	2002d80c 	.word	0x2002d80c
 802016c:	08026334 	.word	0x08026334
 8020170:	20000338 	.word	0x20000338
 8020174:	08026350 	.word	0x08026350
 8020178:	20000324 	.word	0x20000324

0802017c <TIM_Test_Perform>:
	}
}

uint8_t TIM_Test_Perform(void)
{
 802017c:	b580      	push	{r7, lr}
 802017e:	b082      	sub	sp, #8
 8020180:	af00      	add	r7, sp, #0
	static uint8_t callback_registered = 0;

	if (!callback_registered)
 8020182:	4b3c      	ldr	r3, [pc, #240]	@ (8020274 <TIM_Test_Perform+0xf8>)
 8020184:	781b      	ldrb	r3, [r3, #0]
 8020186:	2b00      	cmp	r3, #0
 8020188:	d107      	bne.n	802019a <TIM_Test_Perform+0x1e>
	{
		HAL_DMA_RegisterCallback(&hdma_tim6_up, HAL_DMA_XFER_CPLT_CB_ID, TIM6_UP_DMA_XferCplt);
 802018a:	4a3b      	ldr	r2, [pc, #236]	@ (8020278 <TIM_Test_Perform+0xfc>)
 802018c:	2100      	movs	r1, #0
 802018e:	483b      	ldr	r0, [pc, #236]	@ (802027c <TIM_Test_Perform+0x100>)
 8020190:	f7e3 fbd4 	bl	800393c <HAL_DMA_RegisterCallback>
		callback_registered = 1;
 8020194:	4b37      	ldr	r3, [pc, #220]	@ (8020274 <TIM_Test_Perform+0xf8>)
 8020196:	2201      	movs	r2, #1
 8020198:	701a      	strb	r2, [r3, #0]
	}

	HAL_TIM_Base_Start(&htim2);
 802019a:	4839      	ldr	r0, [pc, #228]	@ (8020280 <TIM_Test_Perform+0x104>)
 802019c:	f7e9 fd9e 	bl	8009cdc <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim6);
 80201a0:	4838      	ldr	r0, [pc, #224]	@ (8020284 <TIM_Test_Perform+0x108>)
 80201a2:	f7e9 fd9b 	bl	8009cdc <HAL_TIM_Base_Start>

	if(HAL_DMA_Start_IT(&hdma_tim6_up, (uint32_t)&htim2.Instance->CNT,
 80201a6:	4b36      	ldr	r3, [pc, #216]	@ (8020280 <TIM_Test_Perform+0x104>)
 80201a8:	681b      	ldr	r3, [r3, #0]
 80201aa:	3324      	adds	r3, #36	@ 0x24
 80201ac:	4619      	mov	r1, r3
 80201ae:	4a36      	ldr	r2, [pc, #216]	@ (8020288 <TIM_Test_Perform+0x10c>)
 80201b0:	230a      	movs	r3, #10
 80201b2:	4832      	ldr	r0, [pc, #200]	@ (802027c <TIM_Test_Perform+0x100>)
 80201b4:	f7e3 f946 	bl	8003444 <HAL_DMA_Start_IT>
 80201b8:	4603      	mov	r3, r0
 80201ba:	2b00      	cmp	r3, #0
 80201bc:	d004      	beq.n	80201c8 <TIM_Test_Perform+0x4c>
			            (uint32_t)tim2_samples, N_SAMPLES) != HAL_OK)
	{
#ifdef PRINT_TESTS_DEBUG
	printf("Timer test: DMA init error\n");
 80201be:	4833      	ldr	r0, [pc, #204]	@ (802028c <TIM_Test_Perform+0x110>)
 80201c0:	f000 fb5a 	bl	8020878 <puts>
#endif
		return TEST_FAILED;
 80201c4:	23ff      	movs	r3, #255	@ 0xff
 80201c6:	e050      	b.n	802026a <TIM_Test_Perform+0xee>
	}
    __HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 80201c8:	4b2e      	ldr	r3, [pc, #184]	@ (8020284 <TIM_Test_Perform+0x108>)
 80201ca:	681b      	ldr	r3, [r3, #0]
 80201cc:	68da      	ldr	r2, [r3, #12]
 80201ce:	4b2d      	ldr	r3, [pc, #180]	@ (8020284 <TIM_Test_Perform+0x108>)
 80201d0:	681b      	ldr	r3, [r3, #0]
 80201d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80201d6:	60da      	str	r2, [r3, #12]

    if (osSemaphoreAcquire(testDoneSem, osWaitForever) != osOK)
 80201d8:	4b2d      	ldr	r3, [pc, #180]	@ (8020290 <TIM_Test_Perform+0x114>)
 80201da:	681b      	ldr	r3, [r3, #0]
 80201dc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80201e0:	4618      	mov	r0, r3
 80201e2:	f7ec ffc5 	bl	800d170 <osSemaphoreAcquire>
 80201e6:	4603      	mov	r3, r0
 80201e8:	2b00      	cmp	r3, #0
 80201ea:	d00a      	beq.n	8020202 <TIM_Test_Perform+0x86>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("Timer test: timeout waiting for DMA complete\n");
 80201ec:	4829      	ldr	r0, [pc, #164]	@ (8020294 <TIM_Test_Perform+0x118>)
 80201ee:	f000 fb43 	bl	8020878 <puts>
#endif
		HAL_TIM_Base_Stop(&htim6);
 80201f2:	4824      	ldr	r0, [pc, #144]	@ (8020284 <TIM_Test_Perform+0x108>)
 80201f4:	f7e9 fde2 	bl	8009dbc <HAL_TIM_Base_Stop>
		HAL_TIM_Base_Stop(&htim2);
 80201f8:	4821      	ldr	r0, [pc, #132]	@ (8020280 <TIM_Test_Perform+0x104>)
 80201fa:	f7e9 fddf 	bl	8009dbc <HAL_TIM_Base_Stop>
		return TEST_FAILED;
 80201fe:	23ff      	movs	r3, #255	@ 0xff
 8020200:	e033      	b.n	802026a <TIM_Test_Perform+0xee>
	}

	HAL_TIM_Base_Stop(&htim6);
 8020202:	4820      	ldr	r0, [pc, #128]	@ (8020284 <TIM_Test_Perform+0x108>)
 8020204:	f7e9 fdda 	bl	8009dbc <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim2);
 8020208:	481d      	ldr	r0, [pc, #116]	@ (8020280 <TIM_Test_Perform+0x104>)
 802020a:	f7e9 fdd7 	bl	8009dbc <HAL_TIM_Base_Stop>

#ifdef PRINT_TESTS_DEBUG
	printf("Sampling complete\n");
 802020e:	4822      	ldr	r0, [pc, #136]	@ (8020298 <TIM_Test_Perform+0x11c>)
 8020210:	f000 fb32 	bl	8020878 <puts>
#endif
	for (int i = 1; i < N_SAMPLES; i++)
 8020214:	2301      	movs	r3, #1
 8020216:	607b      	str	r3, [r7, #4]
 8020218:	e023      	b.n	8020262 <TIM_Test_Perform+0xe6>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("Sample[%d] - sample[%d] = %lu\n", i, i-1,
 802021a:	687b      	ldr	r3, [r7, #4]
 802021c:	1e59      	subs	r1, r3, #1
			   tim2_samples[i] - tim2_samples[i-1]);
 802021e:	4a1a      	ldr	r2, [pc, #104]	@ (8020288 <TIM_Test_Perform+0x10c>)
 8020220:	687b      	ldr	r3, [r7, #4]
 8020222:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8020226:	687b      	ldr	r3, [r7, #4]
 8020228:	3b01      	subs	r3, #1
 802022a:	4817      	ldr	r0, [pc, #92]	@ (8020288 <TIM_Test_Perform+0x10c>)
 802022c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		printf("Sample[%d] - sample[%d] = %lu\n", i, i-1,
 8020230:	1ad3      	subs	r3, r2, r3
 8020232:	460a      	mov	r2, r1
 8020234:	6879      	ldr	r1, [r7, #4]
 8020236:	4819      	ldr	r0, [pc, #100]	@ (802029c <TIM_Test_Perform+0x120>)
 8020238:	f000 faae 	bl	8020798 <iprintf>
#endif

		if (tim2_samples[i] - tim2_samples[i-1] != EXPECTED_INTERVAL)
 802023c:	4a12      	ldr	r2, [pc, #72]	@ (8020288 <TIM_Test_Perform+0x10c>)
 802023e:	687b      	ldr	r3, [r7, #4]
 8020240:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8020244:	687b      	ldr	r3, [r7, #4]
 8020246:	3b01      	subs	r3, #1
 8020248:	490f      	ldr	r1, [pc, #60]	@ (8020288 <TIM_Test_Perform+0x10c>)
 802024a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802024e:	1ad3      	subs	r3, r2, r3
 8020250:	f24d 22f0 	movw	r2, #54000	@ 0xd2f0
 8020254:	4293      	cmp	r3, r2
 8020256:	d001      	beq.n	802025c <TIM_Test_Perform+0xe0>
			return TEST_FAILED;
 8020258:	23ff      	movs	r3, #255	@ 0xff
 802025a:	e006      	b.n	802026a <TIM_Test_Perform+0xee>
	for (int i = 1; i < N_SAMPLES; i++)
 802025c:	687b      	ldr	r3, [r7, #4]
 802025e:	3301      	adds	r3, #1
 8020260:	607b      	str	r3, [r7, #4]
 8020262:	687b      	ldr	r3, [r7, #4]
 8020264:	2b09      	cmp	r3, #9
 8020266:	ddd8      	ble.n	802021a <TIM_Test_Perform+0x9e>
	}

	return TEST_SUCCESS;
 8020268:	2301      	movs	r3, #1
}
 802026a:	4618      	mov	r0, r3
 802026c:	3708      	adds	r7, #8
 802026e:	46bd      	mov	sp, r7
 8020270:	bd80      	pop	{r7, pc}
 8020272:	bf00      	nop
 8020274:	2002d838 	.word	0x2002d838
 8020278:	080202a1 	.word	0x080202a1
 802027c:	20000894 	.word	0x20000894
 8020280:	200007fc 	.word	0x200007fc
 8020284:	20000848 	.word	0x20000848
 8020288:	2002d810 	.word	0x2002d810
 802028c:	08026370 	.word	0x08026370
 8020290:	2002d80c 	.word	0x2002d80c
 8020294:	0802638c 	.word	0x0802638c
 8020298:	080263bc 	.word	0x080263bc
 802029c:	080263d0 	.word	0x080263d0

080202a0 <TIM6_UP_DMA_XferCplt>:
 * Using the same strategy with FreeRTOS will break the code, so I implemented
 * here a different strategy.
 */

void TIM6_UP_DMA_XferCplt(DMA_HandleTypeDef *hdma)
{
 80202a0:	b580      	push	{r7, lr}
 80202a2:	b082      	sub	sp, #8
 80202a4:	af00      	add	r7, sp, #0
 80202a6:	6078      	str	r0, [r7, #4]
    if (hdma == &hdma_tim6_up)
 80202a8:	687b      	ldr	r3, [r7, #4]
 80202aa:	4a06      	ldr	r2, [pc, #24]	@ (80202c4 <TIM6_UP_DMA_XferCplt+0x24>)
 80202ac:	4293      	cmp	r3, r2
 80202ae:	d104      	bne.n	80202ba <TIM6_UP_DMA_XferCplt+0x1a>
    {
    	osSemaphoreRelease(testDoneSem);
 80202b0:	4b05      	ldr	r3, [pc, #20]	@ (80202c8 <TIM6_UP_DMA_XferCplt+0x28>)
 80202b2:	681b      	ldr	r3, [r3, #0]
 80202b4:	4618      	mov	r0, r3
 80202b6:	f7ec ffc1 	bl	800d23c <osSemaphoreRelease>
    }
}
 80202ba:	bf00      	nop
 80202bc:	3708      	adds	r7, #8
 80202be:	46bd      	mov	sp, r7
 80202c0:	bd80      	pop	{r7, pc}
 80202c2:	bf00      	nop
 80202c4:	20000894 	.word	0x20000894
 80202c8:	2002d80c 	.word	0x2002d80c

080202cc <UartTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void UartTestTask(void)
{
 80202cc:	b580      	push	{r7, lr}
 80202ce:	b0ca      	sub	sp, #296	@ 0x128
 80202d0:	af00      	add	r7, sp, #0
	TestData_t test_data;
	OutMsg_t out_msg;
	uint8_t result;

	uart4RxSem = osSemaphoreNew(1, 0, NULL);
 80202d2:	2200      	movs	r2, #0
 80202d4:	2100      	movs	r1, #0
 80202d6:	2001      	movs	r0, #1
 80202d8:	f7ec feae 	bl	800d038 <osSemaphoreNew>
 80202dc:	4603      	mov	r3, r0
 80202de:	4a3d      	ldr	r2, [pc, #244]	@ (80203d4 <UartTestTask+0x108>)
 80202e0:	6013      	str	r3, [r2, #0]
	uart5RxSem = osSemaphoreNew(1, 0, NULL);
 80202e2:	2200      	movs	r2, #0
 80202e4:	2100      	movs	r1, #0
 80202e6:	2001      	movs	r0, #1
 80202e8:	f7ec fea6 	bl	800d038 <osSemaphoreNew>
 80202ec:	4603      	mov	r3, r0
 80202ee:	4a3a      	ldr	r2, [pc, #232]	@ (80203d8 <UartTestTask+0x10c>)
 80202f0:	6013      	str	r3, [r2, #0]

	while (1)
	{
		if(osMessageQueueGet(uartQueueHandle, &test_data, 0, osWaitForever) == osOK)
 80202f2:	4b3a      	ldr	r3, [pc, #232]	@ (80203dc <UartTestTask+0x110>)
 80202f4:	6818      	ldr	r0, [r3, #0]
 80202f6:	f107 0114 	add.w	r1, r7, #20
 80202fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80202fe:	2200      	movs	r2, #0
 8020300:	f7ed f924 	bl	800d54c <osMessageQueueGet>
 8020304:	4603      	mov	r3, r0
 8020306:	2b00      	cmp	r3, #0
 8020308:	d1f3      	bne.n	80202f2 <UartTestTask+0x26>
		{
			printf("uart received test ID: %lu\n", test_data.test_id);
 802030a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802030e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020312:	689b      	ldr	r3, [r3, #8]
 8020314:	4619      	mov	r1, r3
 8020316:	4832      	ldr	r0, [pc, #200]	@ (80203e0 <UartTestTask+0x114>)
 8020318:	f000 fa3e 	bl	8020798 <iprintf>

			for (uint8_t i=0; i<test_data.n_iter; i++)
 802031c:	2300      	movs	r3, #0
 802031e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8020322:	e017      	b.n	8020354 <UartTestTask+0x88>
			{
                result = UART_Test_Perform((uint8_t *)test_data.payload, test_data.p_len);
 8020324:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020328:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 802032c:	7b5a      	ldrb	r2, [r3, #13]
 802032e:	f107 0314 	add.w	r3, r7, #20
 8020332:	330e      	adds	r3, #14
 8020334:	4611      	mov	r1, r2
 8020336:	4618      	mov	r0, r3
 8020338:	f000 f858 	bl	80203ec <UART_Test_Perform>
 802033c:	4603      	mov	r3, r0
 802033e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 8020342:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020346:	2bff      	cmp	r3, #255	@ 0xff
 8020348:	d00e      	beq.n	8020368 <UartTestTask+0x9c>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 802034a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 802034e:	3301      	adds	r3, #1
 8020350:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8020354:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020358:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 802035c:	7b1b      	ldrb	r3, [r3, #12]
 802035e:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 8020362:	429a      	cmp	r2, r3
 8020364:	d3de      	bcc.n	8020324 <UartTestTask+0x58>
 8020366:	e000      	b.n	802036a <UartTestTask+0x9e>
					break;
 8020368:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 802036a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802036e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020372:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8020376:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 802037a:	6812      	ldr	r2, [r2, #0]
 802037c:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 802037e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020382:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020386:	889a      	ldrh	r2, [r3, #4]
 8020388:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802038c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020390:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 8020392:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020396:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 802039a:	689a      	ldr	r2, [r3, #8]
 802039c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80203a0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80203a4:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 80203a6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80203aa:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80203ae:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 80203b2:	731a      	strb	r2, [r3, #12]

			// send result to queue
			if (osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever) != osOK)
 80203b4:	4b0b      	ldr	r3, [pc, #44]	@ (80203e4 <UartTestTask+0x118>)
 80203b6:	6818      	ldr	r0, [r3, #0]
 80203b8:	1d39      	adds	r1, r7, #4
 80203ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80203be:	2200      	movs	r2, #0
 80203c0:	f7ed f850 	bl	800d464 <osMessageQueuePut>
 80203c4:	4603      	mov	r3, r0
 80203c6:	2b00      	cmp	r3, #0
 80203c8:	d093      	beq.n	80202f2 <UartTestTask+0x26>
			{
				printf("outMsg q full!\n");
 80203ca:	4807      	ldr	r0, [pc, #28]	@ (80203e8 <UartTestTask+0x11c>)
 80203cc:	f000 fa54 	bl	8020878 <puts>
		if(osMessageQueueGet(uartQueueHandle, &test_data, 0, osWaitForever) == osOK)
 80203d0:	e78f      	b.n	80202f2 <UartTestTask+0x26>
 80203d2:	bf00      	nop
 80203d4:	2002d83c 	.word	0x2002d83c
 80203d8:	2002d840 	.word	0x2002d840
 80203dc:	20000328 	.word	0x20000328
 80203e0:	080263f0 	.word	0x080263f0
 80203e4:	20000324 	.word	0x20000324
 80203e8:	0802640c 	.word	0x0802640c

080203ec <UART_Test_Perform>:


}

uint8_t UART_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 80203ec:	b590      	push	{r4, r7, lr}
 80203ee:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 80203f2:	af00      	add	r7, sp, #0
 80203f4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80203f8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80203fc:	6018      	str	r0, [r3, #0]
 80203fe:	460a      	mov	r2, r1
 8020400:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020404:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020408:	701a      	strb	r2, [r3, #0]
	uint8_t uart4_rx[MAX_BUF];
	uint8_t uart5_rx[MAX_BUF];

	// Send msg uart4 -> uart5
	if (HAL_UART_Receive_DMA(&huart5, uart5_rx, msg_len) != HAL_OK)
 802040a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 802040e:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020412:	781b      	ldrb	r3, [r3, #0]
 8020414:	b29a      	uxth	r2, r3
 8020416:	f107 030c 	add.w	r3, r7, #12
 802041a:	4619      	mov	r1, r3
 802041c:	4843      	ldr	r0, [pc, #268]	@ (802052c <UART_Test_Perform+0x140>)
 802041e:	f7ea fa89 	bl	800a934 <HAL_UART_Receive_DMA>
 8020422:	4603      	mov	r3, r0
 8020424:	2b00      	cmp	r3, #0
 8020426:	d004      	beq.n	8020432 <UART_Test_Perform+0x46>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart4 -> uart5 RX1 failed\n");
 8020428:	4841      	ldr	r0, [pc, #260]	@ (8020530 <UART_Test_Perform+0x144>)
 802042a:	f000 fa25 	bl	8020878 <puts>
#endif
		return TEST_FAILED;
 802042e:	23ff      	movs	r3, #255	@ 0xff
 8020430:	e076      	b.n	8020520 <UART_Test_Perform+0x134>
	}
	if (HAL_UART_Transmit_IT(&huart4, msg, msg_len) != HAL_OK)
 8020432:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020436:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 802043a:	781b      	ldrb	r3, [r3, #0]
 802043c:	b29a      	uxth	r2, r3
 802043e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020442:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8020446:	6819      	ldr	r1, [r3, #0]
 8020448:	483a      	ldr	r0, [pc, #232]	@ (8020534 <UART_Test_Perform+0x148>)
 802044a:	f7ea fa15 	bl	800a878 <HAL_UART_Transmit_IT>
 802044e:	4603      	mov	r3, r0
 8020450:	2b00      	cmp	r3, #0
 8020452:	d004      	beq.n	802045e <UART_Test_Perform+0x72>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart4 -> uart5 TX failed\n");
 8020454:	4838      	ldr	r0, [pc, #224]	@ (8020538 <UART_Test_Perform+0x14c>)
 8020456:	f000 fa0f 	bl	8020878 <puts>
#endif
		return TEST_FAILED;
 802045a:	23ff      	movs	r3, #255	@ 0xff
 802045c:	e060      	b.n	8020520 <UART_Test_Perform+0x134>
	}
	if (osSemaphoreAcquire(uart5RxSem, 10) != osOK) {
 802045e:	4b37      	ldr	r3, [pc, #220]	@ (802053c <UART_Test_Perform+0x150>)
 8020460:	681b      	ldr	r3, [r3, #0]
 8020462:	210a      	movs	r1, #10
 8020464:	4618      	mov	r0, r3
 8020466:	f7ec fe83 	bl	800d170 <osSemaphoreAcquire>
 802046a:	4603      	mov	r3, r0
 802046c:	2b00      	cmp	r3, #0
 802046e:	d004      	beq.n	802047a <UART_Test_Perform+0x8e>
#ifdef PRINT_TESTS_DEBUG
	    printf("uart5 RX semaphore timeout\n");
 8020470:	4833      	ldr	r0, [pc, #204]	@ (8020540 <UART_Test_Perform+0x154>)
 8020472:	f000 fa01 	bl	8020878 <puts>
#endif
	    return TEST_FAILED;
 8020476:	23ff      	movs	r3, #255	@ 0xff
 8020478:	e052      	b.n	8020520 <UART_Test_Perform+0x134>
	}

	// Send msg uart5 -> uart4
	if (HAL_UART_Receive_DMA(&huart4, uart4_rx, msg_len) != HAL_OK)
 802047a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 802047e:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020482:	781b      	ldrb	r3, [r3, #0]
 8020484:	b29a      	uxth	r2, r3
 8020486:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 802048a:	4619      	mov	r1, r3
 802048c:	4829      	ldr	r0, [pc, #164]	@ (8020534 <UART_Test_Perform+0x148>)
 802048e:	f7ea fa51 	bl	800a934 <HAL_UART_Receive_DMA>
 8020492:	4603      	mov	r3, r0
 8020494:	2b00      	cmp	r3, #0
 8020496:	d004      	beq.n	80204a2 <UART_Test_Perform+0xb6>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart5 -> uart4 RX failed\n");
 8020498:	482a      	ldr	r0, [pc, #168]	@ (8020544 <UART_Test_Perform+0x158>)
 802049a:	f000 f9ed 	bl	8020878 <puts>
#endif
		return TEST_FAILED;
 802049e:	23ff      	movs	r3, #255	@ 0xff
 80204a0:	e03e      	b.n	8020520 <UART_Test_Perform+0x134>
	}
	if (HAL_UART_Transmit_IT(&huart5, uart5_rx, msg_len) != HAL_OK)
 80204a2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80204a6:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80204aa:	781b      	ldrb	r3, [r3, #0]
 80204ac:	b29a      	uxth	r2, r3
 80204ae:	f107 030c 	add.w	r3, r7, #12
 80204b2:	4619      	mov	r1, r3
 80204b4:	481d      	ldr	r0, [pc, #116]	@ (802052c <UART_Test_Perform+0x140>)
 80204b6:	f7ea f9df 	bl	800a878 <HAL_UART_Transmit_IT>
 80204ba:	4603      	mov	r3, r0
 80204bc:	2b00      	cmp	r3, #0
 80204be:	d004      	beq.n	80204ca <UART_Test_Perform+0xde>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart5 -> uart4 TX failed\n");
 80204c0:	4821      	ldr	r0, [pc, #132]	@ (8020548 <UART_Test_Perform+0x15c>)
 80204c2:	f000 f9d9 	bl	8020878 <puts>
#endif
		return TEST_FAILED;
 80204c6:	23ff      	movs	r3, #255	@ 0xff
 80204c8:	e02a      	b.n	8020520 <UART_Test_Perform+0x134>
	}
	if (osSemaphoreAcquire(uart4RxSem, 10) != osOK) {
 80204ca:	4b20      	ldr	r3, [pc, #128]	@ (802054c <UART_Test_Perform+0x160>)
 80204cc:	681b      	ldr	r3, [r3, #0]
 80204ce:	210a      	movs	r1, #10
 80204d0:	4618      	mov	r0, r3
 80204d2:	f7ec fe4d 	bl	800d170 <osSemaphoreAcquire>
 80204d6:	4603      	mov	r3, r0
 80204d8:	2b00      	cmp	r3, #0
 80204da:	d004      	beq.n	80204e6 <UART_Test_Perform+0xfa>
#ifdef PRINT_TESTS_DEBUG
	    printf("uart4 RX semaphore timeout\n");
 80204dc:	481c      	ldr	r0, [pc, #112]	@ (8020550 <UART_Test_Perform+0x164>)
 80204de:	f000 f9cb 	bl	8020878 <puts>
#endif
	    return TEST_FAILED;
 80204e2:	23ff      	movs	r3, #255	@ 0xff
 80204e4:	e01c      	b.n	8020520 <UART_Test_Perform+0x134>
	}

	// compare crc
	int crc_result = Match_CRC(msg, msg_len, uart4_rx, msg_len);
 80204e6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80204ea:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80204ee:	781c      	ldrb	r4, [r3, #0]
 80204f0:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 80204f4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80204f8:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80204fc:	7819      	ldrb	r1, [r3, #0]
 80204fe:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020502:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 8020506:	4623      	mov	r3, r4
 8020508:	6800      	ldr	r0, [r0, #0]
 802050a:	f7ff f891 	bl	801f630 <Match_CRC>
 802050e:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 8020512:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8020516:	2b01      	cmp	r3, #1
 8020518:	d101      	bne.n	802051e <UART_Test_Perform+0x132>
 802051a:	2301      	movs	r3, #1
 802051c:	e000      	b.n	8020520 <UART_Test_Perform+0x134>

	return TEST_FAILED;
 802051e:	23ff      	movs	r3, #255	@ 0xff
}
 8020520:	4618      	mov	r0, r3
 8020522:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 8020526:	46bd      	mov	sp, r7
 8020528:	bd90      	pop	{r4, r7, pc}
 802052a:	bf00      	nop
 802052c:	2000097c 	.word	0x2000097c
 8020530:	0802641c 	.word	0x0802641c
 8020534:	200008f4 	.word	0x200008f4
 8020538:	08026438 	.word	0x08026438
 802053c:	2002d840 	.word	0x2002d840
 8020540:	08026454 	.word	0x08026454
 8020544:	08026470 	.word	0x08026470
 8020548:	0802648c 	.word	0x0802648c
 802054c:	2002d83c 	.word	0x2002d83c
 8020550:	080264a8 	.word	0x080264a8

08020554 <HAL_UART_RxCpltCallback>:

/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8020554:	b580      	push	{r7, lr}
 8020556:	b082      	sub	sp, #8
 8020558:	af00      	add	r7, sp, #0
 802055a:	6078      	str	r0, [r7, #4]
    if (huart == &huart4) osSemaphoreRelease(uart4RxSem);
 802055c:	687b      	ldr	r3, [r7, #4]
 802055e:	4a0a      	ldr	r2, [pc, #40]	@ (8020588 <HAL_UART_RxCpltCallback+0x34>)
 8020560:	4293      	cmp	r3, r2
 8020562:	d104      	bne.n	802056e <HAL_UART_RxCpltCallback+0x1a>
 8020564:	4b09      	ldr	r3, [pc, #36]	@ (802058c <HAL_UART_RxCpltCallback+0x38>)
 8020566:	681b      	ldr	r3, [r3, #0]
 8020568:	4618      	mov	r0, r3
 802056a:	f7ec fe67 	bl	800d23c <osSemaphoreRelease>
    if (huart == &huart5) osSemaphoreRelease(uart5RxSem);
 802056e:	687b      	ldr	r3, [r7, #4]
 8020570:	4a07      	ldr	r2, [pc, #28]	@ (8020590 <HAL_UART_RxCpltCallback+0x3c>)
 8020572:	4293      	cmp	r3, r2
 8020574:	d104      	bne.n	8020580 <HAL_UART_RxCpltCallback+0x2c>
 8020576:	4b07      	ldr	r3, [pc, #28]	@ (8020594 <HAL_UART_RxCpltCallback+0x40>)
 8020578:	681b      	ldr	r3, [r3, #0]
 802057a:	4618      	mov	r0, r3
 802057c:	f7ec fe5e 	bl	800d23c <osSemaphoreRelease>
}
 8020580:	bf00      	nop
 8020582:	3708      	adds	r7, #8
 8020584:	46bd      	mov	sp, r7
 8020586:	bd80      	pop	{r7, pc}
 8020588:	200008f4 	.word	0x200008f4
 802058c:	2002d83c 	.word	0x2002d83c
 8020590:	2000097c 	.word	0x2000097c
 8020594:	2002d840 	.word	0x2002d840

08020598 <rand>:
 8020598:	4b16      	ldr	r3, [pc, #88]	@ (80205f4 <rand+0x5c>)
 802059a:	b510      	push	{r4, lr}
 802059c:	681c      	ldr	r4, [r3, #0]
 802059e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80205a0:	b9b3      	cbnz	r3, 80205d0 <rand+0x38>
 80205a2:	2018      	movs	r0, #24
 80205a4:	f000 fba2 	bl	8020cec <malloc>
 80205a8:	4602      	mov	r2, r0
 80205aa:	6320      	str	r0, [r4, #48]	@ 0x30
 80205ac:	b920      	cbnz	r0, 80205b8 <rand+0x20>
 80205ae:	4b12      	ldr	r3, [pc, #72]	@ (80205f8 <rand+0x60>)
 80205b0:	4812      	ldr	r0, [pc, #72]	@ (80205fc <rand+0x64>)
 80205b2:	2152      	movs	r1, #82	@ 0x52
 80205b4:	f000 fb32 	bl	8020c1c <__assert_func>
 80205b8:	4911      	ldr	r1, [pc, #68]	@ (8020600 <rand+0x68>)
 80205ba:	4b12      	ldr	r3, [pc, #72]	@ (8020604 <rand+0x6c>)
 80205bc:	e9c0 1300 	strd	r1, r3, [r0]
 80205c0:	4b11      	ldr	r3, [pc, #68]	@ (8020608 <rand+0x70>)
 80205c2:	6083      	str	r3, [r0, #8]
 80205c4:	230b      	movs	r3, #11
 80205c6:	8183      	strh	r3, [r0, #12]
 80205c8:	2100      	movs	r1, #0
 80205ca:	2001      	movs	r0, #1
 80205cc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80205d0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80205d2:	480e      	ldr	r0, [pc, #56]	@ (802060c <rand+0x74>)
 80205d4:	690b      	ldr	r3, [r1, #16]
 80205d6:	694c      	ldr	r4, [r1, #20]
 80205d8:	4a0d      	ldr	r2, [pc, #52]	@ (8020610 <rand+0x78>)
 80205da:	4358      	muls	r0, r3
 80205dc:	fb02 0004 	mla	r0, r2, r4, r0
 80205e0:	fba3 3202 	umull	r3, r2, r3, r2
 80205e4:	3301      	adds	r3, #1
 80205e6:	eb40 0002 	adc.w	r0, r0, r2
 80205ea:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80205ee:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80205f2:	bd10      	pop	{r4, pc}
 80205f4:	20000080 	.word	0x20000080
 80205f8:	08026896 	.word	0x08026896
 80205fc:	080268ad 	.word	0x080268ad
 8020600:	abcd330e 	.word	0xabcd330e
 8020604:	e66d1234 	.word	0xe66d1234
 8020608:	0005deec 	.word	0x0005deec
 802060c:	5851f42d 	.word	0x5851f42d
 8020610:	4c957f2d 	.word	0x4c957f2d

08020614 <std>:
 8020614:	2300      	movs	r3, #0
 8020616:	b510      	push	{r4, lr}
 8020618:	4604      	mov	r4, r0
 802061a:	e9c0 3300 	strd	r3, r3, [r0]
 802061e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8020622:	6083      	str	r3, [r0, #8]
 8020624:	8181      	strh	r1, [r0, #12]
 8020626:	6643      	str	r3, [r0, #100]	@ 0x64
 8020628:	81c2      	strh	r2, [r0, #14]
 802062a:	6183      	str	r3, [r0, #24]
 802062c:	4619      	mov	r1, r3
 802062e:	2208      	movs	r2, #8
 8020630:	305c      	adds	r0, #92	@ 0x5c
 8020632:	f000 fa11 	bl	8020a58 <memset>
 8020636:	4b0d      	ldr	r3, [pc, #52]	@ (802066c <std+0x58>)
 8020638:	6263      	str	r3, [r4, #36]	@ 0x24
 802063a:	4b0d      	ldr	r3, [pc, #52]	@ (8020670 <std+0x5c>)
 802063c:	62a3      	str	r3, [r4, #40]	@ 0x28
 802063e:	4b0d      	ldr	r3, [pc, #52]	@ (8020674 <std+0x60>)
 8020640:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8020642:	4b0d      	ldr	r3, [pc, #52]	@ (8020678 <std+0x64>)
 8020644:	6323      	str	r3, [r4, #48]	@ 0x30
 8020646:	4b0d      	ldr	r3, [pc, #52]	@ (802067c <std+0x68>)
 8020648:	6224      	str	r4, [r4, #32]
 802064a:	429c      	cmp	r4, r3
 802064c:	d006      	beq.n	802065c <std+0x48>
 802064e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8020652:	4294      	cmp	r4, r2
 8020654:	d002      	beq.n	802065c <std+0x48>
 8020656:	33d0      	adds	r3, #208	@ 0xd0
 8020658:	429c      	cmp	r4, r3
 802065a:	d105      	bne.n	8020668 <std+0x54>
 802065c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8020660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020664:	f000 bac8 	b.w	8020bf8 <__retarget_lock_init_recursive>
 8020668:	bd10      	pop	{r4, pc}
 802066a:	bf00      	nop
 802066c:	08020889 	.word	0x08020889
 8020670:	080208ab 	.word	0x080208ab
 8020674:	080208e3 	.word	0x080208e3
 8020678:	08020907 	.word	0x08020907
 802067c:	2002d844 	.word	0x2002d844

08020680 <stdio_exit_handler>:
 8020680:	4a02      	ldr	r2, [pc, #8]	@ (802068c <stdio_exit_handler+0xc>)
 8020682:	4903      	ldr	r1, [pc, #12]	@ (8020690 <stdio_exit_handler+0x10>)
 8020684:	4803      	ldr	r0, [pc, #12]	@ (8020694 <stdio_exit_handler+0x14>)
 8020686:	f000 b869 	b.w	802075c <_fwalk_sglue>
 802068a:	bf00      	nop
 802068c:	20000074 	.word	0x20000074
 8020690:	080214fd 	.word	0x080214fd
 8020694:	20000084 	.word	0x20000084

08020698 <cleanup_stdio>:
 8020698:	6841      	ldr	r1, [r0, #4]
 802069a:	4b0c      	ldr	r3, [pc, #48]	@ (80206cc <cleanup_stdio+0x34>)
 802069c:	4299      	cmp	r1, r3
 802069e:	b510      	push	{r4, lr}
 80206a0:	4604      	mov	r4, r0
 80206a2:	d001      	beq.n	80206a8 <cleanup_stdio+0x10>
 80206a4:	f000 ff2a 	bl	80214fc <_fflush_r>
 80206a8:	68a1      	ldr	r1, [r4, #8]
 80206aa:	4b09      	ldr	r3, [pc, #36]	@ (80206d0 <cleanup_stdio+0x38>)
 80206ac:	4299      	cmp	r1, r3
 80206ae:	d002      	beq.n	80206b6 <cleanup_stdio+0x1e>
 80206b0:	4620      	mov	r0, r4
 80206b2:	f000 ff23 	bl	80214fc <_fflush_r>
 80206b6:	68e1      	ldr	r1, [r4, #12]
 80206b8:	4b06      	ldr	r3, [pc, #24]	@ (80206d4 <cleanup_stdio+0x3c>)
 80206ba:	4299      	cmp	r1, r3
 80206bc:	d004      	beq.n	80206c8 <cleanup_stdio+0x30>
 80206be:	4620      	mov	r0, r4
 80206c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80206c4:	f000 bf1a 	b.w	80214fc <_fflush_r>
 80206c8:	bd10      	pop	{r4, pc}
 80206ca:	bf00      	nop
 80206cc:	2002d844 	.word	0x2002d844
 80206d0:	2002d8ac 	.word	0x2002d8ac
 80206d4:	2002d914 	.word	0x2002d914

080206d8 <global_stdio_init.part.0>:
 80206d8:	b510      	push	{r4, lr}
 80206da:	4b0b      	ldr	r3, [pc, #44]	@ (8020708 <global_stdio_init.part.0+0x30>)
 80206dc:	4c0b      	ldr	r4, [pc, #44]	@ (802070c <global_stdio_init.part.0+0x34>)
 80206de:	4a0c      	ldr	r2, [pc, #48]	@ (8020710 <global_stdio_init.part.0+0x38>)
 80206e0:	601a      	str	r2, [r3, #0]
 80206e2:	4620      	mov	r0, r4
 80206e4:	2200      	movs	r2, #0
 80206e6:	2104      	movs	r1, #4
 80206e8:	f7ff ff94 	bl	8020614 <std>
 80206ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80206f0:	2201      	movs	r2, #1
 80206f2:	2109      	movs	r1, #9
 80206f4:	f7ff ff8e 	bl	8020614 <std>
 80206f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80206fc:	2202      	movs	r2, #2
 80206fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020702:	2112      	movs	r1, #18
 8020704:	f7ff bf86 	b.w	8020614 <std>
 8020708:	2002d97c 	.word	0x2002d97c
 802070c:	2002d844 	.word	0x2002d844
 8020710:	08020681 	.word	0x08020681

08020714 <__sfp_lock_acquire>:
 8020714:	4801      	ldr	r0, [pc, #4]	@ (802071c <__sfp_lock_acquire+0x8>)
 8020716:	f000 ba70 	b.w	8020bfa <__retarget_lock_acquire_recursive>
 802071a:	bf00      	nop
 802071c:	2002d985 	.word	0x2002d985

08020720 <__sfp_lock_release>:
 8020720:	4801      	ldr	r0, [pc, #4]	@ (8020728 <__sfp_lock_release+0x8>)
 8020722:	f000 ba6b 	b.w	8020bfc <__retarget_lock_release_recursive>
 8020726:	bf00      	nop
 8020728:	2002d985 	.word	0x2002d985

0802072c <__sinit>:
 802072c:	b510      	push	{r4, lr}
 802072e:	4604      	mov	r4, r0
 8020730:	f7ff fff0 	bl	8020714 <__sfp_lock_acquire>
 8020734:	6a23      	ldr	r3, [r4, #32]
 8020736:	b11b      	cbz	r3, 8020740 <__sinit+0x14>
 8020738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802073c:	f7ff bff0 	b.w	8020720 <__sfp_lock_release>
 8020740:	4b04      	ldr	r3, [pc, #16]	@ (8020754 <__sinit+0x28>)
 8020742:	6223      	str	r3, [r4, #32]
 8020744:	4b04      	ldr	r3, [pc, #16]	@ (8020758 <__sinit+0x2c>)
 8020746:	681b      	ldr	r3, [r3, #0]
 8020748:	2b00      	cmp	r3, #0
 802074a:	d1f5      	bne.n	8020738 <__sinit+0xc>
 802074c:	f7ff ffc4 	bl	80206d8 <global_stdio_init.part.0>
 8020750:	e7f2      	b.n	8020738 <__sinit+0xc>
 8020752:	bf00      	nop
 8020754:	08020699 	.word	0x08020699
 8020758:	2002d97c 	.word	0x2002d97c

0802075c <_fwalk_sglue>:
 802075c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020760:	4607      	mov	r7, r0
 8020762:	4688      	mov	r8, r1
 8020764:	4614      	mov	r4, r2
 8020766:	2600      	movs	r6, #0
 8020768:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802076c:	f1b9 0901 	subs.w	r9, r9, #1
 8020770:	d505      	bpl.n	802077e <_fwalk_sglue+0x22>
 8020772:	6824      	ldr	r4, [r4, #0]
 8020774:	2c00      	cmp	r4, #0
 8020776:	d1f7      	bne.n	8020768 <_fwalk_sglue+0xc>
 8020778:	4630      	mov	r0, r6
 802077a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802077e:	89ab      	ldrh	r3, [r5, #12]
 8020780:	2b01      	cmp	r3, #1
 8020782:	d907      	bls.n	8020794 <_fwalk_sglue+0x38>
 8020784:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020788:	3301      	adds	r3, #1
 802078a:	d003      	beq.n	8020794 <_fwalk_sglue+0x38>
 802078c:	4629      	mov	r1, r5
 802078e:	4638      	mov	r0, r7
 8020790:	47c0      	blx	r8
 8020792:	4306      	orrs	r6, r0
 8020794:	3568      	adds	r5, #104	@ 0x68
 8020796:	e7e9      	b.n	802076c <_fwalk_sglue+0x10>

08020798 <iprintf>:
 8020798:	b40f      	push	{r0, r1, r2, r3}
 802079a:	b507      	push	{r0, r1, r2, lr}
 802079c:	4906      	ldr	r1, [pc, #24]	@ (80207b8 <iprintf+0x20>)
 802079e:	ab04      	add	r3, sp, #16
 80207a0:	6808      	ldr	r0, [r1, #0]
 80207a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80207a6:	6881      	ldr	r1, [r0, #8]
 80207a8:	9301      	str	r3, [sp, #4]
 80207aa:	f000 fb7f 	bl	8020eac <_vfiprintf_r>
 80207ae:	b003      	add	sp, #12
 80207b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80207b4:	b004      	add	sp, #16
 80207b6:	4770      	bx	lr
 80207b8:	20000080 	.word	0x20000080

080207bc <putchar>:
 80207bc:	4b02      	ldr	r3, [pc, #8]	@ (80207c8 <putchar+0xc>)
 80207be:	4601      	mov	r1, r0
 80207c0:	6818      	ldr	r0, [r3, #0]
 80207c2:	6882      	ldr	r2, [r0, #8]
 80207c4:	f000 bf36 	b.w	8021634 <_putc_r>
 80207c8:	20000080 	.word	0x20000080

080207cc <_puts_r>:
 80207cc:	6a03      	ldr	r3, [r0, #32]
 80207ce:	b570      	push	{r4, r5, r6, lr}
 80207d0:	6884      	ldr	r4, [r0, #8]
 80207d2:	4605      	mov	r5, r0
 80207d4:	460e      	mov	r6, r1
 80207d6:	b90b      	cbnz	r3, 80207dc <_puts_r+0x10>
 80207d8:	f7ff ffa8 	bl	802072c <__sinit>
 80207dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80207de:	07db      	lsls	r3, r3, #31
 80207e0:	d405      	bmi.n	80207ee <_puts_r+0x22>
 80207e2:	89a3      	ldrh	r3, [r4, #12]
 80207e4:	0598      	lsls	r0, r3, #22
 80207e6:	d402      	bmi.n	80207ee <_puts_r+0x22>
 80207e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80207ea:	f000 fa06 	bl	8020bfa <__retarget_lock_acquire_recursive>
 80207ee:	89a3      	ldrh	r3, [r4, #12]
 80207f0:	0719      	lsls	r1, r3, #28
 80207f2:	d502      	bpl.n	80207fa <_puts_r+0x2e>
 80207f4:	6923      	ldr	r3, [r4, #16]
 80207f6:	2b00      	cmp	r3, #0
 80207f8:	d135      	bne.n	8020866 <_puts_r+0x9a>
 80207fa:	4621      	mov	r1, r4
 80207fc:	4628      	mov	r0, r5
 80207fe:	f000 f8c5 	bl	802098c <__swsetup_r>
 8020802:	b380      	cbz	r0, 8020866 <_puts_r+0x9a>
 8020804:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8020808:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802080a:	07da      	lsls	r2, r3, #31
 802080c:	d405      	bmi.n	802081a <_puts_r+0x4e>
 802080e:	89a3      	ldrh	r3, [r4, #12]
 8020810:	059b      	lsls	r3, r3, #22
 8020812:	d402      	bmi.n	802081a <_puts_r+0x4e>
 8020814:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020816:	f000 f9f1 	bl	8020bfc <__retarget_lock_release_recursive>
 802081a:	4628      	mov	r0, r5
 802081c:	bd70      	pop	{r4, r5, r6, pc}
 802081e:	2b00      	cmp	r3, #0
 8020820:	da04      	bge.n	802082c <_puts_r+0x60>
 8020822:	69a2      	ldr	r2, [r4, #24]
 8020824:	429a      	cmp	r2, r3
 8020826:	dc17      	bgt.n	8020858 <_puts_r+0x8c>
 8020828:	290a      	cmp	r1, #10
 802082a:	d015      	beq.n	8020858 <_puts_r+0x8c>
 802082c:	6823      	ldr	r3, [r4, #0]
 802082e:	1c5a      	adds	r2, r3, #1
 8020830:	6022      	str	r2, [r4, #0]
 8020832:	7019      	strb	r1, [r3, #0]
 8020834:	68a3      	ldr	r3, [r4, #8]
 8020836:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802083a:	3b01      	subs	r3, #1
 802083c:	60a3      	str	r3, [r4, #8]
 802083e:	2900      	cmp	r1, #0
 8020840:	d1ed      	bne.n	802081e <_puts_r+0x52>
 8020842:	2b00      	cmp	r3, #0
 8020844:	da11      	bge.n	802086a <_puts_r+0x9e>
 8020846:	4622      	mov	r2, r4
 8020848:	210a      	movs	r1, #10
 802084a:	4628      	mov	r0, r5
 802084c:	f000 f85f 	bl	802090e <__swbuf_r>
 8020850:	3001      	adds	r0, #1
 8020852:	d0d7      	beq.n	8020804 <_puts_r+0x38>
 8020854:	250a      	movs	r5, #10
 8020856:	e7d7      	b.n	8020808 <_puts_r+0x3c>
 8020858:	4622      	mov	r2, r4
 802085a:	4628      	mov	r0, r5
 802085c:	f000 f857 	bl	802090e <__swbuf_r>
 8020860:	3001      	adds	r0, #1
 8020862:	d1e7      	bne.n	8020834 <_puts_r+0x68>
 8020864:	e7ce      	b.n	8020804 <_puts_r+0x38>
 8020866:	3e01      	subs	r6, #1
 8020868:	e7e4      	b.n	8020834 <_puts_r+0x68>
 802086a:	6823      	ldr	r3, [r4, #0]
 802086c:	1c5a      	adds	r2, r3, #1
 802086e:	6022      	str	r2, [r4, #0]
 8020870:	220a      	movs	r2, #10
 8020872:	701a      	strb	r2, [r3, #0]
 8020874:	e7ee      	b.n	8020854 <_puts_r+0x88>
	...

08020878 <puts>:
 8020878:	4b02      	ldr	r3, [pc, #8]	@ (8020884 <puts+0xc>)
 802087a:	4601      	mov	r1, r0
 802087c:	6818      	ldr	r0, [r3, #0]
 802087e:	f7ff bfa5 	b.w	80207cc <_puts_r>
 8020882:	bf00      	nop
 8020884:	20000080 	.word	0x20000080

08020888 <__sread>:
 8020888:	b510      	push	{r4, lr}
 802088a:	460c      	mov	r4, r1
 802088c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020890:	f000 f96a 	bl	8020b68 <_read_r>
 8020894:	2800      	cmp	r0, #0
 8020896:	bfab      	itete	ge
 8020898:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802089a:	89a3      	ldrhlt	r3, [r4, #12]
 802089c:	181b      	addge	r3, r3, r0
 802089e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80208a2:	bfac      	ite	ge
 80208a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80208a6:	81a3      	strhlt	r3, [r4, #12]
 80208a8:	bd10      	pop	{r4, pc}

080208aa <__swrite>:
 80208aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80208ae:	461f      	mov	r7, r3
 80208b0:	898b      	ldrh	r3, [r1, #12]
 80208b2:	05db      	lsls	r3, r3, #23
 80208b4:	4605      	mov	r5, r0
 80208b6:	460c      	mov	r4, r1
 80208b8:	4616      	mov	r6, r2
 80208ba:	d505      	bpl.n	80208c8 <__swrite+0x1e>
 80208bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80208c0:	2302      	movs	r3, #2
 80208c2:	2200      	movs	r2, #0
 80208c4:	f000 f93e 	bl	8020b44 <_lseek_r>
 80208c8:	89a3      	ldrh	r3, [r4, #12]
 80208ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80208ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80208d2:	81a3      	strh	r3, [r4, #12]
 80208d4:	4632      	mov	r2, r6
 80208d6:	463b      	mov	r3, r7
 80208d8:	4628      	mov	r0, r5
 80208da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80208de:	f000 b955 	b.w	8020b8c <_write_r>

080208e2 <__sseek>:
 80208e2:	b510      	push	{r4, lr}
 80208e4:	460c      	mov	r4, r1
 80208e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80208ea:	f000 f92b 	bl	8020b44 <_lseek_r>
 80208ee:	1c43      	adds	r3, r0, #1
 80208f0:	89a3      	ldrh	r3, [r4, #12]
 80208f2:	bf15      	itete	ne
 80208f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80208f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80208fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80208fe:	81a3      	strheq	r3, [r4, #12]
 8020900:	bf18      	it	ne
 8020902:	81a3      	strhne	r3, [r4, #12]
 8020904:	bd10      	pop	{r4, pc}

08020906 <__sclose>:
 8020906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802090a:	f000 b8ad 	b.w	8020a68 <_close_r>

0802090e <__swbuf_r>:
 802090e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020910:	460e      	mov	r6, r1
 8020912:	4614      	mov	r4, r2
 8020914:	4605      	mov	r5, r0
 8020916:	b118      	cbz	r0, 8020920 <__swbuf_r+0x12>
 8020918:	6a03      	ldr	r3, [r0, #32]
 802091a:	b90b      	cbnz	r3, 8020920 <__swbuf_r+0x12>
 802091c:	f7ff ff06 	bl	802072c <__sinit>
 8020920:	69a3      	ldr	r3, [r4, #24]
 8020922:	60a3      	str	r3, [r4, #8]
 8020924:	89a3      	ldrh	r3, [r4, #12]
 8020926:	071a      	lsls	r2, r3, #28
 8020928:	d501      	bpl.n	802092e <__swbuf_r+0x20>
 802092a:	6923      	ldr	r3, [r4, #16]
 802092c:	b943      	cbnz	r3, 8020940 <__swbuf_r+0x32>
 802092e:	4621      	mov	r1, r4
 8020930:	4628      	mov	r0, r5
 8020932:	f000 f82b 	bl	802098c <__swsetup_r>
 8020936:	b118      	cbz	r0, 8020940 <__swbuf_r+0x32>
 8020938:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 802093c:	4638      	mov	r0, r7
 802093e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020940:	6823      	ldr	r3, [r4, #0]
 8020942:	6922      	ldr	r2, [r4, #16]
 8020944:	1a98      	subs	r0, r3, r2
 8020946:	6963      	ldr	r3, [r4, #20]
 8020948:	b2f6      	uxtb	r6, r6
 802094a:	4283      	cmp	r3, r0
 802094c:	4637      	mov	r7, r6
 802094e:	dc05      	bgt.n	802095c <__swbuf_r+0x4e>
 8020950:	4621      	mov	r1, r4
 8020952:	4628      	mov	r0, r5
 8020954:	f000 fdd2 	bl	80214fc <_fflush_r>
 8020958:	2800      	cmp	r0, #0
 802095a:	d1ed      	bne.n	8020938 <__swbuf_r+0x2a>
 802095c:	68a3      	ldr	r3, [r4, #8]
 802095e:	3b01      	subs	r3, #1
 8020960:	60a3      	str	r3, [r4, #8]
 8020962:	6823      	ldr	r3, [r4, #0]
 8020964:	1c5a      	adds	r2, r3, #1
 8020966:	6022      	str	r2, [r4, #0]
 8020968:	701e      	strb	r6, [r3, #0]
 802096a:	6962      	ldr	r2, [r4, #20]
 802096c:	1c43      	adds	r3, r0, #1
 802096e:	429a      	cmp	r2, r3
 8020970:	d004      	beq.n	802097c <__swbuf_r+0x6e>
 8020972:	89a3      	ldrh	r3, [r4, #12]
 8020974:	07db      	lsls	r3, r3, #31
 8020976:	d5e1      	bpl.n	802093c <__swbuf_r+0x2e>
 8020978:	2e0a      	cmp	r6, #10
 802097a:	d1df      	bne.n	802093c <__swbuf_r+0x2e>
 802097c:	4621      	mov	r1, r4
 802097e:	4628      	mov	r0, r5
 8020980:	f000 fdbc 	bl	80214fc <_fflush_r>
 8020984:	2800      	cmp	r0, #0
 8020986:	d0d9      	beq.n	802093c <__swbuf_r+0x2e>
 8020988:	e7d6      	b.n	8020938 <__swbuf_r+0x2a>
	...

0802098c <__swsetup_r>:
 802098c:	b538      	push	{r3, r4, r5, lr}
 802098e:	4b29      	ldr	r3, [pc, #164]	@ (8020a34 <__swsetup_r+0xa8>)
 8020990:	4605      	mov	r5, r0
 8020992:	6818      	ldr	r0, [r3, #0]
 8020994:	460c      	mov	r4, r1
 8020996:	b118      	cbz	r0, 80209a0 <__swsetup_r+0x14>
 8020998:	6a03      	ldr	r3, [r0, #32]
 802099a:	b90b      	cbnz	r3, 80209a0 <__swsetup_r+0x14>
 802099c:	f7ff fec6 	bl	802072c <__sinit>
 80209a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80209a4:	0719      	lsls	r1, r3, #28
 80209a6:	d422      	bmi.n	80209ee <__swsetup_r+0x62>
 80209a8:	06da      	lsls	r2, r3, #27
 80209aa:	d407      	bmi.n	80209bc <__swsetup_r+0x30>
 80209ac:	2209      	movs	r2, #9
 80209ae:	602a      	str	r2, [r5, #0]
 80209b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80209b4:	81a3      	strh	r3, [r4, #12]
 80209b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80209ba:	e033      	b.n	8020a24 <__swsetup_r+0x98>
 80209bc:	0758      	lsls	r0, r3, #29
 80209be:	d512      	bpl.n	80209e6 <__swsetup_r+0x5a>
 80209c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80209c2:	b141      	cbz	r1, 80209d6 <__swsetup_r+0x4a>
 80209c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80209c8:	4299      	cmp	r1, r3
 80209ca:	d002      	beq.n	80209d2 <__swsetup_r+0x46>
 80209cc:	4628      	mov	r0, r5
 80209ce:	f000 f943 	bl	8020c58 <_free_r>
 80209d2:	2300      	movs	r3, #0
 80209d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80209d6:	89a3      	ldrh	r3, [r4, #12]
 80209d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80209dc:	81a3      	strh	r3, [r4, #12]
 80209de:	2300      	movs	r3, #0
 80209e0:	6063      	str	r3, [r4, #4]
 80209e2:	6923      	ldr	r3, [r4, #16]
 80209e4:	6023      	str	r3, [r4, #0]
 80209e6:	89a3      	ldrh	r3, [r4, #12]
 80209e8:	f043 0308 	orr.w	r3, r3, #8
 80209ec:	81a3      	strh	r3, [r4, #12]
 80209ee:	6923      	ldr	r3, [r4, #16]
 80209f0:	b94b      	cbnz	r3, 8020a06 <__swsetup_r+0x7a>
 80209f2:	89a3      	ldrh	r3, [r4, #12]
 80209f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80209f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80209fc:	d003      	beq.n	8020a06 <__swsetup_r+0x7a>
 80209fe:	4621      	mov	r1, r4
 8020a00:	4628      	mov	r0, r5
 8020a02:	f000 fddb 	bl	80215bc <__smakebuf_r>
 8020a06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020a0a:	f013 0201 	ands.w	r2, r3, #1
 8020a0e:	d00a      	beq.n	8020a26 <__swsetup_r+0x9a>
 8020a10:	2200      	movs	r2, #0
 8020a12:	60a2      	str	r2, [r4, #8]
 8020a14:	6962      	ldr	r2, [r4, #20]
 8020a16:	4252      	negs	r2, r2
 8020a18:	61a2      	str	r2, [r4, #24]
 8020a1a:	6922      	ldr	r2, [r4, #16]
 8020a1c:	b942      	cbnz	r2, 8020a30 <__swsetup_r+0xa4>
 8020a1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8020a22:	d1c5      	bne.n	80209b0 <__swsetup_r+0x24>
 8020a24:	bd38      	pop	{r3, r4, r5, pc}
 8020a26:	0799      	lsls	r1, r3, #30
 8020a28:	bf58      	it	pl
 8020a2a:	6962      	ldrpl	r2, [r4, #20]
 8020a2c:	60a2      	str	r2, [r4, #8]
 8020a2e:	e7f4      	b.n	8020a1a <__swsetup_r+0x8e>
 8020a30:	2000      	movs	r0, #0
 8020a32:	e7f7      	b.n	8020a24 <__swsetup_r+0x98>
 8020a34:	20000080 	.word	0x20000080

08020a38 <memcmp>:
 8020a38:	b510      	push	{r4, lr}
 8020a3a:	3901      	subs	r1, #1
 8020a3c:	4402      	add	r2, r0
 8020a3e:	4290      	cmp	r0, r2
 8020a40:	d101      	bne.n	8020a46 <memcmp+0xe>
 8020a42:	2000      	movs	r0, #0
 8020a44:	e005      	b.n	8020a52 <memcmp+0x1a>
 8020a46:	7803      	ldrb	r3, [r0, #0]
 8020a48:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8020a4c:	42a3      	cmp	r3, r4
 8020a4e:	d001      	beq.n	8020a54 <memcmp+0x1c>
 8020a50:	1b18      	subs	r0, r3, r4
 8020a52:	bd10      	pop	{r4, pc}
 8020a54:	3001      	adds	r0, #1
 8020a56:	e7f2      	b.n	8020a3e <memcmp+0x6>

08020a58 <memset>:
 8020a58:	4402      	add	r2, r0
 8020a5a:	4603      	mov	r3, r0
 8020a5c:	4293      	cmp	r3, r2
 8020a5e:	d100      	bne.n	8020a62 <memset+0xa>
 8020a60:	4770      	bx	lr
 8020a62:	f803 1b01 	strb.w	r1, [r3], #1
 8020a66:	e7f9      	b.n	8020a5c <memset+0x4>

08020a68 <_close_r>:
 8020a68:	b538      	push	{r3, r4, r5, lr}
 8020a6a:	4d06      	ldr	r5, [pc, #24]	@ (8020a84 <_close_r+0x1c>)
 8020a6c:	2300      	movs	r3, #0
 8020a6e:	4604      	mov	r4, r0
 8020a70:	4608      	mov	r0, r1
 8020a72:	602b      	str	r3, [r5, #0]
 8020a74:	f7e0 ffbe 	bl	80019f4 <_close>
 8020a78:	1c43      	adds	r3, r0, #1
 8020a7a:	d102      	bne.n	8020a82 <_close_r+0x1a>
 8020a7c:	682b      	ldr	r3, [r5, #0]
 8020a7e:	b103      	cbz	r3, 8020a82 <_close_r+0x1a>
 8020a80:	6023      	str	r3, [r4, #0]
 8020a82:	bd38      	pop	{r3, r4, r5, pc}
 8020a84:	2002d980 	.word	0x2002d980

08020a88 <_reclaim_reent>:
 8020a88:	4b2d      	ldr	r3, [pc, #180]	@ (8020b40 <_reclaim_reent+0xb8>)
 8020a8a:	681b      	ldr	r3, [r3, #0]
 8020a8c:	4283      	cmp	r3, r0
 8020a8e:	b570      	push	{r4, r5, r6, lr}
 8020a90:	4604      	mov	r4, r0
 8020a92:	d053      	beq.n	8020b3c <_reclaim_reent+0xb4>
 8020a94:	69c3      	ldr	r3, [r0, #28]
 8020a96:	b31b      	cbz	r3, 8020ae0 <_reclaim_reent+0x58>
 8020a98:	68db      	ldr	r3, [r3, #12]
 8020a9a:	b163      	cbz	r3, 8020ab6 <_reclaim_reent+0x2e>
 8020a9c:	2500      	movs	r5, #0
 8020a9e:	69e3      	ldr	r3, [r4, #28]
 8020aa0:	68db      	ldr	r3, [r3, #12]
 8020aa2:	5959      	ldr	r1, [r3, r5]
 8020aa4:	b9b1      	cbnz	r1, 8020ad4 <_reclaim_reent+0x4c>
 8020aa6:	3504      	adds	r5, #4
 8020aa8:	2d80      	cmp	r5, #128	@ 0x80
 8020aaa:	d1f8      	bne.n	8020a9e <_reclaim_reent+0x16>
 8020aac:	69e3      	ldr	r3, [r4, #28]
 8020aae:	4620      	mov	r0, r4
 8020ab0:	68d9      	ldr	r1, [r3, #12]
 8020ab2:	f000 f8d1 	bl	8020c58 <_free_r>
 8020ab6:	69e3      	ldr	r3, [r4, #28]
 8020ab8:	6819      	ldr	r1, [r3, #0]
 8020aba:	b111      	cbz	r1, 8020ac2 <_reclaim_reent+0x3a>
 8020abc:	4620      	mov	r0, r4
 8020abe:	f000 f8cb 	bl	8020c58 <_free_r>
 8020ac2:	69e3      	ldr	r3, [r4, #28]
 8020ac4:	689d      	ldr	r5, [r3, #8]
 8020ac6:	b15d      	cbz	r5, 8020ae0 <_reclaim_reent+0x58>
 8020ac8:	4629      	mov	r1, r5
 8020aca:	4620      	mov	r0, r4
 8020acc:	682d      	ldr	r5, [r5, #0]
 8020ace:	f000 f8c3 	bl	8020c58 <_free_r>
 8020ad2:	e7f8      	b.n	8020ac6 <_reclaim_reent+0x3e>
 8020ad4:	680e      	ldr	r6, [r1, #0]
 8020ad6:	4620      	mov	r0, r4
 8020ad8:	f000 f8be 	bl	8020c58 <_free_r>
 8020adc:	4631      	mov	r1, r6
 8020ade:	e7e1      	b.n	8020aa4 <_reclaim_reent+0x1c>
 8020ae0:	6961      	ldr	r1, [r4, #20]
 8020ae2:	b111      	cbz	r1, 8020aea <_reclaim_reent+0x62>
 8020ae4:	4620      	mov	r0, r4
 8020ae6:	f000 f8b7 	bl	8020c58 <_free_r>
 8020aea:	69e1      	ldr	r1, [r4, #28]
 8020aec:	b111      	cbz	r1, 8020af4 <_reclaim_reent+0x6c>
 8020aee:	4620      	mov	r0, r4
 8020af0:	f000 f8b2 	bl	8020c58 <_free_r>
 8020af4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8020af6:	b111      	cbz	r1, 8020afe <_reclaim_reent+0x76>
 8020af8:	4620      	mov	r0, r4
 8020afa:	f000 f8ad 	bl	8020c58 <_free_r>
 8020afe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8020b00:	b111      	cbz	r1, 8020b08 <_reclaim_reent+0x80>
 8020b02:	4620      	mov	r0, r4
 8020b04:	f000 f8a8 	bl	8020c58 <_free_r>
 8020b08:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8020b0a:	b111      	cbz	r1, 8020b12 <_reclaim_reent+0x8a>
 8020b0c:	4620      	mov	r0, r4
 8020b0e:	f000 f8a3 	bl	8020c58 <_free_r>
 8020b12:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8020b14:	b111      	cbz	r1, 8020b1c <_reclaim_reent+0x94>
 8020b16:	4620      	mov	r0, r4
 8020b18:	f000 f89e 	bl	8020c58 <_free_r>
 8020b1c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8020b1e:	b111      	cbz	r1, 8020b26 <_reclaim_reent+0x9e>
 8020b20:	4620      	mov	r0, r4
 8020b22:	f000 f899 	bl	8020c58 <_free_r>
 8020b26:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8020b28:	b111      	cbz	r1, 8020b30 <_reclaim_reent+0xa8>
 8020b2a:	4620      	mov	r0, r4
 8020b2c:	f000 f894 	bl	8020c58 <_free_r>
 8020b30:	6a23      	ldr	r3, [r4, #32]
 8020b32:	b11b      	cbz	r3, 8020b3c <_reclaim_reent+0xb4>
 8020b34:	4620      	mov	r0, r4
 8020b36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8020b3a:	4718      	bx	r3
 8020b3c:	bd70      	pop	{r4, r5, r6, pc}
 8020b3e:	bf00      	nop
 8020b40:	20000080 	.word	0x20000080

08020b44 <_lseek_r>:
 8020b44:	b538      	push	{r3, r4, r5, lr}
 8020b46:	4d07      	ldr	r5, [pc, #28]	@ (8020b64 <_lseek_r+0x20>)
 8020b48:	4604      	mov	r4, r0
 8020b4a:	4608      	mov	r0, r1
 8020b4c:	4611      	mov	r1, r2
 8020b4e:	2200      	movs	r2, #0
 8020b50:	602a      	str	r2, [r5, #0]
 8020b52:	461a      	mov	r2, r3
 8020b54:	f7e0 ff75 	bl	8001a42 <_lseek>
 8020b58:	1c43      	adds	r3, r0, #1
 8020b5a:	d102      	bne.n	8020b62 <_lseek_r+0x1e>
 8020b5c:	682b      	ldr	r3, [r5, #0]
 8020b5e:	b103      	cbz	r3, 8020b62 <_lseek_r+0x1e>
 8020b60:	6023      	str	r3, [r4, #0]
 8020b62:	bd38      	pop	{r3, r4, r5, pc}
 8020b64:	2002d980 	.word	0x2002d980

08020b68 <_read_r>:
 8020b68:	b538      	push	{r3, r4, r5, lr}
 8020b6a:	4d07      	ldr	r5, [pc, #28]	@ (8020b88 <_read_r+0x20>)
 8020b6c:	4604      	mov	r4, r0
 8020b6e:	4608      	mov	r0, r1
 8020b70:	4611      	mov	r1, r2
 8020b72:	2200      	movs	r2, #0
 8020b74:	602a      	str	r2, [r5, #0]
 8020b76:	461a      	mov	r2, r3
 8020b78:	f7e0 ff1f 	bl	80019ba <_read>
 8020b7c:	1c43      	adds	r3, r0, #1
 8020b7e:	d102      	bne.n	8020b86 <_read_r+0x1e>
 8020b80:	682b      	ldr	r3, [r5, #0]
 8020b82:	b103      	cbz	r3, 8020b86 <_read_r+0x1e>
 8020b84:	6023      	str	r3, [r4, #0]
 8020b86:	bd38      	pop	{r3, r4, r5, pc}
 8020b88:	2002d980 	.word	0x2002d980

08020b8c <_write_r>:
 8020b8c:	b538      	push	{r3, r4, r5, lr}
 8020b8e:	4d07      	ldr	r5, [pc, #28]	@ (8020bac <_write_r+0x20>)
 8020b90:	4604      	mov	r4, r0
 8020b92:	4608      	mov	r0, r1
 8020b94:	4611      	mov	r1, r2
 8020b96:	2200      	movs	r2, #0
 8020b98:	602a      	str	r2, [r5, #0]
 8020b9a:	461a      	mov	r2, r3
 8020b9c:	f7e0 fa7e 	bl	800109c <_write>
 8020ba0:	1c43      	adds	r3, r0, #1
 8020ba2:	d102      	bne.n	8020baa <_write_r+0x1e>
 8020ba4:	682b      	ldr	r3, [r5, #0]
 8020ba6:	b103      	cbz	r3, 8020baa <_write_r+0x1e>
 8020ba8:	6023      	str	r3, [r4, #0]
 8020baa:	bd38      	pop	{r3, r4, r5, pc}
 8020bac:	2002d980 	.word	0x2002d980

08020bb0 <__libc_init_array>:
 8020bb0:	b570      	push	{r4, r5, r6, lr}
 8020bb2:	4d0d      	ldr	r5, [pc, #52]	@ (8020be8 <__libc_init_array+0x38>)
 8020bb4:	4c0d      	ldr	r4, [pc, #52]	@ (8020bec <__libc_init_array+0x3c>)
 8020bb6:	1b64      	subs	r4, r4, r5
 8020bb8:	10a4      	asrs	r4, r4, #2
 8020bba:	2600      	movs	r6, #0
 8020bbc:	42a6      	cmp	r6, r4
 8020bbe:	d109      	bne.n	8020bd4 <__libc_init_array+0x24>
 8020bc0:	4d0b      	ldr	r5, [pc, #44]	@ (8020bf0 <__libc_init_array+0x40>)
 8020bc2:	4c0c      	ldr	r4, [pc, #48]	@ (8020bf4 <__libc_init_array+0x44>)
 8020bc4:	f000 fde8 	bl	8021798 <_init>
 8020bc8:	1b64      	subs	r4, r4, r5
 8020bca:	10a4      	asrs	r4, r4, #2
 8020bcc:	2600      	movs	r6, #0
 8020bce:	42a6      	cmp	r6, r4
 8020bd0:	d105      	bne.n	8020bde <__libc_init_array+0x2e>
 8020bd2:	bd70      	pop	{r4, r5, r6, pc}
 8020bd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8020bd8:	4798      	blx	r3
 8020bda:	3601      	adds	r6, #1
 8020bdc:	e7ee      	b.n	8020bbc <__libc_init_array+0xc>
 8020bde:	f855 3b04 	ldr.w	r3, [r5], #4
 8020be2:	4798      	blx	r3
 8020be4:	3601      	adds	r6, #1
 8020be6:	e7f2      	b.n	8020bce <__libc_init_array+0x1e>
 8020be8:	0802697c 	.word	0x0802697c
 8020bec:	0802697c 	.word	0x0802697c
 8020bf0:	0802697c 	.word	0x0802697c
 8020bf4:	08026980 	.word	0x08026980

08020bf8 <__retarget_lock_init_recursive>:
 8020bf8:	4770      	bx	lr

08020bfa <__retarget_lock_acquire_recursive>:
 8020bfa:	4770      	bx	lr

08020bfc <__retarget_lock_release_recursive>:
 8020bfc:	4770      	bx	lr

08020bfe <memcpy>:
 8020bfe:	440a      	add	r2, r1
 8020c00:	4291      	cmp	r1, r2
 8020c02:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8020c06:	d100      	bne.n	8020c0a <memcpy+0xc>
 8020c08:	4770      	bx	lr
 8020c0a:	b510      	push	{r4, lr}
 8020c0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020c10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020c14:	4291      	cmp	r1, r2
 8020c16:	d1f9      	bne.n	8020c0c <memcpy+0xe>
 8020c18:	bd10      	pop	{r4, pc}
	...

08020c1c <__assert_func>:
 8020c1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020c1e:	4614      	mov	r4, r2
 8020c20:	461a      	mov	r2, r3
 8020c22:	4b09      	ldr	r3, [pc, #36]	@ (8020c48 <__assert_func+0x2c>)
 8020c24:	681b      	ldr	r3, [r3, #0]
 8020c26:	4605      	mov	r5, r0
 8020c28:	68d8      	ldr	r0, [r3, #12]
 8020c2a:	b14c      	cbz	r4, 8020c40 <__assert_func+0x24>
 8020c2c:	4b07      	ldr	r3, [pc, #28]	@ (8020c4c <__assert_func+0x30>)
 8020c2e:	9100      	str	r1, [sp, #0]
 8020c30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020c34:	4906      	ldr	r1, [pc, #24]	@ (8020c50 <__assert_func+0x34>)
 8020c36:	462b      	mov	r3, r5
 8020c38:	f000 fc88 	bl	802154c <fiprintf>
 8020c3c:	f000 fd60 	bl	8021700 <abort>
 8020c40:	4b04      	ldr	r3, [pc, #16]	@ (8020c54 <__assert_func+0x38>)
 8020c42:	461c      	mov	r4, r3
 8020c44:	e7f3      	b.n	8020c2e <__assert_func+0x12>
 8020c46:	bf00      	nop
 8020c48:	20000080 	.word	0x20000080
 8020c4c:	08026905 	.word	0x08026905
 8020c50:	08026912 	.word	0x08026912
 8020c54:	08026940 	.word	0x08026940

08020c58 <_free_r>:
 8020c58:	b538      	push	{r3, r4, r5, lr}
 8020c5a:	4605      	mov	r5, r0
 8020c5c:	2900      	cmp	r1, #0
 8020c5e:	d041      	beq.n	8020ce4 <_free_r+0x8c>
 8020c60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020c64:	1f0c      	subs	r4, r1, #4
 8020c66:	2b00      	cmp	r3, #0
 8020c68:	bfb8      	it	lt
 8020c6a:	18e4      	addlt	r4, r4, r3
 8020c6c:	f000 f8e8 	bl	8020e40 <__malloc_lock>
 8020c70:	4a1d      	ldr	r2, [pc, #116]	@ (8020ce8 <_free_r+0x90>)
 8020c72:	6813      	ldr	r3, [r2, #0]
 8020c74:	b933      	cbnz	r3, 8020c84 <_free_r+0x2c>
 8020c76:	6063      	str	r3, [r4, #4]
 8020c78:	6014      	str	r4, [r2, #0]
 8020c7a:	4628      	mov	r0, r5
 8020c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020c80:	f000 b8e4 	b.w	8020e4c <__malloc_unlock>
 8020c84:	42a3      	cmp	r3, r4
 8020c86:	d908      	bls.n	8020c9a <_free_r+0x42>
 8020c88:	6820      	ldr	r0, [r4, #0]
 8020c8a:	1821      	adds	r1, r4, r0
 8020c8c:	428b      	cmp	r3, r1
 8020c8e:	bf01      	itttt	eq
 8020c90:	6819      	ldreq	r1, [r3, #0]
 8020c92:	685b      	ldreq	r3, [r3, #4]
 8020c94:	1809      	addeq	r1, r1, r0
 8020c96:	6021      	streq	r1, [r4, #0]
 8020c98:	e7ed      	b.n	8020c76 <_free_r+0x1e>
 8020c9a:	461a      	mov	r2, r3
 8020c9c:	685b      	ldr	r3, [r3, #4]
 8020c9e:	b10b      	cbz	r3, 8020ca4 <_free_r+0x4c>
 8020ca0:	42a3      	cmp	r3, r4
 8020ca2:	d9fa      	bls.n	8020c9a <_free_r+0x42>
 8020ca4:	6811      	ldr	r1, [r2, #0]
 8020ca6:	1850      	adds	r0, r2, r1
 8020ca8:	42a0      	cmp	r0, r4
 8020caa:	d10b      	bne.n	8020cc4 <_free_r+0x6c>
 8020cac:	6820      	ldr	r0, [r4, #0]
 8020cae:	4401      	add	r1, r0
 8020cb0:	1850      	adds	r0, r2, r1
 8020cb2:	4283      	cmp	r3, r0
 8020cb4:	6011      	str	r1, [r2, #0]
 8020cb6:	d1e0      	bne.n	8020c7a <_free_r+0x22>
 8020cb8:	6818      	ldr	r0, [r3, #0]
 8020cba:	685b      	ldr	r3, [r3, #4]
 8020cbc:	6053      	str	r3, [r2, #4]
 8020cbe:	4408      	add	r0, r1
 8020cc0:	6010      	str	r0, [r2, #0]
 8020cc2:	e7da      	b.n	8020c7a <_free_r+0x22>
 8020cc4:	d902      	bls.n	8020ccc <_free_r+0x74>
 8020cc6:	230c      	movs	r3, #12
 8020cc8:	602b      	str	r3, [r5, #0]
 8020cca:	e7d6      	b.n	8020c7a <_free_r+0x22>
 8020ccc:	6820      	ldr	r0, [r4, #0]
 8020cce:	1821      	adds	r1, r4, r0
 8020cd0:	428b      	cmp	r3, r1
 8020cd2:	bf04      	itt	eq
 8020cd4:	6819      	ldreq	r1, [r3, #0]
 8020cd6:	685b      	ldreq	r3, [r3, #4]
 8020cd8:	6063      	str	r3, [r4, #4]
 8020cda:	bf04      	itt	eq
 8020cdc:	1809      	addeq	r1, r1, r0
 8020cde:	6021      	streq	r1, [r4, #0]
 8020ce0:	6054      	str	r4, [r2, #4]
 8020ce2:	e7ca      	b.n	8020c7a <_free_r+0x22>
 8020ce4:	bd38      	pop	{r3, r4, r5, pc}
 8020ce6:	bf00      	nop
 8020ce8:	2002d98c 	.word	0x2002d98c

08020cec <malloc>:
 8020cec:	4b02      	ldr	r3, [pc, #8]	@ (8020cf8 <malloc+0xc>)
 8020cee:	4601      	mov	r1, r0
 8020cf0:	6818      	ldr	r0, [r3, #0]
 8020cf2:	f000 b825 	b.w	8020d40 <_malloc_r>
 8020cf6:	bf00      	nop
 8020cf8:	20000080 	.word	0x20000080

08020cfc <sbrk_aligned>:
 8020cfc:	b570      	push	{r4, r5, r6, lr}
 8020cfe:	4e0f      	ldr	r6, [pc, #60]	@ (8020d3c <sbrk_aligned+0x40>)
 8020d00:	460c      	mov	r4, r1
 8020d02:	6831      	ldr	r1, [r6, #0]
 8020d04:	4605      	mov	r5, r0
 8020d06:	b911      	cbnz	r1, 8020d0e <sbrk_aligned+0x12>
 8020d08:	f000 fcea 	bl	80216e0 <_sbrk_r>
 8020d0c:	6030      	str	r0, [r6, #0]
 8020d0e:	4621      	mov	r1, r4
 8020d10:	4628      	mov	r0, r5
 8020d12:	f000 fce5 	bl	80216e0 <_sbrk_r>
 8020d16:	1c43      	adds	r3, r0, #1
 8020d18:	d103      	bne.n	8020d22 <sbrk_aligned+0x26>
 8020d1a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8020d1e:	4620      	mov	r0, r4
 8020d20:	bd70      	pop	{r4, r5, r6, pc}
 8020d22:	1cc4      	adds	r4, r0, #3
 8020d24:	f024 0403 	bic.w	r4, r4, #3
 8020d28:	42a0      	cmp	r0, r4
 8020d2a:	d0f8      	beq.n	8020d1e <sbrk_aligned+0x22>
 8020d2c:	1a21      	subs	r1, r4, r0
 8020d2e:	4628      	mov	r0, r5
 8020d30:	f000 fcd6 	bl	80216e0 <_sbrk_r>
 8020d34:	3001      	adds	r0, #1
 8020d36:	d1f2      	bne.n	8020d1e <sbrk_aligned+0x22>
 8020d38:	e7ef      	b.n	8020d1a <sbrk_aligned+0x1e>
 8020d3a:	bf00      	nop
 8020d3c:	2002d988 	.word	0x2002d988

08020d40 <_malloc_r>:
 8020d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020d44:	1ccd      	adds	r5, r1, #3
 8020d46:	f025 0503 	bic.w	r5, r5, #3
 8020d4a:	3508      	adds	r5, #8
 8020d4c:	2d0c      	cmp	r5, #12
 8020d4e:	bf38      	it	cc
 8020d50:	250c      	movcc	r5, #12
 8020d52:	2d00      	cmp	r5, #0
 8020d54:	4606      	mov	r6, r0
 8020d56:	db01      	blt.n	8020d5c <_malloc_r+0x1c>
 8020d58:	42a9      	cmp	r1, r5
 8020d5a:	d904      	bls.n	8020d66 <_malloc_r+0x26>
 8020d5c:	230c      	movs	r3, #12
 8020d5e:	6033      	str	r3, [r6, #0]
 8020d60:	2000      	movs	r0, #0
 8020d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020d66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8020e3c <_malloc_r+0xfc>
 8020d6a:	f000 f869 	bl	8020e40 <__malloc_lock>
 8020d6e:	f8d8 3000 	ldr.w	r3, [r8]
 8020d72:	461c      	mov	r4, r3
 8020d74:	bb44      	cbnz	r4, 8020dc8 <_malloc_r+0x88>
 8020d76:	4629      	mov	r1, r5
 8020d78:	4630      	mov	r0, r6
 8020d7a:	f7ff ffbf 	bl	8020cfc <sbrk_aligned>
 8020d7e:	1c43      	adds	r3, r0, #1
 8020d80:	4604      	mov	r4, r0
 8020d82:	d158      	bne.n	8020e36 <_malloc_r+0xf6>
 8020d84:	f8d8 4000 	ldr.w	r4, [r8]
 8020d88:	4627      	mov	r7, r4
 8020d8a:	2f00      	cmp	r7, #0
 8020d8c:	d143      	bne.n	8020e16 <_malloc_r+0xd6>
 8020d8e:	2c00      	cmp	r4, #0
 8020d90:	d04b      	beq.n	8020e2a <_malloc_r+0xea>
 8020d92:	6823      	ldr	r3, [r4, #0]
 8020d94:	4639      	mov	r1, r7
 8020d96:	4630      	mov	r0, r6
 8020d98:	eb04 0903 	add.w	r9, r4, r3
 8020d9c:	f000 fca0 	bl	80216e0 <_sbrk_r>
 8020da0:	4581      	cmp	r9, r0
 8020da2:	d142      	bne.n	8020e2a <_malloc_r+0xea>
 8020da4:	6821      	ldr	r1, [r4, #0]
 8020da6:	1a6d      	subs	r5, r5, r1
 8020da8:	4629      	mov	r1, r5
 8020daa:	4630      	mov	r0, r6
 8020dac:	f7ff ffa6 	bl	8020cfc <sbrk_aligned>
 8020db0:	3001      	adds	r0, #1
 8020db2:	d03a      	beq.n	8020e2a <_malloc_r+0xea>
 8020db4:	6823      	ldr	r3, [r4, #0]
 8020db6:	442b      	add	r3, r5
 8020db8:	6023      	str	r3, [r4, #0]
 8020dba:	f8d8 3000 	ldr.w	r3, [r8]
 8020dbe:	685a      	ldr	r2, [r3, #4]
 8020dc0:	bb62      	cbnz	r2, 8020e1c <_malloc_r+0xdc>
 8020dc2:	f8c8 7000 	str.w	r7, [r8]
 8020dc6:	e00f      	b.n	8020de8 <_malloc_r+0xa8>
 8020dc8:	6822      	ldr	r2, [r4, #0]
 8020dca:	1b52      	subs	r2, r2, r5
 8020dcc:	d420      	bmi.n	8020e10 <_malloc_r+0xd0>
 8020dce:	2a0b      	cmp	r2, #11
 8020dd0:	d917      	bls.n	8020e02 <_malloc_r+0xc2>
 8020dd2:	1961      	adds	r1, r4, r5
 8020dd4:	42a3      	cmp	r3, r4
 8020dd6:	6025      	str	r5, [r4, #0]
 8020dd8:	bf18      	it	ne
 8020dda:	6059      	strne	r1, [r3, #4]
 8020ddc:	6863      	ldr	r3, [r4, #4]
 8020dde:	bf08      	it	eq
 8020de0:	f8c8 1000 	streq.w	r1, [r8]
 8020de4:	5162      	str	r2, [r4, r5]
 8020de6:	604b      	str	r3, [r1, #4]
 8020de8:	4630      	mov	r0, r6
 8020dea:	f000 f82f 	bl	8020e4c <__malloc_unlock>
 8020dee:	f104 000b 	add.w	r0, r4, #11
 8020df2:	1d23      	adds	r3, r4, #4
 8020df4:	f020 0007 	bic.w	r0, r0, #7
 8020df8:	1ac2      	subs	r2, r0, r3
 8020dfa:	bf1c      	itt	ne
 8020dfc:	1a1b      	subne	r3, r3, r0
 8020dfe:	50a3      	strne	r3, [r4, r2]
 8020e00:	e7af      	b.n	8020d62 <_malloc_r+0x22>
 8020e02:	6862      	ldr	r2, [r4, #4]
 8020e04:	42a3      	cmp	r3, r4
 8020e06:	bf0c      	ite	eq
 8020e08:	f8c8 2000 	streq.w	r2, [r8]
 8020e0c:	605a      	strne	r2, [r3, #4]
 8020e0e:	e7eb      	b.n	8020de8 <_malloc_r+0xa8>
 8020e10:	4623      	mov	r3, r4
 8020e12:	6864      	ldr	r4, [r4, #4]
 8020e14:	e7ae      	b.n	8020d74 <_malloc_r+0x34>
 8020e16:	463c      	mov	r4, r7
 8020e18:	687f      	ldr	r7, [r7, #4]
 8020e1a:	e7b6      	b.n	8020d8a <_malloc_r+0x4a>
 8020e1c:	461a      	mov	r2, r3
 8020e1e:	685b      	ldr	r3, [r3, #4]
 8020e20:	42a3      	cmp	r3, r4
 8020e22:	d1fb      	bne.n	8020e1c <_malloc_r+0xdc>
 8020e24:	2300      	movs	r3, #0
 8020e26:	6053      	str	r3, [r2, #4]
 8020e28:	e7de      	b.n	8020de8 <_malloc_r+0xa8>
 8020e2a:	230c      	movs	r3, #12
 8020e2c:	6033      	str	r3, [r6, #0]
 8020e2e:	4630      	mov	r0, r6
 8020e30:	f000 f80c 	bl	8020e4c <__malloc_unlock>
 8020e34:	e794      	b.n	8020d60 <_malloc_r+0x20>
 8020e36:	6005      	str	r5, [r0, #0]
 8020e38:	e7d6      	b.n	8020de8 <_malloc_r+0xa8>
 8020e3a:	bf00      	nop
 8020e3c:	2002d98c 	.word	0x2002d98c

08020e40 <__malloc_lock>:
 8020e40:	4801      	ldr	r0, [pc, #4]	@ (8020e48 <__malloc_lock+0x8>)
 8020e42:	f7ff beda 	b.w	8020bfa <__retarget_lock_acquire_recursive>
 8020e46:	bf00      	nop
 8020e48:	2002d984 	.word	0x2002d984

08020e4c <__malloc_unlock>:
 8020e4c:	4801      	ldr	r0, [pc, #4]	@ (8020e54 <__malloc_unlock+0x8>)
 8020e4e:	f7ff bed5 	b.w	8020bfc <__retarget_lock_release_recursive>
 8020e52:	bf00      	nop
 8020e54:	2002d984 	.word	0x2002d984

08020e58 <__sfputc_r>:
 8020e58:	6893      	ldr	r3, [r2, #8]
 8020e5a:	3b01      	subs	r3, #1
 8020e5c:	2b00      	cmp	r3, #0
 8020e5e:	b410      	push	{r4}
 8020e60:	6093      	str	r3, [r2, #8]
 8020e62:	da08      	bge.n	8020e76 <__sfputc_r+0x1e>
 8020e64:	6994      	ldr	r4, [r2, #24]
 8020e66:	42a3      	cmp	r3, r4
 8020e68:	db01      	blt.n	8020e6e <__sfputc_r+0x16>
 8020e6a:	290a      	cmp	r1, #10
 8020e6c:	d103      	bne.n	8020e76 <__sfputc_r+0x1e>
 8020e6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020e72:	f7ff bd4c 	b.w	802090e <__swbuf_r>
 8020e76:	6813      	ldr	r3, [r2, #0]
 8020e78:	1c58      	adds	r0, r3, #1
 8020e7a:	6010      	str	r0, [r2, #0]
 8020e7c:	7019      	strb	r1, [r3, #0]
 8020e7e:	4608      	mov	r0, r1
 8020e80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020e84:	4770      	bx	lr

08020e86 <__sfputs_r>:
 8020e86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020e88:	4606      	mov	r6, r0
 8020e8a:	460f      	mov	r7, r1
 8020e8c:	4614      	mov	r4, r2
 8020e8e:	18d5      	adds	r5, r2, r3
 8020e90:	42ac      	cmp	r4, r5
 8020e92:	d101      	bne.n	8020e98 <__sfputs_r+0x12>
 8020e94:	2000      	movs	r0, #0
 8020e96:	e007      	b.n	8020ea8 <__sfputs_r+0x22>
 8020e98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020e9c:	463a      	mov	r2, r7
 8020e9e:	4630      	mov	r0, r6
 8020ea0:	f7ff ffda 	bl	8020e58 <__sfputc_r>
 8020ea4:	1c43      	adds	r3, r0, #1
 8020ea6:	d1f3      	bne.n	8020e90 <__sfputs_r+0xa>
 8020ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020eac <_vfiprintf_r>:
 8020eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020eb0:	460d      	mov	r5, r1
 8020eb2:	b09d      	sub	sp, #116	@ 0x74
 8020eb4:	4614      	mov	r4, r2
 8020eb6:	4698      	mov	r8, r3
 8020eb8:	4606      	mov	r6, r0
 8020eba:	b118      	cbz	r0, 8020ec4 <_vfiprintf_r+0x18>
 8020ebc:	6a03      	ldr	r3, [r0, #32]
 8020ebe:	b90b      	cbnz	r3, 8020ec4 <_vfiprintf_r+0x18>
 8020ec0:	f7ff fc34 	bl	802072c <__sinit>
 8020ec4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020ec6:	07d9      	lsls	r1, r3, #31
 8020ec8:	d405      	bmi.n	8020ed6 <_vfiprintf_r+0x2a>
 8020eca:	89ab      	ldrh	r3, [r5, #12]
 8020ecc:	059a      	lsls	r2, r3, #22
 8020ece:	d402      	bmi.n	8020ed6 <_vfiprintf_r+0x2a>
 8020ed0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020ed2:	f7ff fe92 	bl	8020bfa <__retarget_lock_acquire_recursive>
 8020ed6:	89ab      	ldrh	r3, [r5, #12]
 8020ed8:	071b      	lsls	r3, r3, #28
 8020eda:	d501      	bpl.n	8020ee0 <_vfiprintf_r+0x34>
 8020edc:	692b      	ldr	r3, [r5, #16]
 8020ede:	b99b      	cbnz	r3, 8020f08 <_vfiprintf_r+0x5c>
 8020ee0:	4629      	mov	r1, r5
 8020ee2:	4630      	mov	r0, r6
 8020ee4:	f7ff fd52 	bl	802098c <__swsetup_r>
 8020ee8:	b170      	cbz	r0, 8020f08 <_vfiprintf_r+0x5c>
 8020eea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020eec:	07dc      	lsls	r4, r3, #31
 8020eee:	d504      	bpl.n	8020efa <_vfiprintf_r+0x4e>
 8020ef0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020ef4:	b01d      	add	sp, #116	@ 0x74
 8020ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020efa:	89ab      	ldrh	r3, [r5, #12]
 8020efc:	0598      	lsls	r0, r3, #22
 8020efe:	d4f7      	bmi.n	8020ef0 <_vfiprintf_r+0x44>
 8020f00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020f02:	f7ff fe7b 	bl	8020bfc <__retarget_lock_release_recursive>
 8020f06:	e7f3      	b.n	8020ef0 <_vfiprintf_r+0x44>
 8020f08:	2300      	movs	r3, #0
 8020f0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8020f0c:	2320      	movs	r3, #32
 8020f0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8020f12:	f8cd 800c 	str.w	r8, [sp, #12]
 8020f16:	2330      	movs	r3, #48	@ 0x30
 8020f18:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80210c8 <_vfiprintf_r+0x21c>
 8020f1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8020f20:	f04f 0901 	mov.w	r9, #1
 8020f24:	4623      	mov	r3, r4
 8020f26:	469a      	mov	sl, r3
 8020f28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020f2c:	b10a      	cbz	r2, 8020f32 <_vfiprintf_r+0x86>
 8020f2e:	2a25      	cmp	r2, #37	@ 0x25
 8020f30:	d1f9      	bne.n	8020f26 <_vfiprintf_r+0x7a>
 8020f32:	ebba 0b04 	subs.w	fp, sl, r4
 8020f36:	d00b      	beq.n	8020f50 <_vfiprintf_r+0xa4>
 8020f38:	465b      	mov	r3, fp
 8020f3a:	4622      	mov	r2, r4
 8020f3c:	4629      	mov	r1, r5
 8020f3e:	4630      	mov	r0, r6
 8020f40:	f7ff ffa1 	bl	8020e86 <__sfputs_r>
 8020f44:	3001      	adds	r0, #1
 8020f46:	f000 80a7 	beq.w	8021098 <_vfiprintf_r+0x1ec>
 8020f4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020f4c:	445a      	add	r2, fp
 8020f4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8020f50:	f89a 3000 	ldrb.w	r3, [sl]
 8020f54:	2b00      	cmp	r3, #0
 8020f56:	f000 809f 	beq.w	8021098 <_vfiprintf_r+0x1ec>
 8020f5a:	2300      	movs	r3, #0
 8020f5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8020f60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020f64:	f10a 0a01 	add.w	sl, sl, #1
 8020f68:	9304      	str	r3, [sp, #16]
 8020f6a:	9307      	str	r3, [sp, #28]
 8020f6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8020f70:	931a      	str	r3, [sp, #104]	@ 0x68
 8020f72:	4654      	mov	r4, sl
 8020f74:	2205      	movs	r2, #5
 8020f76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020f7a:	4853      	ldr	r0, [pc, #332]	@ (80210c8 <_vfiprintf_r+0x21c>)
 8020f7c:	f7df f948 	bl	8000210 <memchr>
 8020f80:	9a04      	ldr	r2, [sp, #16]
 8020f82:	b9d8      	cbnz	r0, 8020fbc <_vfiprintf_r+0x110>
 8020f84:	06d1      	lsls	r1, r2, #27
 8020f86:	bf44      	itt	mi
 8020f88:	2320      	movmi	r3, #32
 8020f8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020f8e:	0713      	lsls	r3, r2, #28
 8020f90:	bf44      	itt	mi
 8020f92:	232b      	movmi	r3, #43	@ 0x2b
 8020f94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020f98:	f89a 3000 	ldrb.w	r3, [sl]
 8020f9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8020f9e:	d015      	beq.n	8020fcc <_vfiprintf_r+0x120>
 8020fa0:	9a07      	ldr	r2, [sp, #28]
 8020fa2:	4654      	mov	r4, sl
 8020fa4:	2000      	movs	r0, #0
 8020fa6:	f04f 0c0a 	mov.w	ip, #10
 8020faa:	4621      	mov	r1, r4
 8020fac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020fb0:	3b30      	subs	r3, #48	@ 0x30
 8020fb2:	2b09      	cmp	r3, #9
 8020fb4:	d94b      	bls.n	802104e <_vfiprintf_r+0x1a2>
 8020fb6:	b1b0      	cbz	r0, 8020fe6 <_vfiprintf_r+0x13a>
 8020fb8:	9207      	str	r2, [sp, #28]
 8020fba:	e014      	b.n	8020fe6 <_vfiprintf_r+0x13a>
 8020fbc:	eba0 0308 	sub.w	r3, r0, r8
 8020fc0:	fa09 f303 	lsl.w	r3, r9, r3
 8020fc4:	4313      	orrs	r3, r2
 8020fc6:	9304      	str	r3, [sp, #16]
 8020fc8:	46a2      	mov	sl, r4
 8020fca:	e7d2      	b.n	8020f72 <_vfiprintf_r+0xc6>
 8020fcc:	9b03      	ldr	r3, [sp, #12]
 8020fce:	1d19      	adds	r1, r3, #4
 8020fd0:	681b      	ldr	r3, [r3, #0]
 8020fd2:	9103      	str	r1, [sp, #12]
 8020fd4:	2b00      	cmp	r3, #0
 8020fd6:	bfbb      	ittet	lt
 8020fd8:	425b      	neglt	r3, r3
 8020fda:	f042 0202 	orrlt.w	r2, r2, #2
 8020fde:	9307      	strge	r3, [sp, #28]
 8020fe0:	9307      	strlt	r3, [sp, #28]
 8020fe2:	bfb8      	it	lt
 8020fe4:	9204      	strlt	r2, [sp, #16]
 8020fe6:	7823      	ldrb	r3, [r4, #0]
 8020fe8:	2b2e      	cmp	r3, #46	@ 0x2e
 8020fea:	d10a      	bne.n	8021002 <_vfiprintf_r+0x156>
 8020fec:	7863      	ldrb	r3, [r4, #1]
 8020fee:	2b2a      	cmp	r3, #42	@ 0x2a
 8020ff0:	d132      	bne.n	8021058 <_vfiprintf_r+0x1ac>
 8020ff2:	9b03      	ldr	r3, [sp, #12]
 8020ff4:	1d1a      	adds	r2, r3, #4
 8020ff6:	681b      	ldr	r3, [r3, #0]
 8020ff8:	9203      	str	r2, [sp, #12]
 8020ffa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8020ffe:	3402      	adds	r4, #2
 8021000:	9305      	str	r3, [sp, #20]
 8021002:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80210d8 <_vfiprintf_r+0x22c>
 8021006:	7821      	ldrb	r1, [r4, #0]
 8021008:	2203      	movs	r2, #3
 802100a:	4650      	mov	r0, sl
 802100c:	f7df f900 	bl	8000210 <memchr>
 8021010:	b138      	cbz	r0, 8021022 <_vfiprintf_r+0x176>
 8021012:	9b04      	ldr	r3, [sp, #16]
 8021014:	eba0 000a 	sub.w	r0, r0, sl
 8021018:	2240      	movs	r2, #64	@ 0x40
 802101a:	4082      	lsls	r2, r0
 802101c:	4313      	orrs	r3, r2
 802101e:	3401      	adds	r4, #1
 8021020:	9304      	str	r3, [sp, #16]
 8021022:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021026:	4829      	ldr	r0, [pc, #164]	@ (80210cc <_vfiprintf_r+0x220>)
 8021028:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802102c:	2206      	movs	r2, #6
 802102e:	f7df f8ef 	bl	8000210 <memchr>
 8021032:	2800      	cmp	r0, #0
 8021034:	d03f      	beq.n	80210b6 <_vfiprintf_r+0x20a>
 8021036:	4b26      	ldr	r3, [pc, #152]	@ (80210d0 <_vfiprintf_r+0x224>)
 8021038:	bb1b      	cbnz	r3, 8021082 <_vfiprintf_r+0x1d6>
 802103a:	9b03      	ldr	r3, [sp, #12]
 802103c:	3307      	adds	r3, #7
 802103e:	f023 0307 	bic.w	r3, r3, #7
 8021042:	3308      	adds	r3, #8
 8021044:	9303      	str	r3, [sp, #12]
 8021046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021048:	443b      	add	r3, r7
 802104a:	9309      	str	r3, [sp, #36]	@ 0x24
 802104c:	e76a      	b.n	8020f24 <_vfiprintf_r+0x78>
 802104e:	fb0c 3202 	mla	r2, ip, r2, r3
 8021052:	460c      	mov	r4, r1
 8021054:	2001      	movs	r0, #1
 8021056:	e7a8      	b.n	8020faa <_vfiprintf_r+0xfe>
 8021058:	2300      	movs	r3, #0
 802105a:	3401      	adds	r4, #1
 802105c:	9305      	str	r3, [sp, #20]
 802105e:	4619      	mov	r1, r3
 8021060:	f04f 0c0a 	mov.w	ip, #10
 8021064:	4620      	mov	r0, r4
 8021066:	f810 2b01 	ldrb.w	r2, [r0], #1
 802106a:	3a30      	subs	r2, #48	@ 0x30
 802106c:	2a09      	cmp	r2, #9
 802106e:	d903      	bls.n	8021078 <_vfiprintf_r+0x1cc>
 8021070:	2b00      	cmp	r3, #0
 8021072:	d0c6      	beq.n	8021002 <_vfiprintf_r+0x156>
 8021074:	9105      	str	r1, [sp, #20]
 8021076:	e7c4      	b.n	8021002 <_vfiprintf_r+0x156>
 8021078:	fb0c 2101 	mla	r1, ip, r1, r2
 802107c:	4604      	mov	r4, r0
 802107e:	2301      	movs	r3, #1
 8021080:	e7f0      	b.n	8021064 <_vfiprintf_r+0x1b8>
 8021082:	ab03      	add	r3, sp, #12
 8021084:	9300      	str	r3, [sp, #0]
 8021086:	462a      	mov	r2, r5
 8021088:	4b12      	ldr	r3, [pc, #72]	@ (80210d4 <_vfiprintf_r+0x228>)
 802108a:	a904      	add	r1, sp, #16
 802108c:	4630      	mov	r0, r6
 802108e:	f3af 8000 	nop.w
 8021092:	4607      	mov	r7, r0
 8021094:	1c78      	adds	r0, r7, #1
 8021096:	d1d6      	bne.n	8021046 <_vfiprintf_r+0x19a>
 8021098:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802109a:	07d9      	lsls	r1, r3, #31
 802109c:	d405      	bmi.n	80210aa <_vfiprintf_r+0x1fe>
 802109e:	89ab      	ldrh	r3, [r5, #12]
 80210a0:	059a      	lsls	r2, r3, #22
 80210a2:	d402      	bmi.n	80210aa <_vfiprintf_r+0x1fe>
 80210a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80210a6:	f7ff fda9 	bl	8020bfc <__retarget_lock_release_recursive>
 80210aa:	89ab      	ldrh	r3, [r5, #12]
 80210ac:	065b      	lsls	r3, r3, #25
 80210ae:	f53f af1f 	bmi.w	8020ef0 <_vfiprintf_r+0x44>
 80210b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80210b4:	e71e      	b.n	8020ef4 <_vfiprintf_r+0x48>
 80210b6:	ab03      	add	r3, sp, #12
 80210b8:	9300      	str	r3, [sp, #0]
 80210ba:	462a      	mov	r2, r5
 80210bc:	4b05      	ldr	r3, [pc, #20]	@ (80210d4 <_vfiprintf_r+0x228>)
 80210be:	a904      	add	r1, sp, #16
 80210c0:	4630      	mov	r0, r6
 80210c2:	f000 f879 	bl	80211b8 <_printf_i>
 80210c6:	e7e4      	b.n	8021092 <_vfiprintf_r+0x1e6>
 80210c8:	08026941 	.word	0x08026941
 80210cc:	0802694b 	.word	0x0802694b
 80210d0:	00000000 	.word	0x00000000
 80210d4:	08020e87 	.word	0x08020e87
 80210d8:	08026947 	.word	0x08026947

080210dc <_printf_common>:
 80210dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80210e0:	4616      	mov	r6, r2
 80210e2:	4698      	mov	r8, r3
 80210e4:	688a      	ldr	r2, [r1, #8]
 80210e6:	690b      	ldr	r3, [r1, #16]
 80210e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80210ec:	4293      	cmp	r3, r2
 80210ee:	bfb8      	it	lt
 80210f0:	4613      	movlt	r3, r2
 80210f2:	6033      	str	r3, [r6, #0]
 80210f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80210f8:	4607      	mov	r7, r0
 80210fa:	460c      	mov	r4, r1
 80210fc:	b10a      	cbz	r2, 8021102 <_printf_common+0x26>
 80210fe:	3301      	adds	r3, #1
 8021100:	6033      	str	r3, [r6, #0]
 8021102:	6823      	ldr	r3, [r4, #0]
 8021104:	0699      	lsls	r1, r3, #26
 8021106:	bf42      	ittt	mi
 8021108:	6833      	ldrmi	r3, [r6, #0]
 802110a:	3302      	addmi	r3, #2
 802110c:	6033      	strmi	r3, [r6, #0]
 802110e:	6825      	ldr	r5, [r4, #0]
 8021110:	f015 0506 	ands.w	r5, r5, #6
 8021114:	d106      	bne.n	8021124 <_printf_common+0x48>
 8021116:	f104 0a19 	add.w	sl, r4, #25
 802111a:	68e3      	ldr	r3, [r4, #12]
 802111c:	6832      	ldr	r2, [r6, #0]
 802111e:	1a9b      	subs	r3, r3, r2
 8021120:	42ab      	cmp	r3, r5
 8021122:	dc26      	bgt.n	8021172 <_printf_common+0x96>
 8021124:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8021128:	6822      	ldr	r2, [r4, #0]
 802112a:	3b00      	subs	r3, #0
 802112c:	bf18      	it	ne
 802112e:	2301      	movne	r3, #1
 8021130:	0692      	lsls	r2, r2, #26
 8021132:	d42b      	bmi.n	802118c <_printf_common+0xb0>
 8021134:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8021138:	4641      	mov	r1, r8
 802113a:	4638      	mov	r0, r7
 802113c:	47c8      	blx	r9
 802113e:	3001      	adds	r0, #1
 8021140:	d01e      	beq.n	8021180 <_printf_common+0xa4>
 8021142:	6823      	ldr	r3, [r4, #0]
 8021144:	6922      	ldr	r2, [r4, #16]
 8021146:	f003 0306 	and.w	r3, r3, #6
 802114a:	2b04      	cmp	r3, #4
 802114c:	bf02      	ittt	eq
 802114e:	68e5      	ldreq	r5, [r4, #12]
 8021150:	6833      	ldreq	r3, [r6, #0]
 8021152:	1aed      	subeq	r5, r5, r3
 8021154:	68a3      	ldr	r3, [r4, #8]
 8021156:	bf0c      	ite	eq
 8021158:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802115c:	2500      	movne	r5, #0
 802115e:	4293      	cmp	r3, r2
 8021160:	bfc4      	itt	gt
 8021162:	1a9b      	subgt	r3, r3, r2
 8021164:	18ed      	addgt	r5, r5, r3
 8021166:	2600      	movs	r6, #0
 8021168:	341a      	adds	r4, #26
 802116a:	42b5      	cmp	r5, r6
 802116c:	d11a      	bne.n	80211a4 <_printf_common+0xc8>
 802116e:	2000      	movs	r0, #0
 8021170:	e008      	b.n	8021184 <_printf_common+0xa8>
 8021172:	2301      	movs	r3, #1
 8021174:	4652      	mov	r2, sl
 8021176:	4641      	mov	r1, r8
 8021178:	4638      	mov	r0, r7
 802117a:	47c8      	blx	r9
 802117c:	3001      	adds	r0, #1
 802117e:	d103      	bne.n	8021188 <_printf_common+0xac>
 8021180:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021188:	3501      	adds	r5, #1
 802118a:	e7c6      	b.n	802111a <_printf_common+0x3e>
 802118c:	18e1      	adds	r1, r4, r3
 802118e:	1c5a      	adds	r2, r3, #1
 8021190:	2030      	movs	r0, #48	@ 0x30
 8021192:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8021196:	4422      	add	r2, r4
 8021198:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802119c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80211a0:	3302      	adds	r3, #2
 80211a2:	e7c7      	b.n	8021134 <_printf_common+0x58>
 80211a4:	2301      	movs	r3, #1
 80211a6:	4622      	mov	r2, r4
 80211a8:	4641      	mov	r1, r8
 80211aa:	4638      	mov	r0, r7
 80211ac:	47c8      	blx	r9
 80211ae:	3001      	adds	r0, #1
 80211b0:	d0e6      	beq.n	8021180 <_printf_common+0xa4>
 80211b2:	3601      	adds	r6, #1
 80211b4:	e7d9      	b.n	802116a <_printf_common+0x8e>
	...

080211b8 <_printf_i>:
 80211b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80211bc:	7e0f      	ldrb	r7, [r1, #24]
 80211be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80211c0:	2f78      	cmp	r7, #120	@ 0x78
 80211c2:	4691      	mov	r9, r2
 80211c4:	4680      	mov	r8, r0
 80211c6:	460c      	mov	r4, r1
 80211c8:	469a      	mov	sl, r3
 80211ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80211ce:	d807      	bhi.n	80211e0 <_printf_i+0x28>
 80211d0:	2f62      	cmp	r7, #98	@ 0x62
 80211d2:	d80a      	bhi.n	80211ea <_printf_i+0x32>
 80211d4:	2f00      	cmp	r7, #0
 80211d6:	f000 80d1 	beq.w	802137c <_printf_i+0x1c4>
 80211da:	2f58      	cmp	r7, #88	@ 0x58
 80211dc:	f000 80b8 	beq.w	8021350 <_printf_i+0x198>
 80211e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80211e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80211e8:	e03a      	b.n	8021260 <_printf_i+0xa8>
 80211ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80211ee:	2b15      	cmp	r3, #21
 80211f0:	d8f6      	bhi.n	80211e0 <_printf_i+0x28>
 80211f2:	a101      	add	r1, pc, #4	@ (adr r1, 80211f8 <_printf_i+0x40>)
 80211f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80211f8:	08021251 	.word	0x08021251
 80211fc:	08021265 	.word	0x08021265
 8021200:	080211e1 	.word	0x080211e1
 8021204:	080211e1 	.word	0x080211e1
 8021208:	080211e1 	.word	0x080211e1
 802120c:	080211e1 	.word	0x080211e1
 8021210:	08021265 	.word	0x08021265
 8021214:	080211e1 	.word	0x080211e1
 8021218:	080211e1 	.word	0x080211e1
 802121c:	080211e1 	.word	0x080211e1
 8021220:	080211e1 	.word	0x080211e1
 8021224:	08021363 	.word	0x08021363
 8021228:	0802128f 	.word	0x0802128f
 802122c:	0802131d 	.word	0x0802131d
 8021230:	080211e1 	.word	0x080211e1
 8021234:	080211e1 	.word	0x080211e1
 8021238:	08021385 	.word	0x08021385
 802123c:	080211e1 	.word	0x080211e1
 8021240:	0802128f 	.word	0x0802128f
 8021244:	080211e1 	.word	0x080211e1
 8021248:	080211e1 	.word	0x080211e1
 802124c:	08021325 	.word	0x08021325
 8021250:	6833      	ldr	r3, [r6, #0]
 8021252:	1d1a      	adds	r2, r3, #4
 8021254:	681b      	ldr	r3, [r3, #0]
 8021256:	6032      	str	r2, [r6, #0]
 8021258:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802125c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8021260:	2301      	movs	r3, #1
 8021262:	e09c      	b.n	802139e <_printf_i+0x1e6>
 8021264:	6833      	ldr	r3, [r6, #0]
 8021266:	6820      	ldr	r0, [r4, #0]
 8021268:	1d19      	adds	r1, r3, #4
 802126a:	6031      	str	r1, [r6, #0]
 802126c:	0606      	lsls	r6, r0, #24
 802126e:	d501      	bpl.n	8021274 <_printf_i+0xbc>
 8021270:	681d      	ldr	r5, [r3, #0]
 8021272:	e003      	b.n	802127c <_printf_i+0xc4>
 8021274:	0645      	lsls	r5, r0, #25
 8021276:	d5fb      	bpl.n	8021270 <_printf_i+0xb8>
 8021278:	f9b3 5000 	ldrsh.w	r5, [r3]
 802127c:	2d00      	cmp	r5, #0
 802127e:	da03      	bge.n	8021288 <_printf_i+0xd0>
 8021280:	232d      	movs	r3, #45	@ 0x2d
 8021282:	426d      	negs	r5, r5
 8021284:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8021288:	4858      	ldr	r0, [pc, #352]	@ (80213ec <_printf_i+0x234>)
 802128a:	230a      	movs	r3, #10
 802128c:	e011      	b.n	80212b2 <_printf_i+0xfa>
 802128e:	6821      	ldr	r1, [r4, #0]
 8021290:	6833      	ldr	r3, [r6, #0]
 8021292:	0608      	lsls	r0, r1, #24
 8021294:	f853 5b04 	ldr.w	r5, [r3], #4
 8021298:	d402      	bmi.n	80212a0 <_printf_i+0xe8>
 802129a:	0649      	lsls	r1, r1, #25
 802129c:	bf48      	it	mi
 802129e:	b2ad      	uxthmi	r5, r5
 80212a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80212a2:	4852      	ldr	r0, [pc, #328]	@ (80213ec <_printf_i+0x234>)
 80212a4:	6033      	str	r3, [r6, #0]
 80212a6:	bf14      	ite	ne
 80212a8:	230a      	movne	r3, #10
 80212aa:	2308      	moveq	r3, #8
 80212ac:	2100      	movs	r1, #0
 80212ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80212b2:	6866      	ldr	r6, [r4, #4]
 80212b4:	60a6      	str	r6, [r4, #8]
 80212b6:	2e00      	cmp	r6, #0
 80212b8:	db05      	blt.n	80212c6 <_printf_i+0x10e>
 80212ba:	6821      	ldr	r1, [r4, #0]
 80212bc:	432e      	orrs	r6, r5
 80212be:	f021 0104 	bic.w	r1, r1, #4
 80212c2:	6021      	str	r1, [r4, #0]
 80212c4:	d04b      	beq.n	802135e <_printf_i+0x1a6>
 80212c6:	4616      	mov	r6, r2
 80212c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80212cc:	fb03 5711 	mls	r7, r3, r1, r5
 80212d0:	5dc7      	ldrb	r7, [r0, r7]
 80212d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80212d6:	462f      	mov	r7, r5
 80212d8:	42bb      	cmp	r3, r7
 80212da:	460d      	mov	r5, r1
 80212dc:	d9f4      	bls.n	80212c8 <_printf_i+0x110>
 80212de:	2b08      	cmp	r3, #8
 80212e0:	d10b      	bne.n	80212fa <_printf_i+0x142>
 80212e2:	6823      	ldr	r3, [r4, #0]
 80212e4:	07df      	lsls	r7, r3, #31
 80212e6:	d508      	bpl.n	80212fa <_printf_i+0x142>
 80212e8:	6923      	ldr	r3, [r4, #16]
 80212ea:	6861      	ldr	r1, [r4, #4]
 80212ec:	4299      	cmp	r1, r3
 80212ee:	bfde      	ittt	le
 80212f0:	2330      	movle	r3, #48	@ 0x30
 80212f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80212f6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80212fa:	1b92      	subs	r2, r2, r6
 80212fc:	6122      	str	r2, [r4, #16]
 80212fe:	f8cd a000 	str.w	sl, [sp]
 8021302:	464b      	mov	r3, r9
 8021304:	aa03      	add	r2, sp, #12
 8021306:	4621      	mov	r1, r4
 8021308:	4640      	mov	r0, r8
 802130a:	f7ff fee7 	bl	80210dc <_printf_common>
 802130e:	3001      	adds	r0, #1
 8021310:	d14a      	bne.n	80213a8 <_printf_i+0x1f0>
 8021312:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021316:	b004      	add	sp, #16
 8021318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802131c:	6823      	ldr	r3, [r4, #0]
 802131e:	f043 0320 	orr.w	r3, r3, #32
 8021322:	6023      	str	r3, [r4, #0]
 8021324:	4832      	ldr	r0, [pc, #200]	@ (80213f0 <_printf_i+0x238>)
 8021326:	2778      	movs	r7, #120	@ 0x78
 8021328:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802132c:	6823      	ldr	r3, [r4, #0]
 802132e:	6831      	ldr	r1, [r6, #0]
 8021330:	061f      	lsls	r7, r3, #24
 8021332:	f851 5b04 	ldr.w	r5, [r1], #4
 8021336:	d402      	bmi.n	802133e <_printf_i+0x186>
 8021338:	065f      	lsls	r7, r3, #25
 802133a:	bf48      	it	mi
 802133c:	b2ad      	uxthmi	r5, r5
 802133e:	6031      	str	r1, [r6, #0]
 8021340:	07d9      	lsls	r1, r3, #31
 8021342:	bf44      	itt	mi
 8021344:	f043 0320 	orrmi.w	r3, r3, #32
 8021348:	6023      	strmi	r3, [r4, #0]
 802134a:	b11d      	cbz	r5, 8021354 <_printf_i+0x19c>
 802134c:	2310      	movs	r3, #16
 802134e:	e7ad      	b.n	80212ac <_printf_i+0xf4>
 8021350:	4826      	ldr	r0, [pc, #152]	@ (80213ec <_printf_i+0x234>)
 8021352:	e7e9      	b.n	8021328 <_printf_i+0x170>
 8021354:	6823      	ldr	r3, [r4, #0]
 8021356:	f023 0320 	bic.w	r3, r3, #32
 802135a:	6023      	str	r3, [r4, #0]
 802135c:	e7f6      	b.n	802134c <_printf_i+0x194>
 802135e:	4616      	mov	r6, r2
 8021360:	e7bd      	b.n	80212de <_printf_i+0x126>
 8021362:	6833      	ldr	r3, [r6, #0]
 8021364:	6825      	ldr	r5, [r4, #0]
 8021366:	6961      	ldr	r1, [r4, #20]
 8021368:	1d18      	adds	r0, r3, #4
 802136a:	6030      	str	r0, [r6, #0]
 802136c:	062e      	lsls	r6, r5, #24
 802136e:	681b      	ldr	r3, [r3, #0]
 8021370:	d501      	bpl.n	8021376 <_printf_i+0x1be>
 8021372:	6019      	str	r1, [r3, #0]
 8021374:	e002      	b.n	802137c <_printf_i+0x1c4>
 8021376:	0668      	lsls	r0, r5, #25
 8021378:	d5fb      	bpl.n	8021372 <_printf_i+0x1ba>
 802137a:	8019      	strh	r1, [r3, #0]
 802137c:	2300      	movs	r3, #0
 802137e:	6123      	str	r3, [r4, #16]
 8021380:	4616      	mov	r6, r2
 8021382:	e7bc      	b.n	80212fe <_printf_i+0x146>
 8021384:	6833      	ldr	r3, [r6, #0]
 8021386:	1d1a      	adds	r2, r3, #4
 8021388:	6032      	str	r2, [r6, #0]
 802138a:	681e      	ldr	r6, [r3, #0]
 802138c:	6862      	ldr	r2, [r4, #4]
 802138e:	2100      	movs	r1, #0
 8021390:	4630      	mov	r0, r6
 8021392:	f7de ff3d 	bl	8000210 <memchr>
 8021396:	b108      	cbz	r0, 802139c <_printf_i+0x1e4>
 8021398:	1b80      	subs	r0, r0, r6
 802139a:	6060      	str	r0, [r4, #4]
 802139c:	6863      	ldr	r3, [r4, #4]
 802139e:	6123      	str	r3, [r4, #16]
 80213a0:	2300      	movs	r3, #0
 80213a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80213a6:	e7aa      	b.n	80212fe <_printf_i+0x146>
 80213a8:	6923      	ldr	r3, [r4, #16]
 80213aa:	4632      	mov	r2, r6
 80213ac:	4649      	mov	r1, r9
 80213ae:	4640      	mov	r0, r8
 80213b0:	47d0      	blx	sl
 80213b2:	3001      	adds	r0, #1
 80213b4:	d0ad      	beq.n	8021312 <_printf_i+0x15a>
 80213b6:	6823      	ldr	r3, [r4, #0]
 80213b8:	079b      	lsls	r3, r3, #30
 80213ba:	d413      	bmi.n	80213e4 <_printf_i+0x22c>
 80213bc:	68e0      	ldr	r0, [r4, #12]
 80213be:	9b03      	ldr	r3, [sp, #12]
 80213c0:	4298      	cmp	r0, r3
 80213c2:	bfb8      	it	lt
 80213c4:	4618      	movlt	r0, r3
 80213c6:	e7a6      	b.n	8021316 <_printf_i+0x15e>
 80213c8:	2301      	movs	r3, #1
 80213ca:	4632      	mov	r2, r6
 80213cc:	4649      	mov	r1, r9
 80213ce:	4640      	mov	r0, r8
 80213d0:	47d0      	blx	sl
 80213d2:	3001      	adds	r0, #1
 80213d4:	d09d      	beq.n	8021312 <_printf_i+0x15a>
 80213d6:	3501      	adds	r5, #1
 80213d8:	68e3      	ldr	r3, [r4, #12]
 80213da:	9903      	ldr	r1, [sp, #12]
 80213dc:	1a5b      	subs	r3, r3, r1
 80213de:	42ab      	cmp	r3, r5
 80213e0:	dcf2      	bgt.n	80213c8 <_printf_i+0x210>
 80213e2:	e7eb      	b.n	80213bc <_printf_i+0x204>
 80213e4:	2500      	movs	r5, #0
 80213e6:	f104 0619 	add.w	r6, r4, #25
 80213ea:	e7f5      	b.n	80213d8 <_printf_i+0x220>
 80213ec:	08026952 	.word	0x08026952
 80213f0:	08026963 	.word	0x08026963

080213f4 <__sflush_r>:
 80213f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80213f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80213fc:	0716      	lsls	r6, r2, #28
 80213fe:	4605      	mov	r5, r0
 8021400:	460c      	mov	r4, r1
 8021402:	d454      	bmi.n	80214ae <__sflush_r+0xba>
 8021404:	684b      	ldr	r3, [r1, #4]
 8021406:	2b00      	cmp	r3, #0
 8021408:	dc02      	bgt.n	8021410 <__sflush_r+0x1c>
 802140a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802140c:	2b00      	cmp	r3, #0
 802140e:	dd48      	ble.n	80214a2 <__sflush_r+0xae>
 8021410:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8021412:	2e00      	cmp	r6, #0
 8021414:	d045      	beq.n	80214a2 <__sflush_r+0xae>
 8021416:	2300      	movs	r3, #0
 8021418:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802141c:	682f      	ldr	r7, [r5, #0]
 802141e:	6a21      	ldr	r1, [r4, #32]
 8021420:	602b      	str	r3, [r5, #0]
 8021422:	d030      	beq.n	8021486 <__sflush_r+0x92>
 8021424:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8021426:	89a3      	ldrh	r3, [r4, #12]
 8021428:	0759      	lsls	r1, r3, #29
 802142a:	d505      	bpl.n	8021438 <__sflush_r+0x44>
 802142c:	6863      	ldr	r3, [r4, #4]
 802142e:	1ad2      	subs	r2, r2, r3
 8021430:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8021432:	b10b      	cbz	r3, 8021438 <__sflush_r+0x44>
 8021434:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8021436:	1ad2      	subs	r2, r2, r3
 8021438:	2300      	movs	r3, #0
 802143a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802143c:	6a21      	ldr	r1, [r4, #32]
 802143e:	4628      	mov	r0, r5
 8021440:	47b0      	blx	r6
 8021442:	1c43      	adds	r3, r0, #1
 8021444:	89a3      	ldrh	r3, [r4, #12]
 8021446:	d106      	bne.n	8021456 <__sflush_r+0x62>
 8021448:	6829      	ldr	r1, [r5, #0]
 802144a:	291d      	cmp	r1, #29
 802144c:	d82b      	bhi.n	80214a6 <__sflush_r+0xb2>
 802144e:	4a2a      	ldr	r2, [pc, #168]	@ (80214f8 <__sflush_r+0x104>)
 8021450:	40ca      	lsrs	r2, r1
 8021452:	07d6      	lsls	r6, r2, #31
 8021454:	d527      	bpl.n	80214a6 <__sflush_r+0xb2>
 8021456:	2200      	movs	r2, #0
 8021458:	6062      	str	r2, [r4, #4]
 802145a:	04d9      	lsls	r1, r3, #19
 802145c:	6922      	ldr	r2, [r4, #16]
 802145e:	6022      	str	r2, [r4, #0]
 8021460:	d504      	bpl.n	802146c <__sflush_r+0x78>
 8021462:	1c42      	adds	r2, r0, #1
 8021464:	d101      	bne.n	802146a <__sflush_r+0x76>
 8021466:	682b      	ldr	r3, [r5, #0]
 8021468:	b903      	cbnz	r3, 802146c <__sflush_r+0x78>
 802146a:	6560      	str	r0, [r4, #84]	@ 0x54
 802146c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802146e:	602f      	str	r7, [r5, #0]
 8021470:	b1b9      	cbz	r1, 80214a2 <__sflush_r+0xae>
 8021472:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8021476:	4299      	cmp	r1, r3
 8021478:	d002      	beq.n	8021480 <__sflush_r+0x8c>
 802147a:	4628      	mov	r0, r5
 802147c:	f7ff fbec 	bl	8020c58 <_free_r>
 8021480:	2300      	movs	r3, #0
 8021482:	6363      	str	r3, [r4, #52]	@ 0x34
 8021484:	e00d      	b.n	80214a2 <__sflush_r+0xae>
 8021486:	2301      	movs	r3, #1
 8021488:	4628      	mov	r0, r5
 802148a:	47b0      	blx	r6
 802148c:	4602      	mov	r2, r0
 802148e:	1c50      	adds	r0, r2, #1
 8021490:	d1c9      	bne.n	8021426 <__sflush_r+0x32>
 8021492:	682b      	ldr	r3, [r5, #0]
 8021494:	2b00      	cmp	r3, #0
 8021496:	d0c6      	beq.n	8021426 <__sflush_r+0x32>
 8021498:	2b1d      	cmp	r3, #29
 802149a:	d001      	beq.n	80214a0 <__sflush_r+0xac>
 802149c:	2b16      	cmp	r3, #22
 802149e:	d11e      	bne.n	80214de <__sflush_r+0xea>
 80214a0:	602f      	str	r7, [r5, #0]
 80214a2:	2000      	movs	r0, #0
 80214a4:	e022      	b.n	80214ec <__sflush_r+0xf8>
 80214a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80214aa:	b21b      	sxth	r3, r3
 80214ac:	e01b      	b.n	80214e6 <__sflush_r+0xf2>
 80214ae:	690f      	ldr	r7, [r1, #16]
 80214b0:	2f00      	cmp	r7, #0
 80214b2:	d0f6      	beq.n	80214a2 <__sflush_r+0xae>
 80214b4:	0793      	lsls	r3, r2, #30
 80214b6:	680e      	ldr	r6, [r1, #0]
 80214b8:	bf08      	it	eq
 80214ba:	694b      	ldreq	r3, [r1, #20]
 80214bc:	600f      	str	r7, [r1, #0]
 80214be:	bf18      	it	ne
 80214c0:	2300      	movne	r3, #0
 80214c2:	eba6 0807 	sub.w	r8, r6, r7
 80214c6:	608b      	str	r3, [r1, #8]
 80214c8:	f1b8 0f00 	cmp.w	r8, #0
 80214cc:	dde9      	ble.n	80214a2 <__sflush_r+0xae>
 80214ce:	6a21      	ldr	r1, [r4, #32]
 80214d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80214d2:	4643      	mov	r3, r8
 80214d4:	463a      	mov	r2, r7
 80214d6:	4628      	mov	r0, r5
 80214d8:	47b0      	blx	r6
 80214da:	2800      	cmp	r0, #0
 80214dc:	dc08      	bgt.n	80214f0 <__sflush_r+0xfc>
 80214de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80214e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80214e6:	81a3      	strh	r3, [r4, #12]
 80214e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80214ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80214f0:	4407      	add	r7, r0
 80214f2:	eba8 0800 	sub.w	r8, r8, r0
 80214f6:	e7e7      	b.n	80214c8 <__sflush_r+0xd4>
 80214f8:	20400001 	.word	0x20400001

080214fc <_fflush_r>:
 80214fc:	b538      	push	{r3, r4, r5, lr}
 80214fe:	690b      	ldr	r3, [r1, #16]
 8021500:	4605      	mov	r5, r0
 8021502:	460c      	mov	r4, r1
 8021504:	b913      	cbnz	r3, 802150c <_fflush_r+0x10>
 8021506:	2500      	movs	r5, #0
 8021508:	4628      	mov	r0, r5
 802150a:	bd38      	pop	{r3, r4, r5, pc}
 802150c:	b118      	cbz	r0, 8021516 <_fflush_r+0x1a>
 802150e:	6a03      	ldr	r3, [r0, #32]
 8021510:	b90b      	cbnz	r3, 8021516 <_fflush_r+0x1a>
 8021512:	f7ff f90b 	bl	802072c <__sinit>
 8021516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802151a:	2b00      	cmp	r3, #0
 802151c:	d0f3      	beq.n	8021506 <_fflush_r+0xa>
 802151e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8021520:	07d0      	lsls	r0, r2, #31
 8021522:	d404      	bmi.n	802152e <_fflush_r+0x32>
 8021524:	0599      	lsls	r1, r3, #22
 8021526:	d402      	bmi.n	802152e <_fflush_r+0x32>
 8021528:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802152a:	f7ff fb66 	bl	8020bfa <__retarget_lock_acquire_recursive>
 802152e:	4628      	mov	r0, r5
 8021530:	4621      	mov	r1, r4
 8021532:	f7ff ff5f 	bl	80213f4 <__sflush_r>
 8021536:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021538:	07da      	lsls	r2, r3, #31
 802153a:	4605      	mov	r5, r0
 802153c:	d4e4      	bmi.n	8021508 <_fflush_r+0xc>
 802153e:	89a3      	ldrh	r3, [r4, #12]
 8021540:	059b      	lsls	r3, r3, #22
 8021542:	d4e1      	bmi.n	8021508 <_fflush_r+0xc>
 8021544:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021546:	f7ff fb59 	bl	8020bfc <__retarget_lock_release_recursive>
 802154a:	e7dd      	b.n	8021508 <_fflush_r+0xc>

0802154c <fiprintf>:
 802154c:	b40e      	push	{r1, r2, r3}
 802154e:	b503      	push	{r0, r1, lr}
 8021550:	4601      	mov	r1, r0
 8021552:	ab03      	add	r3, sp, #12
 8021554:	4805      	ldr	r0, [pc, #20]	@ (802156c <fiprintf+0x20>)
 8021556:	f853 2b04 	ldr.w	r2, [r3], #4
 802155a:	6800      	ldr	r0, [r0, #0]
 802155c:	9301      	str	r3, [sp, #4]
 802155e:	f7ff fca5 	bl	8020eac <_vfiprintf_r>
 8021562:	b002      	add	sp, #8
 8021564:	f85d eb04 	ldr.w	lr, [sp], #4
 8021568:	b003      	add	sp, #12
 802156a:	4770      	bx	lr
 802156c:	20000080 	.word	0x20000080

08021570 <__swhatbuf_r>:
 8021570:	b570      	push	{r4, r5, r6, lr}
 8021572:	460c      	mov	r4, r1
 8021574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021578:	2900      	cmp	r1, #0
 802157a:	b096      	sub	sp, #88	@ 0x58
 802157c:	4615      	mov	r5, r2
 802157e:	461e      	mov	r6, r3
 8021580:	da0d      	bge.n	802159e <__swhatbuf_r+0x2e>
 8021582:	89a3      	ldrh	r3, [r4, #12]
 8021584:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8021588:	f04f 0100 	mov.w	r1, #0
 802158c:	bf14      	ite	ne
 802158e:	2340      	movne	r3, #64	@ 0x40
 8021590:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8021594:	2000      	movs	r0, #0
 8021596:	6031      	str	r1, [r6, #0]
 8021598:	602b      	str	r3, [r5, #0]
 802159a:	b016      	add	sp, #88	@ 0x58
 802159c:	bd70      	pop	{r4, r5, r6, pc}
 802159e:	466a      	mov	r2, sp
 80215a0:	f000 f87c 	bl	802169c <_fstat_r>
 80215a4:	2800      	cmp	r0, #0
 80215a6:	dbec      	blt.n	8021582 <__swhatbuf_r+0x12>
 80215a8:	9901      	ldr	r1, [sp, #4]
 80215aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80215ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80215b2:	4259      	negs	r1, r3
 80215b4:	4159      	adcs	r1, r3
 80215b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80215ba:	e7eb      	b.n	8021594 <__swhatbuf_r+0x24>

080215bc <__smakebuf_r>:
 80215bc:	898b      	ldrh	r3, [r1, #12]
 80215be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80215c0:	079d      	lsls	r5, r3, #30
 80215c2:	4606      	mov	r6, r0
 80215c4:	460c      	mov	r4, r1
 80215c6:	d507      	bpl.n	80215d8 <__smakebuf_r+0x1c>
 80215c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80215cc:	6023      	str	r3, [r4, #0]
 80215ce:	6123      	str	r3, [r4, #16]
 80215d0:	2301      	movs	r3, #1
 80215d2:	6163      	str	r3, [r4, #20]
 80215d4:	b003      	add	sp, #12
 80215d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80215d8:	ab01      	add	r3, sp, #4
 80215da:	466a      	mov	r2, sp
 80215dc:	f7ff ffc8 	bl	8021570 <__swhatbuf_r>
 80215e0:	9f00      	ldr	r7, [sp, #0]
 80215e2:	4605      	mov	r5, r0
 80215e4:	4639      	mov	r1, r7
 80215e6:	4630      	mov	r0, r6
 80215e8:	f7ff fbaa 	bl	8020d40 <_malloc_r>
 80215ec:	b948      	cbnz	r0, 8021602 <__smakebuf_r+0x46>
 80215ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80215f2:	059a      	lsls	r2, r3, #22
 80215f4:	d4ee      	bmi.n	80215d4 <__smakebuf_r+0x18>
 80215f6:	f023 0303 	bic.w	r3, r3, #3
 80215fa:	f043 0302 	orr.w	r3, r3, #2
 80215fe:	81a3      	strh	r3, [r4, #12]
 8021600:	e7e2      	b.n	80215c8 <__smakebuf_r+0xc>
 8021602:	89a3      	ldrh	r3, [r4, #12]
 8021604:	6020      	str	r0, [r4, #0]
 8021606:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802160a:	81a3      	strh	r3, [r4, #12]
 802160c:	9b01      	ldr	r3, [sp, #4]
 802160e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8021612:	b15b      	cbz	r3, 802162c <__smakebuf_r+0x70>
 8021614:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021618:	4630      	mov	r0, r6
 802161a:	f000 f851 	bl	80216c0 <_isatty_r>
 802161e:	b128      	cbz	r0, 802162c <__smakebuf_r+0x70>
 8021620:	89a3      	ldrh	r3, [r4, #12]
 8021622:	f023 0303 	bic.w	r3, r3, #3
 8021626:	f043 0301 	orr.w	r3, r3, #1
 802162a:	81a3      	strh	r3, [r4, #12]
 802162c:	89a3      	ldrh	r3, [r4, #12]
 802162e:	431d      	orrs	r5, r3
 8021630:	81a5      	strh	r5, [r4, #12]
 8021632:	e7cf      	b.n	80215d4 <__smakebuf_r+0x18>

08021634 <_putc_r>:
 8021634:	b570      	push	{r4, r5, r6, lr}
 8021636:	460d      	mov	r5, r1
 8021638:	4614      	mov	r4, r2
 802163a:	4606      	mov	r6, r0
 802163c:	b118      	cbz	r0, 8021646 <_putc_r+0x12>
 802163e:	6a03      	ldr	r3, [r0, #32]
 8021640:	b90b      	cbnz	r3, 8021646 <_putc_r+0x12>
 8021642:	f7ff f873 	bl	802072c <__sinit>
 8021646:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021648:	07d8      	lsls	r0, r3, #31
 802164a:	d405      	bmi.n	8021658 <_putc_r+0x24>
 802164c:	89a3      	ldrh	r3, [r4, #12]
 802164e:	0599      	lsls	r1, r3, #22
 8021650:	d402      	bmi.n	8021658 <_putc_r+0x24>
 8021652:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021654:	f7ff fad1 	bl	8020bfa <__retarget_lock_acquire_recursive>
 8021658:	68a3      	ldr	r3, [r4, #8]
 802165a:	3b01      	subs	r3, #1
 802165c:	2b00      	cmp	r3, #0
 802165e:	60a3      	str	r3, [r4, #8]
 8021660:	da05      	bge.n	802166e <_putc_r+0x3a>
 8021662:	69a2      	ldr	r2, [r4, #24]
 8021664:	4293      	cmp	r3, r2
 8021666:	db12      	blt.n	802168e <_putc_r+0x5a>
 8021668:	b2eb      	uxtb	r3, r5
 802166a:	2b0a      	cmp	r3, #10
 802166c:	d00f      	beq.n	802168e <_putc_r+0x5a>
 802166e:	6823      	ldr	r3, [r4, #0]
 8021670:	1c5a      	adds	r2, r3, #1
 8021672:	6022      	str	r2, [r4, #0]
 8021674:	701d      	strb	r5, [r3, #0]
 8021676:	b2ed      	uxtb	r5, r5
 8021678:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802167a:	07da      	lsls	r2, r3, #31
 802167c:	d405      	bmi.n	802168a <_putc_r+0x56>
 802167e:	89a3      	ldrh	r3, [r4, #12]
 8021680:	059b      	lsls	r3, r3, #22
 8021682:	d402      	bmi.n	802168a <_putc_r+0x56>
 8021684:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021686:	f7ff fab9 	bl	8020bfc <__retarget_lock_release_recursive>
 802168a:	4628      	mov	r0, r5
 802168c:	bd70      	pop	{r4, r5, r6, pc}
 802168e:	4629      	mov	r1, r5
 8021690:	4622      	mov	r2, r4
 8021692:	4630      	mov	r0, r6
 8021694:	f7ff f93b 	bl	802090e <__swbuf_r>
 8021698:	4605      	mov	r5, r0
 802169a:	e7ed      	b.n	8021678 <_putc_r+0x44>

0802169c <_fstat_r>:
 802169c:	b538      	push	{r3, r4, r5, lr}
 802169e:	4d07      	ldr	r5, [pc, #28]	@ (80216bc <_fstat_r+0x20>)
 80216a0:	2300      	movs	r3, #0
 80216a2:	4604      	mov	r4, r0
 80216a4:	4608      	mov	r0, r1
 80216a6:	4611      	mov	r1, r2
 80216a8:	602b      	str	r3, [r5, #0]
 80216aa:	f7e0 f9af 	bl	8001a0c <_fstat>
 80216ae:	1c43      	adds	r3, r0, #1
 80216b0:	d102      	bne.n	80216b8 <_fstat_r+0x1c>
 80216b2:	682b      	ldr	r3, [r5, #0]
 80216b4:	b103      	cbz	r3, 80216b8 <_fstat_r+0x1c>
 80216b6:	6023      	str	r3, [r4, #0]
 80216b8:	bd38      	pop	{r3, r4, r5, pc}
 80216ba:	bf00      	nop
 80216bc:	2002d980 	.word	0x2002d980

080216c0 <_isatty_r>:
 80216c0:	b538      	push	{r3, r4, r5, lr}
 80216c2:	4d06      	ldr	r5, [pc, #24]	@ (80216dc <_isatty_r+0x1c>)
 80216c4:	2300      	movs	r3, #0
 80216c6:	4604      	mov	r4, r0
 80216c8:	4608      	mov	r0, r1
 80216ca:	602b      	str	r3, [r5, #0]
 80216cc:	f7e0 f9ae 	bl	8001a2c <_isatty>
 80216d0:	1c43      	adds	r3, r0, #1
 80216d2:	d102      	bne.n	80216da <_isatty_r+0x1a>
 80216d4:	682b      	ldr	r3, [r5, #0]
 80216d6:	b103      	cbz	r3, 80216da <_isatty_r+0x1a>
 80216d8:	6023      	str	r3, [r4, #0]
 80216da:	bd38      	pop	{r3, r4, r5, pc}
 80216dc:	2002d980 	.word	0x2002d980

080216e0 <_sbrk_r>:
 80216e0:	b538      	push	{r3, r4, r5, lr}
 80216e2:	4d06      	ldr	r5, [pc, #24]	@ (80216fc <_sbrk_r+0x1c>)
 80216e4:	2300      	movs	r3, #0
 80216e6:	4604      	mov	r4, r0
 80216e8:	4608      	mov	r0, r1
 80216ea:	602b      	str	r3, [r5, #0]
 80216ec:	f7e0 f9b6 	bl	8001a5c <_sbrk>
 80216f0:	1c43      	adds	r3, r0, #1
 80216f2:	d102      	bne.n	80216fa <_sbrk_r+0x1a>
 80216f4:	682b      	ldr	r3, [r5, #0]
 80216f6:	b103      	cbz	r3, 80216fa <_sbrk_r+0x1a>
 80216f8:	6023      	str	r3, [r4, #0]
 80216fa:	bd38      	pop	{r3, r4, r5, pc}
 80216fc:	2002d980 	.word	0x2002d980

08021700 <abort>:
 8021700:	b508      	push	{r3, lr}
 8021702:	2006      	movs	r0, #6
 8021704:	f000 f82c 	bl	8021760 <raise>
 8021708:	2001      	movs	r0, #1
 802170a:	f7e0 f94b 	bl	80019a4 <_exit>

0802170e <_raise_r>:
 802170e:	291f      	cmp	r1, #31
 8021710:	b538      	push	{r3, r4, r5, lr}
 8021712:	4605      	mov	r5, r0
 8021714:	460c      	mov	r4, r1
 8021716:	d904      	bls.n	8021722 <_raise_r+0x14>
 8021718:	2316      	movs	r3, #22
 802171a:	6003      	str	r3, [r0, #0]
 802171c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021720:	bd38      	pop	{r3, r4, r5, pc}
 8021722:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8021724:	b112      	cbz	r2, 802172c <_raise_r+0x1e>
 8021726:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802172a:	b94b      	cbnz	r3, 8021740 <_raise_r+0x32>
 802172c:	4628      	mov	r0, r5
 802172e:	f000 f831 	bl	8021794 <_getpid_r>
 8021732:	4622      	mov	r2, r4
 8021734:	4601      	mov	r1, r0
 8021736:	4628      	mov	r0, r5
 8021738:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802173c:	f000 b818 	b.w	8021770 <_kill_r>
 8021740:	2b01      	cmp	r3, #1
 8021742:	d00a      	beq.n	802175a <_raise_r+0x4c>
 8021744:	1c59      	adds	r1, r3, #1
 8021746:	d103      	bne.n	8021750 <_raise_r+0x42>
 8021748:	2316      	movs	r3, #22
 802174a:	6003      	str	r3, [r0, #0]
 802174c:	2001      	movs	r0, #1
 802174e:	e7e7      	b.n	8021720 <_raise_r+0x12>
 8021750:	2100      	movs	r1, #0
 8021752:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8021756:	4620      	mov	r0, r4
 8021758:	4798      	blx	r3
 802175a:	2000      	movs	r0, #0
 802175c:	e7e0      	b.n	8021720 <_raise_r+0x12>
	...

08021760 <raise>:
 8021760:	4b02      	ldr	r3, [pc, #8]	@ (802176c <raise+0xc>)
 8021762:	4601      	mov	r1, r0
 8021764:	6818      	ldr	r0, [r3, #0]
 8021766:	f7ff bfd2 	b.w	802170e <_raise_r>
 802176a:	bf00      	nop
 802176c:	20000080 	.word	0x20000080

08021770 <_kill_r>:
 8021770:	b538      	push	{r3, r4, r5, lr}
 8021772:	4d07      	ldr	r5, [pc, #28]	@ (8021790 <_kill_r+0x20>)
 8021774:	2300      	movs	r3, #0
 8021776:	4604      	mov	r4, r0
 8021778:	4608      	mov	r0, r1
 802177a:	4611      	mov	r1, r2
 802177c:	602b      	str	r3, [r5, #0]
 802177e:	f7e0 f8ff 	bl	8001980 <_kill>
 8021782:	1c43      	adds	r3, r0, #1
 8021784:	d102      	bne.n	802178c <_kill_r+0x1c>
 8021786:	682b      	ldr	r3, [r5, #0]
 8021788:	b103      	cbz	r3, 802178c <_kill_r+0x1c>
 802178a:	6023      	str	r3, [r4, #0]
 802178c:	bd38      	pop	{r3, r4, r5, pc}
 802178e:	bf00      	nop
 8021790:	2002d980 	.word	0x2002d980

08021794 <_getpid_r>:
 8021794:	f7e0 b8ec 	b.w	8001970 <_getpid>

08021798 <_init>:
 8021798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802179a:	bf00      	nop
 802179c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802179e:	bc08      	pop	{r3}
 80217a0:	469e      	mov	lr, r3
 80217a2:	4770      	bx	lr

080217a4 <_fini>:
 80217a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80217a6:	bf00      	nop
 80217a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80217aa:	bc08      	pop	{r3}
 80217ac:	469e      	mov	lr, r3
 80217ae:	4770      	bx	lr
